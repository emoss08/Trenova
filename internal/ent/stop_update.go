// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/stop"
	"github.com/google/uuid"
)

// StopUpdate is the builder for updating Stop entities.
type StopUpdate struct {
	config
	hooks     []Hook
	mutation  *StopMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StopUpdate builder.
func (su *StopUpdate) Where(ps ...predicate.Stop) *StopUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetOrganizationID sets the "organization_id" field.
func (su *StopUpdate) SetOrganizationID(u uuid.UUID) *StopUpdate {
	su.mutation.SetOrganizationID(u)
	return su
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (su *StopUpdate) SetNillableOrganizationID(u *uuid.UUID) *StopUpdate {
	if u != nil {
		su.SetOrganizationID(*u)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StopUpdate) SetUpdatedAt(t time.Time) *StopUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetVersion sets the "version" field.
func (su *StopUpdate) SetVersion(i int) *StopUpdate {
	su.mutation.ResetVersion()
	su.mutation.SetVersion(i)
	return su
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (su *StopUpdate) SetNillableVersion(i *int) *StopUpdate {
	if i != nil {
		su.SetVersion(*i)
	}
	return su
}

// AddVersion adds i to the "version" field.
func (su *StopUpdate) AddVersion(i int) *StopUpdate {
	su.mutation.AddVersion(i)
	return su
}

// SetStatus sets the "status" field.
func (su *StopUpdate) SetStatus(s stop.Status) *StopUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StopUpdate) SetNillableStatus(s *stop.Status) *StopUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetStopType sets the "stop_type" field.
func (su *StopUpdate) SetStopType(st stop.StopType) *StopUpdate {
	su.mutation.SetStopType(st)
	return su
}

// SetNillableStopType sets the "stop_type" field if the given value is not nil.
func (su *StopUpdate) SetNillableStopType(st *stop.StopType) *StopUpdate {
	if st != nil {
		su.SetStopType(*st)
	}
	return su
}

// SetSequence sets the "sequence" field.
func (su *StopUpdate) SetSequence(i int) *StopUpdate {
	su.mutation.ResetSequence()
	su.mutation.SetSequence(i)
	return su
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (su *StopUpdate) SetNillableSequence(i *int) *StopUpdate {
	if i != nil {
		su.SetSequence(*i)
	}
	return su
}

// AddSequence adds i to the "sequence" field.
func (su *StopUpdate) AddSequence(i int) *StopUpdate {
	su.mutation.AddSequence(i)
	return su
}

// SetLocationID sets the "location_id" field.
func (su *StopUpdate) SetLocationID(u uuid.UUID) *StopUpdate {
	su.mutation.SetLocationID(u)
	return su
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (su *StopUpdate) SetNillableLocationID(u *uuid.UUID) *StopUpdate {
	if u != nil {
		su.SetLocationID(*u)
	}
	return su
}

// ClearLocationID clears the value of the "location_id" field.
func (su *StopUpdate) ClearLocationID() *StopUpdate {
	su.mutation.ClearLocationID()
	return su
}

// SetPieces sets the "pieces" field.
func (su *StopUpdate) SetPieces(f float64) *StopUpdate {
	su.mutation.ResetPieces()
	su.mutation.SetPieces(f)
	return su
}

// SetNillablePieces sets the "pieces" field if the given value is not nil.
func (su *StopUpdate) SetNillablePieces(f *float64) *StopUpdate {
	if f != nil {
		su.SetPieces(*f)
	}
	return su
}

// AddPieces adds f to the "pieces" field.
func (su *StopUpdate) AddPieces(f float64) *StopUpdate {
	su.mutation.AddPieces(f)
	return su
}

// ClearPieces clears the value of the "pieces" field.
func (su *StopUpdate) ClearPieces() *StopUpdate {
	su.mutation.ClearPieces()
	return su
}

// SetWeight sets the "weight" field.
func (su *StopUpdate) SetWeight(f float64) *StopUpdate {
	su.mutation.ResetWeight()
	su.mutation.SetWeight(f)
	return su
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (su *StopUpdate) SetNillableWeight(f *float64) *StopUpdate {
	if f != nil {
		su.SetWeight(*f)
	}
	return su
}

// AddWeight adds f to the "weight" field.
func (su *StopUpdate) AddWeight(f float64) *StopUpdate {
	su.mutation.AddWeight(f)
	return su
}

// ClearWeight clears the value of the "weight" field.
func (su *StopUpdate) ClearWeight() *StopUpdate {
	su.mutation.ClearWeight()
	return su
}

// SetAddressLine sets the "address_line" field.
func (su *StopUpdate) SetAddressLine(s string) *StopUpdate {
	su.mutation.SetAddressLine(s)
	return su
}

// SetNillableAddressLine sets the "address_line" field if the given value is not nil.
func (su *StopUpdate) SetNillableAddressLine(s *string) *StopUpdate {
	if s != nil {
		su.SetAddressLine(*s)
	}
	return su
}

// ClearAddressLine clears the value of the "address_line" field.
func (su *StopUpdate) ClearAddressLine() *StopUpdate {
	su.mutation.ClearAddressLine()
	return su
}

// SetAppointmentStart sets the "appointment_start" field.
func (su *StopUpdate) SetAppointmentStart(t time.Time) *StopUpdate {
	su.mutation.SetAppointmentStart(t)
	return su
}

// SetNillableAppointmentStart sets the "appointment_start" field if the given value is not nil.
func (su *StopUpdate) SetNillableAppointmentStart(t *time.Time) *StopUpdate {
	if t != nil {
		su.SetAppointmentStart(*t)
	}
	return su
}

// ClearAppointmentStart clears the value of the "appointment_start" field.
func (su *StopUpdate) ClearAppointmentStart() *StopUpdate {
	su.mutation.ClearAppointmentStart()
	return su
}

// SetAppointmentEnd sets the "appointment_end" field.
func (su *StopUpdate) SetAppointmentEnd(t time.Time) *StopUpdate {
	su.mutation.SetAppointmentEnd(t)
	return su
}

// SetNillableAppointmentEnd sets the "appointment_end" field if the given value is not nil.
func (su *StopUpdate) SetNillableAppointmentEnd(t *time.Time) *StopUpdate {
	if t != nil {
		su.SetAppointmentEnd(*t)
	}
	return su
}

// ClearAppointmentEnd clears the value of the "appointment_end" field.
func (su *StopUpdate) ClearAppointmentEnd() *StopUpdate {
	su.mutation.ClearAppointmentEnd()
	return su
}

// SetArrivalTime sets the "arrival_time" field.
func (su *StopUpdate) SetArrivalTime(t time.Time) *StopUpdate {
	su.mutation.SetArrivalTime(t)
	return su
}

// SetNillableArrivalTime sets the "arrival_time" field if the given value is not nil.
func (su *StopUpdate) SetNillableArrivalTime(t *time.Time) *StopUpdate {
	if t != nil {
		su.SetArrivalTime(*t)
	}
	return su
}

// ClearArrivalTime clears the value of the "arrival_time" field.
func (su *StopUpdate) ClearArrivalTime() *StopUpdate {
	su.mutation.ClearArrivalTime()
	return su
}

// SetDepartureTime sets the "departure_time" field.
func (su *StopUpdate) SetDepartureTime(t time.Time) *StopUpdate {
	su.mutation.SetDepartureTime(t)
	return su
}

// SetNillableDepartureTime sets the "departure_time" field if the given value is not nil.
func (su *StopUpdate) SetNillableDepartureTime(t *time.Time) *StopUpdate {
	if t != nil {
		su.SetDepartureTime(*t)
	}
	return su
}

// ClearDepartureTime clears the value of the "departure_time" field.
func (su *StopUpdate) ClearDepartureTime() *StopUpdate {
	su.mutation.ClearDepartureTime()
	return su
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (su *StopUpdate) SetOrganization(o *Organization) *StopUpdate {
	return su.SetOrganizationID(o.ID)
}

// Mutation returns the StopMutation object of the builder.
func (su *StopUpdate) Mutation() *StopMutation {
	return su.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (su *StopUpdate) ClearOrganization() *StopUpdate {
	su.mutation.ClearOrganization()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StopUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StopUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StopUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StopUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StopUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if stop.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stop.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stop.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *StopUpdate) check() error {
	if v, ok := su.mutation.Status(); ok {
		if err := stop.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Stop.status": %w`, err)}
		}
	}
	if v, ok := su.mutation.StopType(); ok {
		if err := stop.StopTypeValidator(v); err != nil {
			return &ValidationError{Name: "stop_type", err: fmt.Errorf(`ent: validator failed for field "Stop.stop_type": %w`, err)}
		}
	}
	if v, ok := su.mutation.Sequence(); ok {
		if err := stop.SequenceValidator(v); err != nil {
			return &ValidationError{Name: "sequence", err: fmt.Errorf(`ent: validator failed for field "Stop.sequence": %w`, err)}
		}
	}
	if v, ok := su.mutation.Pieces(); ok {
		if err := stop.PiecesValidator(v); err != nil {
			return &ValidationError{Name: "pieces", err: fmt.Errorf(`ent: validator failed for field "Stop.pieces": %w`, err)}
		}
	}
	if v, ok := su.mutation.Weight(); ok {
		if err := stop.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Stop.weight": %w`, err)}
		}
	}
	if _, ok := su.mutation.BusinessUnitID(); su.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stop.business_unit"`)
	}
	if _, ok := su.mutation.OrganizationID(); su.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stop.organization"`)
	}
	if _, ok := su.mutation.ShipmentMoveID(); su.mutation.ShipmentMoveCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stop.shipment_move"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StopUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StopUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StopUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stop.Table, stop.Columns, sqlgraph.NewFieldSpec(stop.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(stop.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Version(); ok {
		_spec.SetField(stop.FieldVersion, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedVersion(); ok {
		_spec.AddField(stop.FieldVersion, field.TypeInt, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(stop.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := su.mutation.StopType(); ok {
		_spec.SetField(stop.FieldStopType, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Sequence(); ok {
		_spec.SetField(stop.FieldSequence, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSequence(); ok {
		_spec.AddField(stop.FieldSequence, field.TypeInt, value)
	}
	if value, ok := su.mutation.LocationID(); ok {
		_spec.SetField(stop.FieldLocationID, field.TypeUUID, value)
	}
	if su.mutation.LocationIDCleared() {
		_spec.ClearField(stop.FieldLocationID, field.TypeUUID)
	}
	if value, ok := su.mutation.Pieces(); ok {
		_spec.SetField(stop.FieldPieces, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedPieces(); ok {
		_spec.AddField(stop.FieldPieces, field.TypeFloat64, value)
	}
	if su.mutation.PiecesCleared() {
		_spec.ClearField(stop.FieldPieces, field.TypeFloat64)
	}
	if value, ok := su.mutation.Weight(); ok {
		_spec.SetField(stop.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedWeight(); ok {
		_spec.AddField(stop.FieldWeight, field.TypeFloat64, value)
	}
	if su.mutation.WeightCleared() {
		_spec.ClearField(stop.FieldWeight, field.TypeFloat64)
	}
	if value, ok := su.mutation.AddressLine(); ok {
		_spec.SetField(stop.FieldAddressLine, field.TypeString, value)
	}
	if su.mutation.AddressLineCleared() {
		_spec.ClearField(stop.FieldAddressLine, field.TypeString)
	}
	if value, ok := su.mutation.AppointmentStart(); ok {
		_spec.SetField(stop.FieldAppointmentStart, field.TypeTime, value)
	}
	if su.mutation.AppointmentStartCleared() {
		_spec.ClearField(stop.FieldAppointmentStart, field.TypeTime)
	}
	if value, ok := su.mutation.AppointmentEnd(); ok {
		_spec.SetField(stop.FieldAppointmentEnd, field.TypeTime, value)
	}
	if su.mutation.AppointmentEndCleared() {
		_spec.ClearField(stop.FieldAppointmentEnd, field.TypeTime)
	}
	if value, ok := su.mutation.ArrivalTime(); ok {
		_spec.SetField(stop.FieldArrivalTime, field.TypeTime, value)
	}
	if su.mutation.ArrivalTimeCleared() {
		_spec.ClearField(stop.FieldArrivalTime, field.TypeTime)
	}
	if value, ok := su.mutation.DepartureTime(); ok {
		_spec.SetField(stop.FieldDepartureTime, field.TypeTime, value)
	}
	if su.mutation.DepartureTimeCleared() {
		_spec.ClearField(stop.FieldDepartureTime, field.TypeTime)
	}
	if su.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stop.OrganizationTable,
			Columns: []string{stop.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stop.OrganizationTable,
			Columns: []string{stop.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StopUpdateOne is the builder for updating a single Stop entity.
type StopUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StopMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (suo *StopUpdateOne) SetOrganizationID(u uuid.UUID) *StopUpdateOne {
	suo.mutation.SetOrganizationID(u)
	return suo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *StopUpdateOne {
	if u != nil {
		suo.SetOrganizationID(*u)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StopUpdateOne) SetUpdatedAt(t time.Time) *StopUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetVersion sets the "version" field.
func (suo *StopUpdateOne) SetVersion(i int) *StopUpdateOne {
	suo.mutation.ResetVersion()
	suo.mutation.SetVersion(i)
	return suo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableVersion(i *int) *StopUpdateOne {
	if i != nil {
		suo.SetVersion(*i)
	}
	return suo
}

// AddVersion adds i to the "version" field.
func (suo *StopUpdateOne) AddVersion(i int) *StopUpdateOne {
	suo.mutation.AddVersion(i)
	return suo
}

// SetStatus sets the "status" field.
func (suo *StopUpdateOne) SetStatus(s stop.Status) *StopUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableStatus(s *stop.Status) *StopUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetStopType sets the "stop_type" field.
func (suo *StopUpdateOne) SetStopType(st stop.StopType) *StopUpdateOne {
	suo.mutation.SetStopType(st)
	return suo
}

// SetNillableStopType sets the "stop_type" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableStopType(st *stop.StopType) *StopUpdateOne {
	if st != nil {
		suo.SetStopType(*st)
	}
	return suo
}

// SetSequence sets the "sequence" field.
func (suo *StopUpdateOne) SetSequence(i int) *StopUpdateOne {
	suo.mutation.ResetSequence()
	suo.mutation.SetSequence(i)
	return suo
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableSequence(i *int) *StopUpdateOne {
	if i != nil {
		suo.SetSequence(*i)
	}
	return suo
}

// AddSequence adds i to the "sequence" field.
func (suo *StopUpdateOne) AddSequence(i int) *StopUpdateOne {
	suo.mutation.AddSequence(i)
	return suo
}

// SetLocationID sets the "location_id" field.
func (suo *StopUpdateOne) SetLocationID(u uuid.UUID) *StopUpdateOne {
	suo.mutation.SetLocationID(u)
	return suo
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableLocationID(u *uuid.UUID) *StopUpdateOne {
	if u != nil {
		suo.SetLocationID(*u)
	}
	return suo
}

// ClearLocationID clears the value of the "location_id" field.
func (suo *StopUpdateOne) ClearLocationID() *StopUpdateOne {
	suo.mutation.ClearLocationID()
	return suo
}

// SetPieces sets the "pieces" field.
func (suo *StopUpdateOne) SetPieces(f float64) *StopUpdateOne {
	suo.mutation.ResetPieces()
	suo.mutation.SetPieces(f)
	return suo
}

// SetNillablePieces sets the "pieces" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillablePieces(f *float64) *StopUpdateOne {
	if f != nil {
		suo.SetPieces(*f)
	}
	return suo
}

// AddPieces adds f to the "pieces" field.
func (suo *StopUpdateOne) AddPieces(f float64) *StopUpdateOne {
	suo.mutation.AddPieces(f)
	return suo
}

// ClearPieces clears the value of the "pieces" field.
func (suo *StopUpdateOne) ClearPieces() *StopUpdateOne {
	suo.mutation.ClearPieces()
	return suo
}

// SetWeight sets the "weight" field.
func (suo *StopUpdateOne) SetWeight(f float64) *StopUpdateOne {
	suo.mutation.ResetWeight()
	suo.mutation.SetWeight(f)
	return suo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableWeight(f *float64) *StopUpdateOne {
	if f != nil {
		suo.SetWeight(*f)
	}
	return suo
}

// AddWeight adds f to the "weight" field.
func (suo *StopUpdateOne) AddWeight(f float64) *StopUpdateOne {
	suo.mutation.AddWeight(f)
	return suo
}

// ClearWeight clears the value of the "weight" field.
func (suo *StopUpdateOne) ClearWeight() *StopUpdateOne {
	suo.mutation.ClearWeight()
	return suo
}

// SetAddressLine sets the "address_line" field.
func (suo *StopUpdateOne) SetAddressLine(s string) *StopUpdateOne {
	suo.mutation.SetAddressLine(s)
	return suo
}

// SetNillableAddressLine sets the "address_line" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableAddressLine(s *string) *StopUpdateOne {
	if s != nil {
		suo.SetAddressLine(*s)
	}
	return suo
}

// ClearAddressLine clears the value of the "address_line" field.
func (suo *StopUpdateOne) ClearAddressLine() *StopUpdateOne {
	suo.mutation.ClearAddressLine()
	return suo
}

// SetAppointmentStart sets the "appointment_start" field.
func (suo *StopUpdateOne) SetAppointmentStart(t time.Time) *StopUpdateOne {
	suo.mutation.SetAppointmentStart(t)
	return suo
}

// SetNillableAppointmentStart sets the "appointment_start" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableAppointmentStart(t *time.Time) *StopUpdateOne {
	if t != nil {
		suo.SetAppointmentStart(*t)
	}
	return suo
}

// ClearAppointmentStart clears the value of the "appointment_start" field.
func (suo *StopUpdateOne) ClearAppointmentStart() *StopUpdateOne {
	suo.mutation.ClearAppointmentStart()
	return suo
}

// SetAppointmentEnd sets the "appointment_end" field.
func (suo *StopUpdateOne) SetAppointmentEnd(t time.Time) *StopUpdateOne {
	suo.mutation.SetAppointmentEnd(t)
	return suo
}

// SetNillableAppointmentEnd sets the "appointment_end" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableAppointmentEnd(t *time.Time) *StopUpdateOne {
	if t != nil {
		suo.SetAppointmentEnd(*t)
	}
	return suo
}

// ClearAppointmentEnd clears the value of the "appointment_end" field.
func (suo *StopUpdateOne) ClearAppointmentEnd() *StopUpdateOne {
	suo.mutation.ClearAppointmentEnd()
	return suo
}

// SetArrivalTime sets the "arrival_time" field.
func (suo *StopUpdateOne) SetArrivalTime(t time.Time) *StopUpdateOne {
	suo.mutation.SetArrivalTime(t)
	return suo
}

// SetNillableArrivalTime sets the "arrival_time" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableArrivalTime(t *time.Time) *StopUpdateOne {
	if t != nil {
		suo.SetArrivalTime(*t)
	}
	return suo
}

// ClearArrivalTime clears the value of the "arrival_time" field.
func (suo *StopUpdateOne) ClearArrivalTime() *StopUpdateOne {
	suo.mutation.ClearArrivalTime()
	return suo
}

// SetDepartureTime sets the "departure_time" field.
func (suo *StopUpdateOne) SetDepartureTime(t time.Time) *StopUpdateOne {
	suo.mutation.SetDepartureTime(t)
	return suo
}

// SetNillableDepartureTime sets the "departure_time" field if the given value is not nil.
func (suo *StopUpdateOne) SetNillableDepartureTime(t *time.Time) *StopUpdateOne {
	if t != nil {
		suo.SetDepartureTime(*t)
	}
	return suo
}

// ClearDepartureTime clears the value of the "departure_time" field.
func (suo *StopUpdateOne) ClearDepartureTime() *StopUpdateOne {
	suo.mutation.ClearDepartureTime()
	return suo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (suo *StopUpdateOne) SetOrganization(o *Organization) *StopUpdateOne {
	return suo.SetOrganizationID(o.ID)
}

// Mutation returns the StopMutation object of the builder.
func (suo *StopUpdateOne) Mutation() *StopMutation {
	return suo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (suo *StopUpdateOne) ClearOrganization() *StopUpdateOne {
	suo.mutation.ClearOrganization()
	return suo
}

// Where appends a list predicates to the StopUpdate builder.
func (suo *StopUpdateOne) Where(ps ...predicate.Stop) *StopUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StopUpdateOne) Select(field string, fields ...string) *StopUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stop entity.
func (suo *StopUpdateOne) Save(ctx context.Context) (*Stop, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StopUpdateOne) SaveX(ctx context.Context) *Stop {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StopUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StopUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StopUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if stop.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stop.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stop.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *StopUpdateOne) check() error {
	if v, ok := suo.mutation.Status(); ok {
		if err := stop.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Stop.status": %w`, err)}
		}
	}
	if v, ok := suo.mutation.StopType(); ok {
		if err := stop.StopTypeValidator(v); err != nil {
			return &ValidationError{Name: "stop_type", err: fmt.Errorf(`ent: validator failed for field "Stop.stop_type": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Sequence(); ok {
		if err := stop.SequenceValidator(v); err != nil {
			return &ValidationError{Name: "sequence", err: fmt.Errorf(`ent: validator failed for field "Stop.sequence": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Pieces(); ok {
		if err := stop.PiecesValidator(v); err != nil {
			return &ValidationError{Name: "pieces", err: fmt.Errorf(`ent: validator failed for field "Stop.pieces": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Weight(); ok {
		if err := stop.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Stop.weight": %w`, err)}
		}
	}
	if _, ok := suo.mutation.BusinessUnitID(); suo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stop.business_unit"`)
	}
	if _, ok := suo.mutation.OrganizationID(); suo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stop.organization"`)
	}
	if _, ok := suo.mutation.ShipmentMoveID(); suo.mutation.ShipmentMoveCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stop.shipment_move"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StopUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StopUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StopUpdateOne) sqlSave(ctx context.Context) (_node *Stop, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stop.Table, stop.Columns, sqlgraph.NewFieldSpec(stop.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stop.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stop.FieldID)
		for _, f := range fields {
			if !stop.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(stop.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Version(); ok {
		_spec.SetField(stop.FieldVersion, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedVersion(); ok {
		_spec.AddField(stop.FieldVersion, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(stop.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.StopType(); ok {
		_spec.SetField(stop.FieldStopType, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Sequence(); ok {
		_spec.SetField(stop.FieldSequence, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSequence(); ok {
		_spec.AddField(stop.FieldSequence, field.TypeInt, value)
	}
	if value, ok := suo.mutation.LocationID(); ok {
		_spec.SetField(stop.FieldLocationID, field.TypeUUID, value)
	}
	if suo.mutation.LocationIDCleared() {
		_spec.ClearField(stop.FieldLocationID, field.TypeUUID)
	}
	if value, ok := suo.mutation.Pieces(); ok {
		_spec.SetField(stop.FieldPieces, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedPieces(); ok {
		_spec.AddField(stop.FieldPieces, field.TypeFloat64, value)
	}
	if suo.mutation.PiecesCleared() {
		_spec.ClearField(stop.FieldPieces, field.TypeFloat64)
	}
	if value, ok := suo.mutation.Weight(); ok {
		_spec.SetField(stop.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedWeight(); ok {
		_spec.AddField(stop.FieldWeight, field.TypeFloat64, value)
	}
	if suo.mutation.WeightCleared() {
		_spec.ClearField(stop.FieldWeight, field.TypeFloat64)
	}
	if value, ok := suo.mutation.AddressLine(); ok {
		_spec.SetField(stop.FieldAddressLine, field.TypeString, value)
	}
	if suo.mutation.AddressLineCleared() {
		_spec.ClearField(stop.FieldAddressLine, field.TypeString)
	}
	if value, ok := suo.mutation.AppointmentStart(); ok {
		_spec.SetField(stop.FieldAppointmentStart, field.TypeTime, value)
	}
	if suo.mutation.AppointmentStartCleared() {
		_spec.ClearField(stop.FieldAppointmentStart, field.TypeTime)
	}
	if value, ok := suo.mutation.AppointmentEnd(); ok {
		_spec.SetField(stop.FieldAppointmentEnd, field.TypeTime, value)
	}
	if suo.mutation.AppointmentEndCleared() {
		_spec.ClearField(stop.FieldAppointmentEnd, field.TypeTime)
	}
	if value, ok := suo.mutation.ArrivalTime(); ok {
		_spec.SetField(stop.FieldArrivalTime, field.TypeTime, value)
	}
	if suo.mutation.ArrivalTimeCleared() {
		_spec.ClearField(stop.FieldArrivalTime, field.TypeTime)
	}
	if value, ok := suo.mutation.DepartureTime(); ok {
		_spec.SetField(stop.FieldDepartureTime, field.TypeTime, value)
	}
	if suo.mutation.DepartureTimeCleared() {
		_spec.ClearField(stop.FieldDepartureTime, field.TypeTime)
	}
	if suo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stop.OrganizationTable,
			Columns: []string{stop.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stop.OrganizationTable,
			Columns: []string{stop.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Stop{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
