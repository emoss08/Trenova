// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/shipmentcommodity"
	"github.com/google/uuid"
)

// ShipmentCommodityUpdate is the builder for updating ShipmentCommodity entities.
type ShipmentCommodityUpdate struct {
	config
	hooks     []Hook
	mutation  *ShipmentCommodityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShipmentCommodityUpdate builder.
func (scu *ShipmentCommodityUpdate) Where(ps ...predicate.ShipmentCommodity) *ShipmentCommodityUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *ShipmentCommodityUpdate) SetUpdatedAt(t time.Time) *ShipmentCommodityUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetVersion sets the "version" field.
func (scu *ShipmentCommodityUpdate) SetVersion(i int) *ShipmentCommodityUpdate {
	scu.mutation.ResetVersion()
	scu.mutation.SetVersion(i)
	return scu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (scu *ShipmentCommodityUpdate) SetNillableVersion(i *int) *ShipmentCommodityUpdate {
	if i != nil {
		scu.SetVersion(*i)
	}
	return scu
}

// AddVersion adds i to the "version" field.
func (scu *ShipmentCommodityUpdate) AddVersion(i int) *ShipmentCommodityUpdate {
	scu.mutation.AddVersion(i)
	return scu
}

// SetCommodityID sets the "commodity_id" field.
func (scu *ShipmentCommodityUpdate) SetCommodityID(u uuid.UUID) *ShipmentCommodityUpdate {
	scu.mutation.SetCommodityID(u)
	return scu
}

// SetNillableCommodityID sets the "commodity_id" field if the given value is not nil.
func (scu *ShipmentCommodityUpdate) SetNillableCommodityID(u *uuid.UUID) *ShipmentCommodityUpdate {
	if u != nil {
		scu.SetCommodityID(*u)
	}
	return scu
}

// SetHazardousMaterialID sets the "hazardous_material_id" field.
func (scu *ShipmentCommodityUpdate) SetHazardousMaterialID(u uuid.UUID) *ShipmentCommodityUpdate {
	scu.mutation.SetHazardousMaterialID(u)
	return scu
}

// SetNillableHazardousMaterialID sets the "hazardous_material_id" field if the given value is not nil.
func (scu *ShipmentCommodityUpdate) SetNillableHazardousMaterialID(u *uuid.UUID) *ShipmentCommodityUpdate {
	if u != nil {
		scu.SetHazardousMaterialID(*u)
	}
	return scu
}

// SetSubTotal sets the "sub_total" field.
func (scu *ShipmentCommodityUpdate) SetSubTotal(f float64) *ShipmentCommodityUpdate {
	scu.mutation.ResetSubTotal()
	scu.mutation.SetSubTotal(f)
	return scu
}

// SetNillableSubTotal sets the "sub_total" field if the given value is not nil.
func (scu *ShipmentCommodityUpdate) SetNillableSubTotal(f *float64) *ShipmentCommodityUpdate {
	if f != nil {
		scu.SetSubTotal(*f)
	}
	return scu
}

// AddSubTotal adds f to the "sub_total" field.
func (scu *ShipmentCommodityUpdate) AddSubTotal(f float64) *ShipmentCommodityUpdate {
	scu.mutation.AddSubTotal(f)
	return scu
}

// SetPlacardNeeded sets the "placard_needed" field.
func (scu *ShipmentCommodityUpdate) SetPlacardNeeded(b bool) *ShipmentCommodityUpdate {
	scu.mutation.SetPlacardNeeded(b)
	return scu
}

// SetNillablePlacardNeeded sets the "placard_needed" field if the given value is not nil.
func (scu *ShipmentCommodityUpdate) SetNillablePlacardNeeded(b *bool) *ShipmentCommodityUpdate {
	if b != nil {
		scu.SetPlacardNeeded(*b)
	}
	return scu
}

// Mutation returns the ShipmentCommodityMutation object of the builder.
func (scu *ShipmentCommodityUpdate) Mutation() *ShipmentCommodityMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ShipmentCommodityUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ShipmentCommodityUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ShipmentCommodityUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ShipmentCommodityUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ShipmentCommodityUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := shipmentcommodity.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *ShipmentCommodityUpdate) check() error {
	if v, ok := scu.mutation.SubTotal(); ok {
		if err := shipmentcommodity.SubTotalValidator(v); err != nil {
			return &ValidationError{Name: "sub_total", err: fmt.Errorf(`ent: validator failed for field "ShipmentCommodity.sub_total": %w`, err)}
		}
	}
	if _, ok := scu.mutation.BusinessUnitID(); scu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCommodity.business_unit"`)
	}
	if _, ok := scu.mutation.OrganizationID(); scu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCommodity.organization"`)
	}
	if _, ok := scu.mutation.ShipmentID(); scu.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCommodity.shipment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scu *ShipmentCommodityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentCommodityUpdate {
	scu.modifiers = append(scu.modifiers, modifiers...)
	return scu
}

func (scu *ShipmentCommodityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentcommodity.Table, shipmentcommodity.Columns, sqlgraph.NewFieldSpec(shipmentcommodity.FieldID, field.TypeUUID))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcommodity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.Version(); ok {
		_spec.SetField(shipmentcommodity.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentcommodity.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scu.mutation.CommodityID(); ok {
		_spec.SetField(shipmentcommodity.FieldCommodityID, field.TypeUUID, value)
	}
	if value, ok := scu.mutation.HazardousMaterialID(); ok {
		_spec.SetField(shipmentcommodity.FieldHazardousMaterialID, field.TypeUUID, value)
	}
	if value, ok := scu.mutation.SubTotal(); ok {
		_spec.SetField(shipmentcommodity.FieldSubTotal, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.AddedSubTotal(); ok {
		_spec.AddField(shipmentcommodity.FieldSubTotal, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.PlacardNeeded(); ok {
		_spec.SetField(shipmentcommodity.FieldPlacardNeeded, field.TypeBool, value)
	}
	_spec.AddModifiers(scu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentcommodity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ShipmentCommodityUpdateOne is the builder for updating a single ShipmentCommodity entity.
type ShipmentCommodityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShipmentCommodityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *ShipmentCommodityUpdateOne) SetUpdatedAt(t time.Time) *ShipmentCommodityUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetVersion sets the "version" field.
func (scuo *ShipmentCommodityUpdateOne) SetVersion(i int) *ShipmentCommodityUpdateOne {
	scuo.mutation.ResetVersion()
	scuo.mutation.SetVersion(i)
	return scuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (scuo *ShipmentCommodityUpdateOne) SetNillableVersion(i *int) *ShipmentCommodityUpdateOne {
	if i != nil {
		scuo.SetVersion(*i)
	}
	return scuo
}

// AddVersion adds i to the "version" field.
func (scuo *ShipmentCommodityUpdateOne) AddVersion(i int) *ShipmentCommodityUpdateOne {
	scuo.mutation.AddVersion(i)
	return scuo
}

// SetCommodityID sets the "commodity_id" field.
func (scuo *ShipmentCommodityUpdateOne) SetCommodityID(u uuid.UUID) *ShipmentCommodityUpdateOne {
	scuo.mutation.SetCommodityID(u)
	return scuo
}

// SetNillableCommodityID sets the "commodity_id" field if the given value is not nil.
func (scuo *ShipmentCommodityUpdateOne) SetNillableCommodityID(u *uuid.UUID) *ShipmentCommodityUpdateOne {
	if u != nil {
		scuo.SetCommodityID(*u)
	}
	return scuo
}

// SetHazardousMaterialID sets the "hazardous_material_id" field.
func (scuo *ShipmentCommodityUpdateOne) SetHazardousMaterialID(u uuid.UUID) *ShipmentCommodityUpdateOne {
	scuo.mutation.SetHazardousMaterialID(u)
	return scuo
}

// SetNillableHazardousMaterialID sets the "hazardous_material_id" field if the given value is not nil.
func (scuo *ShipmentCommodityUpdateOne) SetNillableHazardousMaterialID(u *uuid.UUID) *ShipmentCommodityUpdateOne {
	if u != nil {
		scuo.SetHazardousMaterialID(*u)
	}
	return scuo
}

// SetSubTotal sets the "sub_total" field.
func (scuo *ShipmentCommodityUpdateOne) SetSubTotal(f float64) *ShipmentCommodityUpdateOne {
	scuo.mutation.ResetSubTotal()
	scuo.mutation.SetSubTotal(f)
	return scuo
}

// SetNillableSubTotal sets the "sub_total" field if the given value is not nil.
func (scuo *ShipmentCommodityUpdateOne) SetNillableSubTotal(f *float64) *ShipmentCommodityUpdateOne {
	if f != nil {
		scuo.SetSubTotal(*f)
	}
	return scuo
}

// AddSubTotal adds f to the "sub_total" field.
func (scuo *ShipmentCommodityUpdateOne) AddSubTotal(f float64) *ShipmentCommodityUpdateOne {
	scuo.mutation.AddSubTotal(f)
	return scuo
}

// SetPlacardNeeded sets the "placard_needed" field.
func (scuo *ShipmentCommodityUpdateOne) SetPlacardNeeded(b bool) *ShipmentCommodityUpdateOne {
	scuo.mutation.SetPlacardNeeded(b)
	return scuo
}

// SetNillablePlacardNeeded sets the "placard_needed" field if the given value is not nil.
func (scuo *ShipmentCommodityUpdateOne) SetNillablePlacardNeeded(b *bool) *ShipmentCommodityUpdateOne {
	if b != nil {
		scuo.SetPlacardNeeded(*b)
	}
	return scuo
}

// Mutation returns the ShipmentCommodityMutation object of the builder.
func (scuo *ShipmentCommodityUpdateOne) Mutation() *ShipmentCommodityMutation {
	return scuo.mutation
}

// Where appends a list predicates to the ShipmentCommodityUpdate builder.
func (scuo *ShipmentCommodityUpdateOne) Where(ps ...predicate.ShipmentCommodity) *ShipmentCommodityUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ShipmentCommodityUpdateOne) Select(field string, fields ...string) *ShipmentCommodityUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ShipmentCommodity entity.
func (scuo *ShipmentCommodityUpdateOne) Save(ctx context.Context) (*ShipmentCommodity, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ShipmentCommodityUpdateOne) SaveX(ctx context.Context) *ShipmentCommodity {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ShipmentCommodityUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ShipmentCommodityUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ShipmentCommodityUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := shipmentcommodity.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *ShipmentCommodityUpdateOne) check() error {
	if v, ok := scuo.mutation.SubTotal(); ok {
		if err := shipmentcommodity.SubTotalValidator(v); err != nil {
			return &ValidationError{Name: "sub_total", err: fmt.Errorf(`ent: validator failed for field "ShipmentCommodity.sub_total": %w`, err)}
		}
	}
	if _, ok := scuo.mutation.BusinessUnitID(); scuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCommodity.business_unit"`)
	}
	if _, ok := scuo.mutation.OrganizationID(); scuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCommodity.organization"`)
	}
	if _, ok := scuo.mutation.ShipmentID(); scuo.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCommodity.shipment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scuo *ShipmentCommodityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentCommodityUpdateOne {
	scuo.modifiers = append(scuo.modifiers, modifiers...)
	return scuo
}

func (scuo *ShipmentCommodityUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentCommodity, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentcommodity.Table, shipmentcommodity.Columns, sqlgraph.NewFieldSpec(shipmentcommodity.FieldID, field.TypeUUID))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentCommodity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentcommodity.FieldID)
		for _, f := range fields {
			if !shipmentcommodity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentcommodity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcommodity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.Version(); ok {
		_spec.SetField(shipmentcommodity.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentcommodity.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.CommodityID(); ok {
		_spec.SetField(shipmentcommodity.FieldCommodityID, field.TypeUUID, value)
	}
	if value, ok := scuo.mutation.HazardousMaterialID(); ok {
		_spec.SetField(shipmentcommodity.FieldHazardousMaterialID, field.TypeUUID, value)
	}
	if value, ok := scuo.mutation.SubTotal(); ok {
		_spec.SetField(shipmentcommodity.FieldSubTotal, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.AddedSubTotal(); ok {
		_spec.AddField(shipmentcommodity.FieldSubTotal, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.PlacardNeeded(); ok {
		_spec.SetField(shipmentcommodity.FieldPlacardNeeded, field.TypeBool, value)
	}
	_spec.AddModifiers(scuo.modifiers...)
	_node = &ShipmentCommodity{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentcommodity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
