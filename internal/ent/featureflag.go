// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/featureflag"
	"github.com/google/uuid"
)

// Internal table for storing the feature flags available for Trenova
type FeatureFlag struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name" validate:"required"`
	// Code holds the value of the "code" field.
	Code string `json:"code" validate:"required"`
	// Beta holds the value of the "beta" field.
	Beta bool `json:"beta" validate:"omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description" validate:"required"`
	// PreviewPictureURL holds the value of the "preview_picture_url" field.
	PreviewPictureURL string `json:"previewPictureUrl" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeatureFlagQuery when eager-loading is set.
	Edges        FeatureFlagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FeatureFlagEdges holds the relations/edges for other nodes in the graph.
type FeatureFlagEdges struct {
	// OrganizationFeatureFlag holds the value of the organization_feature_flag edge.
	OrganizationFeatureFlag []*OrganizationFeatureFlag `json:"organization_feature_flag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes                  [1]bool
	namedOrganizationFeatureFlag map[string][]*OrganizationFeatureFlag
}

// OrganizationFeatureFlagOrErr returns the OrganizationFeatureFlag value or an error if the edge
// was not loaded in eager-loading.
func (e FeatureFlagEdges) OrganizationFeatureFlagOrErr() ([]*OrganizationFeatureFlag, error) {
	if e.loadedTypes[0] {
		return e.OrganizationFeatureFlag, nil
	}
	return nil, &NotLoadedError{edge: "organization_feature_flag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeatureFlag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case featureflag.FieldBeta:
			values[i] = new(sql.NullBool)
		case featureflag.FieldName, featureflag.FieldCode, featureflag.FieldDescription, featureflag.FieldPreviewPictureURL:
			values[i] = new(sql.NullString)
		case featureflag.FieldCreatedAt, featureflag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case featureflag.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeatureFlag fields.
func (ff *FeatureFlag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case featureflag.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ff.ID = *value
			}
		case featureflag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ff.CreatedAt = value.Time
			}
		case featureflag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ff.UpdatedAt = value.Time
			}
		case featureflag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ff.Name = value.String
			}
		case featureflag.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ff.Code = value.String
			}
		case featureflag.FieldBeta:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field beta", values[i])
			} else if value.Valid {
				ff.Beta = value.Bool
			}
		case featureflag.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ff.Description = value.String
			}
		case featureflag.FieldPreviewPictureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preview_picture_url", values[i])
			} else if value.Valid {
				ff.PreviewPictureURL = value.String
			}
		default:
			ff.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeatureFlag.
// This includes values selected through modifiers, order, etc.
func (ff *FeatureFlag) Value(name string) (ent.Value, error) {
	return ff.selectValues.Get(name)
}

// QueryOrganizationFeatureFlag queries the "organization_feature_flag" edge of the FeatureFlag entity.
func (ff *FeatureFlag) QueryOrganizationFeatureFlag() *OrganizationFeatureFlagQuery {
	return NewFeatureFlagClient(ff.config).QueryOrganizationFeatureFlag(ff)
}

// Update returns a builder for updating this FeatureFlag.
// Note that you need to call FeatureFlag.Unwrap() before calling this method if this FeatureFlag
// was returned from a transaction, and the transaction was committed or rolled back.
func (ff *FeatureFlag) Update() *FeatureFlagUpdateOne {
	return NewFeatureFlagClient(ff.config).UpdateOne(ff)
}

// Unwrap unwraps the FeatureFlag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ff *FeatureFlag) Unwrap() *FeatureFlag {
	_tx, ok := ff.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeatureFlag is not a transactional entity")
	}
	ff.config.driver = _tx.drv
	return ff
}

// String implements the fmt.Stringer.
func (ff *FeatureFlag) String() string {
	var builder strings.Builder
	builder.WriteString("FeatureFlag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ff.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ff.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ff.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ff.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(ff.Code)
	builder.WriteString(", ")
	builder.WriteString("beta=")
	builder.WriteString(fmt.Sprintf("%v", ff.Beta))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ff.Description)
	builder.WriteString(", ")
	builder.WriteString("preview_picture_url=")
	builder.WriteString(ff.PreviewPictureURL)
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrganizationFeatureFlag returns the OrganizationFeatureFlag named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ff *FeatureFlag) NamedOrganizationFeatureFlag(name string) ([]*OrganizationFeatureFlag, error) {
	if ff.Edges.namedOrganizationFeatureFlag == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ff.Edges.namedOrganizationFeatureFlag[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ff *FeatureFlag) appendNamedOrganizationFeatureFlag(name string, edges ...*OrganizationFeatureFlag) {
	if ff.Edges.namedOrganizationFeatureFlag == nil {
		ff.Edges.namedOrganizationFeatureFlag = make(map[string][]*OrganizationFeatureFlag)
	}
	if len(edges) == 0 {
		ff.Edges.namedOrganizationFeatureFlag[name] = []*OrganizationFeatureFlag{}
	} else {
		ff.Edges.namedOrganizationFeatureFlag[name] = append(ff.Edges.namedOrganizationFeatureFlag[name], edges...)
	}
}

// FeatureFlags is a parsable slice of FeatureFlag.
type FeatureFlags []*FeatureFlag
