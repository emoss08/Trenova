// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/permission"
	"github.com/emoss08/trenova/internal/ent/resource"
	"github.com/emoss08/trenova/internal/ent/role"
	"github.com/google/uuid"
)

// PermissionCreate is the builder for creating a Permission entity.
type PermissionCreate struct {
	config
	mutation *PermissionMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (pc *PermissionCreate) SetBusinessUnitID(u uuid.UUID) *PermissionCreate {
	pc.mutation.SetBusinessUnitID(u)
	return pc
}

// SetOrganizationID sets the "organization_id" field.
func (pc *PermissionCreate) SetOrganizationID(u uuid.UUID) *PermissionCreate {
	pc.mutation.SetOrganizationID(u)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PermissionCreate) SetCreatedAt(t time.Time) *PermissionCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableCreatedAt(t *time.Time) *PermissionCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PermissionCreate) SetUpdatedAt(t time.Time) *PermissionCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableUpdatedAt(t *time.Time) *PermissionCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetVersion sets the "version" field.
func (pc *PermissionCreate) SetVersion(i int) *PermissionCreate {
	pc.mutation.SetVersion(i)
	return pc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableVersion(i *int) *PermissionCreate {
	if i != nil {
		pc.SetVersion(*i)
	}
	return pc
}

// SetCodename sets the "codename" field.
func (pc *PermissionCreate) SetCodename(s string) *PermissionCreate {
	pc.mutation.SetCodename(s)
	return pc
}

// SetAction sets the "action" field.
func (pc *PermissionCreate) SetAction(s string) *PermissionCreate {
	pc.mutation.SetAction(s)
	return pc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableAction(s *string) *PermissionCreate {
	if s != nil {
		pc.SetAction(*s)
	}
	return pc
}

// SetLabel sets the "label" field.
func (pc *PermissionCreate) SetLabel(s string) *PermissionCreate {
	pc.mutation.SetLabel(s)
	return pc
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableLabel(s *string) *PermissionCreate {
	if s != nil {
		pc.SetLabel(*s)
	}
	return pc
}

// SetReadDescription sets the "read_description" field.
func (pc *PermissionCreate) SetReadDescription(s string) *PermissionCreate {
	pc.mutation.SetReadDescription(s)
	return pc
}

// SetNillableReadDescription sets the "read_description" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableReadDescription(s *string) *PermissionCreate {
	if s != nil {
		pc.SetReadDescription(*s)
	}
	return pc
}

// SetWriteDescription sets the "write_description" field.
func (pc *PermissionCreate) SetWriteDescription(s string) *PermissionCreate {
	pc.mutation.SetWriteDescription(s)
	return pc
}

// SetNillableWriteDescription sets the "write_description" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableWriteDescription(s *string) *PermissionCreate {
	if s != nil {
		pc.SetWriteDescription(*s)
	}
	return pc
}

// SetResourceID sets the "resource_id" field.
func (pc *PermissionCreate) SetResourceID(u uuid.UUID) *PermissionCreate {
	pc.mutation.SetResourceID(u)
	return pc
}

// SetID sets the "id" field.
func (pc *PermissionCreate) SetID(u uuid.UUID) *PermissionCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableID(u *uuid.UUID) *PermissionCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (pc *PermissionCreate) SetBusinessUnit(b *BusinessUnit) *PermissionCreate {
	return pc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (pc *PermissionCreate) SetOrganization(o *Organization) *PermissionCreate {
	return pc.SetOrganizationID(o.ID)
}

// SetResource sets the "resource" edge to the Resource entity.
func (pc *PermissionCreate) SetResource(r *Resource) *PermissionCreate {
	return pc.SetResourceID(r.ID)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (pc *PermissionCreate) AddRoleIDs(ids ...uuid.UUID) *PermissionCreate {
	pc.mutation.AddRoleIDs(ids...)
	return pc
}

// AddRoles adds the "roles" edges to the Role entity.
func (pc *PermissionCreate) AddRoles(r ...*Role) *PermissionCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRoleIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (pc *PermissionCreate) Mutation() *PermissionMutation {
	return pc.mutation
}

// Save creates the Permission in the database.
func (pc *PermissionCreate) Save(ctx context.Context) (*Permission, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PermissionCreate) SaveX(ctx context.Context) *Permission {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PermissionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PermissionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PermissionCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := permission.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := permission.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Version(); !ok {
		v := permission.DefaultVersion
		pc.mutation.SetVersion(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := permission.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PermissionCreate) check() error {
	if _, ok := pc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "Permission.business_unit_id"`)}
	}
	if _, ok := pc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Permission.organization_id"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Permission.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Permission.updated_at"`)}
	}
	if _, ok := pc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Permission.version"`)}
	}
	if _, ok := pc.mutation.Codename(); !ok {
		return &ValidationError{Name: "codename", err: errors.New(`ent: missing required field "Permission.codename"`)}
	}
	if v, ok := pc.mutation.Codename(); ok {
		if err := permission.CodenameValidator(v); err != nil {
			return &ValidationError{Name: "codename", err: fmt.Errorf(`ent: validator failed for field "Permission.codename": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "Permission.resource_id"`)}
	}
	if _, ok := pc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "Permission.business_unit"`)}
	}
	if _, ok := pc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Permission.organization"`)}
	}
	if _, ok := pc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required edge "Permission.resource"`)}
	}
	return nil
}

func (pc *PermissionCreate) sqlSave(ctx context.Context) (*Permission, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PermissionCreate) createSpec() (*Permission, *sqlgraph.CreateSpec) {
	var (
		_node = &Permission{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(permission.Table, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(permission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Version(); ok {
		_spec.SetField(permission.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := pc.mutation.Codename(); ok {
		_spec.SetField(permission.FieldCodename, field.TypeString, value)
		_node.Codename = value
	}
	if value, ok := pc.mutation.Action(); ok {
		_spec.SetField(permission.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := pc.mutation.Label(); ok {
		_spec.SetField(permission.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := pc.mutation.ReadDescription(); ok {
		_spec.SetField(permission.FieldReadDescription, field.TypeString, value)
		_node.ReadDescription = value
	}
	if value, ok := pc.mutation.WriteDescription(); ok {
		_spec.SetField(permission.FieldWriteDescription, field.TypeString, value)
		_node.WriteDescription = value
	}
	if nodes := pc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permission.BusinessUnitTable,
			Columns: []string{permission.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permission.OrganizationTable,
			Columns: []string{permission.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ResourceTable,
			Columns: []string{permission.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PermissionCreateBulk is the builder for creating many Permission entities in bulk.
type PermissionCreateBulk struct {
	config
	err      error
	builders []*PermissionCreate
}

// Save creates the Permission entities in the database.
func (pcb *PermissionCreateBulk) Save(ctx context.Context) ([]*Permission, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Permission, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PermissionCreateBulk) SaveX(ctx context.Context) []*Permission {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PermissionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
