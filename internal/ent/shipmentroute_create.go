// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/location"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/shipmentroute"
	"github.com/google/uuid"
)

// ShipmentRouteCreate is the builder for creating a ShipmentRoute entity.
type ShipmentRouteCreate struct {
	config
	mutation *ShipmentRouteMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (src *ShipmentRouteCreate) SetBusinessUnitID(u uuid.UUID) *ShipmentRouteCreate {
	src.mutation.SetBusinessUnitID(u)
	return src
}

// SetOrganizationID sets the "organization_id" field.
func (src *ShipmentRouteCreate) SetOrganizationID(u uuid.UUID) *ShipmentRouteCreate {
	src.mutation.SetOrganizationID(u)
	return src
}

// SetCreatedAt sets the "created_at" field.
func (src *ShipmentRouteCreate) SetCreatedAt(t time.Time) *ShipmentRouteCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *ShipmentRouteCreate) SetNillableCreatedAt(t *time.Time) *ShipmentRouteCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *ShipmentRouteCreate) SetUpdatedAt(t time.Time) *ShipmentRouteCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *ShipmentRouteCreate) SetNillableUpdatedAt(t *time.Time) *ShipmentRouteCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetVersion sets the "version" field.
func (src *ShipmentRouteCreate) SetVersion(i int) *ShipmentRouteCreate {
	src.mutation.SetVersion(i)
	return src
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (src *ShipmentRouteCreate) SetNillableVersion(i *int) *ShipmentRouteCreate {
	if i != nil {
		src.SetVersion(*i)
	}
	return src
}

// SetOriginLocationID sets the "origin_location_id" field.
func (src *ShipmentRouteCreate) SetOriginLocationID(u uuid.UUID) *ShipmentRouteCreate {
	src.mutation.SetOriginLocationID(u)
	return src
}

// SetDestinationLocationID sets the "destination_location_id" field.
func (src *ShipmentRouteCreate) SetDestinationLocationID(u uuid.UUID) *ShipmentRouteCreate {
	src.mutation.SetDestinationLocationID(u)
	return src
}

// SetMileage sets the "mileage" field.
func (src *ShipmentRouteCreate) SetMileage(f float64) *ShipmentRouteCreate {
	src.mutation.SetMileage(f)
	return src
}

// SetDuration sets the "duration" field.
func (src *ShipmentRouteCreate) SetDuration(i int) *ShipmentRouteCreate {
	src.mutation.SetDuration(i)
	return src
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (src *ShipmentRouteCreate) SetNillableDuration(i *int) *ShipmentRouteCreate {
	if i != nil {
		src.SetDuration(*i)
	}
	return src
}

// SetDistanceMethod sets the "distance_method" field.
func (src *ShipmentRouteCreate) SetDistanceMethod(s string) *ShipmentRouteCreate {
	src.mutation.SetDistanceMethod(s)
	return src
}

// SetNillableDistanceMethod sets the "distance_method" field if the given value is not nil.
func (src *ShipmentRouteCreate) SetNillableDistanceMethod(s *string) *ShipmentRouteCreate {
	if s != nil {
		src.SetDistanceMethod(*s)
	}
	return src
}

// SetAutoGenerated sets the "auto_generated" field.
func (src *ShipmentRouteCreate) SetAutoGenerated(b bool) *ShipmentRouteCreate {
	src.mutation.SetAutoGenerated(b)
	return src
}

// SetNillableAutoGenerated sets the "auto_generated" field if the given value is not nil.
func (src *ShipmentRouteCreate) SetNillableAutoGenerated(b *bool) *ShipmentRouteCreate {
	if b != nil {
		src.SetAutoGenerated(*b)
	}
	return src
}

// SetID sets the "id" field.
func (src *ShipmentRouteCreate) SetID(u uuid.UUID) *ShipmentRouteCreate {
	src.mutation.SetID(u)
	return src
}

// SetNillableID sets the "id" field if the given value is not nil.
func (src *ShipmentRouteCreate) SetNillableID(u *uuid.UUID) *ShipmentRouteCreate {
	if u != nil {
		src.SetID(*u)
	}
	return src
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (src *ShipmentRouteCreate) SetBusinessUnit(b *BusinessUnit) *ShipmentRouteCreate {
	return src.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (src *ShipmentRouteCreate) SetOrganization(o *Organization) *ShipmentRouteCreate {
	return src.SetOrganizationID(o.ID)
}

// SetOriginLocation sets the "origin_location" edge to the Location entity.
func (src *ShipmentRouteCreate) SetOriginLocation(l *Location) *ShipmentRouteCreate {
	return src.SetOriginLocationID(l.ID)
}

// SetDestinationLocation sets the "destination_location" edge to the Location entity.
func (src *ShipmentRouteCreate) SetDestinationLocation(l *Location) *ShipmentRouteCreate {
	return src.SetDestinationLocationID(l.ID)
}

// Mutation returns the ShipmentRouteMutation object of the builder.
func (src *ShipmentRouteCreate) Mutation() *ShipmentRouteMutation {
	return src.mutation
}

// Save creates the ShipmentRoute in the database.
func (src *ShipmentRouteCreate) Save(ctx context.Context) (*ShipmentRoute, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *ShipmentRouteCreate) SaveX(ctx context.Context) *ShipmentRoute {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *ShipmentRouteCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *ShipmentRouteCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *ShipmentRouteCreate) defaults() {
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := shipmentroute.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := shipmentroute.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	if _, ok := src.mutation.Version(); !ok {
		v := shipmentroute.DefaultVersion
		src.mutation.SetVersion(v)
	}
	if _, ok := src.mutation.AutoGenerated(); !ok {
		v := shipmentroute.DefaultAutoGenerated
		src.mutation.SetAutoGenerated(v)
	}
	if _, ok := src.mutation.ID(); !ok {
		v := shipmentroute.DefaultID()
		src.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *ShipmentRouteCreate) check() error {
	if _, ok := src.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "ShipmentRoute.business_unit_id"`)}
	}
	if _, ok := src.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "ShipmentRoute.organization_id"`)}
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ShipmentRoute.created_at"`)}
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ShipmentRoute.updated_at"`)}
	}
	if _, ok := src.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ShipmentRoute.version"`)}
	}
	if _, ok := src.mutation.OriginLocationID(); !ok {
		return &ValidationError{Name: "origin_location_id", err: errors.New(`ent: missing required field "ShipmentRoute.origin_location_id"`)}
	}
	if _, ok := src.mutation.DestinationLocationID(); !ok {
		return &ValidationError{Name: "destination_location_id", err: errors.New(`ent: missing required field "ShipmentRoute.destination_location_id"`)}
	}
	if _, ok := src.mutation.Mileage(); !ok {
		return &ValidationError{Name: "mileage", err: errors.New(`ent: missing required field "ShipmentRoute.mileage"`)}
	}
	if v, ok := src.mutation.Mileage(); ok {
		if err := shipmentroute.MileageValidator(v); err != nil {
			return &ValidationError{Name: "mileage", err: fmt.Errorf(`ent: validator failed for field "ShipmentRoute.mileage": %w`, err)}
		}
	}
	if v, ok := src.mutation.Duration(); ok {
		if err := shipmentroute.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "ShipmentRoute.duration": %w`, err)}
		}
	}
	if v, ok := src.mutation.DistanceMethod(); ok {
		if err := shipmentroute.DistanceMethodValidator(v); err != nil {
			return &ValidationError{Name: "distance_method", err: fmt.Errorf(`ent: validator failed for field "ShipmentRoute.distance_method": %w`, err)}
		}
	}
	if _, ok := src.mutation.AutoGenerated(); !ok {
		return &ValidationError{Name: "auto_generated", err: errors.New(`ent: missing required field "ShipmentRoute.auto_generated"`)}
	}
	if _, ok := src.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "ShipmentRoute.business_unit"`)}
	}
	if _, ok := src.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "ShipmentRoute.organization"`)}
	}
	if _, ok := src.mutation.OriginLocationID(); !ok {
		return &ValidationError{Name: "origin_location", err: errors.New(`ent: missing required edge "ShipmentRoute.origin_location"`)}
	}
	if _, ok := src.mutation.DestinationLocationID(); !ok {
		return &ValidationError{Name: "destination_location", err: errors.New(`ent: missing required edge "ShipmentRoute.destination_location"`)}
	}
	return nil
}

func (src *ShipmentRouteCreate) sqlSave(ctx context.Context) (*ShipmentRoute, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *ShipmentRouteCreate) createSpec() (*ShipmentRoute, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentRoute{config: src.config}
		_spec = sqlgraph.NewCreateSpec(shipmentroute.Table, sqlgraph.NewFieldSpec(shipmentroute.FieldID, field.TypeUUID))
	)
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(shipmentroute.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentroute.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := src.mutation.Version(); ok {
		_spec.SetField(shipmentroute.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := src.mutation.Mileage(); ok {
		_spec.SetField(shipmentroute.FieldMileage, field.TypeFloat64, value)
		_node.Mileage = value
	}
	if value, ok := src.mutation.Duration(); ok {
		_spec.SetField(shipmentroute.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := src.mutation.DistanceMethod(); ok {
		_spec.SetField(shipmentroute.FieldDistanceMethod, field.TypeString, value)
		_node.DistanceMethod = value
	}
	if value, ok := src.mutation.AutoGenerated(); ok {
		_spec.SetField(shipmentroute.FieldAutoGenerated, field.TypeBool, value)
		_node.AutoGenerated = value
	}
	if nodes := src.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentroute.BusinessUnitTable,
			Columns: []string{shipmentroute.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentroute.OrganizationTable,
			Columns: []string{shipmentroute.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.OriginLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.OriginLocationTable,
			Columns: []string{shipmentroute.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OriginLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.DestinationLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.DestinationLocationTable,
			Columns: []string{shipmentroute.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DestinationLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShipmentRouteCreateBulk is the builder for creating many ShipmentRoute entities in bulk.
type ShipmentRouteCreateBulk struct {
	config
	err      error
	builders []*ShipmentRouteCreate
}

// Save creates the ShipmentRoute entities in the database.
func (srcb *ShipmentRouteCreateBulk) Save(ctx context.Context) ([]*ShipmentRoute, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*ShipmentRoute, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentRouteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *ShipmentRouteCreateBulk) SaveX(ctx context.Context) []*ShipmentRoute {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *ShipmentRouteCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *ShipmentRouteCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
