// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customerruleprofile"
	"github.com/emoss08/trenova/internal/ent/documentclassification"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// CustomerRuleProfileCreate is the builder for creating a CustomerRuleProfile entity.
type CustomerRuleProfileCreate struct {
	config
	mutation *CustomerRuleProfileMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (crpc *CustomerRuleProfileCreate) SetBusinessUnitID(u uuid.UUID) *CustomerRuleProfileCreate {
	crpc.mutation.SetBusinessUnitID(u)
	return crpc
}

// SetOrganizationID sets the "organization_id" field.
func (crpc *CustomerRuleProfileCreate) SetOrganizationID(u uuid.UUID) *CustomerRuleProfileCreate {
	crpc.mutation.SetOrganizationID(u)
	return crpc
}

// SetCreatedAt sets the "created_at" field.
func (crpc *CustomerRuleProfileCreate) SetCreatedAt(t time.Time) *CustomerRuleProfileCreate {
	crpc.mutation.SetCreatedAt(t)
	return crpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crpc *CustomerRuleProfileCreate) SetNillableCreatedAt(t *time.Time) *CustomerRuleProfileCreate {
	if t != nil {
		crpc.SetCreatedAt(*t)
	}
	return crpc
}

// SetUpdatedAt sets the "updated_at" field.
func (crpc *CustomerRuleProfileCreate) SetUpdatedAt(t time.Time) *CustomerRuleProfileCreate {
	crpc.mutation.SetUpdatedAt(t)
	return crpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crpc *CustomerRuleProfileCreate) SetNillableUpdatedAt(t *time.Time) *CustomerRuleProfileCreate {
	if t != nil {
		crpc.SetUpdatedAt(*t)
	}
	return crpc
}

// SetVersion sets the "version" field.
func (crpc *CustomerRuleProfileCreate) SetVersion(i int) *CustomerRuleProfileCreate {
	crpc.mutation.SetVersion(i)
	return crpc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (crpc *CustomerRuleProfileCreate) SetNillableVersion(i *int) *CustomerRuleProfileCreate {
	if i != nil {
		crpc.SetVersion(*i)
	}
	return crpc
}

// SetCustomerID sets the "customer_id" field.
func (crpc *CustomerRuleProfileCreate) SetCustomerID(u uuid.UUID) *CustomerRuleProfileCreate {
	crpc.mutation.SetCustomerID(u)
	return crpc
}

// SetBillingCycle sets the "billing_cycle" field.
func (crpc *CustomerRuleProfileCreate) SetBillingCycle(cc customerruleprofile.BillingCycle) *CustomerRuleProfileCreate {
	crpc.mutation.SetBillingCycle(cc)
	return crpc
}

// SetNillableBillingCycle sets the "billing_cycle" field if the given value is not nil.
func (crpc *CustomerRuleProfileCreate) SetNillableBillingCycle(cc *customerruleprofile.BillingCycle) *CustomerRuleProfileCreate {
	if cc != nil {
		crpc.SetBillingCycle(*cc)
	}
	return crpc
}

// SetID sets the "id" field.
func (crpc *CustomerRuleProfileCreate) SetID(u uuid.UUID) *CustomerRuleProfileCreate {
	crpc.mutation.SetID(u)
	return crpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (crpc *CustomerRuleProfileCreate) SetNillableID(u *uuid.UUID) *CustomerRuleProfileCreate {
	if u != nil {
		crpc.SetID(*u)
	}
	return crpc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (crpc *CustomerRuleProfileCreate) SetBusinessUnit(b *BusinessUnit) *CustomerRuleProfileCreate {
	return crpc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (crpc *CustomerRuleProfileCreate) SetOrganization(o *Organization) *CustomerRuleProfileCreate {
	return crpc.SetOrganizationID(o.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (crpc *CustomerRuleProfileCreate) SetCustomer(c *Customer) *CustomerRuleProfileCreate {
	return crpc.SetCustomerID(c.ID)
}

// AddDocumentClassificationIDs adds the "document_classifications" edge to the DocumentClassification entity by IDs.
func (crpc *CustomerRuleProfileCreate) AddDocumentClassificationIDs(ids ...uuid.UUID) *CustomerRuleProfileCreate {
	crpc.mutation.AddDocumentClassificationIDs(ids...)
	return crpc
}

// AddDocumentClassifications adds the "document_classifications" edges to the DocumentClassification entity.
func (crpc *CustomerRuleProfileCreate) AddDocumentClassifications(d ...*DocumentClassification) *CustomerRuleProfileCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return crpc.AddDocumentClassificationIDs(ids...)
}

// Mutation returns the CustomerRuleProfileMutation object of the builder.
func (crpc *CustomerRuleProfileCreate) Mutation() *CustomerRuleProfileMutation {
	return crpc.mutation
}

// Save creates the CustomerRuleProfile in the database.
func (crpc *CustomerRuleProfileCreate) Save(ctx context.Context) (*CustomerRuleProfile, error) {
	crpc.defaults()
	return withHooks(ctx, crpc.sqlSave, crpc.mutation, crpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crpc *CustomerRuleProfileCreate) SaveX(ctx context.Context) *CustomerRuleProfile {
	v, err := crpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crpc *CustomerRuleProfileCreate) Exec(ctx context.Context) error {
	_, err := crpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crpc *CustomerRuleProfileCreate) ExecX(ctx context.Context) {
	if err := crpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crpc *CustomerRuleProfileCreate) defaults() {
	if _, ok := crpc.mutation.CreatedAt(); !ok {
		v := customerruleprofile.DefaultCreatedAt()
		crpc.mutation.SetCreatedAt(v)
	}
	if _, ok := crpc.mutation.UpdatedAt(); !ok {
		v := customerruleprofile.DefaultUpdatedAt()
		crpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := crpc.mutation.Version(); !ok {
		v := customerruleprofile.DefaultVersion
		crpc.mutation.SetVersion(v)
	}
	if _, ok := crpc.mutation.BillingCycle(); !ok {
		v := customerruleprofile.DefaultBillingCycle
		crpc.mutation.SetBillingCycle(v)
	}
	if _, ok := crpc.mutation.ID(); !ok {
		v := customerruleprofile.DefaultID()
		crpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crpc *CustomerRuleProfileCreate) check() error {
	if _, ok := crpc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "CustomerRuleProfile.business_unit_id"`)}
	}
	if _, ok := crpc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "CustomerRuleProfile.organization_id"`)}
	}
	if _, ok := crpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CustomerRuleProfile.created_at"`)}
	}
	if _, ok := crpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CustomerRuleProfile.updated_at"`)}
	}
	if _, ok := crpc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CustomerRuleProfile.version"`)}
	}
	if _, ok := crpc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CustomerRuleProfile.customer_id"`)}
	}
	if _, ok := crpc.mutation.BillingCycle(); !ok {
		return &ValidationError{Name: "billing_cycle", err: errors.New(`ent: missing required field "CustomerRuleProfile.billing_cycle"`)}
	}
	if v, ok := crpc.mutation.BillingCycle(); ok {
		if err := customerruleprofile.BillingCycleValidator(v); err != nil {
			return &ValidationError{Name: "billing_cycle", err: fmt.Errorf(`ent: validator failed for field "CustomerRuleProfile.billing_cycle": %w`, err)}
		}
	}
	if _, ok := crpc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "CustomerRuleProfile.business_unit"`)}
	}
	if _, ok := crpc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "CustomerRuleProfile.organization"`)}
	}
	if _, ok := crpc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "CustomerRuleProfile.customer"`)}
	}
	return nil
}

func (crpc *CustomerRuleProfileCreate) sqlSave(ctx context.Context) (*CustomerRuleProfile, error) {
	if err := crpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	crpc.mutation.id = &_node.ID
	crpc.mutation.done = true
	return _node, nil
}

func (crpc *CustomerRuleProfileCreate) createSpec() (*CustomerRuleProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerRuleProfile{config: crpc.config}
		_spec = sqlgraph.NewCreateSpec(customerruleprofile.Table, sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID))
	)
	if id, ok := crpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := crpc.mutation.CreatedAt(); ok {
		_spec.SetField(customerruleprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crpc.mutation.UpdatedAt(); ok {
		_spec.SetField(customerruleprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := crpc.mutation.Version(); ok {
		_spec.SetField(customerruleprofile.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := crpc.mutation.BillingCycle(); ok {
		_spec.SetField(customerruleprofile.FieldBillingCycle, field.TypeEnum, value)
		_node.BillingCycle = value
	}
	if nodes := crpc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerruleprofile.BusinessUnitTable,
			Columns: []string{customerruleprofile.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crpc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerruleprofile.OrganizationTable,
			Columns: []string{customerruleprofile.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crpc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customerruleprofile.CustomerTable,
			Columns: []string{customerruleprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crpc.mutation.DocumentClassificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customerruleprofile.DocumentClassificationsTable,
			Columns: customerruleprofile.DocumentClassificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomerRuleProfileCreateBulk is the builder for creating many CustomerRuleProfile entities in bulk.
type CustomerRuleProfileCreateBulk struct {
	config
	err      error
	builders []*CustomerRuleProfileCreate
}

// Save creates the CustomerRuleProfile entities in the database.
func (crpcb *CustomerRuleProfileCreateBulk) Save(ctx context.Context) ([]*CustomerRuleProfile, error) {
	if crpcb.err != nil {
		return nil, crpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crpcb.builders))
	nodes := make([]*CustomerRuleProfile, len(crpcb.builders))
	mutators := make([]Mutator, len(crpcb.builders))
	for i := range crpcb.builders {
		func(i int, root context.Context) {
			builder := crpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerRuleProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crpcb *CustomerRuleProfileCreateBulk) SaveX(ctx context.Context) []*CustomerRuleProfile {
	v, err := crpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crpcb *CustomerRuleProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := crpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crpcb *CustomerRuleProfileCreateBulk) ExecX(ctx context.Context) {
	if err := crpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
