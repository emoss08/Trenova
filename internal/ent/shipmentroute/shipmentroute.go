// Code generated by entc, DO NOT EDIT.

package shipmentroute

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the shipmentroute type in the database.
	Label = "shipment_route"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldOriginLocationID holds the string denoting the origin_location_id field in the database.
	FieldOriginLocationID = "origin_location_id"
	// FieldDestinationLocationID holds the string denoting the destination_location_id field in the database.
	FieldDestinationLocationID = "destination_location_id"
	// FieldMileage holds the string denoting the mileage field in the database.
	FieldMileage = "mileage"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldDistanceMethod holds the string denoting the distance_method field in the database.
	FieldDistanceMethod = "distance_method"
	// FieldAutoGenerated holds the string denoting the auto_generated field in the database.
	FieldAutoGenerated = "auto_generated"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeOriginLocation holds the string denoting the origin_location edge name in mutations.
	EdgeOriginLocation = "origin_location"
	// EdgeDestinationLocation holds the string denoting the destination_location edge name in mutations.
	EdgeDestinationLocation = "destination_location"
	// Table holds the table name of the shipmentroute in the database.
	Table = "shipment_routes"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "shipment_routes"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "shipment_routes"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// OriginLocationTable is the table that holds the origin_location relation/edge.
	OriginLocationTable = "shipment_routes"
	// OriginLocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	OriginLocationInverseTable = "locations"
	// OriginLocationColumn is the table column denoting the origin_location relation/edge.
	OriginLocationColumn = "origin_location_id"
	// DestinationLocationTable is the table that holds the destination_location relation/edge.
	DestinationLocationTable = "shipment_routes"
	// DestinationLocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	DestinationLocationInverseTable = "locations"
	// DestinationLocationColumn is the table column denoting the destination_location relation/edge.
	DestinationLocationColumn = "destination_location_id"
)

// Columns holds all SQL columns for shipmentroute fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVersion,
	FieldOriginLocationID,
	FieldDestinationLocationID,
	FieldMileage,
	FieldDuration,
	FieldDistanceMethod,
	FieldAutoGenerated,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// MileageValidator is a validator for the "mileage" field. It is called by the builders before save.
	MileageValidator func(float64) error
	// DurationValidator is a validator for the "duration" field. It is called by the builders before save.
	DurationValidator func(int) error
	// DistanceMethodValidator is a validator for the "distance_method" field. It is called by the builders before save.
	DistanceMethodValidator func(string) error
	// DefaultAutoGenerated holds the default value on creation for the "auto_generated" field.
	DefaultAutoGenerated bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ShipmentRoute queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByOriginLocationID orders the results by the origin_location_id field.
func ByOriginLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginLocationID, opts...).ToFunc()
}

// ByDestinationLocationID orders the results by the destination_location_id field.
func ByDestinationLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationLocationID, opts...).ToFunc()
}

// ByMileage orders the results by the mileage field.
func ByMileage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMileage, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByDistanceMethod orders the results by the distance_method field.
func ByDistanceMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistanceMethod, opts...).ToFunc()
}

// ByAutoGenerated orders the results by the auto_generated field.
func ByAutoGenerated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoGenerated, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByOriginLocationField orders the results by origin_location field.
func ByOriginLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOriginLocationStep(), sql.OrderByField(field, opts...))
	}
}

// ByDestinationLocationField orders the results by destination_location field.
func ByDestinationLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDestinationLocationStep(), sql.OrderByField(field, opts...))
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newOriginLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OriginLocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OriginLocationTable, OriginLocationColumn),
	)
}
func newDestinationLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DestinationLocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DestinationLocationTable, DestinationLocationColumn),
	)
}
