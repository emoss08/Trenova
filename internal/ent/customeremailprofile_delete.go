// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/customeremailprofile"
	"github.com/emoss08/trenova/internal/ent/predicate"
)

// CustomerEmailProfileDelete is the builder for deleting a CustomerEmailProfile entity.
type CustomerEmailProfileDelete struct {
	config
	hooks    []Hook
	mutation *CustomerEmailProfileMutation
}

// Where appends a list predicates to the CustomerEmailProfileDelete builder.
func (cepd *CustomerEmailProfileDelete) Where(ps ...predicate.CustomerEmailProfile) *CustomerEmailProfileDelete {
	cepd.mutation.Where(ps...)
	return cepd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cepd *CustomerEmailProfileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cepd.sqlExec, cepd.mutation, cepd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cepd *CustomerEmailProfileDelete) ExecX(ctx context.Context) int {
	n, err := cepd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cepd *CustomerEmailProfileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(customeremailprofile.Table, sqlgraph.NewFieldSpec(customeremailprofile.FieldID, field.TypeUUID))
	if ps := cepd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cepd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cepd.mutation.done = true
	return affected, err
}

// CustomerEmailProfileDeleteOne is the builder for deleting a single CustomerEmailProfile entity.
type CustomerEmailProfileDeleteOne struct {
	cepd *CustomerEmailProfileDelete
}

// Where appends a list predicates to the CustomerEmailProfileDelete builder.
func (cepdo *CustomerEmailProfileDeleteOne) Where(ps ...predicate.CustomerEmailProfile) *CustomerEmailProfileDeleteOne {
	cepdo.cepd.mutation.Where(ps...)
	return cepdo
}

// Exec executes the deletion query.
func (cepdo *CustomerEmailProfileDeleteOne) Exec(ctx context.Context) error {
	n, err := cepdo.cepd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{customeremailprofile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cepdo *CustomerEmailProfileDeleteOne) ExecX(ctx context.Context) {
	if err := cepdo.Exec(ctx); err != nil {
		panic(err)
	}
}
