// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/location"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/shipmentroute"
	"github.com/google/uuid"
)

// ShipmentRoute is the model entity for the ShipmentRoute schema.
type ShipmentRoute struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// The current version of this entity.
	Version int `json:"version" validate:"omitempty"`
	// OriginLocationID holds the value of the "origin_location_id" field.
	OriginLocationID uuid.UUID `json:"originLocationId" validate:"required"`
	// DestinationLocationID holds the value of the "destination_location_id" field.
	DestinationLocationID uuid.UUID `json:"destinationLocationId" validate:"required"`
	// Mileage holds the value of the "mileage" field.
	Mileage float64 `json:"mileage" validate:"required"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration" validate:"omitempty"`
	// DistanceMethod holds the value of the "distance_method" field.
	DistanceMethod string `json:"distanceMethod" validate:"omitempty,max=50"`
	// AutoGenerated holds the value of the "auto_generated" field.
	AutoGenerated bool `json:"autoGenerated" validate:"required"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentRouteQuery when eager-loading is set.
	Edges        ShipmentRouteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShipmentRouteEdges holds the relations/edges for other nodes in the graph.
type ShipmentRouteEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// OriginLocation holds the value of the origin_location edge.
	OriginLocation *Location `json:"originLocation,omitempty"`
	// DestinationLocation holds the value of the destination_location edge.
	DestinationLocation *Location `json:"destinationLocation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentRouteEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentRouteEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// OriginLocationOrErr returns the OriginLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentRouteEdges) OriginLocationOrErr() (*Location, error) {
	if e.OriginLocation != nil {
		return e.OriginLocation, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "origin_location"}
}

// DestinationLocationOrErr returns the DestinationLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentRouteEdges) DestinationLocationOrErr() (*Location, error) {
	if e.DestinationLocation != nil {
		return e.DestinationLocation, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "destination_location"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentRoute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentroute.FieldAutoGenerated:
			values[i] = new(sql.NullBool)
		case shipmentroute.FieldMileage:
			values[i] = new(sql.NullFloat64)
		case shipmentroute.FieldVersion, shipmentroute.FieldDuration:
			values[i] = new(sql.NullInt64)
		case shipmentroute.FieldDistanceMethod:
			values[i] = new(sql.NullString)
		case shipmentroute.FieldCreatedAt, shipmentroute.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case shipmentroute.FieldID, shipmentroute.FieldBusinessUnitID, shipmentroute.FieldOrganizationID, shipmentroute.FieldOriginLocationID, shipmentroute.FieldDestinationLocationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentRoute fields.
func (sr *ShipmentRoute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentroute.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sr.ID = *value
			}
		case shipmentroute.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				sr.BusinessUnitID = *value
			}
		case shipmentroute.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				sr.OrganizationID = *value
			}
		case shipmentroute.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case shipmentroute.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Time
			}
		case shipmentroute.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				sr.Version = int(value.Int64)
			}
		case shipmentroute.FieldOriginLocationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field origin_location_id", values[i])
			} else if value != nil {
				sr.OriginLocationID = *value
			}
		case shipmentroute.FieldDestinationLocationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field destination_location_id", values[i])
			} else if value != nil {
				sr.DestinationLocationID = *value
			}
		case shipmentroute.FieldMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field mileage", values[i])
			} else if value.Valid {
				sr.Mileage = value.Float64
			}
		case shipmentroute.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				sr.Duration = int(value.Int64)
			}
		case shipmentroute.FieldDistanceMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field distance_method", values[i])
			} else if value.Valid {
				sr.DistanceMethod = value.String
			}
		case shipmentroute.FieldAutoGenerated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_generated", values[i])
			} else if value.Valid {
				sr.AutoGenerated = value.Bool
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShipmentRoute.
// This includes values selected through modifiers, order, etc.
func (sr *ShipmentRoute) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the ShipmentRoute entity.
func (sr *ShipmentRoute) QueryBusinessUnit() *BusinessUnitQuery {
	return NewShipmentRouteClient(sr.config).QueryBusinessUnit(sr)
}

// QueryOrganization queries the "organization" edge of the ShipmentRoute entity.
func (sr *ShipmentRoute) QueryOrganization() *OrganizationQuery {
	return NewShipmentRouteClient(sr.config).QueryOrganization(sr)
}

// QueryOriginLocation queries the "origin_location" edge of the ShipmentRoute entity.
func (sr *ShipmentRoute) QueryOriginLocation() *LocationQuery {
	return NewShipmentRouteClient(sr.config).QueryOriginLocation(sr)
}

// QueryDestinationLocation queries the "destination_location" edge of the ShipmentRoute entity.
func (sr *ShipmentRoute) QueryDestinationLocation() *LocationQuery {
	return NewShipmentRouteClient(sr.config).QueryDestinationLocation(sr)
}

// Update returns a builder for updating this ShipmentRoute.
// Note that you need to call ShipmentRoute.Unwrap() before calling this method if this ShipmentRoute
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *ShipmentRoute) Update() *ShipmentRouteUpdateOne {
	return NewShipmentRouteClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the ShipmentRoute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *ShipmentRoute) Unwrap() *ShipmentRoute {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentRoute is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *ShipmentRoute) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentRoute(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", sr.Version))
	builder.WriteString(", ")
	builder.WriteString("origin_location_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.OriginLocationID))
	builder.WriteString(", ")
	builder.WriteString("destination_location_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.DestinationLocationID))
	builder.WriteString(", ")
	builder.WriteString("mileage=")
	builder.WriteString(fmt.Sprintf("%v", sr.Mileage))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", sr.Duration))
	builder.WriteString(", ")
	builder.WriteString("distance_method=")
	builder.WriteString(sr.DistanceMethod)
	builder.WriteString(", ")
	builder.WriteString("auto_generated=")
	builder.WriteString(fmt.Sprintf("%v", sr.AutoGenerated))
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentRoutes is a parsable slice of ShipmentRoute.
type ShipmentRoutes []*ShipmentRoute
