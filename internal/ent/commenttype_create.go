// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/commenttype"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/shipmentcomment"
	"github.com/google/uuid"
)

// CommentTypeCreate is the builder for creating a CommentType entity.
type CommentTypeCreate struct {
	config
	mutation *CommentTypeMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (ctc *CommentTypeCreate) SetBusinessUnitID(u uuid.UUID) *CommentTypeCreate {
	ctc.mutation.SetBusinessUnitID(u)
	return ctc
}

// SetOrganizationID sets the "organization_id" field.
func (ctc *CommentTypeCreate) SetOrganizationID(u uuid.UUID) *CommentTypeCreate {
	ctc.mutation.SetOrganizationID(u)
	return ctc
}

// SetCreatedAt sets the "created_at" field.
func (ctc *CommentTypeCreate) SetCreatedAt(t time.Time) *CommentTypeCreate {
	ctc.mutation.SetCreatedAt(t)
	return ctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctc *CommentTypeCreate) SetNillableCreatedAt(t *time.Time) *CommentTypeCreate {
	if t != nil {
		ctc.SetCreatedAt(*t)
	}
	return ctc
}

// SetUpdatedAt sets the "updated_at" field.
func (ctc *CommentTypeCreate) SetUpdatedAt(t time.Time) *CommentTypeCreate {
	ctc.mutation.SetUpdatedAt(t)
	return ctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ctc *CommentTypeCreate) SetNillableUpdatedAt(t *time.Time) *CommentTypeCreate {
	if t != nil {
		ctc.SetUpdatedAt(*t)
	}
	return ctc
}

// SetVersion sets the "version" field.
func (ctc *CommentTypeCreate) SetVersion(i int) *CommentTypeCreate {
	ctc.mutation.SetVersion(i)
	return ctc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ctc *CommentTypeCreate) SetNillableVersion(i *int) *CommentTypeCreate {
	if i != nil {
		ctc.SetVersion(*i)
	}
	return ctc
}

// SetStatus sets the "status" field.
func (ctc *CommentTypeCreate) SetStatus(c commenttype.Status) *CommentTypeCreate {
	ctc.mutation.SetStatus(c)
	return ctc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ctc *CommentTypeCreate) SetNillableStatus(c *commenttype.Status) *CommentTypeCreate {
	if c != nil {
		ctc.SetStatus(*c)
	}
	return ctc
}

// SetName sets the "name" field.
func (ctc *CommentTypeCreate) SetName(s string) *CommentTypeCreate {
	ctc.mutation.SetName(s)
	return ctc
}

// SetSeverity sets the "severity" field.
func (ctc *CommentTypeCreate) SetSeverity(c commenttype.Severity) *CommentTypeCreate {
	ctc.mutation.SetSeverity(c)
	return ctc
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (ctc *CommentTypeCreate) SetNillableSeverity(c *commenttype.Severity) *CommentTypeCreate {
	if c != nil {
		ctc.SetSeverity(*c)
	}
	return ctc
}

// SetDescription sets the "description" field.
func (ctc *CommentTypeCreate) SetDescription(s string) *CommentTypeCreate {
	ctc.mutation.SetDescription(s)
	return ctc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctc *CommentTypeCreate) SetNillableDescription(s *string) *CommentTypeCreate {
	if s != nil {
		ctc.SetDescription(*s)
	}
	return ctc
}

// SetID sets the "id" field.
func (ctc *CommentTypeCreate) SetID(u uuid.UUID) *CommentTypeCreate {
	ctc.mutation.SetID(u)
	return ctc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ctc *CommentTypeCreate) SetNillableID(u *uuid.UUID) *CommentTypeCreate {
	if u != nil {
		ctc.SetID(*u)
	}
	return ctc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (ctc *CommentTypeCreate) SetBusinessUnit(b *BusinessUnit) *CommentTypeCreate {
	return ctc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ctc *CommentTypeCreate) SetOrganization(o *Organization) *CommentTypeCreate {
	return ctc.SetOrganizationID(o.ID)
}

// AddShipmentCommentIDs adds the "shipment_comments" edge to the ShipmentComment entity by IDs.
func (ctc *CommentTypeCreate) AddShipmentCommentIDs(ids ...uuid.UUID) *CommentTypeCreate {
	ctc.mutation.AddShipmentCommentIDs(ids...)
	return ctc
}

// AddShipmentComments adds the "shipment_comments" edges to the ShipmentComment entity.
func (ctc *CommentTypeCreate) AddShipmentComments(s ...*ShipmentComment) *CommentTypeCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ctc.AddShipmentCommentIDs(ids...)
}

// Mutation returns the CommentTypeMutation object of the builder.
func (ctc *CommentTypeCreate) Mutation() *CommentTypeMutation {
	return ctc.mutation
}

// Save creates the CommentType in the database.
func (ctc *CommentTypeCreate) Save(ctx context.Context) (*CommentType, error) {
	ctc.defaults()
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CommentTypeCreate) SaveX(ctx context.Context) *CommentType {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CommentTypeCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CommentTypeCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *CommentTypeCreate) defaults() {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		v := commenttype.DefaultCreatedAt()
		ctc.mutation.SetCreatedAt(v)
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		v := commenttype.DefaultUpdatedAt()
		ctc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ctc.mutation.Version(); !ok {
		v := commenttype.DefaultVersion
		ctc.mutation.SetVersion(v)
	}
	if _, ok := ctc.mutation.Status(); !ok {
		v := commenttype.DefaultStatus
		ctc.mutation.SetStatus(v)
	}
	if _, ok := ctc.mutation.Severity(); !ok {
		v := commenttype.DefaultSeverity
		ctc.mutation.SetSeverity(v)
	}
	if _, ok := ctc.mutation.ID(); !ok {
		v := commenttype.DefaultID()
		ctc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CommentTypeCreate) check() error {
	if _, ok := ctc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "CommentType.business_unit_id"`)}
	}
	if _, ok := ctc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "CommentType.organization_id"`)}
	}
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CommentType.created_at"`)}
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CommentType.updated_at"`)}
	}
	if _, ok := ctc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CommentType.version"`)}
	}
	if _, ok := ctc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CommentType.status"`)}
	}
	if v, ok := ctc.mutation.Status(); ok {
		if err := commenttype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CommentType.status": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CommentType.name"`)}
	}
	if v, ok := ctc.mutation.Name(); ok {
		if err := commenttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CommentType.name": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.Severity(); !ok {
		return &ValidationError{Name: "severity", err: errors.New(`ent: missing required field "CommentType.severity"`)}
	}
	if v, ok := ctc.mutation.Severity(); ok {
		if err := commenttype.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "CommentType.severity": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "CommentType.business_unit"`)}
	}
	if _, ok := ctc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "CommentType.organization"`)}
	}
	return nil
}

func (ctc *CommentTypeCreate) sqlSave(ctx context.Context) (*CommentType, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *CommentTypeCreate) createSpec() (*CommentType, *sqlgraph.CreateSpec) {
	var (
		_node = &CommentType{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(commenttype.Table, sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID))
	)
	if id, ok := ctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ctc.mutation.CreatedAt(); ok {
		_spec.SetField(commenttype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ctc.mutation.UpdatedAt(); ok {
		_spec.SetField(commenttype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ctc.mutation.Version(); ok {
		_spec.SetField(commenttype.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := ctc.mutation.Status(); ok {
		_spec.SetField(commenttype.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ctc.mutation.Name(); ok {
		_spec.SetField(commenttype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ctc.mutation.Severity(); ok {
		_spec.SetField(commenttype.FieldSeverity, field.TypeEnum, value)
		_node.Severity = value
	}
	if value, ok := ctc.mutation.Description(); ok {
		_spec.SetField(commenttype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := ctc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commenttype.BusinessUnitTable,
			Columns: []string{commenttype.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commenttype.OrganizationTable,
			Columns: []string{commenttype.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctc.mutation.ShipmentCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commenttype.ShipmentCommentsTable,
			Columns: []string{commenttype.ShipmentCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommentTypeCreateBulk is the builder for creating many CommentType entities in bulk.
type CommentTypeCreateBulk struct {
	config
	err      error
	builders []*CommentTypeCreate
}

// Save creates the CommentType entities in the database.
func (ctcb *CommentTypeCreateBulk) Save(ctx context.Context) ([]*CommentType, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CommentType, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CommentTypeCreateBulk) SaveX(ctx context.Context) []*CommentType {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CommentTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CommentTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
