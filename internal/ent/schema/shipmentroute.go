package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ShipmentRoute holds the schema definition for the ShipmentRoute entity.
type ShipmentRoute struct {
	ent.Schema
}

// Fields of the ShipmentRoute.
func (ShipmentRoute) Fields() []ent.Field {
	return []ent.Field{
		field.UUID("origin_location_id", uuid.UUID{}).
			Unique().
			StructTag(`json:"originLocationId" validate:"required"`),
		field.UUID("destination_location_id", uuid.UUID{}).
			Unique().
			StructTag(`json:"destinationLocationId" validate:"required"`),
		field.Float("mileage").
			Positive().
			StructTag(`json:"mileage" validate:"required"`),
		field.Int("duration").
			Positive().
			Optional().
			StructTag(`json:"duration" validate:"omitempty"`),
		field.String("distance_method").
			SchemaType(map[string]string{
				dialect.Postgres: "VARCHAR(50)",
				dialect.SQLite:   "VARCHAR(50)",
			}).
			MaxLen(50).
			Optional().
			StructTag(`json:"distanceMethod" validate:"omitempty,max=50"`),
		field.Bool("auto_generated").
			Default(false).
			Immutable().
			StructTag(`json:"autoGenerated" validate:"required"`),
	}
}

// Mixin of the ShipmentRoute.
func (ShipmentRoute) Mixin() []ent.Mixin {
	return []ent.Mixin{
		BaseMixin{},
	}
}

// Edges of the ShipmentRoute.
func (ShipmentRoute) Edges() []ent.Edge {
	return []ent.Edge{
		edge.From("origin_location", Location.Type).
			Field("origin_location_id").
			Ref("origin_route_locations").
			Required().
			Unique().
			StructTag(`json:"originLocation,omitempty"`),
		edge.From("destination_location", Location.Type).
			Field("destination_location_id").
			Ref("destination_route_locations").
			Required().
			Unique().
			StructTag(`json:"destinationLocation,omitempty"`),
	}
}
