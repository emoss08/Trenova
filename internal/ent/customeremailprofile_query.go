// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customeremailprofile"
	"github.com/emoss08/trenova/internal/ent/emailprofile"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// CustomerEmailProfileQuery is the builder for querying CustomerEmailProfile entities.
type CustomerEmailProfileQuery struct {
	config
	ctx              *QueryContext
	order            []customeremailprofile.OrderOption
	inters           []Interceptor
	predicates       []predicate.CustomerEmailProfile
	withBusinessUnit *BusinessUnitQuery
	withOrganization *OrganizationQuery
	withCustomer     *CustomerQuery
	withEmailProfile *EmailProfileQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CustomerEmailProfileQuery builder.
func (cepq *CustomerEmailProfileQuery) Where(ps ...predicate.CustomerEmailProfile) *CustomerEmailProfileQuery {
	cepq.predicates = append(cepq.predicates, ps...)
	return cepq
}

// Limit the number of records to be returned by this query.
func (cepq *CustomerEmailProfileQuery) Limit(limit int) *CustomerEmailProfileQuery {
	cepq.ctx.Limit = &limit
	return cepq
}

// Offset to start from.
func (cepq *CustomerEmailProfileQuery) Offset(offset int) *CustomerEmailProfileQuery {
	cepq.ctx.Offset = &offset
	return cepq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cepq *CustomerEmailProfileQuery) Unique(unique bool) *CustomerEmailProfileQuery {
	cepq.ctx.Unique = &unique
	return cepq
}

// Order specifies how the records should be ordered.
func (cepq *CustomerEmailProfileQuery) Order(o ...customeremailprofile.OrderOption) *CustomerEmailProfileQuery {
	cepq.order = append(cepq.order, o...)
	return cepq
}

// QueryBusinessUnit chains the current query on the "business_unit" edge.
func (cepq *CustomerEmailProfileQuery) QueryBusinessUnit() *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: cepq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customeremailprofile.Table, customeremailprofile.FieldID, selector),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customeremailprofile.BusinessUnitTable, customeremailprofile.BusinessUnitColumn),
		)
		fromU = sqlgraph.SetNeighbors(cepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (cepq *CustomerEmailProfileQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: cepq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customeremailprofile.Table, customeremailprofile.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customeremailprofile.OrganizationTable, customeremailprofile.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(cepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomer chains the current query on the "customer" edge.
func (cepq *CustomerEmailProfileQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: cepq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customeremailprofile.Table, customeremailprofile.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, customeremailprofile.CustomerTable, customeremailprofile.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(cepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmailProfile chains the current query on the "email_profile" edge.
func (cepq *CustomerEmailProfileQuery) QueryEmailProfile() *EmailProfileQuery {
	query := (&EmailProfileClient{config: cepq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customeremailprofile.Table, customeremailprofile.FieldID, selector),
			sqlgraph.To(emailprofile.Table, emailprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customeremailprofile.EmailProfileTable, customeremailprofile.EmailProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(cepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CustomerEmailProfile entity from the query.
// Returns a *NotFoundError when no CustomerEmailProfile was found.
func (cepq *CustomerEmailProfileQuery) First(ctx context.Context) (*CustomerEmailProfile, error) {
	nodes, err := cepq.Limit(1).All(setContextOp(ctx, cepq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{customeremailprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cepq *CustomerEmailProfileQuery) FirstX(ctx context.Context) *CustomerEmailProfile {
	node, err := cepq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CustomerEmailProfile ID from the query.
// Returns a *NotFoundError when no CustomerEmailProfile ID was found.
func (cepq *CustomerEmailProfileQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cepq.Limit(1).IDs(setContextOp(ctx, cepq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{customeremailprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cepq *CustomerEmailProfileQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cepq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CustomerEmailProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CustomerEmailProfile entity is found.
// Returns a *NotFoundError when no CustomerEmailProfile entities are found.
func (cepq *CustomerEmailProfileQuery) Only(ctx context.Context) (*CustomerEmailProfile, error) {
	nodes, err := cepq.Limit(2).All(setContextOp(ctx, cepq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{customeremailprofile.Label}
	default:
		return nil, &NotSingularError{customeremailprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cepq *CustomerEmailProfileQuery) OnlyX(ctx context.Context) *CustomerEmailProfile {
	node, err := cepq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CustomerEmailProfile ID in the query.
// Returns a *NotSingularError when more than one CustomerEmailProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (cepq *CustomerEmailProfileQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cepq.Limit(2).IDs(setContextOp(ctx, cepq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{customeremailprofile.Label}
	default:
		err = &NotSingularError{customeremailprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cepq *CustomerEmailProfileQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cepq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CustomerEmailProfiles.
func (cepq *CustomerEmailProfileQuery) All(ctx context.Context) ([]*CustomerEmailProfile, error) {
	ctx = setContextOp(ctx, cepq.ctx, "All")
	if err := cepq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CustomerEmailProfile, *CustomerEmailProfileQuery]()
	return withInterceptors[[]*CustomerEmailProfile](ctx, cepq, qr, cepq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cepq *CustomerEmailProfileQuery) AllX(ctx context.Context) []*CustomerEmailProfile {
	nodes, err := cepq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CustomerEmailProfile IDs.
func (cepq *CustomerEmailProfileQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if cepq.ctx.Unique == nil && cepq.path != nil {
		cepq.Unique(true)
	}
	ctx = setContextOp(ctx, cepq.ctx, "IDs")
	if err = cepq.Select(customeremailprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cepq *CustomerEmailProfileQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cepq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cepq *CustomerEmailProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cepq.ctx, "Count")
	if err := cepq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cepq, querierCount[*CustomerEmailProfileQuery](), cepq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cepq *CustomerEmailProfileQuery) CountX(ctx context.Context) int {
	count, err := cepq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cepq *CustomerEmailProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cepq.ctx, "Exist")
	switch _, err := cepq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cepq *CustomerEmailProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := cepq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CustomerEmailProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cepq *CustomerEmailProfileQuery) Clone() *CustomerEmailProfileQuery {
	if cepq == nil {
		return nil
	}
	return &CustomerEmailProfileQuery{
		config:           cepq.config,
		ctx:              cepq.ctx.Clone(),
		order:            append([]customeremailprofile.OrderOption{}, cepq.order...),
		inters:           append([]Interceptor{}, cepq.inters...),
		predicates:       append([]predicate.CustomerEmailProfile{}, cepq.predicates...),
		withBusinessUnit: cepq.withBusinessUnit.Clone(),
		withOrganization: cepq.withOrganization.Clone(),
		withCustomer:     cepq.withCustomer.Clone(),
		withEmailProfile: cepq.withEmailProfile.Clone(),
		// clone intermediate query.
		sql:  cepq.sql.Clone(),
		path: cepq.path,
	}
}

// WithBusinessUnit tells the query-builder to eager-load the nodes that are connected to
// the "business_unit" edge. The optional arguments are used to configure the query builder of the edge.
func (cepq *CustomerEmailProfileQuery) WithBusinessUnit(opts ...func(*BusinessUnitQuery)) *CustomerEmailProfileQuery {
	query := (&BusinessUnitClient{config: cepq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cepq.withBusinessUnit = query
	return cepq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (cepq *CustomerEmailProfileQuery) WithOrganization(opts ...func(*OrganizationQuery)) *CustomerEmailProfileQuery {
	query := (&OrganizationClient{config: cepq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cepq.withOrganization = query
	return cepq
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (cepq *CustomerEmailProfileQuery) WithCustomer(opts ...func(*CustomerQuery)) *CustomerEmailProfileQuery {
	query := (&CustomerClient{config: cepq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cepq.withCustomer = query
	return cepq
}

// WithEmailProfile tells the query-builder to eager-load the nodes that are connected to
// the "email_profile" edge. The optional arguments are used to configure the query builder of the edge.
func (cepq *CustomerEmailProfileQuery) WithEmailProfile(opts ...func(*EmailProfileQuery)) *CustomerEmailProfileQuery {
	query := (&EmailProfileClient{config: cepq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cepq.withEmailProfile = query
	return cepq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CustomerEmailProfile.Query().
//		GroupBy(customeremailprofile.FieldBusinessUnitID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cepq *CustomerEmailProfileQuery) GroupBy(field string, fields ...string) *CustomerEmailProfileGroupBy {
	cepq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CustomerEmailProfileGroupBy{build: cepq}
	grbuild.flds = &cepq.ctx.Fields
	grbuild.label = customeremailprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//	}
//
//	client.CustomerEmailProfile.Query().
//		Select(customeremailprofile.FieldBusinessUnitID).
//		Scan(ctx, &v)
func (cepq *CustomerEmailProfileQuery) Select(fields ...string) *CustomerEmailProfileSelect {
	cepq.ctx.Fields = append(cepq.ctx.Fields, fields...)
	sbuild := &CustomerEmailProfileSelect{CustomerEmailProfileQuery: cepq}
	sbuild.label = customeremailprofile.Label
	sbuild.flds, sbuild.scan = &cepq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CustomerEmailProfileSelect configured with the given aggregations.
func (cepq *CustomerEmailProfileQuery) Aggregate(fns ...AggregateFunc) *CustomerEmailProfileSelect {
	return cepq.Select().Aggregate(fns...)
}

func (cepq *CustomerEmailProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cepq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cepq); err != nil {
				return err
			}
		}
	}
	for _, f := range cepq.ctx.Fields {
		if !customeremailprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cepq.path != nil {
		prev, err := cepq.path(ctx)
		if err != nil {
			return err
		}
		cepq.sql = prev
	}
	return nil
}

func (cepq *CustomerEmailProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CustomerEmailProfile, error) {
	var (
		nodes       = []*CustomerEmailProfile{}
		_spec       = cepq.querySpec()
		loadedTypes = [4]bool{
			cepq.withBusinessUnit != nil,
			cepq.withOrganization != nil,
			cepq.withCustomer != nil,
			cepq.withEmailProfile != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CustomerEmailProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CustomerEmailProfile{config: cepq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cepq.modifiers) > 0 {
		_spec.Modifiers = cepq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cepq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cepq.withBusinessUnit; query != nil {
		if err := cepq.loadBusinessUnit(ctx, query, nodes, nil,
			func(n *CustomerEmailProfile, e *BusinessUnit) { n.Edges.BusinessUnit = e }); err != nil {
			return nil, err
		}
	}
	if query := cepq.withOrganization; query != nil {
		if err := cepq.loadOrganization(ctx, query, nodes, nil,
			func(n *CustomerEmailProfile, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	if query := cepq.withCustomer; query != nil {
		if err := cepq.loadCustomer(ctx, query, nodes, nil,
			func(n *CustomerEmailProfile, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	if query := cepq.withEmailProfile; query != nil {
		if err := cepq.loadEmailProfile(ctx, query, nodes, nil,
			func(n *CustomerEmailProfile, e *EmailProfile) { n.Edges.EmailProfile = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cepq *CustomerEmailProfileQuery) loadBusinessUnit(ctx context.Context, query *BusinessUnitQuery, nodes []*CustomerEmailProfile, init func(*CustomerEmailProfile), assign func(*CustomerEmailProfile, *BusinessUnit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CustomerEmailProfile)
	for i := range nodes {
		fk := nodes[i].BusinessUnitID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(businessunit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_unit_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cepq *CustomerEmailProfileQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*CustomerEmailProfile, init func(*CustomerEmailProfile), assign func(*CustomerEmailProfile, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CustomerEmailProfile)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cepq *CustomerEmailProfileQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*CustomerEmailProfile, init func(*CustomerEmailProfile), assign func(*CustomerEmailProfile, *Customer)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CustomerEmailProfile)
	for i := range nodes {
		fk := nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cepq *CustomerEmailProfileQuery) loadEmailProfile(ctx context.Context, query *EmailProfileQuery, nodes []*CustomerEmailProfile, init func(*CustomerEmailProfile), assign func(*CustomerEmailProfile, *EmailProfile)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CustomerEmailProfile)
	for i := range nodes {
		if nodes[i].EmailProfileID == nil {
			continue
		}
		fk := *nodes[i].EmailProfileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(emailprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "email_profile_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cepq *CustomerEmailProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cepq.querySpec()
	if len(cepq.modifiers) > 0 {
		_spec.Modifiers = cepq.modifiers
	}
	_spec.Node.Columns = cepq.ctx.Fields
	if len(cepq.ctx.Fields) > 0 {
		_spec.Unique = cepq.ctx.Unique != nil && *cepq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cepq.driver, _spec)
}

func (cepq *CustomerEmailProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(customeremailprofile.Table, customeremailprofile.Columns, sqlgraph.NewFieldSpec(customeremailprofile.FieldID, field.TypeUUID))
	_spec.From = cepq.sql
	if unique := cepq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cepq.path != nil {
		_spec.Unique = true
	}
	if fields := cepq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customeremailprofile.FieldID)
		for i := range fields {
			if fields[i] != customeremailprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cepq.withBusinessUnit != nil {
			_spec.Node.AddColumnOnce(customeremailprofile.FieldBusinessUnitID)
		}
		if cepq.withOrganization != nil {
			_spec.Node.AddColumnOnce(customeremailprofile.FieldOrganizationID)
		}
		if cepq.withCustomer != nil {
			_spec.Node.AddColumnOnce(customeremailprofile.FieldCustomerID)
		}
		if cepq.withEmailProfile != nil {
			_spec.Node.AddColumnOnce(customeremailprofile.FieldEmailProfileID)
		}
	}
	if ps := cepq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cepq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cepq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cepq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cepq *CustomerEmailProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cepq.driver.Dialect())
	t1 := builder.Table(customeremailprofile.Table)
	columns := cepq.ctx.Fields
	if len(columns) == 0 {
		columns = customeremailprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cepq.sql != nil {
		selector = cepq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cepq.ctx.Unique != nil && *cepq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range cepq.modifiers {
		m(selector)
	}
	for _, p := range cepq.predicates {
		p(selector)
	}
	for _, p := range cepq.order {
		p(selector)
	}
	if offset := cepq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cepq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cepq *CustomerEmailProfileQuery) Modify(modifiers ...func(s *sql.Selector)) *CustomerEmailProfileSelect {
	cepq.modifiers = append(cepq.modifiers, modifiers...)
	return cepq.Select()
}

// CustomerEmailProfileGroupBy is the group-by builder for CustomerEmailProfile entities.
type CustomerEmailProfileGroupBy struct {
	selector
	build *CustomerEmailProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cepgb *CustomerEmailProfileGroupBy) Aggregate(fns ...AggregateFunc) *CustomerEmailProfileGroupBy {
	cepgb.fns = append(cepgb.fns, fns...)
	return cepgb
}

// Scan applies the selector query and scans the result into the given value.
func (cepgb *CustomerEmailProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cepgb.build.ctx, "GroupBy")
	if err := cepgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomerEmailProfileQuery, *CustomerEmailProfileGroupBy](ctx, cepgb.build, cepgb, cepgb.build.inters, v)
}

func (cepgb *CustomerEmailProfileGroupBy) sqlScan(ctx context.Context, root *CustomerEmailProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cepgb.fns))
	for _, fn := range cepgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cepgb.flds)+len(cepgb.fns))
		for _, f := range *cepgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cepgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cepgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CustomerEmailProfileSelect is the builder for selecting fields of CustomerEmailProfile entities.
type CustomerEmailProfileSelect struct {
	*CustomerEmailProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ceps *CustomerEmailProfileSelect) Aggregate(fns ...AggregateFunc) *CustomerEmailProfileSelect {
	ceps.fns = append(ceps.fns, fns...)
	return ceps
}

// Scan applies the selector query and scans the result into the given value.
func (ceps *CustomerEmailProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ceps.ctx, "Select")
	if err := ceps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomerEmailProfileQuery, *CustomerEmailProfileSelect](ctx, ceps.CustomerEmailProfileQuery, ceps, ceps.inters, v)
}

func (ceps *CustomerEmailProfileSelect) sqlScan(ctx context.Context, root *CustomerEmailProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ceps.fns))
	for _, fn := range ceps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ceps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ceps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ceps *CustomerEmailProfileSelect) Modify(modifiers ...func(s *sql.Selector)) *CustomerEmailProfileSelect {
	ceps.modifiers = append(ceps.modifiers, modifiers...)
	return ceps
}
