// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customeremailprofile"
	"github.com/emoss08/trenova/internal/ent/customerruleprofile"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/usstate"
	"github.com/google/uuid"
)

// Customer is the model entity for the Customer schema.
type Customer struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// The current version of this entity.
	Version int `json:"version" validate:"omitempty"`
	// Status holds the value of the "status" field.
	Status customer.Status `json:"status" validate:"required,oneof=A I"`
	// Code holds the value of the "code" field.
	Code string `json:"code" validate:"omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name" validate:"required,max=150"`
	// AddressLine1 holds the value of the "address_line_1" field.
	AddressLine1 string `json:"addressLine1" validate:"required,max=150"`
	// AddressLine2 holds the value of the "address_line_2" field.
	AddressLine2 string `json:"addressLine2" validate:"omitempty,max=150"`
	// City holds the value of the "city" field.
	City string `json:"city" validate:"required,max=150"`
	// StateID holds the value of the "state_id" field.
	StateID uuid.UUID `json:"stateId" validate:"omitempty,uuid"`
	// PostalCode holds the value of the "postal_code" field.
	PostalCode string `json:"postalCode" validate:"required,max=10"`
	// HasCustomerPortal holds the value of the "has_customer_portal" field.
	HasCustomerPortal bool `json:"hasCustomerPortal" validate:"omitempty"`
	// AutoMarkReadyToBill holds the value of the "auto_mark_ready_to_bill" field.
	AutoMarkReadyToBill bool `json:"autoMarkReadyToBill" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerQuery when eager-loading is set.
	Edges        CustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerEdges holds the relations/edges for other nodes in the graph.
type CustomerEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// State holds the value of the state edge.
	State *UsState `json:"state"`
	// Shipments holds the value of the shipments edge.
	Shipments []*Shipment `json:"shipments,omitempty"`
	// EmailProfile holds the value of the email_profile edge.
	EmailProfile *CustomerEmailProfile `json:"email_profile,omitempty"`
	// RuleProfile holds the value of the rule_profile edge.
	RuleProfile *CustomerRuleProfile `json:"rule_profile,omitempty"`
	// DetentionPolicies holds the value of the detention_policies edge.
	DetentionPolicies []*CustomerDetentionPolicy `json:"detention_policies,omitempty"`
	// Contacts holds the value of the contacts edge.
	Contacts []*CustomerContact `json:"contacts,omitempty"`
	// DeliverySlots holds the value of the delivery_slots edge.
	DeliverySlots []*DeliverySlot `json:"delivery_slots,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes            [9]bool
	namedShipments         map[string][]*Shipment
	namedDetentionPolicies map[string][]*CustomerDetentionPolicy
	namedContacts          map[string][]*CustomerContact
	namedDeliverySlots     map[string][]*DeliverySlot
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// StateOrErr returns the State value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) StateOrErr() (*UsState, error) {
	if e.State != nil {
		return e.State, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: usstate.Label}
	}
	return nil, &NotLoadedError{edge: "state"}
}

// ShipmentsOrErr returns the Shipments value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) ShipmentsOrErr() ([]*Shipment, error) {
	if e.loadedTypes[3] {
		return e.Shipments, nil
	}
	return nil, &NotLoadedError{edge: "shipments"}
}

// EmailProfileOrErr returns the EmailProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) EmailProfileOrErr() (*CustomerEmailProfile, error) {
	if e.EmailProfile != nil {
		return e.EmailProfile, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: customeremailprofile.Label}
	}
	return nil, &NotLoadedError{edge: "email_profile"}
}

// RuleProfileOrErr returns the RuleProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) RuleProfileOrErr() (*CustomerRuleProfile, error) {
	if e.RuleProfile != nil {
		return e.RuleProfile, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: customerruleprofile.Label}
	}
	return nil, &NotLoadedError{edge: "rule_profile"}
}

// DetentionPoliciesOrErr returns the DetentionPolicies value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) DetentionPoliciesOrErr() ([]*CustomerDetentionPolicy, error) {
	if e.loadedTypes[6] {
		return e.DetentionPolicies, nil
	}
	return nil, &NotLoadedError{edge: "detention_policies"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) ContactsOrErr() ([]*CustomerContact, error) {
	if e.loadedTypes[7] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// DeliverySlotsOrErr returns the DeliverySlots value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) DeliverySlotsOrErr() ([]*DeliverySlot, error) {
	if e.loadedTypes[8] {
		return e.DeliverySlots, nil
	}
	return nil, &NotLoadedError{edge: "delivery_slots"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customer.FieldHasCustomerPortal, customer.FieldAutoMarkReadyToBill:
			values[i] = new(sql.NullBool)
		case customer.FieldVersion:
			values[i] = new(sql.NullInt64)
		case customer.FieldStatus, customer.FieldCode, customer.FieldName, customer.FieldAddressLine1, customer.FieldAddressLine2, customer.FieldCity, customer.FieldPostalCode:
			values[i] = new(sql.NullString)
		case customer.FieldCreatedAt, customer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case customer.FieldID, customer.FieldBusinessUnitID, customer.FieldOrganizationID, customer.FieldStateID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customer fields.
func (c *Customer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case customer.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				c.BusinessUnitID = *value
			}
		case customer.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				c.OrganizationID = *value
			}
		case customer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case customer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case customer.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				c.Version = int(value.Int64)
			}
		case customer.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = customer.Status(value.String)
			}
		case customer.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case customer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case customer.FieldAddressLine1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_line_1", values[i])
			} else if value.Valid {
				c.AddressLine1 = value.String
			}
		case customer.FieldAddressLine2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_line_2", values[i])
			} else if value.Valid {
				c.AddressLine2 = value.String
			}
		case customer.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				c.City = value.String
			}
		case customer.FieldStateID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field state_id", values[i])
			} else if value != nil {
				c.StateID = *value
			}
		case customer.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_code", values[i])
			} else if value.Valid {
				c.PostalCode = value.String
			}
		case customer.FieldHasCustomerPortal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_customer_portal", values[i])
			} else if value.Valid {
				c.HasCustomerPortal = value.Bool
			}
		case customer.FieldAutoMarkReadyToBill:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_mark_ready_to_bill", values[i])
			} else if value.Valid {
				c.AutoMarkReadyToBill = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Customer.
// This includes values selected through modifiers, order, etc.
func (c *Customer) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the Customer entity.
func (c *Customer) QueryBusinessUnit() *BusinessUnitQuery {
	return NewCustomerClient(c.config).QueryBusinessUnit(c)
}

// QueryOrganization queries the "organization" edge of the Customer entity.
func (c *Customer) QueryOrganization() *OrganizationQuery {
	return NewCustomerClient(c.config).QueryOrganization(c)
}

// QueryState queries the "state" edge of the Customer entity.
func (c *Customer) QueryState() *UsStateQuery {
	return NewCustomerClient(c.config).QueryState(c)
}

// QueryShipments queries the "shipments" edge of the Customer entity.
func (c *Customer) QueryShipments() *ShipmentQuery {
	return NewCustomerClient(c.config).QueryShipments(c)
}

// QueryEmailProfile queries the "email_profile" edge of the Customer entity.
func (c *Customer) QueryEmailProfile() *CustomerEmailProfileQuery {
	return NewCustomerClient(c.config).QueryEmailProfile(c)
}

// QueryRuleProfile queries the "rule_profile" edge of the Customer entity.
func (c *Customer) QueryRuleProfile() *CustomerRuleProfileQuery {
	return NewCustomerClient(c.config).QueryRuleProfile(c)
}

// QueryDetentionPolicies queries the "detention_policies" edge of the Customer entity.
func (c *Customer) QueryDetentionPolicies() *CustomerDetentionPolicyQuery {
	return NewCustomerClient(c.config).QueryDetentionPolicies(c)
}

// QueryContacts queries the "contacts" edge of the Customer entity.
func (c *Customer) QueryContacts() *CustomerContactQuery {
	return NewCustomerClient(c.config).QueryContacts(c)
}

// QueryDeliverySlots queries the "delivery_slots" edge of the Customer entity.
func (c *Customer) QueryDeliverySlots() *DeliverySlotQuery {
	return NewCustomerClient(c.config).QueryDeliverySlots(c)
}

// Update returns a builder for updating this Customer.
// Note that you need to call Customer.Unwrap() before calling this method if this Customer
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Customer) Update() *CustomerUpdateOne {
	return NewCustomerClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Customer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Customer) Unwrap() *Customer {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Customer is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Customer) String() string {
	var builder strings.Builder
	builder.WriteString("Customer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", c.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", c.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", c.Version))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(c.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("address_line_1=")
	builder.WriteString(c.AddressLine1)
	builder.WriteString(", ")
	builder.WriteString("address_line_2=")
	builder.WriteString(c.AddressLine2)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(c.City)
	builder.WriteString(", ")
	builder.WriteString("state_id=")
	builder.WriteString(fmt.Sprintf("%v", c.StateID))
	builder.WriteString(", ")
	builder.WriteString("postal_code=")
	builder.WriteString(c.PostalCode)
	builder.WriteString(", ")
	builder.WriteString("has_customer_portal=")
	builder.WriteString(fmt.Sprintf("%v", c.HasCustomerPortal))
	builder.WriteString(", ")
	builder.WriteString("auto_mark_ready_to_bill=")
	builder.WriteString(fmt.Sprintf("%v", c.AutoMarkReadyToBill))
	builder.WriteByte(')')
	return builder.String()
}

// NamedShipments returns the Shipments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Customer) NamedShipments(name string) ([]*Shipment, error) {
	if c.Edges.namedShipments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedShipments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Customer) appendNamedShipments(name string, edges ...*Shipment) {
	if c.Edges.namedShipments == nil {
		c.Edges.namedShipments = make(map[string][]*Shipment)
	}
	if len(edges) == 0 {
		c.Edges.namedShipments[name] = []*Shipment{}
	} else {
		c.Edges.namedShipments[name] = append(c.Edges.namedShipments[name], edges...)
	}
}

// NamedDetentionPolicies returns the DetentionPolicies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Customer) NamedDetentionPolicies(name string) ([]*CustomerDetentionPolicy, error) {
	if c.Edges.namedDetentionPolicies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDetentionPolicies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Customer) appendNamedDetentionPolicies(name string, edges ...*CustomerDetentionPolicy) {
	if c.Edges.namedDetentionPolicies == nil {
		c.Edges.namedDetentionPolicies = make(map[string][]*CustomerDetentionPolicy)
	}
	if len(edges) == 0 {
		c.Edges.namedDetentionPolicies[name] = []*CustomerDetentionPolicy{}
	} else {
		c.Edges.namedDetentionPolicies[name] = append(c.Edges.namedDetentionPolicies[name], edges...)
	}
}

// NamedContacts returns the Contacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Customer) NamedContacts(name string) ([]*CustomerContact, error) {
	if c.Edges.namedContacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedContacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Customer) appendNamedContacts(name string, edges ...*CustomerContact) {
	if c.Edges.namedContacts == nil {
		c.Edges.namedContacts = make(map[string][]*CustomerContact)
	}
	if len(edges) == 0 {
		c.Edges.namedContacts[name] = []*CustomerContact{}
	} else {
		c.Edges.namedContacts[name] = append(c.Edges.namedContacts[name], edges...)
	}
}

// NamedDeliverySlots returns the DeliverySlots named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Customer) NamedDeliverySlots(name string) ([]*DeliverySlot, error) {
	if c.Edges.namedDeliverySlots == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDeliverySlots[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Customer) appendNamedDeliverySlots(name string, edges ...*DeliverySlot) {
	if c.Edges.namedDeliverySlots == nil {
		c.Edges.namedDeliverySlots = make(map[string][]*DeliverySlot)
	}
	if len(edges) == 0 {
		c.Edges.namedDeliverySlots[name] = []*DeliverySlot{}
	} else {
		c.Edges.namedDeliverySlots[name] = append(c.Edges.namedDeliverySlots[name], edges...)
	}
}

// Customers is a parsable slice of Customer.
type Customers []*Customer
