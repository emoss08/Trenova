// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customercontact"
	"github.com/emoss08/trenova/internal/ent/customerdetentionpolicy"
	"github.com/emoss08/trenova/internal/ent/customeremailprofile"
	"github.com/emoss08/trenova/internal/ent/customerruleprofile"
	"github.com/emoss08/trenova/internal/ent/deliveryslot"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/shipment"
	"github.com/emoss08/trenova/internal/ent/usstate"
	"github.com/google/uuid"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (cc *CustomerCreate) SetBusinessUnitID(u uuid.UUID) *CustomerCreate {
	cc.mutation.SetBusinessUnitID(u)
	return cc
}

// SetOrganizationID sets the "organization_id" field.
func (cc *CustomerCreate) SetOrganizationID(u uuid.UUID) *CustomerCreate {
	cc.mutation.SetOrganizationID(u)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CustomerCreate) SetCreatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCreatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CustomerCreate) SetUpdatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableUpdatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetVersion sets the "version" field.
func (cc *CustomerCreate) SetVersion(i int) *CustomerCreate {
	cc.mutation.SetVersion(i)
	return cc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableVersion(i *int) *CustomerCreate {
	if i != nil {
		cc.SetVersion(*i)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CustomerCreate) SetStatus(c customer.Status) *CustomerCreate {
	cc.mutation.SetStatus(c)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableStatus(c *customer.Status) *CustomerCreate {
	if c != nil {
		cc.SetStatus(*c)
	}
	return cc
}

// SetCode sets the "code" field.
func (cc *CustomerCreate) SetCode(s string) *CustomerCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CustomerCreate) SetName(s string) *CustomerCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetAddressLine1 sets the "address_line_1" field.
func (cc *CustomerCreate) SetAddressLine1(s string) *CustomerCreate {
	cc.mutation.SetAddressLine1(s)
	return cc
}

// SetAddressLine2 sets the "address_line_2" field.
func (cc *CustomerCreate) SetAddressLine2(s string) *CustomerCreate {
	cc.mutation.SetAddressLine2(s)
	return cc
}

// SetNillableAddressLine2 sets the "address_line_2" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableAddressLine2(s *string) *CustomerCreate {
	if s != nil {
		cc.SetAddressLine2(*s)
	}
	return cc
}

// SetCity sets the "city" field.
func (cc *CustomerCreate) SetCity(s string) *CustomerCreate {
	cc.mutation.SetCity(s)
	return cc
}

// SetStateID sets the "state_id" field.
func (cc *CustomerCreate) SetStateID(u uuid.UUID) *CustomerCreate {
	cc.mutation.SetStateID(u)
	return cc
}

// SetPostalCode sets the "postal_code" field.
func (cc *CustomerCreate) SetPostalCode(s string) *CustomerCreate {
	cc.mutation.SetPostalCode(s)
	return cc
}

// SetHasCustomerPortal sets the "has_customer_portal" field.
func (cc *CustomerCreate) SetHasCustomerPortal(b bool) *CustomerCreate {
	cc.mutation.SetHasCustomerPortal(b)
	return cc
}

// SetNillableHasCustomerPortal sets the "has_customer_portal" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableHasCustomerPortal(b *bool) *CustomerCreate {
	if b != nil {
		cc.SetHasCustomerPortal(*b)
	}
	return cc
}

// SetAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field.
func (cc *CustomerCreate) SetAutoMarkReadyToBill(b bool) *CustomerCreate {
	cc.mutation.SetAutoMarkReadyToBill(b)
	return cc
}

// SetNillableAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableAutoMarkReadyToBill(b *bool) *CustomerCreate {
	if b != nil {
		cc.SetAutoMarkReadyToBill(*b)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CustomerCreate) SetID(u uuid.UUID) *CustomerCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableID(u *uuid.UUID) *CustomerCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (cc *CustomerCreate) SetBusinessUnit(b *BusinessUnit) *CustomerCreate {
	return cc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cc *CustomerCreate) SetOrganization(o *Organization) *CustomerCreate {
	return cc.SetOrganizationID(o.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (cc *CustomerCreate) SetState(u *UsState) *CustomerCreate {
	return cc.SetStateID(u.ID)
}

// AddShipmentIDs adds the "shipments" edge to the Shipment entity by IDs.
func (cc *CustomerCreate) AddShipmentIDs(ids ...uuid.UUID) *CustomerCreate {
	cc.mutation.AddShipmentIDs(ids...)
	return cc
}

// AddShipments adds the "shipments" edges to the Shipment entity.
func (cc *CustomerCreate) AddShipments(s ...*Shipment) *CustomerCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddShipmentIDs(ids...)
}

// SetEmailProfileID sets the "email_profile" edge to the CustomerEmailProfile entity by ID.
func (cc *CustomerCreate) SetEmailProfileID(id uuid.UUID) *CustomerCreate {
	cc.mutation.SetEmailProfileID(id)
	return cc
}

// SetNillableEmailProfileID sets the "email_profile" edge to the CustomerEmailProfile entity by ID if the given value is not nil.
func (cc *CustomerCreate) SetNillableEmailProfileID(id *uuid.UUID) *CustomerCreate {
	if id != nil {
		cc = cc.SetEmailProfileID(*id)
	}
	return cc
}

// SetEmailProfile sets the "email_profile" edge to the CustomerEmailProfile entity.
func (cc *CustomerCreate) SetEmailProfile(c *CustomerEmailProfile) *CustomerCreate {
	return cc.SetEmailProfileID(c.ID)
}

// SetRuleProfileID sets the "rule_profile" edge to the CustomerRuleProfile entity by ID.
func (cc *CustomerCreate) SetRuleProfileID(id uuid.UUID) *CustomerCreate {
	cc.mutation.SetRuleProfileID(id)
	return cc
}

// SetNillableRuleProfileID sets the "rule_profile" edge to the CustomerRuleProfile entity by ID if the given value is not nil.
func (cc *CustomerCreate) SetNillableRuleProfileID(id *uuid.UUID) *CustomerCreate {
	if id != nil {
		cc = cc.SetRuleProfileID(*id)
	}
	return cc
}

// SetRuleProfile sets the "rule_profile" edge to the CustomerRuleProfile entity.
func (cc *CustomerCreate) SetRuleProfile(c *CustomerRuleProfile) *CustomerCreate {
	return cc.SetRuleProfileID(c.ID)
}

// AddDetentionPolicyIDs adds the "detention_policies" edge to the CustomerDetentionPolicy entity by IDs.
func (cc *CustomerCreate) AddDetentionPolicyIDs(ids ...uuid.UUID) *CustomerCreate {
	cc.mutation.AddDetentionPolicyIDs(ids...)
	return cc
}

// AddDetentionPolicies adds the "detention_policies" edges to the CustomerDetentionPolicy entity.
func (cc *CustomerCreate) AddDetentionPolicies(c ...*CustomerDetentionPolicy) *CustomerCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddDetentionPolicyIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the CustomerContact entity by IDs.
func (cc *CustomerCreate) AddContactIDs(ids ...uuid.UUID) *CustomerCreate {
	cc.mutation.AddContactIDs(ids...)
	return cc
}

// AddContacts adds the "contacts" edges to the CustomerContact entity.
func (cc *CustomerCreate) AddContacts(c ...*CustomerContact) *CustomerCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddContactIDs(ids...)
}

// AddDeliverySlotIDs adds the "delivery_slots" edge to the DeliverySlot entity by IDs.
func (cc *CustomerCreate) AddDeliverySlotIDs(ids ...uuid.UUID) *CustomerCreate {
	cc.mutation.AddDeliverySlotIDs(ids...)
	return cc
}

// AddDeliverySlots adds the "delivery_slots" edges to the DeliverySlot entity.
func (cc *CustomerCreate) AddDeliverySlots(d ...*DeliverySlot) *CustomerCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDeliverySlotIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CustomerCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CustomerCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CustomerCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if customer.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized customer.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := customer.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if customer.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized customer.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := customer.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Version(); !ok {
		v := customer.DefaultVersion
		cc.mutation.SetVersion(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := customer.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.HasCustomerPortal(); !ok {
		v := customer.DefaultHasCustomerPortal
		cc.mutation.SetHasCustomerPortal(v)
	}
	if _, ok := cc.mutation.AutoMarkReadyToBill(); !ok {
		v := customer.DefaultAutoMarkReadyToBill
		cc.mutation.SetAutoMarkReadyToBill(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if customer.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized customer.DefaultID (forgotten import ent/runtime?)")
		}
		v := customer.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CustomerCreate) check() error {
	if _, ok := cc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "Customer.business_unit_id"`)}
	}
	if _, ok := cc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Customer.organization_id"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Customer.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Customer.updated_at"`)}
	}
	if _, ok := cc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Customer.version"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Customer.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := customer.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Customer.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Customer.code"`)}
	}
	if v, ok := cc.mutation.Code(); ok {
		if err := customer.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Customer.code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Customer.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.AddressLine1(); !ok {
		return &ValidationError{Name: "address_line_1", err: errors.New(`ent: missing required field "Customer.address_line_1"`)}
	}
	if v, ok := cc.mutation.AddressLine1(); ok {
		if err := customer.AddressLine1Validator(v); err != nil {
			return &ValidationError{Name: "address_line_1", err: fmt.Errorf(`ent: validator failed for field "Customer.address_line_1": %w`, err)}
		}
	}
	if v, ok := cc.mutation.AddressLine2(); ok {
		if err := customer.AddressLine2Validator(v); err != nil {
			return &ValidationError{Name: "address_line_2", err: fmt.Errorf(`ent: validator failed for field "Customer.address_line_2": %w`, err)}
		}
	}
	if _, ok := cc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Customer.city"`)}
	}
	if v, ok := cc.mutation.City(); ok {
		if err := customer.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Customer.city": %w`, err)}
		}
	}
	if _, ok := cc.mutation.StateID(); !ok {
		return &ValidationError{Name: "state_id", err: errors.New(`ent: missing required field "Customer.state_id"`)}
	}
	if _, ok := cc.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "Customer.postal_code"`)}
	}
	if v, ok := cc.mutation.PostalCode(); ok {
		if err := customer.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Customer.postal_code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.HasCustomerPortal(); !ok {
		return &ValidationError{Name: "has_customer_portal", err: errors.New(`ent: missing required field "Customer.has_customer_portal"`)}
	}
	if _, ok := cc.mutation.AutoMarkReadyToBill(); !ok {
		return &ValidationError{Name: "auto_mark_ready_to_bill", err: errors.New(`ent: missing required field "Customer.auto_mark_ready_to_bill"`)}
	}
	if _, ok := cc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "Customer.business_unit"`)}
	}
	if _, ok := cc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Customer.organization"`)}
	}
	if _, ok := cc.mutation.StateID(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required edge "Customer.state"`)}
	}
	return nil
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		_node = &Customer{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(customer.Table, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Version(); ok {
		_spec.SetField(customer.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(customer.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(customer.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.AddressLine1(); ok {
		_spec.SetField(customer.FieldAddressLine1, field.TypeString, value)
		_node.AddressLine1 = value
	}
	if value, ok := cc.mutation.AddressLine2(); ok {
		_spec.SetField(customer.FieldAddressLine2, field.TypeString, value)
		_node.AddressLine2 = value
	}
	if value, ok := cc.mutation.City(); ok {
		_spec.SetField(customer.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := cc.mutation.PostalCode(); ok {
		_spec.SetField(customer.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := cc.mutation.HasCustomerPortal(); ok {
		_spec.SetField(customer.FieldHasCustomerPortal, field.TypeBool, value)
		_node.HasCustomerPortal = value
	}
	if value, ok := cc.mutation.AutoMarkReadyToBill(); ok {
		_spec.SetField(customer.FieldAutoMarkReadyToBill, field.TypeBool, value)
		_node.AutoMarkReadyToBill = value
	}
	if nodes := cc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.BusinessUnitTable,
			Columns: []string{customer.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.OrganizationTable,
			Columns: []string{customer.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.StateTable,
			Columns: []string{customer.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ShipmentsTable,
			Columns: []string{customer.ShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.EmailProfileTable,
			Columns: []string{customer.EmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeremailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.RuleProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.RuleProfileTable,
			Columns: []string{customer.RuleProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DetentionPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DetentionPoliciesTable,
			Columns: []string{customer.DetentionPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeliverySlotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DeliverySlotsTable,
			Columns: []string{customer.DeliverySlotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryslot.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomerCreateBulk is the builder for creating many Customer entities in bulk.
type CustomerCreateBulk struct {
	config
	err      error
	builders []*CustomerCreate
}

// Save creates the Customer entities in the database.
func (ccb *CustomerCreateBulk) Save(ctx context.Context) ([]*Customer, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Customer, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CustomerCreateBulk) SaveX(ctx context.Context) []*Customer {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CustomerCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
