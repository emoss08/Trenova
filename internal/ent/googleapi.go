// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/googleapi"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// GoogleApi is the model entity for the GoogleApi schema.
type GoogleApi struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"apiKey" validate:"required"`
	// MileageUnit holds the value of the "mileage_unit" field.
	MileageUnit googleapi.MileageUnit `json:"mileageUnit" validate:"required,oneof=Imperial Metric"`
	// AddCustomerLocation holds the value of the "add_customer_location" field.
	AddCustomerLocation bool `json:"addCustomerLocation" validate:"omitempty"`
	// AutoGeocode holds the value of the "auto_geocode" field.
	AutoGeocode bool `json:"autoGeocode" validate:"omitempty"`
	// AddLocation holds the value of the "add_location" field.
	AddLocation bool `json:"addLocation" validate:"omitempty"`
	// TrafficModel holds the value of the "traffic_model" field.
	TrafficModel googleapi.TrafficModel `json:"trafficModel" validate:"required,oneof=BestGuess Optimistic Pessimistic"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoogleApiQuery when eager-loading is set.
	Edges            GoogleApiEdges `json:"edges"`
	business_unit_id *uuid.UUID
	organization_id  *uuid.UUID
	selectValues     sql.SelectValues
}

// GoogleApiEdges holds the relations/edges for other nodes in the graph.
type GoogleApiEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoogleApiEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoogleApiEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoogleApi) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case googleapi.FieldAddCustomerLocation, googleapi.FieldAutoGeocode, googleapi.FieldAddLocation:
			values[i] = new(sql.NullBool)
		case googleapi.FieldAPIKey, googleapi.FieldMileageUnit, googleapi.FieldTrafficModel:
			values[i] = new(sql.NullString)
		case googleapi.FieldCreatedAt, googleapi.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case googleapi.FieldID:
			values[i] = new(uuid.UUID)
		case googleapi.ForeignKeys[0]: // business_unit_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case googleapi.ForeignKeys[1]: // organization_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoogleApi fields.
func (ga *GoogleApi) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case googleapi.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ga.ID = *value
			}
		case googleapi.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		case googleapi.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ga.UpdatedAt = value.Time
			}
		case googleapi.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				ga.APIKey = value.String
			}
		case googleapi.FieldMileageUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mileage_unit", values[i])
			} else if value.Valid {
				ga.MileageUnit = googleapi.MileageUnit(value.String)
			}
		case googleapi.FieldAddCustomerLocation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field add_customer_location", values[i])
			} else if value.Valid {
				ga.AddCustomerLocation = value.Bool
			}
		case googleapi.FieldAutoGeocode:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_geocode", values[i])
			} else if value.Valid {
				ga.AutoGeocode = value.Bool
			}
		case googleapi.FieldAddLocation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field add_location", values[i])
			} else if value.Valid {
				ga.AddLocation = value.Bool
			}
		case googleapi.FieldTrafficModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field traffic_model", values[i])
			} else if value.Valid {
				ga.TrafficModel = googleapi.TrafficModel(value.String)
			}
		case googleapi.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value.Valid {
				ga.business_unit_id = new(uuid.UUID)
				*ga.business_unit_id = *value.S.(*uuid.UUID)
			}
		case googleapi.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				ga.organization_id = new(uuid.UUID)
				*ga.organization_id = *value.S.(*uuid.UUID)
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoogleApi.
// This includes values selected through modifiers, order, etc.
func (ga *GoogleApi) Value(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the GoogleApi entity.
func (ga *GoogleApi) QueryOrganization() *OrganizationQuery {
	return NewGoogleApiClient(ga.config).QueryOrganization(ga)
}

// QueryBusinessUnit queries the "business_unit" edge of the GoogleApi entity.
func (ga *GoogleApi) QueryBusinessUnit() *BusinessUnitQuery {
	return NewGoogleApiClient(ga.config).QueryBusinessUnit(ga)
}

// Update returns a builder for updating this GoogleApi.
// Note that you need to call GoogleApi.Unwrap() before calling this method if this GoogleApi
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *GoogleApi) Update() *GoogleApiUpdateOne {
	return NewGoogleApiClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the GoogleApi entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *GoogleApi) Unwrap() *GoogleApi {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoogleApi is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *GoogleApi) String() string {
	var builder strings.Builder
	builder.WriteString("GoogleApi(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ga.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ga.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(ga.APIKey)
	builder.WriteString(", ")
	builder.WriteString("mileage_unit=")
	builder.WriteString(fmt.Sprintf("%v", ga.MileageUnit))
	builder.WriteString(", ")
	builder.WriteString("add_customer_location=")
	builder.WriteString(fmt.Sprintf("%v", ga.AddCustomerLocation))
	builder.WriteString(", ")
	builder.WriteString("auto_geocode=")
	builder.WriteString(fmt.Sprintf("%v", ga.AutoGeocode))
	builder.WriteString(", ")
	builder.WriteString("add_location=")
	builder.WriteString(fmt.Sprintf("%v", ga.AddLocation))
	builder.WriteString(", ")
	builder.WriteString("traffic_model=")
	builder.WriteString(fmt.Sprintf("%v", ga.TrafficModel))
	builder.WriteByte(')')
	return builder.String()
}

// GoogleApis is a parsable slice of GoogleApi.
type GoogleApis []*GoogleApi
