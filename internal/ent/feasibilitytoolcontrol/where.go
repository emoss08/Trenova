// Code generated by entc, DO NOT EDIT.

package feasibilitytoolcontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// OtpValue applies equality check predicate on the "otp_value" field. It's identical to OtpValueEQ.
func OtpValue(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldOtpValue, v))
}

// MpwValue applies equality check predicate on the "mpw_value" field. It's identical to MpwValueEQ.
func MpwValue(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldMpwValue, v))
}

// MpdValue applies equality check predicate on the "mpd_value" field. It's identical to MpdValueEQ.
func MpdValue(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldMpdValue, v))
}

// MpgValue applies equality check predicate on the "mpg_value" field. It's identical to MpgValueEQ.
func MpgValue(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldMpgValue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLTE(FieldUpdatedAt, v))
}

// OtpOperatorEQ applies the EQ predicate on the "otp_operator" field.
func OtpOperatorEQ(v OtpOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldOtpOperator, v))
}

// OtpOperatorNEQ applies the NEQ predicate on the "otp_operator" field.
func OtpOperatorNEQ(v OtpOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldOtpOperator, v))
}

// OtpOperatorIn applies the In predicate on the "otp_operator" field.
func OtpOperatorIn(vs ...OtpOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldOtpOperator, vs...))
}

// OtpOperatorNotIn applies the NotIn predicate on the "otp_operator" field.
func OtpOperatorNotIn(vs ...OtpOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldOtpOperator, vs...))
}

// OtpValueEQ applies the EQ predicate on the "otp_value" field.
func OtpValueEQ(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldOtpValue, v))
}

// OtpValueNEQ applies the NEQ predicate on the "otp_value" field.
func OtpValueNEQ(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldOtpValue, v))
}

// OtpValueIn applies the In predicate on the "otp_value" field.
func OtpValueIn(vs ...float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldOtpValue, vs...))
}

// OtpValueNotIn applies the NotIn predicate on the "otp_value" field.
func OtpValueNotIn(vs ...float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldOtpValue, vs...))
}

// OtpValueGT applies the GT predicate on the "otp_value" field.
func OtpValueGT(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGT(FieldOtpValue, v))
}

// OtpValueGTE applies the GTE predicate on the "otp_value" field.
func OtpValueGTE(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGTE(FieldOtpValue, v))
}

// OtpValueLT applies the LT predicate on the "otp_value" field.
func OtpValueLT(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLT(FieldOtpValue, v))
}

// OtpValueLTE applies the LTE predicate on the "otp_value" field.
func OtpValueLTE(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLTE(FieldOtpValue, v))
}

// MpwOperatorEQ applies the EQ predicate on the "mpw_operator" field.
func MpwOperatorEQ(v MpwOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldMpwOperator, v))
}

// MpwOperatorNEQ applies the NEQ predicate on the "mpw_operator" field.
func MpwOperatorNEQ(v MpwOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldMpwOperator, v))
}

// MpwOperatorIn applies the In predicate on the "mpw_operator" field.
func MpwOperatorIn(vs ...MpwOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldMpwOperator, vs...))
}

// MpwOperatorNotIn applies the NotIn predicate on the "mpw_operator" field.
func MpwOperatorNotIn(vs ...MpwOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldMpwOperator, vs...))
}

// MpwValueEQ applies the EQ predicate on the "mpw_value" field.
func MpwValueEQ(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldMpwValue, v))
}

// MpwValueNEQ applies the NEQ predicate on the "mpw_value" field.
func MpwValueNEQ(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldMpwValue, v))
}

// MpwValueIn applies the In predicate on the "mpw_value" field.
func MpwValueIn(vs ...float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldMpwValue, vs...))
}

// MpwValueNotIn applies the NotIn predicate on the "mpw_value" field.
func MpwValueNotIn(vs ...float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldMpwValue, vs...))
}

// MpwValueGT applies the GT predicate on the "mpw_value" field.
func MpwValueGT(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGT(FieldMpwValue, v))
}

// MpwValueGTE applies the GTE predicate on the "mpw_value" field.
func MpwValueGTE(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGTE(FieldMpwValue, v))
}

// MpwValueLT applies the LT predicate on the "mpw_value" field.
func MpwValueLT(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLT(FieldMpwValue, v))
}

// MpwValueLTE applies the LTE predicate on the "mpw_value" field.
func MpwValueLTE(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLTE(FieldMpwValue, v))
}

// MpdOperatorEQ applies the EQ predicate on the "mpd_operator" field.
func MpdOperatorEQ(v MpdOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldMpdOperator, v))
}

// MpdOperatorNEQ applies the NEQ predicate on the "mpd_operator" field.
func MpdOperatorNEQ(v MpdOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldMpdOperator, v))
}

// MpdOperatorIn applies the In predicate on the "mpd_operator" field.
func MpdOperatorIn(vs ...MpdOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldMpdOperator, vs...))
}

// MpdOperatorNotIn applies the NotIn predicate on the "mpd_operator" field.
func MpdOperatorNotIn(vs ...MpdOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldMpdOperator, vs...))
}

// MpdValueEQ applies the EQ predicate on the "mpd_value" field.
func MpdValueEQ(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldMpdValue, v))
}

// MpdValueNEQ applies the NEQ predicate on the "mpd_value" field.
func MpdValueNEQ(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldMpdValue, v))
}

// MpdValueIn applies the In predicate on the "mpd_value" field.
func MpdValueIn(vs ...float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldMpdValue, vs...))
}

// MpdValueNotIn applies the NotIn predicate on the "mpd_value" field.
func MpdValueNotIn(vs ...float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldMpdValue, vs...))
}

// MpdValueGT applies the GT predicate on the "mpd_value" field.
func MpdValueGT(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGT(FieldMpdValue, v))
}

// MpdValueGTE applies the GTE predicate on the "mpd_value" field.
func MpdValueGTE(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGTE(FieldMpdValue, v))
}

// MpdValueLT applies the LT predicate on the "mpd_value" field.
func MpdValueLT(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLT(FieldMpdValue, v))
}

// MpdValueLTE applies the LTE predicate on the "mpd_value" field.
func MpdValueLTE(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLTE(FieldMpdValue, v))
}

// MpgOperatorEQ applies the EQ predicate on the "mpg_operator" field.
func MpgOperatorEQ(v MpgOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldMpgOperator, v))
}

// MpgOperatorNEQ applies the NEQ predicate on the "mpg_operator" field.
func MpgOperatorNEQ(v MpgOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldMpgOperator, v))
}

// MpgOperatorIn applies the In predicate on the "mpg_operator" field.
func MpgOperatorIn(vs ...MpgOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldMpgOperator, vs...))
}

// MpgOperatorNotIn applies the NotIn predicate on the "mpg_operator" field.
func MpgOperatorNotIn(vs ...MpgOperator) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldMpgOperator, vs...))
}

// MpgValueEQ applies the EQ predicate on the "mpg_value" field.
func MpgValueEQ(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldEQ(FieldMpgValue, v))
}

// MpgValueNEQ applies the NEQ predicate on the "mpg_value" field.
func MpgValueNEQ(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNEQ(FieldMpgValue, v))
}

// MpgValueIn applies the In predicate on the "mpg_value" field.
func MpgValueIn(vs ...float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldIn(FieldMpgValue, vs...))
}

// MpgValueNotIn applies the NotIn predicate on the "mpg_value" field.
func MpgValueNotIn(vs ...float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldNotIn(FieldMpgValue, vs...))
}

// MpgValueGT applies the GT predicate on the "mpg_value" field.
func MpgValueGT(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGT(FieldMpgValue, v))
}

// MpgValueGTE applies the GTE predicate on the "mpg_value" field.
func MpgValueGTE(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldGTE(FieldMpgValue, v))
}

// MpgValueLT applies the LT predicate on the "mpg_value" field.
func MpgValueLT(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLT(FieldMpgValue, v))
}

// MpgValueLTE applies the LTE predicate on the "mpg_value" field.
func MpgValueLTE(v float64) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.FieldLTE(FieldMpgValue, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FeasibilityToolControl) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FeasibilityToolControl) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FeasibilityToolControl) predicate.FeasibilityToolControl {
	return predicate.FeasibilityToolControl(sql.NotPredicates(p))
}
