// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customeremailprofile"
	"github.com/emoss08/trenova/internal/ent/emailprofile"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// CustomerEmailProfileCreate is the builder for creating a CustomerEmailProfile entity.
type CustomerEmailProfileCreate struct {
	config
	mutation *CustomerEmailProfileMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (cepc *CustomerEmailProfileCreate) SetBusinessUnitID(u uuid.UUID) *CustomerEmailProfileCreate {
	cepc.mutation.SetBusinessUnitID(u)
	return cepc
}

// SetOrganizationID sets the "organization_id" field.
func (cepc *CustomerEmailProfileCreate) SetOrganizationID(u uuid.UUID) *CustomerEmailProfileCreate {
	cepc.mutation.SetOrganizationID(u)
	return cepc
}

// SetCreatedAt sets the "created_at" field.
func (cepc *CustomerEmailProfileCreate) SetCreatedAt(t time.Time) *CustomerEmailProfileCreate {
	cepc.mutation.SetCreatedAt(t)
	return cepc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cepc *CustomerEmailProfileCreate) SetNillableCreatedAt(t *time.Time) *CustomerEmailProfileCreate {
	if t != nil {
		cepc.SetCreatedAt(*t)
	}
	return cepc
}

// SetUpdatedAt sets the "updated_at" field.
func (cepc *CustomerEmailProfileCreate) SetUpdatedAt(t time.Time) *CustomerEmailProfileCreate {
	cepc.mutation.SetUpdatedAt(t)
	return cepc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cepc *CustomerEmailProfileCreate) SetNillableUpdatedAt(t *time.Time) *CustomerEmailProfileCreate {
	if t != nil {
		cepc.SetUpdatedAt(*t)
	}
	return cepc
}

// SetVersion sets the "version" field.
func (cepc *CustomerEmailProfileCreate) SetVersion(i int) *CustomerEmailProfileCreate {
	cepc.mutation.SetVersion(i)
	return cepc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cepc *CustomerEmailProfileCreate) SetNillableVersion(i *int) *CustomerEmailProfileCreate {
	if i != nil {
		cepc.SetVersion(*i)
	}
	return cepc
}

// SetCustomerID sets the "customer_id" field.
func (cepc *CustomerEmailProfileCreate) SetCustomerID(u uuid.UUID) *CustomerEmailProfileCreate {
	cepc.mutation.SetCustomerID(u)
	return cepc
}

// SetSubject sets the "subject" field.
func (cepc *CustomerEmailProfileCreate) SetSubject(s string) *CustomerEmailProfileCreate {
	cepc.mutation.SetSubject(s)
	return cepc
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (cepc *CustomerEmailProfileCreate) SetNillableSubject(s *string) *CustomerEmailProfileCreate {
	if s != nil {
		cepc.SetSubject(*s)
	}
	return cepc
}

// SetEmailProfileID sets the "email_profile_id" field.
func (cepc *CustomerEmailProfileCreate) SetEmailProfileID(u uuid.UUID) *CustomerEmailProfileCreate {
	cepc.mutation.SetEmailProfileID(u)
	return cepc
}

// SetNillableEmailProfileID sets the "email_profile_id" field if the given value is not nil.
func (cepc *CustomerEmailProfileCreate) SetNillableEmailProfileID(u *uuid.UUID) *CustomerEmailProfileCreate {
	if u != nil {
		cepc.SetEmailProfileID(*u)
	}
	return cepc
}

// SetEmailRecipients sets the "email_recipients" field.
func (cepc *CustomerEmailProfileCreate) SetEmailRecipients(s string) *CustomerEmailProfileCreate {
	cepc.mutation.SetEmailRecipients(s)
	return cepc
}

// SetEmailCcRecipients sets the "email_cc_recipients" field.
func (cepc *CustomerEmailProfileCreate) SetEmailCcRecipients(s string) *CustomerEmailProfileCreate {
	cepc.mutation.SetEmailCcRecipients(s)
	return cepc
}

// SetNillableEmailCcRecipients sets the "email_cc_recipients" field if the given value is not nil.
func (cepc *CustomerEmailProfileCreate) SetNillableEmailCcRecipients(s *string) *CustomerEmailProfileCreate {
	if s != nil {
		cepc.SetEmailCcRecipients(*s)
	}
	return cepc
}

// SetAttachmentName sets the "attachment_name" field.
func (cepc *CustomerEmailProfileCreate) SetAttachmentName(s string) *CustomerEmailProfileCreate {
	cepc.mutation.SetAttachmentName(s)
	return cepc
}

// SetNillableAttachmentName sets the "attachment_name" field if the given value is not nil.
func (cepc *CustomerEmailProfileCreate) SetNillableAttachmentName(s *string) *CustomerEmailProfileCreate {
	if s != nil {
		cepc.SetAttachmentName(*s)
	}
	return cepc
}

// SetEmailFormat sets the "email_format" field.
func (cepc *CustomerEmailProfileCreate) SetEmailFormat(cf customeremailprofile.EmailFormat) *CustomerEmailProfileCreate {
	cepc.mutation.SetEmailFormat(cf)
	return cepc
}

// SetNillableEmailFormat sets the "email_format" field if the given value is not nil.
func (cepc *CustomerEmailProfileCreate) SetNillableEmailFormat(cf *customeremailprofile.EmailFormat) *CustomerEmailProfileCreate {
	if cf != nil {
		cepc.SetEmailFormat(*cf)
	}
	return cepc
}

// SetID sets the "id" field.
func (cepc *CustomerEmailProfileCreate) SetID(u uuid.UUID) *CustomerEmailProfileCreate {
	cepc.mutation.SetID(u)
	return cepc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cepc *CustomerEmailProfileCreate) SetNillableID(u *uuid.UUID) *CustomerEmailProfileCreate {
	if u != nil {
		cepc.SetID(*u)
	}
	return cepc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (cepc *CustomerEmailProfileCreate) SetBusinessUnit(b *BusinessUnit) *CustomerEmailProfileCreate {
	return cepc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cepc *CustomerEmailProfileCreate) SetOrganization(o *Organization) *CustomerEmailProfileCreate {
	return cepc.SetOrganizationID(o.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cepc *CustomerEmailProfileCreate) SetCustomer(c *Customer) *CustomerEmailProfileCreate {
	return cepc.SetCustomerID(c.ID)
}

// SetEmailProfile sets the "email_profile" edge to the EmailProfile entity.
func (cepc *CustomerEmailProfileCreate) SetEmailProfile(e *EmailProfile) *CustomerEmailProfileCreate {
	return cepc.SetEmailProfileID(e.ID)
}

// Mutation returns the CustomerEmailProfileMutation object of the builder.
func (cepc *CustomerEmailProfileCreate) Mutation() *CustomerEmailProfileMutation {
	return cepc.mutation
}

// Save creates the CustomerEmailProfile in the database.
func (cepc *CustomerEmailProfileCreate) Save(ctx context.Context) (*CustomerEmailProfile, error) {
	cepc.defaults()
	return withHooks(ctx, cepc.sqlSave, cepc.mutation, cepc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cepc *CustomerEmailProfileCreate) SaveX(ctx context.Context) *CustomerEmailProfile {
	v, err := cepc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cepc *CustomerEmailProfileCreate) Exec(ctx context.Context) error {
	_, err := cepc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cepc *CustomerEmailProfileCreate) ExecX(ctx context.Context) {
	if err := cepc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cepc *CustomerEmailProfileCreate) defaults() {
	if _, ok := cepc.mutation.CreatedAt(); !ok {
		v := customeremailprofile.DefaultCreatedAt()
		cepc.mutation.SetCreatedAt(v)
	}
	if _, ok := cepc.mutation.UpdatedAt(); !ok {
		v := customeremailprofile.DefaultUpdatedAt()
		cepc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cepc.mutation.Version(); !ok {
		v := customeremailprofile.DefaultVersion
		cepc.mutation.SetVersion(v)
	}
	if _, ok := cepc.mutation.EmailFormat(); !ok {
		v := customeremailprofile.DefaultEmailFormat
		cepc.mutation.SetEmailFormat(v)
	}
	if _, ok := cepc.mutation.ID(); !ok {
		v := customeremailprofile.DefaultID()
		cepc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cepc *CustomerEmailProfileCreate) check() error {
	if _, ok := cepc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "CustomerEmailProfile.business_unit_id"`)}
	}
	if _, ok := cepc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "CustomerEmailProfile.organization_id"`)}
	}
	if _, ok := cepc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CustomerEmailProfile.created_at"`)}
	}
	if _, ok := cepc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CustomerEmailProfile.updated_at"`)}
	}
	if _, ok := cepc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CustomerEmailProfile.version"`)}
	}
	if _, ok := cepc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CustomerEmailProfile.customer_id"`)}
	}
	if v, ok := cepc.mutation.Subject(); ok {
		if err := customeremailprofile.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "CustomerEmailProfile.subject": %w`, err)}
		}
	}
	if _, ok := cepc.mutation.EmailRecipients(); !ok {
		return &ValidationError{Name: "email_recipients", err: errors.New(`ent: missing required field "CustomerEmailProfile.email_recipients"`)}
	}
	if v, ok := cepc.mutation.EmailRecipients(); ok {
		if err := customeremailprofile.EmailRecipientsValidator(v); err != nil {
			return &ValidationError{Name: "email_recipients", err: fmt.Errorf(`ent: validator failed for field "CustomerEmailProfile.email_recipients": %w`, err)}
		}
	}
	if _, ok := cepc.mutation.EmailFormat(); !ok {
		return &ValidationError{Name: "email_format", err: errors.New(`ent: missing required field "CustomerEmailProfile.email_format"`)}
	}
	if v, ok := cepc.mutation.EmailFormat(); ok {
		if err := customeremailprofile.EmailFormatValidator(v); err != nil {
			return &ValidationError{Name: "email_format", err: fmt.Errorf(`ent: validator failed for field "CustomerEmailProfile.email_format": %w`, err)}
		}
	}
	if _, ok := cepc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "CustomerEmailProfile.business_unit"`)}
	}
	if _, ok := cepc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "CustomerEmailProfile.organization"`)}
	}
	if _, ok := cepc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "CustomerEmailProfile.customer"`)}
	}
	return nil
}

func (cepc *CustomerEmailProfileCreate) sqlSave(ctx context.Context) (*CustomerEmailProfile, error) {
	if err := cepc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cepc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cepc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cepc.mutation.id = &_node.ID
	cepc.mutation.done = true
	return _node, nil
}

func (cepc *CustomerEmailProfileCreate) createSpec() (*CustomerEmailProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerEmailProfile{config: cepc.config}
		_spec = sqlgraph.NewCreateSpec(customeremailprofile.Table, sqlgraph.NewFieldSpec(customeremailprofile.FieldID, field.TypeUUID))
	)
	if id, ok := cepc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cepc.mutation.CreatedAt(); ok {
		_spec.SetField(customeremailprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cepc.mutation.UpdatedAt(); ok {
		_spec.SetField(customeremailprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cepc.mutation.Version(); ok {
		_spec.SetField(customeremailprofile.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := cepc.mutation.Subject(); ok {
		_spec.SetField(customeremailprofile.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := cepc.mutation.EmailRecipients(); ok {
		_spec.SetField(customeremailprofile.FieldEmailRecipients, field.TypeString, value)
		_node.EmailRecipients = value
	}
	if value, ok := cepc.mutation.EmailCcRecipients(); ok {
		_spec.SetField(customeremailprofile.FieldEmailCcRecipients, field.TypeString, value)
		_node.EmailCcRecipients = value
	}
	if value, ok := cepc.mutation.AttachmentName(); ok {
		_spec.SetField(customeremailprofile.FieldAttachmentName, field.TypeString, value)
		_node.AttachmentName = value
	}
	if value, ok := cepc.mutation.EmailFormat(); ok {
		_spec.SetField(customeremailprofile.FieldEmailFormat, field.TypeEnum, value)
		_node.EmailFormat = value
	}
	if nodes := cepc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customeremailprofile.BusinessUnitTable,
			Columns: []string{customeremailprofile.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cepc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customeremailprofile.OrganizationTable,
			Columns: []string{customeremailprofile.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cepc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customeremailprofile.CustomerTable,
			Columns: []string{customeremailprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cepc.mutation.EmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customeremailprofile.EmailProfileTable,
			Columns: []string{customeremailprofile.EmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmailProfileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomerEmailProfileCreateBulk is the builder for creating many CustomerEmailProfile entities in bulk.
type CustomerEmailProfileCreateBulk struct {
	config
	err      error
	builders []*CustomerEmailProfileCreate
}

// Save creates the CustomerEmailProfile entities in the database.
func (cepcb *CustomerEmailProfileCreateBulk) Save(ctx context.Context) ([]*CustomerEmailProfile, error) {
	if cepcb.err != nil {
		return nil, cepcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cepcb.builders))
	nodes := make([]*CustomerEmailProfile, len(cepcb.builders))
	mutators := make([]Mutator, len(cepcb.builders))
	for i := range cepcb.builders {
		func(i int, root context.Context) {
			builder := cepcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerEmailProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cepcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cepcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cepcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cepcb *CustomerEmailProfileCreateBulk) SaveX(ctx context.Context) []*CustomerEmailProfile {
	v, err := cepcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cepcb *CustomerEmailProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := cepcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cepcb *CustomerEmailProfileCreateBulk) ExecX(ctx context.Context) {
	if err := cepcb.Exec(ctx); err != nil {
		panic(err)
	}
}
