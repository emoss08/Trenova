// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/emailprofile"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// EmailProfile is the model entity for the EmailProfile schema.
type EmailProfile struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Protocol holds the value of the "protocol" field.
	Protocol emailprofile.Protocol `json:"protocol"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Port holds the value of the "port" field.
	Port int16 `json:"port,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-" validate:"-"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"isDefault"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailProfileQuery when eager-loading is set.
	Edges        EmailProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmailProfileEdges holds the relations/edges for other nodes in the graph.
type EmailProfileEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailProfileEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailProfileEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailprofile.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case emailprofile.FieldVersion, emailprofile.FieldPort:
			values[i] = new(sql.NullInt64)
		case emailprofile.FieldName, emailprofile.FieldEmail, emailprofile.FieldProtocol, emailprofile.FieldHost, emailprofile.FieldUsername, emailprofile.FieldPassword:
			values[i] = new(sql.NullString)
		case emailprofile.FieldCreatedAt, emailprofile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case emailprofile.FieldID, emailprofile.FieldBusinessUnitID, emailprofile.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailProfile fields.
func (ep *EmailProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailprofile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ep.ID = *value
			}
		case emailprofile.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				ep.BusinessUnitID = *value
			}
		case emailprofile.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				ep.OrganizationID = *value
			}
		case emailprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ep.CreatedAt = value.Time
			}
		case emailprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ep.UpdatedAt = value.Time
			}
		case emailprofile.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ep.Version = int(value.Int64)
			}
		case emailprofile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ep.Name = value.String
			}
		case emailprofile.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ep.Email = value.String
			}
		case emailprofile.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				ep.Protocol = emailprofile.Protocol(value.String)
			}
		case emailprofile.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				ep.Host = value.String
			}
		case emailprofile.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				ep.Port = int16(value.Int64)
			}
		case emailprofile.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ep.Username = value.String
			}
		case emailprofile.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				ep.Password = value.String
			}
		case emailprofile.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				ep.IsDefault = value.Bool
			}
		default:
			ep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailProfile.
// This includes values selected through modifiers, order, etc.
func (ep *EmailProfile) Value(name string) (ent.Value, error) {
	return ep.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the EmailProfile entity.
func (ep *EmailProfile) QueryBusinessUnit() *BusinessUnitQuery {
	return NewEmailProfileClient(ep.config).QueryBusinessUnit(ep)
}

// QueryOrganization queries the "organization" edge of the EmailProfile entity.
func (ep *EmailProfile) QueryOrganization() *OrganizationQuery {
	return NewEmailProfileClient(ep.config).QueryOrganization(ep)
}

// Update returns a builder for updating this EmailProfile.
// Note that you need to call EmailProfile.Unwrap() before calling this method if this EmailProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *EmailProfile) Update() *EmailProfileUpdateOne {
	return NewEmailProfileClient(ep.config).UpdateOne(ep)
}

// Unwrap unwraps the EmailProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ep *EmailProfile) Unwrap() *EmailProfile {
	_tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailProfile is not a transactional entity")
	}
	ep.config.driver = _tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *EmailProfile) String() string {
	var builder strings.Builder
	builder.WriteString("EmailProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ep.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", ep.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", ep.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ep.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ep.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", ep.Version))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ep.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ep.Email)
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(fmt.Sprintf("%v", ep.Protocol))
	builder.WriteString(", ")
	builder.WriteString("host=")
	builder.WriteString(ep.Host)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", ep.Port))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(ep.Username)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", ep.IsDefault))
	builder.WriteByte(')')
	return builder.String()
}

// EmailProfiles is a parsable slice of EmailProfile.
type EmailProfiles []*EmailProfile
