// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/equipmentmanufactuer"
	"github.com/emoss08/trenova/internal/ent/equipmenttype"
	"github.com/emoss08/trenova/internal/ent/fleetcode"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/tractor"
	"github.com/emoss08/trenova/internal/ent/usstate"
	"github.com/emoss08/trenova/internal/ent/worker"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// Tractor is the model entity for the Tractor schema.
type Tractor struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// The current version of this entity.
	Version int `json:"version" validate:"omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code" validate:"required,max=50"`
	// Status holds the value of the "status" field.
	Status tractor.Status `json:"status" validate:"required,oneof=Available OutOfService AtMaintenance Sold Lost"`
	// EquipmentTypeID holds the value of the "equipment_type_id" field.
	EquipmentTypeID uuid.UUID `json:"equipmentTypeId" validate:"required,uuid"`
	// LicensePlateNumber holds the value of the "license_plate_number" field.
	LicensePlateNumber string `json:"licensePlateNumber" validate:"omitempty,max=50"`
	// Vin holds the value of the "vin" field.
	Vin string `json:"vin" validate:"omitempty,alphanum,len=17"`
	// EquipmentManufacturerID holds the value of the "equipment_manufacturer_id" field.
	EquipmentManufacturerID *uuid.UUID `json:"equipmentManufacturerId" validate:"omitempty,uuid"`
	// Model holds the value of the "model" field.
	Model string `json:"model" validate:"omitempty,max=50"`
	// Year holds the value of the "year" field.
	Year *int16 `json:"year" validate:"omitempty,gt=0"`
	// StateID holds the value of the "state_id" field.
	StateID *uuid.UUID `json:"stateId" validate:"omitempty,uuid"`
	// Leased holds the value of the "leased" field.
	Leased bool `json:"leased" validate:"omitempty"`
	// LeasedDate holds the value of the "leased_date" field.
	LeasedDate *pgtype.Date `json:"leasedDate" validate:"omitempty"`
	// PrimaryWorkerID holds the value of the "primary_worker_id" field.
	PrimaryWorkerID uuid.UUID `json:"primaryWorkerId" validate:"omitempty,uuid"`
	// SecondaryWorkerID holds the value of the "secondary_worker_id" field.
	SecondaryWorkerID *uuid.UUID `json:"secondaryWorkerId" validate:"omitempty,uuid"`
	// FleetCodeID holds the value of the "fleet_code_id" field.
	FleetCodeID uuid.UUID `json:"fleetCodeId" validate:"omitempty,uuid"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TractorQuery when eager-loading is set.
	Edges        TractorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TractorEdges holds the relations/edges for other nodes in the graph.
type TractorEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// EquipmentType holds the value of the equipment_type edge.
	EquipmentType *EquipmentType `json:"equipmentType"`
	// EquipmentManufacturer holds the value of the equipment_manufacturer edge.
	EquipmentManufacturer *EquipmentManufactuer `json:"equipmentManufacturer"`
	// State holds the value of the state edge.
	State *UsState `json:"state"`
	// PrimaryWorker holds the value of the primary_worker edge.
	PrimaryWorker *Worker `json:"primaryWorker"`
	// SecondaryWorker holds the value of the secondary_worker edge.
	SecondaryWorker *Worker `json:"secondaryWorker"`
	// FleetCode holds the value of the fleet_code edge.
	FleetCode *FleetCode `json:"fleetCode"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TractorEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TractorEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// EquipmentTypeOrErr returns the EquipmentType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TractorEdges) EquipmentTypeOrErr() (*EquipmentType, error) {
	if e.EquipmentType != nil {
		return e.EquipmentType, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: equipmenttype.Label}
	}
	return nil, &NotLoadedError{edge: "equipment_type"}
}

// EquipmentManufacturerOrErr returns the EquipmentManufacturer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TractorEdges) EquipmentManufacturerOrErr() (*EquipmentManufactuer, error) {
	if e.EquipmentManufacturer != nil {
		return e.EquipmentManufacturer, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: equipmentmanufactuer.Label}
	}
	return nil, &NotLoadedError{edge: "equipment_manufacturer"}
}

// StateOrErr returns the State value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TractorEdges) StateOrErr() (*UsState, error) {
	if e.State != nil {
		return e.State, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: usstate.Label}
	}
	return nil, &NotLoadedError{edge: "state"}
}

// PrimaryWorkerOrErr returns the PrimaryWorker value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TractorEdges) PrimaryWorkerOrErr() (*Worker, error) {
	if e.PrimaryWorker != nil {
		return e.PrimaryWorker, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: worker.Label}
	}
	return nil, &NotLoadedError{edge: "primary_worker"}
}

// SecondaryWorkerOrErr returns the SecondaryWorker value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TractorEdges) SecondaryWorkerOrErr() (*Worker, error) {
	if e.SecondaryWorker != nil {
		return e.SecondaryWorker, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: worker.Label}
	}
	return nil, &NotLoadedError{edge: "secondary_worker"}
}

// FleetCodeOrErr returns the FleetCode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TractorEdges) FleetCodeOrErr() (*FleetCode, error) {
	if e.FleetCode != nil {
		return e.FleetCode, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: fleetcode.Label}
	}
	return nil, &NotLoadedError{edge: "fleet_code"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tractor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tractor.FieldLeasedDate:
			values[i] = &sql.NullScanner{S: new(pgtype.Date)}
		case tractor.FieldEquipmentManufacturerID, tractor.FieldStateID, tractor.FieldSecondaryWorkerID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case tractor.FieldLeased:
			values[i] = new(sql.NullBool)
		case tractor.FieldVersion, tractor.FieldYear:
			values[i] = new(sql.NullInt64)
		case tractor.FieldCode, tractor.FieldStatus, tractor.FieldLicensePlateNumber, tractor.FieldVin, tractor.FieldModel:
			values[i] = new(sql.NullString)
		case tractor.FieldCreatedAt, tractor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case tractor.FieldID, tractor.FieldBusinessUnitID, tractor.FieldOrganizationID, tractor.FieldEquipmentTypeID, tractor.FieldPrimaryWorkerID, tractor.FieldFleetCodeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tractor fields.
func (t *Tractor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tractor.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tractor.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				t.BusinessUnitID = *value
			}
		case tractor.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				t.OrganizationID = *value
			}
		case tractor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tractor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tractor.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				t.Version = int(value.Int64)
			}
		case tractor.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				t.Code = value.String
			}
		case tractor.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = tractor.Status(value.String)
			}
		case tractor.FieldEquipmentTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field equipment_type_id", values[i])
			} else if value != nil {
				t.EquipmentTypeID = *value
			}
		case tractor.FieldLicensePlateNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_plate_number", values[i])
			} else if value.Valid {
				t.LicensePlateNumber = value.String
			}
		case tractor.FieldVin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vin", values[i])
			} else if value.Valid {
				t.Vin = value.String
			}
		case tractor.FieldEquipmentManufacturerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field equipment_manufacturer_id", values[i])
			} else if value.Valid {
				t.EquipmentManufacturerID = new(uuid.UUID)
				*t.EquipmentManufacturerID = *value.S.(*uuid.UUID)
			}
		case tractor.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				t.Model = value.String
			}
		case tractor.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				t.Year = new(int16)
				*t.Year = int16(value.Int64)
			}
		case tractor.FieldStateID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field state_id", values[i])
			} else if value.Valid {
				t.StateID = new(uuid.UUID)
				*t.StateID = *value.S.(*uuid.UUID)
			}
		case tractor.FieldLeased:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field leased", values[i])
			} else if value.Valid {
				t.Leased = value.Bool
			}
		case tractor.FieldLeasedDate:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field leased_date", values[i])
			} else if value.Valid {
				t.LeasedDate = value.S.(*pgtype.Date)
			}
		case tractor.FieldPrimaryWorkerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field primary_worker_id", values[i])
			} else if value != nil {
				t.PrimaryWorkerID = *value
			}
		case tractor.FieldSecondaryWorkerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field secondary_worker_id", values[i])
			} else if value.Valid {
				t.SecondaryWorkerID = new(uuid.UUID)
				*t.SecondaryWorkerID = *value.S.(*uuid.UUID)
			}
		case tractor.FieldFleetCodeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fleet_code_id", values[i])
			} else if value != nil {
				t.FleetCodeID = *value
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tractor.
// This includes values selected through modifiers, order, etc.
func (t *Tractor) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the Tractor entity.
func (t *Tractor) QueryBusinessUnit() *BusinessUnitQuery {
	return NewTractorClient(t.config).QueryBusinessUnit(t)
}

// QueryOrganization queries the "organization" edge of the Tractor entity.
func (t *Tractor) QueryOrganization() *OrganizationQuery {
	return NewTractorClient(t.config).QueryOrganization(t)
}

// QueryEquipmentType queries the "equipment_type" edge of the Tractor entity.
func (t *Tractor) QueryEquipmentType() *EquipmentTypeQuery {
	return NewTractorClient(t.config).QueryEquipmentType(t)
}

// QueryEquipmentManufacturer queries the "equipment_manufacturer" edge of the Tractor entity.
func (t *Tractor) QueryEquipmentManufacturer() *EquipmentManufactuerQuery {
	return NewTractorClient(t.config).QueryEquipmentManufacturer(t)
}

// QueryState queries the "state" edge of the Tractor entity.
func (t *Tractor) QueryState() *UsStateQuery {
	return NewTractorClient(t.config).QueryState(t)
}

// QueryPrimaryWorker queries the "primary_worker" edge of the Tractor entity.
func (t *Tractor) QueryPrimaryWorker() *WorkerQuery {
	return NewTractorClient(t.config).QueryPrimaryWorker(t)
}

// QuerySecondaryWorker queries the "secondary_worker" edge of the Tractor entity.
func (t *Tractor) QuerySecondaryWorker() *WorkerQuery {
	return NewTractorClient(t.config).QuerySecondaryWorker(t)
}

// QueryFleetCode queries the "fleet_code" edge of the Tractor entity.
func (t *Tractor) QueryFleetCode() *FleetCodeQuery {
	return NewTractorClient(t.config).QueryFleetCode(t)
}

// Update returns a builder for updating this Tractor.
// Note that you need to call Tractor.Unwrap() before calling this method if this Tractor
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tractor) Update() *TractorUpdateOne {
	return NewTractorClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tractor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tractor) Unwrap() *Tractor {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tractor is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tractor) String() string {
	var builder strings.Builder
	builder.WriteString("Tractor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", t.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", t.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", t.Version))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(t.Code)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("equipment_type_id=")
	builder.WriteString(fmt.Sprintf("%v", t.EquipmentTypeID))
	builder.WriteString(", ")
	builder.WriteString("license_plate_number=")
	builder.WriteString(t.LicensePlateNumber)
	builder.WriteString(", ")
	builder.WriteString("vin=")
	builder.WriteString(t.Vin)
	builder.WriteString(", ")
	if v := t.EquipmentManufacturerID; v != nil {
		builder.WriteString("equipment_manufacturer_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(t.Model)
	builder.WriteString(", ")
	if v := t.Year; v != nil {
		builder.WriteString("year=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.StateID; v != nil {
		builder.WriteString("state_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("leased=")
	builder.WriteString(fmt.Sprintf("%v", t.Leased))
	builder.WriteString(", ")
	if v := t.LeasedDate; v != nil {
		builder.WriteString("leased_date=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("primary_worker_id=")
	builder.WriteString(fmt.Sprintf("%v", t.PrimaryWorkerID))
	builder.WriteString(", ")
	if v := t.SecondaryWorkerID; v != nil {
		builder.WriteString("secondary_worker_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("fleet_code_id=")
	builder.WriteString(fmt.Sprintf("%v", t.FleetCodeID))
	builder.WriteByte(')')
	return builder.String()
}

// Tractors is a parsable slice of Tractor.
type Tractors []*Tractor
