// Code generated by entc, DO NOT EDIT.

package hazardousmaterialsegregation

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the hazardousmaterialsegregation type in the database.
	Label = "hazardous_material_segregation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldClassA holds the string denoting the class_a field in the database.
	FieldClassA = "class_a"
	// FieldClassB holds the string denoting the class_b field in the database.
	FieldClassB = "class_b"
	// FieldSegregationType holds the string denoting the segregation_type field in the database.
	FieldSegregationType = "segregation_type"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// Table holds the table name of the hazardousmaterialsegregation in the database.
	Table = "hazardous_material_segregations"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "hazardous_material_segregations"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "hazardous_material_segregations"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
)

// Columns holds all SQL columns for hazardousmaterialsegregation fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVersion,
	FieldClassA,
	FieldClassB,
	FieldSegregationType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// ClassA defines the type for the "class_a" enum field.
type ClassA string

// ClassAHazardClass1And1 is the default value of the ClassA enum.
const DefaultClassA = ClassAHazardClass1And1

// ClassA values.
const (
	ClassAHazardClass1And1 ClassA = "HazardClass1And1"
	ClassAHazardClass1And2 ClassA = "HazardClass1And2"
	ClassAHazardClass1And3 ClassA = "HazardClass1And3"
	ClassAHazardClass1And4 ClassA = "HazardClass1And4"
	ClassAHazardClass1And5 ClassA = "HazardClass1And5"
	ClassAHazardClass1And6 ClassA = "HazardClass1And6"
	ClassAHazardClass2And1 ClassA = "HazardClass2And1"
	ClassAHazardClass2And2 ClassA = "HazardClass2And2"
	ClassAHazardClass2And3 ClassA = "HazardClass2And3"
	ClassAHazardClass3     ClassA = "HazardClass3"
	ClassAHazardClass4And1 ClassA = "HazardClass4And1"
	ClassAHazardClass4And2 ClassA = "HazardClass4And2"
	ClassAHazardClass4And3 ClassA = "HazardClass4And3"
	ClassAHazardClass5And1 ClassA = "HazardClass5And1"
	ClassAHazardClass5And2 ClassA = "HazardClass5And2"
	ClassAHazardClass6And1 ClassA = "HazardClass6And1"
	ClassAHazardClass6And2 ClassA = "HazardClass6And2"
	ClassAHazardClass7     ClassA = "HazardClass7"
	ClassAHazardClass8     ClassA = "HazardClass8"
	ClassAHazardClass9     ClassA = "HazardClass9"
)

func (class_a ClassA) String() string {
	return string(class_a)
}

// ClassAValidator is a validator for the "class_a" field enum values. It is called by the builders before save.
func ClassAValidator(class_a ClassA) error {
	switch class_a {
	case ClassAHazardClass1And1, ClassAHazardClass1And2, ClassAHazardClass1And3, ClassAHazardClass1And4, ClassAHazardClass1And5, ClassAHazardClass1And6, ClassAHazardClass2And1, ClassAHazardClass2And2, ClassAHazardClass2And3, ClassAHazardClass3, ClassAHazardClass4And1, ClassAHazardClass4And2, ClassAHazardClass4And3, ClassAHazardClass5And1, ClassAHazardClass5And2, ClassAHazardClass6And1, ClassAHazardClass6And2, ClassAHazardClass7, ClassAHazardClass8, ClassAHazardClass9:
		return nil
	default:
		return fmt.Errorf("hazardousmaterialsegregation: invalid enum value for class_a field: %q", class_a)
	}
}

// ClassB defines the type for the "class_b" enum field.
type ClassB string

// ClassBHazardClass1And1 is the default value of the ClassB enum.
const DefaultClassB = ClassBHazardClass1And1

// ClassB values.
const (
	ClassBHazardClass1And1 ClassB = "HazardClass1And1"
	ClassBHazardClass1And2 ClassB = "HazardClass1And2"
	ClassBHazardClass1And3 ClassB = "HazardClass1And3"
	ClassBHazardClass1And4 ClassB = "HazardClass1And4"
	ClassBHazardClass1And5 ClassB = "HazardClass1And5"
	ClassBHazardClass1And6 ClassB = "HazardClass1And6"
	ClassBHazardClass2And1 ClassB = "HazardClass2And1"
	ClassBHazardClass2And2 ClassB = "HazardClass2And2"
	ClassBHazardClass2And3 ClassB = "HazardClass2And3"
	ClassBHazardClass3     ClassB = "HazardClass3"
	ClassBHazardClass4And1 ClassB = "HazardClass4And1"
	ClassBHazardClass4And2 ClassB = "HazardClass4And2"
	ClassBHazardClass4And3 ClassB = "HazardClass4And3"
	ClassBHazardClass5And1 ClassB = "HazardClass5And1"
	ClassBHazardClass5And2 ClassB = "HazardClass5And2"
	ClassBHazardClass6And1 ClassB = "HazardClass6And1"
	ClassBHazardClass6And2 ClassB = "HazardClass6And2"
	ClassBHazardClass7     ClassB = "HazardClass7"
	ClassBHazardClass8     ClassB = "HazardClass8"
	ClassBHazardClass9     ClassB = "HazardClass9"
)

func (class_b ClassB) String() string {
	return string(class_b)
}

// ClassBValidator is a validator for the "class_b" field enum values. It is called by the builders before save.
func ClassBValidator(class_b ClassB) error {
	switch class_b {
	case ClassBHazardClass1And1, ClassBHazardClass1And2, ClassBHazardClass1And3, ClassBHazardClass1And4, ClassBHazardClass1And5, ClassBHazardClass1And6, ClassBHazardClass2And1, ClassBHazardClass2And2, ClassBHazardClass2And3, ClassBHazardClass3, ClassBHazardClass4And1, ClassBHazardClass4And2, ClassBHazardClass4And3, ClassBHazardClass5And1, ClassBHazardClass5And2, ClassBHazardClass6And1, ClassBHazardClass6And2, ClassBHazardClass7, ClassBHazardClass8, ClassBHazardClass9:
		return nil
	default:
		return fmt.Errorf("hazardousmaterialsegregation: invalid enum value for class_b field: %q", class_b)
	}
}

// SegregationType defines the type for the "segregation_type" enum field.
type SegregationType string

// SegregationTypeNotAllowed is the default value of the SegregationType enum.
const DefaultSegregationType = SegregationTypeNotAllowed

// SegregationType values.
const (
	SegregationTypeNotAllowed            SegregationType = "NotAllowed"
	SegregationTypeAllowedWithConditions SegregationType = "AllowedWithConditions"
)

func (st SegregationType) String() string {
	return string(st)
}

// SegregationTypeValidator is a validator for the "segregation_type" field enum values. It is called by the builders before save.
func SegregationTypeValidator(st SegregationType) error {
	switch st {
	case SegregationTypeNotAllowed, SegregationTypeAllowedWithConditions:
		return nil
	default:
		return fmt.Errorf("hazardousmaterialsegregation: invalid enum value for segregation_type field: %q", st)
	}
}

// OrderOption defines the ordering options for the HazardousMaterialSegregation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByClassA orders the results by the class_a field.
func ByClassA(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassA, opts...).ToFunc()
}

// ByClassB orders the results by the class_b field.
func ByClassB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassB, opts...).ToFunc()
}

// BySegregationType orders the results by the segregation_type field.
func BySegregationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSegregationType, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
