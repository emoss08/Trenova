// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/divisioncode"
	"github.com/emoss08/trenova/internal/ent/generalledgeraccount"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// DivisionCodeUpdate is the builder for updating DivisionCode entities.
type DivisionCodeUpdate struct {
	config
	hooks     []Hook
	mutation  *DivisionCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DivisionCodeUpdate builder.
func (dcu *DivisionCodeUpdate) Where(ps ...predicate.DivisionCode) *DivisionCodeUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetUpdatedAt sets the "updated_at" field.
func (dcu *DivisionCodeUpdate) SetUpdatedAt(t time.Time) *DivisionCodeUpdate {
	dcu.mutation.SetUpdatedAt(t)
	return dcu
}

// SetVersion sets the "version" field.
func (dcu *DivisionCodeUpdate) SetVersion(i int) *DivisionCodeUpdate {
	dcu.mutation.ResetVersion()
	dcu.mutation.SetVersion(i)
	return dcu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dcu *DivisionCodeUpdate) SetNillableVersion(i *int) *DivisionCodeUpdate {
	if i != nil {
		dcu.SetVersion(*i)
	}
	return dcu
}

// AddVersion adds i to the "version" field.
func (dcu *DivisionCodeUpdate) AddVersion(i int) *DivisionCodeUpdate {
	dcu.mutation.AddVersion(i)
	return dcu
}

// SetStatus sets the "status" field.
func (dcu *DivisionCodeUpdate) SetStatus(d divisioncode.Status) *DivisionCodeUpdate {
	dcu.mutation.SetStatus(d)
	return dcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dcu *DivisionCodeUpdate) SetNillableStatus(d *divisioncode.Status) *DivisionCodeUpdate {
	if d != nil {
		dcu.SetStatus(*d)
	}
	return dcu
}

// SetCode sets the "code" field.
func (dcu *DivisionCodeUpdate) SetCode(s string) *DivisionCodeUpdate {
	dcu.mutation.SetCode(s)
	return dcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dcu *DivisionCodeUpdate) SetNillableCode(s *string) *DivisionCodeUpdate {
	if s != nil {
		dcu.SetCode(*s)
	}
	return dcu
}

// SetDescription sets the "description" field.
func (dcu *DivisionCodeUpdate) SetDescription(s string) *DivisionCodeUpdate {
	dcu.mutation.SetDescription(s)
	return dcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dcu *DivisionCodeUpdate) SetNillableDescription(s *string) *DivisionCodeUpdate {
	if s != nil {
		dcu.SetDescription(*s)
	}
	return dcu
}

// SetCashAccountID sets the "cash_account_id" field.
func (dcu *DivisionCodeUpdate) SetCashAccountID(u uuid.UUID) *DivisionCodeUpdate {
	dcu.mutation.SetCashAccountID(u)
	return dcu
}

// SetNillableCashAccountID sets the "cash_account_id" field if the given value is not nil.
func (dcu *DivisionCodeUpdate) SetNillableCashAccountID(u *uuid.UUID) *DivisionCodeUpdate {
	if u != nil {
		dcu.SetCashAccountID(*u)
	}
	return dcu
}

// ClearCashAccountID clears the value of the "cash_account_id" field.
func (dcu *DivisionCodeUpdate) ClearCashAccountID() *DivisionCodeUpdate {
	dcu.mutation.ClearCashAccountID()
	return dcu
}

// SetApAccountID sets the "ap_account_id" field.
func (dcu *DivisionCodeUpdate) SetApAccountID(u uuid.UUID) *DivisionCodeUpdate {
	dcu.mutation.SetApAccountID(u)
	return dcu
}

// SetNillableApAccountID sets the "ap_account_id" field if the given value is not nil.
func (dcu *DivisionCodeUpdate) SetNillableApAccountID(u *uuid.UUID) *DivisionCodeUpdate {
	if u != nil {
		dcu.SetApAccountID(*u)
	}
	return dcu
}

// ClearApAccountID clears the value of the "ap_account_id" field.
func (dcu *DivisionCodeUpdate) ClearApAccountID() *DivisionCodeUpdate {
	dcu.mutation.ClearApAccountID()
	return dcu
}

// SetExpenseAccountID sets the "expense_account_id" field.
func (dcu *DivisionCodeUpdate) SetExpenseAccountID(u uuid.UUID) *DivisionCodeUpdate {
	dcu.mutation.SetExpenseAccountID(u)
	return dcu
}

// SetNillableExpenseAccountID sets the "expense_account_id" field if the given value is not nil.
func (dcu *DivisionCodeUpdate) SetNillableExpenseAccountID(u *uuid.UUID) *DivisionCodeUpdate {
	if u != nil {
		dcu.SetExpenseAccountID(*u)
	}
	return dcu
}

// ClearExpenseAccountID clears the value of the "expense_account_id" field.
func (dcu *DivisionCodeUpdate) ClearExpenseAccountID() *DivisionCodeUpdate {
	dcu.mutation.ClearExpenseAccountID()
	return dcu
}

// SetCashAccount sets the "cash_account" edge to the GeneralLedgerAccount entity.
func (dcu *DivisionCodeUpdate) SetCashAccount(g *GeneralLedgerAccount) *DivisionCodeUpdate {
	return dcu.SetCashAccountID(g.ID)
}

// SetApAccount sets the "ap_account" edge to the GeneralLedgerAccount entity.
func (dcu *DivisionCodeUpdate) SetApAccount(g *GeneralLedgerAccount) *DivisionCodeUpdate {
	return dcu.SetApAccountID(g.ID)
}

// SetExpenseAccount sets the "expense_account" edge to the GeneralLedgerAccount entity.
func (dcu *DivisionCodeUpdate) SetExpenseAccount(g *GeneralLedgerAccount) *DivisionCodeUpdate {
	return dcu.SetExpenseAccountID(g.ID)
}

// Mutation returns the DivisionCodeMutation object of the builder.
func (dcu *DivisionCodeUpdate) Mutation() *DivisionCodeMutation {
	return dcu.mutation
}

// ClearCashAccount clears the "cash_account" edge to the GeneralLedgerAccount entity.
func (dcu *DivisionCodeUpdate) ClearCashAccount() *DivisionCodeUpdate {
	dcu.mutation.ClearCashAccount()
	return dcu
}

// ClearApAccount clears the "ap_account" edge to the GeneralLedgerAccount entity.
func (dcu *DivisionCodeUpdate) ClearApAccount() *DivisionCodeUpdate {
	dcu.mutation.ClearApAccount()
	return dcu
}

// ClearExpenseAccount clears the "expense_account" edge to the GeneralLedgerAccount entity.
func (dcu *DivisionCodeUpdate) ClearExpenseAccount() *DivisionCodeUpdate {
	dcu.mutation.ClearExpenseAccount()
	return dcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DivisionCodeUpdate) Save(ctx context.Context) (int, error) {
	dcu.defaults()
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DivisionCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DivisionCodeUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DivisionCodeUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DivisionCodeUpdate) defaults() {
	if _, ok := dcu.mutation.UpdatedAt(); !ok {
		v := divisioncode.UpdateDefaultUpdatedAt()
		dcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DivisionCodeUpdate) check() error {
	if v, ok := dcu.mutation.Status(); ok {
		if err := divisioncode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DivisionCode.status": %w`, err)}
		}
	}
	if v, ok := dcu.mutation.Code(); ok {
		if err := divisioncode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DivisionCode.code": %w`, err)}
		}
	}
	if v, ok := dcu.mutation.Description(); ok {
		if err := divisioncode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "DivisionCode.description": %w`, err)}
		}
	}
	if _, ok := dcu.mutation.BusinessUnitID(); dcu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DivisionCode.business_unit"`)
	}
	if _, ok := dcu.mutation.OrganizationID(); dcu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DivisionCode.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcu *DivisionCodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DivisionCodeUpdate {
	dcu.modifiers = append(dcu.modifiers, modifiers...)
	return dcu
}

func (dcu *DivisionCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(divisioncode.Table, divisioncode.Columns, sqlgraph.NewFieldSpec(divisioncode.FieldID, field.TypeUUID))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.UpdatedAt(); ok {
		_spec.SetField(divisioncode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dcu.mutation.Version(); ok {
		_spec.SetField(divisioncode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcu.mutation.AddedVersion(); ok {
		_spec.AddField(divisioncode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcu.mutation.Status(); ok {
		_spec.SetField(divisioncode.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dcu.mutation.Code(); ok {
		_spec.SetField(divisioncode.FieldCode, field.TypeString, value)
	}
	if value, ok := dcu.mutation.Description(); ok {
		_spec.SetField(divisioncode.FieldDescription, field.TypeString, value)
	}
	if dcu.mutation.CashAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.CashAccountTable,
			Columns: []string{divisioncode.CashAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.CashAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.CashAccountTable,
			Columns: []string{divisioncode.CashAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.ApAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ApAccountTable,
			Columns: []string{divisioncode.ApAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.ApAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ApAccountTable,
			Columns: []string{divisioncode.ApAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.ExpenseAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ExpenseAccountTable,
			Columns: []string{divisioncode.ExpenseAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.ExpenseAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ExpenseAccountTable,
			Columns: []string{divisioncode.ExpenseAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{divisioncode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DivisionCodeUpdateOne is the builder for updating a single DivisionCode entity.
type DivisionCodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DivisionCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (dcuo *DivisionCodeUpdateOne) SetUpdatedAt(t time.Time) *DivisionCodeUpdateOne {
	dcuo.mutation.SetUpdatedAt(t)
	return dcuo
}

// SetVersion sets the "version" field.
func (dcuo *DivisionCodeUpdateOne) SetVersion(i int) *DivisionCodeUpdateOne {
	dcuo.mutation.ResetVersion()
	dcuo.mutation.SetVersion(i)
	return dcuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dcuo *DivisionCodeUpdateOne) SetNillableVersion(i *int) *DivisionCodeUpdateOne {
	if i != nil {
		dcuo.SetVersion(*i)
	}
	return dcuo
}

// AddVersion adds i to the "version" field.
func (dcuo *DivisionCodeUpdateOne) AddVersion(i int) *DivisionCodeUpdateOne {
	dcuo.mutation.AddVersion(i)
	return dcuo
}

// SetStatus sets the "status" field.
func (dcuo *DivisionCodeUpdateOne) SetStatus(d divisioncode.Status) *DivisionCodeUpdateOne {
	dcuo.mutation.SetStatus(d)
	return dcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dcuo *DivisionCodeUpdateOne) SetNillableStatus(d *divisioncode.Status) *DivisionCodeUpdateOne {
	if d != nil {
		dcuo.SetStatus(*d)
	}
	return dcuo
}

// SetCode sets the "code" field.
func (dcuo *DivisionCodeUpdateOne) SetCode(s string) *DivisionCodeUpdateOne {
	dcuo.mutation.SetCode(s)
	return dcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dcuo *DivisionCodeUpdateOne) SetNillableCode(s *string) *DivisionCodeUpdateOne {
	if s != nil {
		dcuo.SetCode(*s)
	}
	return dcuo
}

// SetDescription sets the "description" field.
func (dcuo *DivisionCodeUpdateOne) SetDescription(s string) *DivisionCodeUpdateOne {
	dcuo.mutation.SetDescription(s)
	return dcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dcuo *DivisionCodeUpdateOne) SetNillableDescription(s *string) *DivisionCodeUpdateOne {
	if s != nil {
		dcuo.SetDescription(*s)
	}
	return dcuo
}

// SetCashAccountID sets the "cash_account_id" field.
func (dcuo *DivisionCodeUpdateOne) SetCashAccountID(u uuid.UUID) *DivisionCodeUpdateOne {
	dcuo.mutation.SetCashAccountID(u)
	return dcuo
}

// SetNillableCashAccountID sets the "cash_account_id" field if the given value is not nil.
func (dcuo *DivisionCodeUpdateOne) SetNillableCashAccountID(u *uuid.UUID) *DivisionCodeUpdateOne {
	if u != nil {
		dcuo.SetCashAccountID(*u)
	}
	return dcuo
}

// ClearCashAccountID clears the value of the "cash_account_id" field.
func (dcuo *DivisionCodeUpdateOne) ClearCashAccountID() *DivisionCodeUpdateOne {
	dcuo.mutation.ClearCashAccountID()
	return dcuo
}

// SetApAccountID sets the "ap_account_id" field.
func (dcuo *DivisionCodeUpdateOne) SetApAccountID(u uuid.UUID) *DivisionCodeUpdateOne {
	dcuo.mutation.SetApAccountID(u)
	return dcuo
}

// SetNillableApAccountID sets the "ap_account_id" field if the given value is not nil.
func (dcuo *DivisionCodeUpdateOne) SetNillableApAccountID(u *uuid.UUID) *DivisionCodeUpdateOne {
	if u != nil {
		dcuo.SetApAccountID(*u)
	}
	return dcuo
}

// ClearApAccountID clears the value of the "ap_account_id" field.
func (dcuo *DivisionCodeUpdateOne) ClearApAccountID() *DivisionCodeUpdateOne {
	dcuo.mutation.ClearApAccountID()
	return dcuo
}

// SetExpenseAccountID sets the "expense_account_id" field.
func (dcuo *DivisionCodeUpdateOne) SetExpenseAccountID(u uuid.UUID) *DivisionCodeUpdateOne {
	dcuo.mutation.SetExpenseAccountID(u)
	return dcuo
}

// SetNillableExpenseAccountID sets the "expense_account_id" field if the given value is not nil.
func (dcuo *DivisionCodeUpdateOne) SetNillableExpenseAccountID(u *uuid.UUID) *DivisionCodeUpdateOne {
	if u != nil {
		dcuo.SetExpenseAccountID(*u)
	}
	return dcuo
}

// ClearExpenseAccountID clears the value of the "expense_account_id" field.
func (dcuo *DivisionCodeUpdateOne) ClearExpenseAccountID() *DivisionCodeUpdateOne {
	dcuo.mutation.ClearExpenseAccountID()
	return dcuo
}

// SetCashAccount sets the "cash_account" edge to the GeneralLedgerAccount entity.
func (dcuo *DivisionCodeUpdateOne) SetCashAccount(g *GeneralLedgerAccount) *DivisionCodeUpdateOne {
	return dcuo.SetCashAccountID(g.ID)
}

// SetApAccount sets the "ap_account" edge to the GeneralLedgerAccount entity.
func (dcuo *DivisionCodeUpdateOne) SetApAccount(g *GeneralLedgerAccount) *DivisionCodeUpdateOne {
	return dcuo.SetApAccountID(g.ID)
}

// SetExpenseAccount sets the "expense_account" edge to the GeneralLedgerAccount entity.
func (dcuo *DivisionCodeUpdateOne) SetExpenseAccount(g *GeneralLedgerAccount) *DivisionCodeUpdateOne {
	return dcuo.SetExpenseAccountID(g.ID)
}

// Mutation returns the DivisionCodeMutation object of the builder.
func (dcuo *DivisionCodeUpdateOne) Mutation() *DivisionCodeMutation {
	return dcuo.mutation
}

// ClearCashAccount clears the "cash_account" edge to the GeneralLedgerAccount entity.
func (dcuo *DivisionCodeUpdateOne) ClearCashAccount() *DivisionCodeUpdateOne {
	dcuo.mutation.ClearCashAccount()
	return dcuo
}

// ClearApAccount clears the "ap_account" edge to the GeneralLedgerAccount entity.
func (dcuo *DivisionCodeUpdateOne) ClearApAccount() *DivisionCodeUpdateOne {
	dcuo.mutation.ClearApAccount()
	return dcuo
}

// ClearExpenseAccount clears the "expense_account" edge to the GeneralLedgerAccount entity.
func (dcuo *DivisionCodeUpdateOne) ClearExpenseAccount() *DivisionCodeUpdateOne {
	dcuo.mutation.ClearExpenseAccount()
	return dcuo
}

// Where appends a list predicates to the DivisionCodeUpdate builder.
func (dcuo *DivisionCodeUpdateOne) Where(ps ...predicate.DivisionCode) *DivisionCodeUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DivisionCodeUpdateOne) Select(field string, fields ...string) *DivisionCodeUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DivisionCode entity.
func (dcuo *DivisionCodeUpdateOne) Save(ctx context.Context) (*DivisionCode, error) {
	dcuo.defaults()
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DivisionCodeUpdateOne) SaveX(ctx context.Context) *DivisionCode {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DivisionCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DivisionCodeUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DivisionCodeUpdateOne) defaults() {
	if _, ok := dcuo.mutation.UpdatedAt(); !ok {
		v := divisioncode.UpdateDefaultUpdatedAt()
		dcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DivisionCodeUpdateOne) check() error {
	if v, ok := dcuo.mutation.Status(); ok {
		if err := divisioncode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DivisionCode.status": %w`, err)}
		}
	}
	if v, ok := dcuo.mutation.Code(); ok {
		if err := divisioncode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DivisionCode.code": %w`, err)}
		}
	}
	if v, ok := dcuo.mutation.Description(); ok {
		if err := divisioncode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "DivisionCode.description": %w`, err)}
		}
	}
	if _, ok := dcuo.mutation.BusinessUnitID(); dcuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DivisionCode.business_unit"`)
	}
	if _, ok := dcuo.mutation.OrganizationID(); dcuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DivisionCode.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcuo *DivisionCodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DivisionCodeUpdateOne {
	dcuo.modifiers = append(dcuo.modifiers, modifiers...)
	return dcuo
}

func (dcuo *DivisionCodeUpdateOne) sqlSave(ctx context.Context) (_node *DivisionCode, err error) {
	if err := dcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(divisioncode.Table, divisioncode.Columns, sqlgraph.NewFieldSpec(divisioncode.FieldID, field.TypeUUID))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DivisionCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, divisioncode.FieldID)
		for _, f := range fields {
			if !divisioncode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != divisioncode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(divisioncode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dcuo.mutation.Version(); ok {
		_spec.SetField(divisioncode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcuo.mutation.AddedVersion(); ok {
		_spec.AddField(divisioncode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcuo.mutation.Status(); ok {
		_spec.SetField(divisioncode.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dcuo.mutation.Code(); ok {
		_spec.SetField(divisioncode.FieldCode, field.TypeString, value)
	}
	if value, ok := dcuo.mutation.Description(); ok {
		_spec.SetField(divisioncode.FieldDescription, field.TypeString, value)
	}
	if dcuo.mutation.CashAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.CashAccountTable,
			Columns: []string{divisioncode.CashAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.CashAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.CashAccountTable,
			Columns: []string{divisioncode.CashAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.ApAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ApAccountTable,
			Columns: []string{divisioncode.ApAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.ApAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ApAccountTable,
			Columns: []string{divisioncode.ApAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.ExpenseAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ExpenseAccountTable,
			Columns: []string{divisioncode.ExpenseAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.ExpenseAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ExpenseAccountTable,
			Columns: []string{divisioncode.ExpenseAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dcuo.modifiers...)
	_node = &DivisionCode{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{divisioncode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
