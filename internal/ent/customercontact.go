// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customercontact"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// CustomerContact is the model entity for the CustomerContact schema.
type CustomerContact struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// The current version of this entity.
	Version int `json:"version" validate:"omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID uuid.UUID `json:"customerId" validate:"omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name" validate:"required,max=10"`
	// Email holds the value of the "email" field.
	Email string `json:"email" validate:"required,email"`
	// Title holds the value of the "title" field.
	Title string `json:"title" validate:"omitempty,max=100"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phoneNumber" validate:"omitempty,phoneNum"`
	// IsPayableContact holds the value of the "is_payable_contact" field.
	IsPayableContact bool `json:"isPayableContact" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerContactQuery when eager-loading is set.
	Edges        CustomerContactEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerContactEdges holds the relations/edges for other nodes in the graph.
type CustomerContactEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerContactEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerContactEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerContactEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerContact) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customercontact.FieldIsPayableContact:
			values[i] = new(sql.NullBool)
		case customercontact.FieldVersion:
			values[i] = new(sql.NullInt64)
		case customercontact.FieldName, customercontact.FieldEmail, customercontact.FieldTitle, customercontact.FieldPhoneNumber:
			values[i] = new(sql.NullString)
		case customercontact.FieldCreatedAt, customercontact.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case customercontact.FieldID, customercontact.FieldBusinessUnitID, customercontact.FieldOrganizationID, customercontact.FieldCustomerID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerContact fields.
func (cc *CustomerContact) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customercontact.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cc.ID = *value
			}
		case customercontact.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				cc.BusinessUnitID = *value
			}
		case customercontact.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				cc.OrganizationID = *value
			}
		case customercontact.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cc.CreatedAt = value.Time
			}
		case customercontact.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cc.UpdatedAt = value.Time
			}
		case customercontact.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				cc.Version = int(value.Int64)
			}
		case customercontact.FieldCustomerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value != nil {
				cc.CustomerID = *value
			}
		case customercontact.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cc.Name = value.String
			}
		case customercontact.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				cc.Email = value.String
			}
		case customercontact.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				cc.Title = value.String
			}
		case customercontact.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				cc.PhoneNumber = value.String
			}
		case customercontact.FieldIsPayableContact:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_payable_contact", values[i])
			} else if value.Valid {
				cc.IsPayableContact = value.Bool
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomerContact.
// This includes values selected through modifiers, order, etc.
func (cc *CustomerContact) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the CustomerContact entity.
func (cc *CustomerContact) QueryBusinessUnit() *BusinessUnitQuery {
	return NewCustomerContactClient(cc.config).QueryBusinessUnit(cc)
}

// QueryOrganization queries the "organization" edge of the CustomerContact entity.
func (cc *CustomerContact) QueryOrganization() *OrganizationQuery {
	return NewCustomerContactClient(cc.config).QueryOrganization(cc)
}

// QueryCustomer queries the "customer" edge of the CustomerContact entity.
func (cc *CustomerContact) QueryCustomer() *CustomerQuery {
	return NewCustomerContactClient(cc.config).QueryCustomer(cc)
}

// Update returns a builder for updating this CustomerContact.
// Note that you need to call CustomerContact.Unwrap() before calling this method if this CustomerContact
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CustomerContact) Update() *CustomerContactUpdateOne {
	return NewCustomerContactClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the CustomerContact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CustomerContact) Unwrap() *CustomerContact {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerContact is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CustomerContact) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerContact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", cc.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", cc.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", cc.Version))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", cc.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cc.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(cc.Email)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(cc.Title)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(cc.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("is_payable_contact=")
	builder.WriteString(fmt.Sprintf("%v", cc.IsPayableContact))
	builder.WriteByte(')')
	return builder.String()
}

// CustomerContacts is a parsable slice of CustomerContact.
type CustomerContacts []*CustomerContact
