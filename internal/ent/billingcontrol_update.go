// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/billingcontrol"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// BillingControlUpdate is the builder for updating BillingControl entities.
type BillingControlUpdate struct {
	config
	hooks     []Hook
	mutation  *BillingControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BillingControlUpdate builder.
func (bcu *BillingControlUpdate) Where(ps ...predicate.BillingControl) *BillingControlUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetUpdatedAt sets the "updated_at" field.
func (bcu *BillingControlUpdate) SetUpdatedAt(t time.Time) *BillingControlUpdate {
	bcu.mutation.SetUpdatedAt(t)
	return bcu
}

// SetRemoveBillingHistory sets the "remove_billing_history" field.
func (bcu *BillingControlUpdate) SetRemoveBillingHistory(b bool) *BillingControlUpdate {
	bcu.mutation.SetRemoveBillingHistory(b)
	return bcu
}

// SetNillableRemoveBillingHistory sets the "remove_billing_history" field if the given value is not nil.
func (bcu *BillingControlUpdate) SetNillableRemoveBillingHistory(b *bool) *BillingControlUpdate {
	if b != nil {
		bcu.SetRemoveBillingHistory(*b)
	}
	return bcu
}

// SetAutoBillShipment sets the "auto_bill_shipment" field.
func (bcu *BillingControlUpdate) SetAutoBillShipment(b bool) *BillingControlUpdate {
	bcu.mutation.SetAutoBillShipment(b)
	return bcu
}

// SetNillableAutoBillShipment sets the "auto_bill_shipment" field if the given value is not nil.
func (bcu *BillingControlUpdate) SetNillableAutoBillShipment(b *bool) *BillingControlUpdate {
	if b != nil {
		bcu.SetAutoBillShipment(*b)
	}
	return bcu
}

// SetAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field.
func (bcu *BillingControlUpdate) SetAutoMarkReadyToBill(b bool) *BillingControlUpdate {
	bcu.mutation.SetAutoMarkReadyToBill(b)
	return bcu
}

// SetNillableAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field if the given value is not nil.
func (bcu *BillingControlUpdate) SetNillableAutoMarkReadyToBill(b *bool) *BillingControlUpdate {
	if b != nil {
		bcu.SetAutoMarkReadyToBill(*b)
	}
	return bcu
}

// SetValidateCustomerRates sets the "validate_customer_rates" field.
func (bcu *BillingControlUpdate) SetValidateCustomerRates(b bool) *BillingControlUpdate {
	bcu.mutation.SetValidateCustomerRates(b)
	return bcu
}

// SetNillableValidateCustomerRates sets the "validate_customer_rates" field if the given value is not nil.
func (bcu *BillingControlUpdate) SetNillableValidateCustomerRates(b *bool) *BillingControlUpdate {
	if b != nil {
		bcu.SetValidateCustomerRates(*b)
	}
	return bcu
}

// SetAutoBillCriteria sets the "auto_bill_criteria" field.
func (bcu *BillingControlUpdate) SetAutoBillCriteria(bbc billingcontrol.AutoBillCriteria) *BillingControlUpdate {
	bcu.mutation.SetAutoBillCriteria(bbc)
	return bcu
}

// SetNillableAutoBillCriteria sets the "auto_bill_criteria" field if the given value is not nil.
func (bcu *BillingControlUpdate) SetNillableAutoBillCriteria(bbc *billingcontrol.AutoBillCriteria) *BillingControlUpdate {
	if bbc != nil {
		bcu.SetAutoBillCriteria(*bbc)
	}
	return bcu
}

// SetShipmentTransferCriteria sets the "shipment_transfer_criteria" field.
func (bcu *BillingControlUpdate) SetShipmentTransferCriteria(btc billingcontrol.ShipmentTransferCriteria) *BillingControlUpdate {
	bcu.mutation.SetShipmentTransferCriteria(btc)
	return bcu
}

// SetNillableShipmentTransferCriteria sets the "shipment_transfer_criteria" field if the given value is not nil.
func (bcu *BillingControlUpdate) SetNillableShipmentTransferCriteria(btc *billingcontrol.ShipmentTransferCriteria) *BillingControlUpdate {
	if btc != nil {
		bcu.SetShipmentTransferCriteria(*btc)
	}
	return bcu
}

// SetEnforceCustomerBilling sets the "enforce_customer_billing" field.
func (bcu *BillingControlUpdate) SetEnforceCustomerBilling(b bool) *BillingControlUpdate {
	bcu.mutation.SetEnforceCustomerBilling(b)
	return bcu
}

// SetNillableEnforceCustomerBilling sets the "enforce_customer_billing" field if the given value is not nil.
func (bcu *BillingControlUpdate) SetNillableEnforceCustomerBilling(b *bool) *BillingControlUpdate {
	if b != nil {
		bcu.SetEnforceCustomerBilling(*b)
	}
	return bcu
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (bcu *BillingControlUpdate) SetOrganizationID(id uuid.UUID) *BillingControlUpdate {
	bcu.mutation.SetOrganizationID(id)
	return bcu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (bcu *BillingControlUpdate) SetOrganization(o *Organization) *BillingControlUpdate {
	return bcu.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (bcu *BillingControlUpdate) SetBusinessUnitID(id uuid.UUID) *BillingControlUpdate {
	bcu.mutation.SetBusinessUnitID(id)
	return bcu
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (bcu *BillingControlUpdate) SetBusinessUnit(b *BusinessUnit) *BillingControlUpdate {
	return bcu.SetBusinessUnitID(b.ID)
}

// Mutation returns the BillingControlMutation object of the builder.
func (bcu *BillingControlUpdate) Mutation() *BillingControlMutation {
	return bcu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (bcu *BillingControlUpdate) ClearOrganization() *BillingControlUpdate {
	bcu.mutation.ClearOrganization()
	return bcu
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (bcu *BillingControlUpdate) ClearBusinessUnit() *BillingControlUpdate {
	bcu.mutation.ClearBusinessUnit()
	return bcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BillingControlUpdate) Save(ctx context.Context) (int, error) {
	bcu.defaults()
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BillingControlUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BillingControlUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BillingControlUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcu *BillingControlUpdate) defaults() {
	if _, ok := bcu.mutation.UpdatedAt(); !ok {
		v := billingcontrol.UpdateDefaultUpdatedAt()
		bcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BillingControlUpdate) check() error {
	if v, ok := bcu.mutation.AutoBillCriteria(); ok {
		if err := billingcontrol.AutoBillCriteriaValidator(v); err != nil {
			return &ValidationError{Name: "auto_bill_criteria", err: fmt.Errorf(`ent: validator failed for field "BillingControl.auto_bill_criteria": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.ShipmentTransferCriteria(); ok {
		if err := billingcontrol.ShipmentTransferCriteriaValidator(v); err != nil {
			return &ValidationError{Name: "shipment_transfer_criteria", err: fmt.Errorf(`ent: validator failed for field "BillingControl.shipment_transfer_criteria": %w`, err)}
		}
	}
	if _, ok := bcu.mutation.OrganizationID(); bcu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BillingControl.organization"`)
	}
	if _, ok := bcu.mutation.BusinessUnitID(); bcu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BillingControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bcu *BillingControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BillingControlUpdate {
	bcu.modifiers = append(bcu.modifiers, modifiers...)
	return bcu
}

func (bcu *BillingControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcontrol.Table, billingcontrol.Columns, sqlgraph.NewFieldSpec(billingcontrol.FieldID, field.TypeUUID))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcu.mutation.RemoveBillingHistory(); ok {
		_spec.SetField(billingcontrol.FieldRemoveBillingHistory, field.TypeBool, value)
	}
	if value, ok := bcu.mutation.AutoBillShipment(); ok {
		_spec.SetField(billingcontrol.FieldAutoBillShipment, field.TypeBool, value)
	}
	if value, ok := bcu.mutation.AutoMarkReadyToBill(); ok {
		_spec.SetField(billingcontrol.FieldAutoMarkReadyToBill, field.TypeBool, value)
	}
	if value, ok := bcu.mutation.ValidateCustomerRates(); ok {
		_spec.SetField(billingcontrol.FieldValidateCustomerRates, field.TypeBool, value)
	}
	if value, ok := bcu.mutation.AutoBillCriteria(); ok {
		_spec.SetField(billingcontrol.FieldAutoBillCriteria, field.TypeEnum, value)
	}
	if value, ok := bcu.mutation.ShipmentTransferCriteria(); ok {
		_spec.SetField(billingcontrol.FieldShipmentTransferCriteria, field.TypeEnum, value)
	}
	if value, ok := bcu.mutation.EnforceCustomerBilling(); ok {
		_spec.SetField(billingcontrol.FieldEnforceCustomerBilling, field.TypeBool, value)
	}
	if bcu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingcontrol.OrganizationTable,
			Columns: []string{billingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingcontrol.OrganizationTable,
			Columns: []string{billingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcu.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingcontrol.BusinessUnitTable,
			Columns: []string{billingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingcontrol.BusinessUnitTable,
			Columns: []string{billingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BillingControlUpdateOne is the builder for updating a single BillingControl entity.
type BillingControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BillingControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (bcuo *BillingControlUpdateOne) SetUpdatedAt(t time.Time) *BillingControlUpdateOne {
	bcuo.mutation.SetUpdatedAt(t)
	return bcuo
}

// SetRemoveBillingHistory sets the "remove_billing_history" field.
func (bcuo *BillingControlUpdateOne) SetRemoveBillingHistory(b bool) *BillingControlUpdateOne {
	bcuo.mutation.SetRemoveBillingHistory(b)
	return bcuo
}

// SetNillableRemoveBillingHistory sets the "remove_billing_history" field if the given value is not nil.
func (bcuo *BillingControlUpdateOne) SetNillableRemoveBillingHistory(b *bool) *BillingControlUpdateOne {
	if b != nil {
		bcuo.SetRemoveBillingHistory(*b)
	}
	return bcuo
}

// SetAutoBillShipment sets the "auto_bill_shipment" field.
func (bcuo *BillingControlUpdateOne) SetAutoBillShipment(b bool) *BillingControlUpdateOne {
	bcuo.mutation.SetAutoBillShipment(b)
	return bcuo
}

// SetNillableAutoBillShipment sets the "auto_bill_shipment" field if the given value is not nil.
func (bcuo *BillingControlUpdateOne) SetNillableAutoBillShipment(b *bool) *BillingControlUpdateOne {
	if b != nil {
		bcuo.SetAutoBillShipment(*b)
	}
	return bcuo
}

// SetAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field.
func (bcuo *BillingControlUpdateOne) SetAutoMarkReadyToBill(b bool) *BillingControlUpdateOne {
	bcuo.mutation.SetAutoMarkReadyToBill(b)
	return bcuo
}

// SetNillableAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field if the given value is not nil.
func (bcuo *BillingControlUpdateOne) SetNillableAutoMarkReadyToBill(b *bool) *BillingControlUpdateOne {
	if b != nil {
		bcuo.SetAutoMarkReadyToBill(*b)
	}
	return bcuo
}

// SetValidateCustomerRates sets the "validate_customer_rates" field.
func (bcuo *BillingControlUpdateOne) SetValidateCustomerRates(b bool) *BillingControlUpdateOne {
	bcuo.mutation.SetValidateCustomerRates(b)
	return bcuo
}

// SetNillableValidateCustomerRates sets the "validate_customer_rates" field if the given value is not nil.
func (bcuo *BillingControlUpdateOne) SetNillableValidateCustomerRates(b *bool) *BillingControlUpdateOne {
	if b != nil {
		bcuo.SetValidateCustomerRates(*b)
	}
	return bcuo
}

// SetAutoBillCriteria sets the "auto_bill_criteria" field.
func (bcuo *BillingControlUpdateOne) SetAutoBillCriteria(bbc billingcontrol.AutoBillCriteria) *BillingControlUpdateOne {
	bcuo.mutation.SetAutoBillCriteria(bbc)
	return bcuo
}

// SetNillableAutoBillCriteria sets the "auto_bill_criteria" field if the given value is not nil.
func (bcuo *BillingControlUpdateOne) SetNillableAutoBillCriteria(bbc *billingcontrol.AutoBillCriteria) *BillingControlUpdateOne {
	if bbc != nil {
		bcuo.SetAutoBillCriteria(*bbc)
	}
	return bcuo
}

// SetShipmentTransferCriteria sets the "shipment_transfer_criteria" field.
func (bcuo *BillingControlUpdateOne) SetShipmentTransferCriteria(btc billingcontrol.ShipmentTransferCriteria) *BillingControlUpdateOne {
	bcuo.mutation.SetShipmentTransferCriteria(btc)
	return bcuo
}

// SetNillableShipmentTransferCriteria sets the "shipment_transfer_criteria" field if the given value is not nil.
func (bcuo *BillingControlUpdateOne) SetNillableShipmentTransferCriteria(btc *billingcontrol.ShipmentTransferCriteria) *BillingControlUpdateOne {
	if btc != nil {
		bcuo.SetShipmentTransferCriteria(*btc)
	}
	return bcuo
}

// SetEnforceCustomerBilling sets the "enforce_customer_billing" field.
func (bcuo *BillingControlUpdateOne) SetEnforceCustomerBilling(b bool) *BillingControlUpdateOne {
	bcuo.mutation.SetEnforceCustomerBilling(b)
	return bcuo
}

// SetNillableEnforceCustomerBilling sets the "enforce_customer_billing" field if the given value is not nil.
func (bcuo *BillingControlUpdateOne) SetNillableEnforceCustomerBilling(b *bool) *BillingControlUpdateOne {
	if b != nil {
		bcuo.SetEnforceCustomerBilling(*b)
	}
	return bcuo
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (bcuo *BillingControlUpdateOne) SetOrganizationID(id uuid.UUID) *BillingControlUpdateOne {
	bcuo.mutation.SetOrganizationID(id)
	return bcuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (bcuo *BillingControlUpdateOne) SetOrganization(o *Organization) *BillingControlUpdateOne {
	return bcuo.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (bcuo *BillingControlUpdateOne) SetBusinessUnitID(id uuid.UUID) *BillingControlUpdateOne {
	bcuo.mutation.SetBusinessUnitID(id)
	return bcuo
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (bcuo *BillingControlUpdateOne) SetBusinessUnit(b *BusinessUnit) *BillingControlUpdateOne {
	return bcuo.SetBusinessUnitID(b.ID)
}

// Mutation returns the BillingControlMutation object of the builder.
func (bcuo *BillingControlUpdateOne) Mutation() *BillingControlMutation {
	return bcuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (bcuo *BillingControlUpdateOne) ClearOrganization() *BillingControlUpdateOne {
	bcuo.mutation.ClearOrganization()
	return bcuo
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (bcuo *BillingControlUpdateOne) ClearBusinessUnit() *BillingControlUpdateOne {
	bcuo.mutation.ClearBusinessUnit()
	return bcuo
}

// Where appends a list predicates to the BillingControlUpdate builder.
func (bcuo *BillingControlUpdateOne) Where(ps ...predicate.BillingControl) *BillingControlUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BillingControlUpdateOne) Select(field string, fields ...string) *BillingControlUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BillingControl entity.
func (bcuo *BillingControlUpdateOne) Save(ctx context.Context) (*BillingControl, error) {
	bcuo.defaults()
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BillingControlUpdateOne) SaveX(ctx context.Context) *BillingControl {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BillingControlUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BillingControlUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcuo *BillingControlUpdateOne) defaults() {
	if _, ok := bcuo.mutation.UpdatedAt(); !ok {
		v := billingcontrol.UpdateDefaultUpdatedAt()
		bcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BillingControlUpdateOne) check() error {
	if v, ok := bcuo.mutation.AutoBillCriteria(); ok {
		if err := billingcontrol.AutoBillCriteriaValidator(v); err != nil {
			return &ValidationError{Name: "auto_bill_criteria", err: fmt.Errorf(`ent: validator failed for field "BillingControl.auto_bill_criteria": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.ShipmentTransferCriteria(); ok {
		if err := billingcontrol.ShipmentTransferCriteriaValidator(v); err != nil {
			return &ValidationError{Name: "shipment_transfer_criteria", err: fmt.Errorf(`ent: validator failed for field "BillingControl.shipment_transfer_criteria": %w`, err)}
		}
	}
	if _, ok := bcuo.mutation.OrganizationID(); bcuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BillingControl.organization"`)
	}
	if _, ok := bcuo.mutation.BusinessUnitID(); bcuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BillingControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bcuo *BillingControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BillingControlUpdateOne {
	bcuo.modifiers = append(bcuo.modifiers, modifiers...)
	return bcuo
}

func (bcuo *BillingControlUpdateOne) sqlSave(ctx context.Context) (_node *BillingControl, err error) {
	if err := bcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcontrol.Table, billingcontrol.Columns, sqlgraph.NewFieldSpec(billingcontrol.FieldID, field.TypeUUID))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BillingControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingcontrol.FieldID)
		for _, f := range fields {
			if !billingcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billingcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcuo.mutation.RemoveBillingHistory(); ok {
		_spec.SetField(billingcontrol.FieldRemoveBillingHistory, field.TypeBool, value)
	}
	if value, ok := bcuo.mutation.AutoBillShipment(); ok {
		_spec.SetField(billingcontrol.FieldAutoBillShipment, field.TypeBool, value)
	}
	if value, ok := bcuo.mutation.AutoMarkReadyToBill(); ok {
		_spec.SetField(billingcontrol.FieldAutoMarkReadyToBill, field.TypeBool, value)
	}
	if value, ok := bcuo.mutation.ValidateCustomerRates(); ok {
		_spec.SetField(billingcontrol.FieldValidateCustomerRates, field.TypeBool, value)
	}
	if value, ok := bcuo.mutation.AutoBillCriteria(); ok {
		_spec.SetField(billingcontrol.FieldAutoBillCriteria, field.TypeEnum, value)
	}
	if value, ok := bcuo.mutation.ShipmentTransferCriteria(); ok {
		_spec.SetField(billingcontrol.FieldShipmentTransferCriteria, field.TypeEnum, value)
	}
	if value, ok := bcuo.mutation.EnforceCustomerBilling(); ok {
		_spec.SetField(billingcontrol.FieldEnforceCustomerBilling, field.TypeBool, value)
	}
	if bcuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingcontrol.OrganizationTable,
			Columns: []string{billingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingcontrol.OrganizationTable,
			Columns: []string{billingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcuo.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingcontrol.BusinessUnitTable,
			Columns: []string{billingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingcontrol.BusinessUnitTable,
			Columns: []string{billingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bcuo.modifiers...)
	_node = &BillingControl{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
