// Code generated by entc, DO NOT EDIT.

package trailer

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the trailer type in the database.
	Label = "trailer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEquipmentTypeID holds the string denoting the equipment_type_id field in the database.
	FieldEquipmentTypeID = "equipment_type_id"
	// FieldVin holds the string denoting the vin field in the database.
	FieldVin = "vin"
	// FieldEquipmentManufacturerID holds the string denoting the equipment_manufacturer_id field in the database.
	FieldEquipmentManufacturerID = "equipment_manufacturer_id"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// FieldLicensePlateNumber holds the string denoting the license_plate_number field in the database.
	FieldLicensePlateNumber = "license_plate_number"
	// FieldStateID holds the string denoting the state_id field in the database.
	FieldStateID = "state_id"
	// FieldFleetCodeID holds the string denoting the fleet_code_id field in the database.
	FieldFleetCodeID = "fleet_code_id"
	// FieldLastInspectionDate holds the string denoting the last_inspection_date field in the database.
	FieldLastInspectionDate = "last_inspection_date"
	// FieldRegistrationNumber holds the string denoting the registration_number field in the database.
	FieldRegistrationNumber = "registration_number"
	// FieldRegistrationStateID holds the string denoting the registration_state_id field in the database.
	FieldRegistrationStateID = "registration_state_id"
	// FieldRegistrationExpirationDate holds the string denoting the registration_expiration_date field in the database.
	FieldRegistrationExpirationDate = "registration_expiration_date"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeEquipmentType holds the string denoting the equipment_type edge name in mutations.
	EdgeEquipmentType = "equipment_type"
	// EdgeEquipmentManufacturer holds the string denoting the equipment_manufacturer edge name in mutations.
	EdgeEquipmentManufacturer = "equipment_manufacturer"
	// EdgeState holds the string denoting the state edge name in mutations.
	EdgeState = "state"
	// EdgeRegistrationState holds the string denoting the registration_state edge name in mutations.
	EdgeRegistrationState = "registration_state"
	// EdgeFleetCode holds the string denoting the fleet_code edge name in mutations.
	EdgeFleetCode = "fleet_code"
	// Table holds the table name of the trailer in the database.
	Table = "trailers"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "trailers"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "trailers"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// EquipmentTypeTable is the table that holds the equipment_type relation/edge.
	EquipmentTypeTable = "trailers"
	// EquipmentTypeInverseTable is the table name for the EquipmentType entity.
	// It exists in this package in order to avoid circular dependency with the "equipmenttype" package.
	EquipmentTypeInverseTable = "equipment_types"
	// EquipmentTypeColumn is the table column denoting the equipment_type relation/edge.
	EquipmentTypeColumn = "equipment_type_id"
	// EquipmentManufacturerTable is the table that holds the equipment_manufacturer relation/edge.
	EquipmentManufacturerTable = "trailers"
	// EquipmentManufacturerInverseTable is the table name for the EquipmentManufactuer entity.
	// It exists in this package in order to avoid circular dependency with the "equipmentmanufactuer" package.
	EquipmentManufacturerInverseTable = "equipment_manufactuers"
	// EquipmentManufacturerColumn is the table column denoting the equipment_manufacturer relation/edge.
	EquipmentManufacturerColumn = "equipment_manufacturer_id"
	// StateTable is the table that holds the state relation/edge.
	StateTable = "trailers"
	// StateInverseTable is the table name for the UsState entity.
	// It exists in this package in order to avoid circular dependency with the "usstate" package.
	StateInverseTable = "us_states"
	// StateColumn is the table column denoting the state relation/edge.
	StateColumn = "state_id"
	// RegistrationStateTable is the table that holds the registration_state relation/edge.
	RegistrationStateTable = "trailers"
	// RegistrationStateInverseTable is the table name for the UsState entity.
	// It exists in this package in order to avoid circular dependency with the "usstate" package.
	RegistrationStateInverseTable = "us_states"
	// RegistrationStateColumn is the table column denoting the registration_state relation/edge.
	RegistrationStateColumn = "registration_state_id"
	// FleetCodeTable is the table that holds the fleet_code relation/edge.
	FleetCodeTable = "trailers"
	// FleetCodeInverseTable is the table name for the FleetCode entity.
	// It exists in this package in order to avoid circular dependency with the "fleetcode" package.
	FleetCodeInverseTable = "fleet_codes"
	// FleetCodeColumn is the table column denoting the fleet_code relation/edge.
	FleetCodeColumn = "fleet_code_id"
)

// Columns holds all SQL columns for trailer fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVersion,
	FieldCode,
	FieldStatus,
	FieldEquipmentTypeID,
	FieldVin,
	FieldEquipmentManufacturerID,
	FieldModel,
	FieldYear,
	FieldLicensePlateNumber,
	FieldStateID,
	FieldFleetCodeID,
	FieldLastInspectionDate,
	FieldRegistrationNumber,
	FieldRegistrationStateID,
	FieldRegistrationExpirationDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/emoss08/trenova/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// ModelValidator is a validator for the "model" field. It is called by the builders before save.
	ModelValidator func(string) error
	// YearValidator is a validator for the "year" field. It is called by the builders before save.
	YearValidator func(int16) error
	// LicensePlateNumberValidator is a validator for the "license_plate_number" field. It is called by the builders before save.
	LicensePlateNumberValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusAvailable is the default value of the Status enum.
const DefaultStatus = StatusAvailable

// Status values.
const (
	StatusAvailable     Status = "Available"
	StatusOutOfService  Status = "OutOfService"
	StatusAtMaintenance Status = "AtMaintenance"
	StatusSold          Status = "Sold"
	StatusLost          Status = "Lost"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusAvailable, StatusOutOfService, StatusAtMaintenance, StatusSold, StatusLost:
		return nil
	default:
		return fmt.Errorf("trailer: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Trailer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEquipmentTypeID orders the results by the equipment_type_id field.
func ByEquipmentTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEquipmentTypeID, opts...).ToFunc()
}

// ByVin orders the results by the vin field.
func ByVin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVin, opts...).ToFunc()
}

// ByEquipmentManufacturerID orders the results by the equipment_manufacturer_id field.
func ByEquipmentManufacturerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEquipmentManufacturerID, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByYear orders the results by the year field.
func ByYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYear, opts...).ToFunc()
}

// ByLicensePlateNumber orders the results by the license_plate_number field.
func ByLicensePlateNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicensePlateNumber, opts...).ToFunc()
}

// ByStateID orders the results by the state_id field.
func ByStateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStateID, opts...).ToFunc()
}

// ByFleetCodeID orders the results by the fleet_code_id field.
func ByFleetCodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFleetCodeID, opts...).ToFunc()
}

// ByLastInspectionDate orders the results by the last_inspection_date field.
func ByLastInspectionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastInspectionDate, opts...).ToFunc()
}

// ByRegistrationNumber orders the results by the registration_number field.
func ByRegistrationNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationNumber, opts...).ToFunc()
}

// ByRegistrationStateID orders the results by the registration_state_id field.
func ByRegistrationStateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationStateID, opts...).ToFunc()
}

// ByRegistrationExpirationDate orders the results by the registration_expiration_date field.
func ByRegistrationExpirationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationExpirationDate, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByEquipmentTypeField orders the results by equipment_type field.
func ByEquipmentTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByEquipmentManufacturerField orders the results by equipment_manufacturer field.
func ByEquipmentManufacturerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentManufacturerStep(), sql.OrderByField(field, opts...))
	}
}

// ByStateField orders the results by state field.
func ByStateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStateStep(), sql.OrderByField(field, opts...))
	}
}

// ByRegistrationStateField orders the results by registration_state field.
func ByRegistrationStateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegistrationStateStep(), sql.OrderByField(field, opts...))
	}
}

// ByFleetCodeField orders the results by fleet_code field.
func ByFleetCodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFleetCodeStep(), sql.OrderByField(field, opts...))
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newEquipmentTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EquipmentTypeTable, EquipmentTypeColumn),
	)
}
func newEquipmentManufacturerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentManufacturerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EquipmentManufacturerTable, EquipmentManufacturerColumn),
	)
}
func newStateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StateTable, StateColumn),
	)
}
func newRegistrationStateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegistrationStateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RegistrationStateTable, RegistrationStateColumn),
	)
}
func newFleetCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FleetCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FleetCodeTable, FleetCodeColumn),
	)
}
