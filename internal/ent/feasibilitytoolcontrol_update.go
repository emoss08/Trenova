// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/feasibilitytoolcontrol"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// FeasibilityToolControlUpdate is the builder for updating FeasibilityToolControl entities.
type FeasibilityToolControlUpdate struct {
	config
	hooks     []Hook
	mutation  *FeasibilityToolControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FeasibilityToolControlUpdate builder.
func (ftcu *FeasibilityToolControlUpdate) Where(ps ...predicate.FeasibilityToolControl) *FeasibilityToolControlUpdate {
	ftcu.mutation.Where(ps...)
	return ftcu
}

// SetUpdatedAt sets the "updated_at" field.
func (ftcu *FeasibilityToolControlUpdate) SetUpdatedAt(t time.Time) *FeasibilityToolControlUpdate {
	ftcu.mutation.SetUpdatedAt(t)
	return ftcu
}

// SetOtpOperator sets the "otp_operator" field.
func (ftcu *FeasibilityToolControlUpdate) SetOtpOperator(fo feasibilitytoolcontrol.OtpOperator) *FeasibilityToolControlUpdate {
	ftcu.mutation.SetOtpOperator(fo)
	return ftcu
}

// SetNillableOtpOperator sets the "otp_operator" field if the given value is not nil.
func (ftcu *FeasibilityToolControlUpdate) SetNillableOtpOperator(fo *feasibilitytoolcontrol.OtpOperator) *FeasibilityToolControlUpdate {
	if fo != nil {
		ftcu.SetOtpOperator(*fo)
	}
	return ftcu
}

// SetOtpValue sets the "otp_value" field.
func (ftcu *FeasibilityToolControlUpdate) SetOtpValue(f float64) *FeasibilityToolControlUpdate {
	ftcu.mutation.ResetOtpValue()
	ftcu.mutation.SetOtpValue(f)
	return ftcu
}

// SetNillableOtpValue sets the "otp_value" field if the given value is not nil.
func (ftcu *FeasibilityToolControlUpdate) SetNillableOtpValue(f *float64) *FeasibilityToolControlUpdate {
	if f != nil {
		ftcu.SetOtpValue(*f)
	}
	return ftcu
}

// AddOtpValue adds f to the "otp_value" field.
func (ftcu *FeasibilityToolControlUpdate) AddOtpValue(f float64) *FeasibilityToolControlUpdate {
	ftcu.mutation.AddOtpValue(f)
	return ftcu
}

// SetMpwOperator sets the "mpw_operator" field.
func (ftcu *FeasibilityToolControlUpdate) SetMpwOperator(fo feasibilitytoolcontrol.MpwOperator) *FeasibilityToolControlUpdate {
	ftcu.mutation.SetMpwOperator(fo)
	return ftcu
}

// SetNillableMpwOperator sets the "mpw_operator" field if the given value is not nil.
func (ftcu *FeasibilityToolControlUpdate) SetNillableMpwOperator(fo *feasibilitytoolcontrol.MpwOperator) *FeasibilityToolControlUpdate {
	if fo != nil {
		ftcu.SetMpwOperator(*fo)
	}
	return ftcu
}

// SetMpwValue sets the "mpw_value" field.
func (ftcu *FeasibilityToolControlUpdate) SetMpwValue(f float64) *FeasibilityToolControlUpdate {
	ftcu.mutation.ResetMpwValue()
	ftcu.mutation.SetMpwValue(f)
	return ftcu
}

// SetNillableMpwValue sets the "mpw_value" field if the given value is not nil.
func (ftcu *FeasibilityToolControlUpdate) SetNillableMpwValue(f *float64) *FeasibilityToolControlUpdate {
	if f != nil {
		ftcu.SetMpwValue(*f)
	}
	return ftcu
}

// AddMpwValue adds f to the "mpw_value" field.
func (ftcu *FeasibilityToolControlUpdate) AddMpwValue(f float64) *FeasibilityToolControlUpdate {
	ftcu.mutation.AddMpwValue(f)
	return ftcu
}

// SetMpdOperator sets the "mpd_operator" field.
func (ftcu *FeasibilityToolControlUpdate) SetMpdOperator(fo feasibilitytoolcontrol.MpdOperator) *FeasibilityToolControlUpdate {
	ftcu.mutation.SetMpdOperator(fo)
	return ftcu
}

// SetNillableMpdOperator sets the "mpd_operator" field if the given value is not nil.
func (ftcu *FeasibilityToolControlUpdate) SetNillableMpdOperator(fo *feasibilitytoolcontrol.MpdOperator) *FeasibilityToolControlUpdate {
	if fo != nil {
		ftcu.SetMpdOperator(*fo)
	}
	return ftcu
}

// SetMpdValue sets the "mpd_value" field.
func (ftcu *FeasibilityToolControlUpdate) SetMpdValue(f float64) *FeasibilityToolControlUpdate {
	ftcu.mutation.ResetMpdValue()
	ftcu.mutation.SetMpdValue(f)
	return ftcu
}

// SetNillableMpdValue sets the "mpd_value" field if the given value is not nil.
func (ftcu *FeasibilityToolControlUpdate) SetNillableMpdValue(f *float64) *FeasibilityToolControlUpdate {
	if f != nil {
		ftcu.SetMpdValue(*f)
	}
	return ftcu
}

// AddMpdValue adds f to the "mpd_value" field.
func (ftcu *FeasibilityToolControlUpdate) AddMpdValue(f float64) *FeasibilityToolControlUpdate {
	ftcu.mutation.AddMpdValue(f)
	return ftcu
}

// SetMpgOperator sets the "mpg_operator" field.
func (ftcu *FeasibilityToolControlUpdate) SetMpgOperator(fo feasibilitytoolcontrol.MpgOperator) *FeasibilityToolControlUpdate {
	ftcu.mutation.SetMpgOperator(fo)
	return ftcu
}

// SetNillableMpgOperator sets the "mpg_operator" field if the given value is not nil.
func (ftcu *FeasibilityToolControlUpdate) SetNillableMpgOperator(fo *feasibilitytoolcontrol.MpgOperator) *FeasibilityToolControlUpdate {
	if fo != nil {
		ftcu.SetMpgOperator(*fo)
	}
	return ftcu
}

// SetMpgValue sets the "mpg_value" field.
func (ftcu *FeasibilityToolControlUpdate) SetMpgValue(f float64) *FeasibilityToolControlUpdate {
	ftcu.mutation.ResetMpgValue()
	ftcu.mutation.SetMpgValue(f)
	return ftcu
}

// SetNillableMpgValue sets the "mpg_value" field if the given value is not nil.
func (ftcu *FeasibilityToolControlUpdate) SetNillableMpgValue(f *float64) *FeasibilityToolControlUpdate {
	if f != nil {
		ftcu.SetMpgValue(*f)
	}
	return ftcu
}

// AddMpgValue adds f to the "mpg_value" field.
func (ftcu *FeasibilityToolControlUpdate) AddMpgValue(f float64) *FeasibilityToolControlUpdate {
	ftcu.mutation.AddMpgValue(f)
	return ftcu
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ftcu *FeasibilityToolControlUpdate) SetOrganizationID(id uuid.UUID) *FeasibilityToolControlUpdate {
	ftcu.mutation.SetOrganizationID(id)
	return ftcu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ftcu *FeasibilityToolControlUpdate) SetOrganization(o *Organization) *FeasibilityToolControlUpdate {
	return ftcu.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (ftcu *FeasibilityToolControlUpdate) SetBusinessUnitID(id uuid.UUID) *FeasibilityToolControlUpdate {
	ftcu.mutation.SetBusinessUnitID(id)
	return ftcu
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (ftcu *FeasibilityToolControlUpdate) SetBusinessUnit(b *BusinessUnit) *FeasibilityToolControlUpdate {
	return ftcu.SetBusinessUnitID(b.ID)
}

// Mutation returns the FeasibilityToolControlMutation object of the builder.
func (ftcu *FeasibilityToolControlUpdate) Mutation() *FeasibilityToolControlMutation {
	return ftcu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ftcu *FeasibilityToolControlUpdate) ClearOrganization() *FeasibilityToolControlUpdate {
	ftcu.mutation.ClearOrganization()
	return ftcu
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (ftcu *FeasibilityToolControlUpdate) ClearBusinessUnit() *FeasibilityToolControlUpdate {
	ftcu.mutation.ClearBusinessUnit()
	return ftcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ftcu *FeasibilityToolControlUpdate) Save(ctx context.Context) (int, error) {
	ftcu.defaults()
	return withHooks(ctx, ftcu.sqlSave, ftcu.mutation, ftcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ftcu *FeasibilityToolControlUpdate) SaveX(ctx context.Context) int {
	affected, err := ftcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ftcu *FeasibilityToolControlUpdate) Exec(ctx context.Context) error {
	_, err := ftcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftcu *FeasibilityToolControlUpdate) ExecX(ctx context.Context) {
	if err := ftcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftcu *FeasibilityToolControlUpdate) defaults() {
	if _, ok := ftcu.mutation.UpdatedAt(); !ok {
		v := feasibilitytoolcontrol.UpdateDefaultUpdatedAt()
		ftcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftcu *FeasibilityToolControlUpdate) check() error {
	if v, ok := ftcu.mutation.OtpOperator(); ok {
		if err := feasibilitytoolcontrol.OtpOperatorValidator(v); err != nil {
			return &ValidationError{Name: "otp_operator", err: fmt.Errorf(`ent: validator failed for field "FeasibilityToolControl.otp_operator": %w`, err)}
		}
	}
	if v, ok := ftcu.mutation.MpwOperator(); ok {
		if err := feasibilitytoolcontrol.MpwOperatorValidator(v); err != nil {
			return &ValidationError{Name: "mpw_operator", err: fmt.Errorf(`ent: validator failed for field "FeasibilityToolControl.mpw_operator": %w`, err)}
		}
	}
	if v, ok := ftcu.mutation.MpdOperator(); ok {
		if err := feasibilitytoolcontrol.MpdOperatorValidator(v); err != nil {
			return &ValidationError{Name: "mpd_operator", err: fmt.Errorf(`ent: validator failed for field "FeasibilityToolControl.mpd_operator": %w`, err)}
		}
	}
	if v, ok := ftcu.mutation.MpgOperator(); ok {
		if err := feasibilitytoolcontrol.MpgOperatorValidator(v); err != nil {
			return &ValidationError{Name: "mpg_operator", err: fmt.Errorf(`ent: validator failed for field "FeasibilityToolControl.mpg_operator": %w`, err)}
		}
	}
	if _, ok := ftcu.mutation.OrganizationID(); ftcu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FeasibilityToolControl.organization"`)
	}
	if _, ok := ftcu.mutation.BusinessUnitID(); ftcu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FeasibilityToolControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ftcu *FeasibilityToolControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeasibilityToolControlUpdate {
	ftcu.modifiers = append(ftcu.modifiers, modifiers...)
	return ftcu
}

func (ftcu *FeasibilityToolControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ftcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feasibilitytoolcontrol.Table, feasibilitytoolcontrol.Columns, sqlgraph.NewFieldSpec(feasibilitytoolcontrol.FieldID, field.TypeUUID))
	if ps := ftcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftcu.mutation.UpdatedAt(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ftcu.mutation.OtpOperator(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldOtpOperator, field.TypeEnum, value)
	}
	if value, ok := ftcu.mutation.OtpValue(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldOtpValue, field.TypeFloat64, value)
	}
	if value, ok := ftcu.mutation.AddedOtpValue(); ok {
		_spec.AddField(feasibilitytoolcontrol.FieldOtpValue, field.TypeFloat64, value)
	}
	if value, ok := ftcu.mutation.MpwOperator(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpwOperator, field.TypeEnum, value)
	}
	if value, ok := ftcu.mutation.MpwValue(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpwValue, field.TypeFloat64, value)
	}
	if value, ok := ftcu.mutation.AddedMpwValue(); ok {
		_spec.AddField(feasibilitytoolcontrol.FieldMpwValue, field.TypeFloat64, value)
	}
	if value, ok := ftcu.mutation.MpdOperator(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpdOperator, field.TypeEnum, value)
	}
	if value, ok := ftcu.mutation.MpdValue(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpdValue, field.TypeFloat64, value)
	}
	if value, ok := ftcu.mutation.AddedMpdValue(); ok {
		_spec.AddField(feasibilitytoolcontrol.FieldMpdValue, field.TypeFloat64, value)
	}
	if value, ok := ftcu.mutation.MpgOperator(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpgOperator, field.TypeEnum, value)
	}
	if value, ok := ftcu.mutation.MpgValue(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpgValue, field.TypeFloat64, value)
	}
	if value, ok := ftcu.mutation.AddedMpgValue(); ok {
		_spec.AddField(feasibilitytoolcontrol.FieldMpgValue, field.TypeFloat64, value)
	}
	if ftcu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   feasibilitytoolcontrol.OrganizationTable,
			Columns: []string{feasibilitytoolcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftcu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   feasibilitytoolcontrol.OrganizationTable,
			Columns: []string{feasibilitytoolcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ftcu.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feasibilitytoolcontrol.BusinessUnitTable,
			Columns: []string{feasibilitytoolcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftcu.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feasibilitytoolcontrol.BusinessUnitTable,
			Columns: []string{feasibilitytoolcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ftcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ftcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feasibilitytoolcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ftcu.mutation.done = true
	return n, nil
}

// FeasibilityToolControlUpdateOne is the builder for updating a single FeasibilityToolControl entity.
type FeasibilityToolControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FeasibilityToolControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ftcuo *FeasibilityToolControlUpdateOne) SetUpdatedAt(t time.Time) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.SetUpdatedAt(t)
	return ftcuo
}

// SetOtpOperator sets the "otp_operator" field.
func (ftcuo *FeasibilityToolControlUpdateOne) SetOtpOperator(fo feasibilitytoolcontrol.OtpOperator) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.SetOtpOperator(fo)
	return ftcuo
}

// SetNillableOtpOperator sets the "otp_operator" field if the given value is not nil.
func (ftcuo *FeasibilityToolControlUpdateOne) SetNillableOtpOperator(fo *feasibilitytoolcontrol.OtpOperator) *FeasibilityToolControlUpdateOne {
	if fo != nil {
		ftcuo.SetOtpOperator(*fo)
	}
	return ftcuo
}

// SetOtpValue sets the "otp_value" field.
func (ftcuo *FeasibilityToolControlUpdateOne) SetOtpValue(f float64) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.ResetOtpValue()
	ftcuo.mutation.SetOtpValue(f)
	return ftcuo
}

// SetNillableOtpValue sets the "otp_value" field if the given value is not nil.
func (ftcuo *FeasibilityToolControlUpdateOne) SetNillableOtpValue(f *float64) *FeasibilityToolControlUpdateOne {
	if f != nil {
		ftcuo.SetOtpValue(*f)
	}
	return ftcuo
}

// AddOtpValue adds f to the "otp_value" field.
func (ftcuo *FeasibilityToolControlUpdateOne) AddOtpValue(f float64) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.AddOtpValue(f)
	return ftcuo
}

// SetMpwOperator sets the "mpw_operator" field.
func (ftcuo *FeasibilityToolControlUpdateOne) SetMpwOperator(fo feasibilitytoolcontrol.MpwOperator) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.SetMpwOperator(fo)
	return ftcuo
}

// SetNillableMpwOperator sets the "mpw_operator" field if the given value is not nil.
func (ftcuo *FeasibilityToolControlUpdateOne) SetNillableMpwOperator(fo *feasibilitytoolcontrol.MpwOperator) *FeasibilityToolControlUpdateOne {
	if fo != nil {
		ftcuo.SetMpwOperator(*fo)
	}
	return ftcuo
}

// SetMpwValue sets the "mpw_value" field.
func (ftcuo *FeasibilityToolControlUpdateOne) SetMpwValue(f float64) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.ResetMpwValue()
	ftcuo.mutation.SetMpwValue(f)
	return ftcuo
}

// SetNillableMpwValue sets the "mpw_value" field if the given value is not nil.
func (ftcuo *FeasibilityToolControlUpdateOne) SetNillableMpwValue(f *float64) *FeasibilityToolControlUpdateOne {
	if f != nil {
		ftcuo.SetMpwValue(*f)
	}
	return ftcuo
}

// AddMpwValue adds f to the "mpw_value" field.
func (ftcuo *FeasibilityToolControlUpdateOne) AddMpwValue(f float64) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.AddMpwValue(f)
	return ftcuo
}

// SetMpdOperator sets the "mpd_operator" field.
func (ftcuo *FeasibilityToolControlUpdateOne) SetMpdOperator(fo feasibilitytoolcontrol.MpdOperator) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.SetMpdOperator(fo)
	return ftcuo
}

// SetNillableMpdOperator sets the "mpd_operator" field if the given value is not nil.
func (ftcuo *FeasibilityToolControlUpdateOne) SetNillableMpdOperator(fo *feasibilitytoolcontrol.MpdOperator) *FeasibilityToolControlUpdateOne {
	if fo != nil {
		ftcuo.SetMpdOperator(*fo)
	}
	return ftcuo
}

// SetMpdValue sets the "mpd_value" field.
func (ftcuo *FeasibilityToolControlUpdateOne) SetMpdValue(f float64) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.ResetMpdValue()
	ftcuo.mutation.SetMpdValue(f)
	return ftcuo
}

// SetNillableMpdValue sets the "mpd_value" field if the given value is not nil.
func (ftcuo *FeasibilityToolControlUpdateOne) SetNillableMpdValue(f *float64) *FeasibilityToolControlUpdateOne {
	if f != nil {
		ftcuo.SetMpdValue(*f)
	}
	return ftcuo
}

// AddMpdValue adds f to the "mpd_value" field.
func (ftcuo *FeasibilityToolControlUpdateOne) AddMpdValue(f float64) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.AddMpdValue(f)
	return ftcuo
}

// SetMpgOperator sets the "mpg_operator" field.
func (ftcuo *FeasibilityToolControlUpdateOne) SetMpgOperator(fo feasibilitytoolcontrol.MpgOperator) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.SetMpgOperator(fo)
	return ftcuo
}

// SetNillableMpgOperator sets the "mpg_operator" field if the given value is not nil.
func (ftcuo *FeasibilityToolControlUpdateOne) SetNillableMpgOperator(fo *feasibilitytoolcontrol.MpgOperator) *FeasibilityToolControlUpdateOne {
	if fo != nil {
		ftcuo.SetMpgOperator(*fo)
	}
	return ftcuo
}

// SetMpgValue sets the "mpg_value" field.
func (ftcuo *FeasibilityToolControlUpdateOne) SetMpgValue(f float64) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.ResetMpgValue()
	ftcuo.mutation.SetMpgValue(f)
	return ftcuo
}

// SetNillableMpgValue sets the "mpg_value" field if the given value is not nil.
func (ftcuo *FeasibilityToolControlUpdateOne) SetNillableMpgValue(f *float64) *FeasibilityToolControlUpdateOne {
	if f != nil {
		ftcuo.SetMpgValue(*f)
	}
	return ftcuo
}

// AddMpgValue adds f to the "mpg_value" field.
func (ftcuo *FeasibilityToolControlUpdateOne) AddMpgValue(f float64) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.AddMpgValue(f)
	return ftcuo
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ftcuo *FeasibilityToolControlUpdateOne) SetOrganizationID(id uuid.UUID) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.SetOrganizationID(id)
	return ftcuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ftcuo *FeasibilityToolControlUpdateOne) SetOrganization(o *Organization) *FeasibilityToolControlUpdateOne {
	return ftcuo.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (ftcuo *FeasibilityToolControlUpdateOne) SetBusinessUnitID(id uuid.UUID) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.SetBusinessUnitID(id)
	return ftcuo
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (ftcuo *FeasibilityToolControlUpdateOne) SetBusinessUnit(b *BusinessUnit) *FeasibilityToolControlUpdateOne {
	return ftcuo.SetBusinessUnitID(b.ID)
}

// Mutation returns the FeasibilityToolControlMutation object of the builder.
func (ftcuo *FeasibilityToolControlUpdateOne) Mutation() *FeasibilityToolControlMutation {
	return ftcuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ftcuo *FeasibilityToolControlUpdateOne) ClearOrganization() *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.ClearOrganization()
	return ftcuo
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (ftcuo *FeasibilityToolControlUpdateOne) ClearBusinessUnit() *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.ClearBusinessUnit()
	return ftcuo
}

// Where appends a list predicates to the FeasibilityToolControlUpdate builder.
func (ftcuo *FeasibilityToolControlUpdateOne) Where(ps ...predicate.FeasibilityToolControl) *FeasibilityToolControlUpdateOne {
	ftcuo.mutation.Where(ps...)
	return ftcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ftcuo *FeasibilityToolControlUpdateOne) Select(field string, fields ...string) *FeasibilityToolControlUpdateOne {
	ftcuo.fields = append([]string{field}, fields...)
	return ftcuo
}

// Save executes the query and returns the updated FeasibilityToolControl entity.
func (ftcuo *FeasibilityToolControlUpdateOne) Save(ctx context.Context) (*FeasibilityToolControl, error) {
	ftcuo.defaults()
	return withHooks(ctx, ftcuo.sqlSave, ftcuo.mutation, ftcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ftcuo *FeasibilityToolControlUpdateOne) SaveX(ctx context.Context) *FeasibilityToolControl {
	node, err := ftcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ftcuo *FeasibilityToolControlUpdateOne) Exec(ctx context.Context) error {
	_, err := ftcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftcuo *FeasibilityToolControlUpdateOne) ExecX(ctx context.Context) {
	if err := ftcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftcuo *FeasibilityToolControlUpdateOne) defaults() {
	if _, ok := ftcuo.mutation.UpdatedAt(); !ok {
		v := feasibilitytoolcontrol.UpdateDefaultUpdatedAt()
		ftcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftcuo *FeasibilityToolControlUpdateOne) check() error {
	if v, ok := ftcuo.mutation.OtpOperator(); ok {
		if err := feasibilitytoolcontrol.OtpOperatorValidator(v); err != nil {
			return &ValidationError{Name: "otp_operator", err: fmt.Errorf(`ent: validator failed for field "FeasibilityToolControl.otp_operator": %w`, err)}
		}
	}
	if v, ok := ftcuo.mutation.MpwOperator(); ok {
		if err := feasibilitytoolcontrol.MpwOperatorValidator(v); err != nil {
			return &ValidationError{Name: "mpw_operator", err: fmt.Errorf(`ent: validator failed for field "FeasibilityToolControl.mpw_operator": %w`, err)}
		}
	}
	if v, ok := ftcuo.mutation.MpdOperator(); ok {
		if err := feasibilitytoolcontrol.MpdOperatorValidator(v); err != nil {
			return &ValidationError{Name: "mpd_operator", err: fmt.Errorf(`ent: validator failed for field "FeasibilityToolControl.mpd_operator": %w`, err)}
		}
	}
	if v, ok := ftcuo.mutation.MpgOperator(); ok {
		if err := feasibilitytoolcontrol.MpgOperatorValidator(v); err != nil {
			return &ValidationError{Name: "mpg_operator", err: fmt.Errorf(`ent: validator failed for field "FeasibilityToolControl.mpg_operator": %w`, err)}
		}
	}
	if _, ok := ftcuo.mutation.OrganizationID(); ftcuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FeasibilityToolControl.organization"`)
	}
	if _, ok := ftcuo.mutation.BusinessUnitID(); ftcuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FeasibilityToolControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ftcuo *FeasibilityToolControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeasibilityToolControlUpdateOne {
	ftcuo.modifiers = append(ftcuo.modifiers, modifiers...)
	return ftcuo
}

func (ftcuo *FeasibilityToolControlUpdateOne) sqlSave(ctx context.Context) (_node *FeasibilityToolControl, err error) {
	if err := ftcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feasibilitytoolcontrol.Table, feasibilitytoolcontrol.Columns, sqlgraph.NewFieldSpec(feasibilitytoolcontrol.FieldID, field.TypeUUID))
	id, ok := ftcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeasibilityToolControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ftcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feasibilitytoolcontrol.FieldID)
		for _, f := range fields {
			if !feasibilitytoolcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feasibilitytoolcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ftcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ftcuo.mutation.OtpOperator(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldOtpOperator, field.TypeEnum, value)
	}
	if value, ok := ftcuo.mutation.OtpValue(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldOtpValue, field.TypeFloat64, value)
	}
	if value, ok := ftcuo.mutation.AddedOtpValue(); ok {
		_spec.AddField(feasibilitytoolcontrol.FieldOtpValue, field.TypeFloat64, value)
	}
	if value, ok := ftcuo.mutation.MpwOperator(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpwOperator, field.TypeEnum, value)
	}
	if value, ok := ftcuo.mutation.MpwValue(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpwValue, field.TypeFloat64, value)
	}
	if value, ok := ftcuo.mutation.AddedMpwValue(); ok {
		_spec.AddField(feasibilitytoolcontrol.FieldMpwValue, field.TypeFloat64, value)
	}
	if value, ok := ftcuo.mutation.MpdOperator(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpdOperator, field.TypeEnum, value)
	}
	if value, ok := ftcuo.mutation.MpdValue(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpdValue, field.TypeFloat64, value)
	}
	if value, ok := ftcuo.mutation.AddedMpdValue(); ok {
		_spec.AddField(feasibilitytoolcontrol.FieldMpdValue, field.TypeFloat64, value)
	}
	if value, ok := ftcuo.mutation.MpgOperator(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpgOperator, field.TypeEnum, value)
	}
	if value, ok := ftcuo.mutation.MpgValue(); ok {
		_spec.SetField(feasibilitytoolcontrol.FieldMpgValue, field.TypeFloat64, value)
	}
	if value, ok := ftcuo.mutation.AddedMpgValue(); ok {
		_spec.AddField(feasibilitytoolcontrol.FieldMpgValue, field.TypeFloat64, value)
	}
	if ftcuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   feasibilitytoolcontrol.OrganizationTable,
			Columns: []string{feasibilitytoolcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftcuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   feasibilitytoolcontrol.OrganizationTable,
			Columns: []string{feasibilitytoolcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ftcuo.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feasibilitytoolcontrol.BusinessUnitTable,
			Columns: []string{feasibilitytoolcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftcuo.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feasibilitytoolcontrol.BusinessUnitTable,
			Columns: []string{feasibilitytoolcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ftcuo.modifiers...)
	_node = &FeasibilityToolControl{config: ftcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ftcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feasibilitytoolcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ftcuo.mutation.done = true
	return _node, nil
}
