// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/equipmenttype"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// EquipmentType is the model entity for the EquipmentType schema.
type EquipmentType struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// Status holds the value of the "status" field.
	Status equipmenttype.Status `json:"status" validate:"required,oneof=A I"`
	// Code holds the value of the "code" field.
	Code string `json:"code" validate:"required,max=50"`
	// Description holds the value of the "description" field.
	Description string `json:"description" validate:"omitempty"`
	// CostPerMile holds the value of the "cost_per_mile" field.
	CostPerMile float64 `json:"costPerMile" validate:"omitempty"`
	// EquipmentClass holds the value of the "equipment_class" field.
	EquipmentClass equipmenttype.EquipmentClass `json:"equipmentClass" validate:"required,oneof=Undefined Car Van Pickup Straight Tractor Trailer Container Chassis Other"`
	// FixedCost holds the value of the "fixed_cost" field.
	FixedCost float64 `json:"fixedCost" validate:"omitempty"`
	// VariableCost holds the value of the "variable_cost" field.
	VariableCost float64 `json:"variableCost" validate:"omitempty"`
	// Height holds the value of the "height" field.
	Height float64 `json:"height" validate:"omitempty"`
	// Length holds the value of the "length" field.
	Length float64 `json:"length" validate:"omitempty"`
	// Width holds the value of the "width" field.
	Width float64 `json:"width" validate:"omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float64 `json:"weight" validate:"omitempty"`
	// IdlingFuelUsage holds the value of the "idling_fuel_usage" field.
	IdlingFuelUsage float64 `json:"idlingFuelUsage" validate:"omitempty"`
	// ExemptFromTolls holds the value of the "exempt_from_tolls" field.
	ExemptFromTolls bool `json:"exemptFromTolls" validate:"omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentTypeQuery when eager-loading is set.
	Edges        EquipmentTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EquipmentTypeEdges holds the relations/edges for other nodes in the graph.
type EquipmentTypeEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentTypeEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentTypeEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EquipmentType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipmenttype.FieldExemptFromTolls:
			values[i] = new(sql.NullBool)
		case equipmenttype.FieldCostPerMile, equipmenttype.FieldFixedCost, equipmenttype.FieldVariableCost, equipmenttype.FieldHeight, equipmenttype.FieldLength, equipmenttype.FieldWidth, equipmenttype.FieldWeight, equipmenttype.FieldIdlingFuelUsage:
			values[i] = new(sql.NullFloat64)
		case equipmenttype.FieldVersion:
			values[i] = new(sql.NullInt64)
		case equipmenttype.FieldStatus, equipmenttype.FieldCode, equipmenttype.FieldDescription, equipmenttype.FieldEquipmentClass, equipmenttype.FieldColor:
			values[i] = new(sql.NullString)
		case equipmenttype.FieldCreatedAt, equipmenttype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case equipmenttype.FieldID, equipmenttype.FieldBusinessUnitID, equipmenttype.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EquipmentType fields.
func (et *EquipmentType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipmenttype.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				et.ID = *value
			}
		case equipmenttype.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				et.BusinessUnitID = *value
			}
		case equipmenttype.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				et.OrganizationID = *value
			}
		case equipmenttype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				et.CreatedAt = value.Time
			}
		case equipmenttype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				et.UpdatedAt = value.Time
			}
		case equipmenttype.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				et.Version = int(value.Int64)
			}
		case equipmenttype.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				et.Status = equipmenttype.Status(value.String)
			}
		case equipmenttype.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				et.Code = value.String
			}
		case equipmenttype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				et.Description = value.String
			}
		case equipmenttype.FieldCostPerMile:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost_per_mile", values[i])
			} else if value.Valid {
				et.CostPerMile = value.Float64
			}
		case equipmenttype.FieldEquipmentClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field equipment_class", values[i])
			} else if value.Valid {
				et.EquipmentClass = equipmenttype.EquipmentClass(value.String)
			}
		case equipmenttype.FieldFixedCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_cost", values[i])
			} else if value.Valid {
				et.FixedCost = value.Float64
			}
		case equipmenttype.FieldVariableCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field variable_cost", values[i])
			} else if value.Valid {
				et.VariableCost = value.Float64
			}
		case equipmenttype.FieldHeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				et.Height = value.Float64
			}
		case equipmenttype.FieldLength:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				et.Length = value.Float64
			}
		case equipmenttype.FieldWidth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				et.Width = value.Float64
			}
		case equipmenttype.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				et.Weight = value.Float64
			}
		case equipmenttype.FieldIdlingFuelUsage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field idling_fuel_usage", values[i])
			} else if value.Valid {
				et.IdlingFuelUsage = value.Float64
			}
		case equipmenttype.FieldExemptFromTolls:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field exempt_from_tolls", values[i])
			} else if value.Valid {
				et.ExemptFromTolls = value.Bool
			}
		case equipmenttype.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				et.Color = value.String
			}
		default:
			et.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EquipmentType.
// This includes values selected through modifiers, order, etc.
func (et *EquipmentType) Value(name string) (ent.Value, error) {
	return et.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the EquipmentType entity.
func (et *EquipmentType) QueryBusinessUnit() *BusinessUnitQuery {
	return NewEquipmentTypeClient(et.config).QueryBusinessUnit(et)
}

// QueryOrganization queries the "organization" edge of the EquipmentType entity.
func (et *EquipmentType) QueryOrganization() *OrganizationQuery {
	return NewEquipmentTypeClient(et.config).QueryOrganization(et)
}

// Update returns a builder for updating this EquipmentType.
// Note that you need to call EquipmentType.Unwrap() before calling this method if this EquipmentType
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EquipmentType) Update() *EquipmentTypeUpdateOne {
	return NewEquipmentTypeClient(et.config).UpdateOne(et)
}

// Unwrap unwraps the EquipmentType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EquipmentType) Unwrap() *EquipmentType {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: EquipmentType is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EquipmentType) String() string {
	var builder strings.Builder
	builder.WriteString("EquipmentType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", et.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", et.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(et.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(et.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", et.Version))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", et.Status))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(et.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(et.Description)
	builder.WriteString(", ")
	builder.WriteString("cost_per_mile=")
	builder.WriteString(fmt.Sprintf("%v", et.CostPerMile))
	builder.WriteString(", ")
	builder.WriteString("equipment_class=")
	builder.WriteString(fmt.Sprintf("%v", et.EquipmentClass))
	builder.WriteString(", ")
	builder.WriteString("fixed_cost=")
	builder.WriteString(fmt.Sprintf("%v", et.FixedCost))
	builder.WriteString(", ")
	builder.WriteString("variable_cost=")
	builder.WriteString(fmt.Sprintf("%v", et.VariableCost))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", et.Height))
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", et.Length))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", et.Width))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", et.Weight))
	builder.WriteString(", ")
	builder.WriteString("idling_fuel_usage=")
	builder.WriteString(fmt.Sprintf("%v", et.IdlingFuelUsage))
	builder.WriteString(", ")
	builder.WriteString("exempt_from_tolls=")
	builder.WriteString(fmt.Sprintf("%v", et.ExemptFromTolls))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(et.Color)
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentTypes is a parsable slice of EquipmentType.
type EquipmentTypes []*EquipmentType
