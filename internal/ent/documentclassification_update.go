// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/customerruleprofile"
	"github.com/emoss08/trenova/internal/ent/documentclassification"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/shipmentdocumentation"
	"github.com/google/uuid"
)

// DocumentClassificationUpdate is the builder for updating DocumentClassification entities.
type DocumentClassificationUpdate struct {
	config
	hooks     []Hook
	mutation  *DocumentClassificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DocumentClassificationUpdate builder.
func (dcu *DocumentClassificationUpdate) Where(ps ...predicate.DocumentClassification) *DocumentClassificationUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetOrganizationID sets the "organization_id" field.
func (dcu *DocumentClassificationUpdate) SetOrganizationID(u uuid.UUID) *DocumentClassificationUpdate {
	dcu.mutation.SetOrganizationID(u)
	return dcu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (dcu *DocumentClassificationUpdate) SetNillableOrganizationID(u *uuid.UUID) *DocumentClassificationUpdate {
	if u != nil {
		dcu.SetOrganizationID(*u)
	}
	return dcu
}

// SetUpdatedAt sets the "updated_at" field.
func (dcu *DocumentClassificationUpdate) SetUpdatedAt(t time.Time) *DocumentClassificationUpdate {
	dcu.mutation.SetUpdatedAt(t)
	return dcu
}

// SetVersion sets the "version" field.
func (dcu *DocumentClassificationUpdate) SetVersion(i int) *DocumentClassificationUpdate {
	dcu.mutation.ResetVersion()
	dcu.mutation.SetVersion(i)
	return dcu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dcu *DocumentClassificationUpdate) SetNillableVersion(i *int) *DocumentClassificationUpdate {
	if i != nil {
		dcu.SetVersion(*i)
	}
	return dcu
}

// AddVersion adds i to the "version" field.
func (dcu *DocumentClassificationUpdate) AddVersion(i int) *DocumentClassificationUpdate {
	dcu.mutation.AddVersion(i)
	return dcu
}

// SetStatus sets the "status" field.
func (dcu *DocumentClassificationUpdate) SetStatus(d documentclassification.Status) *DocumentClassificationUpdate {
	dcu.mutation.SetStatus(d)
	return dcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dcu *DocumentClassificationUpdate) SetNillableStatus(d *documentclassification.Status) *DocumentClassificationUpdate {
	if d != nil {
		dcu.SetStatus(*d)
	}
	return dcu
}

// SetCode sets the "code" field.
func (dcu *DocumentClassificationUpdate) SetCode(s string) *DocumentClassificationUpdate {
	dcu.mutation.SetCode(s)
	return dcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dcu *DocumentClassificationUpdate) SetNillableCode(s *string) *DocumentClassificationUpdate {
	if s != nil {
		dcu.SetCode(*s)
	}
	return dcu
}

// SetDescription sets the "description" field.
func (dcu *DocumentClassificationUpdate) SetDescription(s string) *DocumentClassificationUpdate {
	dcu.mutation.SetDescription(s)
	return dcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dcu *DocumentClassificationUpdate) SetNillableDescription(s *string) *DocumentClassificationUpdate {
	if s != nil {
		dcu.SetDescription(*s)
	}
	return dcu
}

// ClearDescription clears the value of the "description" field.
func (dcu *DocumentClassificationUpdate) ClearDescription() *DocumentClassificationUpdate {
	dcu.mutation.ClearDescription()
	return dcu
}

// SetColor sets the "color" field.
func (dcu *DocumentClassificationUpdate) SetColor(s string) *DocumentClassificationUpdate {
	dcu.mutation.SetColor(s)
	return dcu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (dcu *DocumentClassificationUpdate) SetNillableColor(s *string) *DocumentClassificationUpdate {
	if s != nil {
		dcu.SetColor(*s)
	}
	return dcu
}

// ClearColor clears the value of the "color" field.
func (dcu *DocumentClassificationUpdate) ClearColor() *DocumentClassificationUpdate {
	dcu.mutation.ClearColor()
	return dcu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (dcu *DocumentClassificationUpdate) SetOrganization(o *Organization) *DocumentClassificationUpdate {
	return dcu.SetOrganizationID(o.ID)
}

// AddShipmentDocumentationIDs adds the "shipment_documentation" edge to the ShipmentDocumentation entity by IDs.
func (dcu *DocumentClassificationUpdate) AddShipmentDocumentationIDs(ids ...uuid.UUID) *DocumentClassificationUpdate {
	dcu.mutation.AddShipmentDocumentationIDs(ids...)
	return dcu
}

// AddShipmentDocumentation adds the "shipment_documentation" edges to the ShipmentDocumentation entity.
func (dcu *DocumentClassificationUpdate) AddShipmentDocumentation(s ...*ShipmentDocumentation) *DocumentClassificationUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return dcu.AddShipmentDocumentationIDs(ids...)
}

// AddCustomerRuleProfileIDs adds the "customer_rule_profile" edge to the CustomerRuleProfile entity by IDs.
func (dcu *DocumentClassificationUpdate) AddCustomerRuleProfileIDs(ids ...uuid.UUID) *DocumentClassificationUpdate {
	dcu.mutation.AddCustomerRuleProfileIDs(ids...)
	return dcu
}

// AddCustomerRuleProfile adds the "customer_rule_profile" edges to the CustomerRuleProfile entity.
func (dcu *DocumentClassificationUpdate) AddCustomerRuleProfile(c ...*CustomerRuleProfile) *DocumentClassificationUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcu.AddCustomerRuleProfileIDs(ids...)
}

// Mutation returns the DocumentClassificationMutation object of the builder.
func (dcu *DocumentClassificationUpdate) Mutation() *DocumentClassificationMutation {
	return dcu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (dcu *DocumentClassificationUpdate) ClearOrganization() *DocumentClassificationUpdate {
	dcu.mutation.ClearOrganization()
	return dcu
}

// ClearShipmentDocumentation clears all "shipment_documentation" edges to the ShipmentDocumentation entity.
func (dcu *DocumentClassificationUpdate) ClearShipmentDocumentation() *DocumentClassificationUpdate {
	dcu.mutation.ClearShipmentDocumentation()
	return dcu
}

// RemoveShipmentDocumentationIDs removes the "shipment_documentation" edge to ShipmentDocumentation entities by IDs.
func (dcu *DocumentClassificationUpdate) RemoveShipmentDocumentationIDs(ids ...uuid.UUID) *DocumentClassificationUpdate {
	dcu.mutation.RemoveShipmentDocumentationIDs(ids...)
	return dcu
}

// RemoveShipmentDocumentation removes "shipment_documentation" edges to ShipmentDocumentation entities.
func (dcu *DocumentClassificationUpdate) RemoveShipmentDocumentation(s ...*ShipmentDocumentation) *DocumentClassificationUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return dcu.RemoveShipmentDocumentationIDs(ids...)
}

// ClearCustomerRuleProfile clears all "customer_rule_profile" edges to the CustomerRuleProfile entity.
func (dcu *DocumentClassificationUpdate) ClearCustomerRuleProfile() *DocumentClassificationUpdate {
	dcu.mutation.ClearCustomerRuleProfile()
	return dcu
}

// RemoveCustomerRuleProfileIDs removes the "customer_rule_profile" edge to CustomerRuleProfile entities by IDs.
func (dcu *DocumentClassificationUpdate) RemoveCustomerRuleProfileIDs(ids ...uuid.UUID) *DocumentClassificationUpdate {
	dcu.mutation.RemoveCustomerRuleProfileIDs(ids...)
	return dcu
}

// RemoveCustomerRuleProfile removes "customer_rule_profile" edges to CustomerRuleProfile entities.
func (dcu *DocumentClassificationUpdate) RemoveCustomerRuleProfile(c ...*CustomerRuleProfile) *DocumentClassificationUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcu.RemoveCustomerRuleProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DocumentClassificationUpdate) Save(ctx context.Context) (int, error) {
	if err := dcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DocumentClassificationUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DocumentClassificationUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DocumentClassificationUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DocumentClassificationUpdate) defaults() error {
	if _, ok := dcu.mutation.UpdatedAt(); !ok {
		if documentclassification.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized documentclassification.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := documentclassification.UpdateDefaultUpdatedAt()
		dcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DocumentClassificationUpdate) check() error {
	if v, ok := dcu.mutation.Status(); ok {
		if err := documentclassification.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DocumentClassification.status": %w`, err)}
		}
	}
	if v, ok := dcu.mutation.Code(); ok {
		if err := documentclassification.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DocumentClassification.code": %w`, err)}
		}
	}
	if _, ok := dcu.mutation.BusinessUnitID(); dcu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DocumentClassification.business_unit"`)
	}
	if _, ok := dcu.mutation.OrganizationID(); dcu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DocumentClassification.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcu *DocumentClassificationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DocumentClassificationUpdate {
	dcu.modifiers = append(dcu.modifiers, modifiers...)
	return dcu
}

func (dcu *DocumentClassificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(documentclassification.Table, documentclassification.Columns, sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.UpdatedAt(); ok {
		_spec.SetField(documentclassification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dcu.mutation.Version(); ok {
		_spec.SetField(documentclassification.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcu.mutation.AddedVersion(); ok {
		_spec.AddField(documentclassification.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcu.mutation.Status(); ok {
		_spec.SetField(documentclassification.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dcu.mutation.Code(); ok {
		_spec.SetField(documentclassification.FieldCode, field.TypeString, value)
	}
	if value, ok := dcu.mutation.Description(); ok {
		_spec.SetField(documentclassification.FieldDescription, field.TypeString, value)
	}
	if dcu.mutation.DescriptionCleared() {
		_spec.ClearField(documentclassification.FieldDescription, field.TypeString)
	}
	if value, ok := dcu.mutation.Color(); ok {
		_spec.SetField(documentclassification.FieldColor, field.TypeString, value)
	}
	if dcu.mutation.ColorCleared() {
		_spec.ClearField(documentclassification.FieldColor, field.TypeString)
	}
	if dcu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentclassification.OrganizationTable,
			Columns: []string{documentclassification.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentclassification.OrganizationTable,
			Columns: []string{documentclassification.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.ShipmentDocumentationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentclassification.ShipmentDocumentationTable,
			Columns: []string{documentclassification.ShipmentDocumentationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdocumentation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedShipmentDocumentationIDs(); len(nodes) > 0 && !dcu.mutation.ShipmentDocumentationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentclassification.ShipmentDocumentationTable,
			Columns: []string{documentclassification.ShipmentDocumentationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdocumentation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.ShipmentDocumentationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentclassification.ShipmentDocumentationTable,
			Columns: []string{documentclassification.ShipmentDocumentationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdocumentation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.CustomerRuleProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   documentclassification.CustomerRuleProfileTable,
			Columns: documentclassification.CustomerRuleProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedCustomerRuleProfileIDs(); len(nodes) > 0 && !dcu.mutation.CustomerRuleProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   documentclassification.CustomerRuleProfileTable,
			Columns: documentclassification.CustomerRuleProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.CustomerRuleProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   documentclassification.CustomerRuleProfileTable,
			Columns: documentclassification.CustomerRuleProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentclassification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DocumentClassificationUpdateOne is the builder for updating a single DocumentClassification entity.
type DocumentClassificationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DocumentClassificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (dcuo *DocumentClassificationUpdateOne) SetOrganizationID(u uuid.UUID) *DocumentClassificationUpdateOne {
	dcuo.mutation.SetOrganizationID(u)
	return dcuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (dcuo *DocumentClassificationUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *DocumentClassificationUpdateOne {
	if u != nil {
		dcuo.SetOrganizationID(*u)
	}
	return dcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dcuo *DocumentClassificationUpdateOne) SetUpdatedAt(t time.Time) *DocumentClassificationUpdateOne {
	dcuo.mutation.SetUpdatedAt(t)
	return dcuo
}

// SetVersion sets the "version" field.
func (dcuo *DocumentClassificationUpdateOne) SetVersion(i int) *DocumentClassificationUpdateOne {
	dcuo.mutation.ResetVersion()
	dcuo.mutation.SetVersion(i)
	return dcuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dcuo *DocumentClassificationUpdateOne) SetNillableVersion(i *int) *DocumentClassificationUpdateOne {
	if i != nil {
		dcuo.SetVersion(*i)
	}
	return dcuo
}

// AddVersion adds i to the "version" field.
func (dcuo *DocumentClassificationUpdateOne) AddVersion(i int) *DocumentClassificationUpdateOne {
	dcuo.mutation.AddVersion(i)
	return dcuo
}

// SetStatus sets the "status" field.
func (dcuo *DocumentClassificationUpdateOne) SetStatus(d documentclassification.Status) *DocumentClassificationUpdateOne {
	dcuo.mutation.SetStatus(d)
	return dcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dcuo *DocumentClassificationUpdateOne) SetNillableStatus(d *documentclassification.Status) *DocumentClassificationUpdateOne {
	if d != nil {
		dcuo.SetStatus(*d)
	}
	return dcuo
}

// SetCode sets the "code" field.
func (dcuo *DocumentClassificationUpdateOne) SetCode(s string) *DocumentClassificationUpdateOne {
	dcuo.mutation.SetCode(s)
	return dcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dcuo *DocumentClassificationUpdateOne) SetNillableCode(s *string) *DocumentClassificationUpdateOne {
	if s != nil {
		dcuo.SetCode(*s)
	}
	return dcuo
}

// SetDescription sets the "description" field.
func (dcuo *DocumentClassificationUpdateOne) SetDescription(s string) *DocumentClassificationUpdateOne {
	dcuo.mutation.SetDescription(s)
	return dcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dcuo *DocumentClassificationUpdateOne) SetNillableDescription(s *string) *DocumentClassificationUpdateOne {
	if s != nil {
		dcuo.SetDescription(*s)
	}
	return dcuo
}

// ClearDescription clears the value of the "description" field.
func (dcuo *DocumentClassificationUpdateOne) ClearDescription() *DocumentClassificationUpdateOne {
	dcuo.mutation.ClearDescription()
	return dcuo
}

// SetColor sets the "color" field.
func (dcuo *DocumentClassificationUpdateOne) SetColor(s string) *DocumentClassificationUpdateOne {
	dcuo.mutation.SetColor(s)
	return dcuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (dcuo *DocumentClassificationUpdateOne) SetNillableColor(s *string) *DocumentClassificationUpdateOne {
	if s != nil {
		dcuo.SetColor(*s)
	}
	return dcuo
}

// ClearColor clears the value of the "color" field.
func (dcuo *DocumentClassificationUpdateOne) ClearColor() *DocumentClassificationUpdateOne {
	dcuo.mutation.ClearColor()
	return dcuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (dcuo *DocumentClassificationUpdateOne) SetOrganization(o *Organization) *DocumentClassificationUpdateOne {
	return dcuo.SetOrganizationID(o.ID)
}

// AddShipmentDocumentationIDs adds the "shipment_documentation" edge to the ShipmentDocumentation entity by IDs.
func (dcuo *DocumentClassificationUpdateOne) AddShipmentDocumentationIDs(ids ...uuid.UUID) *DocumentClassificationUpdateOne {
	dcuo.mutation.AddShipmentDocumentationIDs(ids...)
	return dcuo
}

// AddShipmentDocumentation adds the "shipment_documentation" edges to the ShipmentDocumentation entity.
func (dcuo *DocumentClassificationUpdateOne) AddShipmentDocumentation(s ...*ShipmentDocumentation) *DocumentClassificationUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return dcuo.AddShipmentDocumentationIDs(ids...)
}

// AddCustomerRuleProfileIDs adds the "customer_rule_profile" edge to the CustomerRuleProfile entity by IDs.
func (dcuo *DocumentClassificationUpdateOne) AddCustomerRuleProfileIDs(ids ...uuid.UUID) *DocumentClassificationUpdateOne {
	dcuo.mutation.AddCustomerRuleProfileIDs(ids...)
	return dcuo
}

// AddCustomerRuleProfile adds the "customer_rule_profile" edges to the CustomerRuleProfile entity.
func (dcuo *DocumentClassificationUpdateOne) AddCustomerRuleProfile(c ...*CustomerRuleProfile) *DocumentClassificationUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcuo.AddCustomerRuleProfileIDs(ids...)
}

// Mutation returns the DocumentClassificationMutation object of the builder.
func (dcuo *DocumentClassificationUpdateOne) Mutation() *DocumentClassificationMutation {
	return dcuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (dcuo *DocumentClassificationUpdateOne) ClearOrganization() *DocumentClassificationUpdateOne {
	dcuo.mutation.ClearOrganization()
	return dcuo
}

// ClearShipmentDocumentation clears all "shipment_documentation" edges to the ShipmentDocumentation entity.
func (dcuo *DocumentClassificationUpdateOne) ClearShipmentDocumentation() *DocumentClassificationUpdateOne {
	dcuo.mutation.ClearShipmentDocumentation()
	return dcuo
}

// RemoveShipmentDocumentationIDs removes the "shipment_documentation" edge to ShipmentDocumentation entities by IDs.
func (dcuo *DocumentClassificationUpdateOne) RemoveShipmentDocumentationIDs(ids ...uuid.UUID) *DocumentClassificationUpdateOne {
	dcuo.mutation.RemoveShipmentDocumentationIDs(ids...)
	return dcuo
}

// RemoveShipmentDocumentation removes "shipment_documentation" edges to ShipmentDocumentation entities.
func (dcuo *DocumentClassificationUpdateOne) RemoveShipmentDocumentation(s ...*ShipmentDocumentation) *DocumentClassificationUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return dcuo.RemoveShipmentDocumentationIDs(ids...)
}

// ClearCustomerRuleProfile clears all "customer_rule_profile" edges to the CustomerRuleProfile entity.
func (dcuo *DocumentClassificationUpdateOne) ClearCustomerRuleProfile() *DocumentClassificationUpdateOne {
	dcuo.mutation.ClearCustomerRuleProfile()
	return dcuo
}

// RemoveCustomerRuleProfileIDs removes the "customer_rule_profile" edge to CustomerRuleProfile entities by IDs.
func (dcuo *DocumentClassificationUpdateOne) RemoveCustomerRuleProfileIDs(ids ...uuid.UUID) *DocumentClassificationUpdateOne {
	dcuo.mutation.RemoveCustomerRuleProfileIDs(ids...)
	return dcuo
}

// RemoveCustomerRuleProfile removes "customer_rule_profile" edges to CustomerRuleProfile entities.
func (dcuo *DocumentClassificationUpdateOne) RemoveCustomerRuleProfile(c ...*CustomerRuleProfile) *DocumentClassificationUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcuo.RemoveCustomerRuleProfileIDs(ids...)
}

// Where appends a list predicates to the DocumentClassificationUpdate builder.
func (dcuo *DocumentClassificationUpdateOne) Where(ps ...predicate.DocumentClassification) *DocumentClassificationUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DocumentClassificationUpdateOne) Select(field string, fields ...string) *DocumentClassificationUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DocumentClassification entity.
func (dcuo *DocumentClassificationUpdateOne) Save(ctx context.Context) (*DocumentClassification, error) {
	if err := dcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DocumentClassificationUpdateOne) SaveX(ctx context.Context) *DocumentClassification {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DocumentClassificationUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DocumentClassificationUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DocumentClassificationUpdateOne) defaults() error {
	if _, ok := dcuo.mutation.UpdatedAt(); !ok {
		if documentclassification.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized documentclassification.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := documentclassification.UpdateDefaultUpdatedAt()
		dcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DocumentClassificationUpdateOne) check() error {
	if v, ok := dcuo.mutation.Status(); ok {
		if err := documentclassification.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DocumentClassification.status": %w`, err)}
		}
	}
	if v, ok := dcuo.mutation.Code(); ok {
		if err := documentclassification.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DocumentClassification.code": %w`, err)}
		}
	}
	if _, ok := dcuo.mutation.BusinessUnitID(); dcuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DocumentClassification.business_unit"`)
	}
	if _, ok := dcuo.mutation.OrganizationID(); dcuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DocumentClassification.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcuo *DocumentClassificationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DocumentClassificationUpdateOne {
	dcuo.modifiers = append(dcuo.modifiers, modifiers...)
	return dcuo
}

func (dcuo *DocumentClassificationUpdateOne) sqlSave(ctx context.Context) (_node *DocumentClassification, err error) {
	if err := dcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(documentclassification.Table, documentclassification.Columns, sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DocumentClassification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, documentclassification.FieldID)
		for _, f := range fields {
			if !documentclassification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != documentclassification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(documentclassification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dcuo.mutation.Version(); ok {
		_spec.SetField(documentclassification.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcuo.mutation.AddedVersion(); ok {
		_spec.AddField(documentclassification.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcuo.mutation.Status(); ok {
		_spec.SetField(documentclassification.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dcuo.mutation.Code(); ok {
		_spec.SetField(documentclassification.FieldCode, field.TypeString, value)
	}
	if value, ok := dcuo.mutation.Description(); ok {
		_spec.SetField(documentclassification.FieldDescription, field.TypeString, value)
	}
	if dcuo.mutation.DescriptionCleared() {
		_spec.ClearField(documentclassification.FieldDescription, field.TypeString)
	}
	if value, ok := dcuo.mutation.Color(); ok {
		_spec.SetField(documentclassification.FieldColor, field.TypeString, value)
	}
	if dcuo.mutation.ColorCleared() {
		_spec.ClearField(documentclassification.FieldColor, field.TypeString)
	}
	if dcuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentclassification.OrganizationTable,
			Columns: []string{documentclassification.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentclassification.OrganizationTable,
			Columns: []string{documentclassification.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.ShipmentDocumentationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentclassification.ShipmentDocumentationTable,
			Columns: []string{documentclassification.ShipmentDocumentationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdocumentation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedShipmentDocumentationIDs(); len(nodes) > 0 && !dcuo.mutation.ShipmentDocumentationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentclassification.ShipmentDocumentationTable,
			Columns: []string{documentclassification.ShipmentDocumentationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdocumentation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.ShipmentDocumentationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentclassification.ShipmentDocumentationTable,
			Columns: []string{documentclassification.ShipmentDocumentationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdocumentation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.CustomerRuleProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   documentclassification.CustomerRuleProfileTable,
			Columns: documentclassification.CustomerRuleProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedCustomerRuleProfileIDs(); len(nodes) > 0 && !dcuo.mutation.CustomerRuleProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   documentclassification.CustomerRuleProfileTable,
			Columns: documentclassification.CustomerRuleProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.CustomerRuleProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   documentclassification.CustomerRuleProfileTable,
			Columns: documentclassification.CustomerRuleProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dcuo.modifiers...)
	_node = &DocumentClassification{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentclassification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
