// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customercontact"
	"github.com/emoss08/trenova/internal/ent/customerdetentionpolicy"
	"github.com/emoss08/trenova/internal/ent/customeremailprofile"
	"github.com/emoss08/trenova/internal/ent/customerruleprofile"
	"github.com/emoss08/trenova/internal/ent/deliveryslot"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/shipment"
	"github.com/emoss08/trenova/internal/ent/usstate"
	"github.com/google/uuid"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetOrganizationID sets the "organization_id" field.
func (cu *CustomerUpdate) SetOrganizationID(u uuid.UUID) *CustomerUpdate {
	cu.mutation.SetOrganizationID(u)
	return cu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableOrganizationID(u *uuid.UUID) *CustomerUpdate {
	if u != nil {
		cu.SetOrganizationID(*u)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetVersion sets the "version" field.
func (cu *CustomerUpdate) SetVersion(i int) *CustomerUpdate {
	cu.mutation.ResetVersion()
	cu.mutation.SetVersion(i)
	return cu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableVersion(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetVersion(*i)
	}
	return cu
}

// AddVersion adds i to the "version" field.
func (cu *CustomerUpdate) AddVersion(i int) *CustomerUpdate {
	cu.mutation.AddVersion(i)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CustomerUpdate) SetStatus(c customer.Status) *CustomerUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableStatus(c *customer.Status) *CustomerUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetCode sets the "code" field.
func (cu *CustomerUpdate) SetCode(s string) *CustomerUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCode(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *CustomerUpdate) SetName(s string) *CustomerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetAddressLine1 sets the "address_line_1" field.
func (cu *CustomerUpdate) SetAddressLine1(s string) *CustomerUpdate {
	cu.mutation.SetAddressLine1(s)
	return cu
}

// SetNillableAddressLine1 sets the "address_line_1" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAddressLine1(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAddressLine1(*s)
	}
	return cu
}

// SetAddressLine2 sets the "address_line_2" field.
func (cu *CustomerUpdate) SetAddressLine2(s string) *CustomerUpdate {
	cu.mutation.SetAddressLine2(s)
	return cu
}

// SetNillableAddressLine2 sets the "address_line_2" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAddressLine2(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAddressLine2(*s)
	}
	return cu
}

// ClearAddressLine2 clears the value of the "address_line_2" field.
func (cu *CustomerUpdate) ClearAddressLine2() *CustomerUpdate {
	cu.mutation.ClearAddressLine2()
	return cu
}

// SetCity sets the "city" field.
func (cu *CustomerUpdate) SetCity(s string) *CustomerUpdate {
	cu.mutation.SetCity(s)
	return cu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCity(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCity(*s)
	}
	return cu
}

// SetStateID sets the "state_id" field.
func (cu *CustomerUpdate) SetStateID(u uuid.UUID) *CustomerUpdate {
	cu.mutation.SetStateID(u)
	return cu
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableStateID(u *uuid.UUID) *CustomerUpdate {
	if u != nil {
		cu.SetStateID(*u)
	}
	return cu
}

// SetPostalCode sets the "postal_code" field.
func (cu *CustomerUpdate) SetPostalCode(s string) *CustomerUpdate {
	cu.mutation.SetPostalCode(s)
	return cu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePostalCode(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPostalCode(*s)
	}
	return cu
}

// SetHasCustomerPortal sets the "has_customer_portal" field.
func (cu *CustomerUpdate) SetHasCustomerPortal(b bool) *CustomerUpdate {
	cu.mutation.SetHasCustomerPortal(b)
	return cu
}

// SetNillableHasCustomerPortal sets the "has_customer_portal" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableHasCustomerPortal(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetHasCustomerPortal(*b)
	}
	return cu
}

// SetAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field.
func (cu *CustomerUpdate) SetAutoMarkReadyToBill(b bool) *CustomerUpdate {
	cu.mutation.SetAutoMarkReadyToBill(b)
	return cu
}

// SetNillableAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAutoMarkReadyToBill(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetAutoMarkReadyToBill(*b)
	}
	return cu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cu *CustomerUpdate) SetOrganization(o *Organization) *CustomerUpdate {
	return cu.SetOrganizationID(o.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (cu *CustomerUpdate) SetState(u *UsState) *CustomerUpdate {
	return cu.SetStateID(u.ID)
}

// AddShipmentIDs adds the "shipments" edge to the Shipment entity by IDs.
func (cu *CustomerUpdate) AddShipmentIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.AddShipmentIDs(ids...)
	return cu
}

// AddShipments adds the "shipments" edges to the Shipment entity.
func (cu *CustomerUpdate) AddShipments(s ...*Shipment) *CustomerUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddShipmentIDs(ids...)
}

// SetEmailProfileID sets the "email_profile" edge to the CustomerEmailProfile entity by ID.
func (cu *CustomerUpdate) SetEmailProfileID(id uuid.UUID) *CustomerUpdate {
	cu.mutation.SetEmailProfileID(id)
	return cu
}

// SetNillableEmailProfileID sets the "email_profile" edge to the CustomerEmailProfile entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableEmailProfileID(id *uuid.UUID) *CustomerUpdate {
	if id != nil {
		cu = cu.SetEmailProfileID(*id)
	}
	return cu
}

// SetEmailProfile sets the "email_profile" edge to the CustomerEmailProfile entity.
func (cu *CustomerUpdate) SetEmailProfile(c *CustomerEmailProfile) *CustomerUpdate {
	return cu.SetEmailProfileID(c.ID)
}

// SetRuleProfileID sets the "rule_profile" edge to the CustomerRuleProfile entity by ID.
func (cu *CustomerUpdate) SetRuleProfileID(id uuid.UUID) *CustomerUpdate {
	cu.mutation.SetRuleProfileID(id)
	return cu
}

// SetNillableRuleProfileID sets the "rule_profile" edge to the CustomerRuleProfile entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableRuleProfileID(id *uuid.UUID) *CustomerUpdate {
	if id != nil {
		cu = cu.SetRuleProfileID(*id)
	}
	return cu
}

// SetRuleProfile sets the "rule_profile" edge to the CustomerRuleProfile entity.
func (cu *CustomerUpdate) SetRuleProfile(c *CustomerRuleProfile) *CustomerUpdate {
	return cu.SetRuleProfileID(c.ID)
}

// AddDetentionPolicyIDs adds the "detention_policies" edge to the CustomerDetentionPolicy entity by IDs.
func (cu *CustomerUpdate) AddDetentionPolicyIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.AddDetentionPolicyIDs(ids...)
	return cu
}

// AddDetentionPolicies adds the "detention_policies" edges to the CustomerDetentionPolicy entity.
func (cu *CustomerUpdate) AddDetentionPolicies(c ...*CustomerDetentionPolicy) *CustomerUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddDetentionPolicyIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the CustomerContact entity by IDs.
func (cu *CustomerUpdate) AddContactIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.AddContactIDs(ids...)
	return cu
}

// AddContacts adds the "contacts" edges to the CustomerContact entity.
func (cu *CustomerUpdate) AddContacts(c ...*CustomerContact) *CustomerUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddContactIDs(ids...)
}

// AddDeliverySlotIDs adds the "delivery_slots" edge to the DeliverySlot entity by IDs.
func (cu *CustomerUpdate) AddDeliverySlotIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.AddDeliverySlotIDs(ids...)
	return cu
}

// AddDeliverySlots adds the "delivery_slots" edges to the DeliverySlot entity.
func (cu *CustomerUpdate) AddDeliverySlots(d ...*DeliverySlot) *CustomerUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDeliverySlotIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (cu *CustomerUpdate) ClearOrganization() *CustomerUpdate {
	cu.mutation.ClearOrganization()
	return cu
}

// ClearState clears the "state" edge to the UsState entity.
func (cu *CustomerUpdate) ClearState() *CustomerUpdate {
	cu.mutation.ClearState()
	return cu
}

// ClearShipments clears all "shipments" edges to the Shipment entity.
func (cu *CustomerUpdate) ClearShipments() *CustomerUpdate {
	cu.mutation.ClearShipments()
	return cu
}

// RemoveShipmentIDs removes the "shipments" edge to Shipment entities by IDs.
func (cu *CustomerUpdate) RemoveShipmentIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.RemoveShipmentIDs(ids...)
	return cu
}

// RemoveShipments removes "shipments" edges to Shipment entities.
func (cu *CustomerUpdate) RemoveShipments(s ...*Shipment) *CustomerUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveShipmentIDs(ids...)
}

// ClearEmailProfile clears the "email_profile" edge to the CustomerEmailProfile entity.
func (cu *CustomerUpdate) ClearEmailProfile() *CustomerUpdate {
	cu.mutation.ClearEmailProfile()
	return cu
}

// ClearRuleProfile clears the "rule_profile" edge to the CustomerRuleProfile entity.
func (cu *CustomerUpdate) ClearRuleProfile() *CustomerUpdate {
	cu.mutation.ClearRuleProfile()
	return cu
}

// ClearDetentionPolicies clears all "detention_policies" edges to the CustomerDetentionPolicy entity.
func (cu *CustomerUpdate) ClearDetentionPolicies() *CustomerUpdate {
	cu.mutation.ClearDetentionPolicies()
	return cu
}

// RemoveDetentionPolicyIDs removes the "detention_policies" edge to CustomerDetentionPolicy entities by IDs.
func (cu *CustomerUpdate) RemoveDetentionPolicyIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.RemoveDetentionPolicyIDs(ids...)
	return cu
}

// RemoveDetentionPolicies removes "detention_policies" edges to CustomerDetentionPolicy entities.
func (cu *CustomerUpdate) RemoveDetentionPolicies(c ...*CustomerDetentionPolicy) *CustomerUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveDetentionPolicyIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the CustomerContact entity.
func (cu *CustomerUpdate) ClearContacts() *CustomerUpdate {
	cu.mutation.ClearContacts()
	return cu
}

// RemoveContactIDs removes the "contacts" edge to CustomerContact entities by IDs.
func (cu *CustomerUpdate) RemoveContactIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.RemoveContactIDs(ids...)
	return cu
}

// RemoveContacts removes "contacts" edges to CustomerContact entities.
func (cu *CustomerUpdate) RemoveContacts(c ...*CustomerContact) *CustomerUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveContactIDs(ids...)
}

// ClearDeliverySlots clears all "delivery_slots" edges to the DeliverySlot entity.
func (cu *CustomerUpdate) ClearDeliverySlots() *CustomerUpdate {
	cu.mutation.ClearDeliverySlots()
	return cu
}

// RemoveDeliverySlotIDs removes the "delivery_slots" edge to DeliverySlot entities by IDs.
func (cu *CustomerUpdate) RemoveDeliverySlotIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.RemoveDeliverySlotIDs(ids...)
	return cu
}

// RemoveDeliverySlots removes "delivery_slots" edges to DeliverySlot entities.
func (cu *CustomerUpdate) RemoveDeliverySlots(d ...*DeliverySlot) *CustomerUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDeliverySlotIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if customer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized customer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.Status(); ok {
		if err := customer.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Customer.status": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Code(); ok {
		if err := customer.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Customer.code": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.AddressLine1(); ok {
		if err := customer.AddressLine1Validator(v); err != nil {
			return &ValidationError{Name: "address_line_1", err: fmt.Errorf(`ent: validator failed for field "Customer.address_line_1": %w`, err)}
		}
	}
	if v, ok := cu.mutation.AddressLine2(); ok {
		if err := customer.AddressLine2Validator(v); err != nil {
			return &ValidationError{Name: "address_line_2", err: fmt.Errorf(`ent: validator failed for field "Customer.address_line_2": %w`, err)}
		}
	}
	if v, ok := cu.mutation.City(); ok {
		if err := customer.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Customer.city": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PostalCode(); ok {
		if err := customer.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Customer.postal_code": %w`, err)}
		}
	}
	if _, ok := cu.mutation.BusinessUnitID(); cu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Customer.business_unit"`)
	}
	if _, ok := cu.mutation.OrganizationID(); cu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Customer.organization"`)
	}
	if _, ok := cu.mutation.StateID(); cu.mutation.StateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Customer.state"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CustomerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.SetField(customer.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedVersion(); ok {
		_spec.AddField(customer.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(customer.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(customer.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.AddressLine1(); ok {
		_spec.SetField(customer.FieldAddressLine1, field.TypeString, value)
	}
	if value, ok := cu.mutation.AddressLine2(); ok {
		_spec.SetField(customer.FieldAddressLine2, field.TypeString, value)
	}
	if cu.mutation.AddressLine2Cleared() {
		_spec.ClearField(customer.FieldAddressLine2, field.TypeString)
	}
	if value, ok := cu.mutation.City(); ok {
		_spec.SetField(customer.FieldCity, field.TypeString, value)
	}
	if value, ok := cu.mutation.PostalCode(); ok {
		_spec.SetField(customer.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.HasCustomerPortal(); ok {
		_spec.SetField(customer.FieldHasCustomerPortal, field.TypeBool, value)
	}
	if value, ok := cu.mutation.AutoMarkReadyToBill(); ok {
		_spec.SetField(customer.FieldAutoMarkReadyToBill, field.TypeBool, value)
	}
	if cu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.OrganizationTable,
			Columns: []string{customer.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.OrganizationTable,
			Columns: []string{customer.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.StateTable,
			Columns: []string{customer.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.StateTable,
			Columns: []string{customer.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ShipmentsTable,
			Columns: []string{customer.ShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedShipmentsIDs(); len(nodes) > 0 && !cu.mutation.ShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ShipmentsTable,
			Columns: []string{customer.ShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ShipmentsTable,
			Columns: []string{customer.ShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EmailProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.EmailProfileTable,
			Columns: []string{customer.EmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeremailprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.EmailProfileTable,
			Columns: []string{customer.EmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeremailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RuleProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.RuleProfileTable,
			Columns: []string{customer.RuleProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RuleProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.RuleProfileTable,
			Columns: []string{customer.RuleProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DetentionPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DetentionPoliciesTable,
			Columns: []string{customer.DetentionPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDetentionPoliciesIDs(); len(nodes) > 0 && !cu.mutation.DetentionPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DetentionPoliciesTable,
			Columns: []string{customer.DetentionPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DetentionPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DetentionPoliciesTable,
			Columns: []string{customer.DetentionPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedContactsIDs(); len(nodes) > 0 && !cu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeliverySlotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DeliverySlotsTable,
			Columns: []string{customer.DeliverySlotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryslot.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDeliverySlotsIDs(); len(nodes) > 0 && !cu.mutation.DeliverySlotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DeliverySlotsTable,
			Columns: []string{customer.DeliverySlotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryslot.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeliverySlotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DeliverySlotsTable,
			Columns: []string{customer.DeliverySlotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryslot.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (cuo *CustomerUpdateOne) SetOrganizationID(u uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.SetOrganizationID(u)
	return cuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *CustomerUpdateOne {
	if u != nil {
		cuo.SetOrganizationID(*u)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *CustomerUpdateOne) SetVersion(i int) *CustomerUpdateOne {
	cuo.mutation.ResetVersion()
	cuo.mutation.SetVersion(i)
	return cuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableVersion(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetVersion(*i)
	}
	return cuo
}

// AddVersion adds i to the "version" field.
func (cuo *CustomerUpdateOne) AddVersion(i int) *CustomerUpdateOne {
	cuo.mutation.AddVersion(i)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CustomerUpdateOne) SetStatus(c customer.Status) *CustomerUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableStatus(c *customer.Status) *CustomerUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetCode sets the "code" field.
func (cuo *CustomerUpdateOne) SetCode(s string) *CustomerUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCode(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *CustomerUpdateOne) SetName(s string) *CustomerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetAddressLine1 sets the "address_line_1" field.
func (cuo *CustomerUpdateOne) SetAddressLine1(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddressLine1(s)
	return cuo
}

// SetNillableAddressLine1 sets the "address_line_1" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAddressLine1(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAddressLine1(*s)
	}
	return cuo
}

// SetAddressLine2 sets the "address_line_2" field.
func (cuo *CustomerUpdateOne) SetAddressLine2(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddressLine2(s)
	return cuo
}

// SetNillableAddressLine2 sets the "address_line_2" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAddressLine2(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAddressLine2(*s)
	}
	return cuo
}

// ClearAddressLine2 clears the value of the "address_line_2" field.
func (cuo *CustomerUpdateOne) ClearAddressLine2() *CustomerUpdateOne {
	cuo.mutation.ClearAddressLine2()
	return cuo
}

// SetCity sets the "city" field.
func (cuo *CustomerUpdateOne) SetCity(s string) *CustomerUpdateOne {
	cuo.mutation.SetCity(s)
	return cuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCity(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCity(*s)
	}
	return cuo
}

// SetStateID sets the "state_id" field.
func (cuo *CustomerUpdateOne) SetStateID(u uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.SetStateID(u)
	return cuo
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableStateID(u *uuid.UUID) *CustomerUpdateOne {
	if u != nil {
		cuo.SetStateID(*u)
	}
	return cuo
}

// SetPostalCode sets the "postal_code" field.
func (cuo *CustomerUpdateOne) SetPostalCode(s string) *CustomerUpdateOne {
	cuo.mutation.SetPostalCode(s)
	return cuo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePostalCode(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPostalCode(*s)
	}
	return cuo
}

// SetHasCustomerPortal sets the "has_customer_portal" field.
func (cuo *CustomerUpdateOne) SetHasCustomerPortal(b bool) *CustomerUpdateOne {
	cuo.mutation.SetHasCustomerPortal(b)
	return cuo
}

// SetNillableHasCustomerPortal sets the "has_customer_portal" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableHasCustomerPortal(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetHasCustomerPortal(*b)
	}
	return cuo
}

// SetAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field.
func (cuo *CustomerUpdateOne) SetAutoMarkReadyToBill(b bool) *CustomerUpdateOne {
	cuo.mutation.SetAutoMarkReadyToBill(b)
	return cuo
}

// SetNillableAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAutoMarkReadyToBill(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetAutoMarkReadyToBill(*b)
	}
	return cuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cuo *CustomerUpdateOne) SetOrganization(o *Organization) *CustomerUpdateOne {
	return cuo.SetOrganizationID(o.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (cuo *CustomerUpdateOne) SetState(u *UsState) *CustomerUpdateOne {
	return cuo.SetStateID(u.ID)
}

// AddShipmentIDs adds the "shipments" edge to the Shipment entity by IDs.
func (cuo *CustomerUpdateOne) AddShipmentIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.AddShipmentIDs(ids...)
	return cuo
}

// AddShipments adds the "shipments" edges to the Shipment entity.
func (cuo *CustomerUpdateOne) AddShipments(s ...*Shipment) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddShipmentIDs(ids...)
}

// SetEmailProfileID sets the "email_profile" edge to the CustomerEmailProfile entity by ID.
func (cuo *CustomerUpdateOne) SetEmailProfileID(id uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.SetEmailProfileID(id)
	return cuo
}

// SetNillableEmailProfileID sets the "email_profile" edge to the CustomerEmailProfile entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableEmailProfileID(id *uuid.UUID) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetEmailProfileID(*id)
	}
	return cuo
}

// SetEmailProfile sets the "email_profile" edge to the CustomerEmailProfile entity.
func (cuo *CustomerUpdateOne) SetEmailProfile(c *CustomerEmailProfile) *CustomerUpdateOne {
	return cuo.SetEmailProfileID(c.ID)
}

// SetRuleProfileID sets the "rule_profile" edge to the CustomerRuleProfile entity by ID.
func (cuo *CustomerUpdateOne) SetRuleProfileID(id uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.SetRuleProfileID(id)
	return cuo
}

// SetNillableRuleProfileID sets the "rule_profile" edge to the CustomerRuleProfile entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableRuleProfileID(id *uuid.UUID) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetRuleProfileID(*id)
	}
	return cuo
}

// SetRuleProfile sets the "rule_profile" edge to the CustomerRuleProfile entity.
func (cuo *CustomerUpdateOne) SetRuleProfile(c *CustomerRuleProfile) *CustomerUpdateOne {
	return cuo.SetRuleProfileID(c.ID)
}

// AddDetentionPolicyIDs adds the "detention_policies" edge to the CustomerDetentionPolicy entity by IDs.
func (cuo *CustomerUpdateOne) AddDetentionPolicyIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.AddDetentionPolicyIDs(ids...)
	return cuo
}

// AddDetentionPolicies adds the "detention_policies" edges to the CustomerDetentionPolicy entity.
func (cuo *CustomerUpdateOne) AddDetentionPolicies(c ...*CustomerDetentionPolicy) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddDetentionPolicyIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the CustomerContact entity by IDs.
func (cuo *CustomerUpdateOne) AddContactIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.AddContactIDs(ids...)
	return cuo
}

// AddContacts adds the "contacts" edges to the CustomerContact entity.
func (cuo *CustomerUpdateOne) AddContacts(c ...*CustomerContact) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddContactIDs(ids...)
}

// AddDeliverySlotIDs adds the "delivery_slots" edge to the DeliverySlot entity by IDs.
func (cuo *CustomerUpdateOne) AddDeliverySlotIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.AddDeliverySlotIDs(ids...)
	return cuo
}

// AddDeliverySlots adds the "delivery_slots" edges to the DeliverySlot entity.
func (cuo *CustomerUpdateOne) AddDeliverySlots(d ...*DeliverySlot) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDeliverySlotIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (cuo *CustomerUpdateOne) ClearOrganization() *CustomerUpdateOne {
	cuo.mutation.ClearOrganization()
	return cuo
}

// ClearState clears the "state" edge to the UsState entity.
func (cuo *CustomerUpdateOne) ClearState() *CustomerUpdateOne {
	cuo.mutation.ClearState()
	return cuo
}

// ClearShipments clears all "shipments" edges to the Shipment entity.
func (cuo *CustomerUpdateOne) ClearShipments() *CustomerUpdateOne {
	cuo.mutation.ClearShipments()
	return cuo
}

// RemoveShipmentIDs removes the "shipments" edge to Shipment entities by IDs.
func (cuo *CustomerUpdateOne) RemoveShipmentIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.RemoveShipmentIDs(ids...)
	return cuo
}

// RemoveShipments removes "shipments" edges to Shipment entities.
func (cuo *CustomerUpdateOne) RemoveShipments(s ...*Shipment) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveShipmentIDs(ids...)
}

// ClearEmailProfile clears the "email_profile" edge to the CustomerEmailProfile entity.
func (cuo *CustomerUpdateOne) ClearEmailProfile() *CustomerUpdateOne {
	cuo.mutation.ClearEmailProfile()
	return cuo
}

// ClearRuleProfile clears the "rule_profile" edge to the CustomerRuleProfile entity.
func (cuo *CustomerUpdateOne) ClearRuleProfile() *CustomerUpdateOne {
	cuo.mutation.ClearRuleProfile()
	return cuo
}

// ClearDetentionPolicies clears all "detention_policies" edges to the CustomerDetentionPolicy entity.
func (cuo *CustomerUpdateOne) ClearDetentionPolicies() *CustomerUpdateOne {
	cuo.mutation.ClearDetentionPolicies()
	return cuo
}

// RemoveDetentionPolicyIDs removes the "detention_policies" edge to CustomerDetentionPolicy entities by IDs.
func (cuo *CustomerUpdateOne) RemoveDetentionPolicyIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.RemoveDetentionPolicyIDs(ids...)
	return cuo
}

// RemoveDetentionPolicies removes "detention_policies" edges to CustomerDetentionPolicy entities.
func (cuo *CustomerUpdateOne) RemoveDetentionPolicies(c ...*CustomerDetentionPolicy) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveDetentionPolicyIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the CustomerContact entity.
func (cuo *CustomerUpdateOne) ClearContacts() *CustomerUpdateOne {
	cuo.mutation.ClearContacts()
	return cuo
}

// RemoveContactIDs removes the "contacts" edge to CustomerContact entities by IDs.
func (cuo *CustomerUpdateOne) RemoveContactIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.RemoveContactIDs(ids...)
	return cuo
}

// RemoveContacts removes "contacts" edges to CustomerContact entities.
func (cuo *CustomerUpdateOne) RemoveContacts(c ...*CustomerContact) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveContactIDs(ids...)
}

// ClearDeliverySlots clears all "delivery_slots" edges to the DeliverySlot entity.
func (cuo *CustomerUpdateOne) ClearDeliverySlots() *CustomerUpdateOne {
	cuo.mutation.ClearDeliverySlots()
	return cuo
}

// RemoveDeliverySlotIDs removes the "delivery_slots" edge to DeliverySlot entities by IDs.
func (cuo *CustomerUpdateOne) RemoveDeliverySlotIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.RemoveDeliverySlotIDs(ids...)
	return cuo
}

// RemoveDeliverySlots removes "delivery_slots" edges to DeliverySlot entities.
func (cuo *CustomerUpdateOne) RemoveDeliverySlots(d ...*DeliverySlot) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDeliverySlotIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if customer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized customer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.Status(); ok {
		if err := customer.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Customer.status": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Code(); ok {
		if err := customer.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Customer.code": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.AddressLine1(); ok {
		if err := customer.AddressLine1Validator(v); err != nil {
			return &ValidationError{Name: "address_line_1", err: fmt.Errorf(`ent: validator failed for field "Customer.address_line_1": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.AddressLine2(); ok {
		if err := customer.AddressLine2Validator(v); err != nil {
			return &ValidationError{Name: "address_line_2", err: fmt.Errorf(`ent: validator failed for field "Customer.address_line_2": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.City(); ok {
		if err := customer.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Customer.city": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PostalCode(); ok {
		if err := customer.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Customer.postal_code": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.BusinessUnitID(); cuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Customer.business_unit"`)
	}
	if _, ok := cuo.mutation.OrganizationID(); cuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Customer.organization"`)
	}
	if _, ok := cuo.mutation.StateID(); cuo.mutation.StateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Customer.state"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CustomerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.SetField(customer.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedVersion(); ok {
		_spec.AddField(customer.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(customer.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(customer.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AddressLine1(); ok {
		_spec.SetField(customer.FieldAddressLine1, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AddressLine2(); ok {
		_spec.SetField(customer.FieldAddressLine2, field.TypeString, value)
	}
	if cuo.mutation.AddressLine2Cleared() {
		_spec.ClearField(customer.FieldAddressLine2, field.TypeString)
	}
	if value, ok := cuo.mutation.City(); ok {
		_spec.SetField(customer.FieldCity, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PostalCode(); ok {
		_spec.SetField(customer.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.HasCustomerPortal(); ok {
		_spec.SetField(customer.FieldHasCustomerPortal, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.AutoMarkReadyToBill(); ok {
		_spec.SetField(customer.FieldAutoMarkReadyToBill, field.TypeBool, value)
	}
	if cuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.OrganizationTable,
			Columns: []string{customer.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.OrganizationTable,
			Columns: []string{customer.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.StateTable,
			Columns: []string{customer.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.StateTable,
			Columns: []string{customer.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ShipmentsTable,
			Columns: []string{customer.ShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedShipmentsIDs(); len(nodes) > 0 && !cuo.mutation.ShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ShipmentsTable,
			Columns: []string{customer.ShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ShipmentsTable,
			Columns: []string{customer.ShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EmailProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.EmailProfileTable,
			Columns: []string{customer.EmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeremailprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.EmailProfileTable,
			Columns: []string{customer.EmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeremailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RuleProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.RuleProfileTable,
			Columns: []string{customer.RuleProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RuleProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.RuleProfileTable,
			Columns: []string{customer.RuleProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DetentionPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DetentionPoliciesTable,
			Columns: []string{customer.DetentionPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDetentionPoliciesIDs(); len(nodes) > 0 && !cuo.mutation.DetentionPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DetentionPoliciesTable,
			Columns: []string{customer.DetentionPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DetentionPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DetentionPoliciesTable,
			Columns: []string{customer.DetentionPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedContactsIDs(); len(nodes) > 0 && !cuo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeliverySlotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DeliverySlotsTable,
			Columns: []string{customer.DeliverySlotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryslot.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDeliverySlotsIDs(); len(nodes) > 0 && !cuo.mutation.DeliverySlotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DeliverySlotsTable,
			Columns: []string{customer.DeliverySlotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryslot.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeliverySlotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.DeliverySlotsTable,
			Columns: []string{customer.DeliverySlotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryslot.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
