// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/accessorialcharge"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/commodity"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customerdetentionpolicy"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/revenuecode"
	"github.com/emoss08/trenova/internal/ent/shipmenttype"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// CustomerDetentionPolicyCreate is the builder for creating a CustomerDetentionPolicy entity.
type CustomerDetentionPolicyCreate struct {
	config
	mutation *CustomerDetentionPolicyMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (cdpc *CustomerDetentionPolicyCreate) SetBusinessUnitID(u uuid.UUID) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetBusinessUnitID(u)
	return cdpc
}

// SetOrganizationID sets the "organization_id" field.
func (cdpc *CustomerDetentionPolicyCreate) SetOrganizationID(u uuid.UUID) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetOrganizationID(u)
	return cdpc
}

// SetCreatedAt sets the "created_at" field.
func (cdpc *CustomerDetentionPolicyCreate) SetCreatedAt(t time.Time) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetCreatedAt(t)
	return cdpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableCreatedAt(t *time.Time) *CustomerDetentionPolicyCreate {
	if t != nil {
		cdpc.SetCreatedAt(*t)
	}
	return cdpc
}

// SetUpdatedAt sets the "updated_at" field.
func (cdpc *CustomerDetentionPolicyCreate) SetUpdatedAt(t time.Time) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetUpdatedAt(t)
	return cdpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableUpdatedAt(t *time.Time) *CustomerDetentionPolicyCreate {
	if t != nil {
		cdpc.SetUpdatedAt(*t)
	}
	return cdpc
}

// SetVersion sets the "version" field.
func (cdpc *CustomerDetentionPolicyCreate) SetVersion(i int) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetVersion(i)
	return cdpc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableVersion(i *int) *CustomerDetentionPolicyCreate {
	if i != nil {
		cdpc.SetVersion(*i)
	}
	return cdpc
}

// SetStatus sets the "status" field.
func (cdpc *CustomerDetentionPolicyCreate) SetStatus(c customerdetentionpolicy.Status) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetStatus(c)
	return cdpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableStatus(c *customerdetentionpolicy.Status) *CustomerDetentionPolicyCreate {
	if c != nil {
		cdpc.SetStatus(*c)
	}
	return cdpc
}

// SetCustomerID sets the "customer_id" field.
func (cdpc *CustomerDetentionPolicyCreate) SetCustomerID(u uuid.UUID) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetCustomerID(u)
	return cdpc
}

// SetCommodityID sets the "commodity_id" field.
func (cdpc *CustomerDetentionPolicyCreate) SetCommodityID(u uuid.UUID) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetCommodityID(u)
	return cdpc
}

// SetNillableCommodityID sets the "commodity_id" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableCommodityID(u *uuid.UUID) *CustomerDetentionPolicyCreate {
	if u != nil {
		cdpc.SetCommodityID(*u)
	}
	return cdpc
}

// SetRevenueCodeID sets the "revenue_code_id" field.
func (cdpc *CustomerDetentionPolicyCreate) SetRevenueCodeID(u uuid.UUID) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetRevenueCodeID(u)
	return cdpc
}

// SetNillableRevenueCodeID sets the "revenue_code_id" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableRevenueCodeID(u *uuid.UUID) *CustomerDetentionPolicyCreate {
	if u != nil {
		cdpc.SetRevenueCodeID(*u)
	}
	return cdpc
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (cdpc *CustomerDetentionPolicyCreate) SetShipmentTypeID(u uuid.UUID) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetShipmentTypeID(u)
	return cdpc
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableShipmentTypeID(u *uuid.UUID) *CustomerDetentionPolicyCreate {
	if u != nil {
		cdpc.SetShipmentTypeID(*u)
	}
	return cdpc
}

// SetApplicationScope sets the "application_scope" field.
func (cdpc *CustomerDetentionPolicyCreate) SetApplicationScope(cs customerdetentionpolicy.ApplicationScope) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetApplicationScope(cs)
	return cdpc
}

// SetNillableApplicationScope sets the "application_scope" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableApplicationScope(cs *customerdetentionpolicy.ApplicationScope) *CustomerDetentionPolicyCreate {
	if cs != nil {
		cdpc.SetApplicationScope(*cs)
	}
	return cdpc
}

// SetChargeFreeTime sets the "charge_free_time" field.
func (cdpc *CustomerDetentionPolicyCreate) SetChargeFreeTime(i int) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetChargeFreeTime(i)
	return cdpc
}

// SetNillableChargeFreeTime sets the "charge_free_time" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableChargeFreeTime(i *int) *CustomerDetentionPolicyCreate {
	if i != nil {
		cdpc.SetChargeFreeTime(*i)
	}
	return cdpc
}

// SetPaymentFreeTime sets the "payment_free_time" field.
func (cdpc *CustomerDetentionPolicyCreate) SetPaymentFreeTime(i int) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetPaymentFreeTime(i)
	return cdpc
}

// SetNillablePaymentFreeTime sets the "payment_free_time" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillablePaymentFreeTime(i *int) *CustomerDetentionPolicyCreate {
	if i != nil {
		cdpc.SetPaymentFreeTime(*i)
	}
	return cdpc
}

// SetLateArrivalPolicy sets the "late_arrival_policy" field.
func (cdpc *CustomerDetentionPolicyCreate) SetLateArrivalPolicy(b bool) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetLateArrivalPolicy(b)
	return cdpc
}

// SetNillableLateArrivalPolicy sets the "late_arrival_policy" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableLateArrivalPolicy(b *bool) *CustomerDetentionPolicyCreate {
	if b != nil {
		cdpc.SetLateArrivalPolicy(*b)
	}
	return cdpc
}

// SetGracePeriod sets the "grace_period" field.
func (cdpc *CustomerDetentionPolicyCreate) SetGracePeriod(i int) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetGracePeriod(i)
	return cdpc
}

// SetNillableGracePeriod sets the "grace_period" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableGracePeriod(i *int) *CustomerDetentionPolicyCreate {
	if i != nil {
		cdpc.SetGracePeriod(*i)
	}
	return cdpc
}

// SetAccessorialChargeID sets the "accessorial_charge_id" field.
func (cdpc *CustomerDetentionPolicyCreate) SetAccessorialChargeID(u uuid.UUID) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetAccessorialChargeID(u)
	return cdpc
}

// SetNillableAccessorialChargeID sets the "accessorial_charge_id" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableAccessorialChargeID(u *uuid.UUID) *CustomerDetentionPolicyCreate {
	if u != nil {
		cdpc.SetAccessorialChargeID(*u)
	}
	return cdpc
}

// SetUnits sets the "units" field.
func (cdpc *CustomerDetentionPolicyCreate) SetUnits(i int) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetUnits(i)
	return cdpc
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableUnits(i *int) *CustomerDetentionPolicyCreate {
	if i != nil {
		cdpc.SetUnits(*i)
	}
	return cdpc
}

// SetAmount sets the "amount" field.
func (cdpc *CustomerDetentionPolicyCreate) SetAmount(f float64) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetAmount(f)
	return cdpc
}

// SetNotes sets the "notes" field.
func (cdpc *CustomerDetentionPolicyCreate) SetNotes(s string) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetNotes(s)
	return cdpc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableNotes(s *string) *CustomerDetentionPolicyCreate {
	if s != nil {
		cdpc.SetNotes(*s)
	}
	return cdpc
}

// SetEffectiveDate sets the "effective_date" field.
func (cdpc *CustomerDetentionPolicyCreate) SetEffectiveDate(pg *pgtype.Date) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetEffectiveDate(pg)
	return cdpc
}

// SetExpirationDate sets the "expiration_date" field.
func (cdpc *CustomerDetentionPolicyCreate) SetExpirationDate(pg *pgtype.Date) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetExpirationDate(pg)
	return cdpc
}

// SetID sets the "id" field.
func (cdpc *CustomerDetentionPolicyCreate) SetID(u uuid.UUID) *CustomerDetentionPolicyCreate {
	cdpc.mutation.SetID(u)
	return cdpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cdpc *CustomerDetentionPolicyCreate) SetNillableID(u *uuid.UUID) *CustomerDetentionPolicyCreate {
	if u != nil {
		cdpc.SetID(*u)
	}
	return cdpc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (cdpc *CustomerDetentionPolicyCreate) SetBusinessUnit(b *BusinessUnit) *CustomerDetentionPolicyCreate {
	return cdpc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cdpc *CustomerDetentionPolicyCreate) SetOrganization(o *Organization) *CustomerDetentionPolicyCreate {
	return cdpc.SetOrganizationID(o.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cdpc *CustomerDetentionPolicyCreate) SetCustomer(c *Customer) *CustomerDetentionPolicyCreate {
	return cdpc.SetCustomerID(c.ID)
}

// SetCommodity sets the "commodity" edge to the Commodity entity.
func (cdpc *CustomerDetentionPolicyCreate) SetCommodity(c *Commodity) *CustomerDetentionPolicyCreate {
	return cdpc.SetCommodityID(c.ID)
}

// SetRevenueCode sets the "revenue_code" edge to the RevenueCode entity.
func (cdpc *CustomerDetentionPolicyCreate) SetRevenueCode(r *RevenueCode) *CustomerDetentionPolicyCreate {
	return cdpc.SetRevenueCodeID(r.ID)
}

// SetShipmentType sets the "shipment_type" edge to the ShipmentType entity.
func (cdpc *CustomerDetentionPolicyCreate) SetShipmentType(s *ShipmentType) *CustomerDetentionPolicyCreate {
	return cdpc.SetShipmentTypeID(s.ID)
}

// SetAccessorialCharge sets the "accessorial_charge" edge to the AccessorialCharge entity.
func (cdpc *CustomerDetentionPolicyCreate) SetAccessorialCharge(a *AccessorialCharge) *CustomerDetentionPolicyCreate {
	return cdpc.SetAccessorialChargeID(a.ID)
}

// Mutation returns the CustomerDetentionPolicyMutation object of the builder.
func (cdpc *CustomerDetentionPolicyCreate) Mutation() *CustomerDetentionPolicyMutation {
	return cdpc.mutation
}

// Save creates the CustomerDetentionPolicy in the database.
func (cdpc *CustomerDetentionPolicyCreate) Save(ctx context.Context) (*CustomerDetentionPolicy, error) {
	cdpc.defaults()
	return withHooks(ctx, cdpc.sqlSave, cdpc.mutation, cdpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdpc *CustomerDetentionPolicyCreate) SaveX(ctx context.Context) *CustomerDetentionPolicy {
	v, err := cdpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdpc *CustomerDetentionPolicyCreate) Exec(ctx context.Context) error {
	_, err := cdpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdpc *CustomerDetentionPolicyCreate) ExecX(ctx context.Context) {
	if err := cdpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdpc *CustomerDetentionPolicyCreate) defaults() {
	if _, ok := cdpc.mutation.CreatedAt(); !ok {
		v := customerdetentionpolicy.DefaultCreatedAt()
		cdpc.mutation.SetCreatedAt(v)
	}
	if _, ok := cdpc.mutation.UpdatedAt(); !ok {
		v := customerdetentionpolicy.DefaultUpdatedAt()
		cdpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cdpc.mutation.Version(); !ok {
		v := customerdetentionpolicy.DefaultVersion
		cdpc.mutation.SetVersion(v)
	}
	if _, ok := cdpc.mutation.Status(); !ok {
		v := customerdetentionpolicy.DefaultStatus
		cdpc.mutation.SetStatus(v)
	}
	if _, ok := cdpc.mutation.ApplicationScope(); !ok {
		v := customerdetentionpolicy.DefaultApplicationScope
		cdpc.mutation.SetApplicationScope(v)
	}
	if _, ok := cdpc.mutation.LateArrivalPolicy(); !ok {
		v := customerdetentionpolicy.DefaultLateArrivalPolicy
		cdpc.mutation.SetLateArrivalPolicy(v)
	}
	if _, ok := cdpc.mutation.ID(); !ok {
		v := customerdetentionpolicy.DefaultID()
		cdpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdpc *CustomerDetentionPolicyCreate) check() error {
	if _, ok := cdpc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "CustomerDetentionPolicy.business_unit_id"`)}
	}
	if _, ok := cdpc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "CustomerDetentionPolicy.organization_id"`)}
	}
	if _, ok := cdpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CustomerDetentionPolicy.created_at"`)}
	}
	if _, ok := cdpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CustomerDetentionPolicy.updated_at"`)}
	}
	if _, ok := cdpc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CustomerDetentionPolicy.version"`)}
	}
	if _, ok := cdpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CustomerDetentionPolicy.status"`)}
	}
	if v, ok := cdpc.mutation.Status(); ok {
		if err := customerdetentionpolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.status": %w`, err)}
		}
	}
	if _, ok := cdpc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CustomerDetentionPolicy.customer_id"`)}
	}
	if _, ok := cdpc.mutation.ApplicationScope(); !ok {
		return &ValidationError{Name: "application_scope", err: errors.New(`ent: missing required field "CustomerDetentionPolicy.application_scope"`)}
	}
	if v, ok := cdpc.mutation.ApplicationScope(); ok {
		if err := customerdetentionpolicy.ApplicationScopeValidator(v); err != nil {
			return &ValidationError{Name: "application_scope", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.application_scope": %w`, err)}
		}
	}
	if v, ok := cdpc.mutation.ChargeFreeTime(); ok {
		if err := customerdetentionpolicy.ChargeFreeTimeValidator(v); err != nil {
			return &ValidationError{Name: "charge_free_time", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.charge_free_time": %w`, err)}
		}
	}
	if v, ok := cdpc.mutation.PaymentFreeTime(); ok {
		if err := customerdetentionpolicy.PaymentFreeTimeValidator(v); err != nil {
			return &ValidationError{Name: "payment_free_time", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.payment_free_time": %w`, err)}
		}
	}
	if v, ok := cdpc.mutation.GracePeriod(); ok {
		if err := customerdetentionpolicy.GracePeriodValidator(v); err != nil {
			return &ValidationError{Name: "grace_period", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.grace_period": %w`, err)}
		}
	}
	if v, ok := cdpc.mutation.Units(); ok {
		if err := customerdetentionpolicy.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.units": %w`, err)}
		}
	}
	if _, ok := cdpc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "CustomerDetentionPolicy.amount"`)}
	}
	if _, ok := cdpc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "CustomerDetentionPolicy.business_unit"`)}
	}
	if _, ok := cdpc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "CustomerDetentionPolicy.organization"`)}
	}
	if _, ok := cdpc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "CustomerDetentionPolicy.customer"`)}
	}
	return nil
}

func (cdpc *CustomerDetentionPolicyCreate) sqlSave(ctx context.Context) (*CustomerDetentionPolicy, error) {
	if err := cdpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cdpc.mutation.id = &_node.ID
	cdpc.mutation.done = true
	return _node, nil
}

func (cdpc *CustomerDetentionPolicyCreate) createSpec() (*CustomerDetentionPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerDetentionPolicy{config: cdpc.config}
		_spec = sqlgraph.NewCreateSpec(customerdetentionpolicy.Table, sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID))
	)
	if id, ok := cdpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cdpc.mutation.CreatedAt(); ok {
		_spec.SetField(customerdetentionpolicy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cdpc.mutation.UpdatedAt(); ok {
		_spec.SetField(customerdetentionpolicy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cdpc.mutation.Version(); ok {
		_spec.SetField(customerdetentionpolicy.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := cdpc.mutation.Status(); ok {
		_spec.SetField(customerdetentionpolicy.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cdpc.mutation.ApplicationScope(); ok {
		_spec.SetField(customerdetentionpolicy.FieldApplicationScope, field.TypeEnum, value)
		_node.ApplicationScope = value
	}
	if value, ok := cdpc.mutation.ChargeFreeTime(); ok {
		_spec.SetField(customerdetentionpolicy.FieldChargeFreeTime, field.TypeInt, value)
		_node.ChargeFreeTime = value
	}
	if value, ok := cdpc.mutation.PaymentFreeTime(); ok {
		_spec.SetField(customerdetentionpolicy.FieldPaymentFreeTime, field.TypeInt, value)
		_node.PaymentFreeTime = value
	}
	if value, ok := cdpc.mutation.LateArrivalPolicy(); ok {
		_spec.SetField(customerdetentionpolicy.FieldLateArrivalPolicy, field.TypeBool, value)
		_node.LateArrivalPolicy = value
	}
	if value, ok := cdpc.mutation.GracePeriod(); ok {
		_spec.SetField(customerdetentionpolicy.FieldGracePeriod, field.TypeInt, value)
		_node.GracePeriod = value
	}
	if value, ok := cdpc.mutation.Units(); ok {
		_spec.SetField(customerdetentionpolicy.FieldUnits, field.TypeInt, value)
		_node.Units = value
	}
	if value, ok := cdpc.mutation.Amount(); ok {
		_spec.SetField(customerdetentionpolicy.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := cdpc.mutation.Notes(); ok {
		_spec.SetField(customerdetentionpolicy.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := cdpc.mutation.EffectiveDate(); ok {
		_spec.SetField(customerdetentionpolicy.FieldEffectiveDate, field.TypeOther, value)
		_node.EffectiveDate = value
	}
	if value, ok := cdpc.mutation.ExpirationDate(); ok {
		_spec.SetField(customerdetentionpolicy.FieldExpirationDate, field.TypeOther, value)
		_node.ExpirationDate = value
	}
	if nodes := cdpc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.BusinessUnitTable,
			Columns: []string{customerdetentionpolicy.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdpc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.OrganizationTable,
			Columns: []string{customerdetentionpolicy.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdpc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerdetentionpolicy.CustomerTable,
			Columns: []string{customerdetentionpolicy.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdpc.mutation.CommodityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.CommodityTable,
			Columns: []string{customerdetentionpolicy.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommodityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdpc.mutation.RevenueCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.RevenueCodeTable,
			Columns: []string{customerdetentionpolicy.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revenuecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RevenueCodeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdpc.mutation.ShipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.ShipmentTypeTable,
			Columns: []string{customerdetentionpolicy.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShipmentTypeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdpc.mutation.AccessorialChargeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.AccessorialChargeTable,
			Columns: []string{customerdetentionpolicy.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccessorialChargeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomerDetentionPolicyCreateBulk is the builder for creating many CustomerDetentionPolicy entities in bulk.
type CustomerDetentionPolicyCreateBulk struct {
	config
	err      error
	builders []*CustomerDetentionPolicyCreate
}

// Save creates the CustomerDetentionPolicy entities in the database.
func (cdpcb *CustomerDetentionPolicyCreateBulk) Save(ctx context.Context) ([]*CustomerDetentionPolicy, error) {
	if cdpcb.err != nil {
		return nil, cdpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cdpcb.builders))
	nodes := make([]*CustomerDetentionPolicy, len(cdpcb.builders))
	mutators := make([]Mutator, len(cdpcb.builders))
	for i := range cdpcb.builders {
		func(i int, root context.Context) {
			builder := cdpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerDetentionPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdpcb *CustomerDetentionPolicyCreateBulk) SaveX(ctx context.Context) []*CustomerDetentionPolicy {
	v, err := cdpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdpcb *CustomerDetentionPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := cdpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdpcb *CustomerDetentionPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := cdpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
