// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/emailcontrol"
	"github.com/emoss08/trenova/internal/ent/emailprofile"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// EmailControlCreate is the builder for creating a EmailControl entity.
type EmailControlCreate struct {
	config
	mutation *EmailControlMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ecc *EmailControlCreate) SetCreatedAt(t time.Time) *EmailControlCreate {
	ecc.mutation.SetCreatedAt(t)
	return ecc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ecc *EmailControlCreate) SetNillableCreatedAt(t *time.Time) *EmailControlCreate {
	if t != nil {
		ecc.SetCreatedAt(*t)
	}
	return ecc
}

// SetUpdatedAt sets the "updated_at" field.
func (ecc *EmailControlCreate) SetUpdatedAt(t time.Time) *EmailControlCreate {
	ecc.mutation.SetUpdatedAt(t)
	return ecc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ecc *EmailControlCreate) SetNillableUpdatedAt(t *time.Time) *EmailControlCreate {
	if t != nil {
		ecc.SetUpdatedAt(*t)
	}
	return ecc
}

// SetBillingEmailProfileID sets the "billing_email_profile_id" field.
func (ecc *EmailControlCreate) SetBillingEmailProfileID(u uuid.UUID) *EmailControlCreate {
	ecc.mutation.SetBillingEmailProfileID(u)
	return ecc
}

// SetNillableBillingEmailProfileID sets the "billing_email_profile_id" field if the given value is not nil.
func (ecc *EmailControlCreate) SetNillableBillingEmailProfileID(u *uuid.UUID) *EmailControlCreate {
	if u != nil {
		ecc.SetBillingEmailProfileID(*u)
	}
	return ecc
}

// SetRateExpirtationEmailProfileID sets the "rate_expirtation_email_profile_id" field.
func (ecc *EmailControlCreate) SetRateExpirtationEmailProfileID(u uuid.UUID) *EmailControlCreate {
	ecc.mutation.SetRateExpirtationEmailProfileID(u)
	return ecc
}

// SetNillableRateExpirtationEmailProfileID sets the "rate_expirtation_email_profile_id" field if the given value is not nil.
func (ecc *EmailControlCreate) SetNillableRateExpirtationEmailProfileID(u *uuid.UUID) *EmailControlCreate {
	if u != nil {
		ecc.SetRateExpirtationEmailProfileID(*u)
	}
	return ecc
}

// SetID sets the "id" field.
func (ecc *EmailControlCreate) SetID(u uuid.UUID) *EmailControlCreate {
	ecc.mutation.SetID(u)
	return ecc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ecc *EmailControlCreate) SetNillableID(u *uuid.UUID) *EmailControlCreate {
	if u != nil {
		ecc.SetID(*u)
	}
	return ecc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ecc *EmailControlCreate) SetOrganizationID(id uuid.UUID) *EmailControlCreate {
	ecc.mutation.SetOrganizationID(id)
	return ecc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ecc *EmailControlCreate) SetOrganization(o *Organization) *EmailControlCreate {
	return ecc.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (ecc *EmailControlCreate) SetBusinessUnitID(id uuid.UUID) *EmailControlCreate {
	ecc.mutation.SetBusinessUnitID(id)
	return ecc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (ecc *EmailControlCreate) SetBusinessUnit(b *BusinessUnit) *EmailControlCreate {
	return ecc.SetBusinessUnitID(b.ID)
}

// SetBillingEmailProfile sets the "billing_email_profile" edge to the EmailProfile entity.
func (ecc *EmailControlCreate) SetBillingEmailProfile(e *EmailProfile) *EmailControlCreate {
	return ecc.SetBillingEmailProfileID(e.ID)
}

// SetRateEmailProfileID sets the "rate_email_profile" edge to the EmailProfile entity by ID.
func (ecc *EmailControlCreate) SetRateEmailProfileID(id uuid.UUID) *EmailControlCreate {
	ecc.mutation.SetRateEmailProfileID(id)
	return ecc
}

// SetNillableRateEmailProfileID sets the "rate_email_profile" edge to the EmailProfile entity by ID if the given value is not nil.
func (ecc *EmailControlCreate) SetNillableRateEmailProfileID(id *uuid.UUID) *EmailControlCreate {
	if id != nil {
		ecc = ecc.SetRateEmailProfileID(*id)
	}
	return ecc
}

// SetRateEmailProfile sets the "rate_email_profile" edge to the EmailProfile entity.
func (ecc *EmailControlCreate) SetRateEmailProfile(e *EmailProfile) *EmailControlCreate {
	return ecc.SetRateEmailProfileID(e.ID)
}

// Mutation returns the EmailControlMutation object of the builder.
func (ecc *EmailControlCreate) Mutation() *EmailControlMutation {
	return ecc.mutation
}

// Save creates the EmailControl in the database.
func (ecc *EmailControlCreate) Save(ctx context.Context) (*EmailControl, error) {
	ecc.defaults()
	return withHooks(ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EmailControlCreate) SaveX(ctx context.Context) *EmailControl {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EmailControlCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EmailControlCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecc *EmailControlCreate) defaults() {
	if _, ok := ecc.mutation.CreatedAt(); !ok {
		v := emailcontrol.DefaultCreatedAt()
		ecc.mutation.SetCreatedAt(v)
	}
	if _, ok := ecc.mutation.UpdatedAt(); !ok {
		v := emailcontrol.DefaultUpdatedAt()
		ecc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ecc.mutation.ID(); !ok {
		v := emailcontrol.DefaultID()
		ecc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EmailControlCreate) check() error {
	if _, ok := ecc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EmailControl.created_at"`)}
	}
	if _, ok := ecc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EmailControl.updated_at"`)}
	}
	if _, ok := ecc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "EmailControl.organization"`)}
	}
	if _, ok := ecc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "EmailControl.business_unit"`)}
	}
	return nil
}

func (ecc *EmailControlCreate) sqlSave(ctx context.Context) (*EmailControl, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *EmailControlCreate) createSpec() (*EmailControl, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailControl{config: ecc.config}
		_spec = sqlgraph.NewCreateSpec(emailcontrol.Table, sqlgraph.NewFieldSpec(emailcontrol.FieldID, field.TypeUUID))
	)
	if id, ok := ecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ecc.mutation.CreatedAt(); ok {
		_spec.SetField(emailcontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ecc.mutation.UpdatedAt(); ok {
		_spec.SetField(emailcontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ecc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailcontrol.OrganizationTable,
			Columns: []string{emailcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ecc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BusinessUnitTable,
			Columns: []string{emailcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_unit_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ecc.mutation.BillingEmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BillingEmailProfileTable,
			Columns: []string{emailcontrol.BillingEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BillingEmailProfileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ecc.mutation.RateEmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.RateEmailProfileTable,
			Columns: []string{emailcontrol.RateEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RateExpirtationEmailProfileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmailControlCreateBulk is the builder for creating many EmailControl entities in bulk.
type EmailControlCreateBulk struct {
	config
	err      error
	builders []*EmailControlCreate
}

// Save creates the EmailControl entities in the database.
func (eccb *EmailControlCreateBulk) Save(ctx context.Context) ([]*EmailControl, error) {
	if eccb.err != nil {
		return nil, eccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EmailControl, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EmailControlCreateBulk) SaveX(ctx context.Context) []*EmailControl {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EmailControlCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EmailControlCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}
