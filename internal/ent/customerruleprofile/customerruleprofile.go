// Code generated by entc, DO NOT EDIT.

package customerruleprofile

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the customerruleprofile type in the database.
	Label = "customer_rule_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldBillingCycle holds the string denoting the billing_cycle field in the database.
	FieldBillingCycle = "billing_cycle"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeDocumentClassifications holds the string denoting the document_classifications edge name in mutations.
	EdgeDocumentClassifications = "document_classifications"
	// Table holds the table name of the customerruleprofile in the database.
	Table = "customer_rule_profiles"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "customer_rule_profiles"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "customer_rule_profiles"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "customer_rule_profiles"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// DocumentClassificationsTable is the table that holds the document_classifications relation/edge. The primary key declared below.
	DocumentClassificationsTable = "customer_rule_profile_document_classifications"
	// DocumentClassificationsInverseTable is the table name for the DocumentClassification entity.
	// It exists in this package in order to avoid circular dependency with the "documentclassification" package.
	DocumentClassificationsInverseTable = "document_classifications"
)

// Columns holds all SQL columns for customerruleprofile fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVersion,
	FieldCustomerID,
	FieldBillingCycle,
}

var (
	// DocumentClassificationsPrimaryKey and DocumentClassificationsColumn2 are the table columns denoting the
	// primary key for the document_classifications relation (M2M).
	DocumentClassificationsPrimaryKey = []string{"customer_rule_profile_id", "document_classification_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// BillingCycle defines the type for the "billing_cycle" enum field.
type BillingCycle string

// BillingCyclePER_SHIPMENT is the default value of the BillingCycle enum.
const DefaultBillingCycle = BillingCyclePER_SHIPMENT

// BillingCycle values.
const (
	BillingCyclePER_SHIPMENT BillingCycle = "PER_SHIPMENT"
	BillingCycleQUARTERLY    BillingCycle = "QUARTERLY"
	BillingCycleMONTHLY      BillingCycle = "MONTHLY"
	BillingCycleANNUALLY     BillingCycle = "ANNUALLY"
)

func (bc BillingCycle) String() string {
	return string(bc)
}

// BillingCycleValidator is a validator for the "billing_cycle" field enum values. It is called by the builders before save.
func BillingCycleValidator(bc BillingCycle) error {
	switch bc {
	case BillingCyclePER_SHIPMENT, BillingCycleQUARTERLY, BillingCycleMONTHLY, BillingCycleANNUALLY:
		return nil
	default:
		return fmt.Errorf("customerruleprofile: invalid enum value for billing_cycle field: %q", bc)
	}
}

// OrderOption defines the ordering options for the CustomerRuleProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByBillingCycle orders the results by the billing_cycle field.
func ByBillingCycle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingCycle, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByDocumentClassificationsCount orders the results by document_classifications count.
func ByDocumentClassificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentClassificationsStep(), opts...)
	}
}

// ByDocumentClassifications orders the results by document_classifications terms.
func ByDocumentClassifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentClassificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CustomerTable, CustomerColumn),
	)
}
func newDocumentClassificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentClassificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DocumentClassificationsTable, DocumentClassificationsPrimaryKey...),
	)
}
