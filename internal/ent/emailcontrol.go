// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/emailcontrol"
	"github.com/emoss08/trenova/internal/ent/emailprofile"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// EmailControl is the model entity for the EmailControl schema.
type EmailControl struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// BillingEmailProfileID holds the value of the "billing_email_profile_id" field.
	BillingEmailProfileID *uuid.UUID `json:"billingEmailProfileId" validate:"omitempty"`
	// RateExpirtationEmailProfileID holds the value of the "rate_expirtation_email_profile_id" field.
	RateExpirtationEmailProfileID *uuid.UUID `json:"rateExpirtationEmailProfileId" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailControlQuery when eager-loading is set.
	Edges            EmailControlEdges `json:"edges"`
	business_unit_id *uuid.UUID
	organization_id  *uuid.UUID
	selectValues     sql.SelectValues
}

// EmailControlEdges holds the relations/edges for other nodes in the graph.
type EmailControlEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// BillingEmailProfile holds the value of the billing_email_profile edge.
	BillingEmailProfile *EmailProfile `json:"billing_email_profile,omitempty"`
	// RateEmailProfile holds the value of the rate_email_profile edge.
	RateEmailProfile *EmailProfile `json:"rate_email_profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailControlEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailControlEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// BillingEmailProfileOrErr returns the BillingEmailProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailControlEdges) BillingEmailProfileOrErr() (*EmailProfile, error) {
	if e.BillingEmailProfile != nil {
		return e.BillingEmailProfile, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: emailprofile.Label}
	}
	return nil, &NotLoadedError{edge: "billing_email_profile"}
}

// RateEmailProfileOrErr returns the RateEmailProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailControlEdges) RateEmailProfileOrErr() (*EmailProfile, error) {
	if e.RateEmailProfile != nil {
		return e.RateEmailProfile, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: emailprofile.Label}
	}
	return nil, &NotLoadedError{edge: "rate_email_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailControl) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailcontrol.FieldBillingEmailProfileID, emailcontrol.FieldRateExpirtationEmailProfileID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case emailcontrol.FieldCreatedAt, emailcontrol.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case emailcontrol.FieldID:
			values[i] = new(uuid.UUID)
		case emailcontrol.ForeignKeys[0]: // business_unit_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case emailcontrol.ForeignKeys[1]: // organization_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailControl fields.
func (ec *EmailControl) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailcontrol.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ec.ID = *value
			}
		case emailcontrol.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ec.CreatedAt = value.Time
			}
		case emailcontrol.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ec.UpdatedAt = value.Time
			}
		case emailcontrol.FieldBillingEmailProfileID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field billing_email_profile_id", values[i])
			} else if value.Valid {
				ec.BillingEmailProfileID = new(uuid.UUID)
				*ec.BillingEmailProfileID = *value.S.(*uuid.UUID)
			}
		case emailcontrol.FieldRateExpirtationEmailProfileID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field rate_expirtation_email_profile_id", values[i])
			} else if value.Valid {
				ec.RateExpirtationEmailProfileID = new(uuid.UUID)
				*ec.RateExpirtationEmailProfileID = *value.S.(*uuid.UUID)
			}
		case emailcontrol.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value.Valid {
				ec.business_unit_id = new(uuid.UUID)
				*ec.business_unit_id = *value.S.(*uuid.UUID)
			}
		case emailcontrol.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				ec.organization_id = new(uuid.UUID)
				*ec.organization_id = *value.S.(*uuid.UUID)
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailControl.
// This includes values selected through modifiers, order, etc.
func (ec *EmailControl) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the EmailControl entity.
func (ec *EmailControl) QueryOrganization() *OrganizationQuery {
	return NewEmailControlClient(ec.config).QueryOrganization(ec)
}

// QueryBusinessUnit queries the "business_unit" edge of the EmailControl entity.
func (ec *EmailControl) QueryBusinessUnit() *BusinessUnitQuery {
	return NewEmailControlClient(ec.config).QueryBusinessUnit(ec)
}

// QueryBillingEmailProfile queries the "billing_email_profile" edge of the EmailControl entity.
func (ec *EmailControl) QueryBillingEmailProfile() *EmailProfileQuery {
	return NewEmailControlClient(ec.config).QueryBillingEmailProfile(ec)
}

// QueryRateEmailProfile queries the "rate_email_profile" edge of the EmailControl entity.
func (ec *EmailControl) QueryRateEmailProfile() *EmailProfileQuery {
	return NewEmailControlClient(ec.config).QueryRateEmailProfile(ec)
}

// Update returns a builder for updating this EmailControl.
// Note that you need to call EmailControl.Unwrap() before calling this method if this EmailControl
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EmailControl) Update() *EmailControlUpdateOne {
	return NewEmailControlClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the EmailControl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EmailControl) Unwrap() *EmailControl {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailControl is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EmailControl) String() string {
	var builder strings.Builder
	builder.WriteString("EmailControl(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ec.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ec.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ec.BillingEmailProfileID; v != nil {
		builder.WriteString("billing_email_profile_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ec.RateExpirtationEmailProfileID; v != nil {
		builder.WriteString("rate_expirtation_email_profile_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// EmailControls is a parsable slice of EmailControl.
type EmailControls []*EmailControl
