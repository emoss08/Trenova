// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/qualifiercode"
	"github.com/google/uuid"
)

// QualifierCodeUpdate is the builder for updating QualifierCode entities.
type QualifierCodeUpdate struct {
	config
	hooks     []Hook
	mutation  *QualifierCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the QualifierCodeUpdate builder.
func (qcu *QualifierCodeUpdate) Where(ps ...predicate.QualifierCode) *QualifierCodeUpdate {
	qcu.mutation.Where(ps...)
	return qcu
}

// SetOrganizationID sets the "organization_id" field.
func (qcu *QualifierCodeUpdate) SetOrganizationID(u uuid.UUID) *QualifierCodeUpdate {
	qcu.mutation.SetOrganizationID(u)
	return qcu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (qcu *QualifierCodeUpdate) SetNillableOrganizationID(u *uuid.UUID) *QualifierCodeUpdate {
	if u != nil {
		qcu.SetOrganizationID(*u)
	}
	return qcu
}

// SetUpdatedAt sets the "updated_at" field.
func (qcu *QualifierCodeUpdate) SetUpdatedAt(t time.Time) *QualifierCodeUpdate {
	qcu.mutation.SetUpdatedAt(t)
	return qcu
}

// SetVersion sets the "version" field.
func (qcu *QualifierCodeUpdate) SetVersion(i int) *QualifierCodeUpdate {
	qcu.mutation.ResetVersion()
	qcu.mutation.SetVersion(i)
	return qcu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (qcu *QualifierCodeUpdate) SetNillableVersion(i *int) *QualifierCodeUpdate {
	if i != nil {
		qcu.SetVersion(*i)
	}
	return qcu
}

// AddVersion adds i to the "version" field.
func (qcu *QualifierCodeUpdate) AddVersion(i int) *QualifierCodeUpdate {
	qcu.mutation.AddVersion(i)
	return qcu
}

// SetStatus sets the "status" field.
func (qcu *QualifierCodeUpdate) SetStatus(q qualifiercode.Status) *QualifierCodeUpdate {
	qcu.mutation.SetStatus(q)
	return qcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (qcu *QualifierCodeUpdate) SetNillableStatus(q *qualifiercode.Status) *QualifierCodeUpdate {
	if q != nil {
		qcu.SetStatus(*q)
	}
	return qcu
}

// SetCode sets the "code" field.
func (qcu *QualifierCodeUpdate) SetCode(s string) *QualifierCodeUpdate {
	qcu.mutation.SetCode(s)
	return qcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (qcu *QualifierCodeUpdate) SetNillableCode(s *string) *QualifierCodeUpdate {
	if s != nil {
		qcu.SetCode(*s)
	}
	return qcu
}

// SetDescription sets the "description" field.
func (qcu *QualifierCodeUpdate) SetDescription(s string) *QualifierCodeUpdate {
	qcu.mutation.SetDescription(s)
	return qcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcu *QualifierCodeUpdate) SetNillableDescription(s *string) *QualifierCodeUpdate {
	if s != nil {
		qcu.SetDescription(*s)
	}
	return qcu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (qcu *QualifierCodeUpdate) SetOrganization(o *Organization) *QualifierCodeUpdate {
	return qcu.SetOrganizationID(o.ID)
}

// Mutation returns the QualifierCodeMutation object of the builder.
func (qcu *QualifierCodeUpdate) Mutation() *QualifierCodeMutation {
	return qcu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (qcu *QualifierCodeUpdate) ClearOrganization() *QualifierCodeUpdate {
	qcu.mutation.ClearOrganization()
	return qcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qcu *QualifierCodeUpdate) Save(ctx context.Context) (int, error) {
	qcu.defaults()
	return withHooks(ctx, qcu.sqlSave, qcu.mutation, qcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcu *QualifierCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := qcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qcu *QualifierCodeUpdate) Exec(ctx context.Context) error {
	_, err := qcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcu *QualifierCodeUpdate) ExecX(ctx context.Context) {
	if err := qcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcu *QualifierCodeUpdate) defaults() {
	if _, ok := qcu.mutation.UpdatedAt(); !ok {
		v := qualifiercode.UpdateDefaultUpdatedAt()
		qcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcu *QualifierCodeUpdate) check() error {
	if v, ok := qcu.mutation.Status(); ok {
		if err := qualifiercode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "QualifierCode.status": %w`, err)}
		}
	}
	if v, ok := qcu.mutation.Code(); ok {
		if err := qualifiercode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "QualifierCode.code": %w`, err)}
		}
	}
	if v, ok := qcu.mutation.Description(); ok {
		if err := qualifiercode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "QualifierCode.description": %w`, err)}
		}
	}
	if _, ok := qcu.mutation.BusinessUnitID(); qcu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QualifierCode.business_unit"`)
	}
	if _, ok := qcu.mutation.OrganizationID(); qcu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QualifierCode.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (qcu *QualifierCodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QualifierCodeUpdate {
	qcu.modifiers = append(qcu.modifiers, modifiers...)
	return qcu
}

func (qcu *QualifierCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(qualifiercode.Table, qualifiercode.Columns, sqlgraph.NewFieldSpec(qualifiercode.FieldID, field.TypeUUID))
	if ps := qcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcu.mutation.UpdatedAt(); ok {
		_spec.SetField(qualifiercode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qcu.mutation.Version(); ok {
		_spec.SetField(qualifiercode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := qcu.mutation.AddedVersion(); ok {
		_spec.AddField(qualifiercode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := qcu.mutation.Status(); ok {
		_spec.SetField(qualifiercode.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := qcu.mutation.Code(); ok {
		_spec.SetField(qualifiercode.FieldCode, field.TypeString, value)
	}
	if value, ok := qcu.mutation.Description(); ok {
		_spec.SetField(qualifiercode.FieldDescription, field.TypeString, value)
	}
	if qcu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   qualifiercode.OrganizationTable,
			Columns: []string{qualifiercode.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   qualifiercode.OrganizationTable,
			Columns: []string{qualifiercode.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(qcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, qcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qualifiercode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qcu.mutation.done = true
	return n, nil
}

// QualifierCodeUpdateOne is the builder for updating a single QualifierCode entity.
type QualifierCodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *QualifierCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (qcuo *QualifierCodeUpdateOne) SetOrganizationID(u uuid.UUID) *QualifierCodeUpdateOne {
	qcuo.mutation.SetOrganizationID(u)
	return qcuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (qcuo *QualifierCodeUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *QualifierCodeUpdateOne {
	if u != nil {
		qcuo.SetOrganizationID(*u)
	}
	return qcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (qcuo *QualifierCodeUpdateOne) SetUpdatedAt(t time.Time) *QualifierCodeUpdateOne {
	qcuo.mutation.SetUpdatedAt(t)
	return qcuo
}

// SetVersion sets the "version" field.
func (qcuo *QualifierCodeUpdateOne) SetVersion(i int) *QualifierCodeUpdateOne {
	qcuo.mutation.ResetVersion()
	qcuo.mutation.SetVersion(i)
	return qcuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (qcuo *QualifierCodeUpdateOne) SetNillableVersion(i *int) *QualifierCodeUpdateOne {
	if i != nil {
		qcuo.SetVersion(*i)
	}
	return qcuo
}

// AddVersion adds i to the "version" field.
func (qcuo *QualifierCodeUpdateOne) AddVersion(i int) *QualifierCodeUpdateOne {
	qcuo.mutation.AddVersion(i)
	return qcuo
}

// SetStatus sets the "status" field.
func (qcuo *QualifierCodeUpdateOne) SetStatus(q qualifiercode.Status) *QualifierCodeUpdateOne {
	qcuo.mutation.SetStatus(q)
	return qcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (qcuo *QualifierCodeUpdateOne) SetNillableStatus(q *qualifiercode.Status) *QualifierCodeUpdateOne {
	if q != nil {
		qcuo.SetStatus(*q)
	}
	return qcuo
}

// SetCode sets the "code" field.
func (qcuo *QualifierCodeUpdateOne) SetCode(s string) *QualifierCodeUpdateOne {
	qcuo.mutation.SetCode(s)
	return qcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (qcuo *QualifierCodeUpdateOne) SetNillableCode(s *string) *QualifierCodeUpdateOne {
	if s != nil {
		qcuo.SetCode(*s)
	}
	return qcuo
}

// SetDescription sets the "description" field.
func (qcuo *QualifierCodeUpdateOne) SetDescription(s string) *QualifierCodeUpdateOne {
	qcuo.mutation.SetDescription(s)
	return qcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcuo *QualifierCodeUpdateOne) SetNillableDescription(s *string) *QualifierCodeUpdateOne {
	if s != nil {
		qcuo.SetDescription(*s)
	}
	return qcuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (qcuo *QualifierCodeUpdateOne) SetOrganization(o *Organization) *QualifierCodeUpdateOne {
	return qcuo.SetOrganizationID(o.ID)
}

// Mutation returns the QualifierCodeMutation object of the builder.
func (qcuo *QualifierCodeUpdateOne) Mutation() *QualifierCodeMutation {
	return qcuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (qcuo *QualifierCodeUpdateOne) ClearOrganization() *QualifierCodeUpdateOne {
	qcuo.mutation.ClearOrganization()
	return qcuo
}

// Where appends a list predicates to the QualifierCodeUpdate builder.
func (qcuo *QualifierCodeUpdateOne) Where(ps ...predicate.QualifierCode) *QualifierCodeUpdateOne {
	qcuo.mutation.Where(ps...)
	return qcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qcuo *QualifierCodeUpdateOne) Select(field string, fields ...string) *QualifierCodeUpdateOne {
	qcuo.fields = append([]string{field}, fields...)
	return qcuo
}

// Save executes the query and returns the updated QualifierCode entity.
func (qcuo *QualifierCodeUpdateOne) Save(ctx context.Context) (*QualifierCode, error) {
	qcuo.defaults()
	return withHooks(ctx, qcuo.sqlSave, qcuo.mutation, qcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcuo *QualifierCodeUpdateOne) SaveX(ctx context.Context) *QualifierCode {
	node, err := qcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qcuo *QualifierCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := qcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcuo *QualifierCodeUpdateOne) ExecX(ctx context.Context) {
	if err := qcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcuo *QualifierCodeUpdateOne) defaults() {
	if _, ok := qcuo.mutation.UpdatedAt(); !ok {
		v := qualifiercode.UpdateDefaultUpdatedAt()
		qcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcuo *QualifierCodeUpdateOne) check() error {
	if v, ok := qcuo.mutation.Status(); ok {
		if err := qualifiercode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "QualifierCode.status": %w`, err)}
		}
	}
	if v, ok := qcuo.mutation.Code(); ok {
		if err := qualifiercode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "QualifierCode.code": %w`, err)}
		}
	}
	if v, ok := qcuo.mutation.Description(); ok {
		if err := qualifiercode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "QualifierCode.description": %w`, err)}
		}
	}
	if _, ok := qcuo.mutation.BusinessUnitID(); qcuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QualifierCode.business_unit"`)
	}
	if _, ok := qcuo.mutation.OrganizationID(); qcuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QualifierCode.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (qcuo *QualifierCodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QualifierCodeUpdateOne {
	qcuo.modifiers = append(qcuo.modifiers, modifiers...)
	return qcuo
}

func (qcuo *QualifierCodeUpdateOne) sqlSave(ctx context.Context) (_node *QualifierCode, err error) {
	if err := qcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(qualifiercode.Table, qualifiercode.Columns, sqlgraph.NewFieldSpec(qualifiercode.FieldID, field.TypeUUID))
	id, ok := qcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QualifierCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, qualifiercode.FieldID)
		for _, f := range fields {
			if !qualifiercode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != qualifiercode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(qualifiercode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qcuo.mutation.Version(); ok {
		_spec.SetField(qualifiercode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := qcuo.mutation.AddedVersion(); ok {
		_spec.AddField(qualifiercode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := qcuo.mutation.Status(); ok {
		_spec.SetField(qualifiercode.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := qcuo.mutation.Code(); ok {
		_spec.SetField(qualifiercode.FieldCode, field.TypeString, value)
	}
	if value, ok := qcuo.mutation.Description(); ok {
		_spec.SetField(qualifiercode.FieldDescription, field.TypeString, value)
	}
	if qcuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   qualifiercode.OrganizationTable,
			Columns: []string{qualifiercode.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   qualifiercode.OrganizationTable,
			Columns: []string{qualifiercode.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(qcuo.modifiers...)
	_node = &QualifierCode{config: qcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qualifiercode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qcuo.mutation.done = true
	return _node, nil
}
