// Code generated by entc, DO NOT EDIT.

package workercontact

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldVersion, v))
}

// WorkerID applies equality check predicate on the "worker_id" field. It's identical to WorkerIDEQ.
func WorkerID(v uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldWorkerID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldPhone, v))
}

// Relationship applies equality check predicate on the "relationship" field. It's identical to RelationshipEQ.
func Relationship(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldRelationship, v))
}

// IsPrimary applies equality check predicate on the "is_primary" field. It's identical to IsPrimaryEQ.
func IsPrimary(v bool) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldIsPrimary, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLTE(FieldVersion, v))
}

// WorkerIDEQ applies the EQ predicate on the "worker_id" field.
func WorkerIDEQ(v uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldWorkerID, v))
}

// WorkerIDNEQ applies the NEQ predicate on the "worker_id" field.
func WorkerIDNEQ(v uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldWorkerID, v))
}

// WorkerIDIn applies the In predicate on the "worker_id" field.
func WorkerIDIn(vs ...uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldWorkerID, vs...))
}

// WorkerIDNotIn applies the NotIn predicate on the "worker_id" field.
func WorkerIDNotIn(vs ...uuid.UUID) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldWorkerID, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldContainsFold(FieldPhone, v))
}

// RelationshipEQ applies the EQ predicate on the "relationship" field.
func RelationshipEQ(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldRelationship, v))
}

// RelationshipNEQ applies the NEQ predicate on the "relationship" field.
func RelationshipNEQ(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldRelationship, v))
}

// RelationshipIn applies the In predicate on the "relationship" field.
func RelationshipIn(vs ...string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIn(FieldRelationship, vs...))
}

// RelationshipNotIn applies the NotIn predicate on the "relationship" field.
func RelationshipNotIn(vs ...string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotIn(FieldRelationship, vs...))
}

// RelationshipGT applies the GT predicate on the "relationship" field.
func RelationshipGT(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGT(FieldRelationship, v))
}

// RelationshipGTE applies the GTE predicate on the "relationship" field.
func RelationshipGTE(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldGTE(FieldRelationship, v))
}

// RelationshipLT applies the LT predicate on the "relationship" field.
func RelationshipLT(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLT(FieldRelationship, v))
}

// RelationshipLTE applies the LTE predicate on the "relationship" field.
func RelationshipLTE(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldLTE(FieldRelationship, v))
}

// RelationshipContains applies the Contains predicate on the "relationship" field.
func RelationshipContains(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldContains(FieldRelationship, v))
}

// RelationshipHasPrefix applies the HasPrefix predicate on the "relationship" field.
func RelationshipHasPrefix(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldHasPrefix(FieldRelationship, v))
}

// RelationshipHasSuffix applies the HasSuffix predicate on the "relationship" field.
func RelationshipHasSuffix(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldHasSuffix(FieldRelationship, v))
}

// RelationshipIsNil applies the IsNil predicate on the "relationship" field.
func RelationshipIsNil() predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldIsNull(FieldRelationship))
}

// RelationshipNotNil applies the NotNil predicate on the "relationship" field.
func RelationshipNotNil() predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNotNull(FieldRelationship))
}

// RelationshipEqualFold applies the EqualFold predicate on the "relationship" field.
func RelationshipEqualFold(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEqualFold(FieldRelationship, v))
}

// RelationshipContainsFold applies the ContainsFold predicate on the "relationship" field.
func RelationshipContainsFold(v string) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldContainsFold(FieldRelationship, v))
}

// IsPrimaryEQ applies the EQ predicate on the "is_primary" field.
func IsPrimaryEQ(v bool) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldEQ(FieldIsPrimary, v))
}

// IsPrimaryNEQ applies the NEQ predicate on the "is_primary" field.
func IsPrimaryNEQ(v bool) predicate.WorkerContact {
	return predicate.WorkerContact(sql.FieldNEQ(FieldIsPrimary, v))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.WorkerContact {
	return predicate.WorkerContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.WorkerContact {
	return predicate.WorkerContact(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.WorkerContact {
	return predicate.WorkerContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.WorkerContact {
	return predicate.WorkerContact(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorker applies the HasEdge predicate on the "worker" edge.
func HasWorker() predicate.WorkerContact {
	return predicate.WorkerContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkerTable, WorkerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkerWith applies the HasEdge predicate on the "worker" edge with a given conditions (other predicates).
func HasWorkerWith(preds ...predicate.Worker) predicate.WorkerContact {
	return predicate.WorkerContact(func(s *sql.Selector) {
		step := newWorkerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkerContact) predicate.WorkerContact {
	return predicate.WorkerContact(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkerContact) predicate.WorkerContact {
	return predicate.WorkerContact(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkerContact) predicate.WorkerContact {
	return predicate.WorkerContact(sql.NotPredicates(p))
}
