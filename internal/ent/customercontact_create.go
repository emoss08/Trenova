// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customercontact"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// CustomerContactCreate is the builder for creating a CustomerContact entity.
type CustomerContactCreate struct {
	config
	mutation *CustomerContactMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (ccc *CustomerContactCreate) SetBusinessUnitID(u uuid.UUID) *CustomerContactCreate {
	ccc.mutation.SetBusinessUnitID(u)
	return ccc
}

// SetOrganizationID sets the "organization_id" field.
func (ccc *CustomerContactCreate) SetOrganizationID(u uuid.UUID) *CustomerContactCreate {
	ccc.mutation.SetOrganizationID(u)
	return ccc
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CustomerContactCreate) SetCreatedAt(t time.Time) *CustomerContactCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CustomerContactCreate) SetNillableCreatedAt(t *time.Time) *CustomerContactCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CustomerContactCreate) SetUpdatedAt(t time.Time) *CustomerContactCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CustomerContactCreate) SetNillableUpdatedAt(t *time.Time) *CustomerContactCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetVersion sets the "version" field.
func (ccc *CustomerContactCreate) SetVersion(i int) *CustomerContactCreate {
	ccc.mutation.SetVersion(i)
	return ccc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ccc *CustomerContactCreate) SetNillableVersion(i *int) *CustomerContactCreate {
	if i != nil {
		ccc.SetVersion(*i)
	}
	return ccc
}

// SetCustomerID sets the "customer_id" field.
func (ccc *CustomerContactCreate) SetCustomerID(u uuid.UUID) *CustomerContactCreate {
	ccc.mutation.SetCustomerID(u)
	return ccc
}

// SetName sets the "name" field.
func (ccc *CustomerContactCreate) SetName(s string) *CustomerContactCreate {
	ccc.mutation.SetName(s)
	return ccc
}

// SetEmail sets the "email" field.
func (ccc *CustomerContactCreate) SetEmail(s string) *CustomerContactCreate {
	ccc.mutation.SetEmail(s)
	return ccc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ccc *CustomerContactCreate) SetNillableEmail(s *string) *CustomerContactCreate {
	if s != nil {
		ccc.SetEmail(*s)
	}
	return ccc
}

// SetTitle sets the "title" field.
func (ccc *CustomerContactCreate) SetTitle(s string) *CustomerContactCreate {
	ccc.mutation.SetTitle(s)
	return ccc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ccc *CustomerContactCreate) SetNillableTitle(s *string) *CustomerContactCreate {
	if s != nil {
		ccc.SetTitle(*s)
	}
	return ccc
}

// SetPhoneNumber sets the "phone_number" field.
func (ccc *CustomerContactCreate) SetPhoneNumber(s string) *CustomerContactCreate {
	ccc.mutation.SetPhoneNumber(s)
	return ccc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (ccc *CustomerContactCreate) SetNillablePhoneNumber(s *string) *CustomerContactCreate {
	if s != nil {
		ccc.SetPhoneNumber(*s)
	}
	return ccc
}

// SetIsPayableContact sets the "is_payable_contact" field.
func (ccc *CustomerContactCreate) SetIsPayableContact(b bool) *CustomerContactCreate {
	ccc.mutation.SetIsPayableContact(b)
	return ccc
}

// SetNillableIsPayableContact sets the "is_payable_contact" field if the given value is not nil.
func (ccc *CustomerContactCreate) SetNillableIsPayableContact(b *bool) *CustomerContactCreate {
	if b != nil {
		ccc.SetIsPayableContact(*b)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CustomerContactCreate) SetID(u uuid.UUID) *CustomerContactCreate {
	ccc.mutation.SetID(u)
	return ccc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ccc *CustomerContactCreate) SetNillableID(u *uuid.UUID) *CustomerContactCreate {
	if u != nil {
		ccc.SetID(*u)
	}
	return ccc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (ccc *CustomerContactCreate) SetBusinessUnit(b *BusinessUnit) *CustomerContactCreate {
	return ccc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ccc *CustomerContactCreate) SetOrganization(o *Organization) *CustomerContactCreate {
	return ccc.SetOrganizationID(o.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ccc *CustomerContactCreate) SetCustomer(c *Customer) *CustomerContactCreate {
	return ccc.SetCustomerID(c.ID)
}

// Mutation returns the CustomerContactMutation object of the builder.
func (ccc *CustomerContactCreate) Mutation() *CustomerContactMutation {
	return ccc.mutation
}

// Save creates the CustomerContact in the database.
func (ccc *CustomerContactCreate) Save(ctx context.Context) (*CustomerContact, error) {
	if err := ccc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CustomerContactCreate) SaveX(ctx context.Context) *CustomerContact {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CustomerContactCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CustomerContactCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CustomerContactCreate) defaults() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		if customercontact.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized customercontact.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := customercontact.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		if customercontact.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized customercontact.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := customercontact.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ccc.mutation.Version(); !ok {
		v := customercontact.DefaultVersion
		ccc.mutation.SetVersion(v)
	}
	if _, ok := ccc.mutation.IsPayableContact(); !ok {
		v := customercontact.DefaultIsPayableContact
		ccc.mutation.SetIsPayableContact(v)
	}
	if _, ok := ccc.mutation.ID(); !ok {
		if customercontact.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized customercontact.DefaultID (forgotten import ent/runtime?)")
		}
		v := customercontact.DefaultID()
		ccc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CustomerContactCreate) check() error {
	if _, ok := ccc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "CustomerContact.business_unit_id"`)}
	}
	if _, ok := ccc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "CustomerContact.organization_id"`)}
	}
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CustomerContact.created_at"`)}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CustomerContact.updated_at"`)}
	}
	if _, ok := ccc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CustomerContact.version"`)}
	}
	if _, ok := ccc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CustomerContact.customer_id"`)}
	}
	if _, ok := ccc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CustomerContact.name"`)}
	}
	if v, ok := ccc.mutation.Name(); ok {
		if err := customercontact.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CustomerContact.name": %w`, err)}
		}
	}
	if v, ok := ccc.mutation.Email(); ok {
		if err := customercontact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "CustomerContact.email": %w`, err)}
		}
	}
	if v, ok := ccc.mutation.Title(); ok {
		if err := customercontact.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CustomerContact.title": %w`, err)}
		}
	}
	if v, ok := ccc.mutation.PhoneNumber(); ok {
		if err := customercontact.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "CustomerContact.phone_number": %w`, err)}
		}
	}
	if _, ok := ccc.mutation.IsPayableContact(); !ok {
		return &ValidationError{Name: "is_payable_contact", err: errors.New(`ent: missing required field "CustomerContact.is_payable_contact"`)}
	}
	if _, ok := ccc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "CustomerContact.business_unit"`)}
	}
	if _, ok := ccc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "CustomerContact.organization"`)}
	}
	if _, ok := ccc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "CustomerContact.customer"`)}
	}
	return nil
}

func (ccc *CustomerContactCreate) sqlSave(ctx context.Context) (*CustomerContact, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CustomerContactCreate) createSpec() (*CustomerContact, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerContact{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(customercontact.Table, sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeUUID))
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.SetField(customercontact.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.SetField(customercontact.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.Version(); ok {
		_spec.SetField(customercontact.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := ccc.mutation.Name(); ok {
		_spec.SetField(customercontact.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ccc.mutation.Email(); ok {
		_spec.SetField(customercontact.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ccc.mutation.Title(); ok {
		_spec.SetField(customercontact.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ccc.mutation.PhoneNumber(); ok {
		_spec.SetField(customercontact.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := ccc.mutation.IsPayableContact(); ok {
		_spec.SetField(customercontact.FieldIsPayableContact, field.TypeBool, value)
		_node.IsPayableContact = value
	}
	if nodes := ccc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customercontact.BusinessUnitTable,
			Columns: []string{customercontact.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customercontact.OrganizationTable,
			Columns: []string{customercontact.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontact.CustomerTable,
			Columns: []string{customercontact.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomerContactCreateBulk is the builder for creating many CustomerContact entities in bulk.
type CustomerContactCreateBulk struct {
	config
	err      error
	builders []*CustomerContactCreate
}

// Save creates the CustomerContact entities in the database.
func (cccb *CustomerContactCreateBulk) Save(ctx context.Context) ([]*CustomerContact, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CustomerContact, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CustomerContactCreateBulk) SaveX(ctx context.Context) []*CustomerContact {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CustomerContactCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CustomerContactCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
