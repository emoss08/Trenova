// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/commenttype"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/user"
	"github.com/emoss08/trenova/internal/ent/worker"
	"github.com/emoss08/trenova/internal/ent/workercomment"
	"github.com/google/uuid"
)

// WorkerComment is the model entity for the WorkerComment schema.
type WorkerComment struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// WorkerID holds the value of the "worker_id" field.
	WorkerID uuid.UUID `json:"workerId" validate:"required"`
	// CommentTypeID holds the value of the "comment_type_id" field.
	CommentTypeID uuid.UUID `json:"commentTypeId" validate:"required"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"userId" validate:"required"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkerCommentQuery when eager-loading is set.
	Edges        WorkerCommentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkerCommentEdges holds the relations/edges for other nodes in the graph.
type WorkerCommentEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Worker holds the value of the worker edge.
	Worker *Worker `json:"worker"`
	// CommentType holds the value of the comment_type edge.
	CommentType *CommentType `json:"commentType"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkerCommentEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkerCommentEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// WorkerOrErr returns the Worker value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkerCommentEdges) WorkerOrErr() (*Worker, error) {
	if e.Worker != nil {
		return e.Worker, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: worker.Label}
	}
	return nil, &NotLoadedError{edge: "worker"}
}

// CommentTypeOrErr returns the CommentType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkerCommentEdges) CommentTypeOrErr() (*CommentType, error) {
	if e.CommentType != nil {
		return e.CommentType, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: commenttype.Label}
	}
	return nil, &NotLoadedError{edge: "comment_type"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkerCommentEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkerComment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workercomment.FieldVersion:
			values[i] = new(sql.NullInt64)
		case workercomment.FieldComment:
			values[i] = new(sql.NullString)
		case workercomment.FieldCreatedAt, workercomment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workercomment.FieldID, workercomment.FieldBusinessUnitID, workercomment.FieldOrganizationID, workercomment.FieldWorkerID, workercomment.FieldCommentTypeID, workercomment.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkerComment fields.
func (wc *WorkerComment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workercomment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wc.ID = *value
			}
		case workercomment.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				wc.BusinessUnitID = *value
			}
		case workercomment.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				wc.OrganizationID = *value
			}
		case workercomment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wc.CreatedAt = value.Time
			}
		case workercomment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wc.UpdatedAt = value.Time
			}
		case workercomment.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				wc.Version = int(value.Int64)
			}
		case workercomment.FieldWorkerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field worker_id", values[i])
			} else if value != nil {
				wc.WorkerID = *value
			}
		case workercomment.FieldCommentTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field comment_type_id", values[i])
			} else if value != nil {
				wc.CommentTypeID = *value
			}
		case workercomment.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				wc.UserID = *value
			}
		case workercomment.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				wc.Comment = value.String
			}
		default:
			wc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkerComment.
// This includes values selected through modifiers, order, etc.
func (wc *WorkerComment) Value(name string) (ent.Value, error) {
	return wc.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the WorkerComment entity.
func (wc *WorkerComment) QueryBusinessUnit() *BusinessUnitQuery {
	return NewWorkerCommentClient(wc.config).QueryBusinessUnit(wc)
}

// QueryOrganization queries the "organization" edge of the WorkerComment entity.
func (wc *WorkerComment) QueryOrganization() *OrganizationQuery {
	return NewWorkerCommentClient(wc.config).QueryOrganization(wc)
}

// QueryWorker queries the "worker" edge of the WorkerComment entity.
func (wc *WorkerComment) QueryWorker() *WorkerQuery {
	return NewWorkerCommentClient(wc.config).QueryWorker(wc)
}

// QueryCommentType queries the "comment_type" edge of the WorkerComment entity.
func (wc *WorkerComment) QueryCommentType() *CommentTypeQuery {
	return NewWorkerCommentClient(wc.config).QueryCommentType(wc)
}

// QueryUser queries the "user" edge of the WorkerComment entity.
func (wc *WorkerComment) QueryUser() *UserQuery {
	return NewWorkerCommentClient(wc.config).QueryUser(wc)
}

// Update returns a builder for updating this WorkerComment.
// Note that you need to call WorkerComment.Unwrap() before calling this method if this WorkerComment
// was returned from a transaction, and the transaction was committed or rolled back.
func (wc *WorkerComment) Update() *WorkerCommentUpdateOne {
	return NewWorkerCommentClient(wc.config).UpdateOne(wc)
}

// Unwrap unwraps the WorkerComment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wc *WorkerComment) Unwrap() *WorkerComment {
	_tx, ok := wc.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkerComment is not a transactional entity")
	}
	wc.config.driver = _tx.drv
	return wc
}

// String implements the fmt.Stringer.
func (wc *WorkerComment) String() string {
	var builder strings.Builder
	builder.WriteString("WorkerComment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wc.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", wc.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", wc.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", wc.Version))
	builder.WriteString(", ")
	builder.WriteString("worker_id=")
	builder.WriteString(fmt.Sprintf("%v", wc.WorkerID))
	builder.WriteString(", ")
	builder.WriteString("comment_type_id=")
	builder.WriteString(fmt.Sprintf("%v", wc.CommentTypeID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", wc.UserID))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(wc.Comment)
	builder.WriteByte(')')
	return builder.String()
}

// WorkerComments is a parsable slice of WorkerComment.
type WorkerComments []*WorkerComment
