// Code generated by entc, DO NOT EDIT.

package shipment

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the shipment type in the database.
	Label = "shipment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldProNumber holds the string denoting the pro_number field in the database.
	FieldProNumber = "pro_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOriginLocationID holds the string denoting the origin_location_id field in the database.
	FieldOriginLocationID = "origin_location_id"
	// FieldOriginAddressLine holds the string denoting the origin_address_line field in the database.
	FieldOriginAddressLine = "origin_address_line"
	// FieldOriginAppointmentStart holds the string denoting the origin_appointment_start field in the database.
	FieldOriginAppointmentStart = "origin_appointment_start"
	// FieldOriginAppointmentEnd holds the string denoting the origin_appointment_end field in the database.
	FieldOriginAppointmentEnd = "origin_appointment_end"
	// FieldDestinationLocationID holds the string denoting the destination_location_id field in the database.
	FieldDestinationLocationID = "destination_location_id"
	// FieldDestinationAddressLine holds the string denoting the destination_address_line field in the database.
	FieldDestinationAddressLine = "destination_address_line"
	// FieldDestinationAppointmentStart holds the string denoting the destination_appointment_start field in the database.
	FieldDestinationAppointmentStart = "destination_appointment_start"
	// FieldDestinationAppointmentEnd holds the string denoting the destination_appointment_end field in the database.
	FieldDestinationAppointmentEnd = "destination_appointment_end"
	// FieldShipmentTypeID holds the string denoting the shipment_type_id field in the database.
	FieldShipmentTypeID = "shipment_type_id"
	// FieldRevenueCodeID holds the string denoting the revenue_code_id field in the database.
	FieldRevenueCodeID = "revenue_code_id"
	// FieldServiceTypeID holds the string denoting the service_type_id field in the database.
	FieldServiceTypeID = "service_type_id"
	// FieldRatingUnit holds the string denoting the rating_unit field in the database.
	FieldRatingUnit = "rating_unit"
	// FieldMileage holds the string denoting the mileage field in the database.
	FieldMileage = "mileage"
	// FieldOtherChargeAmount holds the string denoting the other_charge_amount field in the database.
	FieldOtherChargeAmount = "other_charge_amount"
	// FieldFreightChargeAmount holds the string denoting the freight_charge_amount field in the database.
	FieldFreightChargeAmount = "freight_charge_amount"
	// FieldRatingMethod holds the string denoting the rating_method field in the database.
	FieldRatingMethod = "rating_method"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldPieces holds the string denoting the pieces field in the database.
	FieldPieces = "pieces"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldReadyToBill holds the string denoting the ready_to_bill field in the database.
	FieldReadyToBill = "ready_to_bill"
	// FieldBillDate holds the string denoting the bill_date field in the database.
	FieldBillDate = "bill_date"
	// FieldShipDate holds the string denoting the ship_date field in the database.
	FieldShipDate = "ship_date"
	// FieldBilled holds the string denoting the billed field in the database.
	FieldBilled = "billed"
	// FieldTransferredToBilling holds the string denoting the transferred_to_billing field in the database.
	FieldTransferredToBilling = "transferred_to_billing"
	// FieldTransferredToBillingDate holds the string denoting the transferred_to_billing_date field in the database.
	FieldTransferredToBillingDate = "transferred_to_billing_date"
	// FieldTotalChargeAmount holds the string denoting the total_charge_amount field in the database.
	FieldTotalChargeAmount = "total_charge_amount"
	// FieldTrailerTypeID holds the string denoting the trailer_type_id field in the database.
	FieldTrailerTypeID = "trailer_type_id"
	// FieldTractorTypeID holds the string denoting the tractor_type_id field in the database.
	FieldTractorTypeID = "tractor_type_id"
	// FieldTemperatureMin holds the string denoting the temperature_min field in the database.
	FieldTemperatureMin = "temperature_min"
	// FieldTemperatureMax holds the string denoting the temperature_max field in the database.
	FieldTemperatureMax = "temperature_max"
	// FieldBillOfLadingNumber holds the string denoting the bill_of_lading_number field in the database.
	FieldBillOfLadingNumber = "bill_of_lading_number"
	// FieldConsigneeReferenceNumber holds the string denoting the consignee_reference_number field in the database.
	FieldConsigneeReferenceNumber = "consignee_reference_number"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldVoidedComment holds the string denoting the voided_comment field in the database.
	FieldVoidedComment = "voided_comment"
	// FieldAutoRated holds the string denoting the auto_rated field in the database.
	FieldAutoRated = "auto_rated"
	// FieldCurrentSuffix holds the string denoting the current_suffix field in the database.
	FieldCurrentSuffix = "current_suffix"
	// FieldEntryMethod holds the string denoting the entry_method field in the database.
	FieldEntryMethod = "entry_method"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldIsHazardous holds the string denoting the is_hazardous field in the database.
	FieldIsHazardous = "is_hazardous"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeShipmentType holds the string denoting the shipment_type edge name in mutations.
	EdgeShipmentType = "shipment_type"
	// EdgeServiceType holds the string denoting the service_type edge name in mutations.
	EdgeServiceType = "service_type"
	// EdgeRevenueCode holds the string denoting the revenue_code edge name in mutations.
	EdgeRevenueCode = "revenue_code"
	// EdgeOriginLocation holds the string denoting the origin_location edge name in mutations.
	EdgeOriginLocation = "origin_location"
	// EdgeDestinationLocation holds the string denoting the destination_location edge name in mutations.
	EdgeDestinationLocation = "destination_location"
	// EdgeTrailerType holds the string denoting the trailer_type edge name in mutations.
	EdgeTrailerType = "trailer_type"
	// EdgeTractorType holds the string denoting the tractor_type edge name in mutations.
	EdgeTractorType = "tractor_type"
	// EdgeShipmentDocumentation holds the string denoting the shipment_documentation edge name in mutations.
	EdgeShipmentDocumentation = "shipment_documentation"
	// EdgeShipmentComments holds the string denoting the shipment_comments edge name in mutations.
	EdgeShipmentComments = "shipment_comments"
	// EdgeShipmentCharges holds the string denoting the shipment_charges edge name in mutations.
	EdgeShipmentCharges = "shipment_charges"
	// EdgeShipmentCommodities holds the string denoting the shipment_commodities edge name in mutations.
	EdgeShipmentCommodities = "shipment_commodities"
	// EdgeCreatedByUser holds the string denoting the created_by_user edge name in mutations.
	EdgeCreatedByUser = "created_by_user"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeShipmentMoves holds the string denoting the shipment_moves edge name in mutations.
	EdgeShipmentMoves = "shipment_moves"
	// Table holds the table name of the shipment in the database.
	Table = "shipments"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "shipments"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "shipments"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// ShipmentTypeTable is the table that holds the shipment_type relation/edge.
	ShipmentTypeTable = "shipments"
	// ShipmentTypeInverseTable is the table name for the ShipmentType entity.
	// It exists in this package in order to avoid circular dependency with the "shipmenttype" package.
	ShipmentTypeInverseTable = "shipment_types"
	// ShipmentTypeColumn is the table column denoting the shipment_type relation/edge.
	ShipmentTypeColumn = "shipment_type_id"
	// ServiceTypeTable is the table that holds the service_type relation/edge.
	ServiceTypeTable = "shipments"
	// ServiceTypeInverseTable is the table name for the ServiceType entity.
	// It exists in this package in order to avoid circular dependency with the "servicetype" package.
	ServiceTypeInverseTable = "service_types"
	// ServiceTypeColumn is the table column denoting the service_type relation/edge.
	ServiceTypeColumn = "service_type_id"
	// RevenueCodeTable is the table that holds the revenue_code relation/edge.
	RevenueCodeTable = "shipments"
	// RevenueCodeInverseTable is the table name for the ServiceType entity.
	// It exists in this package in order to avoid circular dependency with the "servicetype" package.
	RevenueCodeInverseTable = "service_types"
	// RevenueCodeColumn is the table column denoting the revenue_code relation/edge.
	RevenueCodeColumn = "revenue_code_id"
	// OriginLocationTable is the table that holds the origin_location relation/edge.
	OriginLocationTable = "shipments"
	// OriginLocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	OriginLocationInverseTable = "locations"
	// OriginLocationColumn is the table column denoting the origin_location relation/edge.
	OriginLocationColumn = "origin_location_id"
	// DestinationLocationTable is the table that holds the destination_location relation/edge.
	DestinationLocationTable = "shipments"
	// DestinationLocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	DestinationLocationInverseTable = "locations"
	// DestinationLocationColumn is the table column denoting the destination_location relation/edge.
	DestinationLocationColumn = "destination_location_id"
	// TrailerTypeTable is the table that holds the trailer_type relation/edge.
	TrailerTypeTable = "shipments"
	// TrailerTypeInverseTable is the table name for the EquipmentType entity.
	// It exists in this package in order to avoid circular dependency with the "equipmenttype" package.
	TrailerTypeInverseTable = "equipment_types"
	// TrailerTypeColumn is the table column denoting the trailer_type relation/edge.
	TrailerTypeColumn = "trailer_type_id"
	// TractorTypeTable is the table that holds the tractor_type relation/edge.
	TractorTypeTable = "shipments"
	// TractorTypeInverseTable is the table name for the EquipmentType entity.
	// It exists in this package in order to avoid circular dependency with the "equipmenttype" package.
	TractorTypeInverseTable = "equipment_types"
	// TractorTypeColumn is the table column denoting the tractor_type relation/edge.
	TractorTypeColumn = "tractor_type_id"
	// ShipmentDocumentationTable is the table that holds the shipment_documentation relation/edge.
	ShipmentDocumentationTable = "shipment_documentations"
	// ShipmentDocumentationInverseTable is the table name for the ShipmentDocumentation entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentdocumentation" package.
	ShipmentDocumentationInverseTable = "shipment_documentations"
	// ShipmentDocumentationColumn is the table column denoting the shipment_documentation relation/edge.
	ShipmentDocumentationColumn = "shipment_id"
	// ShipmentCommentsTable is the table that holds the shipment_comments relation/edge.
	ShipmentCommentsTable = "shipment_comments"
	// ShipmentCommentsInverseTable is the table name for the ShipmentComment entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentcomment" package.
	ShipmentCommentsInverseTable = "shipment_comments"
	// ShipmentCommentsColumn is the table column denoting the shipment_comments relation/edge.
	ShipmentCommentsColumn = "shipment_id"
	// ShipmentChargesTable is the table that holds the shipment_charges relation/edge.
	ShipmentChargesTable = "shipment_charges"
	// ShipmentChargesInverseTable is the table name for the ShipmentCharges entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentcharges" package.
	ShipmentChargesInverseTable = "shipment_charges"
	// ShipmentChargesColumn is the table column denoting the shipment_charges relation/edge.
	ShipmentChargesColumn = "shipment_id"
	// ShipmentCommoditiesTable is the table that holds the shipment_commodities relation/edge.
	ShipmentCommoditiesTable = "shipment_commodities"
	// ShipmentCommoditiesInverseTable is the table name for the ShipmentCommodity entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentcommodity" package.
	ShipmentCommoditiesInverseTable = "shipment_commodities"
	// ShipmentCommoditiesColumn is the table column denoting the shipment_commodities relation/edge.
	ShipmentCommoditiesColumn = "shipment_id"
	// CreatedByUserTable is the table that holds the created_by_user relation/edge.
	CreatedByUserTable = "shipments"
	// CreatedByUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByUserInverseTable = "users"
	// CreatedByUserColumn is the table column denoting the created_by_user relation/edge.
	CreatedByUserColumn = "created_by"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "shipments"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// ShipmentMovesTable is the table that holds the shipment_moves relation/edge.
	ShipmentMovesTable = "shipment_moves"
	// ShipmentMovesInverseTable is the table name for the ShipmentMove entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentmove" package.
	ShipmentMovesInverseTable = "shipment_moves"
	// ShipmentMovesColumn is the table column denoting the shipment_moves relation/edge.
	ShipmentMovesColumn = "shipment_id"
)

// Columns holds all SQL columns for shipment fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVersion,
	FieldProNumber,
	FieldStatus,
	FieldOriginLocationID,
	FieldOriginAddressLine,
	FieldOriginAppointmentStart,
	FieldOriginAppointmentEnd,
	FieldDestinationLocationID,
	FieldDestinationAddressLine,
	FieldDestinationAppointmentStart,
	FieldDestinationAppointmentEnd,
	FieldShipmentTypeID,
	FieldRevenueCodeID,
	FieldServiceTypeID,
	FieldRatingUnit,
	FieldMileage,
	FieldOtherChargeAmount,
	FieldFreightChargeAmount,
	FieldRatingMethod,
	FieldCustomerID,
	FieldPieces,
	FieldWeight,
	FieldReadyToBill,
	FieldBillDate,
	FieldShipDate,
	FieldBilled,
	FieldTransferredToBilling,
	FieldTransferredToBillingDate,
	FieldTotalChargeAmount,
	FieldTrailerTypeID,
	FieldTractorTypeID,
	FieldTemperatureMin,
	FieldTemperatureMax,
	FieldBillOfLadingNumber,
	FieldConsigneeReferenceNumber,
	FieldComment,
	FieldVoidedComment,
	FieldAutoRated,
	FieldCurrentSuffix,
	FieldEntryMethod,
	FieldCreatedBy,
	FieldIsHazardous,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/emoss08/trenova/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// ProNumberValidator is a validator for the "pro_number" field. It is called by the builders before save.
	ProNumberValidator func(string) error
	// DefaultRatingUnit holds the default value on creation for the "rating_unit" field.
	DefaultRatingUnit int
	// RatingUnitValidator is a validator for the "rating_unit" field. It is called by the builders before save.
	RatingUnitValidator func(int) error
	// MileageValidator is a validator for the "mileage" field. It is called by the builders before save.
	MileageValidator func(float64) error
	// OtherChargeAmountValidator is a validator for the "other_charge_amount" field. It is called by the builders before save.
	OtherChargeAmountValidator func(float64) error
	// FreightChargeAmountValidator is a validator for the "freight_charge_amount" field. It is called by the builders before save.
	FreightChargeAmountValidator func(float64) error
	// PiecesValidator is a validator for the "pieces" field. It is called by the builders before save.
	PiecesValidator func(float64) error
	// WeightValidator is a validator for the "weight" field. It is called by the builders before save.
	WeightValidator func(float64) error
	// DefaultReadyToBill holds the default value on creation for the "ready_to_bill" field.
	DefaultReadyToBill bool
	// DefaultBilled holds the default value on creation for the "billed" field.
	DefaultBilled bool
	// DefaultTransferredToBilling holds the default value on creation for the "transferred_to_billing" field.
	DefaultTransferredToBilling bool
	// TotalChargeAmountValidator is a validator for the "total_charge_amount" field. It is called by the builders before save.
	TotalChargeAmountValidator func(float64) error
	// VoidedCommentValidator is a validator for the "voided_comment" field. It is called by the builders before save.
	VoidedCommentValidator func(string) error
	// DefaultAutoRated holds the default value on creation for the "auto_rated" field.
	DefaultAutoRated bool
	// DefaultIsHazardous holds the default value on creation for the "is_hazardous" field.
	DefaultIsHazardous bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusNew is the default value of the Status enum.
const DefaultStatus = StatusNew

// Status values.
const (
	StatusNew        Status = "New"
	StatusInProgress Status = "InProgress"
	StatusCompleted  Status = "Completed"
	StatusHold       Status = "Hold"
	StatusBilled     Status = "Billed"
	StatusVoided     Status = "Voided"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusNew, StatusInProgress, StatusCompleted, StatusHold, StatusBilled, StatusVoided:
		return nil
	default:
		return fmt.Errorf("shipment: invalid enum value for status field: %q", s)
	}
}

// RatingMethod defines the type for the "rating_method" enum field.
type RatingMethod string

// RatingMethodFlatRate is the default value of the RatingMethod enum.
const DefaultRatingMethod = RatingMethodFlatRate

// RatingMethod values.
const (
	RatingMethodFlatRate         RatingMethod = "FlatRate"
	RatingMethodPerMile          RatingMethod = "PerMile"
	RatingMethodPerHundredWeight RatingMethod = "PerHundredWeight"
	RatingMethodPerStop          RatingMethod = "PerStop"
	RatingMethodPerPound         RatingMethod = "PerPound"
	RatingMethodOther            RatingMethod = "Other"
)

func (rm RatingMethod) String() string {
	return string(rm)
}

// RatingMethodValidator is a validator for the "rating_method" field enum values. It is called by the builders before save.
func RatingMethodValidator(rm RatingMethod) error {
	switch rm {
	case RatingMethodFlatRate, RatingMethodPerMile, RatingMethodPerHundredWeight, RatingMethodPerStop, RatingMethodPerPound, RatingMethodOther:
		return nil
	default:
		return fmt.Errorf("shipment: invalid enum value for rating_method field: %q", rm)
	}
}

// EntryMethod defines the type for the "entry_method" enum field.
type EntryMethod string

// EntryMethodManual is the default value of the EntryMethod enum.
const DefaultEntryMethod = EntryMethodManual

// EntryMethod values.
const (
	EntryMethodManual EntryMethod = "Manual"
	EntryMethodEDI    EntryMethod = "EDI"
	EntryMethodWeb    EntryMethod = "Web"
	EntryMethodMobile EntryMethod = "Mobile"
	EntryMethodAPI    EntryMethod = "API"
)

func (em EntryMethod) String() string {
	return string(em)
}

// EntryMethodValidator is a validator for the "entry_method" field enum values. It is called by the builders before save.
func EntryMethodValidator(em EntryMethod) error {
	switch em {
	case EntryMethodManual, EntryMethodEDI, EntryMethodWeb, EntryMethodMobile, EntryMethodAPI:
		return nil
	default:
		return fmt.Errorf("shipment: invalid enum value for entry_method field: %q", em)
	}
}

// OrderOption defines the ordering options for the Shipment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByProNumber orders the results by the pro_number field.
func ByProNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProNumber, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByOriginLocationID orders the results by the origin_location_id field.
func ByOriginLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginLocationID, opts...).ToFunc()
}

// ByOriginAddressLine orders the results by the origin_address_line field.
func ByOriginAddressLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginAddressLine, opts...).ToFunc()
}

// ByOriginAppointmentStart orders the results by the origin_appointment_start field.
func ByOriginAppointmentStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginAppointmentStart, opts...).ToFunc()
}

// ByOriginAppointmentEnd orders the results by the origin_appointment_end field.
func ByOriginAppointmentEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginAppointmentEnd, opts...).ToFunc()
}

// ByDestinationLocationID orders the results by the destination_location_id field.
func ByDestinationLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationLocationID, opts...).ToFunc()
}

// ByDestinationAddressLine orders the results by the destination_address_line field.
func ByDestinationAddressLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationAddressLine, opts...).ToFunc()
}

// ByDestinationAppointmentStart orders the results by the destination_appointment_start field.
func ByDestinationAppointmentStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationAppointmentStart, opts...).ToFunc()
}

// ByDestinationAppointmentEnd orders the results by the destination_appointment_end field.
func ByDestinationAppointmentEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationAppointmentEnd, opts...).ToFunc()
}

// ByShipmentTypeID orders the results by the shipment_type_id field.
func ByShipmentTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmentTypeID, opts...).ToFunc()
}

// ByRevenueCodeID orders the results by the revenue_code_id field.
func ByRevenueCodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevenueCodeID, opts...).ToFunc()
}

// ByServiceTypeID orders the results by the service_type_id field.
func ByServiceTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceTypeID, opts...).ToFunc()
}

// ByRatingUnit orders the results by the rating_unit field.
func ByRatingUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRatingUnit, opts...).ToFunc()
}

// ByMileage orders the results by the mileage field.
func ByMileage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMileage, opts...).ToFunc()
}

// ByOtherChargeAmount orders the results by the other_charge_amount field.
func ByOtherChargeAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOtherChargeAmount, opts...).ToFunc()
}

// ByFreightChargeAmount orders the results by the freight_charge_amount field.
func ByFreightChargeAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFreightChargeAmount, opts...).ToFunc()
}

// ByRatingMethod orders the results by the rating_method field.
func ByRatingMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRatingMethod, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByPieces orders the results by the pieces field.
func ByPieces(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPieces, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByReadyToBill orders the results by the ready_to_bill field.
func ByReadyToBill(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReadyToBill, opts...).ToFunc()
}

// ByBillDate orders the results by the bill_date field.
func ByBillDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillDate, opts...).ToFunc()
}

// ByShipDate orders the results by the ship_date field.
func ByShipDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipDate, opts...).ToFunc()
}

// ByBilled orders the results by the billed field.
func ByBilled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBilled, opts...).ToFunc()
}

// ByTransferredToBilling orders the results by the transferred_to_billing field.
func ByTransferredToBilling(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransferredToBilling, opts...).ToFunc()
}

// ByTransferredToBillingDate orders the results by the transferred_to_billing_date field.
func ByTransferredToBillingDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransferredToBillingDate, opts...).ToFunc()
}

// ByTotalChargeAmount orders the results by the total_charge_amount field.
func ByTotalChargeAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalChargeAmount, opts...).ToFunc()
}

// ByTrailerTypeID orders the results by the trailer_type_id field.
func ByTrailerTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrailerTypeID, opts...).ToFunc()
}

// ByTractorTypeID orders the results by the tractor_type_id field.
func ByTractorTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTractorTypeID, opts...).ToFunc()
}

// ByTemperatureMin orders the results by the temperature_min field.
func ByTemperatureMin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemperatureMin, opts...).ToFunc()
}

// ByTemperatureMax orders the results by the temperature_max field.
func ByTemperatureMax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemperatureMax, opts...).ToFunc()
}

// ByBillOfLadingNumber orders the results by the bill_of_lading_number field.
func ByBillOfLadingNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillOfLadingNumber, opts...).ToFunc()
}

// ByConsigneeReferenceNumber orders the results by the consignee_reference_number field.
func ByConsigneeReferenceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConsigneeReferenceNumber, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByVoidedComment orders the results by the voided_comment field.
func ByVoidedComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoidedComment, opts...).ToFunc()
}

// ByAutoRated orders the results by the auto_rated field.
func ByAutoRated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoRated, opts...).ToFunc()
}

// ByCurrentSuffix orders the results by the current_suffix field.
func ByCurrentSuffix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentSuffix, opts...).ToFunc()
}

// ByEntryMethod orders the results by the entry_method field.
func ByEntryMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryMethod, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByIsHazardous orders the results by the is_hazardous field.
func ByIsHazardous(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsHazardous, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentTypeField orders the results by shipment_type field.
func ByShipmentTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByServiceTypeField orders the results by service_type field.
func ByServiceTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByRevenueCodeField orders the results by revenue_code field.
func ByRevenueCodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRevenueCodeStep(), sql.OrderByField(field, opts...))
	}
}

// ByOriginLocationField orders the results by origin_location field.
func ByOriginLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOriginLocationStep(), sql.OrderByField(field, opts...))
	}
}

// ByDestinationLocationField orders the results by destination_location field.
func ByDestinationLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDestinationLocationStep(), sql.OrderByField(field, opts...))
	}
}

// ByTrailerTypeField orders the results by trailer_type field.
func ByTrailerTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrailerTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByTractorTypeField orders the results by tractor_type field.
func ByTractorTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTractorTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentDocumentationCount orders the results by shipment_documentation count.
func ByShipmentDocumentationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentDocumentationStep(), opts...)
	}
}

// ByShipmentDocumentation orders the results by shipment_documentation terms.
func ByShipmentDocumentation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentDocumentationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentCommentsCount orders the results by shipment_comments count.
func ByShipmentCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentCommentsStep(), opts...)
	}
}

// ByShipmentComments orders the results by shipment_comments terms.
func ByShipmentComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentChargesCount orders the results by shipment_charges count.
func ByShipmentChargesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentChargesStep(), opts...)
	}
}

// ByShipmentCharges orders the results by shipment_charges terms.
func ByShipmentCharges(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentChargesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentCommoditiesCount orders the results by shipment_commodities count.
func ByShipmentCommoditiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentCommoditiesStep(), opts...)
	}
}

// ByShipmentCommodities orders the results by shipment_commodities terms.
func ByShipmentCommodities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentCommoditiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedByUserField orders the results by created_by_user field.
func ByCreatedByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentMovesCount orders the results by shipment_moves count.
func ByShipmentMovesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentMovesStep(), opts...)
	}
}

// ByShipmentMoves orders the results by shipment_moves terms.
func ByShipmentMoves(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentMovesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newShipmentTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ShipmentTypeTable, ShipmentTypeColumn),
	)
}
func newServiceTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ServiceTypeTable, ServiceTypeColumn),
	)
}
func newRevenueCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RevenueCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RevenueCodeTable, RevenueCodeColumn),
	)
}
func newOriginLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OriginLocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OriginLocationTable, OriginLocationColumn),
	)
}
func newDestinationLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DestinationLocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DestinationLocationTable, DestinationLocationColumn),
	)
}
func newTrailerTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrailerTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TrailerTypeTable, TrailerTypeColumn),
	)
}
func newTractorTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TractorTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TractorTypeTable, TractorTypeColumn),
	)
}
func newShipmentDocumentationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentDocumentationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShipmentDocumentationTable, ShipmentDocumentationColumn),
	)
}
func newShipmentCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentCommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShipmentCommentsTable, ShipmentCommentsColumn),
	)
}
func newShipmentChargesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentChargesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShipmentChargesTable, ShipmentChargesColumn),
	)
}
func newShipmentCommoditiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentCommoditiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShipmentCommoditiesTable, ShipmentCommoditiesColumn),
	)
}
func newCreatedByUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatedByUserTable, CreatedByUserColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
func newShipmentMovesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentMovesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShipmentMovesTable, ShipmentMovesColumn),
	)
}
