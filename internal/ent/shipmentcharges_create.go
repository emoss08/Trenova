// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/accessorialcharge"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/shipment"
	"github.com/emoss08/trenova/internal/ent/shipmentcharges"
	"github.com/emoss08/trenova/internal/ent/user"
	"github.com/google/uuid"
)

// ShipmentChargesCreate is the builder for creating a ShipmentCharges entity.
type ShipmentChargesCreate struct {
	config
	mutation *ShipmentChargesMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (scc *ShipmentChargesCreate) SetBusinessUnitID(u uuid.UUID) *ShipmentChargesCreate {
	scc.mutation.SetBusinessUnitID(u)
	return scc
}

// SetOrganizationID sets the "organization_id" field.
func (scc *ShipmentChargesCreate) SetOrganizationID(u uuid.UUID) *ShipmentChargesCreate {
	scc.mutation.SetOrganizationID(u)
	return scc
}

// SetCreatedAt sets the "created_at" field.
func (scc *ShipmentChargesCreate) SetCreatedAt(t time.Time) *ShipmentChargesCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *ShipmentChargesCreate) SetNillableCreatedAt(t *time.Time) *ShipmentChargesCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdatedAt sets the "updated_at" field.
func (scc *ShipmentChargesCreate) SetUpdatedAt(t time.Time) *ShipmentChargesCreate {
	scc.mutation.SetUpdatedAt(t)
	return scc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scc *ShipmentChargesCreate) SetNillableUpdatedAt(t *time.Time) *ShipmentChargesCreate {
	if t != nil {
		scc.SetUpdatedAt(*t)
	}
	return scc
}

// SetVersion sets the "version" field.
func (scc *ShipmentChargesCreate) SetVersion(i int) *ShipmentChargesCreate {
	scc.mutation.SetVersion(i)
	return scc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (scc *ShipmentChargesCreate) SetNillableVersion(i *int) *ShipmentChargesCreate {
	if i != nil {
		scc.SetVersion(*i)
	}
	return scc
}

// SetShipmentID sets the "shipment_id" field.
func (scc *ShipmentChargesCreate) SetShipmentID(u uuid.UUID) *ShipmentChargesCreate {
	scc.mutation.SetShipmentID(u)
	return scc
}

// SetAccessorialChargeID sets the "accessorial_charge_id" field.
func (scc *ShipmentChargesCreate) SetAccessorialChargeID(u uuid.UUID) *ShipmentChargesCreate {
	scc.mutation.SetAccessorialChargeID(u)
	return scc
}

// SetDescription sets the "description" field.
func (scc *ShipmentChargesCreate) SetDescription(s string) *ShipmentChargesCreate {
	scc.mutation.SetDescription(s)
	return scc
}

// SetChargeAmount sets the "charge_amount" field.
func (scc *ShipmentChargesCreate) SetChargeAmount(f float64) *ShipmentChargesCreate {
	scc.mutation.SetChargeAmount(f)
	return scc
}

// SetUnits sets the "units" field.
func (scc *ShipmentChargesCreate) SetUnits(i int) *ShipmentChargesCreate {
	scc.mutation.SetUnits(i)
	return scc
}

// SetSubTotal sets the "sub_total" field.
func (scc *ShipmentChargesCreate) SetSubTotal(f float64) *ShipmentChargesCreate {
	scc.mutation.SetSubTotal(f)
	return scc
}

// SetCreatedBy sets the "created_by" field.
func (scc *ShipmentChargesCreate) SetCreatedBy(u uuid.UUID) *ShipmentChargesCreate {
	scc.mutation.SetCreatedBy(u)
	return scc
}

// SetID sets the "id" field.
func (scc *ShipmentChargesCreate) SetID(u uuid.UUID) *ShipmentChargesCreate {
	scc.mutation.SetID(u)
	return scc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (scc *ShipmentChargesCreate) SetNillableID(u *uuid.UUID) *ShipmentChargesCreate {
	if u != nil {
		scc.SetID(*u)
	}
	return scc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (scc *ShipmentChargesCreate) SetBusinessUnit(b *BusinessUnit) *ShipmentChargesCreate {
	return scc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (scc *ShipmentChargesCreate) SetOrganization(o *Organization) *ShipmentChargesCreate {
	return scc.SetOrganizationID(o.ID)
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (scc *ShipmentChargesCreate) SetShipment(s *Shipment) *ShipmentChargesCreate {
	return scc.SetShipmentID(s.ID)
}

// SetAccessorialCharge sets the "accessorial_charge" edge to the AccessorialCharge entity.
func (scc *ShipmentChargesCreate) SetAccessorialCharge(a *AccessorialCharge) *ShipmentChargesCreate {
	return scc.SetAccessorialChargeID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (scc *ShipmentChargesCreate) SetUserID(id uuid.UUID) *ShipmentChargesCreate {
	scc.mutation.SetUserID(id)
	return scc
}

// SetUser sets the "user" edge to the User entity.
func (scc *ShipmentChargesCreate) SetUser(u *User) *ShipmentChargesCreate {
	return scc.SetUserID(u.ID)
}

// Mutation returns the ShipmentChargesMutation object of the builder.
func (scc *ShipmentChargesCreate) Mutation() *ShipmentChargesMutation {
	return scc.mutation
}

// Save creates the ShipmentCharges in the database.
func (scc *ShipmentChargesCreate) Save(ctx context.Context) (*ShipmentCharges, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ShipmentChargesCreate) SaveX(ctx context.Context) *ShipmentCharges {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ShipmentChargesCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ShipmentChargesCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *ShipmentChargesCreate) defaults() {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := shipmentcharges.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		v := shipmentcharges.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scc.mutation.Version(); !ok {
		v := shipmentcharges.DefaultVersion
		scc.mutation.SetVersion(v)
	}
	if _, ok := scc.mutation.ID(); !ok {
		v := shipmentcharges.DefaultID()
		scc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ShipmentChargesCreate) check() error {
	if _, ok := scc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "ShipmentCharges.business_unit_id"`)}
	}
	if _, ok := scc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "ShipmentCharges.organization_id"`)}
	}
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ShipmentCharges.created_at"`)}
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ShipmentCharges.updated_at"`)}
	}
	if _, ok := scc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ShipmentCharges.version"`)}
	}
	if _, ok := scc.mutation.ShipmentID(); !ok {
		return &ValidationError{Name: "shipment_id", err: errors.New(`ent: missing required field "ShipmentCharges.shipment_id"`)}
	}
	if _, ok := scc.mutation.AccessorialChargeID(); !ok {
		return &ValidationError{Name: "accessorial_charge_id", err: errors.New(`ent: missing required field "ShipmentCharges.accessorial_charge_id"`)}
	}
	if _, ok := scc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ShipmentCharges.description"`)}
	}
	if _, ok := scc.mutation.ChargeAmount(); !ok {
		return &ValidationError{Name: "charge_amount", err: errors.New(`ent: missing required field "ShipmentCharges.charge_amount"`)}
	}
	if v, ok := scc.mutation.ChargeAmount(); ok {
		if err := shipmentcharges.ChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "charge_amount", err: fmt.Errorf(`ent: validator failed for field "ShipmentCharges.charge_amount": %w`, err)}
		}
	}
	if _, ok := scc.mutation.Units(); !ok {
		return &ValidationError{Name: "units", err: errors.New(`ent: missing required field "ShipmentCharges.units"`)}
	}
	if v, ok := scc.mutation.Units(); ok {
		if err := shipmentcharges.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "ShipmentCharges.units": %w`, err)}
		}
	}
	if _, ok := scc.mutation.SubTotal(); !ok {
		return &ValidationError{Name: "sub_total", err: errors.New(`ent: missing required field "ShipmentCharges.sub_total"`)}
	}
	if v, ok := scc.mutation.SubTotal(); ok {
		if err := shipmentcharges.SubTotalValidator(v); err != nil {
			return &ValidationError{Name: "sub_total", err: fmt.Errorf(`ent: validator failed for field "ShipmentCharges.sub_total": %w`, err)}
		}
	}
	if _, ok := scc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ShipmentCharges.created_by"`)}
	}
	if _, ok := scc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "ShipmentCharges.business_unit"`)}
	}
	if _, ok := scc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "ShipmentCharges.organization"`)}
	}
	if _, ok := scc.mutation.ShipmentID(); !ok {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentCharges.shipment"`)}
	}
	if _, ok := scc.mutation.AccessorialChargeID(); !ok {
		return &ValidationError{Name: "accessorial_charge", err: errors.New(`ent: missing required edge "ShipmentCharges.accessorial_charge"`)}
	}
	if _, ok := scc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ShipmentCharges.user"`)}
	}
	return nil
}

func (scc *ShipmentChargesCreate) sqlSave(ctx context.Context) (*ShipmentCharges, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *ShipmentChargesCreate) createSpec() (*ShipmentCharges, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentCharges{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentcharges.Table, sqlgraph.NewFieldSpec(shipmentcharges.FieldID, field.TypeUUID))
	)
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.SetField(shipmentcharges.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcharges.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := scc.mutation.Version(); ok {
		_spec.SetField(shipmentcharges.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := scc.mutation.Description(); ok {
		_spec.SetField(shipmentcharges.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := scc.mutation.ChargeAmount(); ok {
		_spec.SetField(shipmentcharges.FieldChargeAmount, field.TypeFloat64, value)
		_node.ChargeAmount = value
	}
	if value, ok := scc.mutation.Units(); ok {
		_spec.SetField(shipmentcharges.FieldUnits, field.TypeInt, value)
		_node.Units = value
	}
	if value, ok := scc.mutation.SubTotal(); ok {
		_spec.SetField(shipmentcharges.FieldSubTotal, field.TypeFloat64, value)
		_node.SubTotal = value
	}
	if nodes := scc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentcharges.BusinessUnitTable,
			Columns: []string{shipmentcharges.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentcharges.OrganizationTable,
			Columns: []string{shipmentcharges.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.ShipmentTable,
			Columns: []string{shipmentcharges.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShipmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.AccessorialChargeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.AccessorialChargeTable,
			Columns: []string{shipmentcharges.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccessorialChargeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.UserTable,
			Columns: []string{shipmentcharges.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShipmentChargesCreateBulk is the builder for creating many ShipmentCharges entities in bulk.
type ShipmentChargesCreateBulk struct {
	config
	err      error
	builders []*ShipmentChargesCreate
}

// Save creates the ShipmentCharges entities in the database.
func (sccb *ShipmentChargesCreateBulk) Save(ctx context.Context) ([]*ShipmentCharges, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ShipmentCharges, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentChargesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ShipmentChargesCreateBulk) SaveX(ctx context.Context) []*ShipmentCharges {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ShipmentChargesCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ShipmentChargesCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
