// Code generated by entc, DO NOT EDIT.

package customerdetentionpolicy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldVersion, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldCustomerID, v))
}

// CommodityID applies equality check predicate on the "commodity_id" field. It's identical to CommodityIDEQ.
func CommodityID(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldCommodityID, v))
}

// RevenueCodeID applies equality check predicate on the "revenue_code_id" field. It's identical to RevenueCodeIDEQ.
func RevenueCodeID(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldRevenueCodeID, v))
}

// ShipmentTypeID applies equality check predicate on the "shipment_type_id" field. It's identical to ShipmentTypeIDEQ.
func ShipmentTypeID(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldShipmentTypeID, v))
}

// ChargeFreeTime applies equality check predicate on the "charge_free_time" field. It's identical to ChargeFreeTimeEQ.
func ChargeFreeTime(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldChargeFreeTime, v))
}

// PaymentFreeTime applies equality check predicate on the "payment_free_time" field. It's identical to PaymentFreeTimeEQ.
func PaymentFreeTime(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldPaymentFreeTime, v))
}

// LateArrivalPolicy applies equality check predicate on the "late_arrival_policy" field. It's identical to LateArrivalPolicyEQ.
func LateArrivalPolicy(v bool) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldLateArrivalPolicy, v))
}

// GracePeriod applies equality check predicate on the "grace_period" field. It's identical to GracePeriodEQ.
func GracePeriod(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldGracePeriod, v))
}

// AccessorialChargeID applies equality check predicate on the "accessorial_charge_id" field. It's identical to AccessorialChargeIDEQ.
func AccessorialChargeID(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldAccessorialChargeID, v))
}

// Units applies equality check predicate on the "units" field. It's identical to UnitsEQ.
func Units(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldUnits, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldAmount, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldNotes, v))
}

// EffectiveDate applies equality check predicate on the "effective_date" field. It's identical to EffectiveDateEQ.
func EffectiveDate(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldEffectiveDate, v))
}

// ExpirationDate applies equality check predicate on the "expiration_date" field. It's identical to ExpirationDateEQ.
func ExpirationDate(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldExpirationDate, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldVersion, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldStatus, vs...))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CommodityIDEQ applies the EQ predicate on the "commodity_id" field.
func CommodityIDEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldCommodityID, v))
}

// CommodityIDNEQ applies the NEQ predicate on the "commodity_id" field.
func CommodityIDNEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldCommodityID, v))
}

// CommodityIDIn applies the In predicate on the "commodity_id" field.
func CommodityIDIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldCommodityID, vs...))
}

// CommodityIDNotIn applies the NotIn predicate on the "commodity_id" field.
func CommodityIDNotIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldCommodityID, vs...))
}

// CommodityIDIsNil applies the IsNil predicate on the "commodity_id" field.
func CommodityIDIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldCommodityID))
}

// CommodityIDNotNil applies the NotNil predicate on the "commodity_id" field.
func CommodityIDNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldCommodityID))
}

// RevenueCodeIDEQ applies the EQ predicate on the "revenue_code_id" field.
func RevenueCodeIDEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldRevenueCodeID, v))
}

// RevenueCodeIDNEQ applies the NEQ predicate on the "revenue_code_id" field.
func RevenueCodeIDNEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldRevenueCodeID, v))
}

// RevenueCodeIDIn applies the In predicate on the "revenue_code_id" field.
func RevenueCodeIDIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldRevenueCodeID, vs...))
}

// RevenueCodeIDNotIn applies the NotIn predicate on the "revenue_code_id" field.
func RevenueCodeIDNotIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldRevenueCodeID, vs...))
}

// RevenueCodeIDIsNil applies the IsNil predicate on the "revenue_code_id" field.
func RevenueCodeIDIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldRevenueCodeID))
}

// RevenueCodeIDNotNil applies the NotNil predicate on the "revenue_code_id" field.
func RevenueCodeIDNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldRevenueCodeID))
}

// ShipmentTypeIDEQ applies the EQ predicate on the "shipment_type_id" field.
func ShipmentTypeIDEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldShipmentTypeID, v))
}

// ShipmentTypeIDNEQ applies the NEQ predicate on the "shipment_type_id" field.
func ShipmentTypeIDNEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldShipmentTypeID, v))
}

// ShipmentTypeIDIn applies the In predicate on the "shipment_type_id" field.
func ShipmentTypeIDIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldShipmentTypeID, vs...))
}

// ShipmentTypeIDNotIn applies the NotIn predicate on the "shipment_type_id" field.
func ShipmentTypeIDNotIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldShipmentTypeID, vs...))
}

// ShipmentTypeIDIsNil applies the IsNil predicate on the "shipment_type_id" field.
func ShipmentTypeIDIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldShipmentTypeID))
}

// ShipmentTypeIDNotNil applies the NotNil predicate on the "shipment_type_id" field.
func ShipmentTypeIDNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldShipmentTypeID))
}

// ApplicationScopeEQ applies the EQ predicate on the "application_scope" field.
func ApplicationScopeEQ(v ApplicationScope) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldApplicationScope, v))
}

// ApplicationScopeNEQ applies the NEQ predicate on the "application_scope" field.
func ApplicationScopeNEQ(v ApplicationScope) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldApplicationScope, v))
}

// ApplicationScopeIn applies the In predicate on the "application_scope" field.
func ApplicationScopeIn(vs ...ApplicationScope) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldApplicationScope, vs...))
}

// ApplicationScopeNotIn applies the NotIn predicate on the "application_scope" field.
func ApplicationScopeNotIn(vs ...ApplicationScope) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldApplicationScope, vs...))
}

// ChargeFreeTimeEQ applies the EQ predicate on the "charge_free_time" field.
func ChargeFreeTimeEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldChargeFreeTime, v))
}

// ChargeFreeTimeNEQ applies the NEQ predicate on the "charge_free_time" field.
func ChargeFreeTimeNEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldChargeFreeTime, v))
}

// ChargeFreeTimeIn applies the In predicate on the "charge_free_time" field.
func ChargeFreeTimeIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldChargeFreeTime, vs...))
}

// ChargeFreeTimeNotIn applies the NotIn predicate on the "charge_free_time" field.
func ChargeFreeTimeNotIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldChargeFreeTime, vs...))
}

// ChargeFreeTimeGT applies the GT predicate on the "charge_free_time" field.
func ChargeFreeTimeGT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldChargeFreeTime, v))
}

// ChargeFreeTimeGTE applies the GTE predicate on the "charge_free_time" field.
func ChargeFreeTimeGTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldChargeFreeTime, v))
}

// ChargeFreeTimeLT applies the LT predicate on the "charge_free_time" field.
func ChargeFreeTimeLT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldChargeFreeTime, v))
}

// ChargeFreeTimeLTE applies the LTE predicate on the "charge_free_time" field.
func ChargeFreeTimeLTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldChargeFreeTime, v))
}

// ChargeFreeTimeIsNil applies the IsNil predicate on the "charge_free_time" field.
func ChargeFreeTimeIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldChargeFreeTime))
}

// ChargeFreeTimeNotNil applies the NotNil predicate on the "charge_free_time" field.
func ChargeFreeTimeNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldChargeFreeTime))
}

// PaymentFreeTimeEQ applies the EQ predicate on the "payment_free_time" field.
func PaymentFreeTimeEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldPaymentFreeTime, v))
}

// PaymentFreeTimeNEQ applies the NEQ predicate on the "payment_free_time" field.
func PaymentFreeTimeNEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldPaymentFreeTime, v))
}

// PaymentFreeTimeIn applies the In predicate on the "payment_free_time" field.
func PaymentFreeTimeIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldPaymentFreeTime, vs...))
}

// PaymentFreeTimeNotIn applies the NotIn predicate on the "payment_free_time" field.
func PaymentFreeTimeNotIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldPaymentFreeTime, vs...))
}

// PaymentFreeTimeGT applies the GT predicate on the "payment_free_time" field.
func PaymentFreeTimeGT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldPaymentFreeTime, v))
}

// PaymentFreeTimeGTE applies the GTE predicate on the "payment_free_time" field.
func PaymentFreeTimeGTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldPaymentFreeTime, v))
}

// PaymentFreeTimeLT applies the LT predicate on the "payment_free_time" field.
func PaymentFreeTimeLT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldPaymentFreeTime, v))
}

// PaymentFreeTimeLTE applies the LTE predicate on the "payment_free_time" field.
func PaymentFreeTimeLTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldPaymentFreeTime, v))
}

// PaymentFreeTimeIsNil applies the IsNil predicate on the "payment_free_time" field.
func PaymentFreeTimeIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldPaymentFreeTime))
}

// PaymentFreeTimeNotNil applies the NotNil predicate on the "payment_free_time" field.
func PaymentFreeTimeNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldPaymentFreeTime))
}

// LateArrivalPolicyEQ applies the EQ predicate on the "late_arrival_policy" field.
func LateArrivalPolicyEQ(v bool) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldLateArrivalPolicy, v))
}

// LateArrivalPolicyNEQ applies the NEQ predicate on the "late_arrival_policy" field.
func LateArrivalPolicyNEQ(v bool) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldLateArrivalPolicy, v))
}

// LateArrivalPolicyIsNil applies the IsNil predicate on the "late_arrival_policy" field.
func LateArrivalPolicyIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldLateArrivalPolicy))
}

// LateArrivalPolicyNotNil applies the NotNil predicate on the "late_arrival_policy" field.
func LateArrivalPolicyNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldLateArrivalPolicy))
}

// GracePeriodEQ applies the EQ predicate on the "grace_period" field.
func GracePeriodEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldGracePeriod, v))
}

// GracePeriodNEQ applies the NEQ predicate on the "grace_period" field.
func GracePeriodNEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldGracePeriod, v))
}

// GracePeriodIn applies the In predicate on the "grace_period" field.
func GracePeriodIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldGracePeriod, vs...))
}

// GracePeriodNotIn applies the NotIn predicate on the "grace_period" field.
func GracePeriodNotIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldGracePeriod, vs...))
}

// GracePeriodGT applies the GT predicate on the "grace_period" field.
func GracePeriodGT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldGracePeriod, v))
}

// GracePeriodGTE applies the GTE predicate on the "grace_period" field.
func GracePeriodGTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldGracePeriod, v))
}

// GracePeriodLT applies the LT predicate on the "grace_period" field.
func GracePeriodLT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldGracePeriod, v))
}

// GracePeriodLTE applies the LTE predicate on the "grace_period" field.
func GracePeriodLTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldGracePeriod, v))
}

// GracePeriodIsNil applies the IsNil predicate on the "grace_period" field.
func GracePeriodIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldGracePeriod))
}

// GracePeriodNotNil applies the NotNil predicate on the "grace_period" field.
func GracePeriodNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldGracePeriod))
}

// AccessorialChargeIDEQ applies the EQ predicate on the "accessorial_charge_id" field.
func AccessorialChargeIDEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldAccessorialChargeID, v))
}

// AccessorialChargeIDNEQ applies the NEQ predicate on the "accessorial_charge_id" field.
func AccessorialChargeIDNEQ(v uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldAccessorialChargeID, v))
}

// AccessorialChargeIDIn applies the In predicate on the "accessorial_charge_id" field.
func AccessorialChargeIDIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldAccessorialChargeID, vs...))
}

// AccessorialChargeIDNotIn applies the NotIn predicate on the "accessorial_charge_id" field.
func AccessorialChargeIDNotIn(vs ...uuid.UUID) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldAccessorialChargeID, vs...))
}

// AccessorialChargeIDIsNil applies the IsNil predicate on the "accessorial_charge_id" field.
func AccessorialChargeIDIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldAccessorialChargeID))
}

// AccessorialChargeIDNotNil applies the NotNil predicate on the "accessorial_charge_id" field.
func AccessorialChargeIDNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldAccessorialChargeID))
}

// UnitsEQ applies the EQ predicate on the "units" field.
func UnitsEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldUnits, v))
}

// UnitsNEQ applies the NEQ predicate on the "units" field.
func UnitsNEQ(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldUnits, v))
}

// UnitsIn applies the In predicate on the "units" field.
func UnitsIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldUnits, vs...))
}

// UnitsNotIn applies the NotIn predicate on the "units" field.
func UnitsNotIn(vs ...int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldUnits, vs...))
}

// UnitsGT applies the GT predicate on the "units" field.
func UnitsGT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldUnits, v))
}

// UnitsGTE applies the GTE predicate on the "units" field.
func UnitsGTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldUnits, v))
}

// UnitsLT applies the LT predicate on the "units" field.
func UnitsLT(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldUnits, v))
}

// UnitsLTE applies the LTE predicate on the "units" field.
func UnitsLTE(v int) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldUnits, v))
}

// UnitsIsNil applies the IsNil predicate on the "units" field.
func UnitsIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldUnits))
}

// UnitsNotNil applies the NotNil predicate on the "units" field.
func UnitsNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldUnits))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldAmount, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldContainsFold(FieldNotes, v))
}

// EffectiveDateEQ applies the EQ predicate on the "effective_date" field.
func EffectiveDateEQ(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldEffectiveDate, v))
}

// EffectiveDateNEQ applies the NEQ predicate on the "effective_date" field.
func EffectiveDateNEQ(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldEffectiveDate, v))
}

// EffectiveDateIn applies the In predicate on the "effective_date" field.
func EffectiveDateIn(vs ...*pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldEffectiveDate, vs...))
}

// EffectiveDateNotIn applies the NotIn predicate on the "effective_date" field.
func EffectiveDateNotIn(vs ...*pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldEffectiveDate, vs...))
}

// EffectiveDateGT applies the GT predicate on the "effective_date" field.
func EffectiveDateGT(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldEffectiveDate, v))
}

// EffectiveDateGTE applies the GTE predicate on the "effective_date" field.
func EffectiveDateGTE(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldEffectiveDate, v))
}

// EffectiveDateLT applies the LT predicate on the "effective_date" field.
func EffectiveDateLT(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldEffectiveDate, v))
}

// EffectiveDateLTE applies the LTE predicate on the "effective_date" field.
func EffectiveDateLTE(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldEffectiveDate, v))
}

// EffectiveDateIsNil applies the IsNil predicate on the "effective_date" field.
func EffectiveDateIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldEffectiveDate))
}

// EffectiveDateNotNil applies the NotNil predicate on the "effective_date" field.
func EffectiveDateNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldEffectiveDate))
}

// ExpirationDateEQ applies the EQ predicate on the "expiration_date" field.
func ExpirationDateEQ(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldEQ(FieldExpirationDate, v))
}

// ExpirationDateNEQ applies the NEQ predicate on the "expiration_date" field.
func ExpirationDateNEQ(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNEQ(FieldExpirationDate, v))
}

// ExpirationDateIn applies the In predicate on the "expiration_date" field.
func ExpirationDateIn(vs ...*pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIn(FieldExpirationDate, vs...))
}

// ExpirationDateNotIn applies the NotIn predicate on the "expiration_date" field.
func ExpirationDateNotIn(vs ...*pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotIn(FieldExpirationDate, vs...))
}

// ExpirationDateGT applies the GT predicate on the "expiration_date" field.
func ExpirationDateGT(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGT(FieldExpirationDate, v))
}

// ExpirationDateGTE applies the GTE predicate on the "expiration_date" field.
func ExpirationDateGTE(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldGTE(FieldExpirationDate, v))
}

// ExpirationDateLT applies the LT predicate on the "expiration_date" field.
func ExpirationDateLT(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLT(FieldExpirationDate, v))
}

// ExpirationDateLTE applies the LTE predicate on the "expiration_date" field.
func ExpirationDateLTE(v *pgtype.Date) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldLTE(FieldExpirationDate, v))
}

// ExpirationDateIsNil applies the IsNil predicate on the "expiration_date" field.
func ExpirationDateIsNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldIsNull(FieldExpirationDate))
}

// ExpirationDateNotNil applies the NotNil predicate on the "expiration_date" field.
func ExpirationDateNotNil() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.FieldNotNull(FieldExpirationDate))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommodity applies the HasEdge predicate on the "commodity" edge.
func HasCommodity() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CommodityTable, CommodityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommodityWith applies the HasEdge predicate on the "commodity" edge with a given conditions (other predicates).
func HasCommodityWith(preds ...predicate.Commodity) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := newCommodityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRevenueCode applies the HasEdge predicate on the "revenue_code" edge.
func HasRevenueCode() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RevenueCodeTable, RevenueCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRevenueCodeWith applies the HasEdge predicate on the "revenue_code" edge with a given conditions (other predicates).
func HasRevenueCodeWith(preds ...predicate.RevenueCode) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := newRevenueCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentType applies the HasEdge predicate on the "shipment_type" edge.
func HasShipmentType() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ShipmentTypeTable, ShipmentTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentTypeWith applies the HasEdge predicate on the "shipment_type" edge with a given conditions (other predicates).
func HasShipmentTypeWith(preds ...predicate.ShipmentType) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := newShipmentTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccessorialCharge applies the HasEdge predicate on the "accessorial_charge" edge.
func HasAccessorialCharge() predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AccessorialChargeTable, AccessorialChargeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccessorialChargeWith applies the HasEdge predicate on the "accessorial_charge" edge with a given conditions (other predicates).
func HasAccessorialChargeWith(preds ...predicate.AccessorialCharge) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(func(s *sql.Selector) {
		step := newAccessorialChargeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomerDetentionPolicy) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerDetentionPolicy) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerDetentionPolicy) predicate.CustomerDetentionPolicy {
	return predicate.CustomerDetentionPolicy(sql.NotPredicates(p))
}
