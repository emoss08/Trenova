// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// Status holds the value of the "status" field.
	Status user.Status `json:"status,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-" validate:"-"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone user.Timezone `json:"timezone,omitempty"`
	// ProfilePicURL holds the value of the "profile_pic_url" field.
	ProfilePicURL string `json:"profilePicUrl"`
	// ThumbnailURL holds the value of the "thumbnail_url" field.
	ThumbnailURL string `json:"thumbnailUrl"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phoneNumber"`
	// IsAdmin holds the value of the "is_admin" field.
	IsAdmin bool `json:"isAdmin"`
	// IsSuperAdmin holds the value of the "is_super_admin" field.
	IsSuperAdmin bool `json:"isSuperAdmin"`
	// LastLogin holds the value of the "last_login" field.
	LastLogin *time.Time `json:"lastLogin"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// UserFavorites holds the value of the user_favorites edge.
	UserFavorites []*UserFavorite `json:"user_favorites,omitempty"`
	// Shipments holds the value of the shipments edge.
	Shipments []*Shipment `json:"shipments,omitempty"`
	// ShipmentComments holds the value of the shipment_comments edge.
	ShipmentComments []*ShipmentComment `json:"shipment_comments,omitempty"`
	// ShipmentCharges holds the value of the shipment_charges edge.
	ShipmentCharges []*ShipmentCharges `json:"shipment_charges,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes           [6]bool
	namedUserFavorites    map[string][]*UserFavorite
	namedShipments        map[string][]*Shipment
	namedShipmentComments map[string][]*ShipmentComment
	namedShipmentCharges  map[string][]*ShipmentCharges
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// UserFavoritesOrErr returns the UserFavorites value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserFavoritesOrErr() ([]*UserFavorite, error) {
	if e.loadedTypes[2] {
		return e.UserFavorites, nil
	}
	return nil, &NotLoadedError{edge: "user_favorites"}
}

// ShipmentsOrErr returns the Shipments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ShipmentsOrErr() ([]*Shipment, error) {
	if e.loadedTypes[3] {
		return e.Shipments, nil
	}
	return nil, &NotLoadedError{edge: "shipments"}
}

// ShipmentCommentsOrErr returns the ShipmentComments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ShipmentCommentsOrErr() ([]*ShipmentComment, error) {
	if e.loadedTypes[4] {
		return e.ShipmentComments, nil
	}
	return nil, &NotLoadedError{edge: "shipment_comments"}
}

// ShipmentChargesOrErr returns the ShipmentCharges value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ShipmentChargesOrErr() ([]*ShipmentCharges, error) {
	if e.loadedTypes[5] {
		return e.ShipmentCharges, nil
	}
	return nil, &NotLoadedError{edge: "shipment_charges"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsAdmin, user.FieldIsSuperAdmin:
			values[i] = new(sql.NullBool)
		case user.FieldVersion:
			values[i] = new(sql.NullInt64)
		case user.FieldStatus, user.FieldName, user.FieldUsername, user.FieldPassword, user.FieldEmail, user.FieldTimezone, user.FieldProfilePicURL, user.FieldThumbnailURL, user.FieldPhoneNumber:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldLastLogin:
			values[i] = new(sql.NullTime)
		case user.FieldID, user.FieldBusinessUnitID, user.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				u.BusinessUnitID = *value
			}
		case user.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				u.OrganizationID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				u.Version = int(value.Int64)
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = user.Status(value.String)
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				u.Timezone = user.Timezone(value.String)
			}
		case user.FieldProfilePicURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_pic_url", values[i])
			} else if value.Valid {
				u.ProfilePicURL = value.String
			}
		case user.FieldThumbnailURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_url", values[i])
			} else if value.Valid {
				u.ThumbnailURL = value.String
			}
		case user.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				u.PhoneNumber = value.String
			}
		case user.FieldIsAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_admin", values[i])
			} else if value.Valid {
				u.IsAdmin = value.Bool
			}
		case user.FieldIsSuperAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_super_admin", values[i])
			} else if value.Valid {
				u.IsSuperAdmin = value.Bool
			}
		case user.FieldLastLogin:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login", values[i])
			} else if value.Valid {
				u.LastLogin = new(time.Time)
				*u.LastLogin = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the User entity.
func (u *User) QueryBusinessUnit() *BusinessUnitQuery {
	return NewUserClient(u.config).QueryBusinessUnit(u)
}

// QueryOrganization queries the "organization" edge of the User entity.
func (u *User) QueryOrganization() *OrganizationQuery {
	return NewUserClient(u.config).QueryOrganization(u)
}

// QueryUserFavorites queries the "user_favorites" edge of the User entity.
func (u *User) QueryUserFavorites() *UserFavoriteQuery {
	return NewUserClient(u.config).QueryUserFavorites(u)
}

// QueryShipments queries the "shipments" edge of the User entity.
func (u *User) QueryShipments() *ShipmentQuery {
	return NewUserClient(u.config).QueryShipments(u)
}

// QueryShipmentComments queries the "shipment_comments" edge of the User entity.
func (u *User) QueryShipmentComments() *ShipmentCommentQuery {
	return NewUserClient(u.config).QueryShipmentComments(u)
}

// QueryShipmentCharges queries the "shipment_charges" edge of the User entity.
func (u *User) QueryShipmentCharges() *ShipmentChargesQuery {
	return NewUserClient(u.config).QueryShipmentCharges(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", u.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", u.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", u.Version))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(fmt.Sprintf("%v", u.Timezone))
	builder.WriteString(", ")
	builder.WriteString("profile_pic_url=")
	builder.WriteString(u.ProfilePicURL)
	builder.WriteString(", ")
	builder.WriteString("thumbnail_url=")
	builder.WriteString(u.ThumbnailURL)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(u.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("is_admin=")
	builder.WriteString(fmt.Sprintf("%v", u.IsAdmin))
	builder.WriteString(", ")
	builder.WriteString("is_super_admin=")
	builder.WriteString(fmt.Sprintf("%v", u.IsSuperAdmin))
	builder.WriteString(", ")
	if v := u.LastLogin; v != nil {
		builder.WriteString("last_login=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedUserFavorites returns the UserFavorites named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedUserFavorites(name string) ([]*UserFavorite, error) {
	if u.Edges.namedUserFavorites == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedUserFavorites[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedUserFavorites(name string, edges ...*UserFavorite) {
	if u.Edges.namedUserFavorites == nil {
		u.Edges.namedUserFavorites = make(map[string][]*UserFavorite)
	}
	if len(edges) == 0 {
		u.Edges.namedUserFavorites[name] = []*UserFavorite{}
	} else {
		u.Edges.namedUserFavorites[name] = append(u.Edges.namedUserFavorites[name], edges...)
	}
}

// NamedShipments returns the Shipments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedShipments(name string) ([]*Shipment, error) {
	if u.Edges.namedShipments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedShipments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedShipments(name string, edges ...*Shipment) {
	if u.Edges.namedShipments == nil {
		u.Edges.namedShipments = make(map[string][]*Shipment)
	}
	if len(edges) == 0 {
		u.Edges.namedShipments[name] = []*Shipment{}
	} else {
		u.Edges.namedShipments[name] = append(u.Edges.namedShipments[name], edges...)
	}
}

// NamedShipmentComments returns the ShipmentComments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedShipmentComments(name string) ([]*ShipmentComment, error) {
	if u.Edges.namedShipmentComments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedShipmentComments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedShipmentComments(name string, edges ...*ShipmentComment) {
	if u.Edges.namedShipmentComments == nil {
		u.Edges.namedShipmentComments = make(map[string][]*ShipmentComment)
	}
	if len(edges) == 0 {
		u.Edges.namedShipmentComments[name] = []*ShipmentComment{}
	} else {
		u.Edges.namedShipmentComments[name] = append(u.Edges.namedShipmentComments[name], edges...)
	}
}

// NamedShipmentCharges returns the ShipmentCharges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedShipmentCharges(name string) ([]*ShipmentCharges, error) {
	if u.Edges.namedShipmentCharges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedShipmentCharges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedShipmentCharges(name string, edges ...*ShipmentCharges) {
	if u.Edges.namedShipmentCharges == nil {
		u.Edges.namedShipmentCharges = make(map[string][]*ShipmentCharges)
	}
	if len(edges) == 0 {
		u.Edges.namedShipmentCharges[name] = []*ShipmentCharges{}
	} else {
		u.Edges.namedShipmentCharges[name] = append(u.Edges.namedShipmentCharges[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
