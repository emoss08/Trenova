// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/customerruleprofile"
	"github.com/emoss08/trenova/internal/ent/documentclassification"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// CustomerRuleProfileUpdate is the builder for updating CustomerRuleProfile entities.
type CustomerRuleProfileUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerRuleProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerRuleProfileUpdate builder.
func (crpu *CustomerRuleProfileUpdate) Where(ps ...predicate.CustomerRuleProfile) *CustomerRuleProfileUpdate {
	crpu.mutation.Where(ps...)
	return crpu
}

// SetOrganizationID sets the "organization_id" field.
func (crpu *CustomerRuleProfileUpdate) SetOrganizationID(u uuid.UUID) *CustomerRuleProfileUpdate {
	crpu.mutation.SetOrganizationID(u)
	return crpu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (crpu *CustomerRuleProfileUpdate) SetNillableOrganizationID(u *uuid.UUID) *CustomerRuleProfileUpdate {
	if u != nil {
		crpu.SetOrganizationID(*u)
	}
	return crpu
}

// SetUpdatedAt sets the "updated_at" field.
func (crpu *CustomerRuleProfileUpdate) SetUpdatedAt(t time.Time) *CustomerRuleProfileUpdate {
	crpu.mutation.SetUpdatedAt(t)
	return crpu
}

// SetVersion sets the "version" field.
func (crpu *CustomerRuleProfileUpdate) SetVersion(i int) *CustomerRuleProfileUpdate {
	crpu.mutation.ResetVersion()
	crpu.mutation.SetVersion(i)
	return crpu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (crpu *CustomerRuleProfileUpdate) SetNillableVersion(i *int) *CustomerRuleProfileUpdate {
	if i != nil {
		crpu.SetVersion(*i)
	}
	return crpu
}

// AddVersion adds i to the "version" field.
func (crpu *CustomerRuleProfileUpdate) AddVersion(i int) *CustomerRuleProfileUpdate {
	crpu.mutation.AddVersion(i)
	return crpu
}

// SetBillingCycle sets the "billing_cycle" field.
func (crpu *CustomerRuleProfileUpdate) SetBillingCycle(cc customerruleprofile.BillingCycle) *CustomerRuleProfileUpdate {
	crpu.mutation.SetBillingCycle(cc)
	return crpu
}

// SetNillableBillingCycle sets the "billing_cycle" field if the given value is not nil.
func (crpu *CustomerRuleProfileUpdate) SetNillableBillingCycle(cc *customerruleprofile.BillingCycle) *CustomerRuleProfileUpdate {
	if cc != nil {
		crpu.SetBillingCycle(*cc)
	}
	return crpu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (crpu *CustomerRuleProfileUpdate) SetOrganization(o *Organization) *CustomerRuleProfileUpdate {
	return crpu.SetOrganizationID(o.ID)
}

// AddDocumentClassificationIDs adds the "document_classifications" edge to the DocumentClassification entity by IDs.
func (crpu *CustomerRuleProfileUpdate) AddDocumentClassificationIDs(ids ...uuid.UUID) *CustomerRuleProfileUpdate {
	crpu.mutation.AddDocumentClassificationIDs(ids...)
	return crpu
}

// AddDocumentClassifications adds the "document_classifications" edges to the DocumentClassification entity.
func (crpu *CustomerRuleProfileUpdate) AddDocumentClassifications(d ...*DocumentClassification) *CustomerRuleProfileUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return crpu.AddDocumentClassificationIDs(ids...)
}

// Mutation returns the CustomerRuleProfileMutation object of the builder.
func (crpu *CustomerRuleProfileUpdate) Mutation() *CustomerRuleProfileMutation {
	return crpu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (crpu *CustomerRuleProfileUpdate) ClearOrganization() *CustomerRuleProfileUpdate {
	crpu.mutation.ClearOrganization()
	return crpu
}

// ClearDocumentClassifications clears all "document_classifications" edges to the DocumentClassification entity.
func (crpu *CustomerRuleProfileUpdate) ClearDocumentClassifications() *CustomerRuleProfileUpdate {
	crpu.mutation.ClearDocumentClassifications()
	return crpu
}

// RemoveDocumentClassificationIDs removes the "document_classifications" edge to DocumentClassification entities by IDs.
func (crpu *CustomerRuleProfileUpdate) RemoveDocumentClassificationIDs(ids ...uuid.UUID) *CustomerRuleProfileUpdate {
	crpu.mutation.RemoveDocumentClassificationIDs(ids...)
	return crpu
}

// RemoveDocumentClassifications removes "document_classifications" edges to DocumentClassification entities.
func (crpu *CustomerRuleProfileUpdate) RemoveDocumentClassifications(d ...*DocumentClassification) *CustomerRuleProfileUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return crpu.RemoveDocumentClassificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (crpu *CustomerRuleProfileUpdate) Save(ctx context.Context) (int, error) {
	crpu.defaults()
	return withHooks(ctx, crpu.sqlSave, crpu.mutation, crpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crpu *CustomerRuleProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := crpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (crpu *CustomerRuleProfileUpdate) Exec(ctx context.Context) error {
	_, err := crpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crpu *CustomerRuleProfileUpdate) ExecX(ctx context.Context) {
	if err := crpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crpu *CustomerRuleProfileUpdate) defaults() {
	if _, ok := crpu.mutation.UpdatedAt(); !ok {
		v := customerruleprofile.UpdateDefaultUpdatedAt()
		crpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crpu *CustomerRuleProfileUpdate) check() error {
	if v, ok := crpu.mutation.BillingCycle(); ok {
		if err := customerruleprofile.BillingCycleValidator(v); err != nil {
			return &ValidationError{Name: "billing_cycle", err: fmt.Errorf(`ent: validator failed for field "CustomerRuleProfile.billing_cycle": %w`, err)}
		}
	}
	if _, ok := crpu.mutation.BusinessUnitID(); crpu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerRuleProfile.business_unit"`)
	}
	if _, ok := crpu.mutation.OrganizationID(); crpu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerRuleProfile.organization"`)
	}
	if _, ok := crpu.mutation.CustomerID(); crpu.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerRuleProfile.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (crpu *CustomerRuleProfileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerRuleProfileUpdate {
	crpu.modifiers = append(crpu.modifiers, modifiers...)
	return crpu
}

func (crpu *CustomerRuleProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := crpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerruleprofile.Table, customerruleprofile.Columns, sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID))
	if ps := crpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crpu.mutation.UpdatedAt(); ok {
		_spec.SetField(customerruleprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := crpu.mutation.Version(); ok {
		_spec.SetField(customerruleprofile.FieldVersion, field.TypeInt, value)
	}
	if value, ok := crpu.mutation.AddedVersion(); ok {
		_spec.AddField(customerruleprofile.FieldVersion, field.TypeInt, value)
	}
	if value, ok := crpu.mutation.BillingCycle(); ok {
		_spec.SetField(customerruleprofile.FieldBillingCycle, field.TypeEnum, value)
	}
	if crpu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerruleprofile.OrganizationTable,
			Columns: []string{customerruleprofile.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crpu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerruleprofile.OrganizationTable,
			Columns: []string{customerruleprofile.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crpu.mutation.DocumentClassificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customerruleprofile.DocumentClassificationsTable,
			Columns: customerruleprofile.DocumentClassificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crpu.mutation.RemovedDocumentClassificationsIDs(); len(nodes) > 0 && !crpu.mutation.DocumentClassificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customerruleprofile.DocumentClassificationsTable,
			Columns: customerruleprofile.DocumentClassificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crpu.mutation.DocumentClassificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customerruleprofile.DocumentClassificationsTable,
			Columns: customerruleprofile.DocumentClassificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(crpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, crpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerruleprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	crpu.mutation.done = true
	return n, nil
}

// CustomerRuleProfileUpdateOne is the builder for updating a single CustomerRuleProfile entity.
type CustomerRuleProfileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerRuleProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (crpuo *CustomerRuleProfileUpdateOne) SetOrganizationID(u uuid.UUID) *CustomerRuleProfileUpdateOne {
	crpuo.mutation.SetOrganizationID(u)
	return crpuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (crpuo *CustomerRuleProfileUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *CustomerRuleProfileUpdateOne {
	if u != nil {
		crpuo.SetOrganizationID(*u)
	}
	return crpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (crpuo *CustomerRuleProfileUpdateOne) SetUpdatedAt(t time.Time) *CustomerRuleProfileUpdateOne {
	crpuo.mutation.SetUpdatedAt(t)
	return crpuo
}

// SetVersion sets the "version" field.
func (crpuo *CustomerRuleProfileUpdateOne) SetVersion(i int) *CustomerRuleProfileUpdateOne {
	crpuo.mutation.ResetVersion()
	crpuo.mutation.SetVersion(i)
	return crpuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (crpuo *CustomerRuleProfileUpdateOne) SetNillableVersion(i *int) *CustomerRuleProfileUpdateOne {
	if i != nil {
		crpuo.SetVersion(*i)
	}
	return crpuo
}

// AddVersion adds i to the "version" field.
func (crpuo *CustomerRuleProfileUpdateOne) AddVersion(i int) *CustomerRuleProfileUpdateOne {
	crpuo.mutation.AddVersion(i)
	return crpuo
}

// SetBillingCycle sets the "billing_cycle" field.
func (crpuo *CustomerRuleProfileUpdateOne) SetBillingCycle(cc customerruleprofile.BillingCycle) *CustomerRuleProfileUpdateOne {
	crpuo.mutation.SetBillingCycle(cc)
	return crpuo
}

// SetNillableBillingCycle sets the "billing_cycle" field if the given value is not nil.
func (crpuo *CustomerRuleProfileUpdateOne) SetNillableBillingCycle(cc *customerruleprofile.BillingCycle) *CustomerRuleProfileUpdateOne {
	if cc != nil {
		crpuo.SetBillingCycle(*cc)
	}
	return crpuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (crpuo *CustomerRuleProfileUpdateOne) SetOrganization(o *Organization) *CustomerRuleProfileUpdateOne {
	return crpuo.SetOrganizationID(o.ID)
}

// AddDocumentClassificationIDs adds the "document_classifications" edge to the DocumentClassification entity by IDs.
func (crpuo *CustomerRuleProfileUpdateOne) AddDocumentClassificationIDs(ids ...uuid.UUID) *CustomerRuleProfileUpdateOne {
	crpuo.mutation.AddDocumentClassificationIDs(ids...)
	return crpuo
}

// AddDocumentClassifications adds the "document_classifications" edges to the DocumentClassification entity.
func (crpuo *CustomerRuleProfileUpdateOne) AddDocumentClassifications(d ...*DocumentClassification) *CustomerRuleProfileUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return crpuo.AddDocumentClassificationIDs(ids...)
}

// Mutation returns the CustomerRuleProfileMutation object of the builder.
func (crpuo *CustomerRuleProfileUpdateOne) Mutation() *CustomerRuleProfileMutation {
	return crpuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (crpuo *CustomerRuleProfileUpdateOne) ClearOrganization() *CustomerRuleProfileUpdateOne {
	crpuo.mutation.ClearOrganization()
	return crpuo
}

// ClearDocumentClassifications clears all "document_classifications" edges to the DocumentClassification entity.
func (crpuo *CustomerRuleProfileUpdateOne) ClearDocumentClassifications() *CustomerRuleProfileUpdateOne {
	crpuo.mutation.ClearDocumentClassifications()
	return crpuo
}

// RemoveDocumentClassificationIDs removes the "document_classifications" edge to DocumentClassification entities by IDs.
func (crpuo *CustomerRuleProfileUpdateOne) RemoveDocumentClassificationIDs(ids ...uuid.UUID) *CustomerRuleProfileUpdateOne {
	crpuo.mutation.RemoveDocumentClassificationIDs(ids...)
	return crpuo
}

// RemoveDocumentClassifications removes "document_classifications" edges to DocumentClassification entities.
func (crpuo *CustomerRuleProfileUpdateOne) RemoveDocumentClassifications(d ...*DocumentClassification) *CustomerRuleProfileUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return crpuo.RemoveDocumentClassificationIDs(ids...)
}

// Where appends a list predicates to the CustomerRuleProfileUpdate builder.
func (crpuo *CustomerRuleProfileUpdateOne) Where(ps ...predicate.CustomerRuleProfile) *CustomerRuleProfileUpdateOne {
	crpuo.mutation.Where(ps...)
	return crpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (crpuo *CustomerRuleProfileUpdateOne) Select(field string, fields ...string) *CustomerRuleProfileUpdateOne {
	crpuo.fields = append([]string{field}, fields...)
	return crpuo
}

// Save executes the query and returns the updated CustomerRuleProfile entity.
func (crpuo *CustomerRuleProfileUpdateOne) Save(ctx context.Context) (*CustomerRuleProfile, error) {
	crpuo.defaults()
	return withHooks(ctx, crpuo.sqlSave, crpuo.mutation, crpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crpuo *CustomerRuleProfileUpdateOne) SaveX(ctx context.Context) *CustomerRuleProfile {
	node, err := crpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (crpuo *CustomerRuleProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := crpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crpuo *CustomerRuleProfileUpdateOne) ExecX(ctx context.Context) {
	if err := crpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crpuo *CustomerRuleProfileUpdateOne) defaults() {
	if _, ok := crpuo.mutation.UpdatedAt(); !ok {
		v := customerruleprofile.UpdateDefaultUpdatedAt()
		crpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crpuo *CustomerRuleProfileUpdateOne) check() error {
	if v, ok := crpuo.mutation.BillingCycle(); ok {
		if err := customerruleprofile.BillingCycleValidator(v); err != nil {
			return &ValidationError{Name: "billing_cycle", err: fmt.Errorf(`ent: validator failed for field "CustomerRuleProfile.billing_cycle": %w`, err)}
		}
	}
	if _, ok := crpuo.mutation.BusinessUnitID(); crpuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerRuleProfile.business_unit"`)
	}
	if _, ok := crpuo.mutation.OrganizationID(); crpuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerRuleProfile.organization"`)
	}
	if _, ok := crpuo.mutation.CustomerID(); crpuo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerRuleProfile.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (crpuo *CustomerRuleProfileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerRuleProfileUpdateOne {
	crpuo.modifiers = append(crpuo.modifiers, modifiers...)
	return crpuo
}

func (crpuo *CustomerRuleProfileUpdateOne) sqlSave(ctx context.Context) (_node *CustomerRuleProfile, err error) {
	if err := crpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerruleprofile.Table, customerruleprofile.Columns, sqlgraph.NewFieldSpec(customerruleprofile.FieldID, field.TypeUUID))
	id, ok := crpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerRuleProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := crpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customerruleprofile.FieldID)
		for _, f := range fields {
			if !customerruleprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customerruleprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := crpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customerruleprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := crpuo.mutation.Version(); ok {
		_spec.SetField(customerruleprofile.FieldVersion, field.TypeInt, value)
	}
	if value, ok := crpuo.mutation.AddedVersion(); ok {
		_spec.AddField(customerruleprofile.FieldVersion, field.TypeInt, value)
	}
	if value, ok := crpuo.mutation.BillingCycle(); ok {
		_spec.SetField(customerruleprofile.FieldBillingCycle, field.TypeEnum, value)
	}
	if crpuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerruleprofile.OrganizationTable,
			Columns: []string{customerruleprofile.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crpuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerruleprofile.OrganizationTable,
			Columns: []string{customerruleprofile.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crpuo.mutation.DocumentClassificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customerruleprofile.DocumentClassificationsTable,
			Columns: customerruleprofile.DocumentClassificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crpuo.mutation.RemovedDocumentClassificationsIDs(); len(nodes) > 0 && !crpuo.mutation.DocumentClassificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customerruleprofile.DocumentClassificationsTable,
			Columns: customerruleprofile.DocumentClassificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crpuo.mutation.DocumentClassificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customerruleprofile.DocumentClassificationsTable,
			Columns: customerruleprofile.DocumentClassificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(crpuo.modifiers...)
	_node = &CustomerRuleProfile{config: crpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, crpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerruleprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	crpuo.mutation.done = true
	return _node, nil
}
