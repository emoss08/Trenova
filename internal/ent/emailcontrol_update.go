// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/emailcontrol"
	"github.com/emoss08/trenova/internal/ent/emailprofile"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// EmailControlUpdate is the builder for updating EmailControl entities.
type EmailControlUpdate struct {
	config
	hooks     []Hook
	mutation  *EmailControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EmailControlUpdate builder.
func (ecu *EmailControlUpdate) Where(ps ...predicate.EmailControl) *EmailControlUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetUpdatedAt sets the "updated_at" field.
func (ecu *EmailControlUpdate) SetUpdatedAt(t time.Time) *EmailControlUpdate {
	ecu.mutation.SetUpdatedAt(t)
	return ecu
}

// SetBillingEmailProfileID sets the "billing_email_profile_id" field.
func (ecu *EmailControlUpdate) SetBillingEmailProfileID(u uuid.UUID) *EmailControlUpdate {
	ecu.mutation.SetBillingEmailProfileID(u)
	return ecu
}

// SetNillableBillingEmailProfileID sets the "billing_email_profile_id" field if the given value is not nil.
func (ecu *EmailControlUpdate) SetNillableBillingEmailProfileID(u *uuid.UUID) *EmailControlUpdate {
	if u != nil {
		ecu.SetBillingEmailProfileID(*u)
	}
	return ecu
}

// ClearBillingEmailProfileID clears the value of the "billing_email_profile_id" field.
func (ecu *EmailControlUpdate) ClearBillingEmailProfileID() *EmailControlUpdate {
	ecu.mutation.ClearBillingEmailProfileID()
	return ecu
}

// SetRateExpirtationEmailProfileID sets the "rate_expirtation_email_profile_id" field.
func (ecu *EmailControlUpdate) SetRateExpirtationEmailProfileID(u uuid.UUID) *EmailControlUpdate {
	ecu.mutation.SetRateExpirtationEmailProfileID(u)
	return ecu
}

// SetNillableRateExpirtationEmailProfileID sets the "rate_expirtation_email_profile_id" field if the given value is not nil.
func (ecu *EmailControlUpdate) SetNillableRateExpirtationEmailProfileID(u *uuid.UUID) *EmailControlUpdate {
	if u != nil {
		ecu.SetRateExpirtationEmailProfileID(*u)
	}
	return ecu
}

// ClearRateExpirtationEmailProfileID clears the value of the "rate_expirtation_email_profile_id" field.
func (ecu *EmailControlUpdate) ClearRateExpirtationEmailProfileID() *EmailControlUpdate {
	ecu.mutation.ClearRateExpirtationEmailProfileID()
	return ecu
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ecu *EmailControlUpdate) SetOrganizationID(id uuid.UUID) *EmailControlUpdate {
	ecu.mutation.SetOrganizationID(id)
	return ecu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ecu *EmailControlUpdate) SetOrganization(o *Organization) *EmailControlUpdate {
	return ecu.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (ecu *EmailControlUpdate) SetBusinessUnitID(id uuid.UUID) *EmailControlUpdate {
	ecu.mutation.SetBusinessUnitID(id)
	return ecu
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (ecu *EmailControlUpdate) SetBusinessUnit(b *BusinessUnit) *EmailControlUpdate {
	return ecu.SetBusinessUnitID(b.ID)
}

// SetBillingEmailProfile sets the "billing_email_profile" edge to the EmailProfile entity.
func (ecu *EmailControlUpdate) SetBillingEmailProfile(e *EmailProfile) *EmailControlUpdate {
	return ecu.SetBillingEmailProfileID(e.ID)
}

// SetRateEmailProfileID sets the "rate_email_profile" edge to the EmailProfile entity by ID.
func (ecu *EmailControlUpdate) SetRateEmailProfileID(id uuid.UUID) *EmailControlUpdate {
	ecu.mutation.SetRateEmailProfileID(id)
	return ecu
}

// SetNillableRateEmailProfileID sets the "rate_email_profile" edge to the EmailProfile entity by ID if the given value is not nil.
func (ecu *EmailControlUpdate) SetNillableRateEmailProfileID(id *uuid.UUID) *EmailControlUpdate {
	if id != nil {
		ecu = ecu.SetRateEmailProfileID(*id)
	}
	return ecu
}

// SetRateEmailProfile sets the "rate_email_profile" edge to the EmailProfile entity.
func (ecu *EmailControlUpdate) SetRateEmailProfile(e *EmailProfile) *EmailControlUpdate {
	return ecu.SetRateEmailProfileID(e.ID)
}

// Mutation returns the EmailControlMutation object of the builder.
func (ecu *EmailControlUpdate) Mutation() *EmailControlMutation {
	return ecu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ecu *EmailControlUpdate) ClearOrganization() *EmailControlUpdate {
	ecu.mutation.ClearOrganization()
	return ecu
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (ecu *EmailControlUpdate) ClearBusinessUnit() *EmailControlUpdate {
	ecu.mutation.ClearBusinessUnit()
	return ecu
}

// ClearBillingEmailProfile clears the "billing_email_profile" edge to the EmailProfile entity.
func (ecu *EmailControlUpdate) ClearBillingEmailProfile() *EmailControlUpdate {
	ecu.mutation.ClearBillingEmailProfile()
	return ecu
}

// ClearRateEmailProfile clears the "rate_email_profile" edge to the EmailProfile entity.
func (ecu *EmailControlUpdate) ClearRateEmailProfile() *EmailControlUpdate {
	ecu.mutation.ClearRateEmailProfile()
	return ecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EmailControlUpdate) Save(ctx context.Context) (int, error) {
	ecu.defaults()
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EmailControlUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EmailControlUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EmailControlUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecu *EmailControlUpdate) defaults() {
	if _, ok := ecu.mutation.UpdatedAt(); !ok {
		v := emailcontrol.UpdateDefaultUpdatedAt()
		ecu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecu *EmailControlUpdate) check() error {
	if _, ok := ecu.mutation.OrganizationID(); ecu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailControl.organization"`)
	}
	if _, ok := ecu.mutation.BusinessUnitID(); ecu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ecu *EmailControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EmailControlUpdate {
	ecu.modifiers = append(ecu.modifiers, modifiers...)
	return ecu
}

func (ecu *EmailControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailcontrol.Table, emailcontrol.Columns, sqlgraph.NewFieldSpec(emailcontrol.FieldID, field.TypeUUID))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.UpdatedAt(); ok {
		_spec.SetField(emailcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if ecu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailcontrol.OrganizationTable,
			Columns: []string{emailcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailcontrol.OrganizationTable,
			Columns: []string{emailcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BusinessUnitTable,
			Columns: []string{emailcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BusinessUnitTable,
			Columns: []string{emailcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.BillingEmailProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BillingEmailProfileTable,
			Columns: []string{emailcontrol.BillingEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.BillingEmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BillingEmailProfileTable,
			Columns: []string{emailcontrol.BillingEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.RateEmailProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.RateEmailProfileTable,
			Columns: []string{emailcontrol.RateEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.RateEmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.RateEmailProfileTable,
			Columns: []string{emailcontrol.RateEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ecu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// EmailControlUpdateOne is the builder for updating a single EmailControl entity.
type EmailControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EmailControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ecuo *EmailControlUpdateOne) SetUpdatedAt(t time.Time) *EmailControlUpdateOne {
	ecuo.mutation.SetUpdatedAt(t)
	return ecuo
}

// SetBillingEmailProfileID sets the "billing_email_profile_id" field.
func (ecuo *EmailControlUpdateOne) SetBillingEmailProfileID(u uuid.UUID) *EmailControlUpdateOne {
	ecuo.mutation.SetBillingEmailProfileID(u)
	return ecuo
}

// SetNillableBillingEmailProfileID sets the "billing_email_profile_id" field if the given value is not nil.
func (ecuo *EmailControlUpdateOne) SetNillableBillingEmailProfileID(u *uuid.UUID) *EmailControlUpdateOne {
	if u != nil {
		ecuo.SetBillingEmailProfileID(*u)
	}
	return ecuo
}

// ClearBillingEmailProfileID clears the value of the "billing_email_profile_id" field.
func (ecuo *EmailControlUpdateOne) ClearBillingEmailProfileID() *EmailControlUpdateOne {
	ecuo.mutation.ClearBillingEmailProfileID()
	return ecuo
}

// SetRateExpirtationEmailProfileID sets the "rate_expirtation_email_profile_id" field.
func (ecuo *EmailControlUpdateOne) SetRateExpirtationEmailProfileID(u uuid.UUID) *EmailControlUpdateOne {
	ecuo.mutation.SetRateExpirtationEmailProfileID(u)
	return ecuo
}

// SetNillableRateExpirtationEmailProfileID sets the "rate_expirtation_email_profile_id" field if the given value is not nil.
func (ecuo *EmailControlUpdateOne) SetNillableRateExpirtationEmailProfileID(u *uuid.UUID) *EmailControlUpdateOne {
	if u != nil {
		ecuo.SetRateExpirtationEmailProfileID(*u)
	}
	return ecuo
}

// ClearRateExpirtationEmailProfileID clears the value of the "rate_expirtation_email_profile_id" field.
func (ecuo *EmailControlUpdateOne) ClearRateExpirtationEmailProfileID() *EmailControlUpdateOne {
	ecuo.mutation.ClearRateExpirtationEmailProfileID()
	return ecuo
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ecuo *EmailControlUpdateOne) SetOrganizationID(id uuid.UUID) *EmailControlUpdateOne {
	ecuo.mutation.SetOrganizationID(id)
	return ecuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ecuo *EmailControlUpdateOne) SetOrganization(o *Organization) *EmailControlUpdateOne {
	return ecuo.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (ecuo *EmailControlUpdateOne) SetBusinessUnitID(id uuid.UUID) *EmailControlUpdateOne {
	ecuo.mutation.SetBusinessUnitID(id)
	return ecuo
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (ecuo *EmailControlUpdateOne) SetBusinessUnit(b *BusinessUnit) *EmailControlUpdateOne {
	return ecuo.SetBusinessUnitID(b.ID)
}

// SetBillingEmailProfile sets the "billing_email_profile" edge to the EmailProfile entity.
func (ecuo *EmailControlUpdateOne) SetBillingEmailProfile(e *EmailProfile) *EmailControlUpdateOne {
	return ecuo.SetBillingEmailProfileID(e.ID)
}

// SetRateEmailProfileID sets the "rate_email_profile" edge to the EmailProfile entity by ID.
func (ecuo *EmailControlUpdateOne) SetRateEmailProfileID(id uuid.UUID) *EmailControlUpdateOne {
	ecuo.mutation.SetRateEmailProfileID(id)
	return ecuo
}

// SetNillableRateEmailProfileID sets the "rate_email_profile" edge to the EmailProfile entity by ID if the given value is not nil.
func (ecuo *EmailControlUpdateOne) SetNillableRateEmailProfileID(id *uuid.UUID) *EmailControlUpdateOne {
	if id != nil {
		ecuo = ecuo.SetRateEmailProfileID(*id)
	}
	return ecuo
}

// SetRateEmailProfile sets the "rate_email_profile" edge to the EmailProfile entity.
func (ecuo *EmailControlUpdateOne) SetRateEmailProfile(e *EmailProfile) *EmailControlUpdateOne {
	return ecuo.SetRateEmailProfileID(e.ID)
}

// Mutation returns the EmailControlMutation object of the builder.
func (ecuo *EmailControlUpdateOne) Mutation() *EmailControlMutation {
	return ecuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ecuo *EmailControlUpdateOne) ClearOrganization() *EmailControlUpdateOne {
	ecuo.mutation.ClearOrganization()
	return ecuo
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (ecuo *EmailControlUpdateOne) ClearBusinessUnit() *EmailControlUpdateOne {
	ecuo.mutation.ClearBusinessUnit()
	return ecuo
}

// ClearBillingEmailProfile clears the "billing_email_profile" edge to the EmailProfile entity.
func (ecuo *EmailControlUpdateOne) ClearBillingEmailProfile() *EmailControlUpdateOne {
	ecuo.mutation.ClearBillingEmailProfile()
	return ecuo
}

// ClearRateEmailProfile clears the "rate_email_profile" edge to the EmailProfile entity.
func (ecuo *EmailControlUpdateOne) ClearRateEmailProfile() *EmailControlUpdateOne {
	ecuo.mutation.ClearRateEmailProfile()
	return ecuo
}

// Where appends a list predicates to the EmailControlUpdate builder.
func (ecuo *EmailControlUpdateOne) Where(ps ...predicate.EmailControl) *EmailControlUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EmailControlUpdateOne) Select(field string, fields ...string) *EmailControlUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EmailControl entity.
func (ecuo *EmailControlUpdateOne) Save(ctx context.Context) (*EmailControl, error) {
	ecuo.defaults()
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EmailControlUpdateOne) SaveX(ctx context.Context) *EmailControl {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EmailControlUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EmailControlUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecuo *EmailControlUpdateOne) defaults() {
	if _, ok := ecuo.mutation.UpdatedAt(); !ok {
		v := emailcontrol.UpdateDefaultUpdatedAt()
		ecuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecuo *EmailControlUpdateOne) check() error {
	if _, ok := ecuo.mutation.OrganizationID(); ecuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailControl.organization"`)
	}
	if _, ok := ecuo.mutation.BusinessUnitID(); ecuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ecuo *EmailControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EmailControlUpdateOne {
	ecuo.modifiers = append(ecuo.modifiers, modifiers...)
	return ecuo
}

func (ecuo *EmailControlUpdateOne) sqlSave(ctx context.Context) (_node *EmailControl, err error) {
	if err := ecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailcontrol.Table, emailcontrol.Columns, sqlgraph.NewFieldSpec(emailcontrol.FieldID, field.TypeUUID))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailcontrol.FieldID)
		for _, f := range fields {
			if !emailcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if ecuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailcontrol.OrganizationTable,
			Columns: []string{emailcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailcontrol.OrganizationTable,
			Columns: []string{emailcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BusinessUnitTable,
			Columns: []string{emailcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BusinessUnitTable,
			Columns: []string{emailcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.BillingEmailProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BillingEmailProfileTable,
			Columns: []string{emailcontrol.BillingEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.BillingEmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BillingEmailProfileTable,
			Columns: []string{emailcontrol.BillingEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.RateEmailProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.RateEmailProfileTable,
			Columns: []string{emailcontrol.RateEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.RateEmailProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.RateEmailProfileTable,
			Columns: []string{emailcontrol.RateEmailProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ecuo.modifiers...)
	_node = &EmailControl{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
