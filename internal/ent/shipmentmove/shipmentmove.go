// Code generated by entc, DO NOT EDIT.

package shipmentmove

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the shipmentmove type in the database.
	Label = "shipment_move"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldReferenceNumber holds the string denoting the reference_number field in the database.
	FieldReferenceNumber = "reference_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsLoaded holds the string denoting the is_loaded field in the database.
	FieldIsLoaded = "is_loaded"
	// FieldShipmentID holds the string denoting the shipment_id field in the database.
	FieldShipmentID = "shipment_id"
	// FieldTractorID holds the string denoting the tractor_id field in the database.
	FieldTractorID = "tractor_id"
	// FieldTrailerID holds the string denoting the trailer_id field in the database.
	FieldTrailerID = "trailer_id"
	// FieldPrimaryWorkerID holds the string denoting the primary_worker_id field in the database.
	FieldPrimaryWorkerID = "primary_worker_id"
	// FieldSecondaryWorkerID holds the string denoting the secondary_worker_id field in the database.
	FieldSecondaryWorkerID = "secondary_worker_id"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeShipment holds the string denoting the shipment edge name in mutations.
	EdgeShipment = "shipment"
	// EdgeTractor holds the string denoting the tractor edge name in mutations.
	EdgeTractor = "tractor"
	// EdgeTrailer holds the string denoting the trailer edge name in mutations.
	EdgeTrailer = "trailer"
	// EdgePrimaryWorker holds the string denoting the primary_worker edge name in mutations.
	EdgePrimaryWorker = "primary_worker"
	// EdgeSecondaryWorker holds the string denoting the secondary_worker edge name in mutations.
	EdgeSecondaryWorker = "secondary_worker"
	// EdgeMoveStops holds the string denoting the move_stops edge name in mutations.
	EdgeMoveStops = "move_stops"
	// Table holds the table name of the shipmentmove in the database.
	Table = "shipment_moves"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "shipment_moves"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "shipment_moves"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// ShipmentTable is the table that holds the shipment relation/edge.
	ShipmentTable = "shipment_moves"
	// ShipmentInverseTable is the table name for the Shipment entity.
	// It exists in this package in order to avoid circular dependency with the "shipment" package.
	ShipmentInverseTable = "shipments"
	// ShipmentColumn is the table column denoting the shipment relation/edge.
	ShipmentColumn = "shipment_id"
	// TractorTable is the table that holds the tractor relation/edge.
	TractorTable = "shipment_moves"
	// TractorInverseTable is the table name for the Tractor entity.
	// It exists in this package in order to avoid circular dependency with the "tractor" package.
	TractorInverseTable = "tractors"
	// TractorColumn is the table column denoting the tractor relation/edge.
	TractorColumn = "tractor_id"
	// TrailerTable is the table that holds the trailer relation/edge.
	TrailerTable = "shipment_moves"
	// TrailerInverseTable is the table name for the Tractor entity.
	// It exists in this package in order to avoid circular dependency with the "tractor" package.
	TrailerInverseTable = "tractors"
	// TrailerColumn is the table column denoting the trailer relation/edge.
	TrailerColumn = "trailer_id"
	// PrimaryWorkerTable is the table that holds the primary_worker relation/edge.
	PrimaryWorkerTable = "shipment_moves"
	// PrimaryWorkerInverseTable is the table name for the Worker entity.
	// It exists in this package in order to avoid circular dependency with the "worker" package.
	PrimaryWorkerInverseTable = "workers"
	// PrimaryWorkerColumn is the table column denoting the primary_worker relation/edge.
	PrimaryWorkerColumn = "primary_worker_id"
	// SecondaryWorkerTable is the table that holds the secondary_worker relation/edge.
	SecondaryWorkerTable = "shipment_moves"
	// SecondaryWorkerInverseTable is the table name for the Worker entity.
	// It exists in this package in order to avoid circular dependency with the "worker" package.
	SecondaryWorkerInverseTable = "workers"
	// SecondaryWorkerColumn is the table column denoting the secondary_worker relation/edge.
	SecondaryWorkerColumn = "secondary_worker_id"
	// MoveStopsTable is the table that holds the move_stops relation/edge.
	MoveStopsTable = "stops"
	// MoveStopsInverseTable is the table name for the Stop entity.
	// It exists in this package in order to avoid circular dependency with the "stop" package.
	MoveStopsInverseTable = "stops"
	// MoveStopsColumn is the table column denoting the move_stops relation/edge.
	MoveStopsColumn = "shipment_move_id"
)

// Columns holds all SQL columns for shipmentmove fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVersion,
	FieldReferenceNumber,
	FieldStatus,
	FieldIsLoaded,
	FieldShipmentID,
	FieldTractorID,
	FieldTrailerID,
	FieldPrimaryWorkerID,
	FieldSecondaryWorkerID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// ReferenceNumberValidator is a validator for the "reference_number" field. It is called by the builders before save.
	ReferenceNumberValidator func(string) error
	// DefaultIsLoaded holds the default value on creation for the "is_loaded" field.
	DefaultIsLoaded bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusNew is the default value of the Status enum.
const DefaultStatus = StatusNew

// Status values.
const (
	StatusNew        Status = "New"
	StatusInProgress Status = "InProgress"
	StatusCompleted  Status = "Completed"
	StatusVoided     Status = "Voided"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusNew, StatusInProgress, StatusCompleted, StatusVoided:
		return nil
	default:
		return fmt.Errorf("shipmentmove: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ShipmentMove queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByReferenceNumber orders the results by the reference_number field.
func ByReferenceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceNumber, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsLoaded orders the results by the is_loaded field.
func ByIsLoaded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLoaded, opts...).ToFunc()
}

// ByShipmentID orders the results by the shipment_id field.
func ByShipmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmentID, opts...).ToFunc()
}

// ByTractorID orders the results by the tractor_id field.
func ByTractorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTractorID, opts...).ToFunc()
}

// ByTrailerID orders the results by the trailer_id field.
func ByTrailerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrailerID, opts...).ToFunc()
}

// ByPrimaryWorkerID orders the results by the primary_worker_id field.
func ByPrimaryWorkerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryWorkerID, opts...).ToFunc()
}

// BySecondaryWorkerID orders the results by the secondary_worker_id field.
func BySecondaryWorkerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondaryWorkerID, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentField orders the results by shipment field.
func ByShipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByTractorField orders the results by tractor field.
func ByTractorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTractorStep(), sql.OrderByField(field, opts...))
	}
}

// ByTrailerField orders the results by trailer field.
func ByTrailerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrailerStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrimaryWorkerField orders the results by primary_worker field.
func ByPrimaryWorkerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrimaryWorkerStep(), sql.OrderByField(field, opts...))
	}
}

// BySecondaryWorkerField orders the results by secondary_worker field.
func BySecondaryWorkerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSecondaryWorkerStep(), sql.OrderByField(field, opts...))
	}
}

// ByMoveStopsCount orders the results by move_stops count.
func ByMoveStopsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMoveStopsStep(), opts...)
	}
}

// ByMoveStops orders the results by move_stops terms.
func ByMoveStops(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMoveStopsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newShipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ShipmentTable, ShipmentColumn),
	)
}
func newTractorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TractorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TractorTable, TractorColumn),
	)
}
func newTrailerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrailerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TrailerTable, TrailerColumn),
	)
}
func newPrimaryWorkerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrimaryWorkerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PrimaryWorkerTable, PrimaryWorkerColumn),
	)
}
func newSecondaryWorkerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SecondaryWorkerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SecondaryWorkerTable, SecondaryWorkerColumn),
	)
}
func newMoveStopsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MoveStopsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MoveStopsTable, MoveStopsColumn),
	)
}
