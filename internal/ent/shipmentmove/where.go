// Code generated by entc, DO NOT EDIT.

package shipmentmove

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldVersion, v))
}

// ReferenceNumber applies equality check predicate on the "reference_number" field. It's identical to ReferenceNumberEQ.
func ReferenceNumber(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldReferenceNumber, v))
}

// IsLoaded applies equality check predicate on the "is_loaded" field. It's identical to IsLoadedEQ.
func IsLoaded(v bool) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldIsLoaded, v))
}

// ShipmentID applies equality check predicate on the "shipment_id" field. It's identical to ShipmentIDEQ.
func ShipmentID(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldShipmentID, v))
}

// TractorID applies equality check predicate on the "tractor_id" field. It's identical to TractorIDEQ.
func TractorID(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldTractorID, v))
}

// TrailerID applies equality check predicate on the "trailer_id" field. It's identical to TrailerIDEQ.
func TrailerID(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldTrailerID, v))
}

// PrimaryWorkerID applies equality check predicate on the "primary_worker_id" field. It's identical to PrimaryWorkerIDEQ.
func PrimaryWorkerID(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldPrimaryWorkerID, v))
}

// SecondaryWorkerID applies equality check predicate on the "secondary_worker_id" field. It's identical to SecondaryWorkerIDEQ.
func SecondaryWorkerID(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldSecondaryWorkerID, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLTE(FieldVersion, v))
}

// ReferenceNumberEQ applies the EQ predicate on the "reference_number" field.
func ReferenceNumberEQ(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldReferenceNumber, v))
}

// ReferenceNumberNEQ applies the NEQ predicate on the "reference_number" field.
func ReferenceNumberNEQ(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldReferenceNumber, v))
}

// ReferenceNumberIn applies the In predicate on the "reference_number" field.
func ReferenceNumberIn(vs ...string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldReferenceNumber, vs...))
}

// ReferenceNumberNotIn applies the NotIn predicate on the "reference_number" field.
func ReferenceNumberNotIn(vs ...string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldReferenceNumber, vs...))
}

// ReferenceNumberGT applies the GT predicate on the "reference_number" field.
func ReferenceNumberGT(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGT(FieldReferenceNumber, v))
}

// ReferenceNumberGTE applies the GTE predicate on the "reference_number" field.
func ReferenceNumberGTE(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldGTE(FieldReferenceNumber, v))
}

// ReferenceNumberLT applies the LT predicate on the "reference_number" field.
func ReferenceNumberLT(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLT(FieldReferenceNumber, v))
}

// ReferenceNumberLTE applies the LTE predicate on the "reference_number" field.
func ReferenceNumberLTE(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldLTE(FieldReferenceNumber, v))
}

// ReferenceNumberContains applies the Contains predicate on the "reference_number" field.
func ReferenceNumberContains(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldContains(FieldReferenceNumber, v))
}

// ReferenceNumberHasPrefix applies the HasPrefix predicate on the "reference_number" field.
func ReferenceNumberHasPrefix(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldHasPrefix(FieldReferenceNumber, v))
}

// ReferenceNumberHasSuffix applies the HasSuffix predicate on the "reference_number" field.
func ReferenceNumberHasSuffix(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldHasSuffix(FieldReferenceNumber, v))
}

// ReferenceNumberEqualFold applies the EqualFold predicate on the "reference_number" field.
func ReferenceNumberEqualFold(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEqualFold(FieldReferenceNumber, v))
}

// ReferenceNumberContainsFold applies the ContainsFold predicate on the "reference_number" field.
func ReferenceNumberContainsFold(v string) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldContainsFold(FieldReferenceNumber, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldStatus, vs...))
}

// IsLoadedEQ applies the EQ predicate on the "is_loaded" field.
func IsLoadedEQ(v bool) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldIsLoaded, v))
}

// IsLoadedNEQ applies the NEQ predicate on the "is_loaded" field.
func IsLoadedNEQ(v bool) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldIsLoaded, v))
}

// ShipmentIDEQ applies the EQ predicate on the "shipment_id" field.
func ShipmentIDEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldShipmentID, v))
}

// ShipmentIDNEQ applies the NEQ predicate on the "shipment_id" field.
func ShipmentIDNEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldShipmentID, v))
}

// ShipmentIDIn applies the In predicate on the "shipment_id" field.
func ShipmentIDIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldShipmentID, vs...))
}

// ShipmentIDNotIn applies the NotIn predicate on the "shipment_id" field.
func ShipmentIDNotIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldShipmentID, vs...))
}

// TractorIDEQ applies the EQ predicate on the "tractor_id" field.
func TractorIDEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldTractorID, v))
}

// TractorIDNEQ applies the NEQ predicate on the "tractor_id" field.
func TractorIDNEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldTractorID, v))
}

// TractorIDIn applies the In predicate on the "tractor_id" field.
func TractorIDIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldTractorID, vs...))
}

// TractorIDNotIn applies the NotIn predicate on the "tractor_id" field.
func TractorIDNotIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldTractorID, vs...))
}

// TractorIDIsNil applies the IsNil predicate on the "tractor_id" field.
func TractorIDIsNil() predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIsNull(FieldTractorID))
}

// TractorIDNotNil applies the NotNil predicate on the "tractor_id" field.
func TractorIDNotNil() predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotNull(FieldTractorID))
}

// TrailerIDEQ applies the EQ predicate on the "trailer_id" field.
func TrailerIDEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldTrailerID, v))
}

// TrailerIDNEQ applies the NEQ predicate on the "trailer_id" field.
func TrailerIDNEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldTrailerID, v))
}

// TrailerIDIn applies the In predicate on the "trailer_id" field.
func TrailerIDIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldTrailerID, vs...))
}

// TrailerIDNotIn applies the NotIn predicate on the "trailer_id" field.
func TrailerIDNotIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldTrailerID, vs...))
}

// TrailerIDIsNil applies the IsNil predicate on the "trailer_id" field.
func TrailerIDIsNil() predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIsNull(FieldTrailerID))
}

// TrailerIDNotNil applies the NotNil predicate on the "trailer_id" field.
func TrailerIDNotNil() predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotNull(FieldTrailerID))
}

// PrimaryWorkerIDEQ applies the EQ predicate on the "primary_worker_id" field.
func PrimaryWorkerIDEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldPrimaryWorkerID, v))
}

// PrimaryWorkerIDNEQ applies the NEQ predicate on the "primary_worker_id" field.
func PrimaryWorkerIDNEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldPrimaryWorkerID, v))
}

// PrimaryWorkerIDIn applies the In predicate on the "primary_worker_id" field.
func PrimaryWorkerIDIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldPrimaryWorkerID, vs...))
}

// PrimaryWorkerIDNotIn applies the NotIn predicate on the "primary_worker_id" field.
func PrimaryWorkerIDNotIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldPrimaryWorkerID, vs...))
}

// PrimaryWorkerIDIsNil applies the IsNil predicate on the "primary_worker_id" field.
func PrimaryWorkerIDIsNil() predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIsNull(FieldPrimaryWorkerID))
}

// PrimaryWorkerIDNotNil applies the NotNil predicate on the "primary_worker_id" field.
func PrimaryWorkerIDNotNil() predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotNull(FieldPrimaryWorkerID))
}

// SecondaryWorkerIDEQ applies the EQ predicate on the "secondary_worker_id" field.
func SecondaryWorkerIDEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldEQ(FieldSecondaryWorkerID, v))
}

// SecondaryWorkerIDNEQ applies the NEQ predicate on the "secondary_worker_id" field.
func SecondaryWorkerIDNEQ(v uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNEQ(FieldSecondaryWorkerID, v))
}

// SecondaryWorkerIDIn applies the In predicate on the "secondary_worker_id" field.
func SecondaryWorkerIDIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIn(FieldSecondaryWorkerID, vs...))
}

// SecondaryWorkerIDNotIn applies the NotIn predicate on the "secondary_worker_id" field.
func SecondaryWorkerIDNotIn(vs ...uuid.UUID) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotIn(FieldSecondaryWorkerID, vs...))
}

// SecondaryWorkerIDIsNil applies the IsNil predicate on the "secondary_worker_id" field.
func SecondaryWorkerIDIsNil() predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldIsNull(FieldSecondaryWorkerID))
}

// SecondaryWorkerIDNotNil applies the NotNil predicate on the "secondary_worker_id" field.
func SecondaryWorkerIDNotNil() predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.FieldNotNull(FieldSecondaryWorkerID))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipment applies the HasEdge predicate on the "shipment" edge.
func HasShipment() predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShipmentTable, ShipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentWith applies the HasEdge predicate on the "shipment" edge with a given conditions (other predicates).
func HasShipmentWith(preds ...predicate.Shipment) predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := newShipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTractor applies the HasEdge predicate on the "tractor" edge.
func HasTractor() predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TractorTable, TractorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTractorWith applies the HasEdge predicate on the "tractor" edge with a given conditions (other predicates).
func HasTractorWith(preds ...predicate.Tractor) predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := newTractorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrailer applies the HasEdge predicate on the "trailer" edge.
func HasTrailer() predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TrailerTable, TrailerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrailerWith applies the HasEdge predicate on the "trailer" edge with a given conditions (other predicates).
func HasTrailerWith(preds ...predicate.Tractor) predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := newTrailerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryWorker applies the HasEdge predicate on the "primary_worker" edge.
func HasPrimaryWorker() predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PrimaryWorkerTable, PrimaryWorkerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryWorkerWith applies the HasEdge predicate on the "primary_worker" edge with a given conditions (other predicates).
func HasPrimaryWorkerWith(preds ...predicate.Worker) predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := newPrimaryWorkerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSecondaryWorker applies the HasEdge predicate on the "secondary_worker" edge.
func HasSecondaryWorker() predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SecondaryWorkerTable, SecondaryWorkerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSecondaryWorkerWith applies the HasEdge predicate on the "secondary_worker" edge with a given conditions (other predicates).
func HasSecondaryWorkerWith(preds ...predicate.Worker) predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := newSecondaryWorkerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMoveStops applies the HasEdge predicate on the "move_stops" edge.
func HasMoveStops() predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MoveStopsTable, MoveStopsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMoveStopsWith applies the HasEdge predicate on the "move_stops" edge with a given conditions (other predicates).
func HasMoveStopsWith(preds ...predicate.Stop) predicate.ShipmentMove {
	return predicate.ShipmentMove(func(s *sql.Selector) {
		step := newMoveStopsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentMove) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentMove) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentMove) predicate.ShipmentMove {
	return predicate.ShipmentMove(sql.NotPredicates(p))
}
