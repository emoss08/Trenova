// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/workercomment"
)

// WorkerCommentDelete is the builder for deleting a WorkerComment entity.
type WorkerCommentDelete struct {
	config
	hooks    []Hook
	mutation *WorkerCommentMutation
}

// Where appends a list predicates to the WorkerCommentDelete builder.
func (wcd *WorkerCommentDelete) Where(ps ...predicate.WorkerComment) *WorkerCommentDelete {
	wcd.mutation.Where(ps...)
	return wcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wcd *WorkerCommentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wcd.sqlExec, wcd.mutation, wcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wcd *WorkerCommentDelete) ExecX(ctx context.Context) int {
	n, err := wcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wcd *WorkerCommentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workercomment.Table, sqlgraph.NewFieldSpec(workercomment.FieldID, field.TypeUUID))
	if ps := wcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wcd.mutation.done = true
	return affected, err
}

// WorkerCommentDeleteOne is the builder for deleting a single WorkerComment entity.
type WorkerCommentDeleteOne struct {
	wcd *WorkerCommentDelete
}

// Where appends a list predicates to the WorkerCommentDelete builder.
func (wcdo *WorkerCommentDeleteOne) Where(ps ...predicate.WorkerComment) *WorkerCommentDeleteOne {
	wcdo.wcd.mutation.Where(ps...)
	return wcdo
}

// Exec executes the deletion query.
func (wcdo *WorkerCommentDeleteOne) Exec(ctx context.Context) error {
	n, err := wcdo.wcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workercomment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wcdo *WorkerCommentDeleteOne) ExecX(ctx context.Context) {
	if err := wcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
