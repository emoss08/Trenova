// Code generated by entc, DO NOT EDIT.

package billingcontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// RemoveBillingHistory applies equality check predicate on the "remove_billing_history" field. It's identical to RemoveBillingHistoryEQ.
func RemoveBillingHistory(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldRemoveBillingHistory, v))
}

// AutoBillShipment applies equality check predicate on the "auto_bill_shipment" field. It's identical to AutoBillShipmentEQ.
func AutoBillShipment(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldAutoBillShipment, v))
}

// AutoMarkReadyToBill applies equality check predicate on the "auto_mark_ready_to_bill" field. It's identical to AutoMarkReadyToBillEQ.
func AutoMarkReadyToBill(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldAutoMarkReadyToBill, v))
}

// ValidateCustomerRates applies equality check predicate on the "validate_customer_rates" field. It's identical to ValidateCustomerRatesEQ.
func ValidateCustomerRates(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldValidateCustomerRates, v))
}

// EnforceCustomerBilling applies equality check predicate on the "enforce_customer_billing" field. It's identical to EnforceCustomerBillingEQ.
func EnforceCustomerBilling(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldEnforceCustomerBilling, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldLTE(FieldUpdatedAt, v))
}

// RemoveBillingHistoryEQ applies the EQ predicate on the "remove_billing_history" field.
func RemoveBillingHistoryEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldRemoveBillingHistory, v))
}

// RemoveBillingHistoryNEQ applies the NEQ predicate on the "remove_billing_history" field.
func RemoveBillingHistoryNEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldRemoveBillingHistory, v))
}

// AutoBillShipmentEQ applies the EQ predicate on the "auto_bill_shipment" field.
func AutoBillShipmentEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldAutoBillShipment, v))
}

// AutoBillShipmentNEQ applies the NEQ predicate on the "auto_bill_shipment" field.
func AutoBillShipmentNEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldAutoBillShipment, v))
}

// AutoMarkReadyToBillEQ applies the EQ predicate on the "auto_mark_ready_to_bill" field.
func AutoMarkReadyToBillEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldAutoMarkReadyToBill, v))
}

// AutoMarkReadyToBillNEQ applies the NEQ predicate on the "auto_mark_ready_to_bill" field.
func AutoMarkReadyToBillNEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldAutoMarkReadyToBill, v))
}

// ValidateCustomerRatesEQ applies the EQ predicate on the "validate_customer_rates" field.
func ValidateCustomerRatesEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldValidateCustomerRates, v))
}

// ValidateCustomerRatesNEQ applies the NEQ predicate on the "validate_customer_rates" field.
func ValidateCustomerRatesNEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldValidateCustomerRates, v))
}

// AutoBillCriteriaEQ applies the EQ predicate on the "auto_bill_criteria" field.
func AutoBillCriteriaEQ(v AutoBillCriteria) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldAutoBillCriteria, v))
}

// AutoBillCriteriaNEQ applies the NEQ predicate on the "auto_bill_criteria" field.
func AutoBillCriteriaNEQ(v AutoBillCriteria) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldAutoBillCriteria, v))
}

// AutoBillCriteriaIn applies the In predicate on the "auto_bill_criteria" field.
func AutoBillCriteriaIn(vs ...AutoBillCriteria) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldIn(FieldAutoBillCriteria, vs...))
}

// AutoBillCriteriaNotIn applies the NotIn predicate on the "auto_bill_criteria" field.
func AutoBillCriteriaNotIn(vs ...AutoBillCriteria) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNotIn(FieldAutoBillCriteria, vs...))
}

// ShipmentTransferCriteriaEQ applies the EQ predicate on the "shipment_transfer_criteria" field.
func ShipmentTransferCriteriaEQ(v ShipmentTransferCriteria) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldShipmentTransferCriteria, v))
}

// ShipmentTransferCriteriaNEQ applies the NEQ predicate on the "shipment_transfer_criteria" field.
func ShipmentTransferCriteriaNEQ(v ShipmentTransferCriteria) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldShipmentTransferCriteria, v))
}

// ShipmentTransferCriteriaIn applies the In predicate on the "shipment_transfer_criteria" field.
func ShipmentTransferCriteriaIn(vs ...ShipmentTransferCriteria) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldIn(FieldShipmentTransferCriteria, vs...))
}

// ShipmentTransferCriteriaNotIn applies the NotIn predicate on the "shipment_transfer_criteria" field.
func ShipmentTransferCriteriaNotIn(vs ...ShipmentTransferCriteria) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNotIn(FieldShipmentTransferCriteria, vs...))
}

// EnforceCustomerBillingEQ applies the EQ predicate on the "enforce_customer_billing" field.
func EnforceCustomerBillingEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldEQ(FieldEnforceCustomerBilling, v))
}

// EnforceCustomerBillingNEQ applies the NEQ predicate on the "enforce_customer_billing" field.
func EnforceCustomerBillingNEQ(v bool) predicate.BillingControl {
	return predicate.BillingControl(sql.FieldNEQ(FieldEnforceCustomerBilling, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.BillingControl {
	return predicate.BillingControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.BillingControl {
	return predicate.BillingControl(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.BillingControl {
	return predicate.BillingControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.BillingControl {
	return predicate.BillingControl(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingControl) predicate.BillingControl {
	return predicate.BillingControl(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingControl) predicate.BillingControl {
	return predicate.BillingControl(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingControl) predicate.BillingControl {
	return predicate.BillingControl(sql.NotPredicates(p))
}
