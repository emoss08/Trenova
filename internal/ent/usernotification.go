// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/user"
	"github.com/emoss08/trenova/internal/ent/usernotification"
	"github.com/google/uuid"
)

// UserNotification is the model entity for the UserNotification schema.
type UserNotification struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// The current version of this entity.
	Version int `json:"version" validate:"omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"userId"`
	// IsRead holds the value of the "is_read" field.
	IsRead bool `json:"isRead"`
	// Title holds the value of the "title" field.
	Title string `json:"title"`
	// Description holds the value of the "description" field.
	Description string `json:"description"`
	// URL to redirect the user to when the notification is clicked.
	ActionURL string `json:"actionUrl"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserNotificationQuery when eager-loading is set.
	Edges        UserNotificationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserNotificationEdges holds the relations/edges for other nodes in the graph.
type UserNotificationEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNotificationEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNotificationEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNotificationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserNotification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usernotification.FieldIsRead:
			values[i] = new(sql.NullBool)
		case usernotification.FieldVersion:
			values[i] = new(sql.NullInt64)
		case usernotification.FieldTitle, usernotification.FieldDescription, usernotification.FieldActionURL:
			values[i] = new(sql.NullString)
		case usernotification.FieldCreatedAt, usernotification.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case usernotification.FieldID, usernotification.FieldBusinessUnitID, usernotification.FieldOrganizationID, usernotification.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserNotification fields.
func (un *UserNotification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usernotification.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				un.ID = *value
			}
		case usernotification.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				un.BusinessUnitID = *value
			}
		case usernotification.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				un.OrganizationID = *value
			}
		case usernotification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				un.CreatedAt = value.Time
			}
		case usernotification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				un.UpdatedAt = value.Time
			}
		case usernotification.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				un.Version = int(value.Int64)
			}
		case usernotification.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				un.UserID = *value
			}
		case usernotification.FieldIsRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_read", values[i])
			} else if value.Valid {
				un.IsRead = value.Bool
			}
		case usernotification.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				un.Title = value.String
			}
		case usernotification.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				un.Description = value.String
			}
		case usernotification.FieldActionURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_url", values[i])
			} else if value.Valid {
				un.ActionURL = value.String
			}
		default:
			un.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserNotification.
// This includes values selected through modifiers, order, etc.
func (un *UserNotification) Value(name string) (ent.Value, error) {
	return un.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the UserNotification entity.
func (un *UserNotification) QueryBusinessUnit() *BusinessUnitQuery {
	return NewUserNotificationClient(un.config).QueryBusinessUnit(un)
}

// QueryOrganization queries the "organization" edge of the UserNotification entity.
func (un *UserNotification) QueryOrganization() *OrganizationQuery {
	return NewUserNotificationClient(un.config).QueryOrganization(un)
}

// QueryUser queries the "user" edge of the UserNotification entity.
func (un *UserNotification) QueryUser() *UserQuery {
	return NewUserNotificationClient(un.config).QueryUser(un)
}

// Update returns a builder for updating this UserNotification.
// Note that you need to call UserNotification.Unwrap() before calling this method if this UserNotification
// was returned from a transaction, and the transaction was committed or rolled back.
func (un *UserNotification) Update() *UserNotificationUpdateOne {
	return NewUserNotificationClient(un.config).UpdateOne(un)
}

// Unwrap unwraps the UserNotification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (un *UserNotification) Unwrap() *UserNotification {
	_tx, ok := un.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserNotification is not a transactional entity")
	}
	un.config.driver = _tx.drv
	return un
}

// String implements the fmt.Stringer.
func (un *UserNotification) String() string {
	var builder strings.Builder
	builder.WriteString("UserNotification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", un.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", un.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", un.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(un.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(un.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", un.Version))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", un.UserID))
	builder.WriteString(", ")
	builder.WriteString("is_read=")
	builder.WriteString(fmt.Sprintf("%v", un.IsRead))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(un.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(un.Description)
	builder.WriteString(", ")
	builder.WriteString("action_url=")
	builder.WriteString(un.ActionURL)
	builder.WriteByte(')')
	return builder.String()
}

// UserNotifications is a parsable slice of UserNotification.
type UserNotifications []*UserNotification
