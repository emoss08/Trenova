// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/deliveryslot"
	"github.com/emoss08/trenova/internal/ent/location"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/util/types"
	"github.com/google/uuid"
)

// DeliverySlotCreate is the builder for creating a DeliverySlot entity.
type DeliverySlotCreate struct {
	config
	mutation *DeliverySlotMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (dsc *DeliverySlotCreate) SetBusinessUnitID(u uuid.UUID) *DeliverySlotCreate {
	dsc.mutation.SetBusinessUnitID(u)
	return dsc
}

// SetOrganizationID sets the "organization_id" field.
func (dsc *DeliverySlotCreate) SetOrganizationID(u uuid.UUID) *DeliverySlotCreate {
	dsc.mutation.SetOrganizationID(u)
	return dsc
}

// SetCreatedAt sets the "created_at" field.
func (dsc *DeliverySlotCreate) SetCreatedAt(t time.Time) *DeliverySlotCreate {
	dsc.mutation.SetCreatedAt(t)
	return dsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsc *DeliverySlotCreate) SetNillableCreatedAt(t *time.Time) *DeliverySlotCreate {
	if t != nil {
		dsc.SetCreatedAt(*t)
	}
	return dsc
}

// SetUpdatedAt sets the "updated_at" field.
func (dsc *DeliverySlotCreate) SetUpdatedAt(t time.Time) *DeliverySlotCreate {
	dsc.mutation.SetUpdatedAt(t)
	return dsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dsc *DeliverySlotCreate) SetNillableUpdatedAt(t *time.Time) *DeliverySlotCreate {
	if t != nil {
		dsc.SetUpdatedAt(*t)
	}
	return dsc
}

// SetVersion sets the "version" field.
func (dsc *DeliverySlotCreate) SetVersion(i int) *DeliverySlotCreate {
	dsc.mutation.SetVersion(i)
	return dsc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dsc *DeliverySlotCreate) SetNillableVersion(i *int) *DeliverySlotCreate {
	if i != nil {
		dsc.SetVersion(*i)
	}
	return dsc
}

// SetCustomerID sets the "customer_id" field.
func (dsc *DeliverySlotCreate) SetCustomerID(u uuid.UUID) *DeliverySlotCreate {
	dsc.mutation.SetCustomerID(u)
	return dsc
}

// SetLocationID sets the "location_id" field.
func (dsc *DeliverySlotCreate) SetLocationID(u uuid.UUID) *DeliverySlotCreate {
	dsc.mutation.SetLocationID(u)
	return dsc
}

// SetDayOfWeek sets the "day_of_week" field.
func (dsc *DeliverySlotCreate) SetDayOfWeek(dow deliveryslot.DayOfWeek) *DeliverySlotCreate {
	dsc.mutation.SetDayOfWeek(dow)
	return dsc
}

// SetStartTime sets the "start_time" field.
func (dsc *DeliverySlotCreate) SetStartTime(to *types.TimeOnly) *DeliverySlotCreate {
	dsc.mutation.SetStartTime(to)
	return dsc
}

// SetEndTime sets the "end_time" field.
func (dsc *DeliverySlotCreate) SetEndTime(to *types.TimeOnly) *DeliverySlotCreate {
	dsc.mutation.SetEndTime(to)
	return dsc
}

// SetID sets the "id" field.
func (dsc *DeliverySlotCreate) SetID(u uuid.UUID) *DeliverySlotCreate {
	dsc.mutation.SetID(u)
	return dsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dsc *DeliverySlotCreate) SetNillableID(u *uuid.UUID) *DeliverySlotCreate {
	if u != nil {
		dsc.SetID(*u)
	}
	return dsc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (dsc *DeliverySlotCreate) SetBusinessUnit(b *BusinessUnit) *DeliverySlotCreate {
	return dsc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (dsc *DeliverySlotCreate) SetOrganization(o *Organization) *DeliverySlotCreate {
	return dsc.SetOrganizationID(o.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (dsc *DeliverySlotCreate) SetCustomer(c *Customer) *DeliverySlotCreate {
	return dsc.SetCustomerID(c.ID)
}

// SetLocation sets the "location" edge to the Location entity.
func (dsc *DeliverySlotCreate) SetLocation(l *Location) *DeliverySlotCreate {
	return dsc.SetLocationID(l.ID)
}

// Mutation returns the DeliverySlotMutation object of the builder.
func (dsc *DeliverySlotCreate) Mutation() *DeliverySlotMutation {
	return dsc.mutation
}

// Save creates the DeliverySlot in the database.
func (dsc *DeliverySlotCreate) Save(ctx context.Context) (*DeliverySlot, error) {
	dsc.defaults()
	return withHooks(ctx, dsc.sqlSave, dsc.mutation, dsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DeliverySlotCreate) SaveX(ctx context.Context) *DeliverySlot {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DeliverySlotCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DeliverySlotCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DeliverySlotCreate) defaults() {
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		v := deliveryslot.DefaultCreatedAt()
		dsc.mutation.SetCreatedAt(v)
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		v := deliveryslot.DefaultUpdatedAt()
		dsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dsc.mutation.Version(); !ok {
		v := deliveryslot.DefaultVersion
		dsc.mutation.SetVersion(v)
	}
	if _, ok := dsc.mutation.ID(); !ok {
		v := deliveryslot.DefaultID()
		dsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DeliverySlotCreate) check() error {
	if _, ok := dsc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "DeliverySlot.business_unit_id"`)}
	}
	if _, ok := dsc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "DeliverySlot.organization_id"`)}
	}
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeliverySlot.created_at"`)}
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeliverySlot.updated_at"`)}
	}
	if _, ok := dsc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "DeliverySlot.version"`)}
	}
	if _, ok := dsc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "DeliverySlot.customer_id"`)}
	}
	if _, ok := dsc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location_id", err: errors.New(`ent: missing required field "DeliverySlot.location_id"`)}
	}
	if _, ok := dsc.mutation.DayOfWeek(); !ok {
		return &ValidationError{Name: "day_of_week", err: errors.New(`ent: missing required field "DeliverySlot.day_of_week"`)}
	}
	if v, ok := dsc.mutation.DayOfWeek(); ok {
		if err := deliveryslot.DayOfWeekValidator(v); err != nil {
			return &ValidationError{Name: "day_of_week", err: fmt.Errorf(`ent: validator failed for field "DeliverySlot.day_of_week": %w`, err)}
		}
	}
	if _, ok := dsc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "DeliverySlot.start_time"`)}
	}
	if _, ok := dsc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "DeliverySlot.end_time"`)}
	}
	if _, ok := dsc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "DeliverySlot.business_unit"`)}
	}
	if _, ok := dsc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "DeliverySlot.organization"`)}
	}
	if _, ok := dsc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "DeliverySlot.customer"`)}
	}
	if _, ok := dsc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required edge "DeliverySlot.location"`)}
	}
	return nil
}

func (dsc *DeliverySlotCreate) sqlSave(ctx context.Context) (*DeliverySlot, error) {
	if err := dsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dsc.mutation.id = &_node.ID
	dsc.mutation.done = true
	return _node, nil
}

func (dsc *DeliverySlotCreate) createSpec() (*DeliverySlot, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliverySlot{config: dsc.config}
		_spec = sqlgraph.NewCreateSpec(deliveryslot.Table, sqlgraph.NewFieldSpec(deliveryslot.FieldID, field.TypeUUID))
	)
	if id, ok := dsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dsc.mutation.CreatedAt(); ok {
		_spec.SetField(deliveryslot.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dsc.mutation.UpdatedAt(); ok {
		_spec.SetField(deliveryslot.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dsc.mutation.Version(); ok {
		_spec.SetField(deliveryslot.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := dsc.mutation.DayOfWeek(); ok {
		_spec.SetField(deliveryslot.FieldDayOfWeek, field.TypeEnum, value)
		_node.DayOfWeek = value
	}
	if value, ok := dsc.mutation.StartTime(); ok {
		_spec.SetField(deliveryslot.FieldStartTime, field.TypeOther, value)
		_node.StartTime = value
	}
	if value, ok := dsc.mutation.EndTime(); ok {
		_spec.SetField(deliveryslot.FieldEndTime, field.TypeOther, value)
		_node.EndTime = value
	}
	if nodes := dsc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryslot.BusinessUnitTable,
			Columns: []string{deliveryslot.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dsc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryslot.OrganizationTable,
			Columns: []string{deliveryslot.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dsc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryslot.CustomerTable,
			Columns: []string{deliveryslot.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dsc.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryslot.LocationTable,
			Columns: []string{deliveryslot.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeliverySlotCreateBulk is the builder for creating many DeliverySlot entities in bulk.
type DeliverySlotCreateBulk struct {
	config
	err      error
	builders []*DeliverySlotCreate
}

// Save creates the DeliverySlot entities in the database.
func (dscb *DeliverySlotCreateBulk) Save(ctx context.Context) ([]*DeliverySlot, error) {
	if dscb.err != nil {
		return nil, dscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DeliverySlot, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliverySlotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DeliverySlotCreateBulk) SaveX(ctx context.Context) []*DeliverySlot {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DeliverySlotCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DeliverySlotCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}
