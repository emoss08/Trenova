// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/location"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/shipmentroute"
	"github.com/google/uuid"
)

// ShipmentRouteUpdate is the builder for updating ShipmentRoute entities.
type ShipmentRouteUpdate struct {
	config
	hooks     []Hook
	mutation  *ShipmentRouteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShipmentRouteUpdate builder.
func (sru *ShipmentRouteUpdate) Where(ps ...predicate.ShipmentRoute) *ShipmentRouteUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetOrganizationID sets the "organization_id" field.
func (sru *ShipmentRouteUpdate) SetOrganizationID(u uuid.UUID) *ShipmentRouteUpdate {
	sru.mutation.SetOrganizationID(u)
	return sru
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (sru *ShipmentRouteUpdate) SetNillableOrganizationID(u *uuid.UUID) *ShipmentRouteUpdate {
	if u != nil {
		sru.SetOrganizationID(*u)
	}
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *ShipmentRouteUpdate) SetUpdatedAt(t time.Time) *ShipmentRouteUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// SetVersion sets the "version" field.
func (sru *ShipmentRouteUpdate) SetVersion(i int) *ShipmentRouteUpdate {
	sru.mutation.ResetVersion()
	sru.mutation.SetVersion(i)
	return sru
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sru *ShipmentRouteUpdate) SetNillableVersion(i *int) *ShipmentRouteUpdate {
	if i != nil {
		sru.SetVersion(*i)
	}
	return sru
}

// AddVersion adds i to the "version" field.
func (sru *ShipmentRouteUpdate) AddVersion(i int) *ShipmentRouteUpdate {
	sru.mutation.AddVersion(i)
	return sru
}

// SetOriginLocationID sets the "origin_location_id" field.
func (sru *ShipmentRouteUpdate) SetOriginLocationID(u uuid.UUID) *ShipmentRouteUpdate {
	sru.mutation.SetOriginLocationID(u)
	return sru
}

// SetNillableOriginLocationID sets the "origin_location_id" field if the given value is not nil.
func (sru *ShipmentRouteUpdate) SetNillableOriginLocationID(u *uuid.UUID) *ShipmentRouteUpdate {
	if u != nil {
		sru.SetOriginLocationID(*u)
	}
	return sru
}

// SetDestinationLocationID sets the "destination_location_id" field.
func (sru *ShipmentRouteUpdate) SetDestinationLocationID(u uuid.UUID) *ShipmentRouteUpdate {
	sru.mutation.SetDestinationLocationID(u)
	return sru
}

// SetNillableDestinationLocationID sets the "destination_location_id" field if the given value is not nil.
func (sru *ShipmentRouteUpdate) SetNillableDestinationLocationID(u *uuid.UUID) *ShipmentRouteUpdate {
	if u != nil {
		sru.SetDestinationLocationID(*u)
	}
	return sru
}

// SetMileage sets the "mileage" field.
func (sru *ShipmentRouteUpdate) SetMileage(f float64) *ShipmentRouteUpdate {
	sru.mutation.ResetMileage()
	sru.mutation.SetMileage(f)
	return sru
}

// SetNillableMileage sets the "mileage" field if the given value is not nil.
func (sru *ShipmentRouteUpdate) SetNillableMileage(f *float64) *ShipmentRouteUpdate {
	if f != nil {
		sru.SetMileage(*f)
	}
	return sru
}

// AddMileage adds f to the "mileage" field.
func (sru *ShipmentRouteUpdate) AddMileage(f float64) *ShipmentRouteUpdate {
	sru.mutation.AddMileage(f)
	return sru
}

// SetDuration sets the "duration" field.
func (sru *ShipmentRouteUpdate) SetDuration(i int) *ShipmentRouteUpdate {
	sru.mutation.ResetDuration()
	sru.mutation.SetDuration(i)
	return sru
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (sru *ShipmentRouteUpdate) SetNillableDuration(i *int) *ShipmentRouteUpdate {
	if i != nil {
		sru.SetDuration(*i)
	}
	return sru
}

// AddDuration adds i to the "duration" field.
func (sru *ShipmentRouteUpdate) AddDuration(i int) *ShipmentRouteUpdate {
	sru.mutation.AddDuration(i)
	return sru
}

// ClearDuration clears the value of the "duration" field.
func (sru *ShipmentRouteUpdate) ClearDuration() *ShipmentRouteUpdate {
	sru.mutation.ClearDuration()
	return sru
}

// SetDistanceMethod sets the "distance_method" field.
func (sru *ShipmentRouteUpdate) SetDistanceMethod(s string) *ShipmentRouteUpdate {
	sru.mutation.SetDistanceMethod(s)
	return sru
}

// SetNillableDistanceMethod sets the "distance_method" field if the given value is not nil.
func (sru *ShipmentRouteUpdate) SetNillableDistanceMethod(s *string) *ShipmentRouteUpdate {
	if s != nil {
		sru.SetDistanceMethod(*s)
	}
	return sru
}

// ClearDistanceMethod clears the value of the "distance_method" field.
func (sru *ShipmentRouteUpdate) ClearDistanceMethod() *ShipmentRouteUpdate {
	sru.mutation.ClearDistanceMethod()
	return sru
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (sru *ShipmentRouteUpdate) SetOrganization(o *Organization) *ShipmentRouteUpdate {
	return sru.SetOrganizationID(o.ID)
}

// SetOriginLocation sets the "origin_location" edge to the Location entity.
func (sru *ShipmentRouteUpdate) SetOriginLocation(l *Location) *ShipmentRouteUpdate {
	return sru.SetOriginLocationID(l.ID)
}

// SetDestinationLocation sets the "destination_location" edge to the Location entity.
func (sru *ShipmentRouteUpdate) SetDestinationLocation(l *Location) *ShipmentRouteUpdate {
	return sru.SetDestinationLocationID(l.ID)
}

// Mutation returns the ShipmentRouteMutation object of the builder.
func (sru *ShipmentRouteUpdate) Mutation() *ShipmentRouteMutation {
	return sru.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (sru *ShipmentRouteUpdate) ClearOrganization() *ShipmentRouteUpdate {
	sru.mutation.ClearOrganization()
	return sru
}

// ClearOriginLocation clears the "origin_location" edge to the Location entity.
func (sru *ShipmentRouteUpdate) ClearOriginLocation() *ShipmentRouteUpdate {
	sru.mutation.ClearOriginLocation()
	return sru
}

// ClearDestinationLocation clears the "destination_location" edge to the Location entity.
func (sru *ShipmentRouteUpdate) ClearDestinationLocation() *ShipmentRouteUpdate {
	sru.mutation.ClearDestinationLocation()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *ShipmentRouteUpdate) Save(ctx context.Context) (int, error) {
	sru.defaults()
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *ShipmentRouteUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *ShipmentRouteUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *ShipmentRouteUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *ShipmentRouteUpdate) defaults() {
	if _, ok := sru.mutation.UpdatedAt(); !ok {
		v := shipmentroute.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *ShipmentRouteUpdate) check() error {
	if v, ok := sru.mutation.Mileage(); ok {
		if err := shipmentroute.MileageValidator(v); err != nil {
			return &ValidationError{Name: "mileage", err: fmt.Errorf(`ent: validator failed for field "ShipmentRoute.mileage": %w`, err)}
		}
	}
	if v, ok := sru.mutation.Duration(); ok {
		if err := shipmentroute.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "ShipmentRoute.duration": %w`, err)}
		}
	}
	if v, ok := sru.mutation.DistanceMethod(); ok {
		if err := shipmentroute.DistanceMethodValidator(v); err != nil {
			return &ValidationError{Name: "distance_method", err: fmt.Errorf(`ent: validator failed for field "ShipmentRoute.distance_method": %w`, err)}
		}
	}
	if _, ok := sru.mutation.BusinessUnitID(); sru.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentRoute.business_unit"`)
	}
	if _, ok := sru.mutation.OrganizationID(); sru.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentRoute.organization"`)
	}
	if _, ok := sru.mutation.OriginLocationID(); sru.mutation.OriginLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentRoute.origin_location"`)
	}
	if _, ok := sru.mutation.DestinationLocationID(); sru.mutation.DestinationLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentRoute.destination_location"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *ShipmentRouteUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentRouteUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *ShipmentRouteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentroute.Table, shipmentroute.Columns, sqlgraph.NewFieldSpec(shipmentroute.FieldID, field.TypeUUID))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentroute.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sru.mutation.Version(); ok {
		_spec.SetField(shipmentroute.FieldVersion, field.TypeInt, value)
	}
	if value, ok := sru.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentroute.FieldVersion, field.TypeInt, value)
	}
	if value, ok := sru.mutation.Mileage(); ok {
		_spec.SetField(shipmentroute.FieldMileage, field.TypeFloat64, value)
	}
	if value, ok := sru.mutation.AddedMileage(); ok {
		_spec.AddField(shipmentroute.FieldMileage, field.TypeFloat64, value)
	}
	if value, ok := sru.mutation.Duration(); ok {
		_spec.SetField(shipmentroute.FieldDuration, field.TypeInt, value)
	}
	if value, ok := sru.mutation.AddedDuration(); ok {
		_spec.AddField(shipmentroute.FieldDuration, field.TypeInt, value)
	}
	if sru.mutation.DurationCleared() {
		_spec.ClearField(shipmentroute.FieldDuration, field.TypeInt)
	}
	if value, ok := sru.mutation.DistanceMethod(); ok {
		_spec.SetField(shipmentroute.FieldDistanceMethod, field.TypeString, value)
	}
	if sru.mutation.DistanceMethodCleared() {
		_spec.ClearField(shipmentroute.FieldDistanceMethod, field.TypeString)
	}
	if sru.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentroute.OrganizationTable,
			Columns: []string{shipmentroute.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentroute.OrganizationTable,
			Columns: []string{shipmentroute.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.OriginLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.OriginLocationTable,
			Columns: []string{shipmentroute.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.OriginLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.OriginLocationTable,
			Columns: []string{shipmentroute.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.DestinationLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.DestinationLocationTable,
			Columns: []string{shipmentroute.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.DestinationLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.DestinationLocationTable,
			Columns: []string{shipmentroute.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentroute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// ShipmentRouteUpdateOne is the builder for updating a single ShipmentRoute entity.
type ShipmentRouteUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShipmentRouteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (sruo *ShipmentRouteUpdateOne) SetOrganizationID(u uuid.UUID) *ShipmentRouteUpdateOne {
	sruo.mutation.SetOrganizationID(u)
	return sruo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (sruo *ShipmentRouteUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *ShipmentRouteUpdateOne {
	if u != nil {
		sruo.SetOrganizationID(*u)
	}
	return sruo
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *ShipmentRouteUpdateOne) SetUpdatedAt(t time.Time) *ShipmentRouteUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// SetVersion sets the "version" field.
func (sruo *ShipmentRouteUpdateOne) SetVersion(i int) *ShipmentRouteUpdateOne {
	sruo.mutation.ResetVersion()
	sruo.mutation.SetVersion(i)
	return sruo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sruo *ShipmentRouteUpdateOne) SetNillableVersion(i *int) *ShipmentRouteUpdateOne {
	if i != nil {
		sruo.SetVersion(*i)
	}
	return sruo
}

// AddVersion adds i to the "version" field.
func (sruo *ShipmentRouteUpdateOne) AddVersion(i int) *ShipmentRouteUpdateOne {
	sruo.mutation.AddVersion(i)
	return sruo
}

// SetOriginLocationID sets the "origin_location_id" field.
func (sruo *ShipmentRouteUpdateOne) SetOriginLocationID(u uuid.UUID) *ShipmentRouteUpdateOne {
	sruo.mutation.SetOriginLocationID(u)
	return sruo
}

// SetNillableOriginLocationID sets the "origin_location_id" field if the given value is not nil.
func (sruo *ShipmentRouteUpdateOne) SetNillableOriginLocationID(u *uuid.UUID) *ShipmentRouteUpdateOne {
	if u != nil {
		sruo.SetOriginLocationID(*u)
	}
	return sruo
}

// SetDestinationLocationID sets the "destination_location_id" field.
func (sruo *ShipmentRouteUpdateOne) SetDestinationLocationID(u uuid.UUID) *ShipmentRouteUpdateOne {
	sruo.mutation.SetDestinationLocationID(u)
	return sruo
}

// SetNillableDestinationLocationID sets the "destination_location_id" field if the given value is not nil.
func (sruo *ShipmentRouteUpdateOne) SetNillableDestinationLocationID(u *uuid.UUID) *ShipmentRouteUpdateOne {
	if u != nil {
		sruo.SetDestinationLocationID(*u)
	}
	return sruo
}

// SetMileage sets the "mileage" field.
func (sruo *ShipmentRouteUpdateOne) SetMileage(f float64) *ShipmentRouteUpdateOne {
	sruo.mutation.ResetMileage()
	sruo.mutation.SetMileage(f)
	return sruo
}

// SetNillableMileage sets the "mileage" field if the given value is not nil.
func (sruo *ShipmentRouteUpdateOne) SetNillableMileage(f *float64) *ShipmentRouteUpdateOne {
	if f != nil {
		sruo.SetMileage(*f)
	}
	return sruo
}

// AddMileage adds f to the "mileage" field.
func (sruo *ShipmentRouteUpdateOne) AddMileage(f float64) *ShipmentRouteUpdateOne {
	sruo.mutation.AddMileage(f)
	return sruo
}

// SetDuration sets the "duration" field.
func (sruo *ShipmentRouteUpdateOne) SetDuration(i int) *ShipmentRouteUpdateOne {
	sruo.mutation.ResetDuration()
	sruo.mutation.SetDuration(i)
	return sruo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (sruo *ShipmentRouteUpdateOne) SetNillableDuration(i *int) *ShipmentRouteUpdateOne {
	if i != nil {
		sruo.SetDuration(*i)
	}
	return sruo
}

// AddDuration adds i to the "duration" field.
func (sruo *ShipmentRouteUpdateOne) AddDuration(i int) *ShipmentRouteUpdateOne {
	sruo.mutation.AddDuration(i)
	return sruo
}

// ClearDuration clears the value of the "duration" field.
func (sruo *ShipmentRouteUpdateOne) ClearDuration() *ShipmentRouteUpdateOne {
	sruo.mutation.ClearDuration()
	return sruo
}

// SetDistanceMethod sets the "distance_method" field.
func (sruo *ShipmentRouteUpdateOne) SetDistanceMethod(s string) *ShipmentRouteUpdateOne {
	sruo.mutation.SetDistanceMethod(s)
	return sruo
}

// SetNillableDistanceMethod sets the "distance_method" field if the given value is not nil.
func (sruo *ShipmentRouteUpdateOne) SetNillableDistanceMethod(s *string) *ShipmentRouteUpdateOne {
	if s != nil {
		sruo.SetDistanceMethod(*s)
	}
	return sruo
}

// ClearDistanceMethod clears the value of the "distance_method" field.
func (sruo *ShipmentRouteUpdateOne) ClearDistanceMethod() *ShipmentRouteUpdateOne {
	sruo.mutation.ClearDistanceMethod()
	return sruo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (sruo *ShipmentRouteUpdateOne) SetOrganization(o *Organization) *ShipmentRouteUpdateOne {
	return sruo.SetOrganizationID(o.ID)
}

// SetOriginLocation sets the "origin_location" edge to the Location entity.
func (sruo *ShipmentRouteUpdateOne) SetOriginLocation(l *Location) *ShipmentRouteUpdateOne {
	return sruo.SetOriginLocationID(l.ID)
}

// SetDestinationLocation sets the "destination_location" edge to the Location entity.
func (sruo *ShipmentRouteUpdateOne) SetDestinationLocation(l *Location) *ShipmentRouteUpdateOne {
	return sruo.SetDestinationLocationID(l.ID)
}

// Mutation returns the ShipmentRouteMutation object of the builder.
func (sruo *ShipmentRouteUpdateOne) Mutation() *ShipmentRouteMutation {
	return sruo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (sruo *ShipmentRouteUpdateOne) ClearOrganization() *ShipmentRouteUpdateOne {
	sruo.mutation.ClearOrganization()
	return sruo
}

// ClearOriginLocation clears the "origin_location" edge to the Location entity.
func (sruo *ShipmentRouteUpdateOne) ClearOriginLocation() *ShipmentRouteUpdateOne {
	sruo.mutation.ClearOriginLocation()
	return sruo
}

// ClearDestinationLocation clears the "destination_location" edge to the Location entity.
func (sruo *ShipmentRouteUpdateOne) ClearDestinationLocation() *ShipmentRouteUpdateOne {
	sruo.mutation.ClearDestinationLocation()
	return sruo
}

// Where appends a list predicates to the ShipmentRouteUpdate builder.
func (sruo *ShipmentRouteUpdateOne) Where(ps ...predicate.ShipmentRoute) *ShipmentRouteUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *ShipmentRouteUpdateOne) Select(field string, fields ...string) *ShipmentRouteUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated ShipmentRoute entity.
func (sruo *ShipmentRouteUpdateOne) Save(ctx context.Context) (*ShipmentRoute, error) {
	sruo.defaults()
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *ShipmentRouteUpdateOne) SaveX(ctx context.Context) *ShipmentRoute {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *ShipmentRouteUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *ShipmentRouteUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *ShipmentRouteUpdateOne) defaults() {
	if _, ok := sruo.mutation.UpdatedAt(); !ok {
		v := shipmentroute.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *ShipmentRouteUpdateOne) check() error {
	if v, ok := sruo.mutation.Mileage(); ok {
		if err := shipmentroute.MileageValidator(v); err != nil {
			return &ValidationError{Name: "mileage", err: fmt.Errorf(`ent: validator failed for field "ShipmentRoute.mileage": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.Duration(); ok {
		if err := shipmentroute.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "ShipmentRoute.duration": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.DistanceMethod(); ok {
		if err := shipmentroute.DistanceMethodValidator(v); err != nil {
			return &ValidationError{Name: "distance_method", err: fmt.Errorf(`ent: validator failed for field "ShipmentRoute.distance_method": %w`, err)}
		}
	}
	if _, ok := sruo.mutation.BusinessUnitID(); sruo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentRoute.business_unit"`)
	}
	if _, ok := sruo.mutation.OrganizationID(); sruo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentRoute.organization"`)
	}
	if _, ok := sruo.mutation.OriginLocationID(); sruo.mutation.OriginLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentRoute.origin_location"`)
	}
	if _, ok := sruo.mutation.DestinationLocationID(); sruo.mutation.DestinationLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentRoute.destination_location"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *ShipmentRouteUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentRouteUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *ShipmentRouteUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentRoute, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentroute.Table, shipmentroute.Columns, sqlgraph.NewFieldSpec(shipmentroute.FieldID, field.TypeUUID))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentRoute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentroute.FieldID)
		for _, f := range fields {
			if !shipmentroute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentroute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentroute.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sruo.mutation.Version(); ok {
		_spec.SetField(shipmentroute.FieldVersion, field.TypeInt, value)
	}
	if value, ok := sruo.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentroute.FieldVersion, field.TypeInt, value)
	}
	if value, ok := sruo.mutation.Mileage(); ok {
		_spec.SetField(shipmentroute.FieldMileage, field.TypeFloat64, value)
	}
	if value, ok := sruo.mutation.AddedMileage(); ok {
		_spec.AddField(shipmentroute.FieldMileage, field.TypeFloat64, value)
	}
	if value, ok := sruo.mutation.Duration(); ok {
		_spec.SetField(shipmentroute.FieldDuration, field.TypeInt, value)
	}
	if value, ok := sruo.mutation.AddedDuration(); ok {
		_spec.AddField(shipmentroute.FieldDuration, field.TypeInt, value)
	}
	if sruo.mutation.DurationCleared() {
		_spec.ClearField(shipmentroute.FieldDuration, field.TypeInt)
	}
	if value, ok := sruo.mutation.DistanceMethod(); ok {
		_spec.SetField(shipmentroute.FieldDistanceMethod, field.TypeString, value)
	}
	if sruo.mutation.DistanceMethodCleared() {
		_spec.ClearField(shipmentroute.FieldDistanceMethod, field.TypeString)
	}
	if sruo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentroute.OrganizationTable,
			Columns: []string{shipmentroute.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentroute.OrganizationTable,
			Columns: []string{shipmentroute.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.OriginLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.OriginLocationTable,
			Columns: []string{shipmentroute.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.OriginLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.OriginLocationTable,
			Columns: []string{shipmentroute.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.DestinationLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.DestinationLocationTable,
			Columns: []string{shipmentroute.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.DestinationLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentroute.DestinationLocationTable,
			Columns: []string{shipmentroute.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sruo.modifiers...)
	_node = &ShipmentRoute{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentroute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
