// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/hazardousmaterial"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// HazardousMaterialQuery is the builder for querying HazardousMaterial entities.
type HazardousMaterialQuery struct {
	config
	ctx              *QueryContext
	order            []hazardousmaterial.OrderOption
	inters           []Interceptor
	predicates       []predicate.HazardousMaterial
	withBusinessUnit *BusinessUnitQuery
	withOrganization *OrganizationQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HazardousMaterialQuery builder.
func (hmq *HazardousMaterialQuery) Where(ps ...predicate.HazardousMaterial) *HazardousMaterialQuery {
	hmq.predicates = append(hmq.predicates, ps...)
	return hmq
}

// Limit the number of records to be returned by this query.
func (hmq *HazardousMaterialQuery) Limit(limit int) *HazardousMaterialQuery {
	hmq.ctx.Limit = &limit
	return hmq
}

// Offset to start from.
func (hmq *HazardousMaterialQuery) Offset(offset int) *HazardousMaterialQuery {
	hmq.ctx.Offset = &offset
	return hmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hmq *HazardousMaterialQuery) Unique(unique bool) *HazardousMaterialQuery {
	hmq.ctx.Unique = &unique
	return hmq
}

// Order specifies how the records should be ordered.
func (hmq *HazardousMaterialQuery) Order(o ...hazardousmaterial.OrderOption) *HazardousMaterialQuery {
	hmq.order = append(hmq.order, o...)
	return hmq
}

// QueryBusinessUnit chains the current query on the "business_unit" edge.
func (hmq *HazardousMaterialQuery) QueryBusinessUnit() *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hazardousmaterial.Table, hazardousmaterial.FieldID, selector),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hazardousmaterial.BusinessUnitTable, hazardousmaterial.BusinessUnitColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (hmq *HazardousMaterialQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hazardousmaterial.Table, hazardousmaterial.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hazardousmaterial.OrganizationTable, hazardousmaterial.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HazardousMaterial entity from the query.
// Returns a *NotFoundError when no HazardousMaterial was found.
func (hmq *HazardousMaterialQuery) First(ctx context.Context) (*HazardousMaterial, error) {
	nodes, err := hmq.Limit(1).All(setContextOp(ctx, hmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hazardousmaterial.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hmq *HazardousMaterialQuery) FirstX(ctx context.Context) *HazardousMaterial {
	node, err := hmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HazardousMaterial ID from the query.
// Returns a *NotFoundError when no HazardousMaterial ID was found.
func (hmq *HazardousMaterialQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hmq.Limit(1).IDs(setContextOp(ctx, hmq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hazardousmaterial.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hmq *HazardousMaterialQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := hmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HazardousMaterial entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HazardousMaterial entity is found.
// Returns a *NotFoundError when no HazardousMaterial entities are found.
func (hmq *HazardousMaterialQuery) Only(ctx context.Context) (*HazardousMaterial, error) {
	nodes, err := hmq.Limit(2).All(setContextOp(ctx, hmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hazardousmaterial.Label}
	default:
		return nil, &NotSingularError{hazardousmaterial.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hmq *HazardousMaterialQuery) OnlyX(ctx context.Context) *HazardousMaterial {
	node, err := hmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HazardousMaterial ID in the query.
// Returns a *NotSingularError when more than one HazardousMaterial ID is found.
// Returns a *NotFoundError when no entities are found.
func (hmq *HazardousMaterialQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hmq.Limit(2).IDs(setContextOp(ctx, hmq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hazardousmaterial.Label}
	default:
		err = &NotSingularError{hazardousmaterial.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hmq *HazardousMaterialQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := hmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HazardousMaterials.
func (hmq *HazardousMaterialQuery) All(ctx context.Context) ([]*HazardousMaterial, error) {
	ctx = setContextOp(ctx, hmq.ctx, "All")
	if err := hmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HazardousMaterial, *HazardousMaterialQuery]()
	return withInterceptors[[]*HazardousMaterial](ctx, hmq, qr, hmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hmq *HazardousMaterialQuery) AllX(ctx context.Context) []*HazardousMaterial {
	nodes, err := hmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HazardousMaterial IDs.
func (hmq *HazardousMaterialQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if hmq.ctx.Unique == nil && hmq.path != nil {
		hmq.Unique(true)
	}
	ctx = setContextOp(ctx, hmq.ctx, "IDs")
	if err = hmq.Select(hazardousmaterial.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hmq *HazardousMaterialQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := hmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hmq *HazardousMaterialQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hmq.ctx, "Count")
	if err := hmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hmq, querierCount[*HazardousMaterialQuery](), hmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hmq *HazardousMaterialQuery) CountX(ctx context.Context) int {
	count, err := hmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hmq *HazardousMaterialQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hmq.ctx, "Exist")
	switch _, err := hmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hmq *HazardousMaterialQuery) ExistX(ctx context.Context) bool {
	exist, err := hmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HazardousMaterialQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hmq *HazardousMaterialQuery) Clone() *HazardousMaterialQuery {
	if hmq == nil {
		return nil
	}
	return &HazardousMaterialQuery{
		config:           hmq.config,
		ctx:              hmq.ctx.Clone(),
		order:            append([]hazardousmaterial.OrderOption{}, hmq.order...),
		inters:           append([]Interceptor{}, hmq.inters...),
		predicates:       append([]predicate.HazardousMaterial{}, hmq.predicates...),
		withBusinessUnit: hmq.withBusinessUnit.Clone(),
		withOrganization: hmq.withOrganization.Clone(),
		// clone intermediate query.
		sql:  hmq.sql.Clone(),
		path: hmq.path,
	}
}

// WithBusinessUnit tells the query-builder to eager-load the nodes that are connected to
// the "business_unit" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HazardousMaterialQuery) WithBusinessUnit(opts ...func(*BusinessUnitQuery)) *HazardousMaterialQuery {
	query := (&BusinessUnitClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withBusinessUnit = query
	return hmq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HazardousMaterialQuery) WithOrganization(opts ...func(*OrganizationQuery)) *HazardousMaterialQuery {
	query := (&OrganizationClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withOrganization = query
	return hmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HazardousMaterial.Query().
//		GroupBy(hazardousmaterial.FieldBusinessUnitID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hmq *HazardousMaterialQuery) GroupBy(field string, fields ...string) *HazardousMaterialGroupBy {
	hmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HazardousMaterialGroupBy{build: hmq}
	grbuild.flds = &hmq.ctx.Fields
	grbuild.label = hazardousmaterial.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//	}
//
//	client.HazardousMaterial.Query().
//		Select(hazardousmaterial.FieldBusinessUnitID).
//		Scan(ctx, &v)
func (hmq *HazardousMaterialQuery) Select(fields ...string) *HazardousMaterialSelect {
	hmq.ctx.Fields = append(hmq.ctx.Fields, fields...)
	sbuild := &HazardousMaterialSelect{HazardousMaterialQuery: hmq}
	sbuild.label = hazardousmaterial.Label
	sbuild.flds, sbuild.scan = &hmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HazardousMaterialSelect configured with the given aggregations.
func (hmq *HazardousMaterialQuery) Aggregate(fns ...AggregateFunc) *HazardousMaterialSelect {
	return hmq.Select().Aggregate(fns...)
}

func (hmq *HazardousMaterialQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hmq); err != nil {
				return err
			}
		}
	}
	for _, f := range hmq.ctx.Fields {
		if !hazardousmaterial.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hmq.path != nil {
		prev, err := hmq.path(ctx)
		if err != nil {
			return err
		}
		hmq.sql = prev
	}
	return nil
}

func (hmq *HazardousMaterialQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HazardousMaterial, error) {
	var (
		nodes       = []*HazardousMaterial{}
		_spec       = hmq.querySpec()
		loadedTypes = [2]bool{
			hmq.withBusinessUnit != nil,
			hmq.withOrganization != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HazardousMaterial).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HazardousMaterial{config: hmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hmq.modifiers) > 0 {
		_spec.Modifiers = hmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hmq.withBusinessUnit; query != nil {
		if err := hmq.loadBusinessUnit(ctx, query, nodes, nil,
			func(n *HazardousMaterial, e *BusinessUnit) { n.Edges.BusinessUnit = e }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withOrganization; query != nil {
		if err := hmq.loadOrganization(ctx, query, nodes, nil,
			func(n *HazardousMaterial, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hmq *HazardousMaterialQuery) loadBusinessUnit(ctx context.Context, query *BusinessUnitQuery, nodes []*HazardousMaterial, init func(*HazardousMaterial), assign func(*HazardousMaterial, *BusinessUnit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HazardousMaterial)
	for i := range nodes {
		fk := nodes[i].BusinessUnitID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(businessunit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_unit_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hmq *HazardousMaterialQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*HazardousMaterial, init func(*HazardousMaterial), assign func(*HazardousMaterial, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HazardousMaterial)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (hmq *HazardousMaterialQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hmq.querySpec()
	if len(hmq.modifiers) > 0 {
		_spec.Modifiers = hmq.modifiers
	}
	_spec.Node.Columns = hmq.ctx.Fields
	if len(hmq.ctx.Fields) > 0 {
		_spec.Unique = hmq.ctx.Unique != nil && *hmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hmq.driver, _spec)
}

func (hmq *HazardousMaterialQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hazardousmaterial.Table, hazardousmaterial.Columns, sqlgraph.NewFieldSpec(hazardousmaterial.FieldID, field.TypeUUID))
	_spec.From = hmq.sql
	if unique := hmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hmq.path != nil {
		_spec.Unique = true
	}
	if fields := hmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hazardousmaterial.FieldID)
		for i := range fields {
			if fields[i] != hazardousmaterial.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hmq.withBusinessUnit != nil {
			_spec.Node.AddColumnOnce(hazardousmaterial.FieldBusinessUnitID)
		}
		if hmq.withOrganization != nil {
			_spec.Node.AddColumnOnce(hazardousmaterial.FieldOrganizationID)
		}
	}
	if ps := hmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hmq *HazardousMaterialQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hmq.driver.Dialect())
	t1 := builder.Table(hazardousmaterial.Table)
	columns := hmq.ctx.Fields
	if len(columns) == 0 {
		columns = hazardousmaterial.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hmq.sql != nil {
		selector = hmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hmq.ctx.Unique != nil && *hmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range hmq.modifiers {
		m(selector)
	}
	for _, p := range hmq.predicates {
		p(selector)
	}
	for _, p := range hmq.order {
		p(selector)
	}
	if offset := hmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (hmq *HazardousMaterialQuery) Modify(modifiers ...func(s *sql.Selector)) *HazardousMaterialSelect {
	hmq.modifiers = append(hmq.modifiers, modifiers...)
	return hmq.Select()
}

// HazardousMaterialGroupBy is the group-by builder for HazardousMaterial entities.
type HazardousMaterialGroupBy struct {
	selector
	build *HazardousMaterialQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hmgb *HazardousMaterialGroupBy) Aggregate(fns ...AggregateFunc) *HazardousMaterialGroupBy {
	hmgb.fns = append(hmgb.fns, fns...)
	return hmgb
}

// Scan applies the selector query and scans the result into the given value.
func (hmgb *HazardousMaterialGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hmgb.build.ctx, "GroupBy")
	if err := hmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HazardousMaterialQuery, *HazardousMaterialGroupBy](ctx, hmgb.build, hmgb, hmgb.build.inters, v)
}

func (hmgb *HazardousMaterialGroupBy) sqlScan(ctx context.Context, root *HazardousMaterialQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hmgb.fns))
	for _, fn := range hmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hmgb.flds)+len(hmgb.fns))
		for _, f := range *hmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HazardousMaterialSelect is the builder for selecting fields of HazardousMaterial entities.
type HazardousMaterialSelect struct {
	*HazardousMaterialQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hms *HazardousMaterialSelect) Aggregate(fns ...AggregateFunc) *HazardousMaterialSelect {
	hms.fns = append(hms.fns, fns...)
	return hms
}

// Scan applies the selector query and scans the result into the given value.
func (hms *HazardousMaterialSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hms.ctx, "Select")
	if err := hms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HazardousMaterialQuery, *HazardousMaterialSelect](ctx, hms.HazardousMaterialQuery, hms, hms.inters, v)
}

func (hms *HazardousMaterialSelect) sqlScan(ctx context.Context, root *HazardousMaterialQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hms.fns))
	for _, fn := range hms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (hms *HazardousMaterialSelect) Modify(modifiers ...func(s *sql.Selector)) *HazardousMaterialSelect {
	hms.modifiers = append(hms.modifiers, modifiers...)
	return hms
}
