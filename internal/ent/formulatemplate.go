// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/formulatemplate"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/shipmenttype"
	"github.com/google/uuid"
)

// FormulaTemplate is the model entity for the FormulaTemplate schema.
type FormulaTemplate struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// The current version of this entity.
	Version int `json:"version" validate:"omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name" validate:"required"`
	// FormulaText holds the value of the "formula_text" field.
	FormulaText string `json:"formulaText" validate:"required"`
	// Description holds the value of the "description" field.
	Description string `json:"description" validate:"omitempty"`
	// TemplateType holds the value of the "template_type" field.
	TemplateType formulatemplate.TemplateType `json:"templateType" validate:"required,oneof=Refrigerated Hazardous General"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID *uuid.UUID `json:"customerId" validate:"required"`
	// ShipmentTypeID holds the value of the "shipment_type_id" field.
	ShipmentTypeID *uuid.UUID `json:"shipmentTypeId" validate:"required"`
	// AutoApply holds the value of the "auto_apply" field.
	AutoApply bool `json:"autoApply" validate:"required"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FormulaTemplateQuery when eager-loading is set.
	Edges        FormulaTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FormulaTemplateEdges holds the relations/edges for other nodes in the graph.
type FormulaTemplateEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// ShipmentType holds the value of the shipment_type edge.
	ShipmentType *ShipmentType `json:"shipment_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormulaTemplateEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormulaTemplateEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormulaTemplateEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ShipmentTypeOrErr returns the ShipmentType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormulaTemplateEdges) ShipmentTypeOrErr() (*ShipmentType, error) {
	if e.ShipmentType != nil {
		return e.ShipmentType, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: shipmenttype.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FormulaTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case formulatemplate.FieldCustomerID, formulatemplate.FieldShipmentTypeID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case formulatemplate.FieldAutoApply:
			values[i] = new(sql.NullBool)
		case formulatemplate.FieldVersion:
			values[i] = new(sql.NullInt64)
		case formulatemplate.FieldName, formulatemplate.FieldFormulaText, formulatemplate.FieldDescription, formulatemplate.FieldTemplateType:
			values[i] = new(sql.NullString)
		case formulatemplate.FieldCreatedAt, formulatemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case formulatemplate.FieldID, formulatemplate.FieldBusinessUnitID, formulatemplate.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FormulaTemplate fields.
func (ft *FormulaTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case formulatemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ft.ID = *value
			}
		case formulatemplate.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				ft.BusinessUnitID = *value
			}
		case formulatemplate.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				ft.OrganizationID = *value
			}
		case formulatemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ft.CreatedAt = value.Time
			}
		case formulatemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ft.UpdatedAt = value.Time
			}
		case formulatemplate.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ft.Version = int(value.Int64)
			}
		case formulatemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ft.Name = value.String
			}
		case formulatemplate.FieldFormulaText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field formula_text", values[i])
			} else if value.Valid {
				ft.FormulaText = value.String
			}
		case formulatemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ft.Description = value.String
			}
		case formulatemplate.FieldTemplateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_type", values[i])
			} else if value.Valid {
				ft.TemplateType = formulatemplate.TemplateType(value.String)
			}
		case formulatemplate.FieldCustomerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				ft.CustomerID = new(uuid.UUID)
				*ft.CustomerID = *value.S.(*uuid.UUID)
			}
		case formulatemplate.FieldShipmentTypeID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_type_id", values[i])
			} else if value.Valid {
				ft.ShipmentTypeID = new(uuid.UUID)
				*ft.ShipmentTypeID = *value.S.(*uuid.UUID)
			}
		case formulatemplate.FieldAutoApply:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_apply", values[i])
			} else if value.Valid {
				ft.AutoApply = value.Bool
			}
		default:
			ft.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FormulaTemplate.
// This includes values selected through modifiers, order, etc.
func (ft *FormulaTemplate) Value(name string) (ent.Value, error) {
	return ft.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the FormulaTemplate entity.
func (ft *FormulaTemplate) QueryBusinessUnit() *BusinessUnitQuery {
	return NewFormulaTemplateClient(ft.config).QueryBusinessUnit(ft)
}

// QueryOrganization queries the "organization" edge of the FormulaTemplate entity.
func (ft *FormulaTemplate) QueryOrganization() *OrganizationQuery {
	return NewFormulaTemplateClient(ft.config).QueryOrganization(ft)
}

// QueryCustomer queries the "customer" edge of the FormulaTemplate entity.
func (ft *FormulaTemplate) QueryCustomer() *CustomerQuery {
	return NewFormulaTemplateClient(ft.config).QueryCustomer(ft)
}

// QueryShipmentType queries the "shipment_type" edge of the FormulaTemplate entity.
func (ft *FormulaTemplate) QueryShipmentType() *ShipmentTypeQuery {
	return NewFormulaTemplateClient(ft.config).QueryShipmentType(ft)
}

// Update returns a builder for updating this FormulaTemplate.
// Note that you need to call FormulaTemplate.Unwrap() before calling this method if this FormulaTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FormulaTemplate) Update() *FormulaTemplateUpdateOne {
	return NewFormulaTemplateClient(ft.config).UpdateOne(ft)
}

// Unwrap unwraps the FormulaTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ft *FormulaTemplate) Unwrap() *FormulaTemplate {
	_tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FormulaTemplate is not a transactional entity")
	}
	ft.config.driver = _tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FormulaTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("FormulaTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ft.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", ft.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", ft.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ft.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ft.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", ft.Version))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ft.Name)
	builder.WriteString(", ")
	builder.WriteString("formula_text=")
	builder.WriteString(ft.FormulaText)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ft.Description)
	builder.WriteString(", ")
	builder.WriteString("template_type=")
	builder.WriteString(fmt.Sprintf("%v", ft.TemplateType))
	builder.WriteString(", ")
	if v := ft.CustomerID; v != nil {
		builder.WriteString("customer_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ft.ShipmentTypeID; v != nil {
		builder.WriteString("shipment_type_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("auto_apply=")
	builder.WriteString(fmt.Sprintf("%v", ft.AutoApply))
	builder.WriteByte(')')
	return builder.String()
}

// FormulaTemplates is a parsable slice of FormulaTemplate.
type FormulaTemplates []*FormulaTemplate
