// Code generated by entc, DO NOT EDIT.

package emailcontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// BillingEmailProfileID applies equality check predicate on the "billing_email_profile_id" field. It's identical to BillingEmailProfileIDEQ.
func BillingEmailProfileID(v uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldBillingEmailProfileID, v))
}

// RateExpirtationEmailProfileID applies equality check predicate on the "rate_expirtation_email_profile_id" field. It's identical to RateExpirtationEmailProfileIDEQ.
func RateExpirtationEmailProfileID(v uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldRateExpirtationEmailProfileID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldLTE(FieldUpdatedAt, v))
}

// BillingEmailProfileIDEQ applies the EQ predicate on the "billing_email_profile_id" field.
func BillingEmailProfileIDEQ(v uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldBillingEmailProfileID, v))
}

// BillingEmailProfileIDNEQ applies the NEQ predicate on the "billing_email_profile_id" field.
func BillingEmailProfileIDNEQ(v uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNEQ(FieldBillingEmailProfileID, v))
}

// BillingEmailProfileIDIn applies the In predicate on the "billing_email_profile_id" field.
func BillingEmailProfileIDIn(vs ...uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldIn(FieldBillingEmailProfileID, vs...))
}

// BillingEmailProfileIDNotIn applies the NotIn predicate on the "billing_email_profile_id" field.
func BillingEmailProfileIDNotIn(vs ...uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNotIn(FieldBillingEmailProfileID, vs...))
}

// BillingEmailProfileIDIsNil applies the IsNil predicate on the "billing_email_profile_id" field.
func BillingEmailProfileIDIsNil() predicate.EmailControl {
	return predicate.EmailControl(sql.FieldIsNull(FieldBillingEmailProfileID))
}

// BillingEmailProfileIDNotNil applies the NotNil predicate on the "billing_email_profile_id" field.
func BillingEmailProfileIDNotNil() predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNotNull(FieldBillingEmailProfileID))
}

// RateExpirtationEmailProfileIDEQ applies the EQ predicate on the "rate_expirtation_email_profile_id" field.
func RateExpirtationEmailProfileIDEQ(v uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldEQ(FieldRateExpirtationEmailProfileID, v))
}

// RateExpirtationEmailProfileIDNEQ applies the NEQ predicate on the "rate_expirtation_email_profile_id" field.
func RateExpirtationEmailProfileIDNEQ(v uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNEQ(FieldRateExpirtationEmailProfileID, v))
}

// RateExpirtationEmailProfileIDIn applies the In predicate on the "rate_expirtation_email_profile_id" field.
func RateExpirtationEmailProfileIDIn(vs ...uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldIn(FieldRateExpirtationEmailProfileID, vs...))
}

// RateExpirtationEmailProfileIDNotIn applies the NotIn predicate on the "rate_expirtation_email_profile_id" field.
func RateExpirtationEmailProfileIDNotIn(vs ...uuid.UUID) predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNotIn(FieldRateExpirtationEmailProfileID, vs...))
}

// RateExpirtationEmailProfileIDIsNil applies the IsNil predicate on the "rate_expirtation_email_profile_id" field.
func RateExpirtationEmailProfileIDIsNil() predicate.EmailControl {
	return predicate.EmailControl(sql.FieldIsNull(FieldRateExpirtationEmailProfileID))
}

// RateExpirtationEmailProfileIDNotNil applies the NotNil predicate on the "rate_expirtation_email_profile_id" field.
func RateExpirtationEmailProfileIDNotNil() predicate.EmailControl {
	return predicate.EmailControl(sql.FieldNotNull(FieldRateExpirtationEmailProfileID))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.EmailControl {
	return predicate.EmailControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.EmailControl {
	return predicate.EmailControl(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.EmailControl {
	return predicate.EmailControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.EmailControl {
	return predicate.EmailControl(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBillingEmailProfile applies the HasEdge predicate on the "billing_email_profile" edge.
func HasBillingEmailProfile() predicate.EmailControl {
	return predicate.EmailControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BillingEmailProfileTable, BillingEmailProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillingEmailProfileWith applies the HasEdge predicate on the "billing_email_profile" edge with a given conditions (other predicates).
func HasBillingEmailProfileWith(preds ...predicate.EmailProfile) predicate.EmailControl {
	return predicate.EmailControl(func(s *sql.Selector) {
		step := newBillingEmailProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRateEmailProfile applies the HasEdge predicate on the "rate_email_profile" edge.
func HasRateEmailProfile() predicate.EmailControl {
	return predicate.EmailControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RateEmailProfileTable, RateEmailProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRateEmailProfileWith applies the HasEdge predicate on the "rate_email_profile" edge with a given conditions (other predicates).
func HasRateEmailProfileWith(preds ...predicate.EmailProfile) predicate.EmailControl {
	return predicate.EmailControl(func(s *sql.Selector) {
		step := newRateEmailProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmailControl) predicate.EmailControl {
	return predicate.EmailControl(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmailControl) predicate.EmailControl {
	return predicate.EmailControl(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmailControl) predicate.EmailControl {
	return predicate.EmailControl(sql.NotPredicates(p))
}
