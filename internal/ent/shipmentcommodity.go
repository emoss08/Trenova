// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/shipment"
	"github.com/emoss08/trenova/internal/ent/shipmentcommodity"
	"github.com/google/uuid"
)

// ShipmentCommodity is the model entity for the ShipmentCommodity schema.
type ShipmentCommodity struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// ShipmentID holds the value of the "shipment_id" field.
	ShipmentID uuid.UUID `json:"shipmentId" validate:"omitempty"`
	// CommodityID holds the value of the "commodity_id" field.
	CommodityID uuid.UUID `json:"commodityId" validate:"required"`
	// HazardousMaterialID holds the value of the "hazardous_material_id" field.
	HazardousMaterialID uuid.UUID `json:"hazardousMaterialId" validate:"omitempty"`
	// SubTotal holds the value of the "sub_total" field.
	SubTotal float64 `json:"subTotal" validate:"required"`
	// PlacardNeeded holds the value of the "placard_needed" field.
	PlacardNeeded bool `json:"placardNeeded" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentCommodityQuery when eager-loading is set.
	Edges        ShipmentCommodityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShipmentCommodityEdges holds the relations/edges for other nodes in the graph.
type ShipmentCommodityEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentCommodityEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentCommodityEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentCommodityEdges) ShipmentOrErr() (*Shipment, error) {
	if e.Shipment != nil {
		return e.Shipment, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: shipment.Label}
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentCommodity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentcommodity.FieldPlacardNeeded:
			values[i] = new(sql.NullBool)
		case shipmentcommodity.FieldSubTotal:
			values[i] = new(sql.NullFloat64)
		case shipmentcommodity.FieldVersion:
			values[i] = new(sql.NullInt64)
		case shipmentcommodity.FieldCreatedAt, shipmentcommodity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case shipmentcommodity.FieldID, shipmentcommodity.FieldBusinessUnitID, shipmentcommodity.FieldOrganizationID, shipmentcommodity.FieldShipmentID, shipmentcommodity.FieldCommodityID, shipmentcommodity.FieldHazardousMaterialID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentCommodity fields.
func (sc *ShipmentCommodity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentcommodity.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sc.ID = *value
			}
		case shipmentcommodity.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				sc.BusinessUnitID = *value
			}
		case shipmentcommodity.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				sc.OrganizationID = *value
			}
		case shipmentcommodity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case shipmentcommodity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case shipmentcommodity.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				sc.Version = int(value.Int64)
			}
		case shipmentcommodity.FieldShipmentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_id", values[i])
			} else if value != nil {
				sc.ShipmentID = *value
			}
		case shipmentcommodity.FieldCommodityID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field commodity_id", values[i])
			} else if value != nil {
				sc.CommodityID = *value
			}
		case shipmentcommodity.FieldHazardousMaterialID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field hazardous_material_id", values[i])
			} else if value != nil {
				sc.HazardousMaterialID = *value
			}
		case shipmentcommodity.FieldSubTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field sub_total", values[i])
			} else if value.Valid {
				sc.SubTotal = value.Float64
			}
		case shipmentcommodity.FieldPlacardNeeded:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field placard_needed", values[i])
			} else if value.Valid {
				sc.PlacardNeeded = value.Bool
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShipmentCommodity.
// This includes values selected through modifiers, order, etc.
func (sc *ShipmentCommodity) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the ShipmentCommodity entity.
func (sc *ShipmentCommodity) QueryBusinessUnit() *BusinessUnitQuery {
	return NewShipmentCommodityClient(sc.config).QueryBusinessUnit(sc)
}

// QueryOrganization queries the "organization" edge of the ShipmentCommodity entity.
func (sc *ShipmentCommodity) QueryOrganization() *OrganizationQuery {
	return NewShipmentCommodityClient(sc.config).QueryOrganization(sc)
}

// QueryShipment queries the "shipment" edge of the ShipmentCommodity entity.
func (sc *ShipmentCommodity) QueryShipment() *ShipmentQuery {
	return NewShipmentCommodityClient(sc.config).QueryShipment(sc)
}

// Update returns a builder for updating this ShipmentCommodity.
// Note that you need to call ShipmentCommodity.Unwrap() before calling this method if this ShipmentCommodity
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ShipmentCommodity) Update() *ShipmentCommodityUpdateOne {
	return NewShipmentCommodityClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the ShipmentCommodity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ShipmentCommodity) Unwrap() *ShipmentCommodity {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentCommodity is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ShipmentCommodity) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentCommodity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", sc.Version))
	builder.WriteString(", ")
	builder.WriteString("shipment_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.ShipmentID))
	builder.WriteString(", ")
	builder.WriteString("commodity_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.CommodityID))
	builder.WriteString(", ")
	builder.WriteString("hazardous_material_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.HazardousMaterialID))
	builder.WriteString(", ")
	builder.WriteString("sub_total=")
	builder.WriteString(fmt.Sprintf("%v", sc.SubTotal))
	builder.WriteString(", ")
	builder.WriteString("placard_needed=")
	builder.WriteString(fmt.Sprintf("%v", sc.PlacardNeeded))
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentCommodities is a parsable slice of ShipmentCommodity.
type ShipmentCommodities []*ShipmentCommodity
