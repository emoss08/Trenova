// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// BusinessUnitCreate is the builder for creating a BusinessUnit entity.
type BusinessUnitCreate struct {
	config
	mutation *BusinessUnitMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (buc *BusinessUnitCreate) SetCreatedAt(t time.Time) *BusinessUnitCreate {
	buc.mutation.SetCreatedAt(t)
	return buc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableCreatedAt(t *time.Time) *BusinessUnitCreate {
	if t != nil {
		buc.SetCreatedAt(*t)
	}
	return buc
}

// SetUpdatedAt sets the "updated_at" field.
func (buc *BusinessUnitCreate) SetUpdatedAt(t time.Time) *BusinessUnitCreate {
	buc.mutation.SetUpdatedAt(t)
	return buc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableUpdatedAt(t *time.Time) *BusinessUnitCreate {
	if t != nil {
		buc.SetUpdatedAt(*t)
	}
	return buc
}

// SetStatus sets the "status" field.
func (buc *BusinessUnitCreate) SetStatus(b businessunit.Status) *BusinessUnitCreate {
	buc.mutation.SetStatus(b)
	return buc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableStatus(b *businessunit.Status) *BusinessUnitCreate {
	if b != nil {
		buc.SetStatus(*b)
	}
	return buc
}

// SetName sets the "name" field.
func (buc *BusinessUnitCreate) SetName(s string) *BusinessUnitCreate {
	buc.mutation.SetName(s)
	return buc
}

// SetEntityKey sets the "entity_key" field.
func (buc *BusinessUnitCreate) SetEntityKey(s string) *BusinessUnitCreate {
	buc.mutation.SetEntityKey(s)
	return buc
}

// SetPhoneNumber sets the "phone_number" field.
func (buc *BusinessUnitCreate) SetPhoneNumber(s string) *BusinessUnitCreate {
	buc.mutation.SetPhoneNumber(s)
	return buc
}

// SetAddress sets the "address" field.
func (buc *BusinessUnitCreate) SetAddress(s string) *BusinessUnitCreate {
	buc.mutation.SetAddress(s)
	return buc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableAddress(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetAddress(*s)
	}
	return buc
}

// SetCity sets the "city" field.
func (buc *BusinessUnitCreate) SetCity(s string) *BusinessUnitCreate {
	buc.mutation.SetCity(s)
	return buc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableCity(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetCity(*s)
	}
	return buc
}

// SetState sets the "state" field.
func (buc *BusinessUnitCreate) SetState(s string) *BusinessUnitCreate {
	buc.mutation.SetState(s)
	return buc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableState(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetState(*s)
	}
	return buc
}

// SetCountry sets the "country" field.
func (buc *BusinessUnitCreate) SetCountry(s string) *BusinessUnitCreate {
	buc.mutation.SetCountry(s)
	return buc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableCountry(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetCountry(*s)
	}
	return buc
}

// SetPostalCode sets the "postal_code" field.
func (buc *BusinessUnitCreate) SetPostalCode(s string) *BusinessUnitCreate {
	buc.mutation.SetPostalCode(s)
	return buc
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillablePostalCode(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetPostalCode(*s)
	}
	return buc
}

// SetTaxID sets the "tax_id" field.
func (buc *BusinessUnitCreate) SetTaxID(s string) *BusinessUnitCreate {
	buc.mutation.SetTaxID(s)
	return buc
}

// SetNillableTaxID sets the "tax_id" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableTaxID(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetTaxID(*s)
	}
	return buc
}

// SetSubscriptionPlan sets the "subscription_plan" field.
func (buc *BusinessUnitCreate) SetSubscriptionPlan(s string) *BusinessUnitCreate {
	buc.mutation.SetSubscriptionPlan(s)
	return buc
}

// SetNillableSubscriptionPlan sets the "subscription_plan" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableSubscriptionPlan(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetSubscriptionPlan(*s)
	}
	return buc
}

// SetDescription sets the "description" field.
func (buc *BusinessUnitCreate) SetDescription(s string) *BusinessUnitCreate {
	buc.mutation.SetDescription(s)
	return buc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableDescription(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetDescription(*s)
	}
	return buc
}

// SetLegalName sets the "legal_name" field.
func (buc *BusinessUnitCreate) SetLegalName(s string) *BusinessUnitCreate {
	buc.mutation.SetLegalName(s)
	return buc
}

// SetNillableLegalName sets the "legal_name" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableLegalName(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetLegalName(*s)
	}
	return buc
}

// SetContactName sets the "contact_name" field.
func (buc *BusinessUnitCreate) SetContactName(s string) *BusinessUnitCreate {
	buc.mutation.SetContactName(s)
	return buc
}

// SetNillableContactName sets the "contact_name" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableContactName(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetContactName(*s)
	}
	return buc
}

// SetContactEmail sets the "contact_email" field.
func (buc *BusinessUnitCreate) SetContactEmail(s string) *BusinessUnitCreate {
	buc.mutation.SetContactEmail(s)
	return buc
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableContactEmail(s *string) *BusinessUnitCreate {
	if s != nil {
		buc.SetContactEmail(*s)
	}
	return buc
}

// SetPaidUntil sets the "paid_until" field.
func (buc *BusinessUnitCreate) SetPaidUntil(t time.Time) *BusinessUnitCreate {
	buc.mutation.SetPaidUntil(t)
	return buc
}

// SetNillablePaidUntil sets the "paid_until" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillablePaidUntil(t *time.Time) *BusinessUnitCreate {
	if t != nil {
		buc.SetPaidUntil(*t)
	}
	return buc
}

// SetSettings sets the "settings" field.
func (buc *BusinessUnitCreate) SetSettings(m map[string]interface{}) *BusinessUnitCreate {
	buc.mutation.SetSettings(m)
	return buc
}

// SetFreeTrial sets the "free_trial" field.
func (buc *BusinessUnitCreate) SetFreeTrial(b bool) *BusinessUnitCreate {
	buc.mutation.SetFreeTrial(b)
	return buc
}

// SetNillableFreeTrial sets the "free_trial" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableFreeTrial(b *bool) *BusinessUnitCreate {
	if b != nil {
		buc.SetFreeTrial(*b)
	}
	return buc
}

// SetParentID sets the "parent_id" field.
func (buc *BusinessUnitCreate) SetParentID(u uuid.UUID) *BusinessUnitCreate {
	buc.mutation.SetParentID(u)
	return buc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableParentID(u *uuid.UUID) *BusinessUnitCreate {
	if u != nil {
		buc.SetParentID(*u)
	}
	return buc
}

// SetID sets the "id" field.
func (buc *BusinessUnitCreate) SetID(u uuid.UUID) *BusinessUnitCreate {
	buc.mutation.SetID(u)
	return buc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableID(u *uuid.UUID) *BusinessUnitCreate {
	if u != nil {
		buc.SetID(*u)
	}
	return buc
}

// SetPrevID sets the "prev" edge to the BusinessUnit entity by ID.
func (buc *BusinessUnitCreate) SetPrevID(id uuid.UUID) *BusinessUnitCreate {
	buc.mutation.SetPrevID(id)
	return buc
}

// SetNillablePrevID sets the "prev" edge to the BusinessUnit entity by ID if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillablePrevID(id *uuid.UUID) *BusinessUnitCreate {
	if id != nil {
		buc = buc.SetPrevID(*id)
	}
	return buc
}

// SetPrev sets the "prev" edge to the BusinessUnit entity.
func (buc *BusinessUnitCreate) SetPrev(b *BusinessUnit) *BusinessUnitCreate {
	return buc.SetPrevID(b.ID)
}

// SetNextID sets the "next" edge to the BusinessUnit entity by ID.
func (buc *BusinessUnitCreate) SetNextID(id uuid.UUID) *BusinessUnitCreate {
	buc.mutation.SetNextID(id)
	return buc
}

// SetNillableNextID sets the "next" edge to the BusinessUnit entity by ID if the given value is not nil.
func (buc *BusinessUnitCreate) SetNillableNextID(id *uuid.UUID) *BusinessUnitCreate {
	if id != nil {
		buc = buc.SetNextID(*id)
	}
	return buc
}

// SetNext sets the "next" edge to the BusinessUnit entity.
func (buc *BusinessUnitCreate) SetNext(b *BusinessUnit) *BusinessUnitCreate {
	return buc.SetNextID(b.ID)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (buc *BusinessUnitCreate) AddOrganizationIDs(ids ...uuid.UUID) *BusinessUnitCreate {
	buc.mutation.AddOrganizationIDs(ids...)
	return buc
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (buc *BusinessUnitCreate) AddOrganizations(o ...*Organization) *BusinessUnitCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buc.AddOrganizationIDs(ids...)
}

// Mutation returns the BusinessUnitMutation object of the builder.
func (buc *BusinessUnitCreate) Mutation() *BusinessUnitMutation {
	return buc.mutation
}

// Save creates the BusinessUnit in the database.
func (buc *BusinessUnitCreate) Save(ctx context.Context) (*BusinessUnit, error) {
	buc.defaults()
	return withHooks(ctx, buc.sqlSave, buc.mutation, buc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (buc *BusinessUnitCreate) SaveX(ctx context.Context) *BusinessUnit {
	v, err := buc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (buc *BusinessUnitCreate) Exec(ctx context.Context) error {
	_, err := buc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buc *BusinessUnitCreate) ExecX(ctx context.Context) {
	if err := buc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buc *BusinessUnitCreate) defaults() {
	if _, ok := buc.mutation.CreatedAt(); !ok {
		v := businessunit.DefaultCreatedAt()
		buc.mutation.SetCreatedAt(v)
	}
	if _, ok := buc.mutation.UpdatedAt(); !ok {
		v := businessunit.DefaultUpdatedAt()
		buc.mutation.SetUpdatedAt(v)
	}
	if _, ok := buc.mutation.Status(); !ok {
		v := businessunit.DefaultStatus
		buc.mutation.SetStatus(v)
	}
	if _, ok := buc.mutation.FreeTrial(); !ok {
		v := businessunit.DefaultFreeTrial
		buc.mutation.SetFreeTrial(v)
	}
	if _, ok := buc.mutation.ID(); !ok {
		v := businessunit.DefaultID()
		buc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buc *BusinessUnitCreate) check() error {
	if _, ok := buc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BusinessUnit.created_at"`)}
	}
	if _, ok := buc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BusinessUnit.updated_at"`)}
	}
	if _, ok := buc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BusinessUnit.status"`)}
	}
	if v, ok := buc.mutation.Status(); ok {
		if err := businessunit.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.status": %w`, err)}
		}
	}
	if _, ok := buc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BusinessUnit.name"`)}
	}
	if v, ok := buc.mutation.Name(); ok {
		if err := businessunit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.name": %w`, err)}
		}
	}
	if _, ok := buc.mutation.EntityKey(); !ok {
		return &ValidationError{Name: "entity_key", err: errors.New(`ent: missing required field "BusinessUnit.entity_key"`)}
	}
	if v, ok := buc.mutation.EntityKey(); ok {
		if err := businessunit.EntityKeyValidator(v); err != nil {
			return &ValidationError{Name: "entity_key", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.entity_key": %w`, err)}
		}
	}
	if _, ok := buc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "BusinessUnit.phone_number"`)}
	}
	if v, ok := buc.mutation.PhoneNumber(); ok {
		if err := businessunit.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.phone_number": %w`, err)}
		}
	}
	if v, ok := buc.mutation.City(); ok {
		if err := businessunit.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.city": %w`, err)}
		}
	}
	if v, ok := buc.mutation.State(); ok {
		if err := businessunit.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.state": %w`, err)}
		}
	}
	if v, ok := buc.mutation.Country(); ok {
		if err := businessunit.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.country": %w`, err)}
		}
	}
	if v, ok := buc.mutation.PostalCode(); ok {
		if err := businessunit.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.postal_code": %w`, err)}
		}
	}
	if v, ok := buc.mutation.TaxID(); ok {
		if err := businessunit.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "tax_id", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.tax_id": %w`, err)}
		}
	}
	if _, ok := buc.mutation.FreeTrial(); !ok {
		return &ValidationError{Name: "free_trial", err: errors.New(`ent: missing required field "BusinessUnit.free_trial"`)}
	}
	return nil
}

func (buc *BusinessUnitCreate) sqlSave(ctx context.Context) (*BusinessUnit, error) {
	if err := buc.check(); err != nil {
		return nil, err
	}
	_node, _spec := buc.createSpec()
	if err := sqlgraph.CreateNode(ctx, buc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	buc.mutation.id = &_node.ID
	buc.mutation.done = true
	return _node, nil
}

func (buc *BusinessUnitCreate) createSpec() (*BusinessUnit, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessUnit{config: buc.config}
		_spec = sqlgraph.NewCreateSpec(businessunit.Table, sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID))
	)
	if id, ok := buc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := buc.mutation.CreatedAt(); ok {
		_spec.SetField(businessunit.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := buc.mutation.UpdatedAt(); ok {
		_spec.SetField(businessunit.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := buc.mutation.Status(); ok {
		_spec.SetField(businessunit.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := buc.mutation.Name(); ok {
		_spec.SetField(businessunit.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := buc.mutation.EntityKey(); ok {
		_spec.SetField(businessunit.FieldEntityKey, field.TypeString, value)
		_node.EntityKey = value
	}
	if value, ok := buc.mutation.PhoneNumber(); ok {
		_spec.SetField(businessunit.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := buc.mutation.Address(); ok {
		_spec.SetField(businessunit.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := buc.mutation.City(); ok {
		_spec.SetField(businessunit.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := buc.mutation.State(); ok {
		_spec.SetField(businessunit.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := buc.mutation.Country(); ok {
		_spec.SetField(businessunit.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := buc.mutation.PostalCode(); ok {
		_spec.SetField(businessunit.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := buc.mutation.TaxID(); ok {
		_spec.SetField(businessunit.FieldTaxID, field.TypeString, value)
		_node.TaxID = value
	}
	if value, ok := buc.mutation.SubscriptionPlan(); ok {
		_spec.SetField(businessunit.FieldSubscriptionPlan, field.TypeString, value)
		_node.SubscriptionPlan = value
	}
	if value, ok := buc.mutation.Description(); ok {
		_spec.SetField(businessunit.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := buc.mutation.LegalName(); ok {
		_spec.SetField(businessunit.FieldLegalName, field.TypeString, value)
		_node.LegalName = value
	}
	if value, ok := buc.mutation.ContactName(); ok {
		_spec.SetField(businessunit.FieldContactName, field.TypeString, value)
		_node.ContactName = value
	}
	if value, ok := buc.mutation.ContactEmail(); ok {
		_spec.SetField(businessunit.FieldContactEmail, field.TypeString, value)
		_node.ContactEmail = value
	}
	if value, ok := buc.mutation.PaidUntil(); ok {
		_spec.SetField(businessunit.FieldPaidUntil, field.TypeTime, value)
		_node.PaidUntil = &value
	}
	if value, ok := buc.mutation.Settings(); ok {
		_spec.SetField(businessunit.FieldSettings, field.TypeJSON, value)
		_node.Settings = value
	}
	if value, ok := buc.mutation.FreeTrial(); ok {
		_spec.SetField(businessunit.FieldFreeTrial, field.TypeBool, value)
		_node.FreeTrial = value
	}
	if nodes := buc.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessunit.PrevTable,
			Columns: []string{businessunit.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := buc.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   businessunit.NextTable,
			Columns: []string{businessunit.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := buc.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessunit.OrganizationsTable,
			Columns: []string{businessunit.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusinessUnitCreateBulk is the builder for creating many BusinessUnit entities in bulk.
type BusinessUnitCreateBulk struct {
	config
	err      error
	builders []*BusinessUnitCreate
}

// Save creates the BusinessUnit entities in the database.
func (bucb *BusinessUnitCreateBulk) Save(ctx context.Context) ([]*BusinessUnit, error) {
	if bucb.err != nil {
		return nil, bucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bucb.builders))
	nodes := make([]*BusinessUnit, len(bucb.builders))
	mutators := make([]Mutator, len(bucb.builders))
	for i := range bucb.builders {
		func(i int, root context.Context) {
			builder := bucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessUnitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bucb *BusinessUnitCreateBulk) SaveX(ctx context.Context) []*BusinessUnit {
	v, err := bucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bucb *BusinessUnitCreateBulk) Exec(ctx context.Context) error {
	_, err := bucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bucb *BusinessUnitCreateBulk) ExecX(ctx context.Context) {
	if err := bucb.Exec(ctx); err != nil {
		panic(err)
	}
}
