// Code generated by entc, DO NOT EDIT.

package featureflag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the featureflag type in the database.
	Label = "feature_flag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldBeta holds the string denoting the beta field in the database.
	FieldBeta = "beta"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPreviewPictureURL holds the string denoting the preview_picture_url field in the database.
	FieldPreviewPictureURL = "preview_picture_url"
	// EdgeOrganizationFeatureFlag holds the string denoting the organization_feature_flag edge name in mutations.
	EdgeOrganizationFeatureFlag = "organization_feature_flag"
	// Table holds the table name of the featureflag in the database.
	Table = "feature_flags"
	// OrganizationFeatureFlagTable is the table that holds the organization_feature_flag relation/edge.
	OrganizationFeatureFlagTable = "organization_feature_flags"
	// OrganizationFeatureFlagInverseTable is the table name for the OrganizationFeatureFlag entity.
	// It exists in this package in order to avoid circular dependency with the "organizationfeatureflag" package.
	OrganizationFeatureFlagInverseTable = "organization_feature_flags"
	// OrganizationFeatureFlagColumn is the table column denoting the organization_feature_flag relation/edge.
	OrganizationFeatureFlagColumn = "feature_flag_id"
)

// Columns holds all SQL columns for featureflag fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldCode,
	FieldBeta,
	FieldDescription,
	FieldPreviewPictureURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultBeta holds the default value on creation for the "beta" field.
	DefaultBeta bool
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the FeatureFlag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByBeta orders the results by the beta field.
func ByBeta(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeta, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPreviewPictureURL orders the results by the preview_picture_url field.
func ByPreviewPictureURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreviewPictureURL, opts...).ToFunc()
}

// ByOrganizationFeatureFlagCount orders the results by organization_feature_flag count.
func ByOrganizationFeatureFlagCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationFeatureFlagStep(), opts...)
	}
}

// ByOrganizationFeatureFlag orders the results by organization_feature_flag terms.
func ByOrganizationFeatureFlag(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationFeatureFlagStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrganizationFeatureFlagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationFeatureFlagInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OrganizationFeatureFlagTable, OrganizationFeatureFlagColumn),
	)
}
