// Code generated by entc, DO NOT EDIT.

package stop

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldVersion, v))
}

// ShipmentMoveID applies equality check predicate on the "shipment_move_id" field. It's identical to ShipmentMoveIDEQ.
func ShipmentMoveID(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldShipmentMoveID, v))
}

// Sequence applies equality check predicate on the "sequence" field. It's identical to SequenceEQ.
func Sequence(v int) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldSequence, v))
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldLocationID, v))
}

// Pieces applies equality check predicate on the "pieces" field. It's identical to PiecesEQ.
func Pieces(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldPieces, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldWeight, v))
}

// AddressLine applies equality check predicate on the "address_line" field. It's identical to AddressLineEQ.
func AddressLine(v string) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldAddressLine, v))
}

// AppointmentStart applies equality check predicate on the "appointment_start" field. It's identical to AppointmentStartEQ.
func AppointmentStart(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldAppointmentStart, v))
}

// AppointmentEnd applies equality check predicate on the "appointment_end" field. It's identical to AppointmentEndEQ.
func AppointmentEnd(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldAppointmentEnd, v))
}

// ArrivalTime applies equality check predicate on the "arrival_time" field. It's identical to ArrivalTimeEQ.
func ArrivalTime(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldArrivalTime, v))
}

// DepartureTime applies equality check predicate on the "departure_time" field. It's identical to DepartureTimeEQ.
func DepartureTime(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldDepartureTime, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldVersion, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldStatus, vs...))
}

// ShipmentMoveIDEQ applies the EQ predicate on the "shipment_move_id" field.
func ShipmentMoveIDEQ(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldShipmentMoveID, v))
}

// ShipmentMoveIDNEQ applies the NEQ predicate on the "shipment_move_id" field.
func ShipmentMoveIDNEQ(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldShipmentMoveID, v))
}

// ShipmentMoveIDIn applies the In predicate on the "shipment_move_id" field.
func ShipmentMoveIDIn(vs ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldShipmentMoveID, vs...))
}

// ShipmentMoveIDNotIn applies the NotIn predicate on the "shipment_move_id" field.
func ShipmentMoveIDNotIn(vs ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldShipmentMoveID, vs...))
}

// StopTypeEQ applies the EQ predicate on the "stop_type" field.
func StopTypeEQ(v StopType) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldStopType, v))
}

// StopTypeNEQ applies the NEQ predicate on the "stop_type" field.
func StopTypeNEQ(v StopType) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldStopType, v))
}

// StopTypeIn applies the In predicate on the "stop_type" field.
func StopTypeIn(vs ...StopType) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldStopType, vs...))
}

// StopTypeNotIn applies the NotIn predicate on the "stop_type" field.
func StopTypeNotIn(vs ...StopType) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldStopType, vs...))
}

// SequenceEQ applies the EQ predicate on the "sequence" field.
func SequenceEQ(v int) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldSequence, v))
}

// SequenceNEQ applies the NEQ predicate on the "sequence" field.
func SequenceNEQ(v int) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldSequence, v))
}

// SequenceIn applies the In predicate on the "sequence" field.
func SequenceIn(vs ...int) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldSequence, vs...))
}

// SequenceNotIn applies the NotIn predicate on the "sequence" field.
func SequenceNotIn(vs ...int) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldSequence, vs...))
}

// SequenceGT applies the GT predicate on the "sequence" field.
func SequenceGT(v int) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldSequence, v))
}

// SequenceGTE applies the GTE predicate on the "sequence" field.
func SequenceGTE(v int) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldSequence, v))
}

// SequenceLT applies the LT predicate on the "sequence" field.
func SequenceLT(v int) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldSequence, v))
}

// SequenceLTE applies the LTE predicate on the "sequence" field.
func SequenceLTE(v int) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldSequence, v))
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldLocationID, v))
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldLocationID, v))
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldLocationID, vs...))
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldLocationID, vs...))
}

// LocationIDGT applies the GT predicate on the "location_id" field.
func LocationIDGT(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldLocationID, v))
}

// LocationIDGTE applies the GTE predicate on the "location_id" field.
func LocationIDGTE(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldLocationID, v))
}

// LocationIDLT applies the LT predicate on the "location_id" field.
func LocationIDLT(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldLocationID, v))
}

// LocationIDLTE applies the LTE predicate on the "location_id" field.
func LocationIDLTE(v uuid.UUID) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldLocationID, v))
}

// LocationIDIsNil applies the IsNil predicate on the "location_id" field.
func LocationIDIsNil() predicate.Stop {
	return predicate.Stop(sql.FieldIsNull(FieldLocationID))
}

// LocationIDNotNil applies the NotNil predicate on the "location_id" field.
func LocationIDNotNil() predicate.Stop {
	return predicate.Stop(sql.FieldNotNull(FieldLocationID))
}

// PiecesEQ applies the EQ predicate on the "pieces" field.
func PiecesEQ(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldPieces, v))
}

// PiecesNEQ applies the NEQ predicate on the "pieces" field.
func PiecesNEQ(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldPieces, v))
}

// PiecesIn applies the In predicate on the "pieces" field.
func PiecesIn(vs ...float64) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldPieces, vs...))
}

// PiecesNotIn applies the NotIn predicate on the "pieces" field.
func PiecesNotIn(vs ...float64) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldPieces, vs...))
}

// PiecesGT applies the GT predicate on the "pieces" field.
func PiecesGT(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldPieces, v))
}

// PiecesGTE applies the GTE predicate on the "pieces" field.
func PiecesGTE(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldPieces, v))
}

// PiecesLT applies the LT predicate on the "pieces" field.
func PiecesLT(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldPieces, v))
}

// PiecesLTE applies the LTE predicate on the "pieces" field.
func PiecesLTE(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldPieces, v))
}

// PiecesIsNil applies the IsNil predicate on the "pieces" field.
func PiecesIsNil() predicate.Stop {
	return predicate.Stop(sql.FieldIsNull(FieldPieces))
}

// PiecesNotNil applies the NotNil predicate on the "pieces" field.
func PiecesNotNil() predicate.Stop {
	return predicate.Stop(sql.FieldNotNull(FieldPieces))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.Stop {
	return predicate.Stop(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.Stop {
	return predicate.Stop(sql.FieldNotNull(FieldWeight))
}

// AddressLineEQ applies the EQ predicate on the "address_line" field.
func AddressLineEQ(v string) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldAddressLine, v))
}

// AddressLineNEQ applies the NEQ predicate on the "address_line" field.
func AddressLineNEQ(v string) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldAddressLine, v))
}

// AddressLineIn applies the In predicate on the "address_line" field.
func AddressLineIn(vs ...string) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldAddressLine, vs...))
}

// AddressLineNotIn applies the NotIn predicate on the "address_line" field.
func AddressLineNotIn(vs ...string) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldAddressLine, vs...))
}

// AddressLineGT applies the GT predicate on the "address_line" field.
func AddressLineGT(v string) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldAddressLine, v))
}

// AddressLineGTE applies the GTE predicate on the "address_line" field.
func AddressLineGTE(v string) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldAddressLine, v))
}

// AddressLineLT applies the LT predicate on the "address_line" field.
func AddressLineLT(v string) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldAddressLine, v))
}

// AddressLineLTE applies the LTE predicate on the "address_line" field.
func AddressLineLTE(v string) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldAddressLine, v))
}

// AddressLineContains applies the Contains predicate on the "address_line" field.
func AddressLineContains(v string) predicate.Stop {
	return predicate.Stop(sql.FieldContains(FieldAddressLine, v))
}

// AddressLineHasPrefix applies the HasPrefix predicate on the "address_line" field.
func AddressLineHasPrefix(v string) predicate.Stop {
	return predicate.Stop(sql.FieldHasPrefix(FieldAddressLine, v))
}

// AddressLineHasSuffix applies the HasSuffix predicate on the "address_line" field.
func AddressLineHasSuffix(v string) predicate.Stop {
	return predicate.Stop(sql.FieldHasSuffix(FieldAddressLine, v))
}

// AddressLineIsNil applies the IsNil predicate on the "address_line" field.
func AddressLineIsNil() predicate.Stop {
	return predicate.Stop(sql.FieldIsNull(FieldAddressLine))
}

// AddressLineNotNil applies the NotNil predicate on the "address_line" field.
func AddressLineNotNil() predicate.Stop {
	return predicate.Stop(sql.FieldNotNull(FieldAddressLine))
}

// AddressLineEqualFold applies the EqualFold predicate on the "address_line" field.
func AddressLineEqualFold(v string) predicate.Stop {
	return predicate.Stop(sql.FieldEqualFold(FieldAddressLine, v))
}

// AddressLineContainsFold applies the ContainsFold predicate on the "address_line" field.
func AddressLineContainsFold(v string) predicate.Stop {
	return predicate.Stop(sql.FieldContainsFold(FieldAddressLine, v))
}

// AppointmentStartEQ applies the EQ predicate on the "appointment_start" field.
func AppointmentStartEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldAppointmentStart, v))
}

// AppointmentStartNEQ applies the NEQ predicate on the "appointment_start" field.
func AppointmentStartNEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldAppointmentStart, v))
}

// AppointmentStartIn applies the In predicate on the "appointment_start" field.
func AppointmentStartIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldAppointmentStart, vs...))
}

// AppointmentStartNotIn applies the NotIn predicate on the "appointment_start" field.
func AppointmentStartNotIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldAppointmentStart, vs...))
}

// AppointmentStartGT applies the GT predicate on the "appointment_start" field.
func AppointmentStartGT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldAppointmentStart, v))
}

// AppointmentStartGTE applies the GTE predicate on the "appointment_start" field.
func AppointmentStartGTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldAppointmentStart, v))
}

// AppointmentStartLT applies the LT predicate on the "appointment_start" field.
func AppointmentStartLT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldAppointmentStart, v))
}

// AppointmentStartLTE applies the LTE predicate on the "appointment_start" field.
func AppointmentStartLTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldAppointmentStart, v))
}

// AppointmentStartIsNil applies the IsNil predicate on the "appointment_start" field.
func AppointmentStartIsNil() predicate.Stop {
	return predicate.Stop(sql.FieldIsNull(FieldAppointmentStart))
}

// AppointmentStartNotNil applies the NotNil predicate on the "appointment_start" field.
func AppointmentStartNotNil() predicate.Stop {
	return predicate.Stop(sql.FieldNotNull(FieldAppointmentStart))
}

// AppointmentEndEQ applies the EQ predicate on the "appointment_end" field.
func AppointmentEndEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldAppointmentEnd, v))
}

// AppointmentEndNEQ applies the NEQ predicate on the "appointment_end" field.
func AppointmentEndNEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldAppointmentEnd, v))
}

// AppointmentEndIn applies the In predicate on the "appointment_end" field.
func AppointmentEndIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldAppointmentEnd, vs...))
}

// AppointmentEndNotIn applies the NotIn predicate on the "appointment_end" field.
func AppointmentEndNotIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldAppointmentEnd, vs...))
}

// AppointmentEndGT applies the GT predicate on the "appointment_end" field.
func AppointmentEndGT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldAppointmentEnd, v))
}

// AppointmentEndGTE applies the GTE predicate on the "appointment_end" field.
func AppointmentEndGTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldAppointmentEnd, v))
}

// AppointmentEndLT applies the LT predicate on the "appointment_end" field.
func AppointmentEndLT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldAppointmentEnd, v))
}

// AppointmentEndLTE applies the LTE predicate on the "appointment_end" field.
func AppointmentEndLTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldAppointmentEnd, v))
}

// AppointmentEndIsNil applies the IsNil predicate on the "appointment_end" field.
func AppointmentEndIsNil() predicate.Stop {
	return predicate.Stop(sql.FieldIsNull(FieldAppointmentEnd))
}

// AppointmentEndNotNil applies the NotNil predicate on the "appointment_end" field.
func AppointmentEndNotNil() predicate.Stop {
	return predicate.Stop(sql.FieldNotNull(FieldAppointmentEnd))
}

// ArrivalTimeEQ applies the EQ predicate on the "arrival_time" field.
func ArrivalTimeEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldArrivalTime, v))
}

// ArrivalTimeNEQ applies the NEQ predicate on the "arrival_time" field.
func ArrivalTimeNEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldArrivalTime, v))
}

// ArrivalTimeIn applies the In predicate on the "arrival_time" field.
func ArrivalTimeIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldArrivalTime, vs...))
}

// ArrivalTimeNotIn applies the NotIn predicate on the "arrival_time" field.
func ArrivalTimeNotIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldArrivalTime, vs...))
}

// ArrivalTimeGT applies the GT predicate on the "arrival_time" field.
func ArrivalTimeGT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldArrivalTime, v))
}

// ArrivalTimeGTE applies the GTE predicate on the "arrival_time" field.
func ArrivalTimeGTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldArrivalTime, v))
}

// ArrivalTimeLT applies the LT predicate on the "arrival_time" field.
func ArrivalTimeLT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldArrivalTime, v))
}

// ArrivalTimeLTE applies the LTE predicate on the "arrival_time" field.
func ArrivalTimeLTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldArrivalTime, v))
}

// ArrivalTimeIsNil applies the IsNil predicate on the "arrival_time" field.
func ArrivalTimeIsNil() predicate.Stop {
	return predicate.Stop(sql.FieldIsNull(FieldArrivalTime))
}

// ArrivalTimeNotNil applies the NotNil predicate on the "arrival_time" field.
func ArrivalTimeNotNil() predicate.Stop {
	return predicate.Stop(sql.FieldNotNull(FieldArrivalTime))
}

// DepartureTimeEQ applies the EQ predicate on the "departure_time" field.
func DepartureTimeEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldEQ(FieldDepartureTime, v))
}

// DepartureTimeNEQ applies the NEQ predicate on the "departure_time" field.
func DepartureTimeNEQ(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNEQ(FieldDepartureTime, v))
}

// DepartureTimeIn applies the In predicate on the "departure_time" field.
func DepartureTimeIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldIn(FieldDepartureTime, vs...))
}

// DepartureTimeNotIn applies the NotIn predicate on the "departure_time" field.
func DepartureTimeNotIn(vs ...time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldNotIn(FieldDepartureTime, vs...))
}

// DepartureTimeGT applies the GT predicate on the "departure_time" field.
func DepartureTimeGT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGT(FieldDepartureTime, v))
}

// DepartureTimeGTE applies the GTE predicate on the "departure_time" field.
func DepartureTimeGTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldGTE(FieldDepartureTime, v))
}

// DepartureTimeLT applies the LT predicate on the "departure_time" field.
func DepartureTimeLT(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLT(FieldDepartureTime, v))
}

// DepartureTimeLTE applies the LTE predicate on the "departure_time" field.
func DepartureTimeLTE(v time.Time) predicate.Stop {
	return predicate.Stop(sql.FieldLTE(FieldDepartureTime, v))
}

// DepartureTimeIsNil applies the IsNil predicate on the "departure_time" field.
func DepartureTimeIsNil() predicate.Stop {
	return predicate.Stop(sql.FieldIsNull(FieldDepartureTime))
}

// DepartureTimeNotNil applies the NotNil predicate on the "departure_time" field.
func DepartureTimeNotNil() predicate.Stop {
	return predicate.Stop(sql.FieldNotNull(FieldDepartureTime))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.Stop {
	return predicate.Stop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.Stop {
	return predicate.Stop(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Stop {
	return predicate.Stop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Stop {
	return predicate.Stop(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentMove applies the HasEdge predicate on the "shipment_move" edge.
func HasShipmentMove() predicate.Stop {
	return predicate.Stop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShipmentMoveTable, ShipmentMoveColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentMoveWith applies the HasEdge predicate on the "shipment_move" edge with a given conditions (other predicates).
func HasShipmentMoveWith(preds ...predicate.ShipmentMove) predicate.Stop {
	return predicate.Stop(func(s *sql.Selector) {
		step := newShipmentMoveStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stop) predicate.Stop {
	return predicate.Stop(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stop) predicate.Stop {
	return predicate.Stop(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stop) predicate.Stop {
	return predicate.Stop(sql.NotPredicates(p))
}
