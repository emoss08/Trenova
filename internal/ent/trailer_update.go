// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/equipmentmanufactuer"
	"github.com/emoss08/trenova/internal/ent/equipmenttype"
	"github.com/emoss08/trenova/internal/ent/fleetcode"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/trailer"
	"github.com/emoss08/trenova/internal/ent/usstate"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// TrailerUpdate is the builder for updating Trailer entities.
type TrailerUpdate struct {
	config
	hooks     []Hook
	mutation  *TrailerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrailerUpdate builder.
func (tu *TrailerUpdate) Where(ps ...predicate.Trailer) *TrailerUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TrailerUpdate) SetUpdatedAt(t time.Time) *TrailerUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetVersion sets the "version" field.
func (tu *TrailerUpdate) SetVersion(i int) *TrailerUpdate {
	tu.mutation.ResetVersion()
	tu.mutation.SetVersion(i)
	return tu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableVersion(i *int) *TrailerUpdate {
	if i != nil {
		tu.SetVersion(*i)
	}
	return tu
}

// AddVersion adds i to the "version" field.
func (tu *TrailerUpdate) AddVersion(i int) *TrailerUpdate {
	tu.mutation.AddVersion(i)
	return tu
}

// SetCode sets the "code" field.
func (tu *TrailerUpdate) SetCode(s string) *TrailerUpdate {
	tu.mutation.SetCode(s)
	return tu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableCode(s *string) *TrailerUpdate {
	if s != nil {
		tu.SetCode(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TrailerUpdate) SetStatus(t trailer.Status) *TrailerUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableStatus(t *trailer.Status) *TrailerUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetEquipmentTypeID sets the "equipment_type_id" field.
func (tu *TrailerUpdate) SetEquipmentTypeID(u uuid.UUID) *TrailerUpdate {
	tu.mutation.SetEquipmentTypeID(u)
	return tu
}

// SetNillableEquipmentTypeID sets the "equipment_type_id" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableEquipmentTypeID(u *uuid.UUID) *TrailerUpdate {
	if u != nil {
		tu.SetEquipmentTypeID(*u)
	}
	return tu
}

// SetVin sets the "vin" field.
func (tu *TrailerUpdate) SetVin(s string) *TrailerUpdate {
	tu.mutation.SetVin(s)
	return tu
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableVin(s *string) *TrailerUpdate {
	if s != nil {
		tu.SetVin(*s)
	}
	return tu
}

// ClearVin clears the value of the "vin" field.
func (tu *TrailerUpdate) ClearVin() *TrailerUpdate {
	tu.mutation.ClearVin()
	return tu
}

// SetEquipmentManufacturerID sets the "equipment_manufacturer_id" field.
func (tu *TrailerUpdate) SetEquipmentManufacturerID(u uuid.UUID) *TrailerUpdate {
	tu.mutation.SetEquipmentManufacturerID(u)
	return tu
}

// SetNillableEquipmentManufacturerID sets the "equipment_manufacturer_id" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableEquipmentManufacturerID(u *uuid.UUID) *TrailerUpdate {
	if u != nil {
		tu.SetEquipmentManufacturerID(*u)
	}
	return tu
}

// ClearEquipmentManufacturerID clears the value of the "equipment_manufacturer_id" field.
func (tu *TrailerUpdate) ClearEquipmentManufacturerID() *TrailerUpdate {
	tu.mutation.ClearEquipmentManufacturerID()
	return tu
}

// SetModel sets the "model" field.
func (tu *TrailerUpdate) SetModel(s string) *TrailerUpdate {
	tu.mutation.SetModel(s)
	return tu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableModel(s *string) *TrailerUpdate {
	if s != nil {
		tu.SetModel(*s)
	}
	return tu
}

// ClearModel clears the value of the "model" field.
func (tu *TrailerUpdate) ClearModel() *TrailerUpdate {
	tu.mutation.ClearModel()
	return tu
}

// SetYear sets the "year" field.
func (tu *TrailerUpdate) SetYear(i int16) *TrailerUpdate {
	tu.mutation.ResetYear()
	tu.mutation.SetYear(i)
	return tu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableYear(i *int16) *TrailerUpdate {
	if i != nil {
		tu.SetYear(*i)
	}
	return tu
}

// AddYear adds i to the "year" field.
func (tu *TrailerUpdate) AddYear(i int16) *TrailerUpdate {
	tu.mutation.AddYear(i)
	return tu
}

// ClearYear clears the value of the "year" field.
func (tu *TrailerUpdate) ClearYear() *TrailerUpdate {
	tu.mutation.ClearYear()
	return tu
}

// SetLicensePlateNumber sets the "license_plate_number" field.
func (tu *TrailerUpdate) SetLicensePlateNumber(s string) *TrailerUpdate {
	tu.mutation.SetLicensePlateNumber(s)
	return tu
}

// SetNillableLicensePlateNumber sets the "license_plate_number" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableLicensePlateNumber(s *string) *TrailerUpdate {
	if s != nil {
		tu.SetLicensePlateNumber(*s)
	}
	return tu
}

// ClearLicensePlateNumber clears the value of the "license_plate_number" field.
func (tu *TrailerUpdate) ClearLicensePlateNumber() *TrailerUpdate {
	tu.mutation.ClearLicensePlateNumber()
	return tu
}

// SetStateID sets the "state_id" field.
func (tu *TrailerUpdate) SetStateID(u uuid.UUID) *TrailerUpdate {
	tu.mutation.SetStateID(u)
	return tu
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableStateID(u *uuid.UUID) *TrailerUpdate {
	if u != nil {
		tu.SetStateID(*u)
	}
	return tu
}

// ClearStateID clears the value of the "state_id" field.
func (tu *TrailerUpdate) ClearStateID() *TrailerUpdate {
	tu.mutation.ClearStateID()
	return tu
}

// SetFleetCodeID sets the "fleet_code_id" field.
func (tu *TrailerUpdate) SetFleetCodeID(u uuid.UUID) *TrailerUpdate {
	tu.mutation.SetFleetCodeID(u)
	return tu
}

// SetNillableFleetCodeID sets the "fleet_code_id" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableFleetCodeID(u *uuid.UUID) *TrailerUpdate {
	if u != nil {
		tu.SetFleetCodeID(*u)
	}
	return tu
}

// SetLastInspectionDate sets the "last_inspection_date" field.
func (tu *TrailerUpdate) SetLastInspectionDate(pg *pgtype.Date) *TrailerUpdate {
	tu.mutation.SetLastInspectionDate(pg)
	return tu
}

// ClearLastInspectionDate clears the value of the "last_inspection_date" field.
func (tu *TrailerUpdate) ClearLastInspectionDate() *TrailerUpdate {
	tu.mutation.ClearLastInspectionDate()
	return tu
}

// SetRegistrationNumber sets the "registration_number" field.
func (tu *TrailerUpdate) SetRegistrationNumber(s string) *TrailerUpdate {
	tu.mutation.SetRegistrationNumber(s)
	return tu
}

// SetNillableRegistrationNumber sets the "registration_number" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableRegistrationNumber(s *string) *TrailerUpdate {
	if s != nil {
		tu.SetRegistrationNumber(*s)
	}
	return tu
}

// ClearRegistrationNumber clears the value of the "registration_number" field.
func (tu *TrailerUpdate) ClearRegistrationNumber() *TrailerUpdate {
	tu.mutation.ClearRegistrationNumber()
	return tu
}

// SetRegistrationStateID sets the "registration_state_id" field.
func (tu *TrailerUpdate) SetRegistrationStateID(u uuid.UUID) *TrailerUpdate {
	tu.mutation.SetRegistrationStateID(u)
	return tu
}

// SetNillableRegistrationStateID sets the "registration_state_id" field if the given value is not nil.
func (tu *TrailerUpdate) SetNillableRegistrationStateID(u *uuid.UUID) *TrailerUpdate {
	if u != nil {
		tu.SetRegistrationStateID(*u)
	}
	return tu
}

// ClearRegistrationStateID clears the value of the "registration_state_id" field.
func (tu *TrailerUpdate) ClearRegistrationStateID() *TrailerUpdate {
	tu.mutation.ClearRegistrationStateID()
	return tu
}

// SetRegistrationExpirationDate sets the "registration_expiration_date" field.
func (tu *TrailerUpdate) SetRegistrationExpirationDate(pg *pgtype.Date) *TrailerUpdate {
	tu.mutation.SetRegistrationExpirationDate(pg)
	return tu
}

// ClearRegistrationExpirationDate clears the value of the "registration_expiration_date" field.
func (tu *TrailerUpdate) ClearRegistrationExpirationDate() *TrailerUpdate {
	tu.mutation.ClearRegistrationExpirationDate()
	return tu
}

// SetEquipmentType sets the "equipment_type" edge to the EquipmentType entity.
func (tu *TrailerUpdate) SetEquipmentType(e *EquipmentType) *TrailerUpdate {
	return tu.SetEquipmentTypeID(e.ID)
}

// SetEquipmentManufacturer sets the "equipment_manufacturer" edge to the EquipmentManufactuer entity.
func (tu *TrailerUpdate) SetEquipmentManufacturer(e *EquipmentManufactuer) *TrailerUpdate {
	return tu.SetEquipmentManufacturerID(e.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (tu *TrailerUpdate) SetState(u *UsState) *TrailerUpdate {
	return tu.SetStateID(u.ID)
}

// SetRegistrationState sets the "registration_state" edge to the UsState entity.
func (tu *TrailerUpdate) SetRegistrationState(u *UsState) *TrailerUpdate {
	return tu.SetRegistrationStateID(u.ID)
}

// SetFleetCode sets the "fleet_code" edge to the FleetCode entity.
func (tu *TrailerUpdate) SetFleetCode(f *FleetCode) *TrailerUpdate {
	return tu.SetFleetCodeID(f.ID)
}

// Mutation returns the TrailerMutation object of the builder.
func (tu *TrailerUpdate) Mutation() *TrailerMutation {
	return tu.mutation
}

// ClearEquipmentType clears the "equipment_type" edge to the EquipmentType entity.
func (tu *TrailerUpdate) ClearEquipmentType() *TrailerUpdate {
	tu.mutation.ClearEquipmentType()
	return tu
}

// ClearEquipmentManufacturer clears the "equipment_manufacturer" edge to the EquipmentManufactuer entity.
func (tu *TrailerUpdate) ClearEquipmentManufacturer() *TrailerUpdate {
	tu.mutation.ClearEquipmentManufacturer()
	return tu
}

// ClearState clears the "state" edge to the UsState entity.
func (tu *TrailerUpdate) ClearState() *TrailerUpdate {
	tu.mutation.ClearState()
	return tu
}

// ClearRegistrationState clears the "registration_state" edge to the UsState entity.
func (tu *TrailerUpdate) ClearRegistrationState() *TrailerUpdate {
	tu.mutation.ClearRegistrationState()
	return tu
}

// ClearFleetCode clears the "fleet_code" edge to the FleetCode entity.
func (tu *TrailerUpdate) ClearFleetCode() *TrailerUpdate {
	tu.mutation.ClearFleetCode()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrailerUpdate) Save(ctx context.Context) (int, error) {
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrailerUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrailerUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrailerUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TrailerUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if trailer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized trailer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := trailer.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tu *TrailerUpdate) check() error {
	if v, ok := tu.mutation.Code(); ok {
		if err := trailer.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Trailer.code": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := trailer.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trailer.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Model(); ok {
		if err := trailer.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Trailer.model": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Year(); ok {
		if err := trailer.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "Trailer.year": %w`, err)}
		}
	}
	if v, ok := tu.mutation.LicensePlateNumber(); ok {
		if err := trailer.LicensePlateNumberValidator(v); err != nil {
			return &ValidationError{Name: "license_plate_number", err: fmt.Errorf(`ent: validator failed for field "Trailer.license_plate_number": %w`, err)}
		}
	}
	if _, ok := tu.mutation.BusinessUnitID(); tu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trailer.business_unit"`)
	}
	if _, ok := tu.mutation.OrganizationID(); tu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trailer.organization"`)
	}
	if _, ok := tu.mutation.EquipmentTypeID(); tu.mutation.EquipmentTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trailer.equipment_type"`)
	}
	if _, ok := tu.mutation.FleetCodeID(); tu.mutation.FleetCodeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trailer.fleet_code"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TrailerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrailerUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TrailerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trailer.Table, trailer.Columns, sqlgraph.NewFieldSpec(trailer.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(trailer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Version(); ok {
		_spec.SetField(trailer.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedVersion(); ok {
		_spec.AddField(trailer.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Code(); ok {
		_spec.SetField(trailer.FieldCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(trailer.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Vin(); ok {
		_spec.SetField(trailer.FieldVin, field.TypeString, value)
	}
	if tu.mutation.VinCleared() {
		_spec.ClearField(trailer.FieldVin, field.TypeString)
	}
	if value, ok := tu.mutation.Model(); ok {
		_spec.SetField(trailer.FieldModel, field.TypeString, value)
	}
	if tu.mutation.ModelCleared() {
		_spec.ClearField(trailer.FieldModel, field.TypeString)
	}
	if value, ok := tu.mutation.Year(); ok {
		_spec.SetField(trailer.FieldYear, field.TypeInt16, value)
	}
	if value, ok := tu.mutation.AddedYear(); ok {
		_spec.AddField(trailer.FieldYear, field.TypeInt16, value)
	}
	if tu.mutation.YearCleared() {
		_spec.ClearField(trailer.FieldYear, field.TypeInt16)
	}
	if value, ok := tu.mutation.LicensePlateNumber(); ok {
		_spec.SetField(trailer.FieldLicensePlateNumber, field.TypeString, value)
	}
	if tu.mutation.LicensePlateNumberCleared() {
		_spec.ClearField(trailer.FieldLicensePlateNumber, field.TypeString)
	}
	if value, ok := tu.mutation.LastInspectionDate(); ok {
		_spec.SetField(trailer.FieldLastInspectionDate, field.TypeOther, value)
	}
	if tu.mutation.LastInspectionDateCleared() {
		_spec.ClearField(trailer.FieldLastInspectionDate, field.TypeOther)
	}
	if value, ok := tu.mutation.RegistrationNumber(); ok {
		_spec.SetField(trailer.FieldRegistrationNumber, field.TypeString, value)
	}
	if tu.mutation.RegistrationNumberCleared() {
		_spec.ClearField(trailer.FieldRegistrationNumber, field.TypeString)
	}
	if value, ok := tu.mutation.RegistrationExpirationDate(); ok {
		_spec.SetField(trailer.FieldRegistrationExpirationDate, field.TypeOther, value)
	}
	if tu.mutation.RegistrationExpirationDateCleared() {
		_spec.ClearField(trailer.FieldRegistrationExpirationDate, field.TypeOther)
	}
	if tu.mutation.EquipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentTypeTable,
			Columns: []string{trailer.EquipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EquipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentTypeTable,
			Columns: []string{trailer.EquipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.EquipmentManufacturerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentManufacturerTable,
			Columns: []string{trailer.EquipmentManufacturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentmanufactuer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EquipmentManufacturerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentManufacturerTable,
			Columns: []string{trailer.EquipmentManufacturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentmanufactuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.StateTable,
			Columns: []string{trailer.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.StateTable,
			Columns: []string{trailer.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RegistrationStateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.RegistrationStateTable,
			Columns: []string{trailer.RegistrationStateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RegistrationStateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.RegistrationStateTable,
			Columns: []string{trailer.RegistrationStateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FleetCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.FleetCodeTable,
			Columns: []string{trailer.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FleetCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.FleetCodeTable,
			Columns: []string{trailer.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trailer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrailerUpdateOne is the builder for updating a single Trailer entity.
type TrailerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrailerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TrailerUpdateOne) SetUpdatedAt(t time.Time) *TrailerUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetVersion sets the "version" field.
func (tuo *TrailerUpdateOne) SetVersion(i int) *TrailerUpdateOne {
	tuo.mutation.ResetVersion()
	tuo.mutation.SetVersion(i)
	return tuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableVersion(i *int) *TrailerUpdateOne {
	if i != nil {
		tuo.SetVersion(*i)
	}
	return tuo
}

// AddVersion adds i to the "version" field.
func (tuo *TrailerUpdateOne) AddVersion(i int) *TrailerUpdateOne {
	tuo.mutation.AddVersion(i)
	return tuo
}

// SetCode sets the "code" field.
func (tuo *TrailerUpdateOne) SetCode(s string) *TrailerUpdateOne {
	tuo.mutation.SetCode(s)
	return tuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableCode(s *string) *TrailerUpdateOne {
	if s != nil {
		tuo.SetCode(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TrailerUpdateOne) SetStatus(t trailer.Status) *TrailerUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableStatus(t *trailer.Status) *TrailerUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetEquipmentTypeID sets the "equipment_type_id" field.
func (tuo *TrailerUpdateOne) SetEquipmentTypeID(u uuid.UUID) *TrailerUpdateOne {
	tuo.mutation.SetEquipmentTypeID(u)
	return tuo
}

// SetNillableEquipmentTypeID sets the "equipment_type_id" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableEquipmentTypeID(u *uuid.UUID) *TrailerUpdateOne {
	if u != nil {
		tuo.SetEquipmentTypeID(*u)
	}
	return tuo
}

// SetVin sets the "vin" field.
func (tuo *TrailerUpdateOne) SetVin(s string) *TrailerUpdateOne {
	tuo.mutation.SetVin(s)
	return tuo
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableVin(s *string) *TrailerUpdateOne {
	if s != nil {
		tuo.SetVin(*s)
	}
	return tuo
}

// ClearVin clears the value of the "vin" field.
func (tuo *TrailerUpdateOne) ClearVin() *TrailerUpdateOne {
	tuo.mutation.ClearVin()
	return tuo
}

// SetEquipmentManufacturerID sets the "equipment_manufacturer_id" field.
func (tuo *TrailerUpdateOne) SetEquipmentManufacturerID(u uuid.UUID) *TrailerUpdateOne {
	tuo.mutation.SetEquipmentManufacturerID(u)
	return tuo
}

// SetNillableEquipmentManufacturerID sets the "equipment_manufacturer_id" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableEquipmentManufacturerID(u *uuid.UUID) *TrailerUpdateOne {
	if u != nil {
		tuo.SetEquipmentManufacturerID(*u)
	}
	return tuo
}

// ClearEquipmentManufacturerID clears the value of the "equipment_manufacturer_id" field.
func (tuo *TrailerUpdateOne) ClearEquipmentManufacturerID() *TrailerUpdateOne {
	tuo.mutation.ClearEquipmentManufacturerID()
	return tuo
}

// SetModel sets the "model" field.
func (tuo *TrailerUpdateOne) SetModel(s string) *TrailerUpdateOne {
	tuo.mutation.SetModel(s)
	return tuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableModel(s *string) *TrailerUpdateOne {
	if s != nil {
		tuo.SetModel(*s)
	}
	return tuo
}

// ClearModel clears the value of the "model" field.
func (tuo *TrailerUpdateOne) ClearModel() *TrailerUpdateOne {
	tuo.mutation.ClearModel()
	return tuo
}

// SetYear sets the "year" field.
func (tuo *TrailerUpdateOne) SetYear(i int16) *TrailerUpdateOne {
	tuo.mutation.ResetYear()
	tuo.mutation.SetYear(i)
	return tuo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableYear(i *int16) *TrailerUpdateOne {
	if i != nil {
		tuo.SetYear(*i)
	}
	return tuo
}

// AddYear adds i to the "year" field.
func (tuo *TrailerUpdateOne) AddYear(i int16) *TrailerUpdateOne {
	tuo.mutation.AddYear(i)
	return tuo
}

// ClearYear clears the value of the "year" field.
func (tuo *TrailerUpdateOne) ClearYear() *TrailerUpdateOne {
	tuo.mutation.ClearYear()
	return tuo
}

// SetLicensePlateNumber sets the "license_plate_number" field.
func (tuo *TrailerUpdateOne) SetLicensePlateNumber(s string) *TrailerUpdateOne {
	tuo.mutation.SetLicensePlateNumber(s)
	return tuo
}

// SetNillableLicensePlateNumber sets the "license_plate_number" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableLicensePlateNumber(s *string) *TrailerUpdateOne {
	if s != nil {
		tuo.SetLicensePlateNumber(*s)
	}
	return tuo
}

// ClearLicensePlateNumber clears the value of the "license_plate_number" field.
func (tuo *TrailerUpdateOne) ClearLicensePlateNumber() *TrailerUpdateOne {
	tuo.mutation.ClearLicensePlateNumber()
	return tuo
}

// SetStateID sets the "state_id" field.
func (tuo *TrailerUpdateOne) SetStateID(u uuid.UUID) *TrailerUpdateOne {
	tuo.mutation.SetStateID(u)
	return tuo
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableStateID(u *uuid.UUID) *TrailerUpdateOne {
	if u != nil {
		tuo.SetStateID(*u)
	}
	return tuo
}

// ClearStateID clears the value of the "state_id" field.
func (tuo *TrailerUpdateOne) ClearStateID() *TrailerUpdateOne {
	tuo.mutation.ClearStateID()
	return tuo
}

// SetFleetCodeID sets the "fleet_code_id" field.
func (tuo *TrailerUpdateOne) SetFleetCodeID(u uuid.UUID) *TrailerUpdateOne {
	tuo.mutation.SetFleetCodeID(u)
	return tuo
}

// SetNillableFleetCodeID sets the "fleet_code_id" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableFleetCodeID(u *uuid.UUID) *TrailerUpdateOne {
	if u != nil {
		tuo.SetFleetCodeID(*u)
	}
	return tuo
}

// SetLastInspectionDate sets the "last_inspection_date" field.
func (tuo *TrailerUpdateOne) SetLastInspectionDate(pg *pgtype.Date) *TrailerUpdateOne {
	tuo.mutation.SetLastInspectionDate(pg)
	return tuo
}

// ClearLastInspectionDate clears the value of the "last_inspection_date" field.
func (tuo *TrailerUpdateOne) ClearLastInspectionDate() *TrailerUpdateOne {
	tuo.mutation.ClearLastInspectionDate()
	return tuo
}

// SetRegistrationNumber sets the "registration_number" field.
func (tuo *TrailerUpdateOne) SetRegistrationNumber(s string) *TrailerUpdateOne {
	tuo.mutation.SetRegistrationNumber(s)
	return tuo
}

// SetNillableRegistrationNumber sets the "registration_number" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableRegistrationNumber(s *string) *TrailerUpdateOne {
	if s != nil {
		tuo.SetRegistrationNumber(*s)
	}
	return tuo
}

// ClearRegistrationNumber clears the value of the "registration_number" field.
func (tuo *TrailerUpdateOne) ClearRegistrationNumber() *TrailerUpdateOne {
	tuo.mutation.ClearRegistrationNumber()
	return tuo
}

// SetRegistrationStateID sets the "registration_state_id" field.
func (tuo *TrailerUpdateOne) SetRegistrationStateID(u uuid.UUID) *TrailerUpdateOne {
	tuo.mutation.SetRegistrationStateID(u)
	return tuo
}

// SetNillableRegistrationStateID sets the "registration_state_id" field if the given value is not nil.
func (tuo *TrailerUpdateOne) SetNillableRegistrationStateID(u *uuid.UUID) *TrailerUpdateOne {
	if u != nil {
		tuo.SetRegistrationStateID(*u)
	}
	return tuo
}

// ClearRegistrationStateID clears the value of the "registration_state_id" field.
func (tuo *TrailerUpdateOne) ClearRegistrationStateID() *TrailerUpdateOne {
	tuo.mutation.ClearRegistrationStateID()
	return tuo
}

// SetRegistrationExpirationDate sets the "registration_expiration_date" field.
func (tuo *TrailerUpdateOne) SetRegistrationExpirationDate(pg *pgtype.Date) *TrailerUpdateOne {
	tuo.mutation.SetRegistrationExpirationDate(pg)
	return tuo
}

// ClearRegistrationExpirationDate clears the value of the "registration_expiration_date" field.
func (tuo *TrailerUpdateOne) ClearRegistrationExpirationDate() *TrailerUpdateOne {
	tuo.mutation.ClearRegistrationExpirationDate()
	return tuo
}

// SetEquipmentType sets the "equipment_type" edge to the EquipmentType entity.
func (tuo *TrailerUpdateOne) SetEquipmentType(e *EquipmentType) *TrailerUpdateOne {
	return tuo.SetEquipmentTypeID(e.ID)
}

// SetEquipmentManufacturer sets the "equipment_manufacturer" edge to the EquipmentManufactuer entity.
func (tuo *TrailerUpdateOne) SetEquipmentManufacturer(e *EquipmentManufactuer) *TrailerUpdateOne {
	return tuo.SetEquipmentManufacturerID(e.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (tuo *TrailerUpdateOne) SetState(u *UsState) *TrailerUpdateOne {
	return tuo.SetStateID(u.ID)
}

// SetRegistrationState sets the "registration_state" edge to the UsState entity.
func (tuo *TrailerUpdateOne) SetRegistrationState(u *UsState) *TrailerUpdateOne {
	return tuo.SetRegistrationStateID(u.ID)
}

// SetFleetCode sets the "fleet_code" edge to the FleetCode entity.
func (tuo *TrailerUpdateOne) SetFleetCode(f *FleetCode) *TrailerUpdateOne {
	return tuo.SetFleetCodeID(f.ID)
}

// Mutation returns the TrailerMutation object of the builder.
func (tuo *TrailerUpdateOne) Mutation() *TrailerMutation {
	return tuo.mutation
}

// ClearEquipmentType clears the "equipment_type" edge to the EquipmentType entity.
func (tuo *TrailerUpdateOne) ClearEquipmentType() *TrailerUpdateOne {
	tuo.mutation.ClearEquipmentType()
	return tuo
}

// ClearEquipmentManufacturer clears the "equipment_manufacturer" edge to the EquipmentManufactuer entity.
func (tuo *TrailerUpdateOne) ClearEquipmentManufacturer() *TrailerUpdateOne {
	tuo.mutation.ClearEquipmentManufacturer()
	return tuo
}

// ClearState clears the "state" edge to the UsState entity.
func (tuo *TrailerUpdateOne) ClearState() *TrailerUpdateOne {
	tuo.mutation.ClearState()
	return tuo
}

// ClearRegistrationState clears the "registration_state" edge to the UsState entity.
func (tuo *TrailerUpdateOne) ClearRegistrationState() *TrailerUpdateOne {
	tuo.mutation.ClearRegistrationState()
	return tuo
}

// ClearFleetCode clears the "fleet_code" edge to the FleetCode entity.
func (tuo *TrailerUpdateOne) ClearFleetCode() *TrailerUpdateOne {
	tuo.mutation.ClearFleetCode()
	return tuo
}

// Where appends a list predicates to the TrailerUpdate builder.
func (tuo *TrailerUpdateOne) Where(ps ...predicate.Trailer) *TrailerUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrailerUpdateOne) Select(field string, fields ...string) *TrailerUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Trailer entity.
func (tuo *TrailerUpdateOne) Save(ctx context.Context) (*Trailer, error) {
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrailerUpdateOne) SaveX(ctx context.Context) *Trailer {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrailerUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrailerUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TrailerUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if trailer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized trailer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := trailer.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TrailerUpdateOne) check() error {
	if v, ok := tuo.mutation.Code(); ok {
		if err := trailer.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Trailer.code": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := trailer.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trailer.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Model(); ok {
		if err := trailer.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Trailer.model": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Year(); ok {
		if err := trailer.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "Trailer.year": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.LicensePlateNumber(); ok {
		if err := trailer.LicensePlateNumberValidator(v); err != nil {
			return &ValidationError{Name: "license_plate_number", err: fmt.Errorf(`ent: validator failed for field "Trailer.license_plate_number": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.BusinessUnitID(); tuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trailer.business_unit"`)
	}
	if _, ok := tuo.mutation.OrganizationID(); tuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trailer.organization"`)
	}
	if _, ok := tuo.mutation.EquipmentTypeID(); tuo.mutation.EquipmentTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trailer.equipment_type"`)
	}
	if _, ok := tuo.mutation.FleetCodeID(); tuo.mutation.FleetCodeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trailer.fleet_code"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TrailerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrailerUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TrailerUpdateOne) sqlSave(ctx context.Context) (_node *Trailer, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trailer.Table, trailer.Columns, sqlgraph.NewFieldSpec(trailer.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Trailer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trailer.FieldID)
		for _, f := range fields {
			if !trailer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trailer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trailer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Version(); ok {
		_spec.SetField(trailer.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedVersion(); ok {
		_spec.AddField(trailer.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Code(); ok {
		_spec.SetField(trailer.FieldCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(trailer.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Vin(); ok {
		_spec.SetField(trailer.FieldVin, field.TypeString, value)
	}
	if tuo.mutation.VinCleared() {
		_spec.ClearField(trailer.FieldVin, field.TypeString)
	}
	if value, ok := tuo.mutation.Model(); ok {
		_spec.SetField(trailer.FieldModel, field.TypeString, value)
	}
	if tuo.mutation.ModelCleared() {
		_spec.ClearField(trailer.FieldModel, field.TypeString)
	}
	if value, ok := tuo.mutation.Year(); ok {
		_spec.SetField(trailer.FieldYear, field.TypeInt16, value)
	}
	if value, ok := tuo.mutation.AddedYear(); ok {
		_spec.AddField(trailer.FieldYear, field.TypeInt16, value)
	}
	if tuo.mutation.YearCleared() {
		_spec.ClearField(trailer.FieldYear, field.TypeInt16)
	}
	if value, ok := tuo.mutation.LicensePlateNumber(); ok {
		_spec.SetField(trailer.FieldLicensePlateNumber, field.TypeString, value)
	}
	if tuo.mutation.LicensePlateNumberCleared() {
		_spec.ClearField(trailer.FieldLicensePlateNumber, field.TypeString)
	}
	if value, ok := tuo.mutation.LastInspectionDate(); ok {
		_spec.SetField(trailer.FieldLastInspectionDate, field.TypeOther, value)
	}
	if tuo.mutation.LastInspectionDateCleared() {
		_spec.ClearField(trailer.FieldLastInspectionDate, field.TypeOther)
	}
	if value, ok := tuo.mutation.RegistrationNumber(); ok {
		_spec.SetField(trailer.FieldRegistrationNumber, field.TypeString, value)
	}
	if tuo.mutation.RegistrationNumberCleared() {
		_spec.ClearField(trailer.FieldRegistrationNumber, field.TypeString)
	}
	if value, ok := tuo.mutation.RegistrationExpirationDate(); ok {
		_spec.SetField(trailer.FieldRegistrationExpirationDate, field.TypeOther, value)
	}
	if tuo.mutation.RegistrationExpirationDateCleared() {
		_spec.ClearField(trailer.FieldRegistrationExpirationDate, field.TypeOther)
	}
	if tuo.mutation.EquipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentTypeTable,
			Columns: []string{trailer.EquipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EquipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentTypeTable,
			Columns: []string{trailer.EquipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.EquipmentManufacturerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentManufacturerTable,
			Columns: []string{trailer.EquipmentManufacturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentmanufactuer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EquipmentManufacturerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentManufacturerTable,
			Columns: []string{trailer.EquipmentManufacturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentmanufactuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.StateTable,
			Columns: []string{trailer.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.StateTable,
			Columns: []string{trailer.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RegistrationStateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.RegistrationStateTable,
			Columns: []string{trailer.RegistrationStateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RegistrationStateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.RegistrationStateTable,
			Columns: []string{trailer.RegistrationStateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FleetCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.FleetCodeTable,
			Columns: []string{trailer.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FleetCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.FleetCodeTable,
			Columns: []string{trailer.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Trailer{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trailer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
