// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/role"
	"github.com/emoss08/trenova/internal/ent/shipment"
	"github.com/emoss08/trenova/internal/ent/shipmentcharges"
	"github.com/emoss08/trenova/internal/ent/shipmentcomment"
	"github.com/emoss08/trenova/internal/ent/user"
	"github.com/emoss08/trenova/internal/ent/userfavorite"
	"github.com/emoss08/trenova/internal/ent/usernotification"
	"github.com/emoss08/trenova/internal/ent/userreport"
	"github.com/google/uuid"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                        *QueryContext
	order                      []user.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.User
	withBusinessUnit           *BusinessUnitQuery
	withOrganization           *OrganizationQuery
	withUserFavorites          *UserFavoriteQuery
	withUserNotifications      *UserNotificationQuery
	withShipments              *ShipmentQuery
	withShipmentComments       *ShipmentCommentQuery
	withShipmentCharges        *ShipmentChargesQuery
	withReports                *UserReportQuery
	withRoles                  *RoleQuery
	modifiers                  []func(*sql.Selector)
	withNamedUserFavorites     map[string]*UserFavoriteQuery
	withNamedUserNotifications map[string]*UserNotificationQuery
	withNamedShipments         map[string]*ShipmentQuery
	withNamedShipmentComments  map[string]*ShipmentCommentQuery
	withNamedShipmentCharges   map[string]*ShipmentChargesQuery
	withNamedReports           map[string]*UserReportQuery
	withNamedRoles             map[string]*RoleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryBusinessUnit chains the current query on the "business_unit" edge.
func (uq *UserQuery) QueryBusinessUnit() *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.BusinessUnitTable, user.BusinessUnitColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (uq *UserQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.OrganizationTable, user.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserFavorites chains the current query on the "user_favorites" edge.
func (uq *UserQuery) QueryUserFavorites() *UserFavoriteQuery {
	query := (&UserFavoriteClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userfavorite.Table, userfavorite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserFavoritesTable, user.UserFavoritesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserNotifications chains the current query on the "user_notifications" edge.
func (uq *UserQuery) QueryUserNotifications() *UserNotificationQuery {
	query := (&UserNotificationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(usernotification.Table, usernotification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserNotificationsTable, user.UserNotificationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipments chains the current query on the "shipments" edge.
func (uq *UserQuery) QueryShipments() *ShipmentQuery {
	query := (&ShipmentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ShipmentsTable, user.ShipmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentComments chains the current query on the "shipment_comments" edge.
func (uq *UserQuery) QueryShipmentComments() *ShipmentCommentQuery {
	query := (&ShipmentCommentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(shipmentcomment.Table, shipmentcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ShipmentCommentsTable, user.ShipmentCommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentCharges chains the current query on the "shipment_charges" edge.
func (uq *UserQuery) QueryShipmentCharges() *ShipmentChargesQuery {
	query := (&ShipmentChargesClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(shipmentcharges.Table, shipmentcharges.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ShipmentChargesTable, user.ShipmentChargesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReports chains the current query on the "reports" edge.
func (uq *UserQuery) QueryReports() *UserReportQuery {
	query := (&UserReportClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userreport.Table, userreport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReportsTable, user.ReportsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoles chains the current query on the "roles" edge.
func (uq *UserQuery) QueryRoles() *RoleQuery {
	query := (&RoleClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.RolesTable, user.RolesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, "All")
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, "IDs")
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, "Count")
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, "Exist")
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                uq.config,
		ctx:                   uq.ctx.Clone(),
		order:                 append([]user.OrderOption{}, uq.order...),
		inters:                append([]Interceptor{}, uq.inters...),
		predicates:            append([]predicate.User{}, uq.predicates...),
		withBusinessUnit:      uq.withBusinessUnit.Clone(),
		withOrganization:      uq.withOrganization.Clone(),
		withUserFavorites:     uq.withUserFavorites.Clone(),
		withUserNotifications: uq.withUserNotifications.Clone(),
		withShipments:         uq.withShipments.Clone(),
		withShipmentComments:  uq.withShipmentComments.Clone(),
		withShipmentCharges:   uq.withShipmentCharges.Clone(),
		withReports:           uq.withReports.Clone(),
		withRoles:             uq.withRoles.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithBusinessUnit tells the query-builder to eager-load the nodes that are connected to
// the "business_unit" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithBusinessUnit(opts ...func(*BusinessUnitQuery)) *UserQuery {
	query := (&BusinessUnitClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withBusinessUnit = query
	return uq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithOrganization(opts ...func(*OrganizationQuery)) *UserQuery {
	query := (&OrganizationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withOrganization = query
	return uq
}

// WithUserFavorites tells the query-builder to eager-load the nodes that are connected to
// the "user_favorites" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserFavorites(opts ...func(*UserFavoriteQuery)) *UserQuery {
	query := (&UserFavoriteClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserFavorites = query
	return uq
}

// WithUserNotifications tells the query-builder to eager-load the nodes that are connected to
// the "user_notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserNotifications(opts ...func(*UserNotificationQuery)) *UserQuery {
	query := (&UserNotificationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserNotifications = query
	return uq
}

// WithShipments tells the query-builder to eager-load the nodes that are connected to
// the "shipments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithShipments(opts ...func(*ShipmentQuery)) *UserQuery {
	query := (&ShipmentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withShipments = query
	return uq
}

// WithShipmentComments tells the query-builder to eager-load the nodes that are connected to
// the "shipment_comments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithShipmentComments(opts ...func(*ShipmentCommentQuery)) *UserQuery {
	query := (&ShipmentCommentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withShipmentComments = query
	return uq
}

// WithShipmentCharges tells the query-builder to eager-load the nodes that are connected to
// the "shipment_charges" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithShipmentCharges(opts ...func(*ShipmentChargesQuery)) *UserQuery {
	query := (&ShipmentChargesClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withShipmentCharges = query
	return uq
}

// WithReports tells the query-builder to eager-load the nodes that are connected to
// the "reports" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithReports(opts ...func(*UserReportQuery)) *UserQuery {
	query := (&UserReportClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withReports = query
	return uq
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRoles(opts ...func(*RoleQuery)) *UserQuery {
	query := (&RoleClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRoles = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldBusinessUnitID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//	}
//
//	client.User.Query().
//		Select(user.FieldBusinessUnitID).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [9]bool{
			uq.withBusinessUnit != nil,
			uq.withOrganization != nil,
			uq.withUserFavorites != nil,
			uq.withUserNotifications != nil,
			uq.withShipments != nil,
			uq.withShipmentComments != nil,
			uq.withShipmentCharges != nil,
			uq.withReports != nil,
			uq.withRoles != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withBusinessUnit; query != nil {
		if err := uq.loadBusinessUnit(ctx, query, nodes, nil,
			func(n *User, e *BusinessUnit) { n.Edges.BusinessUnit = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withOrganization; query != nil {
		if err := uq.loadOrganization(ctx, query, nodes, nil,
			func(n *User, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserFavorites; query != nil {
		if err := uq.loadUserFavorites(ctx, query, nodes,
			func(n *User) { n.Edges.UserFavorites = []*UserFavorite{} },
			func(n *User, e *UserFavorite) { n.Edges.UserFavorites = append(n.Edges.UserFavorites, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserNotifications; query != nil {
		if err := uq.loadUserNotifications(ctx, query, nodes,
			func(n *User) { n.Edges.UserNotifications = []*UserNotification{} },
			func(n *User, e *UserNotification) { n.Edges.UserNotifications = append(n.Edges.UserNotifications, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withShipments; query != nil {
		if err := uq.loadShipments(ctx, query, nodes,
			func(n *User) { n.Edges.Shipments = []*Shipment{} },
			func(n *User, e *Shipment) { n.Edges.Shipments = append(n.Edges.Shipments, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withShipmentComments; query != nil {
		if err := uq.loadShipmentComments(ctx, query, nodes,
			func(n *User) { n.Edges.ShipmentComments = []*ShipmentComment{} },
			func(n *User, e *ShipmentComment) { n.Edges.ShipmentComments = append(n.Edges.ShipmentComments, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withShipmentCharges; query != nil {
		if err := uq.loadShipmentCharges(ctx, query, nodes,
			func(n *User) { n.Edges.ShipmentCharges = []*ShipmentCharges{} },
			func(n *User, e *ShipmentCharges) { n.Edges.ShipmentCharges = append(n.Edges.ShipmentCharges, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withReports; query != nil {
		if err := uq.loadReports(ctx, query, nodes,
			func(n *User) { n.Edges.Reports = []*UserReport{} },
			func(n *User, e *UserReport) { n.Edges.Reports = append(n.Edges.Reports, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withRoles; query != nil {
		if err := uq.loadRoles(ctx, query, nodes,
			func(n *User) { n.Edges.Roles = []*Role{} },
			func(n *User, e *Role) { n.Edges.Roles = append(n.Edges.Roles, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedUserFavorites {
		if err := uq.loadUserFavorites(ctx, query, nodes,
			func(n *User) { n.appendNamedUserFavorites(name) },
			func(n *User, e *UserFavorite) { n.appendNamedUserFavorites(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedUserNotifications {
		if err := uq.loadUserNotifications(ctx, query, nodes,
			func(n *User) { n.appendNamedUserNotifications(name) },
			func(n *User, e *UserNotification) { n.appendNamedUserNotifications(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedShipments {
		if err := uq.loadShipments(ctx, query, nodes,
			func(n *User) { n.appendNamedShipments(name) },
			func(n *User, e *Shipment) { n.appendNamedShipments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedShipmentComments {
		if err := uq.loadShipmentComments(ctx, query, nodes,
			func(n *User) { n.appendNamedShipmentComments(name) },
			func(n *User, e *ShipmentComment) { n.appendNamedShipmentComments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedShipmentCharges {
		if err := uq.loadShipmentCharges(ctx, query, nodes,
			func(n *User) { n.appendNamedShipmentCharges(name) },
			func(n *User, e *ShipmentCharges) { n.appendNamedShipmentCharges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedReports {
		if err := uq.loadReports(ctx, query, nodes,
			func(n *User) { n.appendNamedReports(name) },
			func(n *User, e *UserReport) { n.appendNamedReports(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedRoles {
		if err := uq.loadRoles(ctx, query, nodes,
			func(n *User) { n.appendNamedRoles(name) },
			func(n *User, e *Role) { n.appendNamedRoles(name, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadBusinessUnit(ctx context.Context, query *BusinessUnitQuery, nodes []*User, init func(*User), assign func(*User, *BusinessUnit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*User)
	for i := range nodes {
		fk := nodes[i].BusinessUnitID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(businessunit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_unit_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UserQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*User, init func(*User), assign func(*User, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*User)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UserQuery) loadUserFavorites(ctx context.Context, query *UserFavoriteQuery, nodes []*User, init func(*User), assign func(*User, *UserFavorite)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(userfavorite.FieldUserID)
	}
	query.Where(predicate.UserFavorite(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserFavoritesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUserNotifications(ctx context.Context, query *UserNotificationQuery, nodes []*User, init func(*User), assign func(*User, *UserNotification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usernotification.FieldUserID)
	}
	query.Where(predicate.UserNotification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserNotificationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadShipments(ctx context.Context, query *ShipmentQuery, nodes []*User, init func(*User), assign func(*User, *Shipment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(shipment.FieldCreatedBy)
	}
	query.Where(predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ShipmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		if fk == nil {
			return fmt.Errorf(`foreign-key "created_by" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadShipmentComments(ctx context.Context, query *ShipmentCommentQuery, nodes []*User, init func(*User), assign func(*User, *ShipmentComment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(shipmentcomment.FieldCreatedBy)
	}
	query.Where(predicate.ShipmentComment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ShipmentCommentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadShipmentCharges(ctx context.Context, query *ShipmentChargesQuery, nodes []*User, init func(*User), assign func(*User, *ShipmentCharges)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(shipmentcharges.FieldCreatedBy)
	}
	query.Where(predicate.ShipmentCharges(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ShipmentChargesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadReports(ctx context.Context, query *UserReportQuery, nodes []*User, init func(*User), assign func(*User, *UserReport)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(userreport.FieldUserID)
	}
	query.Where(predicate.UserReport(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ReportsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRoles(ctx context.Context, query *RoleQuery, nodes []*User, init func(*User), assign func(*User, *Role)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*User)
	nids := make(map[uuid.UUID]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.RolesTable)
		s.Join(joinT).On(s.C(role.FieldID), joinT.C(user.RolesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(user.RolesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.RolesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Role](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "roles" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if uq.withBusinessUnit != nil {
			_spec.Node.AddColumnOnce(user.FieldBusinessUnitID)
		}
		if uq.withOrganization != nil {
			_spec.Node.AddColumnOnce(user.FieldOrganizationID)
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range uq.modifiers {
		m(selector)
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (uq *UserQuery) Modify(modifiers ...func(s *sql.Selector)) *UserSelect {
	uq.modifiers = append(uq.modifiers, modifiers...)
	return uq.Select()
}

// WithNamedUserFavorites tells the query-builder to eager-load the nodes that are connected to the "user_favorites"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedUserFavorites(name string, opts ...func(*UserFavoriteQuery)) *UserQuery {
	query := (&UserFavoriteClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedUserFavorites == nil {
		uq.withNamedUserFavorites = make(map[string]*UserFavoriteQuery)
	}
	uq.withNamedUserFavorites[name] = query
	return uq
}

// WithNamedUserNotifications tells the query-builder to eager-load the nodes that are connected to the "user_notifications"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedUserNotifications(name string, opts ...func(*UserNotificationQuery)) *UserQuery {
	query := (&UserNotificationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedUserNotifications == nil {
		uq.withNamedUserNotifications = make(map[string]*UserNotificationQuery)
	}
	uq.withNamedUserNotifications[name] = query
	return uq
}

// WithNamedShipments tells the query-builder to eager-load the nodes that are connected to the "shipments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedShipments(name string, opts ...func(*ShipmentQuery)) *UserQuery {
	query := (&ShipmentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedShipments == nil {
		uq.withNamedShipments = make(map[string]*ShipmentQuery)
	}
	uq.withNamedShipments[name] = query
	return uq
}

// WithNamedShipmentComments tells the query-builder to eager-load the nodes that are connected to the "shipment_comments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedShipmentComments(name string, opts ...func(*ShipmentCommentQuery)) *UserQuery {
	query := (&ShipmentCommentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedShipmentComments == nil {
		uq.withNamedShipmentComments = make(map[string]*ShipmentCommentQuery)
	}
	uq.withNamedShipmentComments[name] = query
	return uq
}

// WithNamedShipmentCharges tells the query-builder to eager-load the nodes that are connected to the "shipment_charges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedShipmentCharges(name string, opts ...func(*ShipmentChargesQuery)) *UserQuery {
	query := (&ShipmentChargesClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedShipmentCharges == nil {
		uq.withNamedShipmentCharges = make(map[string]*ShipmentChargesQuery)
	}
	uq.withNamedShipmentCharges[name] = query
	return uq
}

// WithNamedReports tells the query-builder to eager-load the nodes that are connected to the "reports"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedReports(name string, opts ...func(*UserReportQuery)) *UserQuery {
	query := (&UserReportClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedReports == nil {
		uq.withNamedReports = make(map[string]*UserReportQuery)
	}
	uq.withNamedReports[name] = query
	return uq
}

// WithNamedRoles tells the query-builder to eager-load the nodes that are connected to the "roles"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedRoles(name string, opts ...func(*RoleQuery)) *UserQuery {
	query := (&RoleClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedRoles == nil {
		uq.withNamedRoles = make(map[string]*RoleQuery)
	}
	uq.withNamedRoles[name] = query
	return uq
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, "GroupBy")
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, "Select")
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (us *UserSelect) Modify(modifiers ...func(s *sql.Selector)) *UserSelect {
	us.modifiers = append(us.modifiers, modifiers...)
	return us
}
