// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/accessorialcharge"
	"github.com/emoss08/trenova/internal/ent/commodity"
	"github.com/emoss08/trenova/internal/ent/customerdetentionpolicy"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/revenuecode"
	"github.com/emoss08/trenova/internal/ent/shipmenttype"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// CustomerDetentionPolicyUpdate is the builder for updating CustomerDetentionPolicy entities.
type CustomerDetentionPolicyUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerDetentionPolicyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerDetentionPolicyUpdate builder.
func (cdpu *CustomerDetentionPolicyUpdate) Where(ps ...predicate.CustomerDetentionPolicy) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.Where(ps...)
	return cdpu
}

// SetOrganizationID sets the "organization_id" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetOrganizationID(u uuid.UUID) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetOrganizationID(u)
	return cdpu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableOrganizationID(u *uuid.UUID) *CustomerDetentionPolicyUpdate {
	if u != nil {
		cdpu.SetOrganizationID(*u)
	}
	return cdpu
}

// SetUpdatedAt sets the "updated_at" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetUpdatedAt(t time.Time) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetUpdatedAt(t)
	return cdpu
}

// SetVersion sets the "version" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetVersion(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ResetVersion()
	cdpu.mutation.SetVersion(i)
	return cdpu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableVersion(i *int) *CustomerDetentionPolicyUpdate {
	if i != nil {
		cdpu.SetVersion(*i)
	}
	return cdpu
}

// AddVersion adds i to the "version" field.
func (cdpu *CustomerDetentionPolicyUpdate) AddVersion(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.AddVersion(i)
	return cdpu
}

// SetStatus sets the "status" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetStatus(c customerdetentionpolicy.Status) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetStatus(c)
	return cdpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableStatus(c *customerdetentionpolicy.Status) *CustomerDetentionPolicyUpdate {
	if c != nil {
		cdpu.SetStatus(*c)
	}
	return cdpu
}

// SetCommodityID sets the "commodity_id" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetCommodityID(u uuid.UUID) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetCommodityID(u)
	return cdpu
}

// SetNillableCommodityID sets the "commodity_id" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableCommodityID(u *uuid.UUID) *CustomerDetentionPolicyUpdate {
	if u != nil {
		cdpu.SetCommodityID(*u)
	}
	return cdpu
}

// ClearCommodityID clears the value of the "commodity_id" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearCommodityID() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearCommodityID()
	return cdpu
}

// SetRevenueCodeID sets the "revenue_code_id" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetRevenueCodeID(u uuid.UUID) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetRevenueCodeID(u)
	return cdpu
}

// SetNillableRevenueCodeID sets the "revenue_code_id" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableRevenueCodeID(u *uuid.UUID) *CustomerDetentionPolicyUpdate {
	if u != nil {
		cdpu.SetRevenueCodeID(*u)
	}
	return cdpu
}

// ClearRevenueCodeID clears the value of the "revenue_code_id" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearRevenueCodeID() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearRevenueCodeID()
	return cdpu
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetShipmentTypeID(u uuid.UUID) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetShipmentTypeID(u)
	return cdpu
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableShipmentTypeID(u *uuid.UUID) *CustomerDetentionPolicyUpdate {
	if u != nil {
		cdpu.SetShipmentTypeID(*u)
	}
	return cdpu
}

// ClearShipmentTypeID clears the value of the "shipment_type_id" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearShipmentTypeID() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearShipmentTypeID()
	return cdpu
}

// SetApplicationScope sets the "application_scope" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetApplicationScope(cs customerdetentionpolicy.ApplicationScope) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetApplicationScope(cs)
	return cdpu
}

// SetNillableApplicationScope sets the "application_scope" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableApplicationScope(cs *customerdetentionpolicy.ApplicationScope) *CustomerDetentionPolicyUpdate {
	if cs != nil {
		cdpu.SetApplicationScope(*cs)
	}
	return cdpu
}

// SetChargeFreeTime sets the "charge_free_time" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetChargeFreeTime(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ResetChargeFreeTime()
	cdpu.mutation.SetChargeFreeTime(i)
	return cdpu
}

// SetNillableChargeFreeTime sets the "charge_free_time" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableChargeFreeTime(i *int) *CustomerDetentionPolicyUpdate {
	if i != nil {
		cdpu.SetChargeFreeTime(*i)
	}
	return cdpu
}

// AddChargeFreeTime adds i to the "charge_free_time" field.
func (cdpu *CustomerDetentionPolicyUpdate) AddChargeFreeTime(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.AddChargeFreeTime(i)
	return cdpu
}

// ClearChargeFreeTime clears the value of the "charge_free_time" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearChargeFreeTime() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearChargeFreeTime()
	return cdpu
}

// SetPaymentFreeTime sets the "payment_free_time" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetPaymentFreeTime(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ResetPaymentFreeTime()
	cdpu.mutation.SetPaymentFreeTime(i)
	return cdpu
}

// SetNillablePaymentFreeTime sets the "payment_free_time" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillablePaymentFreeTime(i *int) *CustomerDetentionPolicyUpdate {
	if i != nil {
		cdpu.SetPaymentFreeTime(*i)
	}
	return cdpu
}

// AddPaymentFreeTime adds i to the "payment_free_time" field.
func (cdpu *CustomerDetentionPolicyUpdate) AddPaymentFreeTime(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.AddPaymentFreeTime(i)
	return cdpu
}

// ClearPaymentFreeTime clears the value of the "payment_free_time" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearPaymentFreeTime() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearPaymentFreeTime()
	return cdpu
}

// SetLateArrivalPolicy sets the "late_arrival_policy" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetLateArrivalPolicy(b bool) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetLateArrivalPolicy(b)
	return cdpu
}

// SetNillableLateArrivalPolicy sets the "late_arrival_policy" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableLateArrivalPolicy(b *bool) *CustomerDetentionPolicyUpdate {
	if b != nil {
		cdpu.SetLateArrivalPolicy(*b)
	}
	return cdpu
}

// ClearLateArrivalPolicy clears the value of the "late_arrival_policy" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearLateArrivalPolicy() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearLateArrivalPolicy()
	return cdpu
}

// SetGracePeriod sets the "grace_period" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetGracePeriod(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ResetGracePeriod()
	cdpu.mutation.SetGracePeriod(i)
	return cdpu
}

// SetNillableGracePeriod sets the "grace_period" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableGracePeriod(i *int) *CustomerDetentionPolicyUpdate {
	if i != nil {
		cdpu.SetGracePeriod(*i)
	}
	return cdpu
}

// AddGracePeriod adds i to the "grace_period" field.
func (cdpu *CustomerDetentionPolicyUpdate) AddGracePeriod(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.AddGracePeriod(i)
	return cdpu
}

// ClearGracePeriod clears the value of the "grace_period" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearGracePeriod() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearGracePeriod()
	return cdpu
}

// SetAccessorialChargeID sets the "accessorial_charge_id" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetAccessorialChargeID(u uuid.UUID) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetAccessorialChargeID(u)
	return cdpu
}

// SetNillableAccessorialChargeID sets the "accessorial_charge_id" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableAccessorialChargeID(u *uuid.UUID) *CustomerDetentionPolicyUpdate {
	if u != nil {
		cdpu.SetAccessorialChargeID(*u)
	}
	return cdpu
}

// ClearAccessorialChargeID clears the value of the "accessorial_charge_id" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearAccessorialChargeID() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearAccessorialChargeID()
	return cdpu
}

// SetUnits sets the "units" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetUnits(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ResetUnits()
	cdpu.mutation.SetUnits(i)
	return cdpu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableUnits(i *int) *CustomerDetentionPolicyUpdate {
	if i != nil {
		cdpu.SetUnits(*i)
	}
	return cdpu
}

// AddUnits adds i to the "units" field.
func (cdpu *CustomerDetentionPolicyUpdate) AddUnits(i int) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.AddUnits(i)
	return cdpu
}

// ClearUnits clears the value of the "units" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearUnits() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearUnits()
	return cdpu
}

// SetAmount sets the "amount" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetAmount(f float64) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ResetAmount()
	cdpu.mutation.SetAmount(f)
	return cdpu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableAmount(f *float64) *CustomerDetentionPolicyUpdate {
	if f != nil {
		cdpu.SetAmount(*f)
	}
	return cdpu
}

// AddAmount adds f to the "amount" field.
func (cdpu *CustomerDetentionPolicyUpdate) AddAmount(f float64) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.AddAmount(f)
	return cdpu
}

// SetNotes sets the "notes" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetNotes(s string) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetNotes(s)
	return cdpu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (cdpu *CustomerDetentionPolicyUpdate) SetNillableNotes(s *string) *CustomerDetentionPolicyUpdate {
	if s != nil {
		cdpu.SetNotes(*s)
	}
	return cdpu
}

// ClearNotes clears the value of the "notes" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearNotes() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearNotes()
	return cdpu
}

// SetEffectiveDate sets the "effective_date" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetEffectiveDate(pg *pgtype.Date) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetEffectiveDate(pg)
	return cdpu
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearEffectiveDate() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearEffectiveDate()
	return cdpu
}

// SetExpirationDate sets the "expiration_date" field.
func (cdpu *CustomerDetentionPolicyUpdate) SetExpirationDate(pg *pgtype.Date) *CustomerDetentionPolicyUpdate {
	cdpu.mutation.SetExpirationDate(pg)
	return cdpu
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (cdpu *CustomerDetentionPolicyUpdate) ClearExpirationDate() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearExpirationDate()
	return cdpu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cdpu *CustomerDetentionPolicyUpdate) SetOrganization(o *Organization) *CustomerDetentionPolicyUpdate {
	return cdpu.SetOrganizationID(o.ID)
}

// SetCommodity sets the "commodity" edge to the Commodity entity.
func (cdpu *CustomerDetentionPolicyUpdate) SetCommodity(c *Commodity) *CustomerDetentionPolicyUpdate {
	return cdpu.SetCommodityID(c.ID)
}

// SetRevenueCode sets the "revenue_code" edge to the RevenueCode entity.
func (cdpu *CustomerDetentionPolicyUpdate) SetRevenueCode(r *RevenueCode) *CustomerDetentionPolicyUpdate {
	return cdpu.SetRevenueCodeID(r.ID)
}

// SetShipmentType sets the "shipment_type" edge to the ShipmentType entity.
func (cdpu *CustomerDetentionPolicyUpdate) SetShipmentType(s *ShipmentType) *CustomerDetentionPolicyUpdate {
	return cdpu.SetShipmentTypeID(s.ID)
}

// SetAccessorialCharge sets the "accessorial_charge" edge to the AccessorialCharge entity.
func (cdpu *CustomerDetentionPolicyUpdate) SetAccessorialCharge(a *AccessorialCharge) *CustomerDetentionPolicyUpdate {
	return cdpu.SetAccessorialChargeID(a.ID)
}

// Mutation returns the CustomerDetentionPolicyMutation object of the builder.
func (cdpu *CustomerDetentionPolicyUpdate) Mutation() *CustomerDetentionPolicyMutation {
	return cdpu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (cdpu *CustomerDetentionPolicyUpdate) ClearOrganization() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearOrganization()
	return cdpu
}

// ClearCommodity clears the "commodity" edge to the Commodity entity.
func (cdpu *CustomerDetentionPolicyUpdate) ClearCommodity() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearCommodity()
	return cdpu
}

// ClearRevenueCode clears the "revenue_code" edge to the RevenueCode entity.
func (cdpu *CustomerDetentionPolicyUpdate) ClearRevenueCode() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearRevenueCode()
	return cdpu
}

// ClearShipmentType clears the "shipment_type" edge to the ShipmentType entity.
func (cdpu *CustomerDetentionPolicyUpdate) ClearShipmentType() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearShipmentType()
	return cdpu
}

// ClearAccessorialCharge clears the "accessorial_charge" edge to the AccessorialCharge entity.
func (cdpu *CustomerDetentionPolicyUpdate) ClearAccessorialCharge() *CustomerDetentionPolicyUpdate {
	cdpu.mutation.ClearAccessorialCharge()
	return cdpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdpu *CustomerDetentionPolicyUpdate) Save(ctx context.Context) (int, error) {
	cdpu.defaults()
	return withHooks(ctx, cdpu.sqlSave, cdpu.mutation, cdpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdpu *CustomerDetentionPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := cdpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdpu *CustomerDetentionPolicyUpdate) Exec(ctx context.Context) error {
	_, err := cdpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdpu *CustomerDetentionPolicyUpdate) ExecX(ctx context.Context) {
	if err := cdpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdpu *CustomerDetentionPolicyUpdate) defaults() {
	if _, ok := cdpu.mutation.UpdatedAt(); !ok {
		v := customerdetentionpolicy.UpdateDefaultUpdatedAt()
		cdpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdpu *CustomerDetentionPolicyUpdate) check() error {
	if v, ok := cdpu.mutation.Status(); ok {
		if err := customerdetentionpolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.status": %w`, err)}
		}
	}
	if v, ok := cdpu.mutation.ApplicationScope(); ok {
		if err := customerdetentionpolicy.ApplicationScopeValidator(v); err != nil {
			return &ValidationError{Name: "application_scope", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.application_scope": %w`, err)}
		}
	}
	if v, ok := cdpu.mutation.ChargeFreeTime(); ok {
		if err := customerdetentionpolicy.ChargeFreeTimeValidator(v); err != nil {
			return &ValidationError{Name: "charge_free_time", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.charge_free_time": %w`, err)}
		}
	}
	if v, ok := cdpu.mutation.PaymentFreeTime(); ok {
		if err := customerdetentionpolicy.PaymentFreeTimeValidator(v); err != nil {
			return &ValidationError{Name: "payment_free_time", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.payment_free_time": %w`, err)}
		}
	}
	if v, ok := cdpu.mutation.GracePeriod(); ok {
		if err := customerdetentionpolicy.GracePeriodValidator(v); err != nil {
			return &ValidationError{Name: "grace_period", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.grace_period": %w`, err)}
		}
	}
	if v, ok := cdpu.mutation.Units(); ok {
		if err := customerdetentionpolicy.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.units": %w`, err)}
		}
	}
	if _, ok := cdpu.mutation.BusinessUnitID(); cdpu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerDetentionPolicy.business_unit"`)
	}
	if _, ok := cdpu.mutation.OrganizationID(); cdpu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerDetentionPolicy.organization"`)
	}
	if _, ok := cdpu.mutation.CustomerID(); cdpu.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerDetentionPolicy.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cdpu *CustomerDetentionPolicyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerDetentionPolicyUpdate {
	cdpu.modifiers = append(cdpu.modifiers, modifiers...)
	return cdpu
}

func (cdpu *CustomerDetentionPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cdpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerdetentionpolicy.Table, customerdetentionpolicy.Columns, sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID))
	if ps := cdpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdpu.mutation.UpdatedAt(); ok {
		_spec.SetField(customerdetentionpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cdpu.mutation.Version(); ok {
		_spec.SetField(customerdetentionpolicy.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cdpu.mutation.AddedVersion(); ok {
		_spec.AddField(customerdetentionpolicy.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cdpu.mutation.Status(); ok {
		_spec.SetField(customerdetentionpolicy.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cdpu.mutation.ApplicationScope(); ok {
		_spec.SetField(customerdetentionpolicy.FieldApplicationScope, field.TypeEnum, value)
	}
	if value, ok := cdpu.mutation.ChargeFreeTime(); ok {
		_spec.SetField(customerdetentionpolicy.FieldChargeFreeTime, field.TypeInt, value)
	}
	if value, ok := cdpu.mutation.AddedChargeFreeTime(); ok {
		_spec.AddField(customerdetentionpolicy.FieldChargeFreeTime, field.TypeInt, value)
	}
	if cdpu.mutation.ChargeFreeTimeCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldChargeFreeTime, field.TypeInt)
	}
	if value, ok := cdpu.mutation.PaymentFreeTime(); ok {
		_spec.SetField(customerdetentionpolicy.FieldPaymentFreeTime, field.TypeInt, value)
	}
	if value, ok := cdpu.mutation.AddedPaymentFreeTime(); ok {
		_spec.AddField(customerdetentionpolicy.FieldPaymentFreeTime, field.TypeInt, value)
	}
	if cdpu.mutation.PaymentFreeTimeCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldPaymentFreeTime, field.TypeInt)
	}
	if value, ok := cdpu.mutation.LateArrivalPolicy(); ok {
		_spec.SetField(customerdetentionpolicy.FieldLateArrivalPolicy, field.TypeBool, value)
	}
	if cdpu.mutation.LateArrivalPolicyCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldLateArrivalPolicy, field.TypeBool)
	}
	if value, ok := cdpu.mutation.GracePeriod(); ok {
		_spec.SetField(customerdetentionpolicy.FieldGracePeriod, field.TypeInt, value)
	}
	if value, ok := cdpu.mutation.AddedGracePeriod(); ok {
		_spec.AddField(customerdetentionpolicy.FieldGracePeriod, field.TypeInt, value)
	}
	if cdpu.mutation.GracePeriodCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldGracePeriod, field.TypeInt)
	}
	if value, ok := cdpu.mutation.Units(); ok {
		_spec.SetField(customerdetentionpolicy.FieldUnits, field.TypeInt, value)
	}
	if value, ok := cdpu.mutation.AddedUnits(); ok {
		_spec.AddField(customerdetentionpolicy.FieldUnits, field.TypeInt, value)
	}
	if cdpu.mutation.UnitsCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldUnits, field.TypeInt)
	}
	if value, ok := cdpu.mutation.Amount(); ok {
		_spec.SetField(customerdetentionpolicy.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cdpu.mutation.AddedAmount(); ok {
		_spec.AddField(customerdetentionpolicy.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cdpu.mutation.Notes(); ok {
		_spec.SetField(customerdetentionpolicy.FieldNotes, field.TypeString, value)
	}
	if cdpu.mutation.NotesCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldNotes, field.TypeString)
	}
	if value, ok := cdpu.mutation.EffectiveDate(); ok {
		_spec.SetField(customerdetentionpolicy.FieldEffectiveDate, field.TypeOther, value)
	}
	if cdpu.mutation.EffectiveDateCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldEffectiveDate, field.TypeOther)
	}
	if value, ok := cdpu.mutation.ExpirationDate(); ok {
		_spec.SetField(customerdetentionpolicy.FieldExpirationDate, field.TypeOther, value)
	}
	if cdpu.mutation.ExpirationDateCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldExpirationDate, field.TypeOther)
	}
	if cdpu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.OrganizationTable,
			Columns: []string{customerdetentionpolicy.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.OrganizationTable,
			Columns: []string{customerdetentionpolicy.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdpu.mutation.CommodityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.CommodityTable,
			Columns: []string{customerdetentionpolicy.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpu.mutation.CommodityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.CommodityTable,
			Columns: []string{customerdetentionpolicy.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdpu.mutation.RevenueCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.RevenueCodeTable,
			Columns: []string{customerdetentionpolicy.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revenuecode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpu.mutation.RevenueCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.RevenueCodeTable,
			Columns: []string{customerdetentionpolicy.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revenuecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdpu.mutation.ShipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.ShipmentTypeTable,
			Columns: []string{customerdetentionpolicy.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpu.mutation.ShipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.ShipmentTypeTable,
			Columns: []string{customerdetentionpolicy.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdpu.mutation.AccessorialChargeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.AccessorialChargeTable,
			Columns: []string{customerdetentionpolicy.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpu.mutation.AccessorialChargeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.AccessorialChargeTable,
			Columns: []string{customerdetentionpolicy.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cdpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cdpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerdetentionpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdpu.mutation.done = true
	return n, nil
}

// CustomerDetentionPolicyUpdateOne is the builder for updating a single CustomerDetentionPolicy entity.
type CustomerDetentionPolicyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerDetentionPolicyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetOrganizationID(u uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetOrganizationID(u)
	return cdpuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	if u != nil {
		cdpuo.SetOrganizationID(*u)
	}
	return cdpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetUpdatedAt(t time.Time) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetUpdatedAt(t)
	return cdpuo
}

// SetVersion sets the "version" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetVersion(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ResetVersion()
	cdpuo.mutation.SetVersion(i)
	return cdpuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableVersion(i *int) *CustomerDetentionPolicyUpdateOne {
	if i != nil {
		cdpuo.SetVersion(*i)
	}
	return cdpuo
}

// AddVersion adds i to the "version" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) AddVersion(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.AddVersion(i)
	return cdpuo
}

// SetStatus sets the "status" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetStatus(c customerdetentionpolicy.Status) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetStatus(c)
	return cdpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableStatus(c *customerdetentionpolicy.Status) *CustomerDetentionPolicyUpdateOne {
	if c != nil {
		cdpuo.SetStatus(*c)
	}
	return cdpuo
}

// SetCommodityID sets the "commodity_id" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetCommodityID(u uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetCommodityID(u)
	return cdpuo
}

// SetNillableCommodityID sets the "commodity_id" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableCommodityID(u *uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	if u != nil {
		cdpuo.SetCommodityID(*u)
	}
	return cdpuo
}

// ClearCommodityID clears the value of the "commodity_id" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearCommodityID() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearCommodityID()
	return cdpuo
}

// SetRevenueCodeID sets the "revenue_code_id" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetRevenueCodeID(u uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetRevenueCodeID(u)
	return cdpuo
}

// SetNillableRevenueCodeID sets the "revenue_code_id" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableRevenueCodeID(u *uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	if u != nil {
		cdpuo.SetRevenueCodeID(*u)
	}
	return cdpuo
}

// ClearRevenueCodeID clears the value of the "revenue_code_id" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearRevenueCodeID() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearRevenueCodeID()
	return cdpuo
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetShipmentTypeID(u uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetShipmentTypeID(u)
	return cdpuo
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableShipmentTypeID(u *uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	if u != nil {
		cdpuo.SetShipmentTypeID(*u)
	}
	return cdpuo
}

// ClearShipmentTypeID clears the value of the "shipment_type_id" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearShipmentTypeID() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearShipmentTypeID()
	return cdpuo
}

// SetApplicationScope sets the "application_scope" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetApplicationScope(cs customerdetentionpolicy.ApplicationScope) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetApplicationScope(cs)
	return cdpuo
}

// SetNillableApplicationScope sets the "application_scope" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableApplicationScope(cs *customerdetentionpolicy.ApplicationScope) *CustomerDetentionPolicyUpdateOne {
	if cs != nil {
		cdpuo.SetApplicationScope(*cs)
	}
	return cdpuo
}

// SetChargeFreeTime sets the "charge_free_time" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetChargeFreeTime(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ResetChargeFreeTime()
	cdpuo.mutation.SetChargeFreeTime(i)
	return cdpuo
}

// SetNillableChargeFreeTime sets the "charge_free_time" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableChargeFreeTime(i *int) *CustomerDetentionPolicyUpdateOne {
	if i != nil {
		cdpuo.SetChargeFreeTime(*i)
	}
	return cdpuo
}

// AddChargeFreeTime adds i to the "charge_free_time" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) AddChargeFreeTime(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.AddChargeFreeTime(i)
	return cdpuo
}

// ClearChargeFreeTime clears the value of the "charge_free_time" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearChargeFreeTime() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearChargeFreeTime()
	return cdpuo
}

// SetPaymentFreeTime sets the "payment_free_time" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetPaymentFreeTime(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ResetPaymentFreeTime()
	cdpuo.mutation.SetPaymentFreeTime(i)
	return cdpuo
}

// SetNillablePaymentFreeTime sets the "payment_free_time" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillablePaymentFreeTime(i *int) *CustomerDetentionPolicyUpdateOne {
	if i != nil {
		cdpuo.SetPaymentFreeTime(*i)
	}
	return cdpuo
}

// AddPaymentFreeTime adds i to the "payment_free_time" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) AddPaymentFreeTime(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.AddPaymentFreeTime(i)
	return cdpuo
}

// ClearPaymentFreeTime clears the value of the "payment_free_time" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearPaymentFreeTime() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearPaymentFreeTime()
	return cdpuo
}

// SetLateArrivalPolicy sets the "late_arrival_policy" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetLateArrivalPolicy(b bool) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetLateArrivalPolicy(b)
	return cdpuo
}

// SetNillableLateArrivalPolicy sets the "late_arrival_policy" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableLateArrivalPolicy(b *bool) *CustomerDetentionPolicyUpdateOne {
	if b != nil {
		cdpuo.SetLateArrivalPolicy(*b)
	}
	return cdpuo
}

// ClearLateArrivalPolicy clears the value of the "late_arrival_policy" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearLateArrivalPolicy() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearLateArrivalPolicy()
	return cdpuo
}

// SetGracePeriod sets the "grace_period" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetGracePeriod(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ResetGracePeriod()
	cdpuo.mutation.SetGracePeriod(i)
	return cdpuo
}

// SetNillableGracePeriod sets the "grace_period" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableGracePeriod(i *int) *CustomerDetentionPolicyUpdateOne {
	if i != nil {
		cdpuo.SetGracePeriod(*i)
	}
	return cdpuo
}

// AddGracePeriod adds i to the "grace_period" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) AddGracePeriod(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.AddGracePeriod(i)
	return cdpuo
}

// ClearGracePeriod clears the value of the "grace_period" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearGracePeriod() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearGracePeriod()
	return cdpuo
}

// SetAccessorialChargeID sets the "accessorial_charge_id" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetAccessorialChargeID(u uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetAccessorialChargeID(u)
	return cdpuo
}

// SetNillableAccessorialChargeID sets the "accessorial_charge_id" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableAccessorialChargeID(u *uuid.UUID) *CustomerDetentionPolicyUpdateOne {
	if u != nil {
		cdpuo.SetAccessorialChargeID(*u)
	}
	return cdpuo
}

// ClearAccessorialChargeID clears the value of the "accessorial_charge_id" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearAccessorialChargeID() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearAccessorialChargeID()
	return cdpuo
}

// SetUnits sets the "units" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetUnits(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ResetUnits()
	cdpuo.mutation.SetUnits(i)
	return cdpuo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableUnits(i *int) *CustomerDetentionPolicyUpdateOne {
	if i != nil {
		cdpuo.SetUnits(*i)
	}
	return cdpuo
}

// AddUnits adds i to the "units" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) AddUnits(i int) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.AddUnits(i)
	return cdpuo
}

// ClearUnits clears the value of the "units" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearUnits() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearUnits()
	return cdpuo
}

// SetAmount sets the "amount" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetAmount(f float64) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ResetAmount()
	cdpuo.mutation.SetAmount(f)
	return cdpuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableAmount(f *float64) *CustomerDetentionPolicyUpdateOne {
	if f != nil {
		cdpuo.SetAmount(*f)
	}
	return cdpuo
}

// AddAmount adds f to the "amount" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) AddAmount(f float64) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.AddAmount(f)
	return cdpuo
}

// SetNotes sets the "notes" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNotes(s string) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetNotes(s)
	return cdpuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetNillableNotes(s *string) *CustomerDetentionPolicyUpdateOne {
	if s != nil {
		cdpuo.SetNotes(*s)
	}
	return cdpuo
}

// ClearNotes clears the value of the "notes" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearNotes() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearNotes()
	return cdpuo
}

// SetEffectiveDate sets the "effective_date" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetEffectiveDate(pg *pgtype.Date) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetEffectiveDate(pg)
	return cdpuo
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearEffectiveDate() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearEffectiveDate()
	return cdpuo
}

// SetExpirationDate sets the "expiration_date" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetExpirationDate(pg *pgtype.Date) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.SetExpirationDate(pg)
	return cdpuo
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearExpirationDate() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearExpirationDate()
	return cdpuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetOrganization(o *Organization) *CustomerDetentionPolicyUpdateOne {
	return cdpuo.SetOrganizationID(o.ID)
}

// SetCommodity sets the "commodity" edge to the Commodity entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetCommodity(c *Commodity) *CustomerDetentionPolicyUpdateOne {
	return cdpuo.SetCommodityID(c.ID)
}

// SetRevenueCode sets the "revenue_code" edge to the RevenueCode entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetRevenueCode(r *RevenueCode) *CustomerDetentionPolicyUpdateOne {
	return cdpuo.SetRevenueCodeID(r.ID)
}

// SetShipmentType sets the "shipment_type" edge to the ShipmentType entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetShipmentType(s *ShipmentType) *CustomerDetentionPolicyUpdateOne {
	return cdpuo.SetShipmentTypeID(s.ID)
}

// SetAccessorialCharge sets the "accessorial_charge" edge to the AccessorialCharge entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SetAccessorialCharge(a *AccessorialCharge) *CustomerDetentionPolicyUpdateOne {
	return cdpuo.SetAccessorialChargeID(a.ID)
}

// Mutation returns the CustomerDetentionPolicyMutation object of the builder.
func (cdpuo *CustomerDetentionPolicyUpdateOne) Mutation() *CustomerDetentionPolicyMutation {
	return cdpuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearOrganization() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearOrganization()
	return cdpuo
}

// ClearCommodity clears the "commodity" edge to the Commodity entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearCommodity() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearCommodity()
	return cdpuo
}

// ClearRevenueCode clears the "revenue_code" edge to the RevenueCode entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearRevenueCode() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearRevenueCode()
	return cdpuo
}

// ClearShipmentType clears the "shipment_type" edge to the ShipmentType entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearShipmentType() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearShipmentType()
	return cdpuo
}

// ClearAccessorialCharge clears the "accessorial_charge" edge to the AccessorialCharge entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ClearAccessorialCharge() *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.ClearAccessorialCharge()
	return cdpuo
}

// Where appends a list predicates to the CustomerDetentionPolicyUpdate builder.
func (cdpuo *CustomerDetentionPolicyUpdateOne) Where(ps ...predicate.CustomerDetentionPolicy) *CustomerDetentionPolicyUpdateOne {
	cdpuo.mutation.Where(ps...)
	return cdpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cdpuo *CustomerDetentionPolicyUpdateOne) Select(field string, fields ...string) *CustomerDetentionPolicyUpdateOne {
	cdpuo.fields = append([]string{field}, fields...)
	return cdpuo
}

// Save executes the query and returns the updated CustomerDetentionPolicy entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) Save(ctx context.Context) (*CustomerDetentionPolicy, error) {
	cdpuo.defaults()
	return withHooks(ctx, cdpuo.sqlSave, cdpuo.mutation, cdpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdpuo *CustomerDetentionPolicyUpdateOne) SaveX(ctx context.Context) *CustomerDetentionPolicy {
	node, err := cdpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cdpuo *CustomerDetentionPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := cdpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdpuo *CustomerDetentionPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := cdpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdpuo *CustomerDetentionPolicyUpdateOne) defaults() {
	if _, ok := cdpuo.mutation.UpdatedAt(); !ok {
		v := customerdetentionpolicy.UpdateDefaultUpdatedAt()
		cdpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdpuo *CustomerDetentionPolicyUpdateOne) check() error {
	if v, ok := cdpuo.mutation.Status(); ok {
		if err := customerdetentionpolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.status": %w`, err)}
		}
	}
	if v, ok := cdpuo.mutation.ApplicationScope(); ok {
		if err := customerdetentionpolicy.ApplicationScopeValidator(v); err != nil {
			return &ValidationError{Name: "application_scope", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.application_scope": %w`, err)}
		}
	}
	if v, ok := cdpuo.mutation.ChargeFreeTime(); ok {
		if err := customerdetentionpolicy.ChargeFreeTimeValidator(v); err != nil {
			return &ValidationError{Name: "charge_free_time", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.charge_free_time": %w`, err)}
		}
	}
	if v, ok := cdpuo.mutation.PaymentFreeTime(); ok {
		if err := customerdetentionpolicy.PaymentFreeTimeValidator(v); err != nil {
			return &ValidationError{Name: "payment_free_time", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.payment_free_time": %w`, err)}
		}
	}
	if v, ok := cdpuo.mutation.GracePeriod(); ok {
		if err := customerdetentionpolicy.GracePeriodValidator(v); err != nil {
			return &ValidationError{Name: "grace_period", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.grace_period": %w`, err)}
		}
	}
	if v, ok := cdpuo.mutation.Units(); ok {
		if err := customerdetentionpolicy.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "CustomerDetentionPolicy.units": %w`, err)}
		}
	}
	if _, ok := cdpuo.mutation.BusinessUnitID(); cdpuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerDetentionPolicy.business_unit"`)
	}
	if _, ok := cdpuo.mutation.OrganizationID(); cdpuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerDetentionPolicy.organization"`)
	}
	if _, ok := cdpuo.mutation.CustomerID(); cdpuo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerDetentionPolicy.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cdpuo *CustomerDetentionPolicyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerDetentionPolicyUpdateOne {
	cdpuo.modifiers = append(cdpuo.modifiers, modifiers...)
	return cdpuo
}

func (cdpuo *CustomerDetentionPolicyUpdateOne) sqlSave(ctx context.Context) (_node *CustomerDetentionPolicy, err error) {
	if err := cdpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerdetentionpolicy.Table, customerdetentionpolicy.Columns, sqlgraph.NewFieldSpec(customerdetentionpolicy.FieldID, field.TypeUUID))
	id, ok := cdpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerDetentionPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cdpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customerdetentionpolicy.FieldID)
		for _, f := range fields {
			if !customerdetentionpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customerdetentionpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cdpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customerdetentionpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cdpuo.mutation.Version(); ok {
		_spec.SetField(customerdetentionpolicy.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cdpuo.mutation.AddedVersion(); ok {
		_spec.AddField(customerdetentionpolicy.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cdpuo.mutation.Status(); ok {
		_spec.SetField(customerdetentionpolicy.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cdpuo.mutation.ApplicationScope(); ok {
		_spec.SetField(customerdetentionpolicy.FieldApplicationScope, field.TypeEnum, value)
	}
	if value, ok := cdpuo.mutation.ChargeFreeTime(); ok {
		_spec.SetField(customerdetentionpolicy.FieldChargeFreeTime, field.TypeInt, value)
	}
	if value, ok := cdpuo.mutation.AddedChargeFreeTime(); ok {
		_spec.AddField(customerdetentionpolicy.FieldChargeFreeTime, field.TypeInt, value)
	}
	if cdpuo.mutation.ChargeFreeTimeCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldChargeFreeTime, field.TypeInt)
	}
	if value, ok := cdpuo.mutation.PaymentFreeTime(); ok {
		_spec.SetField(customerdetentionpolicy.FieldPaymentFreeTime, field.TypeInt, value)
	}
	if value, ok := cdpuo.mutation.AddedPaymentFreeTime(); ok {
		_spec.AddField(customerdetentionpolicy.FieldPaymentFreeTime, field.TypeInt, value)
	}
	if cdpuo.mutation.PaymentFreeTimeCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldPaymentFreeTime, field.TypeInt)
	}
	if value, ok := cdpuo.mutation.LateArrivalPolicy(); ok {
		_spec.SetField(customerdetentionpolicy.FieldLateArrivalPolicy, field.TypeBool, value)
	}
	if cdpuo.mutation.LateArrivalPolicyCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldLateArrivalPolicy, field.TypeBool)
	}
	if value, ok := cdpuo.mutation.GracePeriod(); ok {
		_spec.SetField(customerdetentionpolicy.FieldGracePeriod, field.TypeInt, value)
	}
	if value, ok := cdpuo.mutation.AddedGracePeriod(); ok {
		_spec.AddField(customerdetentionpolicy.FieldGracePeriod, field.TypeInt, value)
	}
	if cdpuo.mutation.GracePeriodCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldGracePeriod, field.TypeInt)
	}
	if value, ok := cdpuo.mutation.Units(); ok {
		_spec.SetField(customerdetentionpolicy.FieldUnits, field.TypeInt, value)
	}
	if value, ok := cdpuo.mutation.AddedUnits(); ok {
		_spec.AddField(customerdetentionpolicy.FieldUnits, field.TypeInt, value)
	}
	if cdpuo.mutation.UnitsCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldUnits, field.TypeInt)
	}
	if value, ok := cdpuo.mutation.Amount(); ok {
		_spec.SetField(customerdetentionpolicy.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cdpuo.mutation.AddedAmount(); ok {
		_spec.AddField(customerdetentionpolicy.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cdpuo.mutation.Notes(); ok {
		_spec.SetField(customerdetentionpolicy.FieldNotes, field.TypeString, value)
	}
	if cdpuo.mutation.NotesCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldNotes, field.TypeString)
	}
	if value, ok := cdpuo.mutation.EffectiveDate(); ok {
		_spec.SetField(customerdetentionpolicy.FieldEffectiveDate, field.TypeOther, value)
	}
	if cdpuo.mutation.EffectiveDateCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldEffectiveDate, field.TypeOther)
	}
	if value, ok := cdpuo.mutation.ExpirationDate(); ok {
		_spec.SetField(customerdetentionpolicy.FieldExpirationDate, field.TypeOther, value)
	}
	if cdpuo.mutation.ExpirationDateCleared() {
		_spec.ClearField(customerdetentionpolicy.FieldExpirationDate, field.TypeOther)
	}
	if cdpuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.OrganizationTable,
			Columns: []string{customerdetentionpolicy.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.OrganizationTable,
			Columns: []string{customerdetentionpolicy.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdpuo.mutation.CommodityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.CommodityTable,
			Columns: []string{customerdetentionpolicy.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpuo.mutation.CommodityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.CommodityTable,
			Columns: []string{customerdetentionpolicy.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdpuo.mutation.RevenueCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.RevenueCodeTable,
			Columns: []string{customerdetentionpolicy.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revenuecode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpuo.mutation.RevenueCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.RevenueCodeTable,
			Columns: []string{customerdetentionpolicy.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revenuecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdpuo.mutation.ShipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.ShipmentTypeTable,
			Columns: []string{customerdetentionpolicy.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpuo.mutation.ShipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.ShipmentTypeTable,
			Columns: []string{customerdetentionpolicy.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdpuo.mutation.AccessorialChargeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.AccessorialChargeTable,
			Columns: []string{customerdetentionpolicy.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdpuo.mutation.AccessorialChargeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerdetentionpolicy.AccessorialChargeTable,
			Columns: []string{customerdetentionpolicy.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cdpuo.modifiers...)
	_node = &CustomerDetentionPolicy{config: cdpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cdpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerdetentionpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cdpuo.mutation.done = true
	return _node, nil
}
