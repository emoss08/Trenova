// Code generated by entc, DO NOT EDIT.

package googleapi

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the googleapi type in the database.
	Label = "google_api"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAPIKey holds the string denoting the api_key field in the database.
	FieldAPIKey = "api_key"
	// FieldMileageUnit holds the string denoting the mileage_unit field in the database.
	FieldMileageUnit = "mileage_unit"
	// FieldAddCustomerLocation holds the string denoting the add_customer_location field in the database.
	FieldAddCustomerLocation = "add_customer_location"
	// FieldAutoGeocode holds the string denoting the auto_geocode field in the database.
	FieldAutoGeocode = "auto_geocode"
	// FieldAddLocation holds the string denoting the add_location field in the database.
	FieldAddLocation = "add_location"
	// FieldTrafficModel holds the string denoting the traffic_model field in the database.
	FieldTrafficModel = "traffic_model"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// Table holds the table name of the googleapi in the database.
	Table = "google_apis"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "google_apis"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "google_apis"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
)

// Columns holds all SQL columns for googleapi fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAPIKey,
	FieldMileageUnit,
	FieldAddCustomerLocation,
	FieldAutoGeocode,
	FieldAddLocation,
	FieldTrafficModel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "google_apis"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"business_unit_id",
	"organization_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// APIKeyValidator is a validator for the "api_key" field. It is called by the builders before save.
	APIKeyValidator func(string) error
	// DefaultAddCustomerLocation holds the default value on creation for the "add_customer_location" field.
	DefaultAddCustomerLocation bool
	// DefaultAutoGeocode holds the default value on creation for the "auto_geocode" field.
	DefaultAutoGeocode bool
	// DefaultAddLocation holds the default value on creation for the "add_location" field.
	DefaultAddLocation bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// MileageUnit defines the type for the "mileage_unit" enum field.
type MileageUnit string

// MileageUnitImperial is the default value of the MileageUnit enum.
const DefaultMileageUnit = MileageUnitImperial

// MileageUnit values.
const (
	MileageUnitImperial MileageUnit = "Imperial"
	MileageUnitMetric   MileageUnit = "Metric"
)

func (mu MileageUnit) String() string {
	return string(mu)
}

// MileageUnitValidator is a validator for the "mileage_unit" field enum values. It is called by the builders before save.
func MileageUnitValidator(mu MileageUnit) error {
	switch mu {
	case MileageUnitImperial, MileageUnitMetric:
		return nil
	default:
		return fmt.Errorf("googleapi: invalid enum value for mileage_unit field: %q", mu)
	}
}

// TrafficModel defines the type for the "traffic_model" enum field.
type TrafficModel string

// TrafficModelBestGuess is the default value of the TrafficModel enum.
const DefaultTrafficModel = TrafficModelBestGuess

// TrafficModel values.
const (
	TrafficModelBestGuess   TrafficModel = "BestGuess"
	TrafficModelOptimistic  TrafficModel = "Optimistic"
	TrafficModelPessimistic TrafficModel = "Pessimistic"
)

func (tm TrafficModel) String() string {
	return string(tm)
}

// TrafficModelValidator is a validator for the "traffic_model" field enum values. It is called by the builders before save.
func TrafficModelValidator(tm TrafficModel) error {
	switch tm {
	case TrafficModelBestGuess, TrafficModelOptimistic, TrafficModelPessimistic:
		return nil
	default:
		return fmt.Errorf("googleapi: invalid enum value for traffic_model field: %q", tm)
	}
}

// OrderOption defines the ordering options for the GoogleApi queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAPIKey orders the results by the api_key field.
func ByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKey, opts...).ToFunc()
}

// ByMileageUnit orders the results by the mileage_unit field.
func ByMileageUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMileageUnit, opts...).ToFunc()
}

// ByAddCustomerLocation orders the results by the add_customer_location field.
func ByAddCustomerLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddCustomerLocation, opts...).ToFunc()
}

// ByAutoGeocode orders the results by the auto_geocode field.
func ByAutoGeocode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoGeocode, opts...).ToFunc()
}

// ByAddLocation orders the results by the add_location field.
func ByAddLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddLocation, opts...).ToFunc()
}

// ByTrafficModel orders the results by the traffic_model field.
func ByTrafficModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrafficModel, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
