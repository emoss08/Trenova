// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/customeremailprofile"
	"github.com/emoss08/trenova/internal/ent/emailprofile"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/google/uuid"
)

// CustomerEmailProfile is the model entity for the CustomerEmailProfile schema.
type CustomerEmailProfile struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// The current version of this entity.
	Version int `json:"version" validate:"omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID uuid.UUID `json:"customer_id,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"code" validate:"omitempty,max=100"`
	// EmailProfileID holds the value of the "email_profile_id" field.
	EmailProfileID *uuid.UUID `json:"email_profile_id,omitempty"`
	// EmailRecipients holds the value of the "email_recipients" field.
	EmailRecipients string `json:"emailRecipients" validate:"omitempty,commaSeparatedEmails"`
	// EmailCcRecipients holds the value of the "email_cc_recipients" field.
	EmailCcRecipients string `json:"emailCcRecipients" validate:"omitempty,commaSeparatedEmails"`
	// AttachmentName holds the value of the "attachment_name" field.
	AttachmentName string `json:"attachmentName" validate:"omitempty"`
	// EmailFormat holds the value of the "email_format" field.
	EmailFormat customeremailprofile.EmailFormat `json:"emailFormat" validate:"required,oneof=PLAIN HTML"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerEmailProfileQuery when eager-loading is set.
	Edges        CustomerEmailProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerEmailProfileEdges holds the relations/edges for other nodes in the graph.
type CustomerEmailProfileEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// EmailProfile holds the value of the email_profile edge.
	EmailProfile *EmailProfile `json:"emailProfile"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEmailProfileEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEmailProfileEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEmailProfileEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// EmailProfileOrErr returns the EmailProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEmailProfileEdges) EmailProfileOrErr() (*EmailProfile, error) {
	if e.EmailProfile != nil {
		return e.EmailProfile, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: emailprofile.Label}
	}
	return nil, &NotLoadedError{edge: "email_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerEmailProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customeremailprofile.FieldEmailProfileID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case customeremailprofile.FieldVersion:
			values[i] = new(sql.NullInt64)
		case customeremailprofile.FieldSubject, customeremailprofile.FieldEmailRecipients, customeremailprofile.FieldEmailCcRecipients, customeremailprofile.FieldAttachmentName, customeremailprofile.FieldEmailFormat:
			values[i] = new(sql.NullString)
		case customeremailprofile.FieldCreatedAt, customeremailprofile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case customeremailprofile.FieldID, customeremailprofile.FieldBusinessUnitID, customeremailprofile.FieldOrganizationID, customeremailprofile.FieldCustomerID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerEmailProfile fields.
func (cep *CustomerEmailProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customeremailprofile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cep.ID = *value
			}
		case customeremailprofile.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				cep.BusinessUnitID = *value
			}
		case customeremailprofile.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				cep.OrganizationID = *value
			}
		case customeremailprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cep.CreatedAt = value.Time
			}
		case customeremailprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cep.UpdatedAt = value.Time
			}
		case customeremailprofile.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				cep.Version = int(value.Int64)
			}
		case customeremailprofile.FieldCustomerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value != nil {
				cep.CustomerID = *value
			}
		case customeremailprofile.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				cep.Subject = value.String
			}
		case customeremailprofile.FieldEmailProfileID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field email_profile_id", values[i])
			} else if value.Valid {
				cep.EmailProfileID = new(uuid.UUID)
				*cep.EmailProfileID = *value.S.(*uuid.UUID)
			}
		case customeremailprofile.FieldEmailRecipients:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_recipients", values[i])
			} else if value.Valid {
				cep.EmailRecipients = value.String
			}
		case customeremailprofile.FieldEmailCcRecipients:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_cc_recipients", values[i])
			} else if value.Valid {
				cep.EmailCcRecipients = value.String
			}
		case customeremailprofile.FieldAttachmentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_name", values[i])
			} else if value.Valid {
				cep.AttachmentName = value.String
			}
		case customeremailprofile.FieldEmailFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_format", values[i])
			} else if value.Valid {
				cep.EmailFormat = customeremailprofile.EmailFormat(value.String)
			}
		default:
			cep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomerEmailProfile.
// This includes values selected through modifiers, order, etc.
func (cep *CustomerEmailProfile) Value(name string) (ent.Value, error) {
	return cep.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the CustomerEmailProfile entity.
func (cep *CustomerEmailProfile) QueryBusinessUnit() *BusinessUnitQuery {
	return NewCustomerEmailProfileClient(cep.config).QueryBusinessUnit(cep)
}

// QueryOrganization queries the "organization" edge of the CustomerEmailProfile entity.
func (cep *CustomerEmailProfile) QueryOrganization() *OrganizationQuery {
	return NewCustomerEmailProfileClient(cep.config).QueryOrganization(cep)
}

// QueryCustomer queries the "customer" edge of the CustomerEmailProfile entity.
func (cep *CustomerEmailProfile) QueryCustomer() *CustomerQuery {
	return NewCustomerEmailProfileClient(cep.config).QueryCustomer(cep)
}

// QueryEmailProfile queries the "email_profile" edge of the CustomerEmailProfile entity.
func (cep *CustomerEmailProfile) QueryEmailProfile() *EmailProfileQuery {
	return NewCustomerEmailProfileClient(cep.config).QueryEmailProfile(cep)
}

// Update returns a builder for updating this CustomerEmailProfile.
// Note that you need to call CustomerEmailProfile.Unwrap() before calling this method if this CustomerEmailProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (cep *CustomerEmailProfile) Update() *CustomerEmailProfileUpdateOne {
	return NewCustomerEmailProfileClient(cep.config).UpdateOne(cep)
}

// Unwrap unwraps the CustomerEmailProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cep *CustomerEmailProfile) Unwrap() *CustomerEmailProfile {
	_tx, ok := cep.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerEmailProfile is not a transactional entity")
	}
	cep.config.driver = _tx.drv
	return cep
}

// String implements the fmt.Stringer.
func (cep *CustomerEmailProfile) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerEmailProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cep.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", cep.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", cep.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cep.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cep.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", cep.Version))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", cep.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(cep.Subject)
	builder.WriteString(", ")
	if v := cep.EmailProfileID; v != nil {
		builder.WriteString("email_profile_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("email_recipients=")
	builder.WriteString(cep.EmailRecipients)
	builder.WriteString(", ")
	builder.WriteString("email_cc_recipients=")
	builder.WriteString(cep.EmailCcRecipients)
	builder.WriteString(", ")
	builder.WriteString("attachment_name=")
	builder.WriteString(cep.AttachmentName)
	builder.WriteString(", ")
	builder.WriteString("email_format=")
	builder.WriteString(fmt.Sprintf("%v", cep.EmailFormat))
	builder.WriteByte(')')
	return builder.String()
}

// CustomerEmailProfiles is a parsable slice of CustomerEmailProfile.
type CustomerEmailProfiles []*CustomerEmailProfile
