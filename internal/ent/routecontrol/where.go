// Code generated by entc, DO NOT EDIT.

package routecontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// GenerateRoutes applies equality check predicate on the "generate_routes" field. It's identical to GenerateRoutesEQ.
func GenerateRoutes(v bool) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldGenerateRoutes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldLTE(FieldUpdatedAt, v))
}

// DistanceMethodEQ applies the EQ predicate on the "distance_method" field.
func DistanceMethodEQ(v DistanceMethod) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldDistanceMethod, v))
}

// DistanceMethodNEQ applies the NEQ predicate on the "distance_method" field.
func DistanceMethodNEQ(v DistanceMethod) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNEQ(FieldDistanceMethod, v))
}

// DistanceMethodIn applies the In predicate on the "distance_method" field.
func DistanceMethodIn(vs ...DistanceMethod) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldIn(FieldDistanceMethod, vs...))
}

// DistanceMethodNotIn applies the NotIn predicate on the "distance_method" field.
func DistanceMethodNotIn(vs ...DistanceMethod) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNotIn(FieldDistanceMethod, vs...))
}

// MileageUnitEQ applies the EQ predicate on the "mileage_unit" field.
func MileageUnitEQ(v MileageUnit) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldMileageUnit, v))
}

// MileageUnitNEQ applies the NEQ predicate on the "mileage_unit" field.
func MileageUnitNEQ(v MileageUnit) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNEQ(FieldMileageUnit, v))
}

// MileageUnitIn applies the In predicate on the "mileage_unit" field.
func MileageUnitIn(vs ...MileageUnit) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldIn(FieldMileageUnit, vs...))
}

// MileageUnitNotIn applies the NotIn predicate on the "mileage_unit" field.
func MileageUnitNotIn(vs ...MileageUnit) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNotIn(FieldMileageUnit, vs...))
}

// GenerateRoutesEQ applies the EQ predicate on the "generate_routes" field.
func GenerateRoutesEQ(v bool) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldEQ(FieldGenerateRoutes, v))
}

// GenerateRoutesNEQ applies the NEQ predicate on the "generate_routes" field.
func GenerateRoutesNEQ(v bool) predicate.RouteControl {
	return predicate.RouteControl(sql.FieldNEQ(FieldGenerateRoutes, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.RouteControl {
	return predicate.RouteControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.RouteControl {
	return predicate.RouteControl(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.RouteControl {
	return predicate.RouteControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.RouteControl {
	return predicate.RouteControl(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RouteControl) predicate.RouteControl {
	return predicate.RouteControl(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RouteControl) predicate.RouteControl {
	return predicate.RouteControl(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RouteControl) predicate.RouteControl {
	return predicate.RouteControl(sql.NotPredicates(p))
}
