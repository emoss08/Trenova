// Code generated by entc, DO NOT EDIT.

package routecontrol

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the routecontrol type in the database.
	Label = "route_control"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDistanceMethod holds the string denoting the distance_method field in the database.
	FieldDistanceMethod = "distance_method"
	// FieldMileageUnit holds the string denoting the mileage_unit field in the database.
	FieldMileageUnit = "mileage_unit"
	// FieldGenerateRoutes holds the string denoting the generate_routes field in the database.
	FieldGenerateRoutes = "generate_routes"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// Table holds the table name of the routecontrol in the database.
	Table = "route_controls"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "route_controls"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "route_controls"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
)

// Columns holds all SQL columns for routecontrol fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDistanceMethod,
	FieldMileageUnit,
	FieldGenerateRoutes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "route_controls"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_id",
	"business_unit_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultGenerateRoutes holds the default value on creation for the "generate_routes" field.
	DefaultGenerateRoutes bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// DistanceMethod defines the type for the "distance_method" enum field.
type DistanceMethod string

// DistanceMethodTrenova is the default value of the DistanceMethod enum.
const DefaultDistanceMethod = DistanceMethodTrenova

// DistanceMethod values.
const (
	DistanceMethodTrenova DistanceMethod = "Trenova"
	DistanceMethodGoogle  DistanceMethod = "Google"
)

func (dm DistanceMethod) String() string {
	return string(dm)
}

// DistanceMethodValidator is a validator for the "distance_method" field enum values. It is called by the builders before save.
func DistanceMethodValidator(dm DistanceMethod) error {
	switch dm {
	case DistanceMethodTrenova, DistanceMethodGoogle:
		return nil
	default:
		return fmt.Errorf("routecontrol: invalid enum value for distance_method field: %q", dm)
	}
}

// MileageUnit defines the type for the "mileage_unit" enum field.
type MileageUnit string

// MileageUnitUnitsMetric is the default value of the MileageUnit enum.
const DefaultMileageUnit = MileageUnitUnitsMetric

// MileageUnit values.
const (
	MileageUnitUnitsMetric   MileageUnit = "UnitsMetric"
	MileageUnitUnitsImperial MileageUnit = "UnitsImperial"
)

func (mu MileageUnit) String() string {
	return string(mu)
}

// MileageUnitValidator is a validator for the "mileage_unit" field enum values. It is called by the builders before save.
func MileageUnitValidator(mu MileageUnit) error {
	switch mu {
	case MileageUnitUnitsMetric, MileageUnitUnitsImperial:
		return nil
	default:
		return fmt.Errorf("routecontrol: invalid enum value for mileage_unit field: %q", mu)
	}
}

// OrderOption defines the ordering options for the RouteControl queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDistanceMethod orders the results by the distance_method field.
func ByDistanceMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistanceMethod, opts...).ToFunc()
}

// ByMileageUnit orders the results by the mileage_unit field.
func ByMileageUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMileageUnit, opts...).ToFunc()
}

// ByGenerateRoutes orders the results by the generate_routes field.
func ByGenerateRoutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenerateRoutes, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
