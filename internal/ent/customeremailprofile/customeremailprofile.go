// Code generated by entc, DO NOT EDIT.

package customeremailprofile

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the customeremailprofile type in the database.
	Label = "customer_email_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldEmailProfileID holds the string denoting the email_profile_id field in the database.
	FieldEmailProfileID = "email_profile_id"
	// FieldEmailRecipients holds the string denoting the email_recipients field in the database.
	FieldEmailRecipients = "email_recipients"
	// FieldEmailCcRecipients holds the string denoting the email_cc_recipients field in the database.
	FieldEmailCcRecipients = "email_cc_recipients"
	// FieldAttachmentName holds the string denoting the attachment_name field in the database.
	FieldAttachmentName = "attachment_name"
	// FieldEmailFormat holds the string denoting the email_format field in the database.
	FieldEmailFormat = "email_format"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeEmailProfile holds the string denoting the email_profile edge name in mutations.
	EdgeEmailProfile = "email_profile"
	// Table holds the table name of the customeremailprofile in the database.
	Table = "customer_email_profiles"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "customer_email_profiles"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "customer_email_profiles"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "customer_email_profiles"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// EmailProfileTable is the table that holds the email_profile relation/edge.
	EmailProfileTable = "customer_email_profiles"
	// EmailProfileInverseTable is the table name for the EmailProfile entity.
	// It exists in this package in order to avoid circular dependency with the "emailprofile" package.
	EmailProfileInverseTable = "email_profiles"
	// EmailProfileColumn is the table column denoting the email_profile relation/edge.
	EmailProfileColumn = "email_profile_id"
)

// Columns holds all SQL columns for customeremailprofile fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVersion,
	FieldCustomerID,
	FieldSubject,
	FieldEmailProfileID,
	FieldEmailRecipients,
	FieldEmailCcRecipients,
	FieldAttachmentName,
	FieldEmailFormat,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	SubjectValidator func(string) error
	// EmailRecipientsValidator is a validator for the "email_recipients" field. It is called by the builders before save.
	EmailRecipientsValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// EmailFormat defines the type for the "email_format" enum field.
type EmailFormat string

// EmailFormatPLAIN is the default value of the EmailFormat enum.
const DefaultEmailFormat = EmailFormatPLAIN

// EmailFormat values.
const (
	EmailFormatPLAIN EmailFormat = "PLAIN"
	EmailFormatHTML  EmailFormat = "HTML"
)

func (ef EmailFormat) String() string {
	return string(ef)
}

// EmailFormatValidator is a validator for the "email_format" field enum values. It is called by the builders before save.
func EmailFormatValidator(ef EmailFormat) error {
	switch ef {
	case EmailFormatPLAIN, EmailFormatHTML:
		return nil
	default:
		return fmt.Errorf("customeremailprofile: invalid enum value for email_format field: %q", ef)
	}
}

// OrderOption defines the ordering options for the CustomerEmailProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByEmailProfileID orders the results by the email_profile_id field.
func ByEmailProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailProfileID, opts...).ToFunc()
}

// ByEmailRecipients orders the results by the email_recipients field.
func ByEmailRecipients(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailRecipients, opts...).ToFunc()
}

// ByEmailCcRecipients orders the results by the email_cc_recipients field.
func ByEmailCcRecipients(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailCcRecipients, opts...).ToFunc()
}

// ByAttachmentName orders the results by the attachment_name field.
func ByAttachmentName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttachmentName, opts...).ToFunc()
}

// ByEmailFormat orders the results by the email_format field.
func ByEmailFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailFormat, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmailProfileField orders the results by email_profile field.
func ByEmailProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CustomerTable, CustomerColumn),
	)
}
func newEmailProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EmailProfileTable, EmailProfileColumn),
	)
}
