// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/worker"
	"github.com/emoss08/trenova/internal/ent/workercontact"
	"github.com/google/uuid"
)

// WorkerContactUpdate is the builder for updating WorkerContact entities.
type WorkerContactUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkerContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WorkerContactUpdate builder.
func (wcu *WorkerContactUpdate) Where(ps ...predicate.WorkerContact) *WorkerContactUpdate {
	wcu.mutation.Where(ps...)
	return wcu
}

// SetUpdatedAt sets the "updated_at" field.
func (wcu *WorkerContactUpdate) SetUpdatedAt(t time.Time) *WorkerContactUpdate {
	wcu.mutation.SetUpdatedAt(t)
	return wcu
}

// SetVersion sets the "version" field.
func (wcu *WorkerContactUpdate) SetVersion(i int) *WorkerContactUpdate {
	wcu.mutation.ResetVersion()
	wcu.mutation.SetVersion(i)
	return wcu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wcu *WorkerContactUpdate) SetNillableVersion(i *int) *WorkerContactUpdate {
	if i != nil {
		wcu.SetVersion(*i)
	}
	return wcu
}

// AddVersion adds i to the "version" field.
func (wcu *WorkerContactUpdate) AddVersion(i int) *WorkerContactUpdate {
	wcu.mutation.AddVersion(i)
	return wcu
}

// SetWorkerID sets the "worker_id" field.
func (wcu *WorkerContactUpdate) SetWorkerID(u uuid.UUID) *WorkerContactUpdate {
	wcu.mutation.SetWorkerID(u)
	return wcu
}

// SetNillableWorkerID sets the "worker_id" field if the given value is not nil.
func (wcu *WorkerContactUpdate) SetNillableWorkerID(u *uuid.UUID) *WorkerContactUpdate {
	if u != nil {
		wcu.SetWorkerID(*u)
	}
	return wcu
}

// SetName sets the "name" field.
func (wcu *WorkerContactUpdate) SetName(s string) *WorkerContactUpdate {
	wcu.mutation.SetName(s)
	return wcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wcu *WorkerContactUpdate) SetNillableName(s *string) *WorkerContactUpdate {
	if s != nil {
		wcu.SetName(*s)
	}
	return wcu
}

// SetEmail sets the "email" field.
func (wcu *WorkerContactUpdate) SetEmail(s string) *WorkerContactUpdate {
	wcu.mutation.SetEmail(s)
	return wcu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (wcu *WorkerContactUpdate) SetNillableEmail(s *string) *WorkerContactUpdate {
	if s != nil {
		wcu.SetEmail(*s)
	}
	return wcu
}

// SetPhone sets the "phone" field.
func (wcu *WorkerContactUpdate) SetPhone(s string) *WorkerContactUpdate {
	wcu.mutation.SetPhone(s)
	return wcu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (wcu *WorkerContactUpdate) SetNillablePhone(s *string) *WorkerContactUpdate {
	if s != nil {
		wcu.SetPhone(*s)
	}
	return wcu
}

// SetRelationship sets the "relationship" field.
func (wcu *WorkerContactUpdate) SetRelationship(s string) *WorkerContactUpdate {
	wcu.mutation.SetRelationship(s)
	return wcu
}

// SetNillableRelationship sets the "relationship" field if the given value is not nil.
func (wcu *WorkerContactUpdate) SetNillableRelationship(s *string) *WorkerContactUpdate {
	if s != nil {
		wcu.SetRelationship(*s)
	}
	return wcu
}

// ClearRelationship clears the value of the "relationship" field.
func (wcu *WorkerContactUpdate) ClearRelationship() *WorkerContactUpdate {
	wcu.mutation.ClearRelationship()
	return wcu
}

// SetIsPrimary sets the "is_primary" field.
func (wcu *WorkerContactUpdate) SetIsPrimary(b bool) *WorkerContactUpdate {
	wcu.mutation.SetIsPrimary(b)
	return wcu
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (wcu *WorkerContactUpdate) SetNillableIsPrimary(b *bool) *WorkerContactUpdate {
	if b != nil {
		wcu.SetIsPrimary(*b)
	}
	return wcu
}

// SetWorker sets the "worker" edge to the Worker entity.
func (wcu *WorkerContactUpdate) SetWorker(w *Worker) *WorkerContactUpdate {
	return wcu.SetWorkerID(w.ID)
}

// Mutation returns the WorkerContactMutation object of the builder.
func (wcu *WorkerContactUpdate) Mutation() *WorkerContactMutation {
	return wcu.mutation
}

// ClearWorker clears the "worker" edge to the Worker entity.
func (wcu *WorkerContactUpdate) ClearWorker() *WorkerContactUpdate {
	wcu.mutation.ClearWorker()
	return wcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcu *WorkerContactUpdate) Save(ctx context.Context) (int, error) {
	wcu.defaults()
	return withHooks(ctx, wcu.sqlSave, wcu.mutation, wcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcu *WorkerContactUpdate) SaveX(ctx context.Context) int {
	affected, err := wcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcu *WorkerContactUpdate) Exec(ctx context.Context) error {
	_, err := wcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcu *WorkerContactUpdate) ExecX(ctx context.Context) {
	if err := wcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcu *WorkerContactUpdate) defaults() {
	if _, ok := wcu.mutation.UpdatedAt(); !ok {
		v := workercontact.UpdateDefaultUpdatedAt()
		wcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcu *WorkerContactUpdate) check() error {
	if v, ok := wcu.mutation.Name(); ok {
		if err := workercontact.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkerContact.name": %w`, err)}
		}
	}
	if v, ok := wcu.mutation.Email(); ok {
		if err := workercontact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "WorkerContact.email": %w`, err)}
		}
	}
	if v, ok := wcu.mutation.Phone(); ok {
		if err := workercontact.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "WorkerContact.phone": %w`, err)}
		}
	}
	if _, ok := wcu.mutation.BusinessUnitID(); wcu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkerContact.business_unit"`)
	}
	if _, ok := wcu.mutation.OrganizationID(); wcu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkerContact.organization"`)
	}
	if _, ok := wcu.mutation.WorkerID(); wcu.mutation.WorkerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkerContact.worker"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wcu *WorkerContactUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkerContactUpdate {
	wcu.modifiers = append(wcu.modifiers, modifiers...)
	return wcu
}

func (wcu *WorkerContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workercontact.Table, workercontact.Columns, sqlgraph.NewFieldSpec(workercontact.FieldID, field.TypeUUID))
	if ps := wcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcu.mutation.UpdatedAt(); ok {
		_spec.SetField(workercontact.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wcu.mutation.Version(); ok {
		_spec.SetField(workercontact.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wcu.mutation.AddedVersion(); ok {
		_spec.AddField(workercontact.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wcu.mutation.Name(); ok {
		_spec.SetField(workercontact.FieldName, field.TypeString, value)
	}
	if value, ok := wcu.mutation.Email(); ok {
		_spec.SetField(workercontact.FieldEmail, field.TypeString, value)
	}
	if value, ok := wcu.mutation.Phone(); ok {
		_spec.SetField(workercontact.FieldPhone, field.TypeString, value)
	}
	if value, ok := wcu.mutation.Relationship(); ok {
		_spec.SetField(workercontact.FieldRelationship, field.TypeString, value)
	}
	if wcu.mutation.RelationshipCleared() {
		_spec.ClearField(workercontact.FieldRelationship, field.TypeString)
	}
	if value, ok := wcu.mutation.IsPrimary(); ok {
		_spec.SetField(workercontact.FieldIsPrimary, field.TypeBool, value)
	}
	if wcu.mutation.WorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workercontact.WorkerTable,
			Columns: []string{workercontact.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.WorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workercontact.WorkerTable,
			Columns: []string{workercontact.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workercontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wcu.mutation.done = true
	return n, nil
}

// WorkerContactUpdateOne is the builder for updating a single WorkerContact entity.
type WorkerContactUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkerContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wcuo *WorkerContactUpdateOne) SetUpdatedAt(t time.Time) *WorkerContactUpdateOne {
	wcuo.mutation.SetUpdatedAt(t)
	return wcuo
}

// SetVersion sets the "version" field.
func (wcuo *WorkerContactUpdateOne) SetVersion(i int) *WorkerContactUpdateOne {
	wcuo.mutation.ResetVersion()
	wcuo.mutation.SetVersion(i)
	return wcuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wcuo *WorkerContactUpdateOne) SetNillableVersion(i *int) *WorkerContactUpdateOne {
	if i != nil {
		wcuo.SetVersion(*i)
	}
	return wcuo
}

// AddVersion adds i to the "version" field.
func (wcuo *WorkerContactUpdateOne) AddVersion(i int) *WorkerContactUpdateOne {
	wcuo.mutation.AddVersion(i)
	return wcuo
}

// SetWorkerID sets the "worker_id" field.
func (wcuo *WorkerContactUpdateOne) SetWorkerID(u uuid.UUID) *WorkerContactUpdateOne {
	wcuo.mutation.SetWorkerID(u)
	return wcuo
}

// SetNillableWorkerID sets the "worker_id" field if the given value is not nil.
func (wcuo *WorkerContactUpdateOne) SetNillableWorkerID(u *uuid.UUID) *WorkerContactUpdateOne {
	if u != nil {
		wcuo.SetWorkerID(*u)
	}
	return wcuo
}

// SetName sets the "name" field.
func (wcuo *WorkerContactUpdateOne) SetName(s string) *WorkerContactUpdateOne {
	wcuo.mutation.SetName(s)
	return wcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wcuo *WorkerContactUpdateOne) SetNillableName(s *string) *WorkerContactUpdateOne {
	if s != nil {
		wcuo.SetName(*s)
	}
	return wcuo
}

// SetEmail sets the "email" field.
func (wcuo *WorkerContactUpdateOne) SetEmail(s string) *WorkerContactUpdateOne {
	wcuo.mutation.SetEmail(s)
	return wcuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (wcuo *WorkerContactUpdateOne) SetNillableEmail(s *string) *WorkerContactUpdateOne {
	if s != nil {
		wcuo.SetEmail(*s)
	}
	return wcuo
}

// SetPhone sets the "phone" field.
func (wcuo *WorkerContactUpdateOne) SetPhone(s string) *WorkerContactUpdateOne {
	wcuo.mutation.SetPhone(s)
	return wcuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (wcuo *WorkerContactUpdateOne) SetNillablePhone(s *string) *WorkerContactUpdateOne {
	if s != nil {
		wcuo.SetPhone(*s)
	}
	return wcuo
}

// SetRelationship sets the "relationship" field.
func (wcuo *WorkerContactUpdateOne) SetRelationship(s string) *WorkerContactUpdateOne {
	wcuo.mutation.SetRelationship(s)
	return wcuo
}

// SetNillableRelationship sets the "relationship" field if the given value is not nil.
func (wcuo *WorkerContactUpdateOne) SetNillableRelationship(s *string) *WorkerContactUpdateOne {
	if s != nil {
		wcuo.SetRelationship(*s)
	}
	return wcuo
}

// ClearRelationship clears the value of the "relationship" field.
func (wcuo *WorkerContactUpdateOne) ClearRelationship() *WorkerContactUpdateOne {
	wcuo.mutation.ClearRelationship()
	return wcuo
}

// SetIsPrimary sets the "is_primary" field.
func (wcuo *WorkerContactUpdateOne) SetIsPrimary(b bool) *WorkerContactUpdateOne {
	wcuo.mutation.SetIsPrimary(b)
	return wcuo
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (wcuo *WorkerContactUpdateOne) SetNillableIsPrimary(b *bool) *WorkerContactUpdateOne {
	if b != nil {
		wcuo.SetIsPrimary(*b)
	}
	return wcuo
}

// SetWorker sets the "worker" edge to the Worker entity.
func (wcuo *WorkerContactUpdateOne) SetWorker(w *Worker) *WorkerContactUpdateOne {
	return wcuo.SetWorkerID(w.ID)
}

// Mutation returns the WorkerContactMutation object of the builder.
func (wcuo *WorkerContactUpdateOne) Mutation() *WorkerContactMutation {
	return wcuo.mutation
}

// ClearWorker clears the "worker" edge to the Worker entity.
func (wcuo *WorkerContactUpdateOne) ClearWorker() *WorkerContactUpdateOne {
	wcuo.mutation.ClearWorker()
	return wcuo
}

// Where appends a list predicates to the WorkerContactUpdate builder.
func (wcuo *WorkerContactUpdateOne) Where(ps ...predicate.WorkerContact) *WorkerContactUpdateOne {
	wcuo.mutation.Where(ps...)
	return wcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcuo *WorkerContactUpdateOne) Select(field string, fields ...string) *WorkerContactUpdateOne {
	wcuo.fields = append([]string{field}, fields...)
	return wcuo
}

// Save executes the query and returns the updated WorkerContact entity.
func (wcuo *WorkerContactUpdateOne) Save(ctx context.Context) (*WorkerContact, error) {
	wcuo.defaults()
	return withHooks(ctx, wcuo.sqlSave, wcuo.mutation, wcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcuo *WorkerContactUpdateOne) SaveX(ctx context.Context) *WorkerContact {
	node, err := wcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcuo *WorkerContactUpdateOne) Exec(ctx context.Context) error {
	_, err := wcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcuo *WorkerContactUpdateOne) ExecX(ctx context.Context) {
	if err := wcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcuo *WorkerContactUpdateOne) defaults() {
	if _, ok := wcuo.mutation.UpdatedAt(); !ok {
		v := workercontact.UpdateDefaultUpdatedAt()
		wcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcuo *WorkerContactUpdateOne) check() error {
	if v, ok := wcuo.mutation.Name(); ok {
		if err := workercontact.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkerContact.name": %w`, err)}
		}
	}
	if v, ok := wcuo.mutation.Email(); ok {
		if err := workercontact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "WorkerContact.email": %w`, err)}
		}
	}
	if v, ok := wcuo.mutation.Phone(); ok {
		if err := workercontact.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "WorkerContact.phone": %w`, err)}
		}
	}
	if _, ok := wcuo.mutation.BusinessUnitID(); wcuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkerContact.business_unit"`)
	}
	if _, ok := wcuo.mutation.OrganizationID(); wcuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkerContact.organization"`)
	}
	if _, ok := wcuo.mutation.WorkerID(); wcuo.mutation.WorkerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkerContact.worker"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wcuo *WorkerContactUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkerContactUpdateOne {
	wcuo.modifiers = append(wcuo.modifiers, modifiers...)
	return wcuo
}

func (wcuo *WorkerContactUpdateOne) sqlSave(ctx context.Context) (_node *WorkerContact, err error) {
	if err := wcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workercontact.Table, workercontact.Columns, sqlgraph.NewFieldSpec(workercontact.FieldID, field.TypeUUID))
	id, ok := wcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkerContact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workercontact.FieldID)
		for _, f := range fields {
			if !workercontact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workercontact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workercontact.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wcuo.mutation.Version(); ok {
		_spec.SetField(workercontact.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wcuo.mutation.AddedVersion(); ok {
		_spec.AddField(workercontact.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wcuo.mutation.Name(); ok {
		_spec.SetField(workercontact.FieldName, field.TypeString, value)
	}
	if value, ok := wcuo.mutation.Email(); ok {
		_spec.SetField(workercontact.FieldEmail, field.TypeString, value)
	}
	if value, ok := wcuo.mutation.Phone(); ok {
		_spec.SetField(workercontact.FieldPhone, field.TypeString, value)
	}
	if value, ok := wcuo.mutation.Relationship(); ok {
		_spec.SetField(workercontact.FieldRelationship, field.TypeString, value)
	}
	if wcuo.mutation.RelationshipCleared() {
		_spec.ClearField(workercontact.FieldRelationship, field.TypeString)
	}
	if value, ok := wcuo.mutation.IsPrimary(); ok {
		_spec.SetField(workercontact.FieldIsPrimary, field.TypeBool, value)
	}
	if wcuo.mutation.WorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workercontact.WorkerTable,
			Columns: []string{workercontact.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.WorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workercontact.WorkerTable,
			Columns: []string{workercontact.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wcuo.modifiers...)
	_node = &WorkerContact{config: wcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workercontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wcuo.mutation.done = true
	return _node, nil
}
