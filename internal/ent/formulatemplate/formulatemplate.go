// Code generated by entc, DO NOT EDIT.

package formulatemplate

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the formulatemplate type in the database.
	Label = "formula_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFormulaText holds the string denoting the formula_text field in the database.
	FieldFormulaText = "formula_text"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTemplateType holds the string denoting the template_type field in the database.
	FieldTemplateType = "template_type"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldShipmentTypeID holds the string denoting the shipment_type_id field in the database.
	FieldShipmentTypeID = "shipment_type_id"
	// FieldAutoApply holds the string denoting the auto_apply field in the database.
	FieldAutoApply = "auto_apply"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeShipmentType holds the string denoting the shipment_type edge name in mutations.
	EdgeShipmentType = "shipment_type"
	// Table holds the table name of the formulatemplate in the database.
	Table = "formula_templates"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "formula_templates"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "formula_templates"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "formula_templates"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// ShipmentTypeTable is the table that holds the shipment_type relation/edge.
	ShipmentTypeTable = "formula_templates"
	// ShipmentTypeInverseTable is the table name for the ShipmentType entity.
	// It exists in this package in order to avoid circular dependency with the "shipmenttype" package.
	ShipmentTypeInverseTable = "shipment_types"
	// ShipmentTypeColumn is the table column denoting the shipment_type relation/edge.
	ShipmentTypeColumn = "shipment_type_id"
)

// Columns holds all SQL columns for formulatemplate fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVersion,
	FieldName,
	FieldFormulaText,
	FieldDescription,
	FieldTemplateType,
	FieldCustomerID,
	FieldShipmentTypeID,
	FieldAutoApply,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// FormulaTextValidator is a validator for the "formula_text" field. It is called by the builders before save.
	FormulaTextValidator func(string) error
	// DefaultAutoApply holds the default value on creation for the "auto_apply" field.
	DefaultAutoApply bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// TemplateType defines the type for the "template_type" enum field.
type TemplateType string

// TemplateTypeGeneral is the default value of the TemplateType enum.
const DefaultTemplateType = TemplateTypeGeneral

// TemplateType values.
const (
	TemplateTypeRefrigerated TemplateType = "Refrigerated"
	TemplateTypeHazardous    TemplateType = "Hazardous"
	TemplateTypeGeneral      TemplateType = "General"
)

func (tt TemplateType) String() string {
	return string(tt)
}

// TemplateTypeValidator is a validator for the "template_type" field enum values. It is called by the builders before save.
func TemplateTypeValidator(tt TemplateType) error {
	switch tt {
	case TemplateTypeRefrigerated, TemplateTypeHazardous, TemplateTypeGeneral:
		return nil
	default:
		return fmt.Errorf("formulatemplate: invalid enum value for template_type field: %q", tt)
	}
}

// OrderOption defines the ordering options for the FormulaTemplate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFormulaText orders the results by the formula_text field.
func ByFormulaText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormulaText, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTemplateType orders the results by the template_type field.
func ByTemplateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateType, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByShipmentTypeID orders the results by the shipment_type_id field.
func ByShipmentTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmentTypeID, opts...).ToFunc()
}

// ByAutoApply orders the results by the auto_apply field.
func ByAutoApply(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoApply, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentTypeField orders the results by shipment_type field.
func ByShipmentTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CustomerTable, CustomerColumn),
	)
}
func newShipmentTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ShipmentTypeTable, ShipmentTypeColumn),
	)
}
