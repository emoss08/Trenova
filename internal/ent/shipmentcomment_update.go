// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/commenttype"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/shipmentcomment"
	"github.com/emoss08/trenova/internal/ent/user"
	"github.com/google/uuid"
)

// ShipmentCommentUpdate is the builder for updating ShipmentComment entities.
type ShipmentCommentUpdate struct {
	config
	hooks     []Hook
	mutation  *ShipmentCommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShipmentCommentUpdate builder.
func (scu *ShipmentCommentUpdate) Where(ps ...predicate.ShipmentComment) *ShipmentCommentUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *ShipmentCommentUpdate) SetUpdatedAt(t time.Time) *ShipmentCommentUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetVersion sets the "version" field.
func (scu *ShipmentCommentUpdate) SetVersion(i int) *ShipmentCommentUpdate {
	scu.mutation.ResetVersion()
	scu.mutation.SetVersion(i)
	return scu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (scu *ShipmentCommentUpdate) SetNillableVersion(i *int) *ShipmentCommentUpdate {
	if i != nil {
		scu.SetVersion(*i)
	}
	return scu
}

// AddVersion adds i to the "version" field.
func (scu *ShipmentCommentUpdate) AddVersion(i int) *ShipmentCommentUpdate {
	scu.mutation.AddVersion(i)
	return scu
}

// SetCommentTypeID sets the "comment_type_id" field.
func (scu *ShipmentCommentUpdate) SetCommentTypeID(u uuid.UUID) *ShipmentCommentUpdate {
	scu.mutation.SetCommentTypeID(u)
	return scu
}

// SetNillableCommentTypeID sets the "comment_type_id" field if the given value is not nil.
func (scu *ShipmentCommentUpdate) SetNillableCommentTypeID(u *uuid.UUID) *ShipmentCommentUpdate {
	if u != nil {
		scu.SetCommentTypeID(*u)
	}
	return scu
}

// SetComment sets the "comment" field.
func (scu *ShipmentCommentUpdate) SetComment(s string) *ShipmentCommentUpdate {
	scu.mutation.SetComment(s)
	return scu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (scu *ShipmentCommentUpdate) SetNillableComment(s *string) *ShipmentCommentUpdate {
	if s != nil {
		scu.SetComment(*s)
	}
	return scu
}

// SetCreatedBy sets the "created_by" field.
func (scu *ShipmentCommentUpdate) SetCreatedBy(u uuid.UUID) *ShipmentCommentUpdate {
	scu.mutation.SetCreatedBy(u)
	return scu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (scu *ShipmentCommentUpdate) SetNillableCreatedBy(u *uuid.UUID) *ShipmentCommentUpdate {
	if u != nil {
		scu.SetCreatedBy(*u)
	}
	return scu
}

// SetCommentType sets the "comment_type" edge to the CommentType entity.
func (scu *ShipmentCommentUpdate) SetCommentType(c *CommentType) *ShipmentCommentUpdate {
	return scu.SetCommentTypeID(c.ID)
}

// SetCreatedByUserID sets the "created_by_user" edge to the User entity by ID.
func (scu *ShipmentCommentUpdate) SetCreatedByUserID(id uuid.UUID) *ShipmentCommentUpdate {
	scu.mutation.SetCreatedByUserID(id)
	return scu
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (scu *ShipmentCommentUpdate) SetCreatedByUser(u *User) *ShipmentCommentUpdate {
	return scu.SetCreatedByUserID(u.ID)
}

// Mutation returns the ShipmentCommentMutation object of the builder.
func (scu *ShipmentCommentUpdate) Mutation() *ShipmentCommentMutation {
	return scu.mutation
}

// ClearCommentType clears the "comment_type" edge to the CommentType entity.
func (scu *ShipmentCommentUpdate) ClearCommentType() *ShipmentCommentUpdate {
	scu.mutation.ClearCommentType()
	return scu
}

// ClearCreatedByUser clears the "created_by_user" edge to the User entity.
func (scu *ShipmentCommentUpdate) ClearCreatedByUser() *ShipmentCommentUpdate {
	scu.mutation.ClearCreatedByUser()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ShipmentCommentUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ShipmentCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ShipmentCommentUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ShipmentCommentUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ShipmentCommentUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := shipmentcomment.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *ShipmentCommentUpdate) check() error {
	if v, ok := scu.mutation.Comment(); ok {
		if err := shipmentcomment.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "ShipmentComment.comment": %w`, err)}
		}
	}
	if _, ok := scu.mutation.BusinessUnitID(); scu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.business_unit"`)
	}
	if _, ok := scu.mutation.OrganizationID(); scu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.organization"`)
	}
	if _, ok := scu.mutation.ShipmentID(); scu.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.shipment"`)
	}
	if _, ok := scu.mutation.CommentTypeID(); scu.mutation.CommentTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.comment_type"`)
	}
	if _, ok := scu.mutation.CreatedByUserID(); scu.mutation.CreatedByUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.created_by_user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scu *ShipmentCommentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentCommentUpdate {
	scu.modifiers = append(scu.modifiers, modifiers...)
	return scu
}

func (scu *ShipmentCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentcomment.Table, shipmentcomment.Columns, sqlgraph.NewFieldSpec(shipmentcomment.FieldID, field.TypeUUID))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcomment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.Version(); ok {
		_spec.SetField(shipmentcomment.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentcomment.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scu.mutation.Comment(); ok {
		_spec.SetField(shipmentcomment.FieldComment, field.TypeString, value)
	}
	if scu.mutation.CommentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CommentTypeTable,
			Columns: []string{shipmentcomment.CommentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.CommentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CommentTypeTable,
			Columns: []string{shipmentcomment.CommentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.CreatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CreatedByUserTable,
			Columns: []string{shipmentcomment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CreatedByUserTable,
			Columns: []string{shipmentcomment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ShipmentCommentUpdateOne is the builder for updating a single ShipmentComment entity.
type ShipmentCommentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShipmentCommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *ShipmentCommentUpdateOne) SetUpdatedAt(t time.Time) *ShipmentCommentUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetVersion sets the "version" field.
func (scuo *ShipmentCommentUpdateOne) SetVersion(i int) *ShipmentCommentUpdateOne {
	scuo.mutation.ResetVersion()
	scuo.mutation.SetVersion(i)
	return scuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (scuo *ShipmentCommentUpdateOne) SetNillableVersion(i *int) *ShipmentCommentUpdateOne {
	if i != nil {
		scuo.SetVersion(*i)
	}
	return scuo
}

// AddVersion adds i to the "version" field.
func (scuo *ShipmentCommentUpdateOne) AddVersion(i int) *ShipmentCommentUpdateOne {
	scuo.mutation.AddVersion(i)
	return scuo
}

// SetCommentTypeID sets the "comment_type_id" field.
func (scuo *ShipmentCommentUpdateOne) SetCommentTypeID(u uuid.UUID) *ShipmentCommentUpdateOne {
	scuo.mutation.SetCommentTypeID(u)
	return scuo
}

// SetNillableCommentTypeID sets the "comment_type_id" field if the given value is not nil.
func (scuo *ShipmentCommentUpdateOne) SetNillableCommentTypeID(u *uuid.UUID) *ShipmentCommentUpdateOne {
	if u != nil {
		scuo.SetCommentTypeID(*u)
	}
	return scuo
}

// SetComment sets the "comment" field.
func (scuo *ShipmentCommentUpdateOne) SetComment(s string) *ShipmentCommentUpdateOne {
	scuo.mutation.SetComment(s)
	return scuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (scuo *ShipmentCommentUpdateOne) SetNillableComment(s *string) *ShipmentCommentUpdateOne {
	if s != nil {
		scuo.SetComment(*s)
	}
	return scuo
}

// SetCreatedBy sets the "created_by" field.
func (scuo *ShipmentCommentUpdateOne) SetCreatedBy(u uuid.UUID) *ShipmentCommentUpdateOne {
	scuo.mutation.SetCreatedBy(u)
	return scuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (scuo *ShipmentCommentUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *ShipmentCommentUpdateOne {
	if u != nil {
		scuo.SetCreatedBy(*u)
	}
	return scuo
}

// SetCommentType sets the "comment_type" edge to the CommentType entity.
func (scuo *ShipmentCommentUpdateOne) SetCommentType(c *CommentType) *ShipmentCommentUpdateOne {
	return scuo.SetCommentTypeID(c.ID)
}

// SetCreatedByUserID sets the "created_by_user" edge to the User entity by ID.
func (scuo *ShipmentCommentUpdateOne) SetCreatedByUserID(id uuid.UUID) *ShipmentCommentUpdateOne {
	scuo.mutation.SetCreatedByUserID(id)
	return scuo
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (scuo *ShipmentCommentUpdateOne) SetCreatedByUser(u *User) *ShipmentCommentUpdateOne {
	return scuo.SetCreatedByUserID(u.ID)
}

// Mutation returns the ShipmentCommentMutation object of the builder.
func (scuo *ShipmentCommentUpdateOne) Mutation() *ShipmentCommentMutation {
	return scuo.mutation
}

// ClearCommentType clears the "comment_type" edge to the CommentType entity.
func (scuo *ShipmentCommentUpdateOne) ClearCommentType() *ShipmentCommentUpdateOne {
	scuo.mutation.ClearCommentType()
	return scuo
}

// ClearCreatedByUser clears the "created_by_user" edge to the User entity.
func (scuo *ShipmentCommentUpdateOne) ClearCreatedByUser() *ShipmentCommentUpdateOne {
	scuo.mutation.ClearCreatedByUser()
	return scuo
}

// Where appends a list predicates to the ShipmentCommentUpdate builder.
func (scuo *ShipmentCommentUpdateOne) Where(ps ...predicate.ShipmentComment) *ShipmentCommentUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ShipmentCommentUpdateOne) Select(field string, fields ...string) *ShipmentCommentUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ShipmentComment entity.
func (scuo *ShipmentCommentUpdateOne) Save(ctx context.Context) (*ShipmentComment, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ShipmentCommentUpdateOne) SaveX(ctx context.Context) *ShipmentComment {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ShipmentCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ShipmentCommentUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ShipmentCommentUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := shipmentcomment.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *ShipmentCommentUpdateOne) check() error {
	if v, ok := scuo.mutation.Comment(); ok {
		if err := shipmentcomment.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "ShipmentComment.comment": %w`, err)}
		}
	}
	if _, ok := scuo.mutation.BusinessUnitID(); scuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.business_unit"`)
	}
	if _, ok := scuo.mutation.OrganizationID(); scuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.organization"`)
	}
	if _, ok := scuo.mutation.ShipmentID(); scuo.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.shipment"`)
	}
	if _, ok := scuo.mutation.CommentTypeID(); scuo.mutation.CommentTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.comment_type"`)
	}
	if _, ok := scuo.mutation.CreatedByUserID(); scuo.mutation.CreatedByUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentComment.created_by_user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scuo *ShipmentCommentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentCommentUpdateOne {
	scuo.modifiers = append(scuo.modifiers, modifiers...)
	return scuo
}

func (scuo *ShipmentCommentUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentComment, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentcomment.Table, shipmentcomment.Columns, sqlgraph.NewFieldSpec(shipmentcomment.FieldID, field.TypeUUID))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentComment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentcomment.FieldID)
		for _, f := range fields {
			if !shipmentcomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentcomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcomment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.Version(); ok {
		_spec.SetField(shipmentcomment.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentcomment.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.Comment(); ok {
		_spec.SetField(shipmentcomment.FieldComment, field.TypeString, value)
	}
	if scuo.mutation.CommentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CommentTypeTable,
			Columns: []string{shipmentcomment.CommentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.CommentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CommentTypeTable,
			Columns: []string{shipmentcomment.CommentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.CreatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CreatedByUserTable,
			Columns: []string{shipmentcomment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CreatedByUserTable,
			Columns: []string{shipmentcomment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scuo.modifiers...)
	_node = &ShipmentComment{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
