// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/usstate"
	"github.com/google/uuid"
)

// UsStateCreate is the builder for creating a UsState entity.
type UsStateCreate struct {
	config
	mutation *UsStateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (usc *UsStateCreate) SetCreatedAt(t time.Time) *UsStateCreate {
	usc.mutation.SetCreatedAt(t)
	return usc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usc *UsStateCreate) SetNillableCreatedAt(t *time.Time) *UsStateCreate {
	if t != nil {
		usc.SetCreatedAt(*t)
	}
	return usc
}

// SetUpdatedAt sets the "updated_at" field.
func (usc *UsStateCreate) SetUpdatedAt(t time.Time) *UsStateCreate {
	usc.mutation.SetUpdatedAt(t)
	return usc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usc *UsStateCreate) SetNillableUpdatedAt(t *time.Time) *UsStateCreate {
	if t != nil {
		usc.SetUpdatedAt(*t)
	}
	return usc
}

// SetName sets the "name" field.
func (usc *UsStateCreate) SetName(s string) *UsStateCreate {
	usc.mutation.SetName(s)
	return usc
}

// SetAbbreviation sets the "abbreviation" field.
func (usc *UsStateCreate) SetAbbreviation(s string) *UsStateCreate {
	usc.mutation.SetAbbreviation(s)
	return usc
}

// SetCountryName sets the "country_name" field.
func (usc *UsStateCreate) SetCountryName(s string) *UsStateCreate {
	usc.mutation.SetCountryName(s)
	return usc
}

// SetNillableCountryName sets the "country_name" field if the given value is not nil.
func (usc *UsStateCreate) SetNillableCountryName(s *string) *UsStateCreate {
	if s != nil {
		usc.SetCountryName(*s)
	}
	return usc
}

// SetCountryIso3 sets the "country_iso3" field.
func (usc *UsStateCreate) SetCountryIso3(s string) *UsStateCreate {
	usc.mutation.SetCountryIso3(s)
	return usc
}

// SetNillableCountryIso3 sets the "country_iso3" field if the given value is not nil.
func (usc *UsStateCreate) SetNillableCountryIso3(s *string) *UsStateCreate {
	if s != nil {
		usc.SetCountryIso3(*s)
	}
	return usc
}

// SetID sets the "id" field.
func (usc *UsStateCreate) SetID(u uuid.UUID) *UsStateCreate {
	usc.mutation.SetID(u)
	return usc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (usc *UsStateCreate) SetNillableID(u *uuid.UUID) *UsStateCreate {
	if u != nil {
		usc.SetID(*u)
	}
	return usc
}

// Mutation returns the UsStateMutation object of the builder.
func (usc *UsStateCreate) Mutation() *UsStateMutation {
	return usc.mutation
}

// Save creates the UsState in the database.
func (usc *UsStateCreate) Save(ctx context.Context) (*UsState, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UsStateCreate) SaveX(ctx context.Context) *UsState {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UsStateCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UsStateCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UsStateCreate) defaults() {
	if _, ok := usc.mutation.CreatedAt(); !ok {
		v := usstate.DefaultCreatedAt()
		usc.mutation.SetCreatedAt(v)
	}
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		v := usstate.DefaultUpdatedAt()
		usc.mutation.SetUpdatedAt(v)
	}
	if _, ok := usc.mutation.CountryName(); !ok {
		v := usstate.DefaultCountryName
		usc.mutation.SetCountryName(v)
	}
	if _, ok := usc.mutation.CountryIso3(); !ok {
		v := usstate.DefaultCountryIso3
		usc.mutation.SetCountryIso3(v)
	}
	if _, ok := usc.mutation.ID(); !ok {
		v := usstate.DefaultID()
		usc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UsStateCreate) check() error {
	if _, ok := usc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UsState.created_at"`)}
	}
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UsState.updated_at"`)}
	}
	if _, ok := usc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UsState.name"`)}
	}
	if v, ok := usc.mutation.Name(); ok {
		if err := usstate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UsState.name": %w`, err)}
		}
	}
	if _, ok := usc.mutation.Abbreviation(); !ok {
		return &ValidationError{Name: "abbreviation", err: errors.New(`ent: missing required field "UsState.abbreviation"`)}
	}
	if v, ok := usc.mutation.Abbreviation(); ok {
		if err := usstate.AbbreviationValidator(v); err != nil {
			return &ValidationError{Name: "abbreviation", err: fmt.Errorf(`ent: validator failed for field "UsState.abbreviation": %w`, err)}
		}
	}
	if _, ok := usc.mutation.CountryName(); !ok {
		return &ValidationError{Name: "country_name", err: errors.New(`ent: missing required field "UsState.country_name"`)}
	}
	if v, ok := usc.mutation.CountryName(); ok {
		if err := usstate.CountryNameValidator(v); err != nil {
			return &ValidationError{Name: "country_name", err: fmt.Errorf(`ent: validator failed for field "UsState.country_name": %w`, err)}
		}
	}
	if _, ok := usc.mutation.CountryIso3(); !ok {
		return &ValidationError{Name: "country_iso3", err: errors.New(`ent: missing required field "UsState.country_iso3"`)}
	}
	if v, ok := usc.mutation.CountryIso3(); ok {
		if err := usstate.CountryIso3Validator(v); err != nil {
			return &ValidationError{Name: "country_iso3", err: fmt.Errorf(`ent: validator failed for field "UsState.country_iso3": %w`, err)}
		}
	}
	return nil
}

func (usc *UsStateCreate) sqlSave(ctx context.Context) (*UsState, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UsStateCreate) createSpec() (*UsState, *sqlgraph.CreateSpec) {
	var (
		_node = &UsState{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(usstate.Table, sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID))
	)
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := usc.mutation.CreatedAt(); ok {
		_spec.SetField(usstate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := usc.mutation.UpdatedAt(); ok {
		_spec.SetField(usstate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := usc.mutation.Name(); ok {
		_spec.SetField(usstate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := usc.mutation.Abbreviation(); ok {
		_spec.SetField(usstate.FieldAbbreviation, field.TypeString, value)
		_node.Abbreviation = value
	}
	if value, ok := usc.mutation.CountryName(); ok {
		_spec.SetField(usstate.FieldCountryName, field.TypeString, value)
		_node.CountryName = value
	}
	if value, ok := usc.mutation.CountryIso3(); ok {
		_spec.SetField(usstate.FieldCountryIso3, field.TypeString, value)
		_node.CountryIso3 = value
	}
	return _node, _spec
}

// UsStateCreateBulk is the builder for creating many UsState entities in bulk.
type UsStateCreateBulk struct {
	config
	err      error
	builders []*UsStateCreate
}

// Save creates the UsState entities in the database.
func (uscb *UsStateCreateBulk) Save(ctx context.Context) ([]*UsState, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UsState, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UsStateCreateBulk) SaveX(ctx context.Context) []*UsState {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UsStateCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UsStateCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
