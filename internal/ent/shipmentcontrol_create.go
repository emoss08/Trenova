// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/shipmentcontrol"
	"github.com/google/uuid"
)

// ShipmentControlCreate is the builder for creating a ShipmentControl entity.
type ShipmentControlCreate struct {
	config
	mutation *ShipmentControlMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (scc *ShipmentControlCreate) SetCreatedAt(t time.Time) *ShipmentControlCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableCreatedAt(t *time.Time) *ShipmentControlCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdatedAt sets the "updated_at" field.
func (scc *ShipmentControlCreate) SetUpdatedAt(t time.Time) *ShipmentControlCreate {
	scc.mutation.SetUpdatedAt(t)
	return scc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableUpdatedAt(t *time.Time) *ShipmentControlCreate {
	if t != nil {
		scc.SetUpdatedAt(*t)
	}
	return scc
}

// SetAutoRateShipment sets the "auto_rate_shipment" field.
func (scc *ShipmentControlCreate) SetAutoRateShipment(b bool) *ShipmentControlCreate {
	scc.mutation.SetAutoRateShipment(b)
	return scc
}

// SetNillableAutoRateShipment sets the "auto_rate_shipment" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableAutoRateShipment(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetAutoRateShipment(*b)
	}
	return scc
}

// SetCalculateDistance sets the "calculate_distance" field.
func (scc *ShipmentControlCreate) SetCalculateDistance(b bool) *ShipmentControlCreate {
	scc.mutation.SetCalculateDistance(b)
	return scc
}

// SetNillableCalculateDistance sets the "calculate_distance" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableCalculateDistance(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetCalculateDistance(*b)
	}
	return scc
}

// SetEnforceRevCode sets the "enforce_rev_code" field.
func (scc *ShipmentControlCreate) SetEnforceRevCode(b bool) *ShipmentControlCreate {
	scc.mutation.SetEnforceRevCode(b)
	return scc
}

// SetNillableEnforceRevCode sets the "enforce_rev_code" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableEnforceRevCode(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetEnforceRevCode(*b)
	}
	return scc
}

// SetEnforceVoidedComm sets the "enforce_voided_comm" field.
func (scc *ShipmentControlCreate) SetEnforceVoidedComm(b bool) *ShipmentControlCreate {
	scc.mutation.SetEnforceVoidedComm(b)
	return scc
}

// SetNillableEnforceVoidedComm sets the "enforce_voided_comm" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableEnforceVoidedComm(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetEnforceVoidedComm(*b)
	}
	return scc
}

// SetGenerateRoutes sets the "generate_routes" field.
func (scc *ShipmentControlCreate) SetGenerateRoutes(b bool) *ShipmentControlCreate {
	scc.mutation.SetGenerateRoutes(b)
	return scc
}

// SetNillableGenerateRoutes sets the "generate_routes" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableGenerateRoutes(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetGenerateRoutes(*b)
	}
	return scc
}

// SetEnforceCommodity sets the "enforce_commodity" field.
func (scc *ShipmentControlCreate) SetEnforceCommodity(b bool) *ShipmentControlCreate {
	scc.mutation.SetEnforceCommodity(b)
	return scc
}

// SetNillableEnforceCommodity sets the "enforce_commodity" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableEnforceCommodity(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetEnforceCommodity(*b)
	}
	return scc
}

// SetAutoSequenceStops sets the "auto_sequence_stops" field.
func (scc *ShipmentControlCreate) SetAutoSequenceStops(b bool) *ShipmentControlCreate {
	scc.mutation.SetAutoSequenceStops(b)
	return scc
}

// SetNillableAutoSequenceStops sets the "auto_sequence_stops" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableAutoSequenceStops(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetAutoSequenceStops(*b)
	}
	return scc
}

// SetAutoShipmentTotal sets the "auto_shipment_total" field.
func (scc *ShipmentControlCreate) SetAutoShipmentTotal(b bool) *ShipmentControlCreate {
	scc.mutation.SetAutoShipmentTotal(b)
	return scc
}

// SetNillableAutoShipmentTotal sets the "auto_shipment_total" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableAutoShipmentTotal(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetAutoShipmentTotal(*b)
	}
	return scc
}

// SetEnforceOriginDestination sets the "enforce_origin_destination" field.
func (scc *ShipmentControlCreate) SetEnforceOriginDestination(b bool) *ShipmentControlCreate {
	scc.mutation.SetEnforceOriginDestination(b)
	return scc
}

// SetNillableEnforceOriginDestination sets the "enforce_origin_destination" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableEnforceOriginDestination(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetEnforceOriginDestination(*b)
	}
	return scc
}

// SetCheckForDuplicateBol sets the "check_for_duplicate_bol" field.
func (scc *ShipmentControlCreate) SetCheckForDuplicateBol(b bool) *ShipmentControlCreate {
	scc.mutation.SetCheckForDuplicateBol(b)
	return scc
}

// SetNillableCheckForDuplicateBol sets the "check_for_duplicate_bol" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableCheckForDuplicateBol(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetCheckForDuplicateBol(*b)
	}
	return scc
}

// SetSendPlacardInfo sets the "send_placard_info" field.
func (scc *ShipmentControlCreate) SetSendPlacardInfo(b bool) *ShipmentControlCreate {
	scc.mutation.SetSendPlacardInfo(b)
	return scc
}

// SetNillableSendPlacardInfo sets the "send_placard_info" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableSendPlacardInfo(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetSendPlacardInfo(*b)
	}
	return scc
}

// SetEnforceHazmatSegRules sets the "enforce_hazmat_seg_rules" field.
func (scc *ShipmentControlCreate) SetEnforceHazmatSegRules(b bool) *ShipmentControlCreate {
	scc.mutation.SetEnforceHazmatSegRules(b)
	return scc
}

// SetNillableEnforceHazmatSegRules sets the "enforce_hazmat_seg_rules" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableEnforceHazmatSegRules(b *bool) *ShipmentControlCreate {
	if b != nil {
		scc.SetEnforceHazmatSegRules(*b)
	}
	return scc
}

// SetID sets the "id" field.
func (scc *ShipmentControlCreate) SetID(u uuid.UUID) *ShipmentControlCreate {
	scc.mutation.SetID(u)
	return scc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (scc *ShipmentControlCreate) SetNillableID(u *uuid.UUID) *ShipmentControlCreate {
	if u != nil {
		scc.SetID(*u)
	}
	return scc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (scc *ShipmentControlCreate) SetOrganizationID(id uuid.UUID) *ShipmentControlCreate {
	scc.mutation.SetOrganizationID(id)
	return scc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (scc *ShipmentControlCreate) SetOrganization(o *Organization) *ShipmentControlCreate {
	return scc.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (scc *ShipmentControlCreate) SetBusinessUnitID(id uuid.UUID) *ShipmentControlCreate {
	scc.mutation.SetBusinessUnitID(id)
	return scc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (scc *ShipmentControlCreate) SetBusinessUnit(b *BusinessUnit) *ShipmentControlCreate {
	return scc.SetBusinessUnitID(b.ID)
}

// Mutation returns the ShipmentControlMutation object of the builder.
func (scc *ShipmentControlCreate) Mutation() *ShipmentControlMutation {
	return scc.mutation
}

// Save creates the ShipmentControl in the database.
func (scc *ShipmentControlCreate) Save(ctx context.Context) (*ShipmentControl, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ShipmentControlCreate) SaveX(ctx context.Context) *ShipmentControl {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ShipmentControlCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ShipmentControlCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *ShipmentControlCreate) defaults() {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := shipmentcontrol.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		v := shipmentcontrol.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scc.mutation.AutoRateShipment(); !ok {
		v := shipmentcontrol.DefaultAutoRateShipment
		scc.mutation.SetAutoRateShipment(v)
	}
	if _, ok := scc.mutation.CalculateDistance(); !ok {
		v := shipmentcontrol.DefaultCalculateDistance
		scc.mutation.SetCalculateDistance(v)
	}
	if _, ok := scc.mutation.EnforceRevCode(); !ok {
		v := shipmentcontrol.DefaultEnforceRevCode
		scc.mutation.SetEnforceRevCode(v)
	}
	if _, ok := scc.mutation.EnforceVoidedComm(); !ok {
		v := shipmentcontrol.DefaultEnforceVoidedComm
		scc.mutation.SetEnforceVoidedComm(v)
	}
	if _, ok := scc.mutation.GenerateRoutes(); !ok {
		v := shipmentcontrol.DefaultGenerateRoutes
		scc.mutation.SetGenerateRoutes(v)
	}
	if _, ok := scc.mutation.EnforceCommodity(); !ok {
		v := shipmentcontrol.DefaultEnforceCommodity
		scc.mutation.SetEnforceCommodity(v)
	}
	if _, ok := scc.mutation.AutoSequenceStops(); !ok {
		v := shipmentcontrol.DefaultAutoSequenceStops
		scc.mutation.SetAutoSequenceStops(v)
	}
	if _, ok := scc.mutation.AutoShipmentTotal(); !ok {
		v := shipmentcontrol.DefaultAutoShipmentTotal
		scc.mutation.SetAutoShipmentTotal(v)
	}
	if _, ok := scc.mutation.EnforceOriginDestination(); !ok {
		v := shipmentcontrol.DefaultEnforceOriginDestination
		scc.mutation.SetEnforceOriginDestination(v)
	}
	if _, ok := scc.mutation.CheckForDuplicateBol(); !ok {
		v := shipmentcontrol.DefaultCheckForDuplicateBol
		scc.mutation.SetCheckForDuplicateBol(v)
	}
	if _, ok := scc.mutation.SendPlacardInfo(); !ok {
		v := shipmentcontrol.DefaultSendPlacardInfo
		scc.mutation.SetSendPlacardInfo(v)
	}
	if _, ok := scc.mutation.EnforceHazmatSegRules(); !ok {
		v := shipmentcontrol.DefaultEnforceHazmatSegRules
		scc.mutation.SetEnforceHazmatSegRules(v)
	}
	if _, ok := scc.mutation.ID(); !ok {
		v := shipmentcontrol.DefaultID()
		scc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ShipmentControlCreate) check() error {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ShipmentControl.created_at"`)}
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ShipmentControl.updated_at"`)}
	}
	if _, ok := scc.mutation.AutoRateShipment(); !ok {
		return &ValidationError{Name: "auto_rate_shipment", err: errors.New(`ent: missing required field "ShipmentControl.auto_rate_shipment"`)}
	}
	if _, ok := scc.mutation.CalculateDistance(); !ok {
		return &ValidationError{Name: "calculate_distance", err: errors.New(`ent: missing required field "ShipmentControl.calculate_distance"`)}
	}
	if _, ok := scc.mutation.EnforceRevCode(); !ok {
		return &ValidationError{Name: "enforce_rev_code", err: errors.New(`ent: missing required field "ShipmentControl.enforce_rev_code"`)}
	}
	if _, ok := scc.mutation.EnforceVoidedComm(); !ok {
		return &ValidationError{Name: "enforce_voided_comm", err: errors.New(`ent: missing required field "ShipmentControl.enforce_voided_comm"`)}
	}
	if _, ok := scc.mutation.GenerateRoutes(); !ok {
		return &ValidationError{Name: "generate_routes", err: errors.New(`ent: missing required field "ShipmentControl.generate_routes"`)}
	}
	if _, ok := scc.mutation.EnforceCommodity(); !ok {
		return &ValidationError{Name: "enforce_commodity", err: errors.New(`ent: missing required field "ShipmentControl.enforce_commodity"`)}
	}
	if _, ok := scc.mutation.AutoSequenceStops(); !ok {
		return &ValidationError{Name: "auto_sequence_stops", err: errors.New(`ent: missing required field "ShipmentControl.auto_sequence_stops"`)}
	}
	if _, ok := scc.mutation.AutoShipmentTotal(); !ok {
		return &ValidationError{Name: "auto_shipment_total", err: errors.New(`ent: missing required field "ShipmentControl.auto_shipment_total"`)}
	}
	if _, ok := scc.mutation.EnforceOriginDestination(); !ok {
		return &ValidationError{Name: "enforce_origin_destination", err: errors.New(`ent: missing required field "ShipmentControl.enforce_origin_destination"`)}
	}
	if _, ok := scc.mutation.CheckForDuplicateBol(); !ok {
		return &ValidationError{Name: "check_for_duplicate_bol", err: errors.New(`ent: missing required field "ShipmentControl.check_for_duplicate_bol"`)}
	}
	if _, ok := scc.mutation.SendPlacardInfo(); !ok {
		return &ValidationError{Name: "send_placard_info", err: errors.New(`ent: missing required field "ShipmentControl.send_placard_info"`)}
	}
	if _, ok := scc.mutation.EnforceHazmatSegRules(); !ok {
		return &ValidationError{Name: "enforce_hazmat_seg_rules", err: errors.New(`ent: missing required field "ShipmentControl.enforce_hazmat_seg_rules"`)}
	}
	if _, ok := scc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "ShipmentControl.organization"`)}
	}
	if _, ok := scc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "ShipmentControl.business_unit"`)}
	}
	return nil
}

func (scc *ShipmentControlCreate) sqlSave(ctx context.Context) (*ShipmentControl, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *ShipmentControlCreate) createSpec() (*ShipmentControl, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentControl{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentcontrol.Table, sqlgraph.NewFieldSpec(shipmentcontrol.FieldID, field.TypeUUID))
	)
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.SetField(shipmentcontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := scc.mutation.AutoRateShipment(); ok {
		_spec.SetField(shipmentcontrol.FieldAutoRateShipment, field.TypeBool, value)
		_node.AutoRateShipment = value
	}
	if value, ok := scc.mutation.CalculateDistance(); ok {
		_spec.SetField(shipmentcontrol.FieldCalculateDistance, field.TypeBool, value)
		_node.CalculateDistance = value
	}
	if value, ok := scc.mutation.EnforceRevCode(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceRevCode, field.TypeBool, value)
		_node.EnforceRevCode = value
	}
	if value, ok := scc.mutation.EnforceVoidedComm(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceVoidedComm, field.TypeBool, value)
		_node.EnforceVoidedComm = value
	}
	if value, ok := scc.mutation.GenerateRoutes(); ok {
		_spec.SetField(shipmentcontrol.FieldGenerateRoutes, field.TypeBool, value)
		_node.GenerateRoutes = value
	}
	if value, ok := scc.mutation.EnforceCommodity(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceCommodity, field.TypeBool, value)
		_node.EnforceCommodity = value
	}
	if value, ok := scc.mutation.AutoSequenceStops(); ok {
		_spec.SetField(shipmentcontrol.FieldAutoSequenceStops, field.TypeBool, value)
		_node.AutoSequenceStops = value
	}
	if value, ok := scc.mutation.AutoShipmentTotal(); ok {
		_spec.SetField(shipmentcontrol.FieldAutoShipmentTotal, field.TypeBool, value)
		_node.AutoShipmentTotal = value
	}
	if value, ok := scc.mutation.EnforceOriginDestination(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceOriginDestination, field.TypeBool, value)
		_node.EnforceOriginDestination = value
	}
	if value, ok := scc.mutation.CheckForDuplicateBol(); ok {
		_spec.SetField(shipmentcontrol.FieldCheckForDuplicateBol, field.TypeBool, value)
		_node.CheckForDuplicateBol = value
	}
	if value, ok := scc.mutation.SendPlacardInfo(); ok {
		_spec.SetField(shipmentcontrol.FieldSendPlacardInfo, field.TypeBool, value)
		_node.SendPlacardInfo = value
	}
	if value, ok := scc.mutation.EnforceHazmatSegRules(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceHazmatSegRules, field.TypeBool, value)
		_node.EnforceHazmatSegRules = value
	}
	if nodes := scc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentcontrol.OrganizationTable,
			Columns: []string{shipmentcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentcontrol.BusinessUnitTable,
			Columns: []string{shipmentcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_unit_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShipmentControlCreateBulk is the builder for creating many ShipmentControl entities in bulk.
type ShipmentControlCreateBulk struct {
	config
	err      error
	builders []*ShipmentControlCreate
}

// Save creates the ShipmentControl entities in the database.
func (sccb *ShipmentControlCreateBulk) Save(ctx context.Context) ([]*ShipmentControl, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ShipmentControl, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ShipmentControlCreateBulk) SaveX(ctx context.Context) []*ShipmentControl {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ShipmentControlCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ShipmentControlCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
