// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/shipmenttype"
	"github.com/google/uuid"
)

// ShipmentTypeUpdate is the builder for updating ShipmentType entities.
type ShipmentTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *ShipmentTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShipmentTypeUpdate builder.
func (stu *ShipmentTypeUpdate) Where(ps ...predicate.ShipmentType) *ShipmentTypeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetOrganizationID sets the "organization_id" field.
func (stu *ShipmentTypeUpdate) SetOrganizationID(u uuid.UUID) *ShipmentTypeUpdate {
	stu.mutation.SetOrganizationID(u)
	return stu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableOrganizationID(u *uuid.UUID) *ShipmentTypeUpdate {
	if u != nil {
		stu.SetOrganizationID(*u)
	}
	return stu
}

// SetUpdatedAt sets the "updated_at" field.
func (stu *ShipmentTypeUpdate) SetUpdatedAt(t time.Time) *ShipmentTypeUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// SetVersion sets the "version" field.
func (stu *ShipmentTypeUpdate) SetVersion(i int) *ShipmentTypeUpdate {
	stu.mutation.ResetVersion()
	stu.mutation.SetVersion(i)
	return stu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableVersion(i *int) *ShipmentTypeUpdate {
	if i != nil {
		stu.SetVersion(*i)
	}
	return stu
}

// AddVersion adds i to the "version" field.
func (stu *ShipmentTypeUpdate) AddVersion(i int) *ShipmentTypeUpdate {
	stu.mutation.AddVersion(i)
	return stu
}

// SetStatus sets the "status" field.
func (stu *ShipmentTypeUpdate) SetStatus(s shipmenttype.Status) *ShipmentTypeUpdate {
	stu.mutation.SetStatus(s)
	return stu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableStatus(s *shipmenttype.Status) *ShipmentTypeUpdate {
	if s != nil {
		stu.SetStatus(*s)
	}
	return stu
}

// SetCode sets the "code" field.
func (stu *ShipmentTypeUpdate) SetCode(s string) *ShipmentTypeUpdate {
	stu.mutation.SetCode(s)
	return stu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableCode(s *string) *ShipmentTypeUpdate {
	if s != nil {
		stu.SetCode(*s)
	}
	return stu
}

// SetDescription sets the "description" field.
func (stu *ShipmentTypeUpdate) SetDescription(s string) *ShipmentTypeUpdate {
	stu.mutation.SetDescription(s)
	return stu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableDescription(s *string) *ShipmentTypeUpdate {
	if s != nil {
		stu.SetDescription(*s)
	}
	return stu
}

// ClearDescription clears the value of the "description" field.
func (stu *ShipmentTypeUpdate) ClearDescription() *ShipmentTypeUpdate {
	stu.mutation.ClearDescription()
	return stu
}

// SetColor sets the "color" field.
func (stu *ShipmentTypeUpdate) SetColor(s string) *ShipmentTypeUpdate {
	stu.mutation.SetColor(s)
	return stu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableColor(s *string) *ShipmentTypeUpdate {
	if s != nil {
		stu.SetColor(*s)
	}
	return stu
}

// ClearColor clears the value of the "color" field.
func (stu *ShipmentTypeUpdate) ClearColor() *ShipmentTypeUpdate {
	stu.mutation.ClearColor()
	return stu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (stu *ShipmentTypeUpdate) SetOrganization(o *Organization) *ShipmentTypeUpdate {
	return stu.SetOrganizationID(o.ID)
}

// Mutation returns the ShipmentTypeMutation object of the builder.
func (stu *ShipmentTypeUpdate) Mutation() *ShipmentTypeMutation {
	return stu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (stu *ShipmentTypeUpdate) ClearOrganization() *ShipmentTypeUpdate {
	stu.mutation.ClearOrganization()
	return stu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ShipmentTypeUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ShipmentTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ShipmentTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ShipmentTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *ShipmentTypeUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		v := shipmenttype.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ShipmentTypeUpdate) check() error {
	if v, ok := stu.mutation.Status(); ok {
		if err := shipmenttype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentType.status": %w`, err)}
		}
	}
	if v, ok := stu.mutation.Code(); ok {
		if err := shipmenttype.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "ShipmentType.code": %w`, err)}
		}
	}
	if _, ok := stu.mutation.BusinessUnitID(); stu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentType.business_unit"`)
	}
	if _, ok := stu.mutation.OrganizationID(); stu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentType.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stu *ShipmentTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentTypeUpdate {
	stu.modifiers = append(stu.modifiers, modifiers...)
	return stu
}

func (stu *ShipmentTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmenttype.Table, shipmenttype.Columns, sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmenttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := stu.mutation.Version(); ok {
		_spec.SetField(shipmenttype.FieldVersion, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedVersion(); ok {
		_spec.AddField(shipmenttype.FieldVersion, field.TypeInt, value)
	}
	if value, ok := stu.mutation.Status(); ok {
		_spec.SetField(shipmenttype.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := stu.mutation.Code(); ok {
		_spec.SetField(shipmenttype.FieldCode, field.TypeString, value)
	}
	if value, ok := stu.mutation.Description(); ok {
		_spec.SetField(shipmenttype.FieldDescription, field.TypeString, value)
	}
	if stu.mutation.DescriptionCleared() {
		_spec.ClearField(shipmenttype.FieldDescription, field.TypeString)
	}
	if value, ok := stu.mutation.Color(); ok {
		_spec.SetField(shipmenttype.FieldColor, field.TypeString, value)
	}
	if stu.mutation.ColorCleared() {
		_spec.ClearField(shipmenttype.FieldColor, field.TypeString)
	}
	if stu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenttype.OrganizationTable,
			Columns: []string{shipmenttype.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenttype.OrganizationTable,
			Columns: []string{shipmenttype.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(stu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmenttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// ShipmentTypeUpdateOne is the builder for updating a single ShipmentType entity.
type ShipmentTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShipmentTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (stuo *ShipmentTypeUpdateOne) SetOrganizationID(u uuid.UUID) *ShipmentTypeUpdateOne {
	stuo.mutation.SetOrganizationID(u)
	return stuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *ShipmentTypeUpdateOne {
	if u != nil {
		stuo.SetOrganizationID(*u)
	}
	return stuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stuo *ShipmentTypeUpdateOne) SetUpdatedAt(t time.Time) *ShipmentTypeUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// SetVersion sets the "version" field.
func (stuo *ShipmentTypeUpdateOne) SetVersion(i int) *ShipmentTypeUpdateOne {
	stuo.mutation.ResetVersion()
	stuo.mutation.SetVersion(i)
	return stuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableVersion(i *int) *ShipmentTypeUpdateOne {
	if i != nil {
		stuo.SetVersion(*i)
	}
	return stuo
}

// AddVersion adds i to the "version" field.
func (stuo *ShipmentTypeUpdateOne) AddVersion(i int) *ShipmentTypeUpdateOne {
	stuo.mutation.AddVersion(i)
	return stuo
}

// SetStatus sets the "status" field.
func (stuo *ShipmentTypeUpdateOne) SetStatus(s shipmenttype.Status) *ShipmentTypeUpdateOne {
	stuo.mutation.SetStatus(s)
	return stuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableStatus(s *shipmenttype.Status) *ShipmentTypeUpdateOne {
	if s != nil {
		stuo.SetStatus(*s)
	}
	return stuo
}

// SetCode sets the "code" field.
func (stuo *ShipmentTypeUpdateOne) SetCode(s string) *ShipmentTypeUpdateOne {
	stuo.mutation.SetCode(s)
	return stuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableCode(s *string) *ShipmentTypeUpdateOne {
	if s != nil {
		stuo.SetCode(*s)
	}
	return stuo
}

// SetDescription sets the "description" field.
func (stuo *ShipmentTypeUpdateOne) SetDescription(s string) *ShipmentTypeUpdateOne {
	stuo.mutation.SetDescription(s)
	return stuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableDescription(s *string) *ShipmentTypeUpdateOne {
	if s != nil {
		stuo.SetDescription(*s)
	}
	return stuo
}

// ClearDescription clears the value of the "description" field.
func (stuo *ShipmentTypeUpdateOne) ClearDescription() *ShipmentTypeUpdateOne {
	stuo.mutation.ClearDescription()
	return stuo
}

// SetColor sets the "color" field.
func (stuo *ShipmentTypeUpdateOne) SetColor(s string) *ShipmentTypeUpdateOne {
	stuo.mutation.SetColor(s)
	return stuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableColor(s *string) *ShipmentTypeUpdateOne {
	if s != nil {
		stuo.SetColor(*s)
	}
	return stuo
}

// ClearColor clears the value of the "color" field.
func (stuo *ShipmentTypeUpdateOne) ClearColor() *ShipmentTypeUpdateOne {
	stuo.mutation.ClearColor()
	return stuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (stuo *ShipmentTypeUpdateOne) SetOrganization(o *Organization) *ShipmentTypeUpdateOne {
	return stuo.SetOrganizationID(o.ID)
}

// Mutation returns the ShipmentTypeMutation object of the builder.
func (stuo *ShipmentTypeUpdateOne) Mutation() *ShipmentTypeMutation {
	return stuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (stuo *ShipmentTypeUpdateOne) ClearOrganization() *ShipmentTypeUpdateOne {
	stuo.mutation.ClearOrganization()
	return stuo
}

// Where appends a list predicates to the ShipmentTypeUpdate builder.
func (stuo *ShipmentTypeUpdateOne) Where(ps ...predicate.ShipmentType) *ShipmentTypeUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ShipmentTypeUpdateOne) Select(field string, fields ...string) *ShipmentTypeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ShipmentType entity.
func (stuo *ShipmentTypeUpdateOne) Save(ctx context.Context) (*ShipmentType, error) {
	stuo.defaults()
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ShipmentTypeUpdateOne) SaveX(ctx context.Context) *ShipmentType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ShipmentTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ShipmentTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *ShipmentTypeUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		v := shipmenttype.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ShipmentTypeUpdateOne) check() error {
	if v, ok := stuo.mutation.Status(); ok {
		if err := shipmenttype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentType.status": %w`, err)}
		}
	}
	if v, ok := stuo.mutation.Code(); ok {
		if err := shipmenttype.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "ShipmentType.code": %w`, err)}
		}
	}
	if _, ok := stuo.mutation.BusinessUnitID(); stuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentType.business_unit"`)
	}
	if _, ok := stuo.mutation.OrganizationID(); stuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentType.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stuo *ShipmentTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentTypeUpdateOne {
	stuo.modifiers = append(stuo.modifiers, modifiers...)
	return stuo
}

func (stuo *ShipmentTypeUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentType, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmenttype.Table, shipmenttype.Columns, sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmenttype.FieldID)
		for _, f := range fields {
			if !shipmenttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmenttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmenttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := stuo.mutation.Version(); ok {
		_spec.SetField(shipmenttype.FieldVersion, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedVersion(); ok {
		_spec.AddField(shipmenttype.FieldVersion, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.Status(); ok {
		_spec.SetField(shipmenttype.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := stuo.mutation.Code(); ok {
		_spec.SetField(shipmenttype.FieldCode, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Description(); ok {
		_spec.SetField(shipmenttype.FieldDescription, field.TypeString, value)
	}
	if stuo.mutation.DescriptionCleared() {
		_spec.ClearField(shipmenttype.FieldDescription, field.TypeString)
	}
	if value, ok := stuo.mutation.Color(); ok {
		_spec.SetField(shipmenttype.FieldColor, field.TypeString, value)
	}
	if stuo.mutation.ColorCleared() {
		_spec.ClearField(shipmenttype.FieldColor, field.TypeString)
	}
	if stuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenttype.OrganizationTable,
			Columns: []string{shipmenttype.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenttype.OrganizationTable,
			Columns: []string{shipmenttype.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(stuo.modifiers...)
	_node = &ShipmentType{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmenttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
