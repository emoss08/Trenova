// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/userreport"
	"github.com/google/uuid"
)

// UserReportUpdate is the builder for updating UserReport entities.
type UserReportUpdate struct {
	config
	hooks     []Hook
	mutation  *UserReportMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserReportUpdate builder.
func (uru *UserReportUpdate) Where(ps ...predicate.UserReport) *UserReportUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// SetOrganizationID sets the "organization_id" field.
func (uru *UserReportUpdate) SetOrganizationID(u uuid.UUID) *UserReportUpdate {
	uru.mutation.SetOrganizationID(u)
	return uru
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (uru *UserReportUpdate) SetNillableOrganizationID(u *uuid.UUID) *UserReportUpdate {
	if u != nil {
		uru.SetOrganizationID(*u)
	}
	return uru
}

// SetUpdatedAt sets the "updated_at" field.
func (uru *UserReportUpdate) SetUpdatedAt(t time.Time) *UserReportUpdate {
	uru.mutation.SetUpdatedAt(t)
	return uru
}

// SetVersion sets the "version" field.
func (uru *UserReportUpdate) SetVersion(i int) *UserReportUpdate {
	uru.mutation.ResetVersion()
	uru.mutation.SetVersion(i)
	return uru
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (uru *UserReportUpdate) SetNillableVersion(i *int) *UserReportUpdate {
	if i != nil {
		uru.SetVersion(*i)
	}
	return uru
}

// AddVersion adds i to the "version" field.
func (uru *UserReportUpdate) AddVersion(i int) *UserReportUpdate {
	uru.mutation.AddVersion(i)
	return uru
}

// SetReportURL sets the "report_url" field.
func (uru *UserReportUpdate) SetReportURL(s string) *UserReportUpdate {
	uru.mutation.SetReportURL(s)
	return uru
}

// SetNillableReportURL sets the "report_url" field if the given value is not nil.
func (uru *UserReportUpdate) SetNillableReportURL(s *string) *UserReportUpdate {
	if s != nil {
		uru.SetReportURL(*s)
	}
	return uru
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (uru *UserReportUpdate) SetOrganization(o *Organization) *UserReportUpdate {
	return uru.SetOrganizationID(o.ID)
}

// Mutation returns the UserReportMutation object of the builder.
func (uru *UserReportUpdate) Mutation() *UserReportMutation {
	return uru.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (uru *UserReportUpdate) ClearOrganization() *UserReportUpdate {
	uru.mutation.ClearOrganization()
	return uru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UserReportUpdate) Save(ctx context.Context) (int, error) {
	uru.defaults()
	return withHooks(ctx, uru.sqlSave, uru.mutation, uru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UserReportUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UserReportUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UserReportUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uru *UserReportUpdate) defaults() {
	if _, ok := uru.mutation.UpdatedAt(); !ok {
		v := userreport.UpdateDefaultUpdatedAt()
		uru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uru *UserReportUpdate) check() error {
	if v, ok := uru.mutation.ReportURL(); ok {
		if err := userreport.ReportURLValidator(v); err != nil {
			return &ValidationError{Name: "report_url", err: fmt.Errorf(`ent: validator failed for field "UserReport.report_url": %w`, err)}
		}
	}
	if _, ok := uru.mutation.BusinessUnitID(); uru.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserReport.business_unit"`)
	}
	if _, ok := uru.mutation.OrganizationID(); uru.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserReport.organization"`)
	}
	if _, ok := uru.mutation.UserID(); uru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserReport.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uru *UserReportUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserReportUpdate {
	uru.modifiers = append(uru.modifiers, modifiers...)
	return uru
}

func (uru *UserReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userreport.Table, userreport.Columns, sqlgraph.NewFieldSpec(userreport.FieldID, field.TypeUUID))
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uru.mutation.UpdatedAt(); ok {
		_spec.SetField(userreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uru.mutation.Version(); ok {
		_spec.SetField(userreport.FieldVersion, field.TypeInt, value)
	}
	if value, ok := uru.mutation.AddedVersion(); ok {
		_spec.AddField(userreport.FieldVersion, field.TypeInt, value)
	}
	if value, ok := uru.mutation.ReportURL(); ok {
		_spec.SetField(userreport.FieldReportURL, field.TypeString, value)
	}
	if uru.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreport.OrganizationTable,
			Columns: []string{userreport.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uru.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreport.OrganizationTable,
			Columns: []string{userreport.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uru.mutation.done = true
	return n, nil
}

// UserReportUpdateOne is the builder for updating a single UserReport entity.
type UserReportUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserReportMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (uruo *UserReportUpdateOne) SetOrganizationID(u uuid.UUID) *UserReportUpdateOne {
	uruo.mutation.SetOrganizationID(u)
	return uruo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (uruo *UserReportUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *UserReportUpdateOne {
	if u != nil {
		uruo.SetOrganizationID(*u)
	}
	return uruo
}

// SetUpdatedAt sets the "updated_at" field.
func (uruo *UserReportUpdateOne) SetUpdatedAt(t time.Time) *UserReportUpdateOne {
	uruo.mutation.SetUpdatedAt(t)
	return uruo
}

// SetVersion sets the "version" field.
func (uruo *UserReportUpdateOne) SetVersion(i int) *UserReportUpdateOne {
	uruo.mutation.ResetVersion()
	uruo.mutation.SetVersion(i)
	return uruo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (uruo *UserReportUpdateOne) SetNillableVersion(i *int) *UserReportUpdateOne {
	if i != nil {
		uruo.SetVersion(*i)
	}
	return uruo
}

// AddVersion adds i to the "version" field.
func (uruo *UserReportUpdateOne) AddVersion(i int) *UserReportUpdateOne {
	uruo.mutation.AddVersion(i)
	return uruo
}

// SetReportURL sets the "report_url" field.
func (uruo *UserReportUpdateOne) SetReportURL(s string) *UserReportUpdateOne {
	uruo.mutation.SetReportURL(s)
	return uruo
}

// SetNillableReportURL sets the "report_url" field if the given value is not nil.
func (uruo *UserReportUpdateOne) SetNillableReportURL(s *string) *UserReportUpdateOne {
	if s != nil {
		uruo.SetReportURL(*s)
	}
	return uruo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (uruo *UserReportUpdateOne) SetOrganization(o *Organization) *UserReportUpdateOne {
	return uruo.SetOrganizationID(o.ID)
}

// Mutation returns the UserReportMutation object of the builder.
func (uruo *UserReportUpdateOne) Mutation() *UserReportMutation {
	return uruo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (uruo *UserReportUpdateOne) ClearOrganization() *UserReportUpdateOne {
	uruo.mutation.ClearOrganization()
	return uruo
}

// Where appends a list predicates to the UserReportUpdate builder.
func (uruo *UserReportUpdateOne) Where(ps ...predicate.UserReport) *UserReportUpdateOne {
	uruo.mutation.Where(ps...)
	return uruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UserReportUpdateOne) Select(field string, fields ...string) *UserReportUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UserReport entity.
func (uruo *UserReportUpdateOne) Save(ctx context.Context) (*UserReport, error) {
	uruo.defaults()
	return withHooks(ctx, uruo.sqlSave, uruo.mutation, uruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UserReportUpdateOne) SaveX(ctx context.Context) *UserReport {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UserReportUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UserReportUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uruo *UserReportUpdateOne) defaults() {
	if _, ok := uruo.mutation.UpdatedAt(); !ok {
		v := userreport.UpdateDefaultUpdatedAt()
		uruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uruo *UserReportUpdateOne) check() error {
	if v, ok := uruo.mutation.ReportURL(); ok {
		if err := userreport.ReportURLValidator(v); err != nil {
			return &ValidationError{Name: "report_url", err: fmt.Errorf(`ent: validator failed for field "UserReport.report_url": %w`, err)}
		}
	}
	if _, ok := uruo.mutation.BusinessUnitID(); uruo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserReport.business_unit"`)
	}
	if _, ok := uruo.mutation.OrganizationID(); uruo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserReport.organization"`)
	}
	if _, ok := uruo.mutation.UserID(); uruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserReport.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uruo *UserReportUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserReportUpdateOne {
	uruo.modifiers = append(uruo.modifiers, modifiers...)
	return uruo
}

func (uruo *UserReportUpdateOne) sqlSave(ctx context.Context) (_node *UserReport, err error) {
	if err := uruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userreport.Table, userreport.Columns, sqlgraph.NewFieldSpec(userreport.FieldID, field.TypeUUID))
	id, ok := uruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userreport.FieldID)
		for _, f := range fields {
			if !userreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uruo.mutation.UpdatedAt(); ok {
		_spec.SetField(userreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uruo.mutation.Version(); ok {
		_spec.SetField(userreport.FieldVersion, field.TypeInt, value)
	}
	if value, ok := uruo.mutation.AddedVersion(); ok {
		_spec.AddField(userreport.FieldVersion, field.TypeInt, value)
	}
	if value, ok := uruo.mutation.ReportURL(); ok {
		_spec.SetField(userreport.FieldReportURL, field.TypeString, value)
	}
	if uruo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreport.OrganizationTable,
			Columns: []string{userreport.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uruo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreport.OrganizationTable,
			Columns: []string{userreport.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uruo.modifiers...)
	_node = &UserReport{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uruo.mutation.done = true
	return _node, nil
}
