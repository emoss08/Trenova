CREATE TYPE billing_status AS ENUM(
    'Draft',
    'Billed',
    'Canceled'
);

CREATE TYPE billing_type AS ENUM(
    'Invoice',
    'CreditMemo',
    'DebitMemo'
);

--bun:split
CREATE TABLE IF NOT EXISTS "billing_logs"(
    "id" varchar(100) NOT NULL,
    "status" billing_status NOT NULL DEFAULT 'Draft',
    "organization_id" varchar(100) NOT NULL,
    "business_unit_id" varchar(100) NOT NULL,
    "shipment_id" varchar(100) NOT NULL,
    "billing_id" varchar(150) NOT NULL, -- The billing number generated by the billing system
    "billing_type" billing_type NOT NULL,
    "billing_date" bigint NOT NULL,
    -- Cancellation Related Fields
    "canceled_by_id" varchar(100),
    "canceled_at" bigint,
    "cancel_reason" varchar(100),
    -- Metadata
    "version" bigint NOT NULL DEFAULT 0,
    "created_at" bigint NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) ::bigint,
    "updated_at" bigint NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) ::bigint,
    CONSTRAINT "pk_billing_logs" PRIMARY KEY ("id", "organization_id", "business_unit_id"),
    CONSTRAINT "fk_billing_logs_shipment" FOREIGN KEY ("shipment_id", "organization_id", "business_unit_id") REFERENCES "shipments"("id", "organization_id", "business_unit_id") ON UPDATE NO ACTION ON DELETE CASCADE,
    CONSTRAINT "fk_billing_logs_canceled_by" FOREIGN KEY ("canceled_by_id") REFERENCES "users"("id") ON UPDATE NO ACTION ON DELETE SET NULL
);

--bun:split
CREATE OR REPLACE FUNCTION billing_logs_search_vector_update()
    RETURNS TRIGGER
    AS $$
BEGIN
    NEW.search_vector := setweight(to_tsvector('simple', COALESCE(NEW.billing_id, '')), 'A') || setweight(to_tsvector('simple', COALESCE(CAST(NEW.status AS text), '')), 'B') || setweight(to_tsvector('simple', COALESCE(CAST(NEW.billing_type AS text), '')), 'C');
    -- Auto-update timestamps
    NEW.updated_at := EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

--bun:split
DROP TRIGGER IF EXISTS billing_logs_search_vector_trigger ON billing_logs;

--bun:split
CREATE TRIGGER billing_logs_search_vector_trigger
    BEFORE INSERT OR UPDATE ON billing_logs
    FOR EACH ROW
    EXECUTE FUNCTION billing_logs_search_vector_update();

CREATE INDEX IF NOT EXISTS "idx_billing_logs_draft" ON "billing_logs"("status")
WHERE
    status NOT IN ('Billed', 'Canceled');

CREATE INDEX IF NOT EXISTS "idx_billing_logs_shipment" ON "billing_logs"("shipment_id");

CREATE INDEX IF NOT EXISTS "idx_billing_logs_billing_id" ON "billing_logs"("billing_id");

CREATE INDEX IF NOT EXISTS "idx_billing_logs_created_at" ON "billing_logs"("created_at", "updated_at");

ALTER TABLE billing_logs
    ALTER COLUMN organization_id SET STATISTICS 1000;

ALTER TABLE billing_logs
    ALTER COLUMN business_unit_id SET STATISTICS 1000;

CREATE INDEX IF NOT EXISTS "idx_billing_logs_trgm_billing_id" ON "billing_logs" USING gin("billing_id" gin_trgm_ops);

--bun:split
COMMENT ON TABLE billing_logs IS 'Stores billing logs for invoices, credit memos, and debit memos';

