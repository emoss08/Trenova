/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package audit

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain/permission"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// entryFieldConfig provides field configuration for Entry
type entryFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// EntryQuery provides type-safe query helpers and constants
var EntryQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		UserID         string
		BusinessUnitID string
		OrganizationID string
		Timestamp      string
		Changes        string
		PreviousState  string
		CurrentState   string
		Metadata       string
		Resource       string
		Action         string
		ResourceID     string
		CorrelationID  string
		UserAgent      string
		Comment        string
		IPAddress      string
		Category       string
		SensitiveData  string
		Critical       string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TimestampEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		TimestampNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		TimestampGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ChangesEQ              func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		ChangesNEQ             func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		ChangesIn              func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		ChangesNotIn           func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		PreviousStateEQ        func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		PreviousStateNEQ       func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		PreviousStateIn        func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		PreviousStateNotIn     func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CurrentStateEQ         func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CurrentStateNEQ        func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CurrentStateIn         func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CurrentStateNotIn      func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataEQ             func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ            func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn             func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn          func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		ResourceEQ             func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceNEQ            func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceIn             func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ResourceNotIn          func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ActionEQ               func(q *bun.SelectQuery, v permission.Action) *bun.SelectQuery
		ActionNEQ              func(q *bun.SelectQuery, v permission.Action) *bun.SelectQuery
		ActionIn               func(q *bun.SelectQuery, v []permission.Action) *bun.SelectQuery
		ActionNotIn            func(q *bun.SelectQuery, v []permission.Action) *bun.SelectQuery
		ResourceIDEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ResourceIDNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ResourceIDGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CorrelationIDNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CorrelationIDGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UserAgentNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UserAgentGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		IPAddressNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		IPAddressGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CategoryNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CategoryGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SensitiveDataEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		SensitiveDataNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		SensitiveDataIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		SensitiveDataNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CriticalEQ             func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CriticalNEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CriticalIn             func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CriticalNotIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field   func(field string, desc bool) string
		Default func() []string
	}

	// Field configuration
	FieldConfig  func() map[string]entryFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		User         string
		Organization string
		BusinessUnit string
	}
}{
	// Table and alias constants
	Table:    "audit_entries",
	Alias:    "ae",
	IDPrefix: "ae_",

	// Field names
	Field: struct {
		ID             string
		UserID         string
		BusinessUnitID string
		OrganizationID string
		Timestamp      string
		Changes        string
		PreviousState  string
		CurrentState   string
		Metadata       string
		Resource       string
		Action         string
		ResourceID     string
		CorrelationID  string
		UserAgent      string
		Comment        string
		IPAddress      string
		Category       string
		SensitiveData  string
		Critical       string
	}{
		ID:             "id",
		UserID:         "user_id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		Timestamp:      "timestamp",
		Changes:        "changes",
		PreviousState:  "previous_state",
		CurrentState:   "current_state",
		Metadata:       "metadata",
		Resource:       "resource",
		Action:         "action",
		ResourceID:     "resource_id",
		CorrelationID:  "correlation_id",
		UserAgent:      "user_agent",
		Comment:        "comment",
		IPAddress:      "ip_address",
		Category:       "category",
		SensitiveData:  "sensitive_data",
		Critical:       "critical",
	},

	// Column helpers
	Column: func(field string) string {
		return "ae." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "ae." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TimestampEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		TimestampNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		TimestampGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TimestampLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ChangesEQ              func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		ChangesNEQ             func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		ChangesIn              func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		ChangesNotIn           func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		PreviousStateEQ        func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		PreviousStateNEQ       func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		PreviousStateIn        func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		PreviousStateNotIn     func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CurrentStateEQ         func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CurrentStateNEQ        func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CurrentStateIn         func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CurrentStateNotIn      func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataEQ             func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ            func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn             func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn          func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		ResourceEQ             func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceNEQ            func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceIn             func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ResourceNotIn          func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ActionEQ               func(q *bun.SelectQuery, v permission.Action) *bun.SelectQuery
		ActionNEQ              func(q *bun.SelectQuery, v permission.Action) *bun.SelectQuery
		ActionIn               func(q *bun.SelectQuery, v []permission.Action) *bun.SelectQuery
		ActionNotIn            func(q *bun.SelectQuery, v []permission.Action) *bun.SelectQuery
		ResourceIDEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ResourceIDNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ResourceIDGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIDHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CorrelationIDNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CorrelationIDGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CorrelationIDHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UserAgentNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UserAgentGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		IPAddressNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		IPAddressGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CategoryNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CategoryGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SensitiveDataEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		SensitiveDataNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		SensitiveDataIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		SensitiveDataNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CriticalEQ             func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CriticalNEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CriticalIn             func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CriticalNotIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		Tenant                 func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.id"), bun.In(v))
		},
		UserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.user_id"), v)
		},
		UserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.user_id"), v)
		},
		UserIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.user_id"), bun.In(v))
		},
		UserIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.user_id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.organization_id"), bun.In(v))
		},
		TimestampEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.timestamp"), v)
		},
		TimestampNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.timestamp"), v)
		},
		TimestampIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.timestamp"), bun.In(v))
		},
		TimestampNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.timestamp"), bun.In(v))
		},
		TimestampGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ae.timestamp"), v)
		},
		TimestampGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ae.timestamp"), v)
		},
		TimestampLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ae.timestamp"), v)
		},
		TimestampLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ae.timestamp"), v)
		},
		ChangesEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.changes"), v)
		},
		ChangesNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.changes"), v)
		},
		ChangesIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.changes"), bun.In(v))
		},
		ChangesNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.changes"), bun.In(v))
		},
		PreviousStateEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.previous_state"), v)
		},
		PreviousStateNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.previous_state"), v)
		},
		PreviousStateIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.previous_state"), bun.In(v))
		},
		PreviousStateNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.previous_state"), bun.In(v))
		},
		CurrentStateEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.current_state"), v)
		},
		CurrentStateNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.current_state"), v)
		},
		CurrentStateIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.current_state"), bun.In(v))
		},
		CurrentStateNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.current_state"), bun.In(v))
		},
		MetadataEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.metadata"), v)
		},
		MetadataNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.metadata"), v)
		},
		MetadataIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.metadata"), bun.In(v))
		},
		MetadataNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.metadata"), bun.In(v))
		},
		ResourceEQ: func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.resource"), v)
		},
		ResourceNEQ: func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.resource"), v)
		},
		ResourceIn: func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.resource"), bun.In(v))
		},
		ResourceNotIn: func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.resource"), bun.In(v))
		},
		ActionEQ: func(q *bun.SelectQuery, v permission.Action) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.action"), v)
		},
		ActionNEQ: func(q *bun.SelectQuery, v permission.Action) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.action"), v)
		},
		ActionIn: func(q *bun.SelectQuery, v []permission.Action) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.action"), bun.In(v))
		},
		ActionNotIn: func(q *bun.SelectQuery, v []permission.Action) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.action"), bun.In(v))
		},
		ResourceIDEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.resource_id"), v)
		},
		ResourceIDNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.resource_id"), v)
		},
		ResourceIDIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.resource_id"), bun.In(v))
		},
		ResourceIDNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.resource_id"), bun.In(v))
		},
		ResourceIDGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ae.resource_id"), v)
		},
		ResourceIDGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ae.resource_id"), v)
		},
		ResourceIDLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ae.resource_id"), v)
		},
		ResourceIDLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ae.resource_id"), v)
		},
		ResourceIDContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.resource_id"), "%"+v+"%")
		},
		ResourceIDHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.resource_id"), v+"%")
		},
		ResourceIDHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.resource_id"), "%"+v)
		},
		CorrelationIDEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.correlation_id"), v)
		},
		CorrelationIDNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.correlation_id"), v)
		},
		CorrelationIDIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.correlation_id"), bun.In(v))
		},
		CorrelationIDNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.correlation_id"), bun.In(v))
		},
		CorrelationIDGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ae.correlation_id"), v)
		},
		CorrelationIDGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ae.correlation_id"), v)
		},
		CorrelationIDLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ae.correlation_id"), v)
		},
		CorrelationIDLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ae.correlation_id"), v)
		},
		CorrelationIDContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.correlation_id"), "%"+v+"%")
		},
		CorrelationIDHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.correlation_id"), v+"%")
		},
		CorrelationIDHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.correlation_id"), "%"+v)
		},
		UserAgentEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.user_agent"), v)
		},
		UserAgentNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.user_agent"), v)
		},
		UserAgentIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.user_agent"), bun.In(v))
		},
		UserAgentNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.user_agent"), bun.In(v))
		},
		UserAgentGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ae.user_agent"), v)
		},
		UserAgentGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ae.user_agent"), v)
		},
		UserAgentLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ae.user_agent"), v)
		},
		UserAgentLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ae.user_agent"), v)
		},
		UserAgentContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.user_agent"), "%"+v+"%")
		},
		UserAgentHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.user_agent"), v+"%")
		},
		UserAgentHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.user_agent"), "%"+v)
		},
		CommentEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.comment"), v)
		},
		CommentNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.comment"), v)
		},
		CommentIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.comment"), bun.In(v))
		},
		CommentNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.comment"), bun.In(v))
		},
		CommentGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ae.comment"), v)
		},
		CommentGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ae.comment"), v)
		},
		CommentLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ae.comment"), v)
		},
		CommentLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ae.comment"), v)
		},
		CommentContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.comment"), "%"+v+"%")
		},
		CommentHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.comment"), v+"%")
		},
		CommentHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.comment"), "%"+v)
		},
		IPAddressEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.ip_address"), v)
		},
		IPAddressNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.ip_address"), v)
		},
		IPAddressIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.ip_address"), bun.In(v))
		},
		IPAddressNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.ip_address"), bun.In(v))
		},
		IPAddressGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ae.ip_address"), v)
		},
		IPAddressGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ae.ip_address"), v)
		},
		IPAddressLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ae.ip_address"), v)
		},
		IPAddressLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ae.ip_address"), v)
		},
		IPAddressContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.ip_address"), "%"+v+"%")
		},
		IPAddressHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.ip_address"), v+"%")
		},
		IPAddressHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.ip_address"), "%"+v)
		},
		CategoryEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.category"), v)
		},
		CategoryNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.category"), v)
		},
		CategoryIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.category"), bun.In(v))
		},
		CategoryNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.category"), bun.In(v))
		},
		CategoryGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ae.category"), v)
		},
		CategoryGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ae.category"), v)
		},
		CategoryLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ae.category"), v)
		},
		CategoryLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ae.category"), v)
		},
		CategoryContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.category"), "%"+v+"%")
		},
		CategoryHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.category"), v+"%")
		},
		CategoryHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ae.category"), "%"+v)
		},
		SensitiveDataEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.sensitive_data"), v)
		},
		SensitiveDataNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.sensitive_data"), v)
		},
		SensitiveDataIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.sensitive_data"), bun.In(v))
		},
		SensitiveDataNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.sensitive_data"), bun.In(v))
		},
		CriticalEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ae.critical"), v)
		},
		CriticalNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ae.critical"), v)
		},
		CriticalIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ae.critical"), bun.In(v))
		},
		CriticalNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ae.critical"), bun.In(v))
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("ae.organization_id"), orgID).
				Where("? = ?", bun.Ident("ae.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field   func(field string, desc bool) string
		Default func() []string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "ae." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"ae.created_at DESC",
			}
		},
	},

	// Field configuration
	FieldConfig: func() map[string]entryFieldConfig {
		return map[string]entryFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ae.id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "ae.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ae.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ae.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"timestamp": {
				Name:       "timestamp",
				Column:     "ae.timestamp",
				Sortable:   false,
				Filterable: false,
			},
			"changes": {
				Name:       "changes",
				Column:     "ae.changes",
				Sortable:   false,
				Filterable: false,
			},
			"previous_state": {
				Name:       "previous_state",
				Column:     "ae.previous_state",
				Sortable:   false,
				Filterable: false,
			},
			"current_state": {
				Name:       "current_state",
				Column:     "ae.current_state",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "ae.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"resource": {
				Name:       "resource",
				Column:     "ae.resource",
				Sortable:   false,
				Filterable: false,
			},
			"action": {
				Name:       "action",
				Column:     "ae.action",
				Sortable:   false,
				Filterable: false,
			},
			"resource_id": {
				Name:       "resource_id",
				Column:     "ae.resource_id",
				Sortable:   false,
				Filterable: true,
			},
			"correlation_id": {
				Name:       "correlation_id",
				Column:     "ae.correlation_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_agent": {
				Name:       "user_agent",
				Column:     "ae.user_agent",
				Sortable:   false,
				Filterable: true,
			},
			"comment": {
				Name:       "comment",
				Column:     "ae.comment",
				Sortable:   false,
				Filterable: false,
			},
			"ip_address": {
				Name:       "ip_address",
				Column:     "ae.ip_address",
				Sortable:   false,
				Filterable: true,
			},
			"category": {
				Name:       "category",
				Column:     "ae.category",
				Sortable:   false,
				Filterable: true,
			},
			"sensitive_data": {
				Name:       "sensitive_data",
				Column:     "ae.sensitive_data",
				Sortable:   false,
				Filterable: false,
			},
			"critical": {
				Name:       "critical",
				Column:     "ae.critical",
				Sortable:   false,
				Filterable: false,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]entryFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ae.id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "ae.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ae.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ae.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"timestamp": {
				Name:       "timestamp",
				Column:     "ae.timestamp",
				Sortable:   false,
				Filterable: false,
			},
			"changes": {
				Name:       "changes",
				Column:     "ae.changes",
				Sortable:   false,
				Filterable: false,
			},
			"previous_state": {
				Name:       "previous_state",
				Column:     "ae.previous_state",
				Sortable:   false,
				Filterable: false,
			},
			"current_state": {
				Name:       "current_state",
				Column:     "ae.current_state",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "ae.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"resource": {
				Name:       "resource",
				Column:     "ae.resource",
				Sortable:   false,
				Filterable: false,
			},
			"action": {
				Name:       "action",
				Column:     "ae.action",
				Sortable:   false,
				Filterable: false,
			},
			"resource_id": {
				Name:       "resource_id",
				Column:     "ae.resource_id",
				Sortable:   false,
				Filterable: true,
			},
			"correlation_id": {
				Name:       "correlation_id",
				Column:     "ae.correlation_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_agent": {
				Name:       "user_agent",
				Column:     "ae.user_agent",
				Sortable:   false,
				Filterable: true,
			},
			"comment": {
				Name:       "comment",
				Column:     "ae.comment",
				Sortable:   false,
				Filterable: false,
			},
			"ip_address": {
				Name:       "ip_address",
				Column:     "ae.ip_address",
				Sortable:   false,
				Filterable: true,
			},
			"category": {
				Name:       "category",
				Column:     "ae.category",
				Sortable:   false,
				Filterable: true,
			},
			"sensitive_data": {
				Name:       "sensitive_data",
				Column:     "ae.sensitive_data",
				Sortable:   false,
				Filterable: false,
			},
			"critical": {
				Name:       "critical",
				Column:     "ae.critical",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]entryFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ae.id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "ae.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ae.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ae.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"timestamp": {
				Name:       "timestamp",
				Column:     "ae.timestamp",
				Sortable:   false,
				Filterable: false,
			},
			"changes": {
				Name:       "changes",
				Column:     "ae.changes",
				Sortable:   false,
				Filterable: false,
			},
			"previous_state": {
				Name:       "previous_state",
				Column:     "ae.previous_state",
				Sortable:   false,
				Filterable: false,
			},
			"current_state": {
				Name:       "current_state",
				Column:     "ae.current_state",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "ae.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"resource": {
				Name:       "resource",
				Column:     "ae.resource",
				Sortable:   false,
				Filterable: false,
			},
			"action": {
				Name:       "action",
				Column:     "ae.action",
				Sortable:   false,
				Filterable: false,
			},
			"resource_id": {
				Name:       "resource_id",
				Column:     "ae.resource_id",
				Sortable:   false,
				Filterable: true,
			},
			"correlation_id": {
				Name:       "correlation_id",
				Column:     "ae.correlation_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_agent": {
				Name:       "user_agent",
				Column:     "ae.user_agent",
				Sortable:   false,
				Filterable: true,
			},
			"comment": {
				Name:       "comment",
				Column:     "ae.comment",
				Sortable:   false,
				Filterable: false,
			},
			"ip_address": {
				Name:       "ip_address",
				Column:     "ae.ip_address",
				Sortable:   false,
				Filterable: true,
			},
			"category": {
				Name:       "category",
				Column:     "ae.category",
				Sortable:   false,
				Filterable: true,
			},
			"sensitive_data": {
				Name:       "sensitive_data",
				Column:     "ae.sensitive_data",
				Sortable:   false,
				Filterable: false,
			},
			"critical": {
				Name:       "critical",
				Column:     "ae.critical",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		User         string
		Organization string
		BusinessUnit string
	}{
		User:         "User",
		Organization: "Organization",
		BusinessUnit: "BusinessUnit",
	},
}

// EntryQueryBuilder provides a fluent interface for building queries
type EntryQueryBuilder struct {
	query *bun.SelectQuery
}

// NewEntryQuery creates a new query builder
func NewEntryQuery(db bun.IDB) *EntryQueryBuilder {
	return &EntryQueryBuilder{
		query: db.NewSelect().Model((*Entry)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func EntryFromQuery(q *bun.SelectQuery) *EntryQueryBuilder {
	return &EntryQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *EntryQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *EntryQueryBuilder) Model(model interface{}) *EntryQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *EntryQueryBuilder) WhereIDEQ(v pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *EntryQueryBuilder) WhereIDNEQ(v pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *EntryQueryBuilder) WhereIDIn(v []pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *EntryQueryBuilder) WhereIDNotIn(v []pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereUserIDEQ adds a WHERE user_id = ? condition
func (b *EntryQueryBuilder) WhereUserIDEQ(v pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserIDEQ(b.query, v)
	return b
}

// WhereUserIDNEQ adds a WHERE user_id != ? condition
func (b *EntryQueryBuilder) WhereUserIDNEQ(v pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserIDNEQ(b.query, v)
	return b
}

// WhereUserIDIn adds a WHERE user_id IN (?) condition
func (b *EntryQueryBuilder) WhereUserIDIn(v []pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserIDIn(b.query, v)
	return b
}

// WhereUserIDNotIn adds a WHERE user_id NOT IN (?) condition
func (b *EntryQueryBuilder) WhereUserIDNotIn(v []pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserIDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *EntryQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *EntryQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *EntryQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *EntryQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *EntryQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *EntryQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *EntryQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *EntryQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereTimestampEQ adds a WHERE timestamp = ? condition
func (b *EntryQueryBuilder) WhereTimestampEQ(v int64) *EntryQueryBuilder {
	b.query = EntryQuery.Where.TimestampEQ(b.query, v)
	return b
}

// WhereTimestampNEQ adds a WHERE timestamp != ? condition
func (b *EntryQueryBuilder) WhereTimestampNEQ(v int64) *EntryQueryBuilder {
	b.query = EntryQuery.Where.TimestampNEQ(b.query, v)
	return b
}

// WhereTimestampGT adds a WHERE timestamp > ? condition
func (b *EntryQueryBuilder) WhereTimestampGT(v int64) *EntryQueryBuilder {
	b.query = EntryQuery.Where.TimestampGT(b.query, v)
	return b
}

// WhereTimestampGTE adds a WHERE timestamp >= ? condition
func (b *EntryQueryBuilder) WhereTimestampGTE(v int64) *EntryQueryBuilder {
	b.query = EntryQuery.Where.TimestampGTE(b.query, v)
	return b
}

// WhereTimestampLT adds a WHERE timestamp < ? condition
func (b *EntryQueryBuilder) WhereTimestampLT(v int64) *EntryQueryBuilder {
	b.query = EntryQuery.Where.TimestampLT(b.query, v)
	return b
}

// WhereTimestampLTE adds a WHERE timestamp <= ? condition
func (b *EntryQueryBuilder) WhereTimestampLTE(v int64) *EntryQueryBuilder {
	b.query = EntryQuery.Where.TimestampLTE(b.query, v)
	return b
}

// WhereTimestampIn adds a WHERE timestamp IN (?) condition
func (b *EntryQueryBuilder) WhereTimestampIn(v []int64) *EntryQueryBuilder {
	b.query = EntryQuery.Where.TimestampIn(b.query, v)
	return b
}

// WhereTimestampNotIn adds a WHERE timestamp NOT IN (?) condition
func (b *EntryQueryBuilder) WhereTimestampNotIn(v []int64) *EntryQueryBuilder {
	b.query = EntryQuery.Where.TimestampNotIn(b.query, v)
	return b
}

// WhereChangesEQ adds a WHERE changes = ? condition
func (b *EntryQueryBuilder) WhereChangesEQ(v map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ChangesEQ(b.query, v)
	return b
}

// WhereChangesNEQ adds a WHERE changes != ? condition
func (b *EntryQueryBuilder) WhereChangesNEQ(v map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ChangesNEQ(b.query, v)
	return b
}

// WhereChangesIn adds a WHERE changes IN (?) condition
func (b *EntryQueryBuilder) WhereChangesIn(v []map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ChangesIn(b.query, v)
	return b
}

// WhereChangesNotIn adds a WHERE changes NOT IN (?) condition
func (b *EntryQueryBuilder) WhereChangesNotIn(v []map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ChangesNotIn(b.query, v)
	return b
}

// WherePreviousStateEQ adds a WHERE previous_state = ? condition
func (b *EntryQueryBuilder) WherePreviousStateEQ(v map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.PreviousStateEQ(b.query, v)
	return b
}

// WherePreviousStateNEQ adds a WHERE previous_state != ? condition
func (b *EntryQueryBuilder) WherePreviousStateNEQ(v map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.PreviousStateNEQ(b.query, v)
	return b
}

// WherePreviousStateIn adds a WHERE previous_state IN (?) condition
func (b *EntryQueryBuilder) WherePreviousStateIn(v []map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.PreviousStateIn(b.query, v)
	return b
}

// WherePreviousStateNotIn adds a WHERE previous_state NOT IN (?) condition
func (b *EntryQueryBuilder) WherePreviousStateNotIn(v []map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.PreviousStateNotIn(b.query, v)
	return b
}

// WhereCurrentStateEQ adds a WHERE current_state = ? condition
func (b *EntryQueryBuilder) WhereCurrentStateEQ(v map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CurrentStateEQ(b.query, v)
	return b
}

// WhereCurrentStateNEQ adds a WHERE current_state != ? condition
func (b *EntryQueryBuilder) WhereCurrentStateNEQ(v map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CurrentStateNEQ(b.query, v)
	return b
}

// WhereCurrentStateIn adds a WHERE current_state IN (?) condition
func (b *EntryQueryBuilder) WhereCurrentStateIn(v []map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CurrentStateIn(b.query, v)
	return b
}

// WhereCurrentStateNotIn adds a WHERE current_state NOT IN (?) condition
func (b *EntryQueryBuilder) WhereCurrentStateNotIn(v []map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CurrentStateNotIn(b.query, v)
	return b
}

// WhereMetadataEQ adds a WHERE metadata = ? condition
func (b *EntryQueryBuilder) WhereMetadataEQ(v map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.MetadataEQ(b.query, v)
	return b
}

// WhereMetadataNEQ adds a WHERE metadata != ? condition
func (b *EntryQueryBuilder) WhereMetadataNEQ(v map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.MetadataNEQ(b.query, v)
	return b
}

// WhereMetadataIn adds a WHERE metadata IN (?) condition
func (b *EntryQueryBuilder) WhereMetadataIn(v []map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.MetadataIn(b.query, v)
	return b
}

// WhereMetadataNotIn adds a WHERE metadata NOT IN (?) condition
func (b *EntryQueryBuilder) WhereMetadataNotIn(v []map[string]any) *EntryQueryBuilder {
	b.query = EntryQuery.Where.MetadataNotIn(b.query, v)
	return b
}

// WhereResourceEQ adds a WHERE resource = ? condition
func (b *EntryQueryBuilder) WhereResourceEQ(v permission.Resource) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceEQ(b.query, v)
	return b
}

// WhereResourceNEQ adds a WHERE resource != ? condition
func (b *EntryQueryBuilder) WhereResourceNEQ(v permission.Resource) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceNEQ(b.query, v)
	return b
}

// WhereResourceIn adds a WHERE resource IN (?) condition
func (b *EntryQueryBuilder) WhereResourceIn(v []permission.Resource) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceIn(b.query, v)
	return b
}

// WhereResourceNotIn adds a WHERE resource NOT IN (?) condition
func (b *EntryQueryBuilder) WhereResourceNotIn(v []permission.Resource) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceNotIn(b.query, v)
	return b
}

// WhereActionEQ adds a WHERE action = ? condition
func (b *EntryQueryBuilder) WhereActionEQ(v permission.Action) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ActionEQ(b.query, v)
	return b
}

// WhereActionNEQ adds a WHERE action != ? condition
func (b *EntryQueryBuilder) WhereActionNEQ(v permission.Action) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ActionNEQ(b.query, v)
	return b
}

// WhereActionIn adds a WHERE action IN (?) condition
func (b *EntryQueryBuilder) WhereActionIn(v []permission.Action) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ActionIn(b.query, v)
	return b
}

// WhereActionNotIn adds a WHERE action NOT IN (?) condition
func (b *EntryQueryBuilder) WhereActionNotIn(v []permission.Action) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ActionNotIn(b.query, v)
	return b
}

// WhereResourceIDEQ adds a WHERE resource_id = ? condition
func (b *EntryQueryBuilder) WhereResourceIDEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceIDEQ(b.query, v)
	return b
}

// WhereResourceIDNEQ adds a WHERE resource_id != ? condition
func (b *EntryQueryBuilder) WhereResourceIDNEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceIDNEQ(b.query, v)
	return b
}

// WhereResourceIDIn adds a WHERE resource_id IN (?) condition
func (b *EntryQueryBuilder) WhereResourceIDIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceIDIn(b.query, v)
	return b
}

// WhereResourceIDNotIn adds a WHERE resource_id NOT IN (?) condition
func (b *EntryQueryBuilder) WhereResourceIDNotIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceIDNotIn(b.query, v)
	return b
}

// WhereResourceIDContains adds a WHERE resource_id LIKE ? condition
func (b *EntryQueryBuilder) WhereResourceIDContains(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceIDContains(b.query, v)
	return b
}

// WhereResourceIDHasPrefix adds a WHERE resource_id LIKE ? condition
func (b *EntryQueryBuilder) WhereResourceIDHasPrefix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceIDHasPrefix(b.query, v)
	return b
}

// WhereResourceIDHasSuffix adds a WHERE resource_id LIKE ? condition
func (b *EntryQueryBuilder) WhereResourceIDHasSuffix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.ResourceIDHasSuffix(b.query, v)
	return b
}

// WhereCorrelationIDEQ adds a WHERE correlation_id = ? condition
func (b *EntryQueryBuilder) WhereCorrelationIDEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CorrelationIDEQ(b.query, v)
	return b
}

// WhereCorrelationIDNEQ adds a WHERE correlation_id != ? condition
func (b *EntryQueryBuilder) WhereCorrelationIDNEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CorrelationIDNEQ(b.query, v)
	return b
}

// WhereCorrelationIDIn adds a WHERE correlation_id IN (?) condition
func (b *EntryQueryBuilder) WhereCorrelationIDIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CorrelationIDIn(b.query, v)
	return b
}

// WhereCorrelationIDNotIn adds a WHERE correlation_id NOT IN (?) condition
func (b *EntryQueryBuilder) WhereCorrelationIDNotIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CorrelationIDNotIn(b.query, v)
	return b
}

// WhereCorrelationIDContains adds a WHERE correlation_id LIKE ? condition
func (b *EntryQueryBuilder) WhereCorrelationIDContains(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CorrelationIDContains(b.query, v)
	return b
}

// WhereCorrelationIDHasPrefix adds a WHERE correlation_id LIKE ? condition
func (b *EntryQueryBuilder) WhereCorrelationIDHasPrefix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CorrelationIDHasPrefix(b.query, v)
	return b
}

// WhereCorrelationIDHasSuffix adds a WHERE correlation_id LIKE ? condition
func (b *EntryQueryBuilder) WhereCorrelationIDHasSuffix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CorrelationIDHasSuffix(b.query, v)
	return b
}

// WhereUserAgentEQ adds a WHERE user_agent = ? condition
func (b *EntryQueryBuilder) WhereUserAgentEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserAgentEQ(b.query, v)
	return b
}

// WhereUserAgentNEQ adds a WHERE user_agent != ? condition
func (b *EntryQueryBuilder) WhereUserAgentNEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserAgentNEQ(b.query, v)
	return b
}

// WhereUserAgentIn adds a WHERE user_agent IN (?) condition
func (b *EntryQueryBuilder) WhereUserAgentIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserAgentIn(b.query, v)
	return b
}

// WhereUserAgentNotIn adds a WHERE user_agent NOT IN (?) condition
func (b *EntryQueryBuilder) WhereUserAgentNotIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserAgentNotIn(b.query, v)
	return b
}

// WhereUserAgentContains adds a WHERE user_agent LIKE ? condition
func (b *EntryQueryBuilder) WhereUserAgentContains(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserAgentContains(b.query, v)
	return b
}

// WhereUserAgentHasPrefix adds a WHERE user_agent LIKE ? condition
func (b *EntryQueryBuilder) WhereUserAgentHasPrefix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserAgentHasPrefix(b.query, v)
	return b
}

// WhereUserAgentHasSuffix adds a WHERE user_agent LIKE ? condition
func (b *EntryQueryBuilder) WhereUserAgentHasSuffix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.UserAgentHasSuffix(b.query, v)
	return b
}

// WhereCommentEQ adds a WHERE comment = ? condition
func (b *EntryQueryBuilder) WhereCommentEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CommentEQ(b.query, v)
	return b
}

// WhereCommentNEQ adds a WHERE comment != ? condition
func (b *EntryQueryBuilder) WhereCommentNEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CommentNEQ(b.query, v)
	return b
}

// WhereCommentIn adds a WHERE comment IN (?) condition
func (b *EntryQueryBuilder) WhereCommentIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CommentIn(b.query, v)
	return b
}

// WhereCommentNotIn adds a WHERE comment NOT IN (?) condition
func (b *EntryQueryBuilder) WhereCommentNotIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CommentNotIn(b.query, v)
	return b
}

// WhereCommentContains adds a WHERE comment LIKE ? condition
func (b *EntryQueryBuilder) WhereCommentContains(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CommentContains(b.query, v)
	return b
}

// WhereCommentHasPrefix adds a WHERE comment LIKE ? condition
func (b *EntryQueryBuilder) WhereCommentHasPrefix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CommentHasPrefix(b.query, v)
	return b
}

// WhereCommentHasSuffix adds a WHERE comment LIKE ? condition
func (b *EntryQueryBuilder) WhereCommentHasSuffix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CommentHasSuffix(b.query, v)
	return b
}

// WhereIPAddressEQ adds a WHERE ip_address = ? condition
func (b *EntryQueryBuilder) WhereIPAddressEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IPAddressEQ(b.query, v)
	return b
}

// WhereIPAddressNEQ adds a WHERE ip_address != ? condition
func (b *EntryQueryBuilder) WhereIPAddressNEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IPAddressNEQ(b.query, v)
	return b
}

// WhereIPAddressIn adds a WHERE ip_address IN (?) condition
func (b *EntryQueryBuilder) WhereIPAddressIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IPAddressIn(b.query, v)
	return b
}

// WhereIPAddressNotIn adds a WHERE ip_address NOT IN (?) condition
func (b *EntryQueryBuilder) WhereIPAddressNotIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IPAddressNotIn(b.query, v)
	return b
}

// WhereIPAddressContains adds a WHERE ip_address LIKE ? condition
func (b *EntryQueryBuilder) WhereIPAddressContains(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IPAddressContains(b.query, v)
	return b
}

// WhereIPAddressHasPrefix adds a WHERE ip_address LIKE ? condition
func (b *EntryQueryBuilder) WhereIPAddressHasPrefix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IPAddressHasPrefix(b.query, v)
	return b
}

// WhereIPAddressHasSuffix adds a WHERE ip_address LIKE ? condition
func (b *EntryQueryBuilder) WhereIPAddressHasSuffix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.IPAddressHasSuffix(b.query, v)
	return b
}

// WhereCategoryEQ adds a WHERE category = ? condition
func (b *EntryQueryBuilder) WhereCategoryEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CategoryEQ(b.query, v)
	return b
}

// WhereCategoryNEQ adds a WHERE category != ? condition
func (b *EntryQueryBuilder) WhereCategoryNEQ(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CategoryNEQ(b.query, v)
	return b
}

// WhereCategoryIn adds a WHERE category IN (?) condition
func (b *EntryQueryBuilder) WhereCategoryIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CategoryIn(b.query, v)
	return b
}

// WhereCategoryNotIn adds a WHERE category NOT IN (?) condition
func (b *EntryQueryBuilder) WhereCategoryNotIn(v []string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CategoryNotIn(b.query, v)
	return b
}

// WhereCategoryContains adds a WHERE category LIKE ? condition
func (b *EntryQueryBuilder) WhereCategoryContains(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CategoryContains(b.query, v)
	return b
}

// WhereCategoryHasPrefix adds a WHERE category LIKE ? condition
func (b *EntryQueryBuilder) WhereCategoryHasPrefix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CategoryHasPrefix(b.query, v)
	return b
}

// WhereCategoryHasSuffix adds a WHERE category LIKE ? condition
func (b *EntryQueryBuilder) WhereCategoryHasSuffix(v string) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CategoryHasSuffix(b.query, v)
	return b
}

// WhereSensitiveDataEQ adds a WHERE sensitive_data = ? condition
func (b *EntryQueryBuilder) WhereSensitiveDataEQ(v bool) *EntryQueryBuilder {
	b.query = EntryQuery.Where.SensitiveDataEQ(b.query, v)
	return b
}

// WhereSensitiveDataNEQ adds a WHERE sensitive_data != ? condition
func (b *EntryQueryBuilder) WhereSensitiveDataNEQ(v bool) *EntryQueryBuilder {
	b.query = EntryQuery.Where.SensitiveDataNEQ(b.query, v)
	return b
}

// WhereSensitiveDataIn adds a WHERE sensitive_data IN (?) condition
func (b *EntryQueryBuilder) WhereSensitiveDataIn(v []bool) *EntryQueryBuilder {
	b.query = EntryQuery.Where.SensitiveDataIn(b.query, v)
	return b
}

// WhereSensitiveDataNotIn adds a WHERE sensitive_data NOT IN (?) condition
func (b *EntryQueryBuilder) WhereSensitiveDataNotIn(v []bool) *EntryQueryBuilder {
	b.query = EntryQuery.Where.SensitiveDataNotIn(b.query, v)
	return b
}

// WhereCriticalEQ adds a WHERE critical = ? condition
func (b *EntryQueryBuilder) WhereCriticalEQ(v bool) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CriticalEQ(b.query, v)
	return b
}

// WhereCriticalNEQ adds a WHERE critical != ? condition
func (b *EntryQueryBuilder) WhereCriticalNEQ(v bool) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CriticalNEQ(b.query, v)
	return b
}

// WhereCriticalIn adds a WHERE critical IN (?) condition
func (b *EntryQueryBuilder) WhereCriticalIn(v []bool) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CriticalIn(b.query, v)
	return b
}

// WhereCriticalNotIn adds a WHERE critical NOT IN (?) condition
func (b *EntryQueryBuilder) WhereCriticalNotIn(v []bool) *EntryQueryBuilder {
	b.query = EntryQuery.Where.CriticalNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *EntryQueryBuilder) WhereTenant(orgID, buID pulid.ID) *EntryQueryBuilder {
	b.query = EntryQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *EntryQueryBuilder) WhereGroup(sep string, fn func(*EntryQueryBuilder) *EntryQueryBuilder) *EntryQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &EntryQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *EntryQueryBuilder) Where(query string, args ...interface{}) *EntryQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *EntryQueryBuilder) OrderBy(column string, desc ...bool) *EntryQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(EntryQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *EntryQueryBuilder) Limit(n int) *EntryQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *EntryQueryBuilder) Offset(n int) *EntryQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *EntryQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *EntryQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *EntryQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *EntryQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *EntryQueryBuilder) All(ctx context.Context) ([]*Entry, error) {
	var entities []*Entry
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *EntryQueryBuilder) AllWithCount(ctx context.Context) ([]*Entry, int, error) {
	var entities []*Entry
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *EntryQueryBuilder) One(ctx context.Context) (*Entry, error) {
	entity := new(Entry)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *EntryQueryBuilder) First(ctx context.Context) (*Entry, error) {
	entity := new(Entry)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// EntryBuild creates a chainable query builder
func EntryBuild(db bun.IDB) *EntryQueryBuilder {
	return NewEntryQuery(db)
}

// Relationship loading methods

// LoadUser loads the User relationship
func (b *EntryQueryBuilder) LoadUser() *EntryQueryBuilder {
	b.query = b.query.Relation("User")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *EntryQueryBuilder) LoadOrganization() *EntryQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *EntryQueryBuilder) LoadBusinessUnit() *EntryQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadAllRelations loads all relationships for Entry
func (b *EntryQueryBuilder) LoadAllRelations() *EntryQueryBuilder {
	b.LoadUser()
	b.LoadOrganization()
	b.LoadBusinessUnit()
	return b
}
