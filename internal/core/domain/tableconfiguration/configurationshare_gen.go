// Code generated by gen-trenova. DO NOT EDIT.

package tableconfiguration

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// configurationShareFieldConfig provides field configuration for ConfigurationShare
type configurationShareFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ConfigurationShareQuery provides type-safe query helpers and constants
var ConfigurationShareQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID              string
		ConfigurationID string
		BusinessUnitID  string
		OrganizationID  string
		SharedWithID    string
		ShareType       string
		CreatedAt       string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ConfigurationIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ConfigurationIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		SharedWithIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		SharedWithIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShareTypeEQ        func(q *bun.SelectQuery, v ShareType) *bun.SelectQuery
		ShareTypeNEQ       func(q *bun.SelectQuery, v ShareType) *bun.SelectQuery
		CreatedAtEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE       func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]configurationShareFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "table_configuration_shares",
	Alias:    "tcs",
	IDPrefix: "tcs_",

	// Field names
	Field: struct {
		ID              string
		ConfigurationID string
		BusinessUnitID  string
		OrganizationID  string
		SharedWithID    string
		ShareType       string
		CreatedAt       string
	}{
		ID:              "id",
		ConfigurationID: "configuration_id",
		BusinessUnitID:  "business_unit_id",
		OrganizationID:  "organization_id",
		SharedWithID:    "shared_with_id",
		ShareType:       "share_type",
		CreatedAt:       "created_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "tcs." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "tcs." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ConfigurationIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ConfigurationIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		SharedWithIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		SharedWithIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShareTypeEQ        func(q *bun.SelectQuery, v ShareType) *bun.SelectQuery
		ShareTypeNEQ       func(q *bun.SelectQuery, v ShareType) *bun.SelectQuery
		CreatedAtEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant             func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tcs.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tcs.id"), v)
		},
		ConfigurationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tcs.configuration_id"), v)
		},
		ConfigurationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tcs.configuration_id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tcs.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tcs.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tcs.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tcs.organization_id"), v)
		},
		SharedWithIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tcs.shared_with_id"), v)
		},
		SharedWithIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tcs.shared_with_id"), v)
		},
		ShareTypeEQ: func(q *bun.SelectQuery, v ShareType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tcs.share_type"), v)
		},
		ShareTypeNEQ: func(q *bun.SelectQuery, v ShareType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tcs.share_type"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tcs.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tcs.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tcs.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tcs.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tcs.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tcs.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tcs.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tcs.created_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("tcs.organization_id"), orgID).
				Where("? = ?", bun.Ident("tcs.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "tcs." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"tcs.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "tcs.created_at DESC"
			}
			return "tcs.created_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]configurationShareFieldConfig {
		return map[string]configurationShareFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tcs.id",
				Sortable:   false,
				Filterable: true,
			},
			"configuration_id": {
				Name:       "configuration_id",
				Column:     "tcs.configuration_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tcs.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tcs.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shared_with_id": {
				Name:       "shared_with_id",
				Column:     "tcs.shared_with_id",
				Sortable:   false,
				Filterable: true,
			},
			"share_type": {
				Name:       "share_type",
				Column:     "tcs.share_type",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tcs.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]configurationShareFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tcs.id",
				Sortable:   false,
				Filterable: true,
			},
			"configuration_id": {
				Name:       "configuration_id",
				Column:     "tcs.configuration_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tcs.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tcs.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shared_with_id": {
				Name:       "shared_with_id",
				Column:     "tcs.shared_with_id",
				Sortable:   false,
				Filterable: true,
			},
			"share_type": {
				Name:       "share_type",
				Column:     "tcs.share_type",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tcs.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]configurationShareFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tcs.id",
				Sortable:   false,
				Filterable: true,
			},
			"configuration_id": {
				Name:       "configuration_id",
				Column:     "tcs.configuration_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tcs.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tcs.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shared_with_id": {
				Name:       "shared_with_id",
				Column:     "tcs.shared_with_id",
				Sortable:   false,
				Filterable: true,
			},
			"share_type": {
				Name:       "share_type",
				Column:     "tcs.share_type",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tcs.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// ConfigurationShareQueryBuilder provides a fluent interface for building queries
type ConfigurationShareQueryBuilder struct {
	query *bun.SelectQuery
}

// NewConfigurationShareQuery creates a new query builder
func NewConfigurationShareQuery(db bun.IDB) *ConfigurationShareQueryBuilder {
	return &ConfigurationShareQueryBuilder{
		query: db.NewSelect().Model((*ConfigurationShare)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ConfigurationShareFromQuery(q *bun.SelectQuery) *ConfigurationShareQueryBuilder {
	return &ConfigurationShareQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ConfigurationShareQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ConfigurationShareQueryBuilder) Model(model interface{}) *ConfigurationShareQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ConfigurationShareQueryBuilder) WhereIDEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ConfigurationShareQueryBuilder) WhereIDNEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereConfigurationIDEQ adds a WHERE configuration_id = ? condition
func (b *ConfigurationShareQueryBuilder) WhereConfigurationIDEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.ConfigurationIDEQ(b.query, v)
	return b
}

// WhereConfigurationIDNEQ adds a WHERE configuration_id != ? condition
func (b *ConfigurationShareQueryBuilder) WhereConfigurationIDNEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.ConfigurationIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ConfigurationShareQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ConfigurationShareQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ConfigurationShareQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ConfigurationShareQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereSharedWithIDEQ adds a WHERE shared_with_id = ? condition
func (b *ConfigurationShareQueryBuilder) WhereSharedWithIDEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.SharedWithIDEQ(b.query, v)
	return b
}

// WhereSharedWithIDNEQ adds a WHERE shared_with_id != ? condition
func (b *ConfigurationShareQueryBuilder) WhereSharedWithIDNEQ(v pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.SharedWithIDNEQ(b.query, v)
	return b
}

// WhereShareTypeEQ adds a WHERE share_type = ? condition
func (b *ConfigurationShareQueryBuilder) WhereShareTypeEQ(v ShareType) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.ShareTypeEQ(b.query, v)
	return b
}

// WhereShareTypeNEQ adds a WHERE share_type != ? condition
func (b *ConfigurationShareQueryBuilder) WhereShareTypeNEQ(v ShareType) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.ShareTypeNEQ(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ConfigurationShareQueryBuilder) WhereCreatedAtEQ(v int64) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ConfigurationShareQueryBuilder) WhereCreatedAtNEQ(v int64) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ConfigurationShareQueryBuilder) WhereCreatedAtGT(v int64) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ConfigurationShareQueryBuilder) WhereCreatedAtGTE(v int64) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ConfigurationShareQueryBuilder) WhereCreatedAtLT(v int64) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ConfigurationShareQueryBuilder) WhereCreatedAtLTE(v int64) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ConfigurationShareQueryBuilder) WhereCreatedAtIn(v []int64) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ConfigurationShareQueryBuilder) WhereCreatedAtNotIn(v []int64) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ConfigurationShareQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ConfigurationShareQueryBuilder {
	b.query = ConfigurationShareQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ConfigurationShareQueryBuilder) WhereGroup(sep string, fn func(*ConfigurationShareQueryBuilder) *ConfigurationShareQueryBuilder) *ConfigurationShareQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ConfigurationShareQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ConfigurationShareQueryBuilder) Where(query string, args ...interface{}) *ConfigurationShareQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ConfigurationShareQueryBuilder) OrderBy(column string, desc ...bool) *ConfigurationShareQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ConfigurationShareQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ConfigurationShareQueryBuilder) Limit(n int) *ConfigurationShareQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ConfigurationShareQueryBuilder) Offset(n int) *ConfigurationShareQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ConfigurationShareQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ConfigurationShareQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ConfigurationShareQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ConfigurationShareQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ConfigurationShareQueryBuilder) All(ctx context.Context) ([]*ConfigurationShare, error) {
	var entities []*ConfigurationShare
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ConfigurationShareQueryBuilder) AllWithCount(ctx context.Context) ([]*ConfigurationShare, int, error) {
	var entities []*ConfigurationShare
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ConfigurationShareQueryBuilder) One(ctx context.Context) (*ConfigurationShare, error) {
	entity := new(ConfigurationShare)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ConfigurationShareQueryBuilder) First(ctx context.Context) (*ConfigurationShare, error) {
	entity := new(ConfigurationShare)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ConfigurationShareBuild creates a chainable query builder
func ConfigurationShareBuild(db bun.IDB) *ConfigurationShareQueryBuilder {
	return NewConfigurationShareQuery(db)
}
