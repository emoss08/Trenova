// Code generated by gen-trenova. DO NOT EDIT.

package billing

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// documentTypeFieldConfig provides field configuration for DocumentType
type documentTypeFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// DocumentTypeQuery provides type-safe query helpers and constants
var DocumentTypeQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                     string
		BusinessUnitID         string
		OrganizationID         string
		Code                   string
		Name                   string
		Description            string
		Color                  string
		DocumentClassification string
		DocumentCategory       string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CodeEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentClassificationEQ  func(q *bun.SelectQuery, v DocumentClassification) *bun.SelectQuery
		DocumentClassificationNEQ func(q *bun.SelectQuery, v DocumentClassification) *bun.SelectQuery
		DocumentCategoryEQ        func(q *bun.SelectQuery, v DocumentCategory) *bun.SelectQuery
		DocumentCategoryNEQ       func(q *bun.SelectQuery, v DocumentCategory) *bun.SelectQuery
		VersionEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]documentTypeFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "document_types",
	Alias:    "dt",
	IDPrefix: "dt_",

	// Field names
	Field: struct {
		ID                     string
		BusinessUnitID         string
		OrganizationID         string
		Code                   string
		Name                   string
		Description            string
		Color                  string
		DocumentClassification string
		DocumentCategory       string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}{
		ID:                     "id",
		BusinessUnitID:         "business_unit_id",
		OrganizationID:         "organization_id",
		Code:                   "code",
		Name:                   "name",
		Description:            "description",
		Color:                  "color",
		DocumentClassification: "document_classification",
		DocumentCategory:       "document_category",
		Version:                "version",
		CreatedAt:              "created_at",
		UpdatedAt:              "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "dt." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "dt." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CodeEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentClassificationEQ  func(q *bun.SelectQuery, v DocumentClassification) *bun.SelectQuery
		DocumentClassificationNEQ func(q *bun.SelectQuery, v DocumentClassification) *bun.SelectQuery
		DocumentCategoryEQ        func(q *bun.SelectQuery, v DocumentCategory) *bun.SelectQuery
		DocumentCategoryNEQ       func(q *bun.SelectQuery, v DocumentCategory) *bun.SelectQuery
		VersionEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                    func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.organization_id"), v)
		},
		CodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.code"), v)
		},
		CodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.code"), v)
		},
		CodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dt.code"), bun.In(v))
		},
		CodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dt.code"), bun.In(v))
		},
		CodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dt.code"), v)
		},
		CodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dt.code"), v)
		},
		CodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dt.code"), v)
		},
		CodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dt.code"), v)
		},
		CodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.code"), "%"+v+"%")
		},
		CodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.code"), v+"%")
		},
		CodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.code"), "%"+v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dt.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dt.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dt.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dt.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dt.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dt.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dt.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dt.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dt.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dt.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dt.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dt.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.description"), "%"+v)
		},
		ColorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.color"), v)
		},
		ColorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.color"), v)
		},
		ColorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dt.color"), bun.In(v))
		},
		ColorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dt.color"), bun.In(v))
		},
		ColorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dt.color"), v)
		},
		ColorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dt.color"), v)
		},
		ColorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dt.color"), v)
		},
		ColorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dt.color"), v)
		},
		ColorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.color"), "%"+v+"%")
		},
		ColorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.color"), v+"%")
		},
		ColorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dt.color"), "%"+v)
		},
		DocumentClassificationEQ: func(q *bun.SelectQuery, v DocumentClassification) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.document_classification"), v)
		},
		DocumentClassificationNEQ: func(q *bun.SelectQuery, v DocumentClassification) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.document_classification"), v)
		},
		DocumentCategoryEQ: func(q *bun.SelectQuery, v DocumentCategory) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.document_category"), v)
		},
		DocumentCategoryNEQ: func(q *bun.SelectQuery, v DocumentCategory) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.document_category"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dt.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dt.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dt.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dt.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dt.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dt.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dt.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dt.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dt.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dt.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dt.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dt.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dt.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dt.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dt.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dt.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dt.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dt.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dt.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dt.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("dt.organization_id"), orgID).
				Where("? = ?", bun.Ident("dt.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("dt.id"), id).
				Where("? = ?", bun.Ident("dt.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "dt." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"dt.code ASC",
			}
		},
		Code: func(desc bool) string {
			if desc {
				return "dt.code DESC"
			}
			return "dt.code ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "dt.created_at DESC"
			}
			return "dt.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "dt.updated_at DESC"
			}
			return "dt.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]documentTypeFieldConfig {
		return map[string]documentTypeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dt.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dt.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dt.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "dt.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "dt.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "dt.description",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "dt.color",
				Sortable:   false,
				Filterable: true,
			},
			"document_classification": {
				Name:       "document_classification",
				Column:     "dt.document_classification",
				Sortable:   false,
				Filterable: false,
			},
			"document_category": {
				Name:       "document_category",
				Column:     "dt.document_category",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dt.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dt.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dt.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]documentTypeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dt.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dt.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dt.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "dt.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "dt.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "dt.description",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "dt.color",
				Sortable:   false,
				Filterable: true,
			},
			"document_classification": {
				Name:       "document_classification",
				Column:     "dt.document_classification",
				Sortable:   false,
				Filterable: false,
			},
			"document_category": {
				Name:       "document_category",
				Column:     "dt.document_category",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dt.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dt.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dt.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]documentTypeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dt.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dt.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dt.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "dt.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "dt.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "dt.description",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "dt.color",
				Sortable:   false,
				Filterable: true,
			},
			"document_classification": {
				Name:       "document_classification",
				Column:     "dt.document_classification",
				Sortable:   false,
				Filterable: false,
			},
			"document_category": {
				Name:       "document_category",
				Column:     "dt.document_category",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dt.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dt.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dt.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// DocumentTypeQueryBuilder provides a fluent interface for building queries
type DocumentTypeQueryBuilder struct {
	query *bun.SelectQuery
}

// NewDocumentTypeQuery creates a new query builder
func NewDocumentTypeQuery(db bun.IDB) *DocumentTypeQueryBuilder {
	return &DocumentTypeQueryBuilder{
		query: db.NewSelect().Model((*DocumentType)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func DocumentTypeFromQuery(q *bun.SelectQuery) *DocumentTypeQueryBuilder {
	return &DocumentTypeQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *DocumentTypeQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *DocumentTypeQueryBuilder) Model(model interface{}) *DocumentTypeQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *DocumentTypeQueryBuilder) WhereIDEQ(v pulid.ID) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *DocumentTypeQueryBuilder) WhereIDNEQ(v pulid.ID) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *DocumentTypeQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *DocumentTypeQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *DocumentTypeQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *DocumentTypeQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereCodeEQ adds a WHERE code = ? condition
func (b *DocumentTypeQueryBuilder) WhereCodeEQ(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CodeEQ(b.query, v)
	return b
}

// WhereCodeNEQ adds a WHERE code != ? condition
func (b *DocumentTypeQueryBuilder) WhereCodeNEQ(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CodeNEQ(b.query, v)
	return b
}

// WhereCodeIn adds a WHERE code IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereCodeIn(v []string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CodeIn(b.query, v)
	return b
}

// WhereCodeNotIn adds a WHERE code NOT IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereCodeNotIn(v []string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CodeNotIn(b.query, v)
	return b
}

// WhereCodeContains adds a WHERE code LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereCodeContains(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CodeContains(b.query, v)
	return b
}

// WhereCodeHasPrefix adds a WHERE code LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereCodeHasPrefix(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CodeHasPrefix(b.query, v)
	return b
}

// WhereCodeHasSuffix adds a WHERE code LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereCodeHasSuffix(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CodeHasSuffix(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *DocumentTypeQueryBuilder) WhereNameEQ(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *DocumentTypeQueryBuilder) WhereNameNEQ(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereNameIn(v []string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereNameNotIn(v []string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereNameContains(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereNameHasPrefix(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereNameHasSuffix(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *DocumentTypeQueryBuilder) WhereDescriptionEQ(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *DocumentTypeQueryBuilder) WhereDescriptionNEQ(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereDescriptionIn(v []string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereDescriptionNotIn(v []string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereDescriptionContains(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereDescriptionHasPrefix(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereDescriptionHasSuffix(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereColorEQ adds a WHERE color = ? condition
func (b *DocumentTypeQueryBuilder) WhereColorEQ(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.ColorEQ(b.query, v)
	return b
}

// WhereColorNEQ adds a WHERE color != ? condition
func (b *DocumentTypeQueryBuilder) WhereColorNEQ(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.ColorNEQ(b.query, v)
	return b
}

// WhereColorIn adds a WHERE color IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereColorIn(v []string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.ColorIn(b.query, v)
	return b
}

// WhereColorNotIn adds a WHERE color NOT IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereColorNotIn(v []string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.ColorNotIn(b.query, v)
	return b
}

// WhereColorContains adds a WHERE color LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereColorContains(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.ColorContains(b.query, v)
	return b
}

// WhereColorHasPrefix adds a WHERE color LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereColorHasPrefix(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.ColorHasPrefix(b.query, v)
	return b
}

// WhereColorHasSuffix adds a WHERE color LIKE ? condition
func (b *DocumentTypeQueryBuilder) WhereColorHasSuffix(v string) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.ColorHasSuffix(b.query, v)
	return b
}

// WhereDocumentClassificationEQ adds a WHERE document_classification = ? condition
func (b *DocumentTypeQueryBuilder) WhereDocumentClassificationEQ(v DocumentClassification) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DocumentClassificationEQ(b.query, v)
	return b
}

// WhereDocumentClassificationNEQ adds a WHERE document_classification != ? condition
func (b *DocumentTypeQueryBuilder) WhereDocumentClassificationNEQ(v DocumentClassification) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DocumentClassificationNEQ(b.query, v)
	return b
}

// WhereDocumentCategoryEQ adds a WHERE document_category = ? condition
func (b *DocumentTypeQueryBuilder) WhereDocumentCategoryEQ(v DocumentCategory) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DocumentCategoryEQ(b.query, v)
	return b
}

// WhereDocumentCategoryNEQ adds a WHERE document_category != ? condition
func (b *DocumentTypeQueryBuilder) WhereDocumentCategoryNEQ(v DocumentCategory) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.DocumentCategoryNEQ(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *DocumentTypeQueryBuilder) WhereVersionEQ(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *DocumentTypeQueryBuilder) WhereVersionNEQ(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *DocumentTypeQueryBuilder) WhereVersionGT(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *DocumentTypeQueryBuilder) WhereVersionGTE(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *DocumentTypeQueryBuilder) WhereVersionLT(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *DocumentTypeQueryBuilder) WhereVersionLTE(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereVersionIn(v []int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereVersionNotIn(v []int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *DocumentTypeQueryBuilder) WhereCreatedAtEQ(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *DocumentTypeQueryBuilder) WhereCreatedAtNEQ(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *DocumentTypeQueryBuilder) WhereCreatedAtGT(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *DocumentTypeQueryBuilder) WhereCreatedAtGTE(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *DocumentTypeQueryBuilder) WhereCreatedAtLT(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *DocumentTypeQueryBuilder) WhereCreatedAtLTE(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereCreatedAtIn(v []int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereCreatedAtNotIn(v []int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *DocumentTypeQueryBuilder) WhereUpdatedAtEQ(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *DocumentTypeQueryBuilder) WhereUpdatedAtNEQ(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *DocumentTypeQueryBuilder) WhereUpdatedAtGT(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *DocumentTypeQueryBuilder) WhereUpdatedAtGTE(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *DocumentTypeQueryBuilder) WhereUpdatedAtLT(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *DocumentTypeQueryBuilder) WhereUpdatedAtLTE(v int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereUpdatedAtIn(v []int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *DocumentTypeQueryBuilder) WhereUpdatedAtNotIn(v []int64) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *DocumentTypeQueryBuilder) WhereTenant(orgID, buID pulid.ID) *DocumentTypeQueryBuilder {
	b.query = DocumentTypeQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *DocumentTypeQueryBuilder) WhereGroup(sep string, fn func(*DocumentTypeQueryBuilder) *DocumentTypeQueryBuilder) *DocumentTypeQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &DocumentTypeQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *DocumentTypeQueryBuilder) Where(query string, args ...interface{}) *DocumentTypeQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *DocumentTypeQueryBuilder) OrderBy(column string, desc ...bool) *DocumentTypeQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(DocumentTypeQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *DocumentTypeQueryBuilder) Limit(n int) *DocumentTypeQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *DocumentTypeQueryBuilder) Offset(n int) *DocumentTypeQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *DocumentTypeQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *DocumentTypeQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *DocumentTypeQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *DocumentTypeQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *DocumentTypeQueryBuilder) All(ctx context.Context) ([]*DocumentType, error) {
	var entities []*DocumentType
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *DocumentTypeQueryBuilder) AllWithCount(ctx context.Context) ([]*DocumentType, int, error) {
	var entities []*DocumentType
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *DocumentTypeQueryBuilder) One(ctx context.Context) (*DocumentType, error) {
	entity := new(DocumentType)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *DocumentTypeQueryBuilder) First(ctx context.Context) (*DocumentType, error) {
	entity := new(DocumentType)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// DocumentTypeBuild creates a chainable query builder
func DocumentTypeBuild(db bun.IDB) *DocumentTypeQueryBuilder {
	return NewDocumentTypeQuery(db)
}
