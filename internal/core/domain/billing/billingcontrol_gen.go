// Code generated by gen-trenova. DO NOT EDIT.

package billing

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// billingControlFieldConfig provides field configuration for BillingControl
type billingControlFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// BillingControlQuery provides type-safe query helpers and constants
var BillingControlQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                            string
		BusinessUnitID                string
		OrganizationID                string
		InvoiceNumberPrefix           string
		CreditMemoNumberPrefix        string
		InvoiceTerms                  string
		InvoiceFooter                 string
		TransferSchedule              string
		BillingExceptionHandling      string
		PaymentTerm                   string
		ShowInvoiceDueDate            string
		ShowAmountDue                 string
		AutoTransfer                  string
		AutoMarkReadyToBill           string
		EnforceCustomerBillingReq     string
		ValidateCustomerRates         string
		AutoBill                      string
		AutoResolveMinorDiscrepancies string
		AllowInvoiceConsolidation     string
		GroupConsolidatedInvoices     string
		SendAutoBillNotifications     string
		TransferBatchSize             string
		AutoBillBatchSize             string
		ConsolidationPeriodDays       string
		RateDiscrepancyThreshold      string
		Version                       string
		CreatedAt                     string
		UpdatedAt                     string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		InvoiceNumberPrefixEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceNumberPrefixNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceNumberPrefixGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CreditMemoNumberPrefixNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CreditMemoNumberPrefixGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceTermsNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceTermsGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceFooterNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceFooterGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TransferScheduleEQ               func(q *bun.SelectQuery, v TransferSchedule) *bun.SelectQuery
		TransferScheduleNEQ              func(q *bun.SelectQuery, v TransferSchedule) *bun.SelectQuery
		BillingExceptionHandlingEQ       func(q *bun.SelectQuery, v ExceptionHandling) *bun.SelectQuery
		BillingExceptionHandlingNEQ      func(q *bun.SelectQuery, v ExceptionHandling) *bun.SelectQuery
		PaymentTermEQ                    func(q *bun.SelectQuery, v PaymentTerm) *bun.SelectQuery
		PaymentTermNEQ                   func(q *bun.SelectQuery, v PaymentTerm) *bun.SelectQuery
		ShowInvoiceDueDateEQ             func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ShowInvoiceDueDateNEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ShowAmountDueEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ShowAmountDueNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoTransferEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoTransferNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoMarkReadyToBillEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoMarkReadyToBillNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceCustomerBillingReqEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceCustomerBillingReqNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ValidateCustomerRatesEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ValidateCustomerRatesNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoBillEQ                       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoBillNEQ                      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoResolveMinorDiscrepanciesEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoResolveMinorDiscrepanciesNEQ func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowInvoiceConsolidationEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowInvoiceConsolidationNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		GroupConsolidatedInvoicesEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		GroupConsolidatedInvoicesNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		SendAutoBillNotificationsEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		SendAutoBillNotificationsNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TransferBatchSizeEQ              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeNEQ             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeIn              func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		TransferBatchSizeNotIn           func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		TransferBatchSizeGT              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeGTE             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeLT              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeLTE             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeEQ              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeNEQ             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeIn              func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		AutoBillBatchSizeNotIn           func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		AutoBillBatchSizeGT              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeGTE             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeLT              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeLTE             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysEQ        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysNEQ       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysIn        func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		ConsolidationPeriodDaysNotIn     func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		ConsolidationPeriodDaysGT        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysGTE       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysLT        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysLTE       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateDiscrepancyThresholdEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdNEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		RateDiscrepancyThresholdNotIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		RateDiscrepancyThresholdGT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdGTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdLT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdLTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		VersionEQ                        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]billingControlFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "billing_controls",
	Alias:    "bc",
	IDPrefix: "bc_",

	// Field names
	Field: struct {
		ID                            string
		BusinessUnitID                string
		OrganizationID                string
		InvoiceNumberPrefix           string
		CreditMemoNumberPrefix        string
		InvoiceTerms                  string
		InvoiceFooter                 string
		TransferSchedule              string
		BillingExceptionHandling      string
		PaymentTerm                   string
		ShowInvoiceDueDate            string
		ShowAmountDue                 string
		AutoTransfer                  string
		AutoMarkReadyToBill           string
		EnforceCustomerBillingReq     string
		ValidateCustomerRates         string
		AutoBill                      string
		AutoResolveMinorDiscrepancies string
		AllowInvoiceConsolidation     string
		GroupConsolidatedInvoices     string
		SendAutoBillNotifications     string
		TransferBatchSize             string
		AutoBillBatchSize             string
		ConsolidationPeriodDays       string
		RateDiscrepancyThreshold      string
		Version                       string
		CreatedAt                     string
		UpdatedAt                     string
	}{
		ID:                            "id",
		BusinessUnitID:                "business_unit_id",
		OrganizationID:                "organization_id",
		InvoiceNumberPrefix:           "invoice_number_prefix",
		CreditMemoNumberPrefix:        "credit_memo_number_prefix",
		InvoiceTerms:                  "invoice_terms",
		InvoiceFooter:                 "invoice_footer",
		TransferSchedule:              "transfer_schedule",
		BillingExceptionHandling:      "billing_exception_handling",
		PaymentTerm:                   "payment_term",
		ShowInvoiceDueDate:            "show_invoice_due_date",
		ShowAmountDue:                 "show_amount_due",
		AutoTransfer:                  "auto_transfer",
		AutoMarkReadyToBill:           "auto_mark_ready_to_bill",
		EnforceCustomerBillingReq:     "enforce_customer_billing_req",
		ValidateCustomerRates:         "validate_customer_rates",
		AutoBill:                      "auto_bill",
		AutoResolveMinorDiscrepancies: "auto_resolve_minor_discrepancies",
		AllowInvoiceConsolidation:     "allow_invoice_consolidation",
		GroupConsolidatedInvoices:     "group_consolidated_invoices",
		SendAutoBillNotifications:     "send_auto_bill_notifications",
		TransferBatchSize:             "transfer_batch_size",
		AutoBillBatchSize:             "auto_bill_batch_size",
		ConsolidationPeriodDays:       "consolidation_period_days",
		RateDiscrepancyThreshold:      "rate_discrepancy_threshold",
		Version:                       "version",
		CreatedAt:                     "created_at",
		UpdatedAt:                     "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "bc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "bc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		InvoiceNumberPrefixEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceNumberPrefixNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceNumberPrefixGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceNumberPrefixHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CreditMemoNumberPrefixNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CreditMemoNumberPrefixGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreditMemoNumberPrefixHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceTermsNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceTermsGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceTermsHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceFooterNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		InvoiceFooterGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		InvoiceFooterHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TransferScheduleEQ               func(q *bun.SelectQuery, v TransferSchedule) *bun.SelectQuery
		TransferScheduleNEQ              func(q *bun.SelectQuery, v TransferSchedule) *bun.SelectQuery
		BillingExceptionHandlingEQ       func(q *bun.SelectQuery, v ExceptionHandling) *bun.SelectQuery
		BillingExceptionHandlingNEQ      func(q *bun.SelectQuery, v ExceptionHandling) *bun.SelectQuery
		PaymentTermEQ                    func(q *bun.SelectQuery, v PaymentTerm) *bun.SelectQuery
		PaymentTermNEQ                   func(q *bun.SelectQuery, v PaymentTerm) *bun.SelectQuery
		ShowInvoiceDueDateEQ             func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ShowInvoiceDueDateNEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ShowAmountDueEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ShowAmountDueNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoTransferEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoTransferNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoMarkReadyToBillEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoMarkReadyToBillNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceCustomerBillingReqEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceCustomerBillingReqNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ValidateCustomerRatesEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ValidateCustomerRatesNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoBillEQ                       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoBillNEQ                      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoResolveMinorDiscrepanciesEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoResolveMinorDiscrepanciesNEQ func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowInvoiceConsolidationEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowInvoiceConsolidationNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		GroupConsolidatedInvoicesEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		GroupConsolidatedInvoicesNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		SendAutoBillNotificationsEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		SendAutoBillNotificationsNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TransferBatchSizeEQ              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeNEQ             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeIn              func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		TransferBatchSizeNotIn           func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		TransferBatchSizeGT              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeGTE             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeLT              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TransferBatchSizeLTE             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeEQ              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeNEQ             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeIn              func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		AutoBillBatchSizeNotIn           func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		AutoBillBatchSizeGT              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeGTE             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeLT              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		AutoBillBatchSizeLTE             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysEQ        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysNEQ       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysIn        func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		ConsolidationPeriodDaysNotIn     func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		ConsolidationPeriodDaysGT        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysGTE       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysLT        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPeriodDaysLTE       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateDiscrepancyThresholdEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdNEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		RateDiscrepancyThresholdNotIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		RateDiscrepancyThresholdGT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdGTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdLT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		RateDiscrepancyThresholdLTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		VersionEQ                        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                           func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.organization_id"), v)
		},
		InvoiceNumberPrefixEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.invoice_number_prefix"), v)
		},
		InvoiceNumberPrefixNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.invoice_number_prefix"), v)
		},
		InvoiceNumberPrefixIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.invoice_number_prefix"), bun.In(v))
		},
		InvoiceNumberPrefixNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.invoice_number_prefix"), bun.In(v))
		},
		InvoiceNumberPrefixGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.invoice_number_prefix"), v)
		},
		InvoiceNumberPrefixGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.invoice_number_prefix"), v)
		},
		InvoiceNumberPrefixLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.invoice_number_prefix"), v)
		},
		InvoiceNumberPrefixLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.invoice_number_prefix"), v)
		},
		InvoiceNumberPrefixContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.invoice_number_prefix"), "%"+v+"%")
		},
		InvoiceNumberPrefixHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.invoice_number_prefix"), v+"%")
		},
		InvoiceNumberPrefixHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.invoice_number_prefix"), "%"+v)
		},
		CreditMemoNumberPrefixEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.credit_memo_number_prefix"), v)
		},
		CreditMemoNumberPrefixNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.credit_memo_number_prefix"), v)
		},
		CreditMemoNumberPrefixIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.credit_memo_number_prefix"), bun.In(v))
		},
		CreditMemoNumberPrefixNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.credit_memo_number_prefix"), bun.In(v))
		},
		CreditMemoNumberPrefixGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.credit_memo_number_prefix"), v)
		},
		CreditMemoNumberPrefixGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.credit_memo_number_prefix"), v)
		},
		CreditMemoNumberPrefixLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.credit_memo_number_prefix"), v)
		},
		CreditMemoNumberPrefixLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.credit_memo_number_prefix"), v)
		},
		CreditMemoNumberPrefixContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.credit_memo_number_prefix"), "%"+v+"%")
		},
		CreditMemoNumberPrefixHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.credit_memo_number_prefix"), v+"%")
		},
		CreditMemoNumberPrefixHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.credit_memo_number_prefix"), "%"+v)
		},
		InvoiceTermsEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.invoice_terms"), v)
		},
		InvoiceTermsNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.invoice_terms"), v)
		},
		InvoiceTermsIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.invoice_terms"), bun.In(v))
		},
		InvoiceTermsNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.invoice_terms"), bun.In(v))
		},
		InvoiceTermsGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.invoice_terms"), v)
		},
		InvoiceTermsGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.invoice_terms"), v)
		},
		InvoiceTermsLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.invoice_terms"), v)
		},
		InvoiceTermsLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.invoice_terms"), v)
		},
		InvoiceTermsContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.invoice_terms"), "%"+v+"%")
		},
		InvoiceTermsHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.invoice_terms"), v+"%")
		},
		InvoiceTermsHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.invoice_terms"), "%"+v)
		},
		InvoiceFooterEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.invoice_footer"), v)
		},
		InvoiceFooterNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.invoice_footer"), v)
		},
		InvoiceFooterIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.invoice_footer"), bun.In(v))
		},
		InvoiceFooterNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.invoice_footer"), bun.In(v))
		},
		InvoiceFooterGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.invoice_footer"), v)
		},
		InvoiceFooterGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.invoice_footer"), v)
		},
		InvoiceFooterLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.invoice_footer"), v)
		},
		InvoiceFooterLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.invoice_footer"), v)
		},
		InvoiceFooterContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.invoice_footer"), "%"+v+"%")
		},
		InvoiceFooterHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.invoice_footer"), v+"%")
		},
		InvoiceFooterHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bc.invoice_footer"), "%"+v)
		},
		TransferScheduleEQ: func(q *bun.SelectQuery, v TransferSchedule) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.transfer_schedule"), v)
		},
		TransferScheduleNEQ: func(q *bun.SelectQuery, v TransferSchedule) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.transfer_schedule"), v)
		},
		BillingExceptionHandlingEQ: func(q *bun.SelectQuery, v ExceptionHandling) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.billing_exception_handling"), v)
		},
		BillingExceptionHandlingNEQ: func(q *bun.SelectQuery, v ExceptionHandling) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.billing_exception_handling"), v)
		},
		PaymentTermEQ: func(q *bun.SelectQuery, v PaymentTerm) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.payment_term"), v)
		},
		PaymentTermNEQ: func(q *bun.SelectQuery, v PaymentTerm) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.payment_term"), v)
		},
		ShowInvoiceDueDateEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.show_invoice_due_date"), v)
		},
		ShowInvoiceDueDateNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.show_invoice_due_date"), v)
		},
		ShowAmountDueEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.show_amount_due"), v)
		},
		ShowAmountDueNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.show_amount_due"), v)
		},
		AutoTransferEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.auto_transfer"), v)
		},
		AutoTransferNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.auto_transfer"), v)
		},
		AutoMarkReadyToBillEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.auto_mark_ready_to_bill"), v)
		},
		AutoMarkReadyToBillNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.auto_mark_ready_to_bill"), v)
		},
		EnforceCustomerBillingReqEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.enforce_customer_billing_req"), v)
		},
		EnforceCustomerBillingReqNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.enforce_customer_billing_req"), v)
		},
		ValidateCustomerRatesEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.validate_customer_rates"), v)
		},
		ValidateCustomerRatesNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.validate_customer_rates"), v)
		},
		AutoBillEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.auto_bill"), v)
		},
		AutoBillNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.auto_bill"), v)
		},
		AutoResolveMinorDiscrepanciesEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.auto_resolve_minor_discrepancies"), v)
		},
		AutoResolveMinorDiscrepanciesNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.auto_resolve_minor_discrepancies"), v)
		},
		AllowInvoiceConsolidationEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.allow_invoice_consolidation"), v)
		},
		AllowInvoiceConsolidationNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.allow_invoice_consolidation"), v)
		},
		GroupConsolidatedInvoicesEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.group_consolidated_invoices"), v)
		},
		GroupConsolidatedInvoicesNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.group_consolidated_invoices"), v)
		},
		SendAutoBillNotificationsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.send_auto_bill_notifications"), v)
		},
		SendAutoBillNotificationsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.send_auto_bill_notifications"), v)
		},
		TransferBatchSizeEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.transfer_batch_size"), v)
		},
		TransferBatchSizeNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.transfer_batch_size"), v)
		},
		TransferBatchSizeIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.transfer_batch_size"), bun.In(v))
		},
		TransferBatchSizeNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.transfer_batch_size"), bun.In(v))
		},
		TransferBatchSizeGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.transfer_batch_size"), v)
		},
		TransferBatchSizeGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.transfer_batch_size"), v)
		},
		TransferBatchSizeLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.transfer_batch_size"), v)
		},
		TransferBatchSizeLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.transfer_batch_size"), v)
		},
		AutoBillBatchSizeEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.auto_bill_batch_size"), v)
		},
		AutoBillBatchSizeNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.auto_bill_batch_size"), v)
		},
		AutoBillBatchSizeIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.auto_bill_batch_size"), bun.In(v))
		},
		AutoBillBatchSizeNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.auto_bill_batch_size"), bun.In(v))
		},
		AutoBillBatchSizeGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.auto_bill_batch_size"), v)
		},
		AutoBillBatchSizeGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.auto_bill_batch_size"), v)
		},
		AutoBillBatchSizeLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.auto_bill_batch_size"), v)
		},
		AutoBillBatchSizeLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.auto_bill_batch_size"), v)
		},
		ConsolidationPeriodDaysEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.consolidation_period_days"), v)
		},
		ConsolidationPeriodDaysNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.consolidation_period_days"), v)
		},
		ConsolidationPeriodDaysIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.consolidation_period_days"), bun.In(v))
		},
		ConsolidationPeriodDaysNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.consolidation_period_days"), bun.In(v))
		},
		ConsolidationPeriodDaysGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.consolidation_period_days"), v)
		},
		ConsolidationPeriodDaysGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.consolidation_period_days"), v)
		},
		ConsolidationPeriodDaysLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.consolidation_period_days"), v)
		},
		ConsolidationPeriodDaysLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.consolidation_period_days"), v)
		},
		RateDiscrepancyThresholdEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.rate_discrepancy_threshold"), v)
		},
		RateDiscrepancyThresholdNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.rate_discrepancy_threshold"), v)
		},
		RateDiscrepancyThresholdIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.rate_discrepancy_threshold"), bun.In(v))
		},
		RateDiscrepancyThresholdNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.rate_discrepancy_threshold"), bun.In(v))
		},
		RateDiscrepancyThresholdGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.rate_discrepancy_threshold"), v)
		},
		RateDiscrepancyThresholdGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.rate_discrepancy_threshold"), v)
		},
		RateDiscrepancyThresholdLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.rate_discrepancy_threshold"), v)
		},
		RateDiscrepancyThresholdLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.rate_discrepancy_threshold"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bc.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("bc.organization_id"), orgID).
				Where("? = ?", bun.Ident("bc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("bc.id"), id).
				Where("? = ?", bun.Ident("bc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "bc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"bc.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "bc.created_at DESC"
			}
			return "bc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "bc.updated_at DESC"
			}
			return "bc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]billingControlFieldConfig {
		return map[string]billingControlFieldConfig{
			"id": {
				Name:       "id",
				Column:     "bc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "bc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "bc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"invoice_number_prefix": {
				Name:       "invoice_number_prefix",
				Column:     "bc.invoice_number_prefix",
				Sortable:   false,
				Filterable: true,
			},
			"credit_memo_number_prefix": {
				Name:       "credit_memo_number_prefix",
				Column:     "bc.credit_memo_number_prefix",
				Sortable:   false,
				Filterable: true,
			},
			"invoice_terms": {
				Name:       "invoice_terms",
				Column:     "bc.invoice_terms",
				Sortable:   false,
				Filterable: false,
			},
			"invoice_footer": {
				Name:       "invoice_footer",
				Column:     "bc.invoice_footer",
				Sortable:   false,
				Filterable: false,
			},
			"transfer_schedule": {
				Name:       "transfer_schedule",
				Column:     "bc.transfer_schedule",
				Sortable:   false,
				Filterable: false,
			},
			"billing_exception_handling": {
				Name:       "billing_exception_handling",
				Column:     "bc.billing_exception_handling",
				Sortable:   false,
				Filterable: false,
			},
			"payment_term": {
				Name:       "payment_term",
				Column:     "bc.payment_term",
				Sortable:   false,
				Filterable: false,
			},
			"show_invoice_due_date": {
				Name:       "show_invoice_due_date",
				Column:     "bc.show_invoice_due_date",
				Sortable:   false,
				Filterable: false,
			},
			"show_amount_due": {
				Name:       "show_amount_due",
				Column:     "bc.show_amount_due",
				Sortable:   false,
				Filterable: false,
			},
			"auto_transfer": {
				Name:       "auto_transfer",
				Column:     "bc.auto_transfer",
				Sortable:   false,
				Filterable: false,
			},
			"auto_mark_ready_to_bill": {
				Name:       "auto_mark_ready_to_bill",
				Column:     "bc.auto_mark_ready_to_bill",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_customer_billing_req": {
				Name:       "enforce_customer_billing_req",
				Column:     "bc.enforce_customer_billing_req",
				Sortable:   false,
				Filterable: false,
			},
			"validate_customer_rates": {
				Name:       "validate_customer_rates",
				Column:     "bc.validate_customer_rates",
				Sortable:   false,
				Filterable: false,
			},
			"auto_bill": {
				Name:       "auto_bill",
				Column:     "bc.auto_bill",
				Sortable:   false,
				Filterable: false,
			},
			"auto_resolve_minor_discrepancies": {
				Name:       "auto_resolve_minor_discrepancies",
				Column:     "bc.auto_resolve_minor_discrepancies",
				Sortable:   false,
				Filterable: false,
			},
			"allow_invoice_consolidation": {
				Name:       "allow_invoice_consolidation",
				Column:     "bc.allow_invoice_consolidation",
				Sortable:   false,
				Filterable: false,
			},
			"group_consolidated_invoices": {
				Name:       "group_consolidated_invoices",
				Column:     "bc.group_consolidated_invoices",
				Sortable:   false,
				Filterable: false,
			},
			"send_auto_bill_notifications": {
				Name:       "send_auto_bill_notifications",
				Column:     "bc.send_auto_bill_notifications",
				Sortable:   false,
				Filterable: false,
			},
			"transfer_batch_size": {
				Name:       "transfer_batch_size",
				Column:     "bc.transfer_batch_size",
				Sortable:   false,
				Filterable: false,
			},
			"auto_bill_batch_size": {
				Name:       "auto_bill_batch_size",
				Column:     "bc.auto_bill_batch_size",
				Sortable:   false,
				Filterable: false,
			},
			"consolidation_period_days": {
				Name:       "consolidation_period_days",
				Column:     "bc.consolidation_period_days",
				Sortable:   false,
				Filterable: false,
			},
			"rate_discrepancy_threshold": {
				Name:       "rate_discrepancy_threshold",
				Column:     "bc.rate_discrepancy_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "bc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "bc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "bc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]billingControlFieldConfig{
			"id": {
				Name:       "id",
				Column:     "bc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "bc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "bc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"invoice_number_prefix": {
				Name:       "invoice_number_prefix",
				Column:     "bc.invoice_number_prefix",
				Sortable:   false,
				Filterable: true,
			},
			"credit_memo_number_prefix": {
				Name:       "credit_memo_number_prefix",
				Column:     "bc.credit_memo_number_prefix",
				Sortable:   false,
				Filterable: true,
			},
			"invoice_terms": {
				Name:       "invoice_terms",
				Column:     "bc.invoice_terms",
				Sortable:   false,
				Filterable: false,
			},
			"invoice_footer": {
				Name:       "invoice_footer",
				Column:     "bc.invoice_footer",
				Sortable:   false,
				Filterable: false,
			},
			"transfer_schedule": {
				Name:       "transfer_schedule",
				Column:     "bc.transfer_schedule",
				Sortable:   false,
				Filterable: false,
			},
			"billing_exception_handling": {
				Name:       "billing_exception_handling",
				Column:     "bc.billing_exception_handling",
				Sortable:   false,
				Filterable: false,
			},
			"payment_term": {
				Name:       "payment_term",
				Column:     "bc.payment_term",
				Sortable:   false,
				Filterable: false,
			},
			"show_invoice_due_date": {
				Name:       "show_invoice_due_date",
				Column:     "bc.show_invoice_due_date",
				Sortable:   false,
				Filterable: false,
			},
			"show_amount_due": {
				Name:       "show_amount_due",
				Column:     "bc.show_amount_due",
				Sortable:   false,
				Filterable: false,
			},
			"auto_transfer": {
				Name:       "auto_transfer",
				Column:     "bc.auto_transfer",
				Sortable:   false,
				Filterable: false,
			},
			"auto_mark_ready_to_bill": {
				Name:       "auto_mark_ready_to_bill",
				Column:     "bc.auto_mark_ready_to_bill",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_customer_billing_req": {
				Name:       "enforce_customer_billing_req",
				Column:     "bc.enforce_customer_billing_req",
				Sortable:   false,
				Filterable: false,
			},
			"validate_customer_rates": {
				Name:       "validate_customer_rates",
				Column:     "bc.validate_customer_rates",
				Sortable:   false,
				Filterable: false,
			},
			"auto_bill": {
				Name:       "auto_bill",
				Column:     "bc.auto_bill",
				Sortable:   false,
				Filterable: false,
			},
			"auto_resolve_minor_discrepancies": {
				Name:       "auto_resolve_minor_discrepancies",
				Column:     "bc.auto_resolve_minor_discrepancies",
				Sortable:   false,
				Filterable: false,
			},
			"allow_invoice_consolidation": {
				Name:       "allow_invoice_consolidation",
				Column:     "bc.allow_invoice_consolidation",
				Sortable:   false,
				Filterable: false,
			},
			"group_consolidated_invoices": {
				Name:       "group_consolidated_invoices",
				Column:     "bc.group_consolidated_invoices",
				Sortable:   false,
				Filterable: false,
			},
			"send_auto_bill_notifications": {
				Name:       "send_auto_bill_notifications",
				Column:     "bc.send_auto_bill_notifications",
				Sortable:   false,
				Filterable: false,
			},
			"transfer_batch_size": {
				Name:       "transfer_batch_size",
				Column:     "bc.transfer_batch_size",
				Sortable:   false,
				Filterable: false,
			},
			"auto_bill_batch_size": {
				Name:       "auto_bill_batch_size",
				Column:     "bc.auto_bill_batch_size",
				Sortable:   false,
				Filterable: false,
			},
			"consolidation_period_days": {
				Name:       "consolidation_period_days",
				Column:     "bc.consolidation_period_days",
				Sortable:   false,
				Filterable: false,
			},
			"rate_discrepancy_threshold": {
				Name:       "rate_discrepancy_threshold",
				Column:     "bc.rate_discrepancy_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "bc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "bc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "bc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]billingControlFieldConfig{
			"id": {
				Name:       "id",
				Column:     "bc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "bc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "bc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"invoice_number_prefix": {
				Name:       "invoice_number_prefix",
				Column:     "bc.invoice_number_prefix",
				Sortable:   false,
				Filterable: true,
			},
			"credit_memo_number_prefix": {
				Name:       "credit_memo_number_prefix",
				Column:     "bc.credit_memo_number_prefix",
				Sortable:   false,
				Filterable: true,
			},
			"invoice_terms": {
				Name:       "invoice_terms",
				Column:     "bc.invoice_terms",
				Sortable:   false,
				Filterable: false,
			},
			"invoice_footer": {
				Name:       "invoice_footer",
				Column:     "bc.invoice_footer",
				Sortable:   false,
				Filterable: false,
			},
			"transfer_schedule": {
				Name:       "transfer_schedule",
				Column:     "bc.transfer_schedule",
				Sortable:   false,
				Filterable: false,
			},
			"billing_exception_handling": {
				Name:       "billing_exception_handling",
				Column:     "bc.billing_exception_handling",
				Sortable:   false,
				Filterable: false,
			},
			"payment_term": {
				Name:       "payment_term",
				Column:     "bc.payment_term",
				Sortable:   false,
				Filterable: false,
			},
			"show_invoice_due_date": {
				Name:       "show_invoice_due_date",
				Column:     "bc.show_invoice_due_date",
				Sortable:   false,
				Filterable: false,
			},
			"show_amount_due": {
				Name:       "show_amount_due",
				Column:     "bc.show_amount_due",
				Sortable:   false,
				Filterable: false,
			},
			"auto_transfer": {
				Name:       "auto_transfer",
				Column:     "bc.auto_transfer",
				Sortable:   false,
				Filterable: false,
			},
			"auto_mark_ready_to_bill": {
				Name:       "auto_mark_ready_to_bill",
				Column:     "bc.auto_mark_ready_to_bill",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_customer_billing_req": {
				Name:       "enforce_customer_billing_req",
				Column:     "bc.enforce_customer_billing_req",
				Sortable:   false,
				Filterable: false,
			},
			"validate_customer_rates": {
				Name:       "validate_customer_rates",
				Column:     "bc.validate_customer_rates",
				Sortable:   false,
				Filterable: false,
			},
			"auto_bill": {
				Name:       "auto_bill",
				Column:     "bc.auto_bill",
				Sortable:   false,
				Filterable: false,
			},
			"auto_resolve_minor_discrepancies": {
				Name:       "auto_resolve_minor_discrepancies",
				Column:     "bc.auto_resolve_minor_discrepancies",
				Sortable:   false,
				Filterable: false,
			},
			"allow_invoice_consolidation": {
				Name:       "allow_invoice_consolidation",
				Column:     "bc.allow_invoice_consolidation",
				Sortable:   false,
				Filterable: false,
			},
			"group_consolidated_invoices": {
				Name:       "group_consolidated_invoices",
				Column:     "bc.group_consolidated_invoices",
				Sortable:   false,
				Filterable: false,
			},
			"send_auto_bill_notifications": {
				Name:       "send_auto_bill_notifications",
				Column:     "bc.send_auto_bill_notifications",
				Sortable:   false,
				Filterable: false,
			},
			"transfer_batch_size": {
				Name:       "transfer_batch_size",
				Column:     "bc.transfer_batch_size",
				Sortable:   false,
				Filterable: false,
			},
			"auto_bill_batch_size": {
				Name:       "auto_bill_batch_size",
				Column:     "bc.auto_bill_batch_size",
				Sortable:   false,
				Filterable: false,
			},
			"consolidation_period_days": {
				Name:       "consolidation_period_days",
				Column:     "bc.consolidation_period_days",
				Sortable:   false,
				Filterable: false,
			},
			"rate_discrepancy_threshold": {
				Name:       "rate_discrepancy_threshold",
				Column:     "bc.rate_discrepancy_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "bc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "bc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "bc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// BillingControlQueryBuilder provides a fluent interface for building queries
type BillingControlQueryBuilder struct {
	query *bun.SelectQuery
}

// NewBillingControlQuery creates a new query builder
func NewBillingControlQuery(db bun.IDB) *BillingControlQueryBuilder {
	return &BillingControlQueryBuilder{
		query: db.NewSelect().Model((*BillingControl)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func BillingControlFromQuery(q *bun.SelectQuery) *BillingControlQueryBuilder {
	return &BillingControlQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *BillingControlQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *BillingControlQueryBuilder) Model(model interface{}) *BillingControlQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *BillingControlQueryBuilder) WhereIDEQ(v pulid.ID) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *BillingControlQueryBuilder) WhereIDNEQ(v pulid.ID) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *BillingControlQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *BillingControlQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *BillingControlQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *BillingControlQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereInvoiceNumberPrefixEQ adds a WHERE invoice_number_prefix = ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceNumberPrefixEQ(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceNumberPrefixEQ(b.query, v)
	return b
}

// WhereInvoiceNumberPrefixNEQ adds a WHERE invoice_number_prefix != ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceNumberPrefixNEQ(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceNumberPrefixNEQ(b.query, v)
	return b
}

// WhereInvoiceNumberPrefixIn adds a WHERE invoice_number_prefix IN (?) condition
func (b *BillingControlQueryBuilder) WhereInvoiceNumberPrefixIn(v []string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceNumberPrefixIn(b.query, v)
	return b
}

// WhereInvoiceNumberPrefixNotIn adds a WHERE invoice_number_prefix NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereInvoiceNumberPrefixNotIn(v []string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceNumberPrefixNotIn(b.query, v)
	return b
}

// WhereInvoiceNumberPrefixContains adds a WHERE invoice_number_prefix LIKE ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceNumberPrefixContains(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceNumberPrefixContains(b.query, v)
	return b
}

// WhereInvoiceNumberPrefixHasPrefix adds a WHERE invoice_number_prefix LIKE ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceNumberPrefixHasPrefix(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceNumberPrefixHasPrefix(b.query, v)
	return b
}

// WhereInvoiceNumberPrefixHasSuffix adds a WHERE invoice_number_prefix LIKE ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceNumberPrefixHasSuffix(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceNumberPrefixHasSuffix(b.query, v)
	return b
}

// WhereCreditMemoNumberPrefixEQ adds a WHERE credit_memo_number_prefix = ? condition
func (b *BillingControlQueryBuilder) WhereCreditMemoNumberPrefixEQ(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreditMemoNumberPrefixEQ(b.query, v)
	return b
}

// WhereCreditMemoNumberPrefixNEQ adds a WHERE credit_memo_number_prefix != ? condition
func (b *BillingControlQueryBuilder) WhereCreditMemoNumberPrefixNEQ(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreditMemoNumberPrefixNEQ(b.query, v)
	return b
}

// WhereCreditMemoNumberPrefixIn adds a WHERE credit_memo_number_prefix IN (?) condition
func (b *BillingControlQueryBuilder) WhereCreditMemoNumberPrefixIn(v []string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreditMemoNumberPrefixIn(b.query, v)
	return b
}

// WhereCreditMemoNumberPrefixNotIn adds a WHERE credit_memo_number_prefix NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereCreditMemoNumberPrefixNotIn(v []string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreditMemoNumberPrefixNotIn(b.query, v)
	return b
}

// WhereCreditMemoNumberPrefixContains adds a WHERE credit_memo_number_prefix LIKE ? condition
func (b *BillingControlQueryBuilder) WhereCreditMemoNumberPrefixContains(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreditMemoNumberPrefixContains(b.query, v)
	return b
}

// WhereCreditMemoNumberPrefixHasPrefix adds a WHERE credit_memo_number_prefix LIKE ? condition
func (b *BillingControlQueryBuilder) WhereCreditMemoNumberPrefixHasPrefix(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreditMemoNumberPrefixHasPrefix(b.query, v)
	return b
}

// WhereCreditMemoNumberPrefixHasSuffix adds a WHERE credit_memo_number_prefix LIKE ? condition
func (b *BillingControlQueryBuilder) WhereCreditMemoNumberPrefixHasSuffix(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreditMemoNumberPrefixHasSuffix(b.query, v)
	return b
}

// WhereInvoiceTermsEQ adds a WHERE invoice_terms = ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceTermsEQ(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceTermsEQ(b.query, v)
	return b
}

// WhereInvoiceTermsNEQ adds a WHERE invoice_terms != ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceTermsNEQ(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceTermsNEQ(b.query, v)
	return b
}

// WhereInvoiceTermsIn adds a WHERE invoice_terms IN (?) condition
func (b *BillingControlQueryBuilder) WhereInvoiceTermsIn(v []string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceTermsIn(b.query, v)
	return b
}

// WhereInvoiceTermsNotIn adds a WHERE invoice_terms NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereInvoiceTermsNotIn(v []string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceTermsNotIn(b.query, v)
	return b
}

// WhereInvoiceTermsContains adds a WHERE invoice_terms LIKE ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceTermsContains(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceTermsContains(b.query, v)
	return b
}

// WhereInvoiceTermsHasPrefix adds a WHERE invoice_terms LIKE ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceTermsHasPrefix(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceTermsHasPrefix(b.query, v)
	return b
}

// WhereInvoiceTermsHasSuffix adds a WHERE invoice_terms LIKE ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceTermsHasSuffix(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceTermsHasSuffix(b.query, v)
	return b
}

// WhereInvoiceFooterEQ adds a WHERE invoice_footer = ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceFooterEQ(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceFooterEQ(b.query, v)
	return b
}

// WhereInvoiceFooterNEQ adds a WHERE invoice_footer != ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceFooterNEQ(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceFooterNEQ(b.query, v)
	return b
}

// WhereInvoiceFooterIn adds a WHERE invoice_footer IN (?) condition
func (b *BillingControlQueryBuilder) WhereInvoiceFooterIn(v []string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceFooterIn(b.query, v)
	return b
}

// WhereInvoiceFooterNotIn adds a WHERE invoice_footer NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereInvoiceFooterNotIn(v []string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceFooterNotIn(b.query, v)
	return b
}

// WhereInvoiceFooterContains adds a WHERE invoice_footer LIKE ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceFooterContains(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceFooterContains(b.query, v)
	return b
}

// WhereInvoiceFooterHasPrefix adds a WHERE invoice_footer LIKE ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceFooterHasPrefix(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceFooterHasPrefix(b.query, v)
	return b
}

// WhereInvoiceFooterHasSuffix adds a WHERE invoice_footer LIKE ? condition
func (b *BillingControlQueryBuilder) WhereInvoiceFooterHasSuffix(v string) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.InvoiceFooterHasSuffix(b.query, v)
	return b
}

// WhereTransferScheduleEQ adds a WHERE transfer_schedule = ? condition
func (b *BillingControlQueryBuilder) WhereTransferScheduleEQ(v TransferSchedule) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferScheduleEQ(b.query, v)
	return b
}

// WhereTransferScheduleNEQ adds a WHERE transfer_schedule != ? condition
func (b *BillingControlQueryBuilder) WhereTransferScheduleNEQ(v TransferSchedule) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferScheduleNEQ(b.query, v)
	return b
}

// WhereBillingExceptionHandlingEQ adds a WHERE billing_exception_handling = ? condition
func (b *BillingControlQueryBuilder) WhereBillingExceptionHandlingEQ(v ExceptionHandling) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.BillingExceptionHandlingEQ(b.query, v)
	return b
}

// WhereBillingExceptionHandlingNEQ adds a WHERE billing_exception_handling != ? condition
func (b *BillingControlQueryBuilder) WhereBillingExceptionHandlingNEQ(v ExceptionHandling) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.BillingExceptionHandlingNEQ(b.query, v)
	return b
}

// WherePaymentTermEQ adds a WHERE payment_term = ? condition
func (b *BillingControlQueryBuilder) WherePaymentTermEQ(v PaymentTerm) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.PaymentTermEQ(b.query, v)
	return b
}

// WherePaymentTermNEQ adds a WHERE payment_term != ? condition
func (b *BillingControlQueryBuilder) WherePaymentTermNEQ(v PaymentTerm) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.PaymentTermNEQ(b.query, v)
	return b
}

// WhereShowInvoiceDueDateEQ adds a WHERE show_invoice_due_date = ? condition
func (b *BillingControlQueryBuilder) WhereShowInvoiceDueDateEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ShowInvoiceDueDateEQ(b.query, v)
	return b
}

// WhereShowInvoiceDueDateNEQ adds a WHERE show_invoice_due_date != ? condition
func (b *BillingControlQueryBuilder) WhereShowInvoiceDueDateNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ShowInvoiceDueDateNEQ(b.query, v)
	return b
}

// WhereShowAmountDueEQ adds a WHERE show_amount_due = ? condition
func (b *BillingControlQueryBuilder) WhereShowAmountDueEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ShowAmountDueEQ(b.query, v)
	return b
}

// WhereShowAmountDueNEQ adds a WHERE show_amount_due != ? condition
func (b *BillingControlQueryBuilder) WhereShowAmountDueNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ShowAmountDueNEQ(b.query, v)
	return b
}

// WhereAutoTransferEQ adds a WHERE auto_transfer = ? condition
func (b *BillingControlQueryBuilder) WhereAutoTransferEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoTransferEQ(b.query, v)
	return b
}

// WhereAutoTransferNEQ adds a WHERE auto_transfer != ? condition
func (b *BillingControlQueryBuilder) WhereAutoTransferNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoTransferNEQ(b.query, v)
	return b
}

// WhereAutoMarkReadyToBillEQ adds a WHERE auto_mark_ready_to_bill = ? condition
func (b *BillingControlQueryBuilder) WhereAutoMarkReadyToBillEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoMarkReadyToBillEQ(b.query, v)
	return b
}

// WhereAutoMarkReadyToBillNEQ adds a WHERE auto_mark_ready_to_bill != ? condition
func (b *BillingControlQueryBuilder) WhereAutoMarkReadyToBillNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoMarkReadyToBillNEQ(b.query, v)
	return b
}

// WhereEnforceCustomerBillingReqEQ adds a WHERE enforce_customer_billing_req = ? condition
func (b *BillingControlQueryBuilder) WhereEnforceCustomerBillingReqEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.EnforceCustomerBillingReqEQ(b.query, v)
	return b
}

// WhereEnforceCustomerBillingReqNEQ adds a WHERE enforce_customer_billing_req != ? condition
func (b *BillingControlQueryBuilder) WhereEnforceCustomerBillingReqNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.EnforceCustomerBillingReqNEQ(b.query, v)
	return b
}

// WhereValidateCustomerRatesEQ adds a WHERE validate_customer_rates = ? condition
func (b *BillingControlQueryBuilder) WhereValidateCustomerRatesEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ValidateCustomerRatesEQ(b.query, v)
	return b
}

// WhereValidateCustomerRatesNEQ adds a WHERE validate_customer_rates != ? condition
func (b *BillingControlQueryBuilder) WhereValidateCustomerRatesNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ValidateCustomerRatesNEQ(b.query, v)
	return b
}

// WhereAutoBillEQ adds a WHERE auto_bill = ? condition
func (b *BillingControlQueryBuilder) WhereAutoBillEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillEQ(b.query, v)
	return b
}

// WhereAutoBillNEQ adds a WHERE auto_bill != ? condition
func (b *BillingControlQueryBuilder) WhereAutoBillNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillNEQ(b.query, v)
	return b
}

// WhereAutoResolveMinorDiscrepanciesEQ adds a WHERE auto_resolve_minor_discrepancies = ? condition
func (b *BillingControlQueryBuilder) WhereAutoResolveMinorDiscrepanciesEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoResolveMinorDiscrepanciesEQ(b.query, v)
	return b
}

// WhereAutoResolveMinorDiscrepanciesNEQ adds a WHERE auto_resolve_minor_discrepancies != ? condition
func (b *BillingControlQueryBuilder) WhereAutoResolveMinorDiscrepanciesNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoResolveMinorDiscrepanciesNEQ(b.query, v)
	return b
}

// WhereAllowInvoiceConsolidationEQ adds a WHERE allow_invoice_consolidation = ? condition
func (b *BillingControlQueryBuilder) WhereAllowInvoiceConsolidationEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AllowInvoiceConsolidationEQ(b.query, v)
	return b
}

// WhereAllowInvoiceConsolidationNEQ adds a WHERE allow_invoice_consolidation != ? condition
func (b *BillingControlQueryBuilder) WhereAllowInvoiceConsolidationNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AllowInvoiceConsolidationNEQ(b.query, v)
	return b
}

// WhereGroupConsolidatedInvoicesEQ adds a WHERE group_consolidated_invoices = ? condition
func (b *BillingControlQueryBuilder) WhereGroupConsolidatedInvoicesEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.GroupConsolidatedInvoicesEQ(b.query, v)
	return b
}

// WhereGroupConsolidatedInvoicesNEQ adds a WHERE group_consolidated_invoices != ? condition
func (b *BillingControlQueryBuilder) WhereGroupConsolidatedInvoicesNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.GroupConsolidatedInvoicesNEQ(b.query, v)
	return b
}

// WhereSendAutoBillNotificationsEQ adds a WHERE send_auto_bill_notifications = ? condition
func (b *BillingControlQueryBuilder) WhereSendAutoBillNotificationsEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.SendAutoBillNotificationsEQ(b.query, v)
	return b
}

// WhereSendAutoBillNotificationsNEQ adds a WHERE send_auto_bill_notifications != ? condition
func (b *BillingControlQueryBuilder) WhereSendAutoBillNotificationsNEQ(v bool) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.SendAutoBillNotificationsNEQ(b.query, v)
	return b
}

// WhereTransferBatchSizeEQ adds a WHERE transfer_batch_size = ? condition
func (b *BillingControlQueryBuilder) WhereTransferBatchSizeEQ(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferBatchSizeEQ(b.query, v)
	return b
}

// WhereTransferBatchSizeNEQ adds a WHERE transfer_batch_size != ? condition
func (b *BillingControlQueryBuilder) WhereTransferBatchSizeNEQ(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferBatchSizeNEQ(b.query, v)
	return b
}

// WhereTransferBatchSizeGT adds a WHERE transfer_batch_size > ? condition
func (b *BillingControlQueryBuilder) WhereTransferBatchSizeGT(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferBatchSizeGT(b.query, v)
	return b
}

// WhereTransferBatchSizeGTE adds a WHERE transfer_batch_size >= ? condition
func (b *BillingControlQueryBuilder) WhereTransferBatchSizeGTE(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferBatchSizeGTE(b.query, v)
	return b
}

// WhereTransferBatchSizeLT adds a WHERE transfer_batch_size < ? condition
func (b *BillingControlQueryBuilder) WhereTransferBatchSizeLT(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferBatchSizeLT(b.query, v)
	return b
}

// WhereTransferBatchSizeLTE adds a WHERE transfer_batch_size <= ? condition
func (b *BillingControlQueryBuilder) WhereTransferBatchSizeLTE(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferBatchSizeLTE(b.query, v)
	return b
}

// WhereTransferBatchSizeIn adds a WHERE transfer_batch_size IN (?) condition
func (b *BillingControlQueryBuilder) WhereTransferBatchSizeIn(v []int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferBatchSizeIn(b.query, v)
	return b
}

// WhereTransferBatchSizeNotIn adds a WHERE transfer_batch_size NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereTransferBatchSizeNotIn(v []int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.TransferBatchSizeNotIn(b.query, v)
	return b
}

// WhereAutoBillBatchSizeEQ adds a WHERE auto_bill_batch_size = ? condition
func (b *BillingControlQueryBuilder) WhereAutoBillBatchSizeEQ(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillBatchSizeEQ(b.query, v)
	return b
}

// WhereAutoBillBatchSizeNEQ adds a WHERE auto_bill_batch_size != ? condition
func (b *BillingControlQueryBuilder) WhereAutoBillBatchSizeNEQ(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillBatchSizeNEQ(b.query, v)
	return b
}

// WhereAutoBillBatchSizeGT adds a WHERE auto_bill_batch_size > ? condition
func (b *BillingControlQueryBuilder) WhereAutoBillBatchSizeGT(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillBatchSizeGT(b.query, v)
	return b
}

// WhereAutoBillBatchSizeGTE adds a WHERE auto_bill_batch_size >= ? condition
func (b *BillingControlQueryBuilder) WhereAutoBillBatchSizeGTE(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillBatchSizeGTE(b.query, v)
	return b
}

// WhereAutoBillBatchSizeLT adds a WHERE auto_bill_batch_size < ? condition
func (b *BillingControlQueryBuilder) WhereAutoBillBatchSizeLT(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillBatchSizeLT(b.query, v)
	return b
}

// WhereAutoBillBatchSizeLTE adds a WHERE auto_bill_batch_size <= ? condition
func (b *BillingControlQueryBuilder) WhereAutoBillBatchSizeLTE(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillBatchSizeLTE(b.query, v)
	return b
}

// WhereAutoBillBatchSizeIn adds a WHERE auto_bill_batch_size IN (?) condition
func (b *BillingControlQueryBuilder) WhereAutoBillBatchSizeIn(v []int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillBatchSizeIn(b.query, v)
	return b
}

// WhereAutoBillBatchSizeNotIn adds a WHERE auto_bill_batch_size NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereAutoBillBatchSizeNotIn(v []int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.AutoBillBatchSizeNotIn(b.query, v)
	return b
}

// WhereConsolidationPeriodDaysEQ adds a WHERE consolidation_period_days = ? condition
func (b *BillingControlQueryBuilder) WhereConsolidationPeriodDaysEQ(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ConsolidationPeriodDaysEQ(b.query, v)
	return b
}

// WhereConsolidationPeriodDaysNEQ adds a WHERE consolidation_period_days != ? condition
func (b *BillingControlQueryBuilder) WhereConsolidationPeriodDaysNEQ(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ConsolidationPeriodDaysNEQ(b.query, v)
	return b
}

// WhereConsolidationPeriodDaysGT adds a WHERE consolidation_period_days > ? condition
func (b *BillingControlQueryBuilder) WhereConsolidationPeriodDaysGT(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ConsolidationPeriodDaysGT(b.query, v)
	return b
}

// WhereConsolidationPeriodDaysGTE adds a WHERE consolidation_period_days >= ? condition
func (b *BillingControlQueryBuilder) WhereConsolidationPeriodDaysGTE(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ConsolidationPeriodDaysGTE(b.query, v)
	return b
}

// WhereConsolidationPeriodDaysLT adds a WHERE consolidation_period_days < ? condition
func (b *BillingControlQueryBuilder) WhereConsolidationPeriodDaysLT(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ConsolidationPeriodDaysLT(b.query, v)
	return b
}

// WhereConsolidationPeriodDaysLTE adds a WHERE consolidation_period_days <= ? condition
func (b *BillingControlQueryBuilder) WhereConsolidationPeriodDaysLTE(v int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ConsolidationPeriodDaysLTE(b.query, v)
	return b
}

// WhereConsolidationPeriodDaysIn adds a WHERE consolidation_period_days IN (?) condition
func (b *BillingControlQueryBuilder) WhereConsolidationPeriodDaysIn(v []int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ConsolidationPeriodDaysIn(b.query, v)
	return b
}

// WhereConsolidationPeriodDaysNotIn adds a WHERE consolidation_period_days NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereConsolidationPeriodDaysNotIn(v []int) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.ConsolidationPeriodDaysNotIn(b.query, v)
	return b
}

// WhereRateDiscrepancyThresholdEQ adds a WHERE rate_discrepancy_threshold = ? condition
func (b *BillingControlQueryBuilder) WhereRateDiscrepancyThresholdEQ(v float64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.RateDiscrepancyThresholdEQ(b.query, v)
	return b
}

// WhereRateDiscrepancyThresholdNEQ adds a WHERE rate_discrepancy_threshold != ? condition
func (b *BillingControlQueryBuilder) WhereRateDiscrepancyThresholdNEQ(v float64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.RateDiscrepancyThresholdNEQ(b.query, v)
	return b
}

// WhereRateDiscrepancyThresholdGT adds a WHERE rate_discrepancy_threshold > ? condition
func (b *BillingControlQueryBuilder) WhereRateDiscrepancyThresholdGT(v float64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.RateDiscrepancyThresholdGT(b.query, v)
	return b
}

// WhereRateDiscrepancyThresholdGTE adds a WHERE rate_discrepancy_threshold >= ? condition
func (b *BillingControlQueryBuilder) WhereRateDiscrepancyThresholdGTE(v float64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.RateDiscrepancyThresholdGTE(b.query, v)
	return b
}

// WhereRateDiscrepancyThresholdLT adds a WHERE rate_discrepancy_threshold < ? condition
func (b *BillingControlQueryBuilder) WhereRateDiscrepancyThresholdLT(v float64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.RateDiscrepancyThresholdLT(b.query, v)
	return b
}

// WhereRateDiscrepancyThresholdLTE adds a WHERE rate_discrepancy_threshold <= ? condition
func (b *BillingControlQueryBuilder) WhereRateDiscrepancyThresholdLTE(v float64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.RateDiscrepancyThresholdLTE(b.query, v)
	return b
}

// WhereRateDiscrepancyThresholdIn adds a WHERE rate_discrepancy_threshold IN (?) condition
func (b *BillingControlQueryBuilder) WhereRateDiscrepancyThresholdIn(v []float64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.RateDiscrepancyThresholdIn(b.query, v)
	return b
}

// WhereRateDiscrepancyThresholdNotIn adds a WHERE rate_discrepancy_threshold NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereRateDiscrepancyThresholdNotIn(v []float64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.RateDiscrepancyThresholdNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *BillingControlQueryBuilder) WhereVersionEQ(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *BillingControlQueryBuilder) WhereVersionNEQ(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *BillingControlQueryBuilder) WhereVersionGT(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *BillingControlQueryBuilder) WhereVersionGTE(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *BillingControlQueryBuilder) WhereVersionLT(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *BillingControlQueryBuilder) WhereVersionLTE(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *BillingControlQueryBuilder) WhereVersionIn(v []int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereVersionNotIn(v []int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *BillingControlQueryBuilder) WhereCreatedAtEQ(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *BillingControlQueryBuilder) WhereCreatedAtNEQ(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *BillingControlQueryBuilder) WhereCreatedAtGT(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *BillingControlQueryBuilder) WhereCreatedAtGTE(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *BillingControlQueryBuilder) WhereCreatedAtLT(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *BillingControlQueryBuilder) WhereCreatedAtLTE(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *BillingControlQueryBuilder) WhereCreatedAtIn(v []int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereCreatedAtNotIn(v []int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *BillingControlQueryBuilder) WhereUpdatedAtEQ(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *BillingControlQueryBuilder) WhereUpdatedAtNEQ(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *BillingControlQueryBuilder) WhereUpdatedAtGT(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *BillingControlQueryBuilder) WhereUpdatedAtGTE(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *BillingControlQueryBuilder) WhereUpdatedAtLT(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *BillingControlQueryBuilder) WhereUpdatedAtLTE(v int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *BillingControlQueryBuilder) WhereUpdatedAtIn(v []int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *BillingControlQueryBuilder) WhereUpdatedAtNotIn(v []int64) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *BillingControlQueryBuilder) WhereTenant(orgID, buID pulid.ID) *BillingControlQueryBuilder {
	b.query = BillingControlQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *BillingControlQueryBuilder) WhereGroup(sep string, fn func(*BillingControlQueryBuilder) *BillingControlQueryBuilder) *BillingControlQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &BillingControlQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *BillingControlQueryBuilder) Where(query string, args ...interface{}) *BillingControlQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *BillingControlQueryBuilder) OrderBy(column string, desc ...bool) *BillingControlQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(BillingControlQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *BillingControlQueryBuilder) Limit(n int) *BillingControlQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *BillingControlQueryBuilder) Offset(n int) *BillingControlQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *BillingControlQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *BillingControlQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *BillingControlQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *BillingControlQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *BillingControlQueryBuilder) All(ctx context.Context) ([]*BillingControl, error) {
	var entities []*BillingControl
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *BillingControlQueryBuilder) AllWithCount(ctx context.Context) ([]*BillingControl, int, error) {
	var entities []*BillingControl
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *BillingControlQueryBuilder) One(ctx context.Context) (*BillingControl, error) {
	entity := new(BillingControl)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *BillingControlQueryBuilder) First(ctx context.Context) (*BillingControl, error) {
	entity := new(BillingControl)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// BillingControlBuild creates a chainable query builder
func BillingControlBuild(db bun.IDB) *BillingControlQueryBuilder {
	return NewBillingControlQuery(db)
}
