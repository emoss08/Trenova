// Code generated by gen-trenova. DO NOT EDIT.

package fleetcode

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/shopspring/decimal"
	"github.com/uptrace/bun"
)

// fleetCodeFieldConfig provides field configuration for FleetCode
type fleetCodeFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// FleetCodeQuery provides type-safe query helpers and constants
var FleetCodeQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		OrganizationID string
		BusinessUnitID string
		ManagerID      string
		Status         string
		Name           string
		Description    string
		RevenueGoal    string
		DeadheadGoal   string
		MileageGoal    string
		Color          string
		Version        string
		CreatedAt      string
		UpdatedAt      string
		SearchVector   string
		Rank           string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ManagerIDEQ           func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ManagerIDNEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ManagerIDIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ManagerIDIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ              func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ             func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RevenueGoalEQ         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalNEQ        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalIn         func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalNotIn      func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalGT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalGTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalLT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalLTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RevenueGoalIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		DeadheadGoalEQ        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalNEQ       func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalIn        func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalNotIn     func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalGT        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalGTE       func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalLT        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalLTE       func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		DeadheadGoalIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		MileageGoalEQ         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalNEQ        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalIn         func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		MileageGoalNotIn      func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		MileageGoalGT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalGTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalLT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalLTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		MileageGoalIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		ColorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]fleetCodeFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "fleet_codes",
	Alias:    "fc",
	IDPrefix: "fc_",

	// Field names
	Field: struct {
		ID             string
		OrganizationID string
		BusinessUnitID string
		ManagerID      string
		Status         string
		Name           string
		Description    string
		RevenueGoal    string
		DeadheadGoal   string
		MileageGoal    string
		Color          string
		Version        string
		CreatedAt      string
		UpdatedAt      string
		SearchVector   string
		Rank           string
	}{
		ID:             "id",
		OrganizationID: "organization_id",
		BusinessUnitID: "business_unit_id",
		ManagerID:      "manager_id",
		Status:         "status",
		Name:           "name",
		Description:    "description",
		RevenueGoal:    "revenue_goal",
		DeadheadGoal:   "deadhead_goal",
		MileageGoal:    "mileage_goal",
		Color:          "color",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
		SearchVector:   "search_vector",
		Rank:           "rank",
	},

	// Column helpers
	Column: func(field string) string {
		return "fc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "fc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ManagerIDEQ           func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ManagerIDNEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ManagerIDIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ManagerIDIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ              func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ             func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RevenueGoalEQ         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalNEQ        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalIn         func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalNotIn      func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalGT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalGTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalLT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalLTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		RevenueGoalIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RevenueGoalIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		DeadheadGoalEQ        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalNEQ       func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalIn        func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalNotIn     func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalGT        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalGTE       func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalLT        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalLTE       func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		DeadheadGoalIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		DeadheadGoalIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		MileageGoalEQ         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalNEQ        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalIn         func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		MileageGoalNotIn      func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		MileageGoalGT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalGTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalLT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalLTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		MileageGoalIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		MileageGoalIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		ColorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		Tenant                func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.organization_id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.business_unit_id"), v)
		},
		ManagerIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.manager_id"), v)
		},
		ManagerIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.manager_id"), v)
		},
		ManagerIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("fc.manager_id"))
		},
		ManagerIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("fc.manager_id"))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.status"), v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.description"), "%"+v)
		},
		RevenueGoalEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.revenue_goal"), v)
		},
		RevenueGoalNEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.revenue_goal"), v)
		},
		RevenueGoalIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.revenue_goal"), bun.In(v))
		},
		RevenueGoalNotIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.revenue_goal"), bun.In(v))
		},
		RevenueGoalGT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.revenue_goal"), v)
		},
		RevenueGoalGTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.revenue_goal"), v)
		},
		RevenueGoalLT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.revenue_goal"), v)
		},
		RevenueGoalLTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.revenue_goal"), v)
		},
		RevenueGoalIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("fc.revenue_goal"))
		},
		RevenueGoalIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("fc.revenue_goal"))
		},
		DeadheadGoalEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.deadhead_goal"), v)
		},
		DeadheadGoalNEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.deadhead_goal"), v)
		},
		DeadheadGoalIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.deadhead_goal"), bun.In(v))
		},
		DeadheadGoalNotIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.deadhead_goal"), bun.In(v))
		},
		DeadheadGoalGT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.deadhead_goal"), v)
		},
		DeadheadGoalGTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.deadhead_goal"), v)
		},
		DeadheadGoalLT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.deadhead_goal"), v)
		},
		DeadheadGoalLTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.deadhead_goal"), v)
		},
		DeadheadGoalIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("fc.deadhead_goal"))
		},
		DeadheadGoalIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("fc.deadhead_goal"))
		},
		MileageGoalEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.mileage_goal"), v)
		},
		MileageGoalNEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.mileage_goal"), v)
		},
		MileageGoalIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.mileage_goal"), bun.In(v))
		},
		MileageGoalNotIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.mileage_goal"), bun.In(v))
		},
		MileageGoalGT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.mileage_goal"), v)
		},
		MileageGoalGTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.mileage_goal"), v)
		},
		MileageGoalLT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.mileage_goal"), v)
		},
		MileageGoalLTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.mileage_goal"), v)
		},
		MileageGoalIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("fc.mileage_goal"))
		},
		MileageGoalIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("fc.mileage_goal"))
		},
		ColorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.color"), v)
		},
		ColorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.color"), v)
		},
		ColorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.color"), bun.In(v))
		},
		ColorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.color"), bun.In(v))
		},
		ColorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.color"), v)
		},
		ColorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.color"), v)
		},
		ColorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.color"), v)
		},
		ColorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.color"), v)
		},
		ColorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.color"), "%"+v+"%")
		},
		ColorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.color"), v+"%")
		},
		ColorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.color"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.updated_at"), v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("fc.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("fc.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("fc.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("fc.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("fc.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("fc.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("fc.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("fc.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("fc.rank"), "%"+v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("fc.organization_id"), orgID).
				Where("? = ?", bun.Ident("fc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("fc.id"), id).
				Where("? = ?", bun.Ident("fc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "fc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"fc.status ASC",
				"fc.name ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "fc.status DESC"
			}
			return "fc.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "fc.created_at DESC"
			}
			return "fc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "fc.updated_at DESC"
			}
			return "fc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]fleetCodeFieldConfig {
		return map[string]fleetCodeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "fc.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "fc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "fc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"manager_id": {
				Name:       "manager_id",
				Column:     "fc.manager_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "fc.status",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "fc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "fc.description",
				Sortable:   false,
				Filterable: false,
			},
			"revenue_goal": {
				Name:       "revenue_goal",
				Column:     "fc.revenue_goal",
				Sortable:   false,
				Filterable: false,
			},
			"deadhead_goal": {
				Name:       "deadhead_goal",
				Column:     "fc.deadhead_goal",
				Sortable:   false,
				Filterable: false,
			},
			"mileage_goal": {
				Name:       "mileage_goal",
				Column:     "fc.mileage_goal",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "fc.color",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "fc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "fc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "fc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "fc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "fc.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]fleetCodeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "fc.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "fc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "fc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"manager_id": {
				Name:       "manager_id",
				Column:     "fc.manager_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "fc.status",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "fc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "fc.description",
				Sortable:   false,
				Filterable: false,
			},
			"revenue_goal": {
				Name:       "revenue_goal",
				Column:     "fc.revenue_goal",
				Sortable:   false,
				Filterable: false,
			},
			"deadhead_goal": {
				Name:       "deadhead_goal",
				Column:     "fc.deadhead_goal",
				Sortable:   false,
				Filterable: false,
			},
			"mileage_goal": {
				Name:       "mileage_goal",
				Column:     "fc.mileage_goal",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "fc.color",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "fc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "fc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "fc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "fc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "fc.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]fleetCodeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "fc.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "fc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "fc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"manager_id": {
				Name:       "manager_id",
				Column:     "fc.manager_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "fc.status",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "fc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "fc.description",
				Sortable:   false,
				Filterable: false,
			},
			"revenue_goal": {
				Name:       "revenue_goal",
				Column:     "fc.revenue_goal",
				Sortable:   false,
				Filterable: false,
			},
			"deadhead_goal": {
				Name:       "deadhead_goal",
				Column:     "fc.deadhead_goal",
				Sortable:   false,
				Filterable: false,
			},
			"mileage_goal": {
				Name:       "mileage_goal",
				Column:     "fc.mileage_goal",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "fc.color",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "fc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "fc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "fc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "fc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "fc.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// FleetCodeQueryBuilder provides a fluent interface for building queries
type FleetCodeQueryBuilder struct {
	query *bun.SelectQuery
}

// NewFleetCodeQuery creates a new query builder
func NewFleetCodeQuery(db bun.IDB) *FleetCodeQueryBuilder {
	return &FleetCodeQueryBuilder{
		query: db.NewSelect().Model((*FleetCode)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func FleetCodeFromQuery(q *bun.SelectQuery) *FleetCodeQueryBuilder {
	return &FleetCodeQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *FleetCodeQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *FleetCodeQueryBuilder) Model(model interface{}) *FleetCodeQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *FleetCodeQueryBuilder) WhereIDEQ(v pulid.ID) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *FleetCodeQueryBuilder) WhereIDNEQ(v pulid.ID) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *FleetCodeQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *FleetCodeQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *FleetCodeQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *FleetCodeQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereManagerIDEQ adds a WHERE manager_id = ? condition
func (b *FleetCodeQueryBuilder) WhereManagerIDEQ(v *pulid.ID) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.ManagerIDEQ(b.query, v)
	return b
}

// WhereManagerIDNEQ adds a WHERE manager_id != ? condition
func (b *FleetCodeQueryBuilder) WhereManagerIDNEQ(v *pulid.ID) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.ManagerIDNEQ(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *FleetCodeQueryBuilder) WhereStatusEQ(v domain.Status) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *FleetCodeQueryBuilder) WhereStatusNEQ(v domain.Status) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *FleetCodeQueryBuilder) WhereNameEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *FleetCodeQueryBuilder) WhereNameNEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *FleetCodeQueryBuilder) WhereNameIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereNameNotIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereNameContains(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereNameHasPrefix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereNameHasSuffix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *FleetCodeQueryBuilder) WhereDescriptionEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *FleetCodeQueryBuilder) WhereDescriptionNEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *FleetCodeQueryBuilder) WhereDescriptionIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereDescriptionNotIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereDescriptionContains(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereDescriptionHasPrefix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereDescriptionHasSuffix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereRevenueGoalEQ adds a WHERE revenue_goal = ? condition
func (b *FleetCodeQueryBuilder) WhereRevenueGoalEQ(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RevenueGoalEQ(b.query, v)
	return b
}

// WhereRevenueGoalNEQ adds a WHERE revenue_goal != ? condition
func (b *FleetCodeQueryBuilder) WhereRevenueGoalNEQ(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RevenueGoalNEQ(b.query, v)
	return b
}

// WhereRevenueGoalGT adds a WHERE revenue_goal > ? condition
func (b *FleetCodeQueryBuilder) WhereRevenueGoalGT(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RevenueGoalGT(b.query, v)
	return b
}

// WhereRevenueGoalGTE adds a WHERE revenue_goal >= ? condition
func (b *FleetCodeQueryBuilder) WhereRevenueGoalGTE(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RevenueGoalGTE(b.query, v)
	return b
}

// WhereRevenueGoalLT adds a WHERE revenue_goal < ? condition
func (b *FleetCodeQueryBuilder) WhereRevenueGoalLT(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RevenueGoalLT(b.query, v)
	return b
}

// WhereRevenueGoalLTE adds a WHERE revenue_goal <= ? condition
func (b *FleetCodeQueryBuilder) WhereRevenueGoalLTE(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RevenueGoalLTE(b.query, v)
	return b
}

// WhereRevenueGoalIn adds a WHERE revenue_goal IN (?) condition
func (b *FleetCodeQueryBuilder) WhereRevenueGoalIn(v []decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RevenueGoalIn(b.query, v)
	return b
}

// WhereRevenueGoalNotIn adds a WHERE revenue_goal NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereRevenueGoalNotIn(v []decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RevenueGoalNotIn(b.query, v)
	return b
}

// WhereDeadheadGoalEQ adds a WHERE deadhead_goal = ? condition
func (b *FleetCodeQueryBuilder) WhereDeadheadGoalEQ(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DeadheadGoalEQ(b.query, v)
	return b
}

// WhereDeadheadGoalNEQ adds a WHERE deadhead_goal != ? condition
func (b *FleetCodeQueryBuilder) WhereDeadheadGoalNEQ(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DeadheadGoalNEQ(b.query, v)
	return b
}

// WhereDeadheadGoalGT adds a WHERE deadhead_goal > ? condition
func (b *FleetCodeQueryBuilder) WhereDeadheadGoalGT(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DeadheadGoalGT(b.query, v)
	return b
}

// WhereDeadheadGoalGTE adds a WHERE deadhead_goal >= ? condition
func (b *FleetCodeQueryBuilder) WhereDeadheadGoalGTE(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DeadheadGoalGTE(b.query, v)
	return b
}

// WhereDeadheadGoalLT adds a WHERE deadhead_goal < ? condition
func (b *FleetCodeQueryBuilder) WhereDeadheadGoalLT(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DeadheadGoalLT(b.query, v)
	return b
}

// WhereDeadheadGoalLTE adds a WHERE deadhead_goal <= ? condition
func (b *FleetCodeQueryBuilder) WhereDeadheadGoalLTE(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DeadheadGoalLTE(b.query, v)
	return b
}

// WhereDeadheadGoalIn adds a WHERE deadhead_goal IN (?) condition
func (b *FleetCodeQueryBuilder) WhereDeadheadGoalIn(v []decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DeadheadGoalIn(b.query, v)
	return b
}

// WhereDeadheadGoalNotIn adds a WHERE deadhead_goal NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereDeadheadGoalNotIn(v []decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.DeadheadGoalNotIn(b.query, v)
	return b
}

// WhereMileageGoalEQ adds a WHERE mileage_goal = ? condition
func (b *FleetCodeQueryBuilder) WhereMileageGoalEQ(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.MileageGoalEQ(b.query, v)
	return b
}

// WhereMileageGoalNEQ adds a WHERE mileage_goal != ? condition
func (b *FleetCodeQueryBuilder) WhereMileageGoalNEQ(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.MileageGoalNEQ(b.query, v)
	return b
}

// WhereMileageGoalGT adds a WHERE mileage_goal > ? condition
func (b *FleetCodeQueryBuilder) WhereMileageGoalGT(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.MileageGoalGT(b.query, v)
	return b
}

// WhereMileageGoalGTE adds a WHERE mileage_goal >= ? condition
func (b *FleetCodeQueryBuilder) WhereMileageGoalGTE(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.MileageGoalGTE(b.query, v)
	return b
}

// WhereMileageGoalLT adds a WHERE mileage_goal < ? condition
func (b *FleetCodeQueryBuilder) WhereMileageGoalLT(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.MileageGoalLT(b.query, v)
	return b
}

// WhereMileageGoalLTE adds a WHERE mileage_goal <= ? condition
func (b *FleetCodeQueryBuilder) WhereMileageGoalLTE(v decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.MileageGoalLTE(b.query, v)
	return b
}

// WhereMileageGoalIn adds a WHERE mileage_goal IN (?) condition
func (b *FleetCodeQueryBuilder) WhereMileageGoalIn(v []decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.MileageGoalIn(b.query, v)
	return b
}

// WhereMileageGoalNotIn adds a WHERE mileage_goal NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereMileageGoalNotIn(v []decimal.NullDecimal) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.MileageGoalNotIn(b.query, v)
	return b
}

// WhereColorEQ adds a WHERE color = ? condition
func (b *FleetCodeQueryBuilder) WhereColorEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.ColorEQ(b.query, v)
	return b
}

// WhereColorNEQ adds a WHERE color != ? condition
func (b *FleetCodeQueryBuilder) WhereColorNEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.ColorNEQ(b.query, v)
	return b
}

// WhereColorIn adds a WHERE color IN (?) condition
func (b *FleetCodeQueryBuilder) WhereColorIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.ColorIn(b.query, v)
	return b
}

// WhereColorNotIn adds a WHERE color NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereColorNotIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.ColorNotIn(b.query, v)
	return b
}

// WhereColorContains adds a WHERE color LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereColorContains(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.ColorContains(b.query, v)
	return b
}

// WhereColorHasPrefix adds a WHERE color LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereColorHasPrefix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.ColorHasPrefix(b.query, v)
	return b
}

// WhereColorHasSuffix adds a WHERE color LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereColorHasSuffix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.ColorHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *FleetCodeQueryBuilder) WhereVersionEQ(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *FleetCodeQueryBuilder) WhereVersionNEQ(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *FleetCodeQueryBuilder) WhereVersionGT(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *FleetCodeQueryBuilder) WhereVersionGTE(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *FleetCodeQueryBuilder) WhereVersionLT(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *FleetCodeQueryBuilder) WhereVersionLTE(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *FleetCodeQueryBuilder) WhereVersionIn(v []int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereVersionNotIn(v []int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *FleetCodeQueryBuilder) WhereCreatedAtEQ(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *FleetCodeQueryBuilder) WhereCreatedAtNEQ(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *FleetCodeQueryBuilder) WhereCreatedAtGT(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *FleetCodeQueryBuilder) WhereCreatedAtGTE(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *FleetCodeQueryBuilder) WhereCreatedAtLT(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *FleetCodeQueryBuilder) WhereCreatedAtLTE(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *FleetCodeQueryBuilder) WhereCreatedAtIn(v []int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereCreatedAtNotIn(v []int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *FleetCodeQueryBuilder) WhereUpdatedAtEQ(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *FleetCodeQueryBuilder) WhereUpdatedAtNEQ(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *FleetCodeQueryBuilder) WhereUpdatedAtGT(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *FleetCodeQueryBuilder) WhereUpdatedAtGTE(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *FleetCodeQueryBuilder) WhereUpdatedAtLT(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *FleetCodeQueryBuilder) WhereUpdatedAtLTE(v int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *FleetCodeQueryBuilder) WhereUpdatedAtIn(v []int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereUpdatedAtNotIn(v []int64) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *FleetCodeQueryBuilder) WhereSearchVectorEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *FleetCodeQueryBuilder) WhereSearchVectorNEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *FleetCodeQueryBuilder) WhereSearchVectorIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereSearchVectorNotIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereSearchVectorContains(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereSearchVectorHasPrefix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereSearchVectorHasSuffix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *FleetCodeQueryBuilder) WhereRankEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *FleetCodeQueryBuilder) WhereRankNEQ(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *FleetCodeQueryBuilder) WhereRankIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *FleetCodeQueryBuilder) WhereRankNotIn(v []string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereRankContains(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereRankHasPrefix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *FleetCodeQueryBuilder) WhereRankHasSuffix(v string) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *FleetCodeQueryBuilder) WhereTenant(orgID, buID pulid.ID) *FleetCodeQueryBuilder {
	b.query = FleetCodeQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *FleetCodeQueryBuilder) WhereGroup(sep string, fn func(*FleetCodeQueryBuilder) *FleetCodeQueryBuilder) *FleetCodeQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &FleetCodeQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *FleetCodeQueryBuilder) Where(query string, args ...interface{}) *FleetCodeQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *FleetCodeQueryBuilder) OrderBy(column string, desc ...bool) *FleetCodeQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(FleetCodeQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *FleetCodeQueryBuilder) Limit(n int) *FleetCodeQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *FleetCodeQueryBuilder) Offset(n int) *FleetCodeQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *FleetCodeQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *FleetCodeQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *FleetCodeQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *FleetCodeQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *FleetCodeQueryBuilder) All(ctx context.Context) ([]*FleetCode, error) {
	var entities []*FleetCode
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *FleetCodeQueryBuilder) AllWithCount(ctx context.Context) ([]*FleetCode, int, error) {
	var entities []*FleetCode
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *FleetCodeQueryBuilder) One(ctx context.Context) (*FleetCode, error) {
	entity := new(FleetCode)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *FleetCodeQueryBuilder) First(ctx context.Context) (*FleetCode, error) {
	entity := new(FleetCode)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// FleetCodeBuild creates a chainable query builder
func FleetCodeBuild(db bun.IDB) *FleetCodeQueryBuilder {
	return NewFleetCodeQuery(db)
}
