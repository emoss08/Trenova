// Code generated by gen-trenova. DO NOT EDIT.

package reportmetadata

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// reportMetadataFieldConfig provides field configuration for ReportMetadata
type reportMetadataFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ReportMetadataQuery provides type-safe query helpers and constants
var ReportMetadataQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		Name              string
		Description       string
		VisualizationType string
		Tags              string
		CreatedBy         string
		IsSystemDefined   string
		IsScheduled       string
		ScheduleCron      string
		Version           string
		CreatedAt         string
		UpdatedAt         string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VisualizationTypeEQ   func(q *bun.SelectQuery, v VisualizationType) *bun.SelectQuery
		VisualizationTypeNEQ  func(q *bun.SelectQuery, v VisualizationType) *bun.SelectQuery
		TagsEQ                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsNEQ               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CreatedByEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CreatedByNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IsSystemDefinedEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemDefinedNEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsScheduledEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsScheduledNEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ScheduleCronEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ScheduleCronNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ScheduleCronGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]reportMetadataFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "report_metadata",
	Alias:    "rpt",
	IDPrefix: "rpt_",

	// Field names
	Field: struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		Name              string
		Description       string
		VisualizationType string
		Tags              string
		CreatedBy         string
		IsSystemDefined   string
		IsScheduled       string
		ScheduleCron      string
		Version           string
		CreatedAt         string
		UpdatedAt         string
	}{
		ID:                "id",
		BusinessUnitID:    "business_unit_id",
		OrganizationID:    "organization_id",
		Name:              "name",
		Description:       "description",
		VisualizationType: "visualization_type",
		Tags:              "tags",
		CreatedBy:         "created_by",
		IsSystemDefined:   "is_system_defined",
		IsScheduled:       "is_scheduled",
		ScheduleCron:      "schedule_cron",
		Version:           "version",
		CreatedAt:         "created_at",
		UpdatedAt:         "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "rpt." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "rpt." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VisualizationTypeEQ   func(q *bun.SelectQuery, v VisualizationType) *bun.SelectQuery
		VisualizationTypeNEQ  func(q *bun.SelectQuery, v VisualizationType) *bun.SelectQuery
		TagsEQ                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsNEQ               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CreatedByEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CreatedByNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IsSystemDefinedEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemDefinedNEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsScheduledEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsScheduledNEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ScheduleCronEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ScheduleCronNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ScheduleCronGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScheduleCronHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.organization_id"), v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rpt.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rpt.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rpt.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rpt.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rpt.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rpt.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rpt.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rpt.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rpt.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rpt.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rpt.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rpt.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rpt.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rpt.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rpt.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rpt.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rpt.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rpt.description"), "%"+v)
		},
		VisualizationTypeEQ: func(q *bun.SelectQuery, v VisualizationType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.visualization_type"), v)
		},
		VisualizationTypeNEQ: func(q *bun.SelectQuery, v VisualizationType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.visualization_type"), v)
		},
		TagsEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.tags"), v)
		},
		TagsNEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.tags"), v)
		},
		CreatedByEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.created_by"), v)
		},
		CreatedByNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.created_by"), v)
		},
		IsSystemDefinedEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.is_system_defined"), v)
		},
		IsSystemDefinedNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.is_system_defined"), v)
		},
		IsScheduledEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.is_scheduled"), v)
		},
		IsScheduledNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.is_scheduled"), v)
		},
		ScheduleCronEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.schedule_cron"), v)
		},
		ScheduleCronNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.schedule_cron"), v)
		},
		ScheduleCronIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rpt.schedule_cron"), bun.In(v))
		},
		ScheduleCronNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rpt.schedule_cron"), bun.In(v))
		},
		ScheduleCronGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rpt.schedule_cron"), v)
		},
		ScheduleCronGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rpt.schedule_cron"), v)
		},
		ScheduleCronLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rpt.schedule_cron"), v)
		},
		ScheduleCronLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rpt.schedule_cron"), v)
		},
		ScheduleCronContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rpt.schedule_cron"), "%"+v+"%")
		},
		ScheduleCronHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rpt.schedule_cron"), v+"%")
		},
		ScheduleCronHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rpt.schedule_cron"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rpt.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rpt.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rpt.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rpt.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rpt.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rpt.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rpt.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rpt.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rpt.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rpt.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rpt.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rpt.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rpt.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rpt.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rpt.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rpt.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rpt.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rpt.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rpt.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rpt.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("rpt.organization_id"), orgID).
				Where("? = ?", bun.Ident("rpt.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("rpt.id"), id).
				Where("? = ?", bun.Ident("rpt.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "rpt." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"rpt.name ASC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "rpt.created_at DESC"
			}
			return "rpt.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "rpt.updated_at DESC"
			}
			return "rpt.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]reportMetadataFieldConfig {
		return map[string]reportMetadataFieldConfig{
			"id": {
				Name:       "id",
				Column:     "rpt.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "rpt.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "rpt.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "rpt.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "rpt.description",
				Sortable:   false,
				Filterable: true,
			},
			"visualization_type": {
				Name:       "visualization_type",
				Column:     "rpt.visualization_type",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "rpt.tags",
				Sortable:   false,
				Filterable: false,
			},
			"created_by": {
				Name:       "created_by",
				Column:     "rpt.created_by",
				Sortable:   false,
				Filterable: false,
			},
			"is_system_defined": {
				Name:       "is_system_defined",
				Column:     "rpt.is_system_defined",
				Sortable:   false,
				Filterable: false,
			},
			"is_scheduled": {
				Name:       "is_scheduled",
				Column:     "rpt.is_scheduled",
				Sortable:   false,
				Filterable: false,
			},
			"schedule_cron": {
				Name:       "schedule_cron",
				Column:     "rpt.schedule_cron",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "rpt.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "rpt.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "rpt.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]reportMetadataFieldConfig{
			"id": {
				Name:       "id",
				Column:     "rpt.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "rpt.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "rpt.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "rpt.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "rpt.description",
				Sortable:   false,
				Filterable: true,
			},
			"visualization_type": {
				Name:       "visualization_type",
				Column:     "rpt.visualization_type",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "rpt.tags",
				Sortable:   false,
				Filterable: false,
			},
			"created_by": {
				Name:       "created_by",
				Column:     "rpt.created_by",
				Sortable:   false,
				Filterable: false,
			},
			"is_system_defined": {
				Name:       "is_system_defined",
				Column:     "rpt.is_system_defined",
				Sortable:   false,
				Filterable: false,
			},
			"is_scheduled": {
				Name:       "is_scheduled",
				Column:     "rpt.is_scheduled",
				Sortable:   false,
				Filterable: false,
			},
			"schedule_cron": {
				Name:       "schedule_cron",
				Column:     "rpt.schedule_cron",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "rpt.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "rpt.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "rpt.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]reportMetadataFieldConfig{
			"id": {
				Name:       "id",
				Column:     "rpt.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "rpt.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "rpt.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "rpt.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "rpt.description",
				Sortable:   false,
				Filterable: true,
			},
			"visualization_type": {
				Name:       "visualization_type",
				Column:     "rpt.visualization_type",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "rpt.tags",
				Sortable:   false,
				Filterable: false,
			},
			"created_by": {
				Name:       "created_by",
				Column:     "rpt.created_by",
				Sortable:   false,
				Filterable: false,
			},
			"is_system_defined": {
				Name:       "is_system_defined",
				Column:     "rpt.is_system_defined",
				Sortable:   false,
				Filterable: false,
			},
			"is_scheduled": {
				Name:       "is_scheduled",
				Column:     "rpt.is_scheduled",
				Sortable:   false,
				Filterable: false,
			},
			"schedule_cron": {
				Name:       "schedule_cron",
				Column:     "rpt.schedule_cron",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "rpt.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "rpt.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "rpt.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// ReportMetadataQueryBuilder provides a fluent interface for building queries
type ReportMetadataQueryBuilder struct {
	query *bun.SelectQuery
}

// NewReportMetadataQuery creates a new query builder
func NewReportMetadataQuery(db bun.IDB) *ReportMetadataQueryBuilder {
	return &ReportMetadataQueryBuilder{
		query: db.NewSelect().Model((*ReportMetadata)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ReportMetadataFromQuery(q *bun.SelectQuery) *ReportMetadataQueryBuilder {
	return &ReportMetadataQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ReportMetadataQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ReportMetadataQueryBuilder) Model(model interface{}) *ReportMetadataQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ReportMetadataQueryBuilder) WhereIDEQ(v pulid.ID) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ReportMetadataQueryBuilder) WhereIDNEQ(v pulid.ID) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ReportMetadataQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ReportMetadataQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ReportMetadataQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ReportMetadataQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *ReportMetadataQueryBuilder) WhereNameEQ(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *ReportMetadataQueryBuilder) WhereNameNEQ(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereNameIn(v []string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereNameNotIn(v []string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *ReportMetadataQueryBuilder) WhereNameContains(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *ReportMetadataQueryBuilder) WhereNameHasPrefix(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *ReportMetadataQueryBuilder) WhereNameHasSuffix(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *ReportMetadataQueryBuilder) WhereDescriptionEQ(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *ReportMetadataQueryBuilder) WhereDescriptionNEQ(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereDescriptionIn(v []string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereDescriptionNotIn(v []string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *ReportMetadataQueryBuilder) WhereDescriptionContains(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *ReportMetadataQueryBuilder) WhereDescriptionHasPrefix(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *ReportMetadataQueryBuilder) WhereDescriptionHasSuffix(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereVisualizationTypeEQ adds a WHERE visualization_type = ? condition
func (b *ReportMetadataQueryBuilder) WhereVisualizationTypeEQ(v VisualizationType) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VisualizationTypeEQ(b.query, v)
	return b
}

// WhereVisualizationTypeNEQ adds a WHERE visualization_type != ? condition
func (b *ReportMetadataQueryBuilder) WhereVisualizationTypeNEQ(v VisualizationType) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VisualizationTypeNEQ(b.query, v)
	return b
}

// WhereTagsEQ adds a WHERE tags = ? condition
func (b *ReportMetadataQueryBuilder) WhereTagsEQ(v []string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.TagsEQ(b.query, v)
	return b
}

// WhereTagsNEQ adds a WHERE tags != ? condition
func (b *ReportMetadataQueryBuilder) WhereTagsNEQ(v []string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.TagsNEQ(b.query, v)
	return b
}

// WhereCreatedByEQ adds a WHERE created_by = ? condition
func (b *ReportMetadataQueryBuilder) WhereCreatedByEQ(v pulid.ID) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedByEQ(b.query, v)
	return b
}

// WhereCreatedByNEQ adds a WHERE created_by != ? condition
func (b *ReportMetadataQueryBuilder) WhereCreatedByNEQ(v pulid.ID) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedByNEQ(b.query, v)
	return b
}

// WhereIsSystemDefinedEQ adds a WHERE is_system_defined = ? condition
func (b *ReportMetadataQueryBuilder) WhereIsSystemDefinedEQ(v bool) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.IsSystemDefinedEQ(b.query, v)
	return b
}

// WhereIsSystemDefinedNEQ adds a WHERE is_system_defined != ? condition
func (b *ReportMetadataQueryBuilder) WhereIsSystemDefinedNEQ(v bool) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.IsSystemDefinedNEQ(b.query, v)
	return b
}

// WhereIsScheduledEQ adds a WHERE is_scheduled = ? condition
func (b *ReportMetadataQueryBuilder) WhereIsScheduledEQ(v bool) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.IsScheduledEQ(b.query, v)
	return b
}

// WhereIsScheduledNEQ adds a WHERE is_scheduled != ? condition
func (b *ReportMetadataQueryBuilder) WhereIsScheduledNEQ(v bool) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.IsScheduledNEQ(b.query, v)
	return b
}

// WhereScheduleCronEQ adds a WHERE schedule_cron = ? condition
func (b *ReportMetadataQueryBuilder) WhereScheduleCronEQ(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.ScheduleCronEQ(b.query, v)
	return b
}

// WhereScheduleCronNEQ adds a WHERE schedule_cron != ? condition
func (b *ReportMetadataQueryBuilder) WhereScheduleCronNEQ(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.ScheduleCronNEQ(b.query, v)
	return b
}

// WhereScheduleCronIn adds a WHERE schedule_cron IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereScheduleCronIn(v []string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.ScheduleCronIn(b.query, v)
	return b
}

// WhereScheduleCronNotIn adds a WHERE schedule_cron NOT IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereScheduleCronNotIn(v []string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.ScheduleCronNotIn(b.query, v)
	return b
}

// WhereScheduleCronContains adds a WHERE schedule_cron LIKE ? condition
func (b *ReportMetadataQueryBuilder) WhereScheduleCronContains(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.ScheduleCronContains(b.query, v)
	return b
}

// WhereScheduleCronHasPrefix adds a WHERE schedule_cron LIKE ? condition
func (b *ReportMetadataQueryBuilder) WhereScheduleCronHasPrefix(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.ScheduleCronHasPrefix(b.query, v)
	return b
}

// WhereScheduleCronHasSuffix adds a WHERE schedule_cron LIKE ? condition
func (b *ReportMetadataQueryBuilder) WhereScheduleCronHasSuffix(v string) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.ScheduleCronHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ReportMetadataQueryBuilder) WhereVersionEQ(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ReportMetadataQueryBuilder) WhereVersionNEQ(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ReportMetadataQueryBuilder) WhereVersionGT(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ReportMetadataQueryBuilder) WhereVersionGTE(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ReportMetadataQueryBuilder) WhereVersionLT(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ReportMetadataQueryBuilder) WhereVersionLTE(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereVersionIn(v []int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereVersionNotIn(v []int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ReportMetadataQueryBuilder) WhereCreatedAtEQ(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ReportMetadataQueryBuilder) WhereCreatedAtNEQ(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ReportMetadataQueryBuilder) WhereCreatedAtGT(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ReportMetadataQueryBuilder) WhereCreatedAtGTE(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ReportMetadataQueryBuilder) WhereCreatedAtLT(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ReportMetadataQueryBuilder) WhereCreatedAtLTE(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereCreatedAtIn(v []int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereCreatedAtNotIn(v []int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ReportMetadataQueryBuilder) WhereUpdatedAtEQ(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ReportMetadataQueryBuilder) WhereUpdatedAtNEQ(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ReportMetadataQueryBuilder) WhereUpdatedAtGT(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ReportMetadataQueryBuilder) WhereUpdatedAtGTE(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ReportMetadataQueryBuilder) WhereUpdatedAtLT(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ReportMetadataQueryBuilder) WhereUpdatedAtLTE(v int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereUpdatedAtIn(v []int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ReportMetadataQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ReportMetadataQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ReportMetadataQueryBuilder {
	b.query = ReportMetadataQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ReportMetadataQueryBuilder) WhereGroup(sep string, fn func(*ReportMetadataQueryBuilder) *ReportMetadataQueryBuilder) *ReportMetadataQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ReportMetadataQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ReportMetadataQueryBuilder) Where(query string, args ...interface{}) *ReportMetadataQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ReportMetadataQueryBuilder) OrderBy(column string, desc ...bool) *ReportMetadataQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ReportMetadataQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ReportMetadataQueryBuilder) Limit(n int) *ReportMetadataQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ReportMetadataQueryBuilder) Offset(n int) *ReportMetadataQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ReportMetadataQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ReportMetadataQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ReportMetadataQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ReportMetadataQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ReportMetadataQueryBuilder) All(ctx context.Context) ([]*ReportMetadata, error) {
	var entities []*ReportMetadata
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ReportMetadataQueryBuilder) AllWithCount(ctx context.Context) ([]*ReportMetadata, int, error) {
	var entities []*ReportMetadata
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ReportMetadataQueryBuilder) One(ctx context.Context) (*ReportMetadata, error) {
	entity := new(ReportMetadata)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ReportMetadataQueryBuilder) First(ctx context.Context) (*ReportMetadata, error) {
	entity := new(ReportMetadata)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ReportMetadataBuild creates a chainable query builder
func ReportMetadataBuild(db bun.IDB) *ReportMetadataQueryBuilder {
	return NewReportMetadataQuery(db)
}
