/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package equipmenttype

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// equipmentTypeFieldConfig provides field configuration for EquipmentType
type equipmentTypeFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// EquipmentTypeQuery provides type-safe query helpers and constants
var EquipmentTypeQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		Status         string
		Code           string
		Description    string
		Class          string
		Color          string
		Version        string
		CreatedAt      string
		UpdatedAt      string
		SearchVector   string
		Rank           string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ              func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ             func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn              func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn           func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CodeEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ClassEQ               func(q *bun.SelectQuery, v Class) *bun.SelectQuery
		ClassNEQ              func(q *bun.SelectQuery, v Class) *bun.SelectQuery
		ClassIn               func(q *bun.SelectQuery, v []Class) *bun.SelectQuery
		ClassNotIn            func(q *bun.SelectQuery, v []Class) *bun.SelectQuery
		ColorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]equipmentTypeFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
	}
}{
	// Table and alias constants
	Table:    "equipment_types",
	Alias:    "et",
	IDPrefix: "et_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		Status         string
		Code           string
		Description    string
		Class          string
		Color          string
		Version        string
		CreatedAt      string
		UpdatedAt      string
		SearchVector   string
		Rank           string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		Status:         "status",
		Code:           "code",
		Description:    "description",
		Class:          "class",
		Color:          "color",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
		SearchVector:   "search_vector",
		Rank:           "rank",
	},

	// Column helpers
	Column: func(field string) string {
		return "et." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "et." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ              func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ             func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn              func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn           func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CodeEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ClassEQ               func(q *bun.SelectQuery, v Class) *bun.SelectQuery
		ClassNEQ              func(q *bun.SelectQuery, v Class) *bun.SelectQuery
		ClassIn               func(q *bun.SelectQuery, v []Class) *bun.SelectQuery
		ClassNotIn            func(q *bun.SelectQuery, v []Class) *bun.SelectQuery
		ColorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		Tenant                func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.organization_id"), bun.In(v))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.status"), bun.In(v))
		},
		CodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.code"), v)
		},
		CodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.code"), v)
		},
		CodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.code"), bun.In(v))
		},
		CodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.code"), bun.In(v))
		},
		CodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.code"), v)
		},
		CodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.code"), v)
		},
		CodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.code"), v)
		},
		CodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.code"), v)
		},
		CodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.code"), "%"+v+"%")
		},
		CodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.code"), v+"%")
		},
		CodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.code"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.description"), "%"+v)
		},
		ClassEQ: func(q *bun.SelectQuery, v Class) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.class"), v)
		},
		ClassNEQ: func(q *bun.SelectQuery, v Class) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.class"), v)
		},
		ClassIn: func(q *bun.SelectQuery, v []Class) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.class"), bun.In(v))
		},
		ClassNotIn: func(q *bun.SelectQuery, v []Class) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.class"), bun.In(v))
		},
		ColorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.color"), v)
		},
		ColorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.color"), v)
		},
		ColorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.color"), bun.In(v))
		},
		ColorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.color"), bun.In(v))
		},
		ColorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.color"), v)
		},
		ColorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.color"), v)
		},
		ColorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.color"), v)
		},
		ColorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.color"), v)
		},
		ColorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.color"), "%"+v+"%")
		},
		ColorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.color"), v+"%")
		},
		ColorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.color"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.updated_at"), v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.rank"), "%"+v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("et.organization_id"), orgID).
				Where("? = ?", bun.Ident("et.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("et.id"), id).
				Where("? = ?", bun.Ident("et.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "et." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"et.status ASC",
				"et.code ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "et.status DESC"
			}
			return "et.status ASC"
		},
		Code: func(desc bool) string {
			if desc {
				return "et.code DESC"
			}
			return "et.code ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "et.created_at DESC"
			}
			return "et.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "et.updated_at DESC"
			}
			return "et.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]equipmentTypeFieldConfig {
		return map[string]equipmentTypeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "et.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "et.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "et.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "et.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "et.code",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "et.description",
				Sortable:   false,
				Filterable: false,
			},
			"class": {
				Name:       "class",
				Column:     "et.class",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "et.color",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "et.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "et.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "et.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "et.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "et.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]equipmentTypeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "et.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "et.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "et.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "et.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "et.code",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "et.description",
				Sortable:   false,
				Filterable: false,
			},
			"class": {
				Name:       "class",
				Column:     "et.class",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "et.color",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "et.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "et.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "et.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "et.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "et.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]equipmentTypeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "et.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "et.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "et.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "et.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "et.code",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "et.description",
				Sortable:   false,
				Filterable: false,
			},
			"class": {
				Name:       "class",
				Column:     "et.class",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "et.color",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "et.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "et.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "et.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "et.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "et.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
	},
}

// EquipmentTypeQueryBuilder provides a fluent interface for building queries
type EquipmentTypeQueryBuilder struct {
	query *bun.SelectQuery
}

// NewEquipmentTypeQuery creates a new query builder
func NewEquipmentTypeQuery(db bun.IDB) *EquipmentTypeQueryBuilder {
	return &EquipmentTypeQueryBuilder{
		query: db.NewSelect().Model((*EquipmentType)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func EquipmentTypeFromQuery(q *bun.SelectQuery) *EquipmentTypeQueryBuilder {
	return &EquipmentTypeQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *EquipmentTypeQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *EquipmentTypeQueryBuilder) Model(model interface{}) *EquipmentTypeQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *EquipmentTypeQueryBuilder) WhereIDEQ(v pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *EquipmentTypeQueryBuilder) WhereIDNEQ(v pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereIDIn(v []pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereIDNotIn(v []pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *EquipmentTypeQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *EquipmentTypeQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *EquipmentTypeQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *EquipmentTypeQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *EquipmentTypeQueryBuilder) WhereStatusEQ(v domain.Status) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *EquipmentTypeQueryBuilder) WhereStatusNEQ(v domain.Status) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereStatusIn(v []domain.Status) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereStatusNotIn(v []domain.Status) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereCodeEQ adds a WHERE code = ? condition
func (b *EquipmentTypeQueryBuilder) WhereCodeEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CodeEQ(b.query, v)
	return b
}

// WhereCodeNEQ adds a WHERE code != ? condition
func (b *EquipmentTypeQueryBuilder) WhereCodeNEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CodeNEQ(b.query, v)
	return b
}

// WhereCodeIn adds a WHERE code IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereCodeIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CodeIn(b.query, v)
	return b
}

// WhereCodeNotIn adds a WHERE code NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereCodeNotIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CodeNotIn(b.query, v)
	return b
}

// WhereCodeContains adds a WHERE code LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereCodeContains(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CodeContains(b.query, v)
	return b
}

// WhereCodeHasPrefix adds a WHERE code LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereCodeHasPrefix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CodeHasPrefix(b.query, v)
	return b
}

// WhereCodeHasSuffix adds a WHERE code LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereCodeHasSuffix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CodeHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *EquipmentTypeQueryBuilder) WhereDescriptionEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *EquipmentTypeQueryBuilder) WhereDescriptionNEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereDescriptionIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereDescriptionNotIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereDescriptionContains(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereDescriptionHasPrefix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereDescriptionHasSuffix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereClassEQ adds a WHERE class = ? condition
func (b *EquipmentTypeQueryBuilder) WhereClassEQ(v Class) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ClassEQ(b.query, v)
	return b
}

// WhereClassNEQ adds a WHERE class != ? condition
func (b *EquipmentTypeQueryBuilder) WhereClassNEQ(v Class) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ClassNEQ(b.query, v)
	return b
}

// WhereClassIn adds a WHERE class IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereClassIn(v []Class) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ClassIn(b.query, v)
	return b
}

// WhereClassNotIn adds a WHERE class NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereClassNotIn(v []Class) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ClassNotIn(b.query, v)
	return b
}

// WhereColorEQ adds a WHERE color = ? condition
func (b *EquipmentTypeQueryBuilder) WhereColorEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ColorEQ(b.query, v)
	return b
}

// WhereColorNEQ adds a WHERE color != ? condition
func (b *EquipmentTypeQueryBuilder) WhereColorNEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ColorNEQ(b.query, v)
	return b
}

// WhereColorIn adds a WHERE color IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereColorIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ColorIn(b.query, v)
	return b
}

// WhereColorNotIn adds a WHERE color NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereColorNotIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ColorNotIn(b.query, v)
	return b
}

// WhereColorContains adds a WHERE color LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereColorContains(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ColorContains(b.query, v)
	return b
}

// WhereColorHasPrefix adds a WHERE color LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereColorHasPrefix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ColorHasPrefix(b.query, v)
	return b
}

// WhereColorHasSuffix adds a WHERE color LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereColorHasSuffix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.ColorHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *EquipmentTypeQueryBuilder) WhereVersionEQ(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *EquipmentTypeQueryBuilder) WhereVersionNEQ(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *EquipmentTypeQueryBuilder) WhereVersionGT(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *EquipmentTypeQueryBuilder) WhereVersionGTE(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *EquipmentTypeQueryBuilder) WhereVersionLT(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *EquipmentTypeQueryBuilder) WhereVersionLTE(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereVersionIn(v []int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereVersionNotIn(v []int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *EquipmentTypeQueryBuilder) WhereCreatedAtEQ(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *EquipmentTypeQueryBuilder) WhereCreatedAtNEQ(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *EquipmentTypeQueryBuilder) WhereCreatedAtGT(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *EquipmentTypeQueryBuilder) WhereCreatedAtGTE(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *EquipmentTypeQueryBuilder) WhereCreatedAtLT(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *EquipmentTypeQueryBuilder) WhereCreatedAtLTE(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereCreatedAtIn(v []int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereCreatedAtNotIn(v []int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *EquipmentTypeQueryBuilder) WhereUpdatedAtEQ(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *EquipmentTypeQueryBuilder) WhereUpdatedAtNEQ(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *EquipmentTypeQueryBuilder) WhereUpdatedAtGT(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *EquipmentTypeQueryBuilder) WhereUpdatedAtGTE(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *EquipmentTypeQueryBuilder) WhereUpdatedAtLT(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *EquipmentTypeQueryBuilder) WhereUpdatedAtLTE(v int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereUpdatedAtIn(v []int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereUpdatedAtNotIn(v []int64) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *EquipmentTypeQueryBuilder) WhereSearchVectorEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *EquipmentTypeQueryBuilder) WhereSearchVectorNEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereSearchVectorIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereSearchVectorNotIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereSearchVectorContains(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereSearchVectorHasPrefix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereSearchVectorHasSuffix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *EquipmentTypeQueryBuilder) WhereRankEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *EquipmentTypeQueryBuilder) WhereRankNEQ(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereRankIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *EquipmentTypeQueryBuilder) WhereRankNotIn(v []string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereRankContains(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereRankHasPrefix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *EquipmentTypeQueryBuilder) WhereRankHasSuffix(v string) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *EquipmentTypeQueryBuilder) WhereTenant(orgID, buID pulid.ID) *EquipmentTypeQueryBuilder {
	b.query = EquipmentTypeQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *EquipmentTypeQueryBuilder) WhereGroup(sep string, fn func(*EquipmentTypeQueryBuilder) *EquipmentTypeQueryBuilder) *EquipmentTypeQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &EquipmentTypeQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *EquipmentTypeQueryBuilder) Where(query string, args ...interface{}) *EquipmentTypeQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *EquipmentTypeQueryBuilder) OrderBy(column string, desc ...bool) *EquipmentTypeQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(EquipmentTypeQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *EquipmentTypeQueryBuilder) Limit(n int) *EquipmentTypeQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *EquipmentTypeQueryBuilder) Offset(n int) *EquipmentTypeQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *EquipmentTypeQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *EquipmentTypeQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *EquipmentTypeQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *EquipmentTypeQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *EquipmentTypeQueryBuilder) All(ctx context.Context) ([]*EquipmentType, error) {
	var entities []*EquipmentType
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *EquipmentTypeQueryBuilder) AllWithCount(ctx context.Context) ([]*EquipmentType, int, error) {
	var entities []*EquipmentType
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *EquipmentTypeQueryBuilder) One(ctx context.Context) (*EquipmentType, error) {
	entity := new(EquipmentType)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *EquipmentTypeQueryBuilder) First(ctx context.Context) (*EquipmentType, error) {
	entity := new(EquipmentType)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// EquipmentTypeBuild creates a chainable query builder
func EquipmentTypeBuild(db bun.IDB) *EquipmentTypeQueryBuilder {
	return NewEquipmentTypeQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *EquipmentTypeQueryBuilder) LoadBusinessUnit() *EquipmentTypeQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *EquipmentTypeQueryBuilder) LoadOrganization() *EquipmentTypeQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for EquipmentType
func (b *EquipmentTypeQueryBuilder) LoadAllRelations() *EquipmentTypeQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	return b
}
