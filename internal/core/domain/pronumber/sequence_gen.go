// Code generated by gen-trenova. DO NOT EDIT.

package pronumber

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// sequenceFieldConfig provides field configuration for Sequence
type sequenceFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// SequenceQuery provides type-safe query helpers and constants
var SequenceQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID              string
		OrganizationID  string
		BusinessUnitID  string
		Year            string
		Month           string
		CurrentSequence string
		Version         string
		CreatedAt       string
		UpdatedAt       string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		YearEQ               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearNEQ              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearIn               func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		YearNotIn            func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		YearGT               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearGTE              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearLT               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearLTE              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthEQ              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthNEQ             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthIn              func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		MonthNotIn           func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		MonthGT              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthGTE             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthLT              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthLTE             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		CurrentSequenceEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceNEQ   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CurrentSequenceNotIn func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CurrentSequenceGT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceGTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceLT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceLTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]sequenceFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
	}
}{
	// Table and alias constants
	Table:    "pro_number_sequences",
	Alias:    "pns",
	IDPrefix: "pns_",

	// Field names
	Field: struct {
		ID              string
		OrganizationID  string
		BusinessUnitID  string
		Year            string
		Month           string
		CurrentSequence string
		Version         string
		CreatedAt       string
		UpdatedAt       string
	}{
		ID:              "id",
		OrganizationID:  "organization_id",
		BusinessUnitID:  "business_unit_id",
		Year:            "year",
		Month:           "month",
		CurrentSequence: "current_sequence",
		Version:         "version",
		CreatedAt:       "created_at",
		UpdatedAt:       "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "pns." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "pns." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		YearEQ               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearNEQ              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearIn               func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		YearNotIn            func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		YearGT               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearGTE              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearLT               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearLTE              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthEQ              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthNEQ             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthIn              func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		MonthNotIn           func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		MonthGT              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthGTE             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthLT              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthLTE             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		CurrentSequenceEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceNEQ   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CurrentSequenceNotIn func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CurrentSequenceGT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceGTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceLT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceLTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant               func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pns.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pns.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pns.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pns.id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pns.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pns.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pns.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pns.organization_id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pns.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pns.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pns.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pns.business_unit_id"), bun.In(v))
		},
		YearEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pns.year"), v)
		},
		YearNEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pns.year"), v)
		},
		YearIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pns.year"), bun.In(v))
		},
		YearNotIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pns.year"), bun.In(v))
		},
		YearGT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pns.year"), v)
		},
		YearGTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pns.year"), v)
		},
		YearLT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pns.year"), v)
		},
		YearLTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pns.year"), v)
		},
		MonthEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pns.month"), v)
		},
		MonthNEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pns.month"), v)
		},
		MonthIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pns.month"), bun.In(v))
		},
		MonthNotIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pns.month"), bun.In(v))
		},
		MonthGT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pns.month"), v)
		},
		MonthGTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pns.month"), v)
		},
		MonthLT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pns.month"), v)
		},
		MonthLTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pns.month"), v)
		},
		CurrentSequenceEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pns.current_sequence"), v)
		},
		CurrentSequenceNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pns.current_sequence"), v)
		},
		CurrentSequenceIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pns.current_sequence"), bun.In(v))
		},
		CurrentSequenceNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pns.current_sequence"), bun.In(v))
		},
		CurrentSequenceGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pns.current_sequence"), v)
		},
		CurrentSequenceGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pns.current_sequence"), v)
		},
		CurrentSequenceLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pns.current_sequence"), v)
		},
		CurrentSequenceLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pns.current_sequence"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pns.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pns.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pns.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pns.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pns.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pns.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pns.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pns.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pns.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pns.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pns.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pns.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pns.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pns.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pns.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pns.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pns.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pns.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pns.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pns.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pns.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pns.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pns.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pns.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("pns.organization_id"), orgID).
				Where("? = ?", bun.Ident("pns.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("pns.id"), id).
				Where("? = ?", bun.Ident("pns.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "pns." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"pns.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "pns.created_at DESC"
			}
			return "pns.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "pns.updated_at DESC"
			}
			return "pns.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]sequenceFieldConfig {
		return map[string]sequenceFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pns.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pns.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pns.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"year": {
				Name:       "year",
				Column:     "pns.year",
				Sortable:   false,
				Filterable: false,
			},
			"month": {
				Name:       "month",
				Column:     "pns.month",
				Sortable:   false,
				Filterable: false,
			},
			"current_sequence": {
				Name:       "current_sequence",
				Column:     "pns.current_sequence",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "pns.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pns.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pns.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]sequenceFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pns.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pns.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pns.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"year": {
				Name:       "year",
				Column:     "pns.year",
				Sortable:   false,
				Filterable: false,
			},
			"month": {
				Name:       "month",
				Column:     "pns.month",
				Sortable:   false,
				Filterable: false,
			},
			"current_sequence": {
				Name:       "current_sequence",
				Column:     "pns.current_sequence",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "pns.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pns.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pns.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]sequenceFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pns.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pns.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pns.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"year": {
				Name:       "year",
				Column:     "pns.year",
				Sortable:   false,
				Filterable: false,
			},
			"month": {
				Name:       "month",
				Column:     "pns.month",
				Sortable:   false,
				Filterable: false,
			},
			"current_sequence": {
				Name:       "current_sequence",
				Column:     "pns.current_sequence",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "pns.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pns.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pns.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
	},
}

// SequenceQueryBuilder provides a fluent interface for building queries
type SequenceQueryBuilder struct {
	query *bun.SelectQuery
}

// NewSequenceQuery creates a new query builder
func NewSequenceQuery(db bun.IDB) *SequenceQueryBuilder {
	return &SequenceQueryBuilder{
		query: db.NewSelect().Model((*Sequence)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func SequenceFromQuery(q *bun.SelectQuery) *SequenceQueryBuilder {
	return &SequenceQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *SequenceQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *SequenceQueryBuilder) Model(model interface{}) *SequenceQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *SequenceQueryBuilder) WhereIDEQ(v pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *SequenceQueryBuilder) WhereIDNEQ(v pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *SequenceQueryBuilder) WhereIDIn(v []pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *SequenceQueryBuilder) WhereIDNotIn(v []pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *SequenceQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *SequenceQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *SequenceQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *SequenceQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *SequenceQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *SequenceQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *SequenceQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *SequenceQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereYearEQ adds a WHERE year = ? condition
func (b *SequenceQueryBuilder) WhereYearEQ(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.YearEQ(b.query, v)
	return b
}

// WhereYearNEQ adds a WHERE year != ? condition
func (b *SequenceQueryBuilder) WhereYearNEQ(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.YearNEQ(b.query, v)
	return b
}

// WhereYearGT adds a WHERE year > ? condition
func (b *SequenceQueryBuilder) WhereYearGT(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.YearGT(b.query, v)
	return b
}

// WhereYearGTE adds a WHERE year >= ? condition
func (b *SequenceQueryBuilder) WhereYearGTE(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.YearGTE(b.query, v)
	return b
}

// WhereYearLT adds a WHERE year < ? condition
func (b *SequenceQueryBuilder) WhereYearLT(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.YearLT(b.query, v)
	return b
}

// WhereYearLTE adds a WHERE year <= ? condition
func (b *SequenceQueryBuilder) WhereYearLTE(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.YearLTE(b.query, v)
	return b
}

// WhereYearIn adds a WHERE year IN (?) condition
func (b *SequenceQueryBuilder) WhereYearIn(v []int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.YearIn(b.query, v)
	return b
}

// WhereYearNotIn adds a WHERE year NOT IN (?) condition
func (b *SequenceQueryBuilder) WhereYearNotIn(v []int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.YearNotIn(b.query, v)
	return b
}

// WhereMonthEQ adds a WHERE month = ? condition
func (b *SequenceQueryBuilder) WhereMonthEQ(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.MonthEQ(b.query, v)
	return b
}

// WhereMonthNEQ adds a WHERE month != ? condition
func (b *SequenceQueryBuilder) WhereMonthNEQ(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.MonthNEQ(b.query, v)
	return b
}

// WhereMonthGT adds a WHERE month > ? condition
func (b *SequenceQueryBuilder) WhereMonthGT(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.MonthGT(b.query, v)
	return b
}

// WhereMonthGTE adds a WHERE month >= ? condition
func (b *SequenceQueryBuilder) WhereMonthGTE(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.MonthGTE(b.query, v)
	return b
}

// WhereMonthLT adds a WHERE month < ? condition
func (b *SequenceQueryBuilder) WhereMonthLT(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.MonthLT(b.query, v)
	return b
}

// WhereMonthLTE adds a WHERE month <= ? condition
func (b *SequenceQueryBuilder) WhereMonthLTE(v int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.MonthLTE(b.query, v)
	return b
}

// WhereMonthIn adds a WHERE month IN (?) condition
func (b *SequenceQueryBuilder) WhereMonthIn(v []int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.MonthIn(b.query, v)
	return b
}

// WhereMonthNotIn adds a WHERE month NOT IN (?) condition
func (b *SequenceQueryBuilder) WhereMonthNotIn(v []int16) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.MonthNotIn(b.query, v)
	return b
}

// WhereCurrentSequenceEQ adds a WHERE current_sequence = ? condition
func (b *SequenceQueryBuilder) WhereCurrentSequenceEQ(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CurrentSequenceEQ(b.query, v)
	return b
}

// WhereCurrentSequenceNEQ adds a WHERE current_sequence != ? condition
func (b *SequenceQueryBuilder) WhereCurrentSequenceNEQ(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CurrentSequenceNEQ(b.query, v)
	return b
}

// WhereCurrentSequenceGT adds a WHERE current_sequence > ? condition
func (b *SequenceQueryBuilder) WhereCurrentSequenceGT(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CurrentSequenceGT(b.query, v)
	return b
}

// WhereCurrentSequenceGTE adds a WHERE current_sequence >= ? condition
func (b *SequenceQueryBuilder) WhereCurrentSequenceGTE(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CurrentSequenceGTE(b.query, v)
	return b
}

// WhereCurrentSequenceLT adds a WHERE current_sequence < ? condition
func (b *SequenceQueryBuilder) WhereCurrentSequenceLT(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CurrentSequenceLT(b.query, v)
	return b
}

// WhereCurrentSequenceLTE adds a WHERE current_sequence <= ? condition
func (b *SequenceQueryBuilder) WhereCurrentSequenceLTE(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CurrentSequenceLTE(b.query, v)
	return b
}

// WhereCurrentSequenceIn adds a WHERE current_sequence IN (?) condition
func (b *SequenceQueryBuilder) WhereCurrentSequenceIn(v []int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CurrentSequenceIn(b.query, v)
	return b
}

// WhereCurrentSequenceNotIn adds a WHERE current_sequence NOT IN (?) condition
func (b *SequenceQueryBuilder) WhereCurrentSequenceNotIn(v []int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CurrentSequenceNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *SequenceQueryBuilder) WhereVersionEQ(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *SequenceQueryBuilder) WhereVersionNEQ(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *SequenceQueryBuilder) WhereVersionGT(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *SequenceQueryBuilder) WhereVersionGTE(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *SequenceQueryBuilder) WhereVersionLT(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *SequenceQueryBuilder) WhereVersionLTE(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *SequenceQueryBuilder) WhereVersionIn(v []int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *SequenceQueryBuilder) WhereVersionNotIn(v []int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *SequenceQueryBuilder) WhereCreatedAtEQ(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *SequenceQueryBuilder) WhereCreatedAtNEQ(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *SequenceQueryBuilder) WhereCreatedAtGT(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *SequenceQueryBuilder) WhereCreatedAtGTE(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *SequenceQueryBuilder) WhereCreatedAtLT(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *SequenceQueryBuilder) WhereCreatedAtLTE(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *SequenceQueryBuilder) WhereCreatedAtIn(v []int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *SequenceQueryBuilder) WhereCreatedAtNotIn(v []int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *SequenceQueryBuilder) WhereUpdatedAtEQ(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *SequenceQueryBuilder) WhereUpdatedAtNEQ(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *SequenceQueryBuilder) WhereUpdatedAtGT(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *SequenceQueryBuilder) WhereUpdatedAtGTE(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *SequenceQueryBuilder) WhereUpdatedAtLT(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *SequenceQueryBuilder) WhereUpdatedAtLTE(v int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *SequenceQueryBuilder) WhereUpdatedAtIn(v []int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *SequenceQueryBuilder) WhereUpdatedAtNotIn(v []int64) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *SequenceQueryBuilder) WhereTenant(orgID, buID pulid.ID) *SequenceQueryBuilder {
	b.query = SequenceQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *SequenceQueryBuilder) WhereGroup(sep string, fn func(*SequenceQueryBuilder) *SequenceQueryBuilder) *SequenceQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &SequenceQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *SequenceQueryBuilder) Where(query string, args ...interface{}) *SequenceQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *SequenceQueryBuilder) OrderBy(column string, desc ...bool) *SequenceQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(SequenceQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *SequenceQueryBuilder) Limit(n int) *SequenceQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *SequenceQueryBuilder) Offset(n int) *SequenceQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *SequenceQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *SequenceQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *SequenceQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *SequenceQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *SequenceQueryBuilder) All(ctx context.Context) ([]*Sequence, error) {
	var entities []*Sequence
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *SequenceQueryBuilder) AllWithCount(ctx context.Context) ([]*Sequence, int, error) {
	var entities []*Sequence
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *SequenceQueryBuilder) One(ctx context.Context) (*Sequence, error) {
	entity := new(Sequence)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *SequenceQueryBuilder) First(ctx context.Context) (*Sequence, error) {
	entity := new(Sequence)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// SequenceBuild creates a chainable query builder
func SequenceBuild(db bun.IDB) *SequenceQueryBuilder {
	return NewSequenceQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *SequenceQueryBuilder) LoadBusinessUnit() *SequenceQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *SequenceQueryBuilder) LoadOrganization() *SequenceQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for Sequence
func (b *SequenceQueryBuilder) LoadAllRelations() *SequenceQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	return b
}
