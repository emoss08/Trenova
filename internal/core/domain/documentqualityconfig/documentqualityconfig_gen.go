// Code generated by gen-trenova. DO NOT EDIT.

package documentqualityconfig

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// documentQualityConfigFieldConfig provides field configuration for DocumentQualityConfig
type documentQualityConfigFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// DocumentQualityConfigQuery provides type-safe query helpers and constants
var DocumentQualityConfigQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		IsActive          string
		MinWordCount      string
		MinDPI            string
		MinBrightness     string
		MaxBrightness     string
		MinContrast       string
		MinSharpness      string
		AutoRejectScore   string
		ManualReviewScore string
		MinConfidence     string
		MinTextDensity    string
		ModelID           string
		AllowTraining     string
		Version           string
		CreatedAt         string
		UpdatedAt         string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IsActiveEQ             func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		MinWordCountEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountNEQ        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MinWordCountNotIn      func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MinWordCountGT         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountGTE        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountLT         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountLTE        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPIEQ               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPINEQ              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPIIn               func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MinDPINotIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MinDPIGT               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPIGTE              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPILT               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPILTE              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinBrightnessEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessNEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessIn        func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinBrightnessNotIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinBrightnessGT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessGTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessLT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessLTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessNEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessIn        func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxBrightnessNotIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxBrightnessGT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessGTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessLT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessLTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastEQ          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastNEQ         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastIn          func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinContrastNotIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinContrastGT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastGTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastLT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastLTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessEQ         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessNEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessIn         func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinSharpnessNotIn      func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinSharpnessGT         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessGTE        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessLT         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessLTE        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreNEQ     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreIn      func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		AutoRejectScoreNotIn   func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		AutoRejectScoreGT      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreGTE     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreLT      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreLTE     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreEQ    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreNEQ   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		ManualReviewScoreNotIn func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		ManualReviewScoreGT    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreGTE   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreLT    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreLTE   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceNEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceIn        func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinConfidenceNotIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinConfidenceGT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceGTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceLT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceLTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityNEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinTextDensityNotIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinTextDensityGT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityGTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityLT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityLTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ModelIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ModelIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		AllowTrainingEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowTrainingNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]documentQualityConfigFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "document_quality_configs",
	Alias:    "dqc",
	IDPrefix: "dqc_",

	// Field names
	Field: struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		IsActive          string
		MinWordCount      string
		MinDPI            string
		MinBrightness     string
		MaxBrightness     string
		MinContrast       string
		MinSharpness      string
		AutoRejectScore   string
		ManualReviewScore string
		MinConfidence     string
		MinTextDensity    string
		ModelID           string
		AllowTraining     string
		Version           string
		CreatedAt         string
		UpdatedAt         string
	}{
		ID:                "id",
		BusinessUnitID:    "business_unit_id",
		OrganizationID:    "organization_id",
		IsActive:          "is_active",
		MinWordCount:      "min_word_count",
		MinDPI:            "min_dpi",
		MinBrightness:     "min_brightness",
		MaxBrightness:     "max_brightness",
		MinContrast:       "min_contrast",
		MinSharpness:      "min_sharpness",
		AutoRejectScore:   "auto_reject_score",
		ManualReviewScore: "manual_review_score",
		MinConfidence:     "min_confidence",
		MinTextDensity:    "min_text_density",
		ModelID:           "model_id",
		AllowTraining:     "allow_training",
		Version:           "version",
		CreatedAt:         "created_at",
		UpdatedAt:         "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "dqc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "dqc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IsActiveEQ             func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		MinWordCountEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountNEQ        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MinWordCountNotIn      func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MinWordCountGT         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountGTE        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountLT         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinWordCountLTE        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPIEQ               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPINEQ              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPIIn               func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MinDPINotIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MinDPIGT               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPIGTE              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPILT               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinDPILTE              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MinBrightnessEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessNEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessIn        func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinBrightnessNotIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinBrightnessGT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessGTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessLT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinBrightnessLTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessNEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessIn        func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxBrightnessNotIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxBrightnessGT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessGTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessLT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxBrightnessLTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastEQ          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastNEQ         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastIn          func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinContrastNotIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinContrastGT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastGTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastLT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinContrastLTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessEQ         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessNEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessIn         func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinSharpnessNotIn      func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinSharpnessGT         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessGTE        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessLT         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinSharpnessLTE        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreNEQ     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreIn      func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		AutoRejectScoreNotIn   func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		AutoRejectScoreGT      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreGTE     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreLT      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		AutoRejectScoreLTE     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreEQ    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreNEQ   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		ManualReviewScoreNotIn func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		ManualReviewScoreGT    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreGTE   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreLT    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ManualReviewScoreLTE   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceNEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceIn        func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinConfidenceNotIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinConfidenceGT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceGTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceLT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinConfidenceLTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityNEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinTextDensityNotIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MinTextDensityGT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityGTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityLT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MinTextDensityLTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ModelIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ModelIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		AllowTrainingEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowTrainingNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                 func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.organization_id"), v)
		},
		IsActiveEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.is_active"), v)
		},
		IsActiveNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.is_active"), v)
		},
		MinWordCountEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.min_word_count"), v)
		},
		MinWordCountNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.min_word_count"), v)
		},
		MinWordCountIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.min_word_count"), bun.In(v))
		},
		MinWordCountNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.min_word_count"), bun.In(v))
		},
		MinWordCountGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.min_word_count"), v)
		},
		MinWordCountGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.min_word_count"), v)
		},
		MinWordCountLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.min_word_count"), v)
		},
		MinWordCountLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.min_word_count"), v)
		},
		MinDPIEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.min_dpi"), v)
		},
		MinDPINEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.min_dpi"), v)
		},
		MinDPIIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.min_dpi"), bun.In(v))
		},
		MinDPINotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.min_dpi"), bun.In(v))
		},
		MinDPIGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.min_dpi"), v)
		},
		MinDPIGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.min_dpi"), v)
		},
		MinDPILT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.min_dpi"), v)
		},
		MinDPILTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.min_dpi"), v)
		},
		MinBrightnessEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.min_brightness"), v)
		},
		MinBrightnessNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.min_brightness"), v)
		},
		MinBrightnessIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.min_brightness"), bun.In(v))
		},
		MinBrightnessNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.min_brightness"), bun.In(v))
		},
		MinBrightnessGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.min_brightness"), v)
		},
		MinBrightnessGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.min_brightness"), v)
		},
		MinBrightnessLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.min_brightness"), v)
		},
		MinBrightnessLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.min_brightness"), v)
		},
		MaxBrightnessEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.max_brightness"), v)
		},
		MaxBrightnessNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.max_brightness"), v)
		},
		MaxBrightnessIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.max_brightness"), bun.In(v))
		},
		MaxBrightnessNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.max_brightness"), bun.In(v))
		},
		MaxBrightnessGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.max_brightness"), v)
		},
		MaxBrightnessGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.max_brightness"), v)
		},
		MaxBrightnessLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.max_brightness"), v)
		},
		MaxBrightnessLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.max_brightness"), v)
		},
		MinContrastEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.min_contrast"), v)
		},
		MinContrastNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.min_contrast"), v)
		},
		MinContrastIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.min_contrast"), bun.In(v))
		},
		MinContrastNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.min_contrast"), bun.In(v))
		},
		MinContrastGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.min_contrast"), v)
		},
		MinContrastGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.min_contrast"), v)
		},
		MinContrastLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.min_contrast"), v)
		},
		MinContrastLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.min_contrast"), v)
		},
		MinSharpnessEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.min_sharpness"), v)
		},
		MinSharpnessNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.min_sharpness"), v)
		},
		MinSharpnessIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.min_sharpness"), bun.In(v))
		},
		MinSharpnessNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.min_sharpness"), bun.In(v))
		},
		MinSharpnessGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.min_sharpness"), v)
		},
		MinSharpnessGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.min_sharpness"), v)
		},
		MinSharpnessLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.min_sharpness"), v)
		},
		MinSharpnessLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.min_sharpness"), v)
		},
		AutoRejectScoreEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.auto_reject_score"), v)
		},
		AutoRejectScoreNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.auto_reject_score"), v)
		},
		AutoRejectScoreIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.auto_reject_score"), bun.In(v))
		},
		AutoRejectScoreNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.auto_reject_score"), bun.In(v))
		},
		AutoRejectScoreGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.auto_reject_score"), v)
		},
		AutoRejectScoreGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.auto_reject_score"), v)
		},
		AutoRejectScoreLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.auto_reject_score"), v)
		},
		AutoRejectScoreLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.auto_reject_score"), v)
		},
		ManualReviewScoreEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.manual_review_score"), v)
		},
		ManualReviewScoreNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.manual_review_score"), v)
		},
		ManualReviewScoreIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.manual_review_score"), bun.In(v))
		},
		ManualReviewScoreNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.manual_review_score"), bun.In(v))
		},
		ManualReviewScoreGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.manual_review_score"), v)
		},
		ManualReviewScoreGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.manual_review_score"), v)
		},
		ManualReviewScoreLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.manual_review_score"), v)
		},
		ManualReviewScoreLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.manual_review_score"), v)
		},
		MinConfidenceEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.min_confidence"), v)
		},
		MinConfidenceNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.min_confidence"), v)
		},
		MinConfidenceIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.min_confidence"), bun.In(v))
		},
		MinConfidenceNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.min_confidence"), bun.In(v))
		},
		MinConfidenceGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.min_confidence"), v)
		},
		MinConfidenceGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.min_confidence"), v)
		},
		MinConfidenceLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.min_confidence"), v)
		},
		MinConfidenceLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.min_confidence"), v)
		},
		MinTextDensityEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.min_text_density"), v)
		},
		MinTextDensityNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.min_text_density"), v)
		},
		MinTextDensityIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.min_text_density"), bun.In(v))
		},
		MinTextDensityNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.min_text_density"), bun.In(v))
		},
		MinTextDensityGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.min_text_density"), v)
		},
		MinTextDensityGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.min_text_density"), v)
		},
		MinTextDensityLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.min_text_density"), v)
		},
		MinTextDensityLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.min_text_density"), v)
		},
		ModelIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.model_id"), v)
		},
		ModelIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.model_id"), v)
		},
		AllowTrainingEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.allow_training"), v)
		},
		AllowTrainingNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.allow_training"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqc.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("dqc.organization_id"), orgID).
				Where("? = ?", bun.Ident("dqc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("dqc.id"), id).
				Where("? = ?", bun.Ident("dqc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "dqc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"dqc.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "dqc.created_at DESC"
			}
			return "dqc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "dqc.updated_at DESC"
			}
			return "dqc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]documentQualityConfigFieldConfig {
		return map[string]documentQualityConfigFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dqc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dqc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dqc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "dqc.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"min_word_count": {
				Name:       "min_word_count",
				Column:     "dqc.min_word_count",
				Sortable:   false,
				Filterable: false,
			},
			"min_dpi": {
				Name:       "min_dpi",
				Column:     "dqc.min_dpi",
				Sortable:   false,
				Filterable: false,
			},
			"min_brightness": {
				Name:       "min_brightness",
				Column:     "dqc.min_brightness",
				Sortable:   false,
				Filterable: false,
			},
			"max_brightness": {
				Name:       "max_brightness",
				Column:     "dqc.max_brightness",
				Sortable:   false,
				Filterable: false,
			},
			"min_contrast": {
				Name:       "min_contrast",
				Column:     "dqc.min_contrast",
				Sortable:   false,
				Filterable: false,
			},
			"min_sharpness": {
				Name:       "min_sharpness",
				Column:     "dqc.min_sharpness",
				Sortable:   false,
				Filterable: false,
			},
			"auto_reject_score": {
				Name:       "auto_reject_score",
				Column:     "dqc.auto_reject_score",
				Sortable:   false,
				Filterable: false,
			},
			"manual_review_score": {
				Name:       "manual_review_score",
				Column:     "dqc.manual_review_score",
				Sortable:   false,
				Filterable: false,
			},
			"min_confidence": {
				Name:       "min_confidence",
				Column:     "dqc.min_confidence",
				Sortable:   false,
				Filterable: false,
			},
			"min_text_density": {
				Name:       "min_text_density",
				Column:     "dqc.min_text_density",
				Sortable:   false,
				Filterable: false,
			},
			"model_id": {
				Name:       "model_id",
				Column:     "dqc.model_id",
				Sortable:   false,
				Filterable: true,
			},
			"allow_training": {
				Name:       "allow_training",
				Column:     "dqc.allow_training",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dqc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dqc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dqc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]documentQualityConfigFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dqc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dqc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dqc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "dqc.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"min_word_count": {
				Name:       "min_word_count",
				Column:     "dqc.min_word_count",
				Sortable:   false,
				Filterable: false,
			},
			"min_dpi": {
				Name:       "min_dpi",
				Column:     "dqc.min_dpi",
				Sortable:   false,
				Filterable: false,
			},
			"min_brightness": {
				Name:       "min_brightness",
				Column:     "dqc.min_brightness",
				Sortable:   false,
				Filterable: false,
			},
			"max_brightness": {
				Name:       "max_brightness",
				Column:     "dqc.max_brightness",
				Sortable:   false,
				Filterable: false,
			},
			"min_contrast": {
				Name:       "min_contrast",
				Column:     "dqc.min_contrast",
				Sortable:   false,
				Filterable: false,
			},
			"min_sharpness": {
				Name:       "min_sharpness",
				Column:     "dqc.min_sharpness",
				Sortable:   false,
				Filterable: false,
			},
			"auto_reject_score": {
				Name:       "auto_reject_score",
				Column:     "dqc.auto_reject_score",
				Sortable:   false,
				Filterable: false,
			},
			"manual_review_score": {
				Name:       "manual_review_score",
				Column:     "dqc.manual_review_score",
				Sortable:   false,
				Filterable: false,
			},
			"min_confidence": {
				Name:       "min_confidence",
				Column:     "dqc.min_confidence",
				Sortable:   false,
				Filterable: false,
			},
			"min_text_density": {
				Name:       "min_text_density",
				Column:     "dqc.min_text_density",
				Sortable:   false,
				Filterable: false,
			},
			"model_id": {
				Name:       "model_id",
				Column:     "dqc.model_id",
				Sortable:   false,
				Filterable: true,
			},
			"allow_training": {
				Name:       "allow_training",
				Column:     "dqc.allow_training",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dqc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dqc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dqc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]documentQualityConfigFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dqc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dqc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dqc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "dqc.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"min_word_count": {
				Name:       "min_word_count",
				Column:     "dqc.min_word_count",
				Sortable:   false,
				Filterable: false,
			},
			"min_dpi": {
				Name:       "min_dpi",
				Column:     "dqc.min_dpi",
				Sortable:   false,
				Filterable: false,
			},
			"min_brightness": {
				Name:       "min_brightness",
				Column:     "dqc.min_brightness",
				Sortable:   false,
				Filterable: false,
			},
			"max_brightness": {
				Name:       "max_brightness",
				Column:     "dqc.max_brightness",
				Sortable:   false,
				Filterable: false,
			},
			"min_contrast": {
				Name:       "min_contrast",
				Column:     "dqc.min_contrast",
				Sortable:   false,
				Filterable: false,
			},
			"min_sharpness": {
				Name:       "min_sharpness",
				Column:     "dqc.min_sharpness",
				Sortable:   false,
				Filterable: false,
			},
			"auto_reject_score": {
				Name:       "auto_reject_score",
				Column:     "dqc.auto_reject_score",
				Sortable:   false,
				Filterable: false,
			},
			"manual_review_score": {
				Name:       "manual_review_score",
				Column:     "dqc.manual_review_score",
				Sortable:   false,
				Filterable: false,
			},
			"min_confidence": {
				Name:       "min_confidence",
				Column:     "dqc.min_confidence",
				Sortable:   false,
				Filterable: false,
			},
			"min_text_density": {
				Name:       "min_text_density",
				Column:     "dqc.min_text_density",
				Sortable:   false,
				Filterable: false,
			},
			"model_id": {
				Name:       "model_id",
				Column:     "dqc.model_id",
				Sortable:   false,
				Filterable: true,
			},
			"allow_training": {
				Name:       "allow_training",
				Column:     "dqc.allow_training",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dqc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dqc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dqc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// DocumentQualityConfigQueryBuilder provides a fluent interface for building queries
type DocumentQualityConfigQueryBuilder struct {
	query *bun.SelectQuery
}

// NewDocumentQualityConfigQuery creates a new query builder
func NewDocumentQualityConfigQuery(db bun.IDB) *DocumentQualityConfigQueryBuilder {
	return &DocumentQualityConfigQueryBuilder{
		query: db.NewSelect().Model((*DocumentQualityConfig)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func DocumentQualityConfigFromQuery(q *bun.SelectQuery) *DocumentQualityConfigQueryBuilder {
	return &DocumentQualityConfigQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *DocumentQualityConfigQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *DocumentQualityConfigQueryBuilder) Model(model interface{}) *DocumentQualityConfigQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereIDEQ(v pulid.ID) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereIDNEQ(v pulid.ID) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereIsActiveEQ adds a WHERE is_active = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereIsActiveEQ(v bool) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.IsActiveEQ(b.query, v)
	return b
}

// WhereIsActiveNEQ adds a WHERE is_active != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereIsActiveNEQ(v bool) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.IsActiveNEQ(b.query, v)
	return b
}

// WhereMinWordCountEQ adds a WHERE min_word_count = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinWordCountEQ(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinWordCountEQ(b.query, v)
	return b
}

// WhereMinWordCountNEQ adds a WHERE min_word_count != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinWordCountNEQ(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinWordCountNEQ(b.query, v)
	return b
}

// WhereMinWordCountGT adds a WHERE min_word_count > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinWordCountGT(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinWordCountGT(b.query, v)
	return b
}

// WhereMinWordCountGTE adds a WHERE min_word_count >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinWordCountGTE(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinWordCountGTE(b.query, v)
	return b
}

// WhereMinWordCountLT adds a WHERE min_word_count < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinWordCountLT(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinWordCountLT(b.query, v)
	return b
}

// WhereMinWordCountLTE adds a WHERE min_word_count <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinWordCountLTE(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinWordCountLTE(b.query, v)
	return b
}

// WhereMinWordCountIn adds a WHERE min_word_count IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinWordCountIn(v []int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinWordCountIn(b.query, v)
	return b
}

// WhereMinWordCountNotIn adds a WHERE min_word_count NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinWordCountNotIn(v []int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinWordCountNotIn(b.query, v)
	return b
}

// WhereMinDPIEQ adds a WHERE min_dpi = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinDPIEQ(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinDPIEQ(b.query, v)
	return b
}

// WhereMinDPINEQ adds a WHERE min_dpi != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinDPINEQ(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinDPINEQ(b.query, v)
	return b
}

// WhereMinDPIGT adds a WHERE min_dpi > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinDPIGT(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinDPIGT(b.query, v)
	return b
}

// WhereMinDPIGTE adds a WHERE min_dpi >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinDPIGTE(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinDPIGTE(b.query, v)
	return b
}

// WhereMinDPILT adds a WHERE min_dpi < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinDPILT(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinDPILT(b.query, v)
	return b
}

// WhereMinDPILTE adds a WHERE min_dpi <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinDPILTE(v int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinDPILTE(b.query, v)
	return b
}

// WhereMinDPIIn adds a WHERE min_dpi IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinDPIIn(v []int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinDPIIn(b.query, v)
	return b
}

// WhereMinDPINotIn adds a WHERE min_dpi NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinDPINotIn(v []int) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinDPINotIn(b.query, v)
	return b
}

// WhereMinBrightnessEQ adds a WHERE min_brightness = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinBrightnessEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinBrightnessEQ(b.query, v)
	return b
}

// WhereMinBrightnessNEQ adds a WHERE min_brightness != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinBrightnessNEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinBrightnessNEQ(b.query, v)
	return b
}

// WhereMinBrightnessGT adds a WHERE min_brightness > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinBrightnessGT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinBrightnessGT(b.query, v)
	return b
}

// WhereMinBrightnessGTE adds a WHERE min_brightness >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinBrightnessGTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinBrightnessGTE(b.query, v)
	return b
}

// WhereMinBrightnessLT adds a WHERE min_brightness < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinBrightnessLT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinBrightnessLT(b.query, v)
	return b
}

// WhereMinBrightnessLTE adds a WHERE min_brightness <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinBrightnessLTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinBrightnessLTE(b.query, v)
	return b
}

// WhereMinBrightnessIn adds a WHERE min_brightness IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinBrightnessIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinBrightnessIn(b.query, v)
	return b
}

// WhereMinBrightnessNotIn adds a WHERE min_brightness NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinBrightnessNotIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinBrightnessNotIn(b.query, v)
	return b
}

// WhereMaxBrightnessEQ adds a WHERE max_brightness = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMaxBrightnessEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MaxBrightnessEQ(b.query, v)
	return b
}

// WhereMaxBrightnessNEQ adds a WHERE max_brightness != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMaxBrightnessNEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MaxBrightnessNEQ(b.query, v)
	return b
}

// WhereMaxBrightnessGT adds a WHERE max_brightness > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMaxBrightnessGT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MaxBrightnessGT(b.query, v)
	return b
}

// WhereMaxBrightnessGTE adds a WHERE max_brightness >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMaxBrightnessGTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MaxBrightnessGTE(b.query, v)
	return b
}

// WhereMaxBrightnessLT adds a WHERE max_brightness < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMaxBrightnessLT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MaxBrightnessLT(b.query, v)
	return b
}

// WhereMaxBrightnessLTE adds a WHERE max_brightness <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMaxBrightnessLTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MaxBrightnessLTE(b.query, v)
	return b
}

// WhereMaxBrightnessIn adds a WHERE max_brightness IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMaxBrightnessIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MaxBrightnessIn(b.query, v)
	return b
}

// WhereMaxBrightnessNotIn adds a WHERE max_brightness NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMaxBrightnessNotIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MaxBrightnessNotIn(b.query, v)
	return b
}

// WhereMinContrastEQ adds a WHERE min_contrast = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinContrastEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinContrastEQ(b.query, v)
	return b
}

// WhereMinContrastNEQ adds a WHERE min_contrast != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinContrastNEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinContrastNEQ(b.query, v)
	return b
}

// WhereMinContrastGT adds a WHERE min_contrast > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinContrastGT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinContrastGT(b.query, v)
	return b
}

// WhereMinContrastGTE adds a WHERE min_contrast >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinContrastGTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinContrastGTE(b.query, v)
	return b
}

// WhereMinContrastLT adds a WHERE min_contrast < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinContrastLT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinContrastLT(b.query, v)
	return b
}

// WhereMinContrastLTE adds a WHERE min_contrast <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinContrastLTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinContrastLTE(b.query, v)
	return b
}

// WhereMinContrastIn adds a WHERE min_contrast IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinContrastIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinContrastIn(b.query, v)
	return b
}

// WhereMinContrastNotIn adds a WHERE min_contrast NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinContrastNotIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinContrastNotIn(b.query, v)
	return b
}

// WhereMinSharpnessEQ adds a WHERE min_sharpness = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinSharpnessEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinSharpnessEQ(b.query, v)
	return b
}

// WhereMinSharpnessNEQ adds a WHERE min_sharpness != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinSharpnessNEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinSharpnessNEQ(b.query, v)
	return b
}

// WhereMinSharpnessGT adds a WHERE min_sharpness > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinSharpnessGT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinSharpnessGT(b.query, v)
	return b
}

// WhereMinSharpnessGTE adds a WHERE min_sharpness >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinSharpnessGTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinSharpnessGTE(b.query, v)
	return b
}

// WhereMinSharpnessLT adds a WHERE min_sharpness < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinSharpnessLT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinSharpnessLT(b.query, v)
	return b
}

// WhereMinSharpnessLTE adds a WHERE min_sharpness <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinSharpnessLTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinSharpnessLTE(b.query, v)
	return b
}

// WhereMinSharpnessIn adds a WHERE min_sharpness IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinSharpnessIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinSharpnessIn(b.query, v)
	return b
}

// WhereMinSharpnessNotIn adds a WHERE min_sharpness NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinSharpnessNotIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinSharpnessNotIn(b.query, v)
	return b
}

// WhereAutoRejectScoreEQ adds a WHERE auto_reject_score = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereAutoRejectScoreEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AutoRejectScoreEQ(b.query, v)
	return b
}

// WhereAutoRejectScoreNEQ adds a WHERE auto_reject_score != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereAutoRejectScoreNEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AutoRejectScoreNEQ(b.query, v)
	return b
}

// WhereAutoRejectScoreGT adds a WHERE auto_reject_score > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereAutoRejectScoreGT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AutoRejectScoreGT(b.query, v)
	return b
}

// WhereAutoRejectScoreGTE adds a WHERE auto_reject_score >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereAutoRejectScoreGTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AutoRejectScoreGTE(b.query, v)
	return b
}

// WhereAutoRejectScoreLT adds a WHERE auto_reject_score < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereAutoRejectScoreLT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AutoRejectScoreLT(b.query, v)
	return b
}

// WhereAutoRejectScoreLTE adds a WHERE auto_reject_score <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereAutoRejectScoreLTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AutoRejectScoreLTE(b.query, v)
	return b
}

// WhereAutoRejectScoreIn adds a WHERE auto_reject_score IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereAutoRejectScoreIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AutoRejectScoreIn(b.query, v)
	return b
}

// WhereAutoRejectScoreNotIn adds a WHERE auto_reject_score NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereAutoRejectScoreNotIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AutoRejectScoreNotIn(b.query, v)
	return b
}

// WhereManualReviewScoreEQ adds a WHERE manual_review_score = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereManualReviewScoreEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ManualReviewScoreEQ(b.query, v)
	return b
}

// WhereManualReviewScoreNEQ adds a WHERE manual_review_score != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereManualReviewScoreNEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ManualReviewScoreNEQ(b.query, v)
	return b
}

// WhereManualReviewScoreGT adds a WHERE manual_review_score > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereManualReviewScoreGT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ManualReviewScoreGT(b.query, v)
	return b
}

// WhereManualReviewScoreGTE adds a WHERE manual_review_score >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereManualReviewScoreGTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ManualReviewScoreGTE(b.query, v)
	return b
}

// WhereManualReviewScoreLT adds a WHERE manual_review_score < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereManualReviewScoreLT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ManualReviewScoreLT(b.query, v)
	return b
}

// WhereManualReviewScoreLTE adds a WHERE manual_review_score <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereManualReviewScoreLTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ManualReviewScoreLTE(b.query, v)
	return b
}

// WhereManualReviewScoreIn adds a WHERE manual_review_score IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereManualReviewScoreIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ManualReviewScoreIn(b.query, v)
	return b
}

// WhereManualReviewScoreNotIn adds a WHERE manual_review_score NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereManualReviewScoreNotIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ManualReviewScoreNotIn(b.query, v)
	return b
}

// WhereMinConfidenceEQ adds a WHERE min_confidence = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinConfidenceEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinConfidenceEQ(b.query, v)
	return b
}

// WhereMinConfidenceNEQ adds a WHERE min_confidence != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinConfidenceNEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinConfidenceNEQ(b.query, v)
	return b
}

// WhereMinConfidenceGT adds a WHERE min_confidence > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinConfidenceGT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinConfidenceGT(b.query, v)
	return b
}

// WhereMinConfidenceGTE adds a WHERE min_confidence >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinConfidenceGTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinConfidenceGTE(b.query, v)
	return b
}

// WhereMinConfidenceLT adds a WHERE min_confidence < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinConfidenceLT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinConfidenceLT(b.query, v)
	return b
}

// WhereMinConfidenceLTE adds a WHERE min_confidence <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinConfidenceLTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinConfidenceLTE(b.query, v)
	return b
}

// WhereMinConfidenceIn adds a WHERE min_confidence IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinConfidenceIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinConfidenceIn(b.query, v)
	return b
}

// WhereMinConfidenceNotIn adds a WHERE min_confidence NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinConfidenceNotIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinConfidenceNotIn(b.query, v)
	return b
}

// WhereMinTextDensityEQ adds a WHERE min_text_density = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinTextDensityEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinTextDensityEQ(b.query, v)
	return b
}

// WhereMinTextDensityNEQ adds a WHERE min_text_density != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinTextDensityNEQ(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinTextDensityNEQ(b.query, v)
	return b
}

// WhereMinTextDensityGT adds a WHERE min_text_density > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinTextDensityGT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinTextDensityGT(b.query, v)
	return b
}

// WhereMinTextDensityGTE adds a WHERE min_text_density >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinTextDensityGTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinTextDensityGTE(b.query, v)
	return b
}

// WhereMinTextDensityLT adds a WHERE min_text_density < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinTextDensityLT(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinTextDensityLT(b.query, v)
	return b
}

// WhereMinTextDensityLTE adds a WHERE min_text_density <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinTextDensityLTE(v float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinTextDensityLTE(b.query, v)
	return b
}

// WhereMinTextDensityIn adds a WHERE min_text_density IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinTextDensityIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinTextDensityIn(b.query, v)
	return b
}

// WhereMinTextDensityNotIn adds a WHERE min_text_density NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereMinTextDensityNotIn(v []float64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.MinTextDensityNotIn(b.query, v)
	return b
}

// WhereModelIDEQ adds a WHERE model_id = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereModelIDEQ(v pulid.ID) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ModelIDEQ(b.query, v)
	return b
}

// WhereModelIDNEQ adds a WHERE model_id != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereModelIDNEQ(v pulid.ID) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.ModelIDNEQ(b.query, v)
	return b
}

// WhereAllowTrainingEQ adds a WHERE allow_training = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereAllowTrainingEQ(v bool) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AllowTrainingEQ(b.query, v)
	return b
}

// WhereAllowTrainingNEQ adds a WHERE allow_training != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereAllowTrainingNEQ(v bool) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.AllowTrainingNEQ(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereVersionEQ(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereVersionNEQ(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereVersionGT(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereVersionGTE(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereVersionLT(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereVersionLTE(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereVersionIn(v []int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereVersionNotIn(v []int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereCreatedAtEQ(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereCreatedAtNEQ(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereCreatedAtGT(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereCreatedAtGTE(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereCreatedAtLT(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereCreatedAtLTE(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereCreatedAtIn(v []int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereCreatedAtNotIn(v []int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereUpdatedAtEQ(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereUpdatedAtNEQ(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereUpdatedAtGT(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereUpdatedAtGTE(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereUpdatedAtLT(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *DocumentQualityConfigQueryBuilder) WhereUpdatedAtLTE(v int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereUpdatedAtIn(v []int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *DocumentQualityConfigQueryBuilder) WhereUpdatedAtNotIn(v []int64) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *DocumentQualityConfigQueryBuilder) WhereTenant(orgID, buID pulid.ID) *DocumentQualityConfigQueryBuilder {
	b.query = DocumentQualityConfigQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *DocumentQualityConfigQueryBuilder) WhereGroup(sep string, fn func(*DocumentQualityConfigQueryBuilder) *DocumentQualityConfigQueryBuilder) *DocumentQualityConfigQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &DocumentQualityConfigQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *DocumentQualityConfigQueryBuilder) Where(query string, args ...interface{}) *DocumentQualityConfigQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *DocumentQualityConfigQueryBuilder) OrderBy(column string, desc ...bool) *DocumentQualityConfigQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(DocumentQualityConfigQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *DocumentQualityConfigQueryBuilder) Limit(n int) *DocumentQualityConfigQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *DocumentQualityConfigQueryBuilder) Offset(n int) *DocumentQualityConfigQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *DocumentQualityConfigQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *DocumentQualityConfigQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *DocumentQualityConfigQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *DocumentQualityConfigQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *DocumentQualityConfigQueryBuilder) All(ctx context.Context) ([]*DocumentQualityConfig, error) {
	var entities []*DocumentQualityConfig
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *DocumentQualityConfigQueryBuilder) AllWithCount(ctx context.Context) ([]*DocumentQualityConfig, int, error) {
	var entities []*DocumentQualityConfig
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *DocumentQualityConfigQueryBuilder) One(ctx context.Context) (*DocumentQualityConfig, error) {
	entity := new(DocumentQualityConfig)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *DocumentQualityConfigQueryBuilder) First(ctx context.Context) (*DocumentQualityConfig, error) {
	entity := new(DocumentQualityConfig)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// DocumentQualityConfigBuild creates a chainable query builder
func DocumentQualityConfigBuild(db bun.IDB) *DocumentQualityConfigQueryBuilder {
	return NewDocumentQualityConfigQuery(db)
}
