// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// shipmentCommentMentionFieldConfig provides field configuration for ShipmentCommentMention
type shipmentCommentMentionFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ShipmentCommentMentionQuery provides type-safe query helpers and constants
var ShipmentCommentMentionQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID              string
		CommentID       string
		MentionedUserID string
		OrganizationID  string
		CreatedAt       string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CommentIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CommentIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CommentIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CommentIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		MentionedUserIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		MentionedUserIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		MentionedUserIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		MentionedUserIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]shipmentCommentMentionFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		Comment       string
		MentionedUser string
		Organization  string
	}
}{
	// Table and alias constants
	Table:    "shipment_comment_mentions",
	Alias:    "scm",
	IDPrefix: "scm_",

	// Field names
	Field: struct {
		ID              string
		CommentID       string
		MentionedUserID string
		OrganizationID  string
		CreatedAt       string
	}{
		ID:              "id",
		CommentID:       "comment_id",
		MentionedUserID: "mentioned_user_id",
		OrganizationID:  "organization_id",
		CreatedAt:       "created_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "scm." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "scm." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CommentIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CommentIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CommentIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CommentIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		MentionedUserIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		MentionedUserIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		MentionedUserIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		MentionedUserIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("scm.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("scm.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("scm.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("scm.id"), bun.In(v))
		},
		CommentIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("scm.comment_id"), v)
		},
		CommentIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("scm.comment_id"), v)
		},
		CommentIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("scm.comment_id"), bun.In(v))
		},
		CommentIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("scm.comment_id"), bun.In(v))
		},
		MentionedUserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("scm.mentioned_user_id"), v)
		},
		MentionedUserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("scm.mentioned_user_id"), v)
		},
		MentionedUserIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("scm.mentioned_user_id"), bun.In(v))
		},
		MentionedUserIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("scm.mentioned_user_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("scm.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("scm.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("scm.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("scm.organization_id"), bun.In(v))
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("scm.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("scm.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("scm.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("scm.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("scm.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("scm.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("scm.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("scm.created_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "scm." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"scm.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "scm.created_at DESC"
			}
			return "scm.created_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]shipmentCommentMentionFieldConfig {
		return map[string]shipmentCommentMentionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "scm.id",
				Sortable:   false,
				Filterable: true,
			},
			"comment_id": {
				Name:       "comment_id",
				Column:     "scm.comment_id",
				Sortable:   false,
				Filterable: true,
			},
			"mentioned_user_id": {
				Name:       "mentioned_user_id",
				Column:     "scm.mentioned_user_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "scm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "scm.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]shipmentCommentMentionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "scm.id",
				Sortable:   false,
				Filterable: true,
			},
			"comment_id": {
				Name:       "comment_id",
				Column:     "scm.comment_id",
				Sortable:   false,
				Filterable: true,
			},
			"mentioned_user_id": {
				Name:       "mentioned_user_id",
				Column:     "scm.mentioned_user_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "scm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "scm.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]shipmentCommentMentionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "scm.id",
				Sortable:   false,
				Filterable: true,
			},
			"comment_id": {
				Name:       "comment_id",
				Column:     "scm.comment_id",
				Sortable:   false,
				Filterable: true,
			},
			"mentioned_user_id": {
				Name:       "mentioned_user_id",
				Column:     "scm.mentioned_user_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "scm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "scm.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		Comment       string
		MentionedUser string
		Organization  string
	}{
		Comment:       "Comment",
		MentionedUser: "MentionedUser",
		Organization:  "Organization",
	},
}

// ShipmentCommentMentionQueryBuilder provides a fluent interface for building queries
type ShipmentCommentMentionQueryBuilder struct {
	query *bun.SelectQuery
}

// NewShipmentCommentMentionQuery creates a new query builder
func NewShipmentCommentMentionQuery(db bun.IDB) *ShipmentCommentMentionQueryBuilder {
	return &ShipmentCommentMentionQueryBuilder{
		query: db.NewSelect().Model((*ShipmentCommentMention)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ShipmentCommentMentionFromQuery(q *bun.SelectQuery) *ShipmentCommentMentionQueryBuilder {
	return &ShipmentCommentMentionQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ShipmentCommentMentionQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ShipmentCommentMentionQueryBuilder) Model(model interface{}) *ShipmentCommentMentionQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereIDEQ(v pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereIDNEQ(v pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereIDIn(v []pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereIDNotIn(v []pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereCommentIDEQ adds a WHERE comment_id = ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCommentIDEQ(v pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CommentIDEQ(b.query, v)
	return b
}

// WhereCommentIDNEQ adds a WHERE comment_id != ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCommentIDNEQ(v pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CommentIDNEQ(b.query, v)
	return b
}

// WhereCommentIDIn adds a WHERE comment_id IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCommentIDIn(v []pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CommentIDIn(b.query, v)
	return b
}

// WhereCommentIDNotIn adds a WHERE comment_id NOT IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCommentIDNotIn(v []pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CommentIDNotIn(b.query, v)
	return b
}

// WhereMentionedUserIDEQ adds a WHERE mentioned_user_id = ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereMentionedUserIDEQ(v pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.MentionedUserIDEQ(b.query, v)
	return b
}

// WhereMentionedUserIDNEQ adds a WHERE mentioned_user_id != ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereMentionedUserIDNEQ(v pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.MentionedUserIDNEQ(b.query, v)
	return b
}

// WhereMentionedUserIDIn adds a WHERE mentioned_user_id IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereMentionedUserIDIn(v []pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.MentionedUserIDIn(b.query, v)
	return b
}

// WhereMentionedUserIDNotIn adds a WHERE mentioned_user_id NOT IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereMentionedUserIDNotIn(v []pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.MentionedUserIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCreatedAtEQ(v int64) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCreatedAtNEQ(v int64) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCreatedAtGT(v int64) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCreatedAtGTE(v int64) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCreatedAtLT(v int64) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCreatedAtLTE(v int64) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCreatedAtIn(v []int64) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ShipmentCommentMentionQueryBuilder) WhereCreatedAtNotIn(v []int64) *ShipmentCommentMentionQueryBuilder {
	b.query = ShipmentCommentMentionQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ShipmentCommentMentionQueryBuilder) WhereGroup(sep string, fn func(*ShipmentCommentMentionQueryBuilder) *ShipmentCommentMentionQueryBuilder) *ShipmentCommentMentionQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ShipmentCommentMentionQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ShipmentCommentMentionQueryBuilder) Where(query string, args ...interface{}) *ShipmentCommentMentionQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ShipmentCommentMentionQueryBuilder) OrderBy(column string, desc ...bool) *ShipmentCommentMentionQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ShipmentCommentMentionQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ShipmentCommentMentionQueryBuilder) Limit(n int) *ShipmentCommentMentionQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ShipmentCommentMentionQueryBuilder) Offset(n int) *ShipmentCommentMentionQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ShipmentCommentMentionQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ShipmentCommentMentionQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ShipmentCommentMentionQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ShipmentCommentMentionQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ShipmentCommentMentionQueryBuilder) All(ctx context.Context) ([]*ShipmentCommentMention, error) {
	var entities []*ShipmentCommentMention
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ShipmentCommentMentionQueryBuilder) AllWithCount(ctx context.Context) ([]*ShipmentCommentMention, int, error) {
	var entities []*ShipmentCommentMention
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ShipmentCommentMentionQueryBuilder) One(ctx context.Context) (*ShipmentCommentMention, error) {
	entity := new(ShipmentCommentMention)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ShipmentCommentMentionQueryBuilder) First(ctx context.Context) (*ShipmentCommentMention, error) {
	entity := new(ShipmentCommentMention)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ShipmentCommentMentionBuild creates a chainable query builder
func ShipmentCommentMentionBuild(db bun.IDB) *ShipmentCommentMentionQueryBuilder {
	return NewShipmentCommentMentionQuery(db)
}

// Relationship loading methods

// LoadComment loads the Comment relationship
func (b *ShipmentCommentMentionQueryBuilder) LoadComment() *ShipmentCommentMentionQueryBuilder {
	b.query = b.query.Relation("Comment")
	return b
}

// LoadMentionedUser loads the MentionedUser relationship
func (b *ShipmentCommentMentionQueryBuilder) LoadMentionedUser() *ShipmentCommentMentionQueryBuilder {
	b.query = b.query.Relation("MentionedUser")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *ShipmentCommentMentionQueryBuilder) LoadOrganization() *ShipmentCommentMentionQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for ShipmentCommentMention
func (b *ShipmentCommentMentionQueryBuilder) LoadAllRelations() *ShipmentCommentMentionQueryBuilder {
	b.LoadComment()
	b.LoadMentionedUser()
	b.LoadOrganization()
	return b
}

// ShipmentCommentMentionRelationChain provides a fluent API for building nested relationship chains
type ShipmentCommentMentionRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewShipmentCommentMentionRelationChain creates a new relation chain builder
func NewShipmentCommentMentionRelationChain() *ShipmentCommentMentionRelationChain {
	return &ShipmentCommentMentionRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *ShipmentCommentMentionRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentCommentMentionRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *ShipmentCommentMentionRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *ShipmentCommentMentionRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithComment creates a relation chain starting with Comment
func (b *ShipmentCommentMentionQueryBuilder) WithComment() *ShipmentCommentMentionRelationChainBuilder {
	chain := &ShipmentCommentMentionRelationChainBuilder{
		parent: b,
		chain:  NewShipmentCommentMentionRelationChain(),
	}
	chain.chain.Add("Comment")
	return chain
}

// WithMentionedUser creates a relation chain starting with MentionedUser
func (b *ShipmentCommentMentionQueryBuilder) WithMentionedUser() *ShipmentCommentMentionRelationChainBuilder {
	chain := &ShipmentCommentMentionRelationChainBuilder{
		parent: b,
		chain:  NewShipmentCommentMentionRelationChain(),
	}
	chain.chain.Add("MentionedUser")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *ShipmentCommentMentionQueryBuilder) WithOrganization() *ShipmentCommentMentionRelationChainBuilder {
	chain := &ShipmentCommentMentionRelationChainBuilder{
		parent: b,
		chain:  NewShipmentCommentMentionRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// ShipmentCommentMentionRelationChainBuilder provides fluent API for building nested relations
type ShipmentCommentMentionRelationChainBuilder struct {
	parent *ShipmentCommentMentionQueryBuilder
	chain  *ShipmentCommentMentionRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *ShipmentCommentMentionRelationChainBuilder) Load() *ShipmentCommentMentionQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *ShipmentCommentMentionRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentCommentMentionRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *ShipmentCommentMentionRelationChainBuilder) OrderBy(order string) *ShipmentCommentMentionRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *ShipmentCommentMentionRelationChainBuilder) Where(condition string, args ...interface{}) *ShipmentCommentMentionRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
