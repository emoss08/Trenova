// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/shopspring/decimal"
	"github.com/uptrace/bun"
)

// shipmentFieldConfig provides field configuration for Shipment
type shipmentFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ShipmentQuery provides type-safe query helpers and constants
var ShipmentQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                   string
		BusinessUnitID       string
		OrganizationID       string
		ServiceTypeID        string
		ShipmentTypeID       string
		CustomerID           string
		TractorTypeID        string
		TrailerTypeID        string
		OwnerID              string
		CanceledByID         string
		FormulaTemplateID    string
		ConsolidationGroupID string
		Status               string
		ProNumber            string
		BOL                  string
		CancelReason         string
		SearchVector         string
		Rank                 string
		RatingMethod         string
		OtherChargeAmount    string
		FreightChargeAmount  string
		TotalChargeAmount    string
		Pieces               string
		Weight               string
		TemperatureMin       string
		TemperatureMax       string
		ActualDeliveryDate   string
		ActualShipDate       string
		CanceledAt           string
		RatingUnit           string
		Version              string
		CreatedAt            string
		UpdatedAt            string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ServiceTypeIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ServiceTypeIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentTypeIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentTypeIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TractorTypeIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		OwnerIDEQ                     func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		OwnerIDNEQ                    func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		OwnerIDIn                     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		OwnerIDNotIn                  func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		OwnerIDIsNull                 func(q *bun.SelectQuery) *bun.SelectQuery
		OwnerIDIsNotNull              func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		FormulaTemplateIDEQ           func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FormulaTemplateIDNEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FormulaTemplateIDIn           func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FormulaTemplateIDNotIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FormulaTemplateIDIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		FormulaTemplateIDIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ConsolidationGroupIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ConsolidationGroupIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ConsolidationGroupIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ConsolidationGroupIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ConsolidationGroupIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ConsolidationGroupIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                      func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusNEQ                     func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusIn                      func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		StatusNotIn                   func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		ProNumberEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProNumberNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProNumberGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLEQ                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLNEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLIn                         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BOLNotIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BOLGT                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLGTE                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLLT                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLLTE                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLContains                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLHasPrefix                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLHasSuffix                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RatingMethodEQ                func(q *bun.SelectQuery, v RatingMethod) *bun.SelectQuery
		RatingMethodNEQ               func(q *bun.SelectQuery, v RatingMethod) *bun.SelectQuery
		RatingMethodIn                func(q *bun.SelectQuery, v []RatingMethod) *bun.SelectQuery
		RatingMethodNotIn             func(q *bun.SelectQuery, v []RatingMethod) *bun.SelectQuery
		OtherChargeAmountEQ           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountNEQ          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountIn           func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountNotIn        func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountGT           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountGTE          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountLT           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountLTE          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		OtherChargeAmountIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		FreightChargeAmountEQ         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountNEQ        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountIn         func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountNotIn      func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountGT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountGTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountLT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountLTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		FreightChargeAmountIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		TotalChargeAmountEQ           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountNEQ          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountIn           func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountNotIn        func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountGT           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountGTE          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountLT           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountLTE          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		TotalChargeAmountIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		PiecesEQ                      func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		PiecesNEQ                     func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		PiecesIn                      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		PiecesNotIn                   func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		PiecesIsNull                  func(q *bun.SelectQuery) *bun.SelectQuery
		PiecesIsNotNull               func(q *bun.SelectQuery) *bun.SelectQuery
		WeightEQ                      func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		WeightNEQ                     func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		WeightIn                      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		WeightNotIn                   func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		WeightIsNull                  func(q *bun.SelectQuery) *bun.SelectQuery
		WeightIsNotNull               func(q *bun.SelectQuery) *bun.SelectQuery
		TemperatureMinEQ              func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		TemperatureMinNEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		TemperatureMinIn              func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		TemperatureMinNotIn           func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		TemperatureMinIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		TemperatureMinIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		TemperatureMaxEQ              func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		TemperatureMaxNEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		TemperatureMaxIn              func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		TemperatureMaxNotIn           func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		TemperatureMaxIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		TemperatureMaxIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ActualDeliveryDateEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualDeliveryDateNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualDeliveryDateIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ActualDeliveryDateNotIn       func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ActualDeliveryDateIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		ActualDeliveryDateIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		ActualShipDateEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualShipDateNEQ             func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualShipDateIn              func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ActualShipDateNotIn           func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ActualShipDateIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		ActualShipDateIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtEQ                  func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtNEQ                 func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtIn                  func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtNotIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtIsNull              func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtIsNotNull           func(q *bun.SelectQuery) *bun.SelectQuery
		RatingUnitEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		RatingUnitNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		RatingUnitGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]shipmentFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit      string
		Organization      string
		ShipmentType      string
		ServiceType       string
		Customer          string
		TractorType       string
		TrailerType       string
		CanceledBy        string
		Owner             string
		FormulaTemplate   string
		Moves             string
		Commodities       string
		AdditionalCharges string
	}
}{
	// Table and alias constants
	Table:    "shipments",
	Alias:    "sp",
	IDPrefix: "sp_",

	// Field names
	Field: struct {
		ID                   string
		BusinessUnitID       string
		OrganizationID       string
		ServiceTypeID        string
		ShipmentTypeID       string
		CustomerID           string
		TractorTypeID        string
		TrailerTypeID        string
		OwnerID              string
		CanceledByID         string
		FormulaTemplateID    string
		ConsolidationGroupID string
		Status               string
		ProNumber            string
		BOL                  string
		CancelReason         string
		SearchVector         string
		Rank                 string
		RatingMethod         string
		OtherChargeAmount    string
		FreightChargeAmount  string
		TotalChargeAmount    string
		Pieces               string
		Weight               string
		TemperatureMin       string
		TemperatureMax       string
		ActualDeliveryDate   string
		ActualShipDate       string
		CanceledAt           string
		RatingUnit           string
		Version              string
		CreatedAt            string
		UpdatedAt            string
	}{
		ID:                   "id",
		BusinessUnitID:       "business_unit_id",
		OrganizationID:       "organization_id",
		ServiceTypeID:        "service_type_id",
		ShipmentTypeID:       "shipment_type_id",
		CustomerID:           "customer_id",
		TractorTypeID:        "tractor_type_id",
		TrailerTypeID:        "trailer_type_id",
		OwnerID:              "owner_id",
		CanceledByID:         "canceled_by_id",
		FormulaTemplateID:    "formula_template_id",
		ConsolidationGroupID: "consolidation_group_id",
		Status:               "status",
		ProNumber:            "pro_number",
		BOL:                  "bol",
		CancelReason:         "cancel_reason",
		SearchVector:         "search_vector",
		Rank:                 "rank",
		RatingMethod:         "rating_method",
		OtherChargeAmount:    "other_charge_amount",
		FreightChargeAmount:  "freight_charge_amount",
		TotalChargeAmount:    "total_charge_amount",
		Pieces:               "pieces",
		Weight:               "weight",
		TemperatureMin:       "temperature_min",
		TemperatureMax:       "temperature_max",
		ActualDeliveryDate:   "actual_delivery_date",
		ActualShipDate:       "actual_ship_date",
		CanceledAt:           "canceled_at",
		RatingUnit:           "rating_unit",
		Version:              "version",
		CreatedAt:            "created_at",
		UpdatedAt:            "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "sp." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "sp." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ServiceTypeIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ServiceTypeIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentTypeIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentTypeIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TractorTypeIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		OwnerIDEQ                     func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		OwnerIDNEQ                    func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		OwnerIDIn                     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		OwnerIDNotIn                  func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		OwnerIDIsNull                 func(q *bun.SelectQuery) *bun.SelectQuery
		OwnerIDIsNotNull              func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		FormulaTemplateIDEQ           func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FormulaTemplateIDNEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FormulaTemplateIDIn           func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FormulaTemplateIDNotIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FormulaTemplateIDIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		FormulaTemplateIDIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ConsolidationGroupIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ConsolidationGroupIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ConsolidationGroupIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ConsolidationGroupIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ConsolidationGroupIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ConsolidationGroupIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                      func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusNEQ                     func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusIn                      func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		StatusNotIn                   func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		ProNumberEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProNumberNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProNumberGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProNumberHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLEQ                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLNEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLIn                         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BOLNotIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BOLGT                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLGTE                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLLT                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLLTE                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLContains                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLHasPrefix                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BOLHasSuffix                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RatingMethodEQ                func(q *bun.SelectQuery, v RatingMethod) *bun.SelectQuery
		RatingMethodNEQ               func(q *bun.SelectQuery, v RatingMethod) *bun.SelectQuery
		RatingMethodIn                func(q *bun.SelectQuery, v []RatingMethod) *bun.SelectQuery
		RatingMethodNotIn             func(q *bun.SelectQuery, v []RatingMethod) *bun.SelectQuery
		OtherChargeAmountEQ           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountNEQ          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountIn           func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountNotIn        func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountGT           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountGTE          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountLT           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountLTE          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		OtherChargeAmountIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		OtherChargeAmountIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		FreightChargeAmountEQ         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountNEQ        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountIn         func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountNotIn      func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountGT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountGTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountLT         func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountLTE        func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		FreightChargeAmountIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		FreightChargeAmountIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		TotalChargeAmountEQ           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountNEQ          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountIn           func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountNotIn        func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountGT           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountGTE          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountLT           func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountLTE          func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery
		TotalChargeAmountIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		TotalChargeAmountIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		PiecesEQ                      func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		PiecesNEQ                     func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		PiecesIn                      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		PiecesNotIn                   func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		PiecesIsNull                  func(q *bun.SelectQuery) *bun.SelectQuery
		PiecesIsNotNull               func(q *bun.SelectQuery) *bun.SelectQuery
		WeightEQ                      func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		WeightNEQ                     func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		WeightIn                      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		WeightNotIn                   func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		WeightIsNull                  func(q *bun.SelectQuery) *bun.SelectQuery
		WeightIsNotNull               func(q *bun.SelectQuery) *bun.SelectQuery
		TemperatureMinEQ              func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		TemperatureMinNEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		TemperatureMinIn              func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		TemperatureMinNotIn           func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		TemperatureMinIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		TemperatureMinIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		TemperatureMaxEQ              func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		TemperatureMaxNEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		TemperatureMaxIn              func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		TemperatureMaxNotIn           func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		TemperatureMaxIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		TemperatureMaxIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ActualDeliveryDateEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualDeliveryDateNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualDeliveryDateIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ActualDeliveryDateNotIn       func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ActualDeliveryDateIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		ActualDeliveryDateIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		ActualShipDateEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualShipDateNEQ             func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualShipDateIn              func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ActualShipDateNotIn           func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ActualShipDateIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		ActualShipDateIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtEQ                  func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtNEQ                 func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtIn                  func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtNotIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtIsNull              func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtIsNotNull           func(q *bun.SelectQuery) *bun.SelectQuery
		RatingUnitEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		RatingUnitNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		RatingUnitGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RatingUnitLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                        func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.organization_id"), bun.In(v))
		},
		ServiceTypeIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.service_type_id"), v)
		},
		ServiceTypeIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.service_type_id"), v)
		},
		ServiceTypeIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.service_type_id"), bun.In(v))
		},
		ServiceTypeIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.service_type_id"), bun.In(v))
		},
		ShipmentTypeIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.shipment_type_id"), v)
		},
		ShipmentTypeIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.shipment_type_id"), v)
		},
		ShipmentTypeIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.shipment_type_id"), bun.In(v))
		},
		ShipmentTypeIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.shipment_type_id"), bun.In(v))
		},
		CustomerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.customer_id"), v)
		},
		CustomerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.customer_id"), v)
		},
		CustomerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.customer_id"), bun.In(v))
		},
		CustomerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.customer_id"), bun.In(v))
		},
		TractorTypeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.tractor_type_id"), v)
		},
		TractorTypeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.tractor_type_id"), v)
		},
		TractorTypeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.tractor_type_id"), bun.In(v))
		},
		TractorTypeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.tractor_type_id"), bun.In(v))
		},
		TractorTypeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.tractor_type_id"))
		},
		TractorTypeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.tractor_type_id"))
		},
		TrailerTypeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.trailer_type_id"), v)
		},
		TrailerTypeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.trailer_type_id"), v)
		},
		TrailerTypeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.trailer_type_id"), bun.In(v))
		},
		TrailerTypeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.trailer_type_id"), bun.In(v))
		},
		TrailerTypeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.trailer_type_id"))
		},
		TrailerTypeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.trailer_type_id"))
		},
		OwnerIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.owner_id"), v)
		},
		OwnerIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.owner_id"), v)
		},
		OwnerIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.owner_id"), bun.In(v))
		},
		OwnerIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.owner_id"), bun.In(v))
		},
		OwnerIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.owner_id"))
		},
		OwnerIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.owner_id"))
		},
		CanceledByIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.canceled_by_id"), v)
		},
		CanceledByIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.canceled_by_id"), v)
		},
		CanceledByIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.canceled_by_id"), bun.In(v))
		},
		CanceledByIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.canceled_by_id"), bun.In(v))
		},
		CanceledByIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.canceled_by_id"))
		},
		CanceledByIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.canceled_by_id"))
		},
		FormulaTemplateIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.formula_template_id"), v)
		},
		FormulaTemplateIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.formula_template_id"), v)
		},
		FormulaTemplateIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.formula_template_id"), bun.In(v))
		},
		FormulaTemplateIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.formula_template_id"), bun.In(v))
		},
		FormulaTemplateIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.formula_template_id"))
		},
		FormulaTemplateIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.formula_template_id"))
		},
		ConsolidationGroupIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.consolidation_group_id"), v)
		},
		ConsolidationGroupIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.consolidation_group_id"), v)
		},
		ConsolidationGroupIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.consolidation_group_id"), bun.In(v))
		},
		ConsolidationGroupIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.consolidation_group_id"), bun.In(v))
		},
		ConsolidationGroupIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.consolidation_group_id"))
		},
		ConsolidationGroupIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.consolidation_group_id"))
		},
		StatusEQ: func(q *bun.SelectQuery, v Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.status"), bun.In(v))
		},
		ProNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.pro_number"), v)
		},
		ProNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.pro_number"), v)
		},
		ProNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.pro_number"), bun.In(v))
		},
		ProNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.pro_number"), bun.In(v))
		},
		ProNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.pro_number"), v)
		},
		ProNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.pro_number"), v)
		},
		ProNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.pro_number"), v)
		},
		ProNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.pro_number"), v)
		},
		ProNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.pro_number"), "%"+v+"%")
		},
		ProNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.pro_number"), v+"%")
		},
		ProNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.pro_number"), "%"+v)
		},
		BOLEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.bol"), v)
		},
		BOLNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.bol"), v)
		},
		BOLIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.bol"), bun.In(v))
		},
		BOLNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.bol"), bun.In(v))
		},
		BOLGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.bol"), v)
		},
		BOLGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.bol"), v)
		},
		BOLLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.bol"), v)
		},
		BOLLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.bol"), v)
		},
		BOLContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.bol"), "%"+v+"%")
		},
		BOLHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.bol"), v+"%")
		},
		BOLHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.bol"), "%"+v)
		},
		CancelReasonEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.cancel_reason"), v)
		},
		CancelReasonNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.cancel_reason"), v)
		},
		CancelReasonIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.cancel_reason"), bun.In(v))
		},
		CancelReasonNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.cancel_reason"), bun.In(v))
		},
		CancelReasonGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.cancel_reason"), v)
		},
		CancelReasonGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.cancel_reason"), v)
		},
		CancelReasonLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.cancel_reason"), v)
		},
		CancelReasonLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.cancel_reason"), v)
		},
		CancelReasonContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.cancel_reason"), "%"+v+"%")
		},
		CancelReasonHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.cancel_reason"), v+"%")
		},
		CancelReasonHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.cancel_reason"), "%"+v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sp.rank"), "%"+v)
		},
		RatingMethodEQ: func(q *bun.SelectQuery, v RatingMethod) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.rating_method"), v)
		},
		RatingMethodNEQ: func(q *bun.SelectQuery, v RatingMethod) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.rating_method"), v)
		},
		RatingMethodIn: func(q *bun.SelectQuery, v []RatingMethod) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.rating_method"), bun.In(v))
		},
		RatingMethodNotIn: func(q *bun.SelectQuery, v []RatingMethod) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.rating_method"), bun.In(v))
		},
		OtherChargeAmountEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.other_charge_amount"), v)
		},
		OtherChargeAmountNEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.other_charge_amount"), v)
		},
		OtherChargeAmountIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.other_charge_amount"), bun.In(v))
		},
		OtherChargeAmountNotIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.other_charge_amount"), bun.In(v))
		},
		OtherChargeAmountGT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.other_charge_amount"), v)
		},
		OtherChargeAmountGTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.other_charge_amount"), v)
		},
		OtherChargeAmountLT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.other_charge_amount"), v)
		},
		OtherChargeAmountLTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.other_charge_amount"), v)
		},
		OtherChargeAmountIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.other_charge_amount"))
		},
		OtherChargeAmountIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.other_charge_amount"))
		},
		FreightChargeAmountEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.freight_charge_amount"), v)
		},
		FreightChargeAmountNEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.freight_charge_amount"), v)
		},
		FreightChargeAmountIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.freight_charge_amount"), bun.In(v))
		},
		FreightChargeAmountNotIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.freight_charge_amount"), bun.In(v))
		},
		FreightChargeAmountGT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.freight_charge_amount"), v)
		},
		FreightChargeAmountGTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.freight_charge_amount"), v)
		},
		FreightChargeAmountLT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.freight_charge_amount"), v)
		},
		FreightChargeAmountLTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.freight_charge_amount"), v)
		},
		FreightChargeAmountIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.freight_charge_amount"))
		},
		FreightChargeAmountIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.freight_charge_amount"))
		},
		TotalChargeAmountEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.total_charge_amount"), v)
		},
		TotalChargeAmountNEQ: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.total_charge_amount"), v)
		},
		TotalChargeAmountIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.total_charge_amount"), bun.In(v))
		},
		TotalChargeAmountNotIn: func(q *bun.SelectQuery, v []decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.total_charge_amount"), bun.In(v))
		},
		TotalChargeAmountGT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.total_charge_amount"), v)
		},
		TotalChargeAmountGTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.total_charge_amount"), v)
		},
		TotalChargeAmountLT: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.total_charge_amount"), v)
		},
		TotalChargeAmountLTE: func(q *bun.SelectQuery, v decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.total_charge_amount"), v)
		},
		TotalChargeAmountIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.total_charge_amount"))
		},
		TotalChargeAmountIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.total_charge_amount"))
		},
		PiecesEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.pieces"), v)
		},
		PiecesNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.pieces"), v)
		},
		PiecesIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.pieces"), bun.In(v))
		},
		PiecesNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.pieces"), bun.In(v))
		},
		PiecesIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.pieces"))
		},
		PiecesIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.pieces"))
		},
		WeightEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.weight"), v)
		},
		WeightNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.weight"), v)
		},
		WeightIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.weight"), bun.In(v))
		},
		WeightNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.weight"), bun.In(v))
		},
		WeightIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.weight"))
		},
		WeightIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.weight"))
		},
		TemperatureMinEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.temperature_min"), v)
		},
		TemperatureMinNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.temperature_min"), v)
		},
		TemperatureMinIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.temperature_min"), bun.In(v))
		},
		TemperatureMinNotIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.temperature_min"), bun.In(v))
		},
		TemperatureMinIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.temperature_min"))
		},
		TemperatureMinIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.temperature_min"))
		},
		TemperatureMaxEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.temperature_max"), v)
		},
		TemperatureMaxNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.temperature_max"), v)
		},
		TemperatureMaxIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.temperature_max"), bun.In(v))
		},
		TemperatureMaxNotIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.temperature_max"), bun.In(v))
		},
		TemperatureMaxIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.temperature_max"))
		},
		TemperatureMaxIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.temperature_max"))
		},
		ActualDeliveryDateEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.actual_delivery_date"), v)
		},
		ActualDeliveryDateNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.actual_delivery_date"), v)
		},
		ActualDeliveryDateIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.actual_delivery_date"), bun.In(v))
		},
		ActualDeliveryDateNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.actual_delivery_date"), bun.In(v))
		},
		ActualDeliveryDateIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.actual_delivery_date"))
		},
		ActualDeliveryDateIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.actual_delivery_date"))
		},
		ActualShipDateEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.actual_ship_date"), v)
		},
		ActualShipDateNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.actual_ship_date"), v)
		},
		ActualShipDateIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.actual_ship_date"), bun.In(v))
		},
		ActualShipDateNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.actual_ship_date"), bun.In(v))
		},
		ActualShipDateIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.actual_ship_date"))
		},
		ActualShipDateIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.actual_ship_date"))
		},
		CanceledAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.canceled_at"), v)
		},
		CanceledAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.canceled_at"), v)
		},
		CanceledAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.canceled_at"), bun.In(v))
		},
		CanceledAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.canceled_at"), bun.In(v))
		},
		CanceledAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sp.canceled_at"))
		},
		CanceledAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sp.canceled_at"))
		},
		RatingUnitEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.rating_unit"), v)
		},
		RatingUnitNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.rating_unit"), v)
		},
		RatingUnitIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.rating_unit"), bun.In(v))
		},
		RatingUnitNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.rating_unit"), bun.In(v))
		},
		RatingUnitGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.rating_unit"), v)
		},
		RatingUnitGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.rating_unit"), v)
		},
		RatingUnitLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.rating_unit"), v)
		},
		RatingUnitLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.rating_unit"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sp.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sp.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sp.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sp.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sp.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sp.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sp.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sp.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("sp.organization_id"), orgID).
				Where("? = ?", bun.Ident("sp.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("sp.id"), id).
				Where("? = ?", bun.Ident("sp.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "sp." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"sp.status ASC",
				"sp.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "sp.status DESC"
			}
			return "sp.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "sp.created_at DESC"
			}
			return "sp.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "sp.updated_at DESC"
			}
			return "sp.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]shipmentFieldConfig {
		return map[string]shipmentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sp.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"service_type_id": {
				Name:       "service_type_id",
				Column:     "sp.service_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_type_id": {
				Name:       "shipment_type_id",
				Column:     "sp.shipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "sp.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_type_id": {
				Name:       "tractor_type_id",
				Column:     "sp.tractor_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_type_id": {
				Name:       "trailer_type_id",
				Column:     "sp.trailer_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"owner_id": {
				Name:       "owner_id",
				Column:     "sp.owner_id",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_by_id": {
				Name:       "canceled_by_id",
				Column:     "sp.canceled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"formula_template_id": {
				Name:       "formula_template_id",
				Column:     "sp.formula_template_id",
				Sortable:   false,
				Filterable: true,
			},
			"consolidation_group_id": {
				Name:       "consolidation_group_id",
				Column:     "sp.consolidation_group_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "sp.status",
				Sortable:   false,
				Filterable: true,
			},
			"pro_number": {
				Name:       "pro_number",
				Column:     "sp.pro_number",
				Sortable:   false,
				Filterable: true,
			},
			"bol": {
				Name:       "bol",
				Column:     "sp.bol",
				Sortable:   false,
				Filterable: true,
			},
			"cancel_reason": {
				Name:       "cancel_reason",
				Column:     "sp.cancel_reason",
				Sortable:   false,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "sp.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "sp.rank",
				Sortable:   false,
				Filterable: true,
			},
			"rating_method": {
				Name:       "rating_method",
				Column:     "sp.rating_method",
				Sortable:   false,
				Filterable: false,
			},
			"other_charge_amount": {
				Name:       "other_charge_amount",
				Column:     "sp.other_charge_amount",
				Sortable:   false,
				Filterable: false,
			},
			"freight_charge_amount": {
				Name:       "freight_charge_amount",
				Column:     "sp.freight_charge_amount",
				Sortable:   false,
				Filterable: false,
			},
			"total_charge_amount": {
				Name:       "total_charge_amount",
				Column:     "sp.total_charge_amount",
				Sortable:   false,
				Filterable: false,
			},
			"pieces": {
				Name:       "pieces",
				Column:     "sp.pieces",
				Sortable:   false,
				Filterable: false,
			},
			"weight": {
				Name:       "weight",
				Column:     "sp.weight",
				Sortable:   false,
				Filterable: false,
			},
			"temperature_min": {
				Name:       "temperature_min",
				Column:     "sp.temperature_min",
				Sortable:   false,
				Filterable: false,
			},
			"temperature_max": {
				Name:       "temperature_max",
				Column:     "sp.temperature_max",
				Sortable:   false,
				Filterable: false,
			},
			"actual_delivery_date": {
				Name:       "actual_delivery_date",
				Column:     "sp.actual_delivery_date",
				Sortable:   false,
				Filterable: false,
			},
			"actual_ship_date": {
				Name:       "actual_ship_date",
				Column:     "sp.actual_ship_date",
				Sortable:   false,
				Filterable: false,
			},
			"canceled_at": {
				Name:       "canceled_at",
				Column:     "sp.canceled_at",
				Sortable:   false,
				Filterable: false,
			},
			"rating_unit": {
				Name:       "rating_unit",
				Column:     "sp.rating_unit",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sp.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sp.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sp.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]shipmentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sp.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"service_type_id": {
				Name:       "service_type_id",
				Column:     "sp.service_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_type_id": {
				Name:       "shipment_type_id",
				Column:     "sp.shipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "sp.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_type_id": {
				Name:       "tractor_type_id",
				Column:     "sp.tractor_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_type_id": {
				Name:       "trailer_type_id",
				Column:     "sp.trailer_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"owner_id": {
				Name:       "owner_id",
				Column:     "sp.owner_id",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_by_id": {
				Name:       "canceled_by_id",
				Column:     "sp.canceled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"formula_template_id": {
				Name:       "formula_template_id",
				Column:     "sp.formula_template_id",
				Sortable:   false,
				Filterable: true,
			},
			"consolidation_group_id": {
				Name:       "consolidation_group_id",
				Column:     "sp.consolidation_group_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "sp.status",
				Sortable:   false,
				Filterable: true,
			},
			"pro_number": {
				Name:       "pro_number",
				Column:     "sp.pro_number",
				Sortable:   false,
				Filterable: true,
			},
			"bol": {
				Name:       "bol",
				Column:     "sp.bol",
				Sortable:   false,
				Filterable: true,
			},
			"cancel_reason": {
				Name:       "cancel_reason",
				Column:     "sp.cancel_reason",
				Sortable:   false,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "sp.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "sp.rank",
				Sortable:   false,
				Filterable: true,
			},
			"rating_method": {
				Name:       "rating_method",
				Column:     "sp.rating_method",
				Sortable:   false,
				Filterable: false,
			},
			"other_charge_amount": {
				Name:       "other_charge_amount",
				Column:     "sp.other_charge_amount",
				Sortable:   false,
				Filterable: false,
			},
			"freight_charge_amount": {
				Name:       "freight_charge_amount",
				Column:     "sp.freight_charge_amount",
				Sortable:   false,
				Filterable: false,
			},
			"total_charge_amount": {
				Name:       "total_charge_amount",
				Column:     "sp.total_charge_amount",
				Sortable:   false,
				Filterable: false,
			},
			"pieces": {
				Name:       "pieces",
				Column:     "sp.pieces",
				Sortable:   false,
				Filterable: false,
			},
			"weight": {
				Name:       "weight",
				Column:     "sp.weight",
				Sortable:   false,
				Filterable: false,
			},
			"temperature_min": {
				Name:       "temperature_min",
				Column:     "sp.temperature_min",
				Sortable:   false,
				Filterable: false,
			},
			"temperature_max": {
				Name:       "temperature_max",
				Column:     "sp.temperature_max",
				Sortable:   false,
				Filterable: false,
			},
			"actual_delivery_date": {
				Name:       "actual_delivery_date",
				Column:     "sp.actual_delivery_date",
				Sortable:   false,
				Filterable: false,
			},
			"actual_ship_date": {
				Name:       "actual_ship_date",
				Column:     "sp.actual_ship_date",
				Sortable:   false,
				Filterable: false,
			},
			"canceled_at": {
				Name:       "canceled_at",
				Column:     "sp.canceled_at",
				Sortable:   false,
				Filterable: false,
			},
			"rating_unit": {
				Name:       "rating_unit",
				Column:     "sp.rating_unit",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sp.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sp.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sp.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]shipmentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sp.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"service_type_id": {
				Name:       "service_type_id",
				Column:     "sp.service_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_type_id": {
				Name:       "shipment_type_id",
				Column:     "sp.shipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "sp.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_type_id": {
				Name:       "tractor_type_id",
				Column:     "sp.tractor_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_type_id": {
				Name:       "trailer_type_id",
				Column:     "sp.trailer_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"owner_id": {
				Name:       "owner_id",
				Column:     "sp.owner_id",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_by_id": {
				Name:       "canceled_by_id",
				Column:     "sp.canceled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"formula_template_id": {
				Name:       "formula_template_id",
				Column:     "sp.formula_template_id",
				Sortable:   false,
				Filterable: true,
			},
			"consolidation_group_id": {
				Name:       "consolidation_group_id",
				Column:     "sp.consolidation_group_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "sp.status",
				Sortable:   false,
				Filterable: true,
			},
			"pro_number": {
				Name:       "pro_number",
				Column:     "sp.pro_number",
				Sortable:   false,
				Filterable: true,
			},
			"bol": {
				Name:       "bol",
				Column:     "sp.bol",
				Sortable:   false,
				Filterable: true,
			},
			"cancel_reason": {
				Name:       "cancel_reason",
				Column:     "sp.cancel_reason",
				Sortable:   false,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "sp.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "sp.rank",
				Sortable:   false,
				Filterable: true,
			},
			"rating_method": {
				Name:       "rating_method",
				Column:     "sp.rating_method",
				Sortable:   false,
				Filterable: false,
			},
			"other_charge_amount": {
				Name:       "other_charge_amount",
				Column:     "sp.other_charge_amount",
				Sortable:   false,
				Filterable: false,
			},
			"freight_charge_amount": {
				Name:       "freight_charge_amount",
				Column:     "sp.freight_charge_amount",
				Sortable:   false,
				Filterable: false,
			},
			"total_charge_amount": {
				Name:       "total_charge_amount",
				Column:     "sp.total_charge_amount",
				Sortable:   false,
				Filterable: false,
			},
			"pieces": {
				Name:       "pieces",
				Column:     "sp.pieces",
				Sortable:   false,
				Filterable: false,
			},
			"weight": {
				Name:       "weight",
				Column:     "sp.weight",
				Sortable:   false,
				Filterable: false,
			},
			"temperature_min": {
				Name:       "temperature_min",
				Column:     "sp.temperature_min",
				Sortable:   false,
				Filterable: false,
			},
			"temperature_max": {
				Name:       "temperature_max",
				Column:     "sp.temperature_max",
				Sortable:   false,
				Filterable: false,
			},
			"actual_delivery_date": {
				Name:       "actual_delivery_date",
				Column:     "sp.actual_delivery_date",
				Sortable:   false,
				Filterable: false,
			},
			"actual_ship_date": {
				Name:       "actual_ship_date",
				Column:     "sp.actual_ship_date",
				Sortable:   false,
				Filterable: false,
			},
			"canceled_at": {
				Name:       "canceled_at",
				Column:     "sp.canceled_at",
				Sortable:   false,
				Filterable: false,
			},
			"rating_unit": {
				Name:       "rating_unit",
				Column:     "sp.rating_unit",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sp.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sp.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sp.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit      string
		Organization      string
		ShipmentType      string
		ServiceType       string
		Customer          string
		TractorType       string
		TrailerType       string
		CanceledBy        string
		Owner             string
		FormulaTemplate   string
		Moves             string
		Commodities       string
		AdditionalCharges string
	}{
		BusinessUnit:      "BusinessUnit",
		Organization:      "Organization",
		ShipmentType:      "ShipmentType",
		ServiceType:       "ServiceType",
		Customer:          "Customer",
		TractorType:       "TractorType",
		TrailerType:       "TrailerType",
		CanceledBy:        "CanceledBy",
		Owner:             "Owner",
		FormulaTemplate:   "FormulaTemplate",
		Moves:             "Moves",
		Commodities:       "Commodities",
		AdditionalCharges: "AdditionalCharges",
	},
}

// ShipmentQueryBuilder provides a fluent interface for building queries
type ShipmentQueryBuilder struct {
	query *bun.SelectQuery
}

// NewShipmentQuery creates a new query builder
func NewShipmentQuery(db bun.IDB) *ShipmentQueryBuilder {
	return &ShipmentQueryBuilder{
		query: db.NewSelect().Model((*Shipment)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ShipmentFromQuery(q *bun.SelectQuery) *ShipmentQueryBuilder {
	return &ShipmentQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ShipmentQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ShipmentQueryBuilder) Model(model interface{}) *ShipmentQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ShipmentQueryBuilder) WhereIDEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ShipmentQueryBuilder) WhereIDNEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ShipmentQueryBuilder) WhereIDIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereIDNotIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ShipmentQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ShipmentQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ShipmentQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ShipmentQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereServiceTypeIDEQ adds a WHERE service_type_id = ? condition
func (b *ShipmentQueryBuilder) WhereServiceTypeIDEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ServiceTypeIDEQ(b.query, v)
	return b
}

// WhereServiceTypeIDNEQ adds a WHERE service_type_id != ? condition
func (b *ShipmentQueryBuilder) WhereServiceTypeIDNEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ServiceTypeIDNEQ(b.query, v)
	return b
}

// WhereServiceTypeIDIn adds a WHERE service_type_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereServiceTypeIDIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ServiceTypeIDIn(b.query, v)
	return b
}

// WhereServiceTypeIDNotIn adds a WHERE service_type_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereServiceTypeIDNotIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ServiceTypeIDNotIn(b.query, v)
	return b
}

// WhereShipmentTypeIDEQ adds a WHERE shipment_type_id = ? condition
func (b *ShipmentQueryBuilder) WhereShipmentTypeIDEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ShipmentTypeIDEQ(b.query, v)
	return b
}

// WhereShipmentTypeIDNEQ adds a WHERE shipment_type_id != ? condition
func (b *ShipmentQueryBuilder) WhereShipmentTypeIDNEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ShipmentTypeIDNEQ(b.query, v)
	return b
}

// WhereShipmentTypeIDIn adds a WHERE shipment_type_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereShipmentTypeIDIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ShipmentTypeIDIn(b.query, v)
	return b
}

// WhereShipmentTypeIDNotIn adds a WHERE shipment_type_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereShipmentTypeIDNotIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ShipmentTypeIDNotIn(b.query, v)
	return b
}

// WhereCustomerIDEQ adds a WHERE customer_id = ? condition
func (b *ShipmentQueryBuilder) WhereCustomerIDEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CustomerIDEQ(b.query, v)
	return b
}

// WhereCustomerIDNEQ adds a WHERE customer_id != ? condition
func (b *ShipmentQueryBuilder) WhereCustomerIDNEQ(v pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CustomerIDNEQ(b.query, v)
	return b
}

// WhereCustomerIDIn adds a WHERE customer_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereCustomerIDIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CustomerIDIn(b.query, v)
	return b
}

// WhereCustomerIDNotIn adds a WHERE customer_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereCustomerIDNotIn(v []pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CustomerIDNotIn(b.query, v)
	return b
}

// WhereTractorTypeIDEQ adds a WHERE tractor_type_id = ? condition
func (b *ShipmentQueryBuilder) WhereTractorTypeIDEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TractorTypeIDEQ(b.query, v)
	return b
}

// WhereTractorTypeIDNEQ adds a WHERE tractor_type_id != ? condition
func (b *ShipmentQueryBuilder) WhereTractorTypeIDNEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TractorTypeIDNEQ(b.query, v)
	return b
}

// WhereTractorTypeIDIn adds a WHERE tractor_type_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereTractorTypeIDIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TractorTypeIDIn(b.query, v)
	return b
}

// WhereTractorTypeIDNotIn adds a WHERE tractor_type_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereTractorTypeIDNotIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TractorTypeIDNotIn(b.query, v)
	return b
}

// WhereTrailerTypeIDEQ adds a WHERE trailer_type_id = ? condition
func (b *ShipmentQueryBuilder) WhereTrailerTypeIDEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TrailerTypeIDEQ(b.query, v)
	return b
}

// WhereTrailerTypeIDNEQ adds a WHERE trailer_type_id != ? condition
func (b *ShipmentQueryBuilder) WhereTrailerTypeIDNEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TrailerTypeIDNEQ(b.query, v)
	return b
}

// WhereTrailerTypeIDIn adds a WHERE trailer_type_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereTrailerTypeIDIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TrailerTypeIDIn(b.query, v)
	return b
}

// WhereTrailerTypeIDNotIn adds a WHERE trailer_type_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereTrailerTypeIDNotIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TrailerTypeIDNotIn(b.query, v)
	return b
}

// WhereOwnerIDEQ adds a WHERE owner_id = ? condition
func (b *ShipmentQueryBuilder) WhereOwnerIDEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OwnerIDEQ(b.query, v)
	return b
}

// WhereOwnerIDNEQ adds a WHERE owner_id != ? condition
func (b *ShipmentQueryBuilder) WhereOwnerIDNEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OwnerIDNEQ(b.query, v)
	return b
}

// WhereOwnerIDIn adds a WHERE owner_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereOwnerIDIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OwnerIDIn(b.query, v)
	return b
}

// WhereOwnerIDNotIn adds a WHERE owner_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereOwnerIDNotIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OwnerIDNotIn(b.query, v)
	return b
}

// WhereCanceledByIDEQ adds a WHERE canceled_by_id = ? condition
func (b *ShipmentQueryBuilder) WhereCanceledByIDEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CanceledByIDEQ(b.query, v)
	return b
}

// WhereCanceledByIDNEQ adds a WHERE canceled_by_id != ? condition
func (b *ShipmentQueryBuilder) WhereCanceledByIDNEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CanceledByIDNEQ(b.query, v)
	return b
}

// WhereCanceledByIDIn adds a WHERE canceled_by_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereCanceledByIDIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CanceledByIDIn(b.query, v)
	return b
}

// WhereCanceledByIDNotIn adds a WHERE canceled_by_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereCanceledByIDNotIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CanceledByIDNotIn(b.query, v)
	return b
}

// WhereFormulaTemplateIDEQ adds a WHERE formula_template_id = ? condition
func (b *ShipmentQueryBuilder) WhereFormulaTemplateIDEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FormulaTemplateIDEQ(b.query, v)
	return b
}

// WhereFormulaTemplateIDNEQ adds a WHERE formula_template_id != ? condition
func (b *ShipmentQueryBuilder) WhereFormulaTemplateIDNEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FormulaTemplateIDNEQ(b.query, v)
	return b
}

// WhereFormulaTemplateIDIn adds a WHERE formula_template_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereFormulaTemplateIDIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FormulaTemplateIDIn(b.query, v)
	return b
}

// WhereFormulaTemplateIDNotIn adds a WHERE formula_template_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereFormulaTemplateIDNotIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FormulaTemplateIDNotIn(b.query, v)
	return b
}

// WhereConsolidationGroupIDEQ adds a WHERE consolidation_group_id = ? condition
func (b *ShipmentQueryBuilder) WhereConsolidationGroupIDEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ConsolidationGroupIDEQ(b.query, v)
	return b
}

// WhereConsolidationGroupIDNEQ adds a WHERE consolidation_group_id != ? condition
func (b *ShipmentQueryBuilder) WhereConsolidationGroupIDNEQ(v *pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ConsolidationGroupIDNEQ(b.query, v)
	return b
}

// WhereConsolidationGroupIDIn adds a WHERE consolidation_group_id IN (?) condition
func (b *ShipmentQueryBuilder) WhereConsolidationGroupIDIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ConsolidationGroupIDIn(b.query, v)
	return b
}

// WhereConsolidationGroupIDNotIn adds a WHERE consolidation_group_id NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereConsolidationGroupIDNotIn(v []*pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ConsolidationGroupIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *ShipmentQueryBuilder) WhereStatusEQ(v Status) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *ShipmentQueryBuilder) WhereStatusNEQ(v Status) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *ShipmentQueryBuilder) WhereStatusIn(v []Status) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereStatusNotIn(v []Status) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereProNumberEQ adds a WHERE pro_number = ? condition
func (b *ShipmentQueryBuilder) WhereProNumberEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ProNumberEQ(b.query, v)
	return b
}

// WhereProNumberNEQ adds a WHERE pro_number != ? condition
func (b *ShipmentQueryBuilder) WhereProNumberNEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ProNumberNEQ(b.query, v)
	return b
}

// WhereProNumberIn adds a WHERE pro_number IN (?) condition
func (b *ShipmentQueryBuilder) WhereProNumberIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ProNumberIn(b.query, v)
	return b
}

// WhereProNumberNotIn adds a WHERE pro_number NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereProNumberNotIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ProNumberNotIn(b.query, v)
	return b
}

// WhereProNumberContains adds a WHERE pro_number LIKE ? condition
func (b *ShipmentQueryBuilder) WhereProNumberContains(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ProNumberContains(b.query, v)
	return b
}

// WhereProNumberHasPrefix adds a WHERE pro_number LIKE ? condition
func (b *ShipmentQueryBuilder) WhereProNumberHasPrefix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ProNumberHasPrefix(b.query, v)
	return b
}

// WhereProNumberHasSuffix adds a WHERE pro_number LIKE ? condition
func (b *ShipmentQueryBuilder) WhereProNumberHasSuffix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ProNumberHasSuffix(b.query, v)
	return b
}

// WhereBOLEQ adds a WHERE bol = ? condition
func (b *ShipmentQueryBuilder) WhereBOLEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BOLEQ(b.query, v)
	return b
}

// WhereBOLNEQ adds a WHERE bol != ? condition
func (b *ShipmentQueryBuilder) WhereBOLNEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BOLNEQ(b.query, v)
	return b
}

// WhereBOLIn adds a WHERE bol IN (?) condition
func (b *ShipmentQueryBuilder) WhereBOLIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BOLIn(b.query, v)
	return b
}

// WhereBOLNotIn adds a WHERE bol NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereBOLNotIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BOLNotIn(b.query, v)
	return b
}

// WhereBOLContains adds a WHERE bol LIKE ? condition
func (b *ShipmentQueryBuilder) WhereBOLContains(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BOLContains(b.query, v)
	return b
}

// WhereBOLHasPrefix adds a WHERE bol LIKE ? condition
func (b *ShipmentQueryBuilder) WhereBOLHasPrefix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BOLHasPrefix(b.query, v)
	return b
}

// WhereBOLHasSuffix adds a WHERE bol LIKE ? condition
func (b *ShipmentQueryBuilder) WhereBOLHasSuffix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.BOLHasSuffix(b.query, v)
	return b
}

// WhereCancelReasonEQ adds a WHERE cancel_reason = ? condition
func (b *ShipmentQueryBuilder) WhereCancelReasonEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CancelReasonEQ(b.query, v)
	return b
}

// WhereCancelReasonNEQ adds a WHERE cancel_reason != ? condition
func (b *ShipmentQueryBuilder) WhereCancelReasonNEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CancelReasonNEQ(b.query, v)
	return b
}

// WhereCancelReasonIn adds a WHERE cancel_reason IN (?) condition
func (b *ShipmentQueryBuilder) WhereCancelReasonIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CancelReasonIn(b.query, v)
	return b
}

// WhereCancelReasonNotIn adds a WHERE cancel_reason NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereCancelReasonNotIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CancelReasonNotIn(b.query, v)
	return b
}

// WhereCancelReasonContains adds a WHERE cancel_reason LIKE ? condition
func (b *ShipmentQueryBuilder) WhereCancelReasonContains(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CancelReasonContains(b.query, v)
	return b
}

// WhereCancelReasonHasPrefix adds a WHERE cancel_reason LIKE ? condition
func (b *ShipmentQueryBuilder) WhereCancelReasonHasPrefix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CancelReasonHasPrefix(b.query, v)
	return b
}

// WhereCancelReasonHasSuffix adds a WHERE cancel_reason LIKE ? condition
func (b *ShipmentQueryBuilder) WhereCancelReasonHasSuffix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CancelReasonHasSuffix(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *ShipmentQueryBuilder) WhereSearchVectorEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *ShipmentQueryBuilder) WhereSearchVectorNEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *ShipmentQueryBuilder) WhereSearchVectorIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereSearchVectorNotIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *ShipmentQueryBuilder) WhereSearchVectorContains(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *ShipmentQueryBuilder) WhereSearchVectorHasPrefix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *ShipmentQueryBuilder) WhereSearchVectorHasSuffix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *ShipmentQueryBuilder) WhereRankEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *ShipmentQueryBuilder) WhereRankNEQ(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *ShipmentQueryBuilder) WhereRankIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereRankNotIn(v []string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *ShipmentQueryBuilder) WhereRankContains(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *ShipmentQueryBuilder) WhereRankHasPrefix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *ShipmentQueryBuilder) WhereRankHasSuffix(v string) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// WhereRatingMethodEQ adds a WHERE rating_method = ? condition
func (b *ShipmentQueryBuilder) WhereRatingMethodEQ(v RatingMethod) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingMethodEQ(b.query, v)
	return b
}

// WhereRatingMethodNEQ adds a WHERE rating_method != ? condition
func (b *ShipmentQueryBuilder) WhereRatingMethodNEQ(v RatingMethod) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingMethodNEQ(b.query, v)
	return b
}

// WhereRatingMethodIn adds a WHERE rating_method IN (?) condition
func (b *ShipmentQueryBuilder) WhereRatingMethodIn(v []RatingMethod) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingMethodIn(b.query, v)
	return b
}

// WhereRatingMethodNotIn adds a WHERE rating_method NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereRatingMethodNotIn(v []RatingMethod) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingMethodNotIn(b.query, v)
	return b
}

// WhereOtherChargeAmountEQ adds a WHERE other_charge_amount = ? condition
func (b *ShipmentQueryBuilder) WhereOtherChargeAmountEQ(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OtherChargeAmountEQ(b.query, v)
	return b
}

// WhereOtherChargeAmountNEQ adds a WHERE other_charge_amount != ? condition
func (b *ShipmentQueryBuilder) WhereOtherChargeAmountNEQ(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OtherChargeAmountNEQ(b.query, v)
	return b
}

// WhereOtherChargeAmountGT adds a WHERE other_charge_amount > ? condition
func (b *ShipmentQueryBuilder) WhereOtherChargeAmountGT(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OtherChargeAmountGT(b.query, v)
	return b
}

// WhereOtherChargeAmountGTE adds a WHERE other_charge_amount >= ? condition
func (b *ShipmentQueryBuilder) WhereOtherChargeAmountGTE(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OtherChargeAmountGTE(b.query, v)
	return b
}

// WhereOtherChargeAmountLT adds a WHERE other_charge_amount < ? condition
func (b *ShipmentQueryBuilder) WhereOtherChargeAmountLT(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OtherChargeAmountLT(b.query, v)
	return b
}

// WhereOtherChargeAmountLTE adds a WHERE other_charge_amount <= ? condition
func (b *ShipmentQueryBuilder) WhereOtherChargeAmountLTE(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OtherChargeAmountLTE(b.query, v)
	return b
}

// WhereOtherChargeAmountIn adds a WHERE other_charge_amount IN (?) condition
func (b *ShipmentQueryBuilder) WhereOtherChargeAmountIn(v []decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OtherChargeAmountIn(b.query, v)
	return b
}

// WhereOtherChargeAmountNotIn adds a WHERE other_charge_amount NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereOtherChargeAmountNotIn(v []decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.OtherChargeAmountNotIn(b.query, v)
	return b
}

// WhereFreightChargeAmountEQ adds a WHERE freight_charge_amount = ? condition
func (b *ShipmentQueryBuilder) WhereFreightChargeAmountEQ(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FreightChargeAmountEQ(b.query, v)
	return b
}

// WhereFreightChargeAmountNEQ adds a WHERE freight_charge_amount != ? condition
func (b *ShipmentQueryBuilder) WhereFreightChargeAmountNEQ(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FreightChargeAmountNEQ(b.query, v)
	return b
}

// WhereFreightChargeAmountGT adds a WHERE freight_charge_amount > ? condition
func (b *ShipmentQueryBuilder) WhereFreightChargeAmountGT(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FreightChargeAmountGT(b.query, v)
	return b
}

// WhereFreightChargeAmountGTE adds a WHERE freight_charge_amount >= ? condition
func (b *ShipmentQueryBuilder) WhereFreightChargeAmountGTE(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FreightChargeAmountGTE(b.query, v)
	return b
}

// WhereFreightChargeAmountLT adds a WHERE freight_charge_amount < ? condition
func (b *ShipmentQueryBuilder) WhereFreightChargeAmountLT(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FreightChargeAmountLT(b.query, v)
	return b
}

// WhereFreightChargeAmountLTE adds a WHERE freight_charge_amount <= ? condition
func (b *ShipmentQueryBuilder) WhereFreightChargeAmountLTE(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FreightChargeAmountLTE(b.query, v)
	return b
}

// WhereFreightChargeAmountIn adds a WHERE freight_charge_amount IN (?) condition
func (b *ShipmentQueryBuilder) WhereFreightChargeAmountIn(v []decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FreightChargeAmountIn(b.query, v)
	return b
}

// WhereFreightChargeAmountNotIn adds a WHERE freight_charge_amount NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereFreightChargeAmountNotIn(v []decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.FreightChargeAmountNotIn(b.query, v)
	return b
}

// WhereTotalChargeAmountEQ adds a WHERE total_charge_amount = ? condition
func (b *ShipmentQueryBuilder) WhereTotalChargeAmountEQ(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TotalChargeAmountEQ(b.query, v)
	return b
}

// WhereTotalChargeAmountNEQ adds a WHERE total_charge_amount != ? condition
func (b *ShipmentQueryBuilder) WhereTotalChargeAmountNEQ(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TotalChargeAmountNEQ(b.query, v)
	return b
}

// WhereTotalChargeAmountGT adds a WHERE total_charge_amount > ? condition
func (b *ShipmentQueryBuilder) WhereTotalChargeAmountGT(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TotalChargeAmountGT(b.query, v)
	return b
}

// WhereTotalChargeAmountGTE adds a WHERE total_charge_amount >= ? condition
func (b *ShipmentQueryBuilder) WhereTotalChargeAmountGTE(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TotalChargeAmountGTE(b.query, v)
	return b
}

// WhereTotalChargeAmountLT adds a WHERE total_charge_amount < ? condition
func (b *ShipmentQueryBuilder) WhereTotalChargeAmountLT(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TotalChargeAmountLT(b.query, v)
	return b
}

// WhereTotalChargeAmountLTE adds a WHERE total_charge_amount <= ? condition
func (b *ShipmentQueryBuilder) WhereTotalChargeAmountLTE(v decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TotalChargeAmountLTE(b.query, v)
	return b
}

// WhereTotalChargeAmountIn adds a WHERE total_charge_amount IN (?) condition
func (b *ShipmentQueryBuilder) WhereTotalChargeAmountIn(v []decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TotalChargeAmountIn(b.query, v)
	return b
}

// WhereTotalChargeAmountNotIn adds a WHERE total_charge_amount NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereTotalChargeAmountNotIn(v []decimal.NullDecimal) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TotalChargeAmountNotIn(b.query, v)
	return b
}

// WherePiecesEQ adds a WHERE pieces = ? condition
func (b *ShipmentQueryBuilder) WherePiecesEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.PiecesEQ(b.query, v)
	return b
}

// WherePiecesNEQ adds a WHERE pieces != ? condition
func (b *ShipmentQueryBuilder) WherePiecesNEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.PiecesNEQ(b.query, v)
	return b
}

// WherePiecesIn adds a WHERE pieces IN (?) condition
func (b *ShipmentQueryBuilder) WherePiecesIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.PiecesIn(b.query, v)
	return b
}

// WherePiecesNotIn adds a WHERE pieces NOT IN (?) condition
func (b *ShipmentQueryBuilder) WherePiecesNotIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.PiecesNotIn(b.query, v)
	return b
}

// WhereWeightEQ adds a WHERE weight = ? condition
func (b *ShipmentQueryBuilder) WhereWeightEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.WeightEQ(b.query, v)
	return b
}

// WhereWeightNEQ adds a WHERE weight != ? condition
func (b *ShipmentQueryBuilder) WhereWeightNEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.WeightNEQ(b.query, v)
	return b
}

// WhereWeightIn adds a WHERE weight IN (?) condition
func (b *ShipmentQueryBuilder) WhereWeightIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.WeightIn(b.query, v)
	return b
}

// WhereWeightNotIn adds a WHERE weight NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereWeightNotIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.WeightNotIn(b.query, v)
	return b
}

// WhereTemperatureMinEQ adds a WHERE temperature_min = ? condition
func (b *ShipmentQueryBuilder) WhereTemperatureMinEQ(v *int16) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TemperatureMinEQ(b.query, v)
	return b
}

// WhereTemperatureMinNEQ adds a WHERE temperature_min != ? condition
func (b *ShipmentQueryBuilder) WhereTemperatureMinNEQ(v *int16) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TemperatureMinNEQ(b.query, v)
	return b
}

// WhereTemperatureMinIn adds a WHERE temperature_min IN (?) condition
func (b *ShipmentQueryBuilder) WhereTemperatureMinIn(v []*int16) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TemperatureMinIn(b.query, v)
	return b
}

// WhereTemperatureMinNotIn adds a WHERE temperature_min NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereTemperatureMinNotIn(v []*int16) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TemperatureMinNotIn(b.query, v)
	return b
}

// WhereTemperatureMaxEQ adds a WHERE temperature_max = ? condition
func (b *ShipmentQueryBuilder) WhereTemperatureMaxEQ(v *int16) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TemperatureMaxEQ(b.query, v)
	return b
}

// WhereTemperatureMaxNEQ adds a WHERE temperature_max != ? condition
func (b *ShipmentQueryBuilder) WhereTemperatureMaxNEQ(v *int16) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TemperatureMaxNEQ(b.query, v)
	return b
}

// WhereTemperatureMaxIn adds a WHERE temperature_max IN (?) condition
func (b *ShipmentQueryBuilder) WhereTemperatureMaxIn(v []*int16) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TemperatureMaxIn(b.query, v)
	return b
}

// WhereTemperatureMaxNotIn adds a WHERE temperature_max NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereTemperatureMaxNotIn(v []*int16) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.TemperatureMaxNotIn(b.query, v)
	return b
}

// WhereActualDeliveryDateEQ adds a WHERE actual_delivery_date = ? condition
func (b *ShipmentQueryBuilder) WhereActualDeliveryDateEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ActualDeliveryDateEQ(b.query, v)
	return b
}

// WhereActualDeliveryDateNEQ adds a WHERE actual_delivery_date != ? condition
func (b *ShipmentQueryBuilder) WhereActualDeliveryDateNEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ActualDeliveryDateNEQ(b.query, v)
	return b
}

// WhereActualDeliveryDateIn adds a WHERE actual_delivery_date IN (?) condition
func (b *ShipmentQueryBuilder) WhereActualDeliveryDateIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ActualDeliveryDateIn(b.query, v)
	return b
}

// WhereActualDeliveryDateNotIn adds a WHERE actual_delivery_date NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereActualDeliveryDateNotIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ActualDeliveryDateNotIn(b.query, v)
	return b
}

// WhereActualShipDateEQ adds a WHERE actual_ship_date = ? condition
func (b *ShipmentQueryBuilder) WhereActualShipDateEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ActualShipDateEQ(b.query, v)
	return b
}

// WhereActualShipDateNEQ adds a WHERE actual_ship_date != ? condition
func (b *ShipmentQueryBuilder) WhereActualShipDateNEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ActualShipDateNEQ(b.query, v)
	return b
}

// WhereActualShipDateIn adds a WHERE actual_ship_date IN (?) condition
func (b *ShipmentQueryBuilder) WhereActualShipDateIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ActualShipDateIn(b.query, v)
	return b
}

// WhereActualShipDateNotIn adds a WHERE actual_ship_date NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereActualShipDateNotIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.ActualShipDateNotIn(b.query, v)
	return b
}

// WhereCanceledAtEQ adds a WHERE canceled_at = ? condition
func (b *ShipmentQueryBuilder) WhereCanceledAtEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CanceledAtEQ(b.query, v)
	return b
}

// WhereCanceledAtNEQ adds a WHERE canceled_at != ? condition
func (b *ShipmentQueryBuilder) WhereCanceledAtNEQ(v *int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CanceledAtNEQ(b.query, v)
	return b
}

// WhereCanceledAtIn adds a WHERE canceled_at IN (?) condition
func (b *ShipmentQueryBuilder) WhereCanceledAtIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CanceledAtIn(b.query, v)
	return b
}

// WhereCanceledAtNotIn adds a WHERE canceled_at NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereCanceledAtNotIn(v []*int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CanceledAtNotIn(b.query, v)
	return b
}

// WhereRatingUnitEQ adds a WHERE rating_unit = ? condition
func (b *ShipmentQueryBuilder) WhereRatingUnitEQ(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingUnitEQ(b.query, v)
	return b
}

// WhereRatingUnitNEQ adds a WHERE rating_unit != ? condition
func (b *ShipmentQueryBuilder) WhereRatingUnitNEQ(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingUnitNEQ(b.query, v)
	return b
}

// WhereRatingUnitGT adds a WHERE rating_unit > ? condition
func (b *ShipmentQueryBuilder) WhereRatingUnitGT(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingUnitGT(b.query, v)
	return b
}

// WhereRatingUnitGTE adds a WHERE rating_unit >= ? condition
func (b *ShipmentQueryBuilder) WhereRatingUnitGTE(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingUnitGTE(b.query, v)
	return b
}

// WhereRatingUnitLT adds a WHERE rating_unit < ? condition
func (b *ShipmentQueryBuilder) WhereRatingUnitLT(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingUnitLT(b.query, v)
	return b
}

// WhereRatingUnitLTE adds a WHERE rating_unit <= ? condition
func (b *ShipmentQueryBuilder) WhereRatingUnitLTE(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingUnitLTE(b.query, v)
	return b
}

// WhereRatingUnitIn adds a WHERE rating_unit IN (?) condition
func (b *ShipmentQueryBuilder) WhereRatingUnitIn(v []int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingUnitIn(b.query, v)
	return b
}

// WhereRatingUnitNotIn adds a WHERE rating_unit NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereRatingUnitNotIn(v []int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.RatingUnitNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ShipmentQueryBuilder) WhereVersionEQ(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ShipmentQueryBuilder) WhereVersionNEQ(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ShipmentQueryBuilder) WhereVersionGT(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ShipmentQueryBuilder) WhereVersionGTE(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ShipmentQueryBuilder) WhereVersionLT(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ShipmentQueryBuilder) WhereVersionLTE(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ShipmentQueryBuilder) WhereVersionIn(v []int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereVersionNotIn(v []int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ShipmentQueryBuilder) WhereCreatedAtEQ(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ShipmentQueryBuilder) WhereCreatedAtNEQ(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ShipmentQueryBuilder) WhereCreatedAtGT(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ShipmentQueryBuilder) WhereCreatedAtGTE(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ShipmentQueryBuilder) WhereCreatedAtLT(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ShipmentQueryBuilder) WhereCreatedAtLTE(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ShipmentQueryBuilder) WhereCreatedAtIn(v []int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereCreatedAtNotIn(v []int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ShipmentQueryBuilder) WhereUpdatedAtEQ(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ShipmentQueryBuilder) WhereUpdatedAtNEQ(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ShipmentQueryBuilder) WhereUpdatedAtGT(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ShipmentQueryBuilder) WhereUpdatedAtGTE(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ShipmentQueryBuilder) WhereUpdatedAtLT(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ShipmentQueryBuilder) WhereUpdatedAtLTE(v int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ShipmentQueryBuilder) WhereUpdatedAtIn(v []int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ShipmentQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ShipmentQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ShipmentQueryBuilder {
	b.query = ShipmentQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ShipmentQueryBuilder) WhereGroup(sep string, fn func(*ShipmentQueryBuilder) *ShipmentQueryBuilder) *ShipmentQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ShipmentQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ShipmentQueryBuilder) Where(query string, args ...interface{}) *ShipmentQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ShipmentQueryBuilder) OrderBy(column string, desc ...bool) *ShipmentQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ShipmentQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ShipmentQueryBuilder) Limit(n int) *ShipmentQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ShipmentQueryBuilder) Offset(n int) *ShipmentQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ShipmentQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ShipmentQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ShipmentQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ShipmentQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ShipmentQueryBuilder) All(ctx context.Context) ([]*Shipment, error) {
	var entities []*Shipment
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ShipmentQueryBuilder) AllWithCount(ctx context.Context) ([]*Shipment, int, error) {
	var entities []*Shipment
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ShipmentQueryBuilder) One(ctx context.Context) (*Shipment, error) {
	entity := new(Shipment)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ShipmentQueryBuilder) First(ctx context.Context) (*Shipment, error) {
	entity := new(Shipment)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ShipmentBuild creates a chainable query builder
func ShipmentBuild(db bun.IDB) *ShipmentQueryBuilder {
	return NewShipmentQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *ShipmentQueryBuilder) LoadBusinessUnit() *ShipmentQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *ShipmentQueryBuilder) LoadOrganization() *ShipmentQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadShipmentType loads the ShipmentType relationship
func (b *ShipmentQueryBuilder) LoadShipmentType() *ShipmentQueryBuilder {
	b.query = b.query.Relation("ShipmentType")
	return b
}

// LoadServiceType loads the ServiceType relationship
func (b *ShipmentQueryBuilder) LoadServiceType() *ShipmentQueryBuilder {
	b.query = b.query.Relation("ServiceType")
	return b
}

// LoadCustomer loads the Customer relationship
func (b *ShipmentQueryBuilder) LoadCustomer() *ShipmentQueryBuilder {
	b.query = b.query.Relation("Customer")
	return b
}

// LoadTractorType loads the TractorType relationship
func (b *ShipmentQueryBuilder) LoadTractorType() *ShipmentQueryBuilder {
	b.query = b.query.Relation("TractorType")
	return b
}

// LoadTrailerType loads the TrailerType relationship
func (b *ShipmentQueryBuilder) LoadTrailerType() *ShipmentQueryBuilder {
	b.query = b.query.Relation("TrailerType")
	return b
}

// LoadCanceledBy loads the CanceledBy relationship
func (b *ShipmentQueryBuilder) LoadCanceledBy() *ShipmentQueryBuilder {
	b.query = b.query.Relation("CanceledBy")
	return b
}

// LoadOwner loads the Owner relationship
func (b *ShipmentQueryBuilder) LoadOwner() *ShipmentQueryBuilder {
	b.query = b.query.Relation("Owner")
	return b
}

// LoadFormulaTemplate loads the FormulaTemplate relationship
func (b *ShipmentQueryBuilder) LoadFormulaTemplate() *ShipmentQueryBuilder {
	b.query = b.query.Relation("FormulaTemplate")
	return b
}

// LoadMoves loads the Moves relationship
func (b *ShipmentQueryBuilder) LoadMoves(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentQueryBuilder {
	if len(opts) > 0 {
		b.query = b.query.Relation("Moves", func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		})
	} else {
		b.query = b.query.Relation("Moves")
	}
	return b
}

// LoadCommodities loads the Commodities relationship
func (b *ShipmentQueryBuilder) LoadCommodities(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentQueryBuilder {
	if len(opts) > 0 {
		b.query = b.query.Relation("Commodities", func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		})
	} else {
		b.query = b.query.Relation("Commodities")
	}
	return b
}

// LoadAdditionalCharges loads the AdditionalCharges relationship
func (b *ShipmentQueryBuilder) LoadAdditionalCharges(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentQueryBuilder {
	if len(opts) > 0 {
		b.query = b.query.Relation("AdditionalCharges", func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		})
	} else {
		b.query = b.query.Relation("AdditionalCharges")
	}
	return b
}

// LoadAllRelations loads all relationships for Shipment
func (b *ShipmentQueryBuilder) LoadAllRelations() *ShipmentQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadShipmentType()
	b.LoadServiceType()
	b.LoadCustomer()
	b.LoadTractorType()
	b.LoadTrailerType()
	b.LoadCanceledBy()
	b.LoadOwner()
	b.LoadFormulaTemplate()
	b.LoadMoves()
	b.LoadCommodities()
	b.LoadAdditionalCharges()
	return b
}

// ShipmentRelationChain provides a fluent API for building nested relationship chains
type ShipmentRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewShipmentRelationChain creates a new relation chain builder
func NewShipmentRelationChain() *ShipmentRelationChain {
	return &ShipmentRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *ShipmentRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *ShipmentRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *ShipmentRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *ShipmentQueryBuilder) WithBusinessUnit() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *ShipmentQueryBuilder) WithOrganization() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithShipmentType creates a relation chain starting with ShipmentType
func (b *ShipmentQueryBuilder) WithShipmentType() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("ShipmentType")
	return chain
}

// WithServiceType creates a relation chain starting with ServiceType
func (b *ShipmentQueryBuilder) WithServiceType() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("ServiceType")
	return chain
}

// WithCustomer creates a relation chain starting with Customer
func (b *ShipmentQueryBuilder) WithCustomer() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("Customer")
	return chain
}

// WithTractorType creates a relation chain starting with TractorType
func (b *ShipmentQueryBuilder) WithTractorType() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("TractorType")
	return chain
}

// WithTrailerType creates a relation chain starting with TrailerType
func (b *ShipmentQueryBuilder) WithTrailerType() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("TrailerType")
	return chain
}

// WithCanceledBy creates a relation chain starting with CanceledBy
func (b *ShipmentQueryBuilder) WithCanceledBy() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("CanceledBy")
	return chain
}

// WithOwner creates a relation chain starting with Owner
func (b *ShipmentQueryBuilder) WithOwner() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("Owner")
	return chain
}

// WithFormulaTemplate creates a relation chain starting with FormulaTemplate
func (b *ShipmentQueryBuilder) WithFormulaTemplate() *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("FormulaTemplate")
	return chain
}

// WithMoves creates a relation chain starting with Moves
func (b *ShipmentQueryBuilder) WithMoves(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("Moves", opts...)
	return chain
}

// WithCommodities creates a relation chain starting with Commodities
func (b *ShipmentQueryBuilder) WithCommodities(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("Commodities", opts...)
	return chain
}

// WithAdditionalCharges creates a relation chain starting with AdditionalCharges
func (b *ShipmentQueryBuilder) WithAdditionalCharges(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentRelationChainBuilder {
	chain := &ShipmentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentRelationChain(),
	}
	chain.chain.Add("AdditionalCharges", opts...)
	return chain
}

// ShipmentRelationChainBuilder provides fluent API for building nested relations
type ShipmentRelationChainBuilder struct {
	parent *ShipmentQueryBuilder
	chain  *ShipmentRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *ShipmentRelationChainBuilder) Load() *ShipmentQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *ShipmentRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *ShipmentRelationChainBuilder) OrderBy(order string) *ShipmentRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *ShipmentRelationChainBuilder) Where(condition string, args ...interface{}) *ShipmentRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
