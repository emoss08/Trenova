// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// assignmentFieldConfig provides field configuration for Assignment
type assignmentFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// AssignmentQuery provides type-safe query helpers and constants
var AssignmentQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		ShipmentMoveID    string
		PrimaryWorkerID   string
		TractorID         string
		TrailerID         string
		SecondaryWorkerID string
		Status            string
		Version           string
		CreatedAt         string
		UpdatedAt         string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentMoveIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentMoveIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentMoveIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentMoveIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TractorIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		TractorIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		TractorIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TractorIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TrailerIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                   func(q *bun.SelectQuery, v AssignmentStatus) *bun.SelectQuery
		StatusNEQ                  func(q *bun.SelectQuery, v AssignmentStatus) *bun.SelectQuery
		StatusIn                   func(q *bun.SelectQuery, v []AssignmentStatus) *bun.SelectQuery
		StatusNotIn                func(q *bun.SelectQuery, v []AssignmentStatus) *bun.SelectQuery
		VersionEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]assignmentFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		Tractor         string
		Trailer         string
		PrimaryWorker   string
		SecondaryWorker string
		ShipmentMove    string
	}
}{
	// Table and alias constants
	Table:    "assignments",
	Alias:    "a",
	IDPrefix: "a_",

	// Field names
	Field: struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		ShipmentMoveID    string
		PrimaryWorkerID   string
		TractorID         string
		TrailerID         string
		SecondaryWorkerID string
		Status            string
		Version           string
		CreatedAt         string
		UpdatedAt         string
	}{
		ID:                "id",
		BusinessUnitID:    "business_unit_id",
		OrganizationID:    "organization_id",
		ShipmentMoveID:    "shipment_move_id",
		PrimaryWorkerID:   "primary_worker_id",
		TractorID:         "tractor_id",
		TrailerID:         "trailer_id",
		SecondaryWorkerID: "secondary_worker_id",
		Status:            "status",
		Version:           "version",
		CreatedAt:         "created_at",
		UpdatedAt:         "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "a." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "a." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentMoveIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentMoveIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentMoveIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentMoveIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TractorIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		TractorIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		TractorIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TractorIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		TrailerIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                   func(q *bun.SelectQuery, v AssignmentStatus) *bun.SelectQuery
		StatusNEQ                  func(q *bun.SelectQuery, v AssignmentStatus) *bun.SelectQuery
		StatusIn                   func(q *bun.SelectQuery, v []AssignmentStatus) *bun.SelectQuery
		StatusNotIn                func(q *bun.SelectQuery, v []AssignmentStatus) *bun.SelectQuery
		VersionEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                     func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.organization_id"), bun.In(v))
		},
		ShipmentMoveIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.shipment_move_id"), v)
		},
		ShipmentMoveIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.shipment_move_id"), v)
		},
		ShipmentMoveIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.shipment_move_id"), bun.In(v))
		},
		ShipmentMoveIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.shipment_move_id"), bun.In(v))
		},
		PrimaryWorkerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.primary_worker_id"), v)
		},
		PrimaryWorkerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.primary_worker_id"), v)
		},
		PrimaryWorkerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.primary_worker_id"), bun.In(v))
		},
		PrimaryWorkerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.primary_worker_id"), bun.In(v))
		},
		TractorIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.tractor_id"), v)
		},
		TractorIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.tractor_id"), v)
		},
		TractorIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.tractor_id"), bun.In(v))
		},
		TractorIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.tractor_id"), bun.In(v))
		},
		TrailerIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.trailer_id"), v)
		},
		TrailerIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.trailer_id"), v)
		},
		TrailerIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.trailer_id"), bun.In(v))
		},
		TrailerIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.trailer_id"), bun.In(v))
		},
		TrailerIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("a.trailer_id"))
		},
		TrailerIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("a.trailer_id"))
		},
		SecondaryWorkerIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.secondary_worker_id"), v)
		},
		SecondaryWorkerIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.secondary_worker_id"), v)
		},
		SecondaryWorkerIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.secondary_worker_id"), bun.In(v))
		},
		SecondaryWorkerIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.secondary_worker_id"), bun.In(v))
		},
		SecondaryWorkerIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("a.secondary_worker_id"))
		},
		SecondaryWorkerIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("a.secondary_worker_id"))
		},
		StatusEQ: func(q *bun.SelectQuery, v AssignmentStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v AssignmentStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []AssignmentStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []AssignmentStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.status"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("a.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("a.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("a.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("a.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("a.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("a.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("a.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("a.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("a.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("a.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("a.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("a.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("a.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("a.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("a.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("a.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("a.organization_id"), orgID).
				Where("? = ?", bun.Ident("a.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("a.id"), id).
				Where("? = ?", bun.Ident("a.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "a." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"a.status ASC",
				"a.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "a.status DESC"
			}
			return "a.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "a.created_at DESC"
			}
			return "a.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "a.updated_at DESC"
			}
			return "a.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]assignmentFieldConfig {
		return map[string]assignmentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "a.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "a.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "a.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_move_id": {
				Name:       "shipment_move_id",
				Column:     "a.shipment_move_id",
				Sortable:   false,
				Filterable: true,
			},
			"primary_worker_id": {
				Name:       "primary_worker_id",
				Column:     "a.primary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_id": {
				Name:       "tractor_id",
				Column:     "a.tractor_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_id": {
				Name:       "trailer_id",
				Column:     "a.trailer_id",
				Sortable:   false,
				Filterable: true,
			},
			"secondary_worker_id": {
				Name:       "secondary_worker_id",
				Column:     "a.secondary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "a.status",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "a.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "a.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "a.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]assignmentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "a.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "a.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "a.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_move_id": {
				Name:       "shipment_move_id",
				Column:     "a.shipment_move_id",
				Sortable:   false,
				Filterable: true,
			},
			"primary_worker_id": {
				Name:       "primary_worker_id",
				Column:     "a.primary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_id": {
				Name:       "tractor_id",
				Column:     "a.tractor_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_id": {
				Name:       "trailer_id",
				Column:     "a.trailer_id",
				Sortable:   false,
				Filterable: true,
			},
			"secondary_worker_id": {
				Name:       "secondary_worker_id",
				Column:     "a.secondary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "a.status",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "a.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "a.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "a.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]assignmentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "a.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "a.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "a.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_move_id": {
				Name:       "shipment_move_id",
				Column:     "a.shipment_move_id",
				Sortable:   false,
				Filterable: true,
			},
			"primary_worker_id": {
				Name:       "primary_worker_id",
				Column:     "a.primary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_id": {
				Name:       "tractor_id",
				Column:     "a.tractor_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_id": {
				Name:       "trailer_id",
				Column:     "a.trailer_id",
				Sortable:   false,
				Filterable: true,
			},
			"secondary_worker_id": {
				Name:       "secondary_worker_id",
				Column:     "a.secondary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "a.status",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "a.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "a.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "a.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		Tractor         string
		Trailer         string
		PrimaryWorker   string
		SecondaryWorker string
		ShipmentMove    string
	}{
		Tractor:         "Tractor",
		Trailer:         "Trailer",
		PrimaryWorker:   "PrimaryWorker",
		SecondaryWorker: "SecondaryWorker",
		ShipmentMove:    "ShipmentMove",
	},
}

// AssignmentQueryBuilder provides a fluent interface for building queries
type AssignmentQueryBuilder struct {
	query *bun.SelectQuery
}

// NewAssignmentQuery creates a new query builder
func NewAssignmentQuery(db bun.IDB) *AssignmentQueryBuilder {
	return &AssignmentQueryBuilder{
		query: db.NewSelect().Model((*Assignment)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func AssignmentFromQuery(q *bun.SelectQuery) *AssignmentQueryBuilder {
	return &AssignmentQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *AssignmentQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *AssignmentQueryBuilder) Model(model interface{}) *AssignmentQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *AssignmentQueryBuilder) WhereIDEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *AssignmentQueryBuilder) WhereIDNEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *AssignmentQueryBuilder) WhereIDIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereIDNotIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *AssignmentQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *AssignmentQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *AssignmentQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *AssignmentQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *AssignmentQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *AssignmentQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereShipmentMoveIDEQ adds a WHERE shipment_move_id = ? condition
func (b *AssignmentQueryBuilder) WhereShipmentMoveIDEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.ShipmentMoveIDEQ(b.query, v)
	return b
}

// WhereShipmentMoveIDNEQ adds a WHERE shipment_move_id != ? condition
func (b *AssignmentQueryBuilder) WhereShipmentMoveIDNEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.ShipmentMoveIDNEQ(b.query, v)
	return b
}

// WhereShipmentMoveIDIn adds a WHERE shipment_move_id IN (?) condition
func (b *AssignmentQueryBuilder) WhereShipmentMoveIDIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.ShipmentMoveIDIn(b.query, v)
	return b
}

// WhereShipmentMoveIDNotIn adds a WHERE shipment_move_id NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereShipmentMoveIDNotIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.ShipmentMoveIDNotIn(b.query, v)
	return b
}

// WherePrimaryWorkerIDEQ adds a WHERE primary_worker_id = ? condition
func (b *AssignmentQueryBuilder) WherePrimaryWorkerIDEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.PrimaryWorkerIDEQ(b.query, v)
	return b
}

// WherePrimaryWorkerIDNEQ adds a WHERE primary_worker_id != ? condition
func (b *AssignmentQueryBuilder) WherePrimaryWorkerIDNEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.PrimaryWorkerIDNEQ(b.query, v)
	return b
}

// WherePrimaryWorkerIDIn adds a WHERE primary_worker_id IN (?) condition
func (b *AssignmentQueryBuilder) WherePrimaryWorkerIDIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.PrimaryWorkerIDIn(b.query, v)
	return b
}

// WherePrimaryWorkerIDNotIn adds a WHERE primary_worker_id NOT IN (?) condition
func (b *AssignmentQueryBuilder) WherePrimaryWorkerIDNotIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.PrimaryWorkerIDNotIn(b.query, v)
	return b
}

// WhereTractorIDEQ adds a WHERE tractor_id = ? condition
func (b *AssignmentQueryBuilder) WhereTractorIDEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.TractorIDEQ(b.query, v)
	return b
}

// WhereTractorIDNEQ adds a WHERE tractor_id != ? condition
func (b *AssignmentQueryBuilder) WhereTractorIDNEQ(v pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.TractorIDNEQ(b.query, v)
	return b
}

// WhereTractorIDIn adds a WHERE tractor_id IN (?) condition
func (b *AssignmentQueryBuilder) WhereTractorIDIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.TractorIDIn(b.query, v)
	return b
}

// WhereTractorIDNotIn adds a WHERE tractor_id NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereTractorIDNotIn(v []pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.TractorIDNotIn(b.query, v)
	return b
}

// WhereTrailerIDEQ adds a WHERE trailer_id = ? condition
func (b *AssignmentQueryBuilder) WhereTrailerIDEQ(v *pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.TrailerIDEQ(b.query, v)
	return b
}

// WhereTrailerIDNEQ adds a WHERE trailer_id != ? condition
func (b *AssignmentQueryBuilder) WhereTrailerIDNEQ(v *pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.TrailerIDNEQ(b.query, v)
	return b
}

// WhereTrailerIDIn adds a WHERE trailer_id IN (?) condition
func (b *AssignmentQueryBuilder) WhereTrailerIDIn(v []*pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.TrailerIDIn(b.query, v)
	return b
}

// WhereTrailerIDNotIn adds a WHERE trailer_id NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereTrailerIDNotIn(v []*pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.TrailerIDNotIn(b.query, v)
	return b
}

// WhereSecondaryWorkerIDEQ adds a WHERE secondary_worker_id = ? condition
func (b *AssignmentQueryBuilder) WhereSecondaryWorkerIDEQ(v *pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.SecondaryWorkerIDEQ(b.query, v)
	return b
}

// WhereSecondaryWorkerIDNEQ adds a WHERE secondary_worker_id != ? condition
func (b *AssignmentQueryBuilder) WhereSecondaryWorkerIDNEQ(v *pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.SecondaryWorkerIDNEQ(b.query, v)
	return b
}

// WhereSecondaryWorkerIDIn adds a WHERE secondary_worker_id IN (?) condition
func (b *AssignmentQueryBuilder) WhereSecondaryWorkerIDIn(v []*pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.SecondaryWorkerIDIn(b.query, v)
	return b
}

// WhereSecondaryWorkerIDNotIn adds a WHERE secondary_worker_id NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereSecondaryWorkerIDNotIn(v []*pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.SecondaryWorkerIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *AssignmentQueryBuilder) WhereStatusEQ(v AssignmentStatus) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *AssignmentQueryBuilder) WhereStatusNEQ(v AssignmentStatus) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *AssignmentQueryBuilder) WhereStatusIn(v []AssignmentStatus) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereStatusNotIn(v []AssignmentStatus) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *AssignmentQueryBuilder) WhereVersionEQ(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *AssignmentQueryBuilder) WhereVersionNEQ(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *AssignmentQueryBuilder) WhereVersionGT(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *AssignmentQueryBuilder) WhereVersionGTE(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *AssignmentQueryBuilder) WhereVersionLT(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *AssignmentQueryBuilder) WhereVersionLTE(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *AssignmentQueryBuilder) WhereVersionIn(v []int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereVersionNotIn(v []int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *AssignmentQueryBuilder) WhereCreatedAtEQ(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *AssignmentQueryBuilder) WhereCreatedAtNEQ(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *AssignmentQueryBuilder) WhereCreatedAtGT(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *AssignmentQueryBuilder) WhereCreatedAtGTE(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *AssignmentQueryBuilder) WhereCreatedAtLT(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *AssignmentQueryBuilder) WhereCreatedAtLTE(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *AssignmentQueryBuilder) WhereCreatedAtIn(v []int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereCreatedAtNotIn(v []int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *AssignmentQueryBuilder) WhereUpdatedAtEQ(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *AssignmentQueryBuilder) WhereUpdatedAtNEQ(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *AssignmentQueryBuilder) WhereUpdatedAtGT(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *AssignmentQueryBuilder) WhereUpdatedAtGTE(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *AssignmentQueryBuilder) WhereUpdatedAtLT(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *AssignmentQueryBuilder) WhereUpdatedAtLTE(v int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *AssignmentQueryBuilder) WhereUpdatedAtIn(v []int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *AssignmentQueryBuilder) WhereUpdatedAtNotIn(v []int64) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *AssignmentQueryBuilder) WhereTenant(orgID, buID pulid.ID) *AssignmentQueryBuilder {
	b.query = AssignmentQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *AssignmentQueryBuilder) WhereGroup(sep string, fn func(*AssignmentQueryBuilder) *AssignmentQueryBuilder) *AssignmentQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &AssignmentQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *AssignmentQueryBuilder) Where(query string, args ...interface{}) *AssignmentQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *AssignmentQueryBuilder) OrderBy(column string, desc ...bool) *AssignmentQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(AssignmentQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *AssignmentQueryBuilder) Limit(n int) *AssignmentQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *AssignmentQueryBuilder) Offset(n int) *AssignmentQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *AssignmentQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *AssignmentQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *AssignmentQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *AssignmentQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *AssignmentQueryBuilder) All(ctx context.Context) ([]*Assignment, error) {
	var entities []*Assignment
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *AssignmentQueryBuilder) AllWithCount(ctx context.Context) ([]*Assignment, int, error) {
	var entities []*Assignment
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *AssignmentQueryBuilder) One(ctx context.Context) (*Assignment, error) {
	entity := new(Assignment)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *AssignmentQueryBuilder) First(ctx context.Context) (*Assignment, error) {
	entity := new(Assignment)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// AssignmentBuild creates a chainable query builder
func AssignmentBuild(db bun.IDB) *AssignmentQueryBuilder {
	return NewAssignmentQuery(db)
}

// Relationship loading methods

// LoadTractor loads the Tractor relationship
func (b *AssignmentQueryBuilder) LoadTractor() *AssignmentQueryBuilder {
	b.query = b.query.Relation("Tractor")
	return b
}

// LoadTrailer loads the Trailer relationship
func (b *AssignmentQueryBuilder) LoadTrailer() *AssignmentQueryBuilder {
	b.query = b.query.Relation("Trailer")
	return b
}

// LoadPrimaryWorker loads the PrimaryWorker relationship
func (b *AssignmentQueryBuilder) LoadPrimaryWorker() *AssignmentQueryBuilder {
	b.query = b.query.Relation("PrimaryWorker")
	return b
}

// LoadSecondaryWorker loads the SecondaryWorker relationship
func (b *AssignmentQueryBuilder) LoadSecondaryWorker() *AssignmentQueryBuilder {
	b.query = b.query.Relation("SecondaryWorker")
	return b
}

// LoadShipmentMove loads the ShipmentMove relationship
func (b *AssignmentQueryBuilder) LoadShipmentMove() *AssignmentQueryBuilder {
	b.query = b.query.Relation("ShipmentMove")
	return b
}

// LoadAllRelations loads all relationships for Assignment
func (b *AssignmentQueryBuilder) LoadAllRelations() *AssignmentQueryBuilder {
	b.LoadTractor()
	b.LoadTrailer()
	b.LoadPrimaryWorker()
	b.LoadSecondaryWorker()
	b.LoadShipmentMove()
	return b
}

// AssignmentRelationChain provides a fluent API for building nested relationship chains
type AssignmentRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewAssignmentRelationChain creates a new relation chain builder
func NewAssignmentRelationChain() *AssignmentRelationChain {
	return &AssignmentRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *AssignmentRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *AssignmentRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *AssignmentRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *AssignmentRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithTractor creates a relation chain starting with Tractor
func (b *AssignmentQueryBuilder) WithTractor() *AssignmentRelationChainBuilder {
	chain := &AssignmentRelationChainBuilder{
		parent: b,
		chain:  NewAssignmentRelationChain(),
	}
	chain.chain.Add("Tractor")
	return chain
}

// WithTrailer creates a relation chain starting with Trailer
func (b *AssignmentQueryBuilder) WithTrailer() *AssignmentRelationChainBuilder {
	chain := &AssignmentRelationChainBuilder{
		parent: b,
		chain:  NewAssignmentRelationChain(),
	}
	chain.chain.Add("Trailer")
	return chain
}

// WithPrimaryWorker creates a relation chain starting with PrimaryWorker
func (b *AssignmentQueryBuilder) WithPrimaryWorker() *AssignmentRelationChainBuilder {
	chain := &AssignmentRelationChainBuilder{
		parent: b,
		chain:  NewAssignmentRelationChain(),
	}
	chain.chain.Add("PrimaryWorker")
	return chain
}

// WithSecondaryWorker creates a relation chain starting with SecondaryWorker
func (b *AssignmentQueryBuilder) WithSecondaryWorker() *AssignmentRelationChainBuilder {
	chain := &AssignmentRelationChainBuilder{
		parent: b,
		chain:  NewAssignmentRelationChain(),
	}
	chain.chain.Add("SecondaryWorker")
	return chain
}

// WithShipmentMove creates a relation chain starting with ShipmentMove
func (b *AssignmentQueryBuilder) WithShipmentMove() *AssignmentRelationChainBuilder {
	chain := &AssignmentRelationChainBuilder{
		parent: b,
		chain:  NewAssignmentRelationChain(),
	}
	chain.chain.Add("ShipmentMove")
	return chain
}

// AssignmentRelationChainBuilder provides fluent API for building nested relations
type AssignmentRelationChainBuilder struct {
	parent *AssignmentQueryBuilder
	chain  *AssignmentRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *AssignmentRelationChainBuilder) Load() *AssignmentQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *AssignmentRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *AssignmentRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *AssignmentRelationChainBuilder) OrderBy(order string) *AssignmentRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *AssignmentRelationChainBuilder) Where(condition string, args ...interface{}) *AssignmentRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
