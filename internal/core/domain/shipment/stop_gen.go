// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// stopFieldConfig provides field configuration for Stop
type stopFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// StopQuery provides type-safe query helpers and constants
var StopQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID               string
		BusinessUnitID   string
		OrganizationID   string
		ShipmentMoveID   string
		LocationID       string
		Status           string
		Type             string
		AddressLine      string
		Sequence         string
		Pieces           string
		Weight           string
		ActualArrival    string
		ActualDeparture  string
		PlannedArrival   string
		PlannedDeparture string
		Version          string
		CreatedAt        string
		UpdatedAt        string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentMoveIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentMoveIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LocationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LocationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StatusEQ                 func(q *bun.SelectQuery, v StopStatus) *bun.SelectQuery
		StatusNEQ                func(q *bun.SelectQuery, v StopStatus) *bun.SelectQuery
		TypeEQ                   func(q *bun.SelectQuery, v StopType) *bun.SelectQuery
		TypeNEQ                  func(q *bun.SelectQuery, v StopType) *bun.SelectQuery
		AddressLineEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLineNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLineGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SequenceEQ               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceNEQ              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceIn               func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceNotIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceGT               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceGTE              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceLT               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceLTE              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PiecesEQ                 func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		PiecesNEQ                func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		PiecesIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		PiecesIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		WeightEQ                 func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		WeightNEQ                func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		WeightIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		WeightIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		ActualArrivalEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualArrivalNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualArrivalIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		ActualArrivalIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		ActualDepartureEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualDepartureNEQ       func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualDepartureIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ActualDepartureIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		PlannedArrivalEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PlannedArrivalNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PlannedArrivalGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureNEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PlannedDepartureNotIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PlannedDepartureGT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureGTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureLT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureLTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]stopFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "stops",
	Alias:    "stp",
	IDPrefix: "stp_",

	// Field names
	Field: struct {
		ID               string
		BusinessUnitID   string
		OrganizationID   string
		ShipmentMoveID   string
		LocationID       string
		Status           string
		Type             string
		AddressLine      string
		Sequence         string
		Pieces           string
		Weight           string
		ActualArrival    string
		ActualDeparture  string
		PlannedArrival   string
		PlannedDeparture string
		Version          string
		CreatedAt        string
		UpdatedAt        string
	}{
		ID:               "id",
		BusinessUnitID:   "business_unit_id",
		OrganizationID:   "organization_id",
		ShipmentMoveID:   "shipment_move_id",
		LocationID:       "location_id",
		Status:           "status",
		Type:             "type",
		AddressLine:      "address_line",
		Sequence:         "sequence",
		Pieces:           "pieces",
		Weight:           "weight",
		ActualArrival:    "actual_arrival",
		ActualDeparture:  "actual_departure",
		PlannedArrival:   "planned_arrival",
		PlannedDeparture: "planned_departure",
		Version:          "version",
		CreatedAt:        "created_at",
		UpdatedAt:        "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "stp." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "stp." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentMoveIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentMoveIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LocationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LocationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StatusEQ                 func(q *bun.SelectQuery, v StopStatus) *bun.SelectQuery
		StatusNEQ                func(q *bun.SelectQuery, v StopStatus) *bun.SelectQuery
		TypeEQ                   func(q *bun.SelectQuery, v StopType) *bun.SelectQuery
		TypeNEQ                  func(q *bun.SelectQuery, v StopType) *bun.SelectQuery
		AddressLineEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLineNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLineGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLineHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SequenceEQ               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceNEQ              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceIn               func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceNotIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceGT               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceGTE              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceLT               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceLTE              func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PiecesEQ                 func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		PiecesNEQ                func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		PiecesIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		PiecesIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		WeightEQ                 func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		WeightNEQ                func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		WeightIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		WeightIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		ActualArrivalEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualArrivalNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualArrivalIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		ActualArrivalIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		ActualDepartureEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualDepartureNEQ       func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ActualDepartureIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ActualDepartureIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		PlannedArrivalEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PlannedArrivalNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PlannedArrivalGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedArrivalLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureNEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PlannedDepartureNotIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PlannedDepartureGT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureGTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureLT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PlannedDepartureLTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                   func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.organization_id"), v)
		},
		ShipmentMoveIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.shipment_move_id"), v)
		},
		ShipmentMoveIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.shipment_move_id"), v)
		},
		LocationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.location_id"), v)
		},
		LocationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.location_id"), v)
		},
		StatusEQ: func(q *bun.SelectQuery, v StopStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v StopStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.status"), v)
		},
		TypeEQ: func(q *bun.SelectQuery, v StopType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.type"), v)
		},
		TypeNEQ: func(q *bun.SelectQuery, v StopType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.type"), v)
		},
		AddressLineEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.address_line"), v)
		},
		AddressLineNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.address_line"), v)
		},
		AddressLineIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("stp.address_line"), bun.In(v))
		},
		AddressLineNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("stp.address_line"), bun.In(v))
		},
		AddressLineGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("stp.address_line"), v)
		},
		AddressLineGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("stp.address_line"), v)
		},
		AddressLineLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("stp.address_line"), v)
		},
		AddressLineLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("stp.address_line"), v)
		},
		AddressLineContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("stp.address_line"), "%"+v+"%")
		},
		AddressLineHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("stp.address_line"), v+"%")
		},
		AddressLineHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("stp.address_line"), "%"+v)
		},
		SequenceEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.sequence"), v)
		},
		SequenceNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.sequence"), v)
		},
		SequenceIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("stp.sequence"), bun.In(v))
		},
		SequenceNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("stp.sequence"), bun.In(v))
		},
		SequenceGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("stp.sequence"), v)
		},
		SequenceGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("stp.sequence"), v)
		},
		SequenceLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("stp.sequence"), v)
		},
		SequenceLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("stp.sequence"), v)
		},
		PiecesEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.pieces"), v)
		},
		PiecesNEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.pieces"), v)
		},
		PiecesIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("stp.pieces"))
		},
		PiecesIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("stp.pieces"))
		},
		WeightEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.weight"), v)
		},
		WeightNEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.weight"), v)
		},
		WeightIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("stp.weight"))
		},
		WeightIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("stp.weight"))
		},
		ActualArrivalEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.actual_arrival"), v)
		},
		ActualArrivalNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.actual_arrival"), v)
		},
		ActualArrivalIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("stp.actual_arrival"))
		},
		ActualArrivalIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("stp.actual_arrival"))
		},
		ActualDepartureEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.actual_departure"), v)
		},
		ActualDepartureNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.actual_departure"), v)
		},
		ActualDepartureIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("stp.actual_departure"))
		},
		ActualDepartureIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("stp.actual_departure"))
		},
		PlannedArrivalEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.planned_arrival"), v)
		},
		PlannedArrivalNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.planned_arrival"), v)
		},
		PlannedArrivalIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("stp.planned_arrival"), bun.In(v))
		},
		PlannedArrivalNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("stp.planned_arrival"), bun.In(v))
		},
		PlannedArrivalGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("stp.planned_arrival"), v)
		},
		PlannedArrivalGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("stp.planned_arrival"), v)
		},
		PlannedArrivalLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("stp.planned_arrival"), v)
		},
		PlannedArrivalLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("stp.planned_arrival"), v)
		},
		PlannedDepartureEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.planned_departure"), v)
		},
		PlannedDepartureNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.planned_departure"), v)
		},
		PlannedDepartureIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("stp.planned_departure"), bun.In(v))
		},
		PlannedDepartureNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("stp.planned_departure"), bun.In(v))
		},
		PlannedDepartureGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("stp.planned_departure"), v)
		},
		PlannedDepartureGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("stp.planned_departure"), v)
		},
		PlannedDepartureLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("stp.planned_departure"), v)
		},
		PlannedDepartureLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("stp.planned_departure"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("stp.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("stp.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("stp.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("stp.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("stp.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("stp.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("stp.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("stp.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("stp.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("stp.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("stp.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("stp.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("stp.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("stp.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("stp.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("stp.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("stp.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("stp.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("stp.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("stp.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("stp.organization_id"), orgID).
				Where("? = ?", bun.Ident("stp.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("stp.id"), id).
				Where("? = ?", bun.Ident("stp.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "stp." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"stp.status ASC",
				"stp.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "stp.status DESC"
			}
			return "stp.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "stp.created_at DESC"
			}
			return "stp.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "stp.updated_at DESC"
			}
			return "stp.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]stopFieldConfig {
		return map[string]stopFieldConfig{
			"id": {
				Name:       "id",
				Column:     "stp.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "stp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "stp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_move_id": {
				Name:       "shipment_move_id",
				Column:     "stp.shipment_move_id",
				Sortable:   false,
				Filterable: true,
			},
			"location_id": {
				Name:       "location_id",
				Column:     "stp.location_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "stp.status",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "stp.type",
				Sortable:   false,
				Filterable: false,
			},
			"address_line": {
				Name:       "address_line",
				Column:     "stp.address_line",
				Sortable:   false,
				Filterable: true,
			},
			"sequence": {
				Name:       "sequence",
				Column:     "stp.sequence",
				Sortable:   false,
				Filterable: false,
			},
			"pieces": {
				Name:       "pieces",
				Column:     "stp.pieces",
				Sortable:   false,
				Filterable: false,
			},
			"weight": {
				Name:       "weight",
				Column:     "stp.weight",
				Sortable:   false,
				Filterable: false,
			},
			"actual_arrival": {
				Name:       "actual_arrival",
				Column:     "stp.actual_arrival",
				Sortable:   false,
				Filterable: false,
			},
			"actual_departure": {
				Name:       "actual_departure",
				Column:     "stp.actual_departure",
				Sortable:   false,
				Filterable: false,
			},
			"planned_arrival": {
				Name:       "planned_arrival",
				Column:     "stp.planned_arrival",
				Sortable:   false,
				Filterable: false,
			},
			"planned_departure": {
				Name:       "planned_departure",
				Column:     "stp.planned_departure",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "stp.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "stp.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "stp.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]stopFieldConfig{
			"id": {
				Name:       "id",
				Column:     "stp.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "stp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "stp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_move_id": {
				Name:       "shipment_move_id",
				Column:     "stp.shipment_move_id",
				Sortable:   false,
				Filterable: true,
			},
			"location_id": {
				Name:       "location_id",
				Column:     "stp.location_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "stp.status",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "stp.type",
				Sortable:   false,
				Filterable: false,
			},
			"address_line": {
				Name:       "address_line",
				Column:     "stp.address_line",
				Sortable:   false,
				Filterable: true,
			},
			"sequence": {
				Name:       "sequence",
				Column:     "stp.sequence",
				Sortable:   false,
				Filterable: false,
			},
			"pieces": {
				Name:       "pieces",
				Column:     "stp.pieces",
				Sortable:   false,
				Filterable: false,
			},
			"weight": {
				Name:       "weight",
				Column:     "stp.weight",
				Sortable:   false,
				Filterable: false,
			},
			"actual_arrival": {
				Name:       "actual_arrival",
				Column:     "stp.actual_arrival",
				Sortable:   false,
				Filterable: false,
			},
			"actual_departure": {
				Name:       "actual_departure",
				Column:     "stp.actual_departure",
				Sortable:   false,
				Filterable: false,
			},
			"planned_arrival": {
				Name:       "planned_arrival",
				Column:     "stp.planned_arrival",
				Sortable:   false,
				Filterable: false,
			},
			"planned_departure": {
				Name:       "planned_departure",
				Column:     "stp.planned_departure",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "stp.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "stp.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "stp.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]stopFieldConfig{
			"id": {
				Name:       "id",
				Column:     "stp.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "stp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "stp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_move_id": {
				Name:       "shipment_move_id",
				Column:     "stp.shipment_move_id",
				Sortable:   false,
				Filterable: true,
			},
			"location_id": {
				Name:       "location_id",
				Column:     "stp.location_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "stp.status",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "stp.type",
				Sortable:   false,
				Filterable: false,
			},
			"address_line": {
				Name:       "address_line",
				Column:     "stp.address_line",
				Sortable:   false,
				Filterable: true,
			},
			"sequence": {
				Name:       "sequence",
				Column:     "stp.sequence",
				Sortable:   false,
				Filterable: false,
			},
			"pieces": {
				Name:       "pieces",
				Column:     "stp.pieces",
				Sortable:   false,
				Filterable: false,
			},
			"weight": {
				Name:       "weight",
				Column:     "stp.weight",
				Sortable:   false,
				Filterable: false,
			},
			"actual_arrival": {
				Name:       "actual_arrival",
				Column:     "stp.actual_arrival",
				Sortable:   false,
				Filterable: false,
			},
			"actual_departure": {
				Name:       "actual_departure",
				Column:     "stp.actual_departure",
				Sortable:   false,
				Filterable: false,
			},
			"planned_arrival": {
				Name:       "planned_arrival",
				Column:     "stp.planned_arrival",
				Sortable:   false,
				Filterable: false,
			},
			"planned_departure": {
				Name:       "planned_departure",
				Column:     "stp.planned_departure",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "stp.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "stp.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "stp.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// StopQueryBuilder provides a fluent interface for building queries
type StopQueryBuilder struct {
	query *bun.SelectQuery
}

// NewStopQuery creates a new query builder
func NewStopQuery(db bun.IDB) *StopQueryBuilder {
	return &StopQueryBuilder{
		query: db.NewSelect().Model((*Stop)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func StopFromQuery(q *bun.SelectQuery) *StopQueryBuilder {
	return &StopQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *StopQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *StopQueryBuilder) Model(model interface{}) *StopQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *StopQueryBuilder) WhereIDEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *StopQueryBuilder) WhereIDNEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *StopQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *StopQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *StopQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *StopQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereShipmentMoveIDEQ adds a WHERE shipment_move_id = ? condition
func (b *StopQueryBuilder) WhereShipmentMoveIDEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.ShipmentMoveIDEQ(b.query, v)
	return b
}

// WhereShipmentMoveIDNEQ adds a WHERE shipment_move_id != ? condition
func (b *StopQueryBuilder) WhereShipmentMoveIDNEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.ShipmentMoveIDNEQ(b.query, v)
	return b
}

// WhereLocationIDEQ adds a WHERE location_id = ? condition
func (b *StopQueryBuilder) WhereLocationIDEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.LocationIDEQ(b.query, v)
	return b
}

// WhereLocationIDNEQ adds a WHERE location_id != ? condition
func (b *StopQueryBuilder) WhereLocationIDNEQ(v pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.LocationIDNEQ(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *StopQueryBuilder) WhereStatusEQ(v StopStatus) *StopQueryBuilder {
	b.query = StopQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *StopQueryBuilder) WhereStatusNEQ(v StopStatus) *StopQueryBuilder {
	b.query = StopQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereTypeEQ adds a WHERE type = ? condition
func (b *StopQueryBuilder) WhereTypeEQ(v StopType) *StopQueryBuilder {
	b.query = StopQuery.Where.TypeEQ(b.query, v)
	return b
}

// WhereTypeNEQ adds a WHERE type != ? condition
func (b *StopQueryBuilder) WhereTypeNEQ(v StopType) *StopQueryBuilder {
	b.query = StopQuery.Where.TypeNEQ(b.query, v)
	return b
}

// WhereAddressLineEQ adds a WHERE address_line = ? condition
func (b *StopQueryBuilder) WhereAddressLineEQ(v string) *StopQueryBuilder {
	b.query = StopQuery.Where.AddressLineEQ(b.query, v)
	return b
}

// WhereAddressLineNEQ adds a WHERE address_line != ? condition
func (b *StopQueryBuilder) WhereAddressLineNEQ(v string) *StopQueryBuilder {
	b.query = StopQuery.Where.AddressLineNEQ(b.query, v)
	return b
}

// WhereAddressLineIn adds a WHERE address_line IN (?) condition
func (b *StopQueryBuilder) WhereAddressLineIn(v []string) *StopQueryBuilder {
	b.query = StopQuery.Where.AddressLineIn(b.query, v)
	return b
}

// WhereAddressLineNotIn adds a WHERE address_line NOT IN (?) condition
func (b *StopQueryBuilder) WhereAddressLineNotIn(v []string) *StopQueryBuilder {
	b.query = StopQuery.Where.AddressLineNotIn(b.query, v)
	return b
}

// WhereAddressLineContains adds a WHERE address_line LIKE ? condition
func (b *StopQueryBuilder) WhereAddressLineContains(v string) *StopQueryBuilder {
	b.query = StopQuery.Where.AddressLineContains(b.query, v)
	return b
}

// WhereAddressLineHasPrefix adds a WHERE address_line LIKE ? condition
func (b *StopQueryBuilder) WhereAddressLineHasPrefix(v string) *StopQueryBuilder {
	b.query = StopQuery.Where.AddressLineHasPrefix(b.query, v)
	return b
}

// WhereAddressLineHasSuffix adds a WHERE address_line LIKE ? condition
func (b *StopQueryBuilder) WhereAddressLineHasSuffix(v string) *StopQueryBuilder {
	b.query = StopQuery.Where.AddressLineHasSuffix(b.query, v)
	return b
}

// WhereSequenceEQ adds a WHERE sequence = ? condition
func (b *StopQueryBuilder) WhereSequenceEQ(v int) *StopQueryBuilder {
	b.query = StopQuery.Where.SequenceEQ(b.query, v)
	return b
}

// WhereSequenceNEQ adds a WHERE sequence != ? condition
func (b *StopQueryBuilder) WhereSequenceNEQ(v int) *StopQueryBuilder {
	b.query = StopQuery.Where.SequenceNEQ(b.query, v)
	return b
}

// WhereSequenceGT adds a WHERE sequence > ? condition
func (b *StopQueryBuilder) WhereSequenceGT(v int) *StopQueryBuilder {
	b.query = StopQuery.Where.SequenceGT(b.query, v)
	return b
}

// WhereSequenceGTE adds a WHERE sequence >= ? condition
func (b *StopQueryBuilder) WhereSequenceGTE(v int) *StopQueryBuilder {
	b.query = StopQuery.Where.SequenceGTE(b.query, v)
	return b
}

// WhereSequenceLT adds a WHERE sequence < ? condition
func (b *StopQueryBuilder) WhereSequenceLT(v int) *StopQueryBuilder {
	b.query = StopQuery.Where.SequenceLT(b.query, v)
	return b
}

// WhereSequenceLTE adds a WHERE sequence <= ? condition
func (b *StopQueryBuilder) WhereSequenceLTE(v int) *StopQueryBuilder {
	b.query = StopQuery.Where.SequenceLTE(b.query, v)
	return b
}

// WhereSequenceIn adds a WHERE sequence IN (?) condition
func (b *StopQueryBuilder) WhereSequenceIn(v []int) *StopQueryBuilder {
	b.query = StopQuery.Where.SequenceIn(b.query, v)
	return b
}

// WhereSequenceNotIn adds a WHERE sequence NOT IN (?) condition
func (b *StopQueryBuilder) WhereSequenceNotIn(v []int) *StopQueryBuilder {
	b.query = StopQuery.Where.SequenceNotIn(b.query, v)
	return b
}

// WherePiecesEQ adds a WHERE pieces = ? condition
func (b *StopQueryBuilder) WherePiecesEQ(v *int) *StopQueryBuilder {
	b.query = StopQuery.Where.PiecesEQ(b.query, v)
	return b
}

// WherePiecesNEQ adds a WHERE pieces != ? condition
func (b *StopQueryBuilder) WherePiecesNEQ(v *int) *StopQueryBuilder {
	b.query = StopQuery.Where.PiecesNEQ(b.query, v)
	return b
}

// WhereWeightEQ adds a WHERE weight = ? condition
func (b *StopQueryBuilder) WhereWeightEQ(v *int) *StopQueryBuilder {
	b.query = StopQuery.Where.WeightEQ(b.query, v)
	return b
}

// WhereWeightNEQ adds a WHERE weight != ? condition
func (b *StopQueryBuilder) WhereWeightNEQ(v *int) *StopQueryBuilder {
	b.query = StopQuery.Where.WeightNEQ(b.query, v)
	return b
}

// WhereActualArrivalEQ adds a WHERE actual_arrival = ? condition
func (b *StopQueryBuilder) WhereActualArrivalEQ(v *int64) *StopQueryBuilder {
	b.query = StopQuery.Where.ActualArrivalEQ(b.query, v)
	return b
}

// WhereActualArrivalNEQ adds a WHERE actual_arrival != ? condition
func (b *StopQueryBuilder) WhereActualArrivalNEQ(v *int64) *StopQueryBuilder {
	b.query = StopQuery.Where.ActualArrivalNEQ(b.query, v)
	return b
}

// WhereActualDepartureEQ adds a WHERE actual_departure = ? condition
func (b *StopQueryBuilder) WhereActualDepartureEQ(v *int64) *StopQueryBuilder {
	b.query = StopQuery.Where.ActualDepartureEQ(b.query, v)
	return b
}

// WhereActualDepartureNEQ adds a WHERE actual_departure != ? condition
func (b *StopQueryBuilder) WhereActualDepartureNEQ(v *int64) *StopQueryBuilder {
	b.query = StopQuery.Where.ActualDepartureNEQ(b.query, v)
	return b
}

// WherePlannedArrivalEQ adds a WHERE planned_arrival = ? condition
func (b *StopQueryBuilder) WherePlannedArrivalEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedArrivalEQ(b.query, v)
	return b
}

// WherePlannedArrivalNEQ adds a WHERE planned_arrival != ? condition
func (b *StopQueryBuilder) WherePlannedArrivalNEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedArrivalNEQ(b.query, v)
	return b
}

// WherePlannedArrivalGT adds a WHERE planned_arrival > ? condition
func (b *StopQueryBuilder) WherePlannedArrivalGT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedArrivalGT(b.query, v)
	return b
}

// WherePlannedArrivalGTE adds a WHERE planned_arrival >= ? condition
func (b *StopQueryBuilder) WherePlannedArrivalGTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedArrivalGTE(b.query, v)
	return b
}

// WherePlannedArrivalLT adds a WHERE planned_arrival < ? condition
func (b *StopQueryBuilder) WherePlannedArrivalLT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedArrivalLT(b.query, v)
	return b
}

// WherePlannedArrivalLTE adds a WHERE planned_arrival <= ? condition
func (b *StopQueryBuilder) WherePlannedArrivalLTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedArrivalLTE(b.query, v)
	return b
}

// WherePlannedArrivalIn adds a WHERE planned_arrival IN (?) condition
func (b *StopQueryBuilder) WherePlannedArrivalIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedArrivalIn(b.query, v)
	return b
}

// WherePlannedArrivalNotIn adds a WHERE planned_arrival NOT IN (?) condition
func (b *StopQueryBuilder) WherePlannedArrivalNotIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedArrivalNotIn(b.query, v)
	return b
}

// WherePlannedDepartureEQ adds a WHERE planned_departure = ? condition
func (b *StopQueryBuilder) WherePlannedDepartureEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedDepartureEQ(b.query, v)
	return b
}

// WherePlannedDepartureNEQ adds a WHERE planned_departure != ? condition
func (b *StopQueryBuilder) WherePlannedDepartureNEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedDepartureNEQ(b.query, v)
	return b
}

// WherePlannedDepartureGT adds a WHERE planned_departure > ? condition
func (b *StopQueryBuilder) WherePlannedDepartureGT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedDepartureGT(b.query, v)
	return b
}

// WherePlannedDepartureGTE adds a WHERE planned_departure >= ? condition
func (b *StopQueryBuilder) WherePlannedDepartureGTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedDepartureGTE(b.query, v)
	return b
}

// WherePlannedDepartureLT adds a WHERE planned_departure < ? condition
func (b *StopQueryBuilder) WherePlannedDepartureLT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedDepartureLT(b.query, v)
	return b
}

// WherePlannedDepartureLTE adds a WHERE planned_departure <= ? condition
func (b *StopQueryBuilder) WherePlannedDepartureLTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedDepartureLTE(b.query, v)
	return b
}

// WherePlannedDepartureIn adds a WHERE planned_departure IN (?) condition
func (b *StopQueryBuilder) WherePlannedDepartureIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedDepartureIn(b.query, v)
	return b
}

// WherePlannedDepartureNotIn adds a WHERE planned_departure NOT IN (?) condition
func (b *StopQueryBuilder) WherePlannedDepartureNotIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.PlannedDepartureNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *StopQueryBuilder) WhereVersionEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *StopQueryBuilder) WhereVersionNEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *StopQueryBuilder) WhereVersionGT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *StopQueryBuilder) WhereVersionGTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *StopQueryBuilder) WhereVersionLT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *StopQueryBuilder) WhereVersionLTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *StopQueryBuilder) WhereVersionIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *StopQueryBuilder) WhereVersionNotIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *StopQueryBuilder) WhereCreatedAtEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *StopQueryBuilder) WhereCreatedAtNEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *StopQueryBuilder) WhereCreatedAtGT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *StopQueryBuilder) WhereCreatedAtGTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *StopQueryBuilder) WhereCreatedAtLT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *StopQueryBuilder) WhereCreatedAtLTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *StopQueryBuilder) WhereCreatedAtIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *StopQueryBuilder) WhereCreatedAtNotIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *StopQueryBuilder) WhereUpdatedAtEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *StopQueryBuilder) WhereUpdatedAtNEQ(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *StopQueryBuilder) WhereUpdatedAtGT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *StopQueryBuilder) WhereUpdatedAtGTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *StopQueryBuilder) WhereUpdatedAtLT(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *StopQueryBuilder) WhereUpdatedAtLTE(v int64) *StopQueryBuilder {
	b.query = StopQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *StopQueryBuilder) WhereUpdatedAtIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *StopQueryBuilder) WhereUpdatedAtNotIn(v []int64) *StopQueryBuilder {
	b.query = StopQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *StopQueryBuilder) WhereTenant(orgID, buID pulid.ID) *StopQueryBuilder {
	b.query = StopQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *StopQueryBuilder) WhereGroup(sep string, fn func(*StopQueryBuilder) *StopQueryBuilder) *StopQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &StopQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *StopQueryBuilder) Where(query string, args ...interface{}) *StopQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *StopQueryBuilder) OrderBy(column string, desc ...bool) *StopQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(StopQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *StopQueryBuilder) Limit(n int) *StopQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *StopQueryBuilder) Offset(n int) *StopQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *StopQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *StopQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *StopQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *StopQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *StopQueryBuilder) All(ctx context.Context) ([]*Stop, error) {
	var entities []*Stop
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *StopQueryBuilder) AllWithCount(ctx context.Context) ([]*Stop, int, error) {
	var entities []*Stop
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *StopQueryBuilder) One(ctx context.Context) (*Stop, error) {
	entity := new(Stop)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *StopQueryBuilder) First(ctx context.Context) (*Stop, error) {
	entity := new(Stop)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// StopBuild creates a chainable query builder
func StopBuild(db bun.IDB) *StopQueryBuilder {
	return NewStopQuery(db)
}
