// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// shipmentCommodityFieldConfig provides field configuration for ShipmentCommodity
type shipmentCommodityFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ShipmentCommodityQuery provides type-safe query helpers and constants
var ShipmentCommodityQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		ShipmentID     string
		CommodityID    string
		Weight         string
		Pieces         string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CommodityIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CommodityIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WeightEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		WeightNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		WeightGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PiecesNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PiecesGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]shipmentCommodityFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "shipment_commodities",
	Alias:    "sc",
	IDPrefix: "sc_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		ShipmentID     string
		CommodityID    string
		Weight         string
		Pieces         string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		ShipmentID:     "shipment_id",
		CommodityID:    "commodity_id",
		Weight:         "weight",
		Pieces:         "pieces",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "sc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "sc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CommodityIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CommodityIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WeightEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		WeightNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		WeightGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		WeightLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PiecesNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		PiecesGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		PiecesLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant            func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.organization_id"), v)
		},
		ShipmentIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.shipment_id"), v)
		},
		ShipmentIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.shipment_id"), v)
		},
		CommodityIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.commodity_id"), v)
		},
		CommodityIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.commodity_id"), v)
		},
		WeightEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.weight"), v)
		},
		WeightNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.weight"), v)
		},
		WeightIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.weight"), bun.In(v))
		},
		WeightNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.weight"), bun.In(v))
		},
		WeightGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.weight"), v)
		},
		WeightGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.weight"), v)
		},
		WeightLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.weight"), v)
		},
		WeightLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.weight"), v)
		},
		PiecesEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.pieces"), v)
		},
		PiecesNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.pieces"), v)
		},
		PiecesIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.pieces"), bun.In(v))
		},
		PiecesNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.pieces"), bun.In(v))
		},
		PiecesGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.pieces"), v)
		},
		PiecesGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.pieces"), v)
		},
		PiecesLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.pieces"), v)
		},
		PiecesLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.pieces"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("sc.organization_id"), orgID).
				Where("? = ?", bun.Ident("sc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("sc.id"), id).
				Where("? = ?", bun.Ident("sc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "sc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"sc.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "sc.created_at DESC"
			}
			return "sc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "sc.updated_at DESC"
			}
			return "sc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]shipmentCommodityFieldConfig {
		return map[string]shipmentCommodityFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "sc.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"commodity_id": {
				Name:       "commodity_id",
				Column:     "sc.commodity_id",
				Sortable:   false,
				Filterable: true,
			},
			"weight": {
				Name:       "weight",
				Column:     "sc.weight",
				Sortable:   false,
				Filterable: false,
			},
			"pieces": {
				Name:       "pieces",
				Column:     "sc.pieces",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]shipmentCommodityFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "sc.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"commodity_id": {
				Name:       "commodity_id",
				Column:     "sc.commodity_id",
				Sortable:   false,
				Filterable: true,
			},
			"weight": {
				Name:       "weight",
				Column:     "sc.weight",
				Sortable:   false,
				Filterable: false,
			},
			"pieces": {
				Name:       "pieces",
				Column:     "sc.pieces",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]shipmentCommodityFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "sc.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"commodity_id": {
				Name:       "commodity_id",
				Column:     "sc.commodity_id",
				Sortable:   false,
				Filterable: true,
			},
			"weight": {
				Name:       "weight",
				Column:     "sc.weight",
				Sortable:   false,
				Filterable: false,
			},
			"pieces": {
				Name:       "pieces",
				Column:     "sc.pieces",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// ShipmentCommodityQueryBuilder provides a fluent interface for building queries
type ShipmentCommodityQueryBuilder struct {
	query *bun.SelectQuery
}

// NewShipmentCommodityQuery creates a new query builder
func NewShipmentCommodityQuery(db bun.IDB) *ShipmentCommodityQueryBuilder {
	return &ShipmentCommodityQueryBuilder{
		query: db.NewSelect().Model((*ShipmentCommodity)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ShipmentCommodityFromQuery(q *bun.SelectQuery) *ShipmentCommodityQueryBuilder {
	return &ShipmentCommodityQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ShipmentCommodityQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ShipmentCommodityQueryBuilder) Model(model interface{}) *ShipmentCommodityQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ShipmentCommodityQueryBuilder) WhereIDEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ShipmentCommodityQueryBuilder) WhereIDNEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ShipmentCommodityQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ShipmentCommodityQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ShipmentCommodityQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ShipmentCommodityQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereShipmentIDEQ adds a WHERE shipment_id = ? condition
func (b *ShipmentCommodityQueryBuilder) WhereShipmentIDEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.ShipmentIDEQ(b.query, v)
	return b
}

// WhereShipmentIDNEQ adds a WHERE shipment_id != ? condition
func (b *ShipmentCommodityQueryBuilder) WhereShipmentIDNEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.ShipmentIDNEQ(b.query, v)
	return b
}

// WhereCommodityIDEQ adds a WHERE commodity_id = ? condition
func (b *ShipmentCommodityQueryBuilder) WhereCommodityIDEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CommodityIDEQ(b.query, v)
	return b
}

// WhereCommodityIDNEQ adds a WHERE commodity_id != ? condition
func (b *ShipmentCommodityQueryBuilder) WhereCommodityIDNEQ(v pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CommodityIDNEQ(b.query, v)
	return b
}

// WhereWeightEQ adds a WHERE weight = ? condition
func (b *ShipmentCommodityQueryBuilder) WhereWeightEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.WeightEQ(b.query, v)
	return b
}

// WhereWeightNEQ adds a WHERE weight != ? condition
func (b *ShipmentCommodityQueryBuilder) WhereWeightNEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.WeightNEQ(b.query, v)
	return b
}

// WhereWeightGT adds a WHERE weight > ? condition
func (b *ShipmentCommodityQueryBuilder) WhereWeightGT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.WeightGT(b.query, v)
	return b
}

// WhereWeightGTE adds a WHERE weight >= ? condition
func (b *ShipmentCommodityQueryBuilder) WhereWeightGTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.WeightGTE(b.query, v)
	return b
}

// WhereWeightLT adds a WHERE weight < ? condition
func (b *ShipmentCommodityQueryBuilder) WhereWeightLT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.WeightLT(b.query, v)
	return b
}

// WhereWeightLTE adds a WHERE weight <= ? condition
func (b *ShipmentCommodityQueryBuilder) WhereWeightLTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.WeightLTE(b.query, v)
	return b
}

// WhereWeightIn adds a WHERE weight IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WhereWeightIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.WeightIn(b.query, v)
	return b
}

// WhereWeightNotIn adds a WHERE weight NOT IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WhereWeightNotIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.WeightNotIn(b.query, v)
	return b
}

// WherePiecesEQ adds a WHERE pieces = ? condition
func (b *ShipmentCommodityQueryBuilder) WherePiecesEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.PiecesEQ(b.query, v)
	return b
}

// WherePiecesNEQ adds a WHERE pieces != ? condition
func (b *ShipmentCommodityQueryBuilder) WherePiecesNEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.PiecesNEQ(b.query, v)
	return b
}

// WherePiecesGT adds a WHERE pieces > ? condition
func (b *ShipmentCommodityQueryBuilder) WherePiecesGT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.PiecesGT(b.query, v)
	return b
}

// WherePiecesGTE adds a WHERE pieces >= ? condition
func (b *ShipmentCommodityQueryBuilder) WherePiecesGTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.PiecesGTE(b.query, v)
	return b
}

// WherePiecesLT adds a WHERE pieces < ? condition
func (b *ShipmentCommodityQueryBuilder) WherePiecesLT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.PiecesLT(b.query, v)
	return b
}

// WherePiecesLTE adds a WHERE pieces <= ? condition
func (b *ShipmentCommodityQueryBuilder) WherePiecesLTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.PiecesLTE(b.query, v)
	return b
}

// WherePiecesIn adds a WHERE pieces IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WherePiecesIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.PiecesIn(b.query, v)
	return b
}

// WherePiecesNotIn adds a WHERE pieces NOT IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WherePiecesNotIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.PiecesNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ShipmentCommodityQueryBuilder) WhereVersionEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ShipmentCommodityQueryBuilder) WhereVersionNEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ShipmentCommodityQueryBuilder) WhereVersionGT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ShipmentCommodityQueryBuilder) WhereVersionGTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ShipmentCommodityQueryBuilder) WhereVersionLT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ShipmentCommodityQueryBuilder) WhereVersionLTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WhereVersionIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WhereVersionNotIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ShipmentCommodityQueryBuilder) WhereCreatedAtEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ShipmentCommodityQueryBuilder) WhereCreatedAtNEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ShipmentCommodityQueryBuilder) WhereCreatedAtGT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ShipmentCommodityQueryBuilder) WhereCreatedAtGTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ShipmentCommodityQueryBuilder) WhereCreatedAtLT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ShipmentCommodityQueryBuilder) WhereCreatedAtLTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WhereCreatedAtIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WhereCreatedAtNotIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ShipmentCommodityQueryBuilder) WhereUpdatedAtEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ShipmentCommodityQueryBuilder) WhereUpdatedAtNEQ(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ShipmentCommodityQueryBuilder) WhereUpdatedAtGT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ShipmentCommodityQueryBuilder) WhereUpdatedAtGTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ShipmentCommodityQueryBuilder) WhereUpdatedAtLT(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ShipmentCommodityQueryBuilder) WhereUpdatedAtLTE(v int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WhereUpdatedAtIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ShipmentCommodityQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ShipmentCommodityQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ShipmentCommodityQueryBuilder {
	b.query = ShipmentCommodityQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ShipmentCommodityQueryBuilder) WhereGroup(sep string, fn func(*ShipmentCommodityQueryBuilder) *ShipmentCommodityQueryBuilder) *ShipmentCommodityQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ShipmentCommodityQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ShipmentCommodityQueryBuilder) Where(query string, args ...interface{}) *ShipmentCommodityQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ShipmentCommodityQueryBuilder) OrderBy(column string, desc ...bool) *ShipmentCommodityQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ShipmentCommodityQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ShipmentCommodityQueryBuilder) Limit(n int) *ShipmentCommodityQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ShipmentCommodityQueryBuilder) Offset(n int) *ShipmentCommodityQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ShipmentCommodityQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ShipmentCommodityQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ShipmentCommodityQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ShipmentCommodityQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ShipmentCommodityQueryBuilder) All(ctx context.Context) ([]*ShipmentCommodity, error) {
	var entities []*ShipmentCommodity
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ShipmentCommodityQueryBuilder) AllWithCount(ctx context.Context) ([]*ShipmentCommodity, int, error) {
	var entities []*ShipmentCommodity
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ShipmentCommodityQueryBuilder) One(ctx context.Context) (*ShipmentCommodity, error) {
	entity := new(ShipmentCommodity)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ShipmentCommodityQueryBuilder) First(ctx context.Context) (*ShipmentCommodity, error) {
	entity := new(ShipmentCommodity)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ShipmentCommodityBuild creates a chainable query builder
func ShipmentCommodityBuild(db bun.IDB) *ShipmentCommodityQueryBuilder {
	return NewShipmentCommodityQuery(db)
}
