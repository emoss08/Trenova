// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// shipmentControlFieldConfig provides field configuration for ShipmentControl
type shipmentControlFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ShipmentControlQuery provides type-safe query helpers and constants
var ShipmentControlQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                                   string
		BusinessUnitID                       string
		OrganizationID                       string
		ComplianceEnforcementLevel           string
		AutoAssignmentStrategy               string
		ServiceFailureGracePeriod            string
		AutoDelayShipmentsThreshold          string
		DetentionThreshold                   string
		OnTimeDeliveryTarget                 string
		ServiceFailureTarget                 string
		EnableAutoAssignment                 string
		RecordServiceFailures                string
		AutoDelayShipments                   string
		EnforceHOSCompliance                 string
		EnforceDriverQualificationCompliance string
		EnforceMedicalCertCompliance         string
		EnforceHazmatCompliance              string
		EnforceDrugAndAlcoholCompliance      string
		TrackDetentionTime                   string
		AutoGenerateDetentionCharges         string
		TrackCustomerRejections              string
		CheckForDuplicateBOLs                string
		AllowMoveRemovals                    string
		CheckHazmatSegregation               string
		Version                              string
		CreatedAt                            string
		UpdatedAt                            string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn                          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn                          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ComplianceEnforcementLevelEQ              func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery
		ComplianceEnforcementLevelNEQ             func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery
		ComplianceEnforcementLevelIn              func(q *bun.SelectQuery, v []ComplianceEnforcementLevel) *bun.SelectQuery
		ComplianceEnforcementLevelNotIn           func(q *bun.SelectQuery, v []ComplianceEnforcementLevel) *bun.SelectQuery
		AutoAssignmentStrategyEQ                  func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery
		AutoAssignmentStrategyNEQ                 func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery
		AutoAssignmentStrategyIn                  func(q *bun.SelectQuery, v []AutoAssignmentStrategy) *bun.SelectQuery
		AutoAssignmentStrategyNotIn               func(q *bun.SelectQuery, v []AutoAssignmentStrategy) *bun.SelectQuery
		ServiceFailureGracePeriodEQ               func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		ServiceFailureGracePeriodNEQ              func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		ServiceFailureGracePeriodIn               func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		ServiceFailureGracePeriodNotIn            func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		ServiceFailureGracePeriodIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureGracePeriodIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		AutoDelayShipmentsThresholdEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdNEQ            func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdIn             func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdNotIn          func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		AutoDelayShipmentsThresholdIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		DetentionThresholdEQ                      func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		DetentionThresholdNEQ                     func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		DetentionThresholdIn                      func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		DetentionThresholdNotIn                   func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		DetentionThresholdIsNull                  func(q *bun.SelectQuery) *bun.SelectQuery
		DetentionThresholdIsNotNull               func(q *bun.SelectQuery) *bun.SelectQuery
		OnTimeDeliveryTargetEQ                    func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		OnTimeDeliveryTargetNEQ                   func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		OnTimeDeliveryTargetIn                    func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery
		OnTimeDeliveryTargetNotIn                 func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery
		OnTimeDeliveryTargetIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		OnTimeDeliveryTargetIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureTargetEQ                    func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		ServiceFailureTargetNEQ                   func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		ServiceFailureTargetIn                    func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery
		ServiceFailureTargetNotIn                 func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery
		ServiceFailureTargetIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureTargetIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		EnableAutoAssignmentEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnableAutoAssignmentNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnableAutoAssignmentIn                    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnableAutoAssignmentNotIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RecordServiceFailuresEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RecordServiceFailuresNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RecordServiceFailuresIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RecordServiceFailuresNotIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoDelayShipmentsEQ                      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoDelayShipmentsNEQ                     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoDelayShipmentsIn                      func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoDelayShipmentsNotIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceHOSComplianceEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHOSComplianceNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHOSComplianceIn                    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceHOSComplianceNotIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceMedicalCertComplianceEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceMedicalCertComplianceNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceMedicalCertComplianceIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceMedicalCertComplianceNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceHazmatComplianceEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHazmatComplianceNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHazmatComplianceIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceHazmatComplianceNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceNEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceNotIn      func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrackDetentionTimeEQ                      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackDetentionTimeNEQ                     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackDetentionTimeIn                      func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrackDetentionTimeNotIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoGenerateDetentionChargesEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoGenerateDetentionChargesNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoGenerateDetentionChargesIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoGenerateDetentionChargesNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrackCustomerRejectionsEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackCustomerRejectionsNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackCustomerRejectionsIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrackCustomerRejectionsNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CheckForDuplicateBOLsEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckForDuplicateBOLsNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckForDuplicateBOLsIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CheckForDuplicateBOLsNotIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowMoveRemovalsEQ                       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowMoveRemovalsNEQ                      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowMoveRemovalsIn                       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowMoveRemovalsNotIn                    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CheckHazmatSegregationEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckHazmatSegregationNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckHazmatSegregationIn                  func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CheckHazmatSegregationNotIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]shipmentControlFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
	}
}{
	// Table and alias constants
	Table:    "shipment_controls",
	Alias:    "sc",
	IDPrefix: "sc_",

	// Field names
	Field: struct {
		ID                                   string
		BusinessUnitID                       string
		OrganizationID                       string
		ComplianceEnforcementLevel           string
		AutoAssignmentStrategy               string
		ServiceFailureGracePeriod            string
		AutoDelayShipmentsThreshold          string
		DetentionThreshold                   string
		OnTimeDeliveryTarget                 string
		ServiceFailureTarget                 string
		EnableAutoAssignment                 string
		RecordServiceFailures                string
		AutoDelayShipments                   string
		EnforceHOSCompliance                 string
		EnforceDriverQualificationCompliance string
		EnforceMedicalCertCompliance         string
		EnforceHazmatCompliance              string
		EnforceDrugAndAlcoholCompliance      string
		TrackDetentionTime                   string
		AutoGenerateDetentionCharges         string
		TrackCustomerRejections              string
		CheckForDuplicateBOLs                string
		AllowMoveRemovals                    string
		CheckHazmatSegregation               string
		Version                              string
		CreatedAt                            string
		UpdatedAt                            string
	}{
		ID:                                   "id",
		BusinessUnitID:                       "business_unit_id",
		OrganizationID:                       "organization_id",
		ComplianceEnforcementLevel:           "compliance_enforcement_level",
		AutoAssignmentStrategy:               "auto_assignment_strategy",
		ServiceFailureGracePeriod:            "service_failure_grace_period",
		AutoDelayShipmentsThreshold:          "auto_delay_shipments_threshold",
		DetentionThreshold:                   "detention_threshold",
		OnTimeDeliveryTarget:                 "on_time_delivery_target",
		ServiceFailureTarget:                 "service_failure_target",
		EnableAutoAssignment:                 "enable_auto_assignment",
		RecordServiceFailures:                "record_service_failures",
		AutoDelayShipments:                   "auto_delay_shipments",
		EnforceHOSCompliance:                 "enforce_hos_compliance",
		EnforceDriverQualificationCompliance: "enforce_driver_qualification_compliance",
		EnforceMedicalCertCompliance:         "enforce_medical_cert_compliance",
		EnforceHazmatCompliance:              "enforce_hazmat_compliance",
		EnforceDrugAndAlcoholCompliance:      "enforce_drug_and_alcohol_compliance",
		TrackDetentionTime:                   "track_detention_time",
		AutoGenerateDetentionCharges:         "auto_generate_detention_charges",
		TrackCustomerRejections:              "track_customer_rejections",
		CheckForDuplicateBOLs:                "check_for_duplicate_bols",
		AllowMoveRemovals:                    "allow_move_removals",
		CheckHazmatSegregation:               "check_hazmat_segregation",
		Version:                              "version",
		CreatedAt:                            "created_at",
		UpdatedAt:                            "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "sc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "sc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn                          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn                          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ComplianceEnforcementLevelEQ              func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery
		ComplianceEnforcementLevelNEQ             func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery
		ComplianceEnforcementLevelIn              func(q *bun.SelectQuery, v []ComplianceEnforcementLevel) *bun.SelectQuery
		ComplianceEnforcementLevelNotIn           func(q *bun.SelectQuery, v []ComplianceEnforcementLevel) *bun.SelectQuery
		AutoAssignmentStrategyEQ                  func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery
		AutoAssignmentStrategyNEQ                 func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery
		AutoAssignmentStrategyIn                  func(q *bun.SelectQuery, v []AutoAssignmentStrategy) *bun.SelectQuery
		AutoAssignmentStrategyNotIn               func(q *bun.SelectQuery, v []AutoAssignmentStrategy) *bun.SelectQuery
		ServiceFailureGracePeriodEQ               func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		ServiceFailureGracePeriodNEQ              func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		ServiceFailureGracePeriodIn               func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		ServiceFailureGracePeriodNotIn            func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		ServiceFailureGracePeriodIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureGracePeriodIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		AutoDelayShipmentsThresholdEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdNEQ            func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdIn             func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdNotIn          func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		AutoDelayShipmentsThresholdIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		DetentionThresholdEQ                      func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		DetentionThresholdNEQ                     func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		DetentionThresholdIn                      func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		DetentionThresholdNotIn                   func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery
		DetentionThresholdIsNull                  func(q *bun.SelectQuery) *bun.SelectQuery
		DetentionThresholdIsNotNull               func(q *bun.SelectQuery) *bun.SelectQuery
		OnTimeDeliveryTargetEQ                    func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		OnTimeDeliveryTargetNEQ                   func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		OnTimeDeliveryTargetIn                    func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery
		OnTimeDeliveryTargetNotIn                 func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery
		OnTimeDeliveryTargetIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		OnTimeDeliveryTargetIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureTargetEQ                    func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		ServiceFailureTargetNEQ                   func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		ServiceFailureTargetIn                    func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery
		ServiceFailureTargetNotIn                 func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery
		ServiceFailureTargetIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureTargetIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		EnableAutoAssignmentEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnableAutoAssignmentNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnableAutoAssignmentIn                    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnableAutoAssignmentNotIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RecordServiceFailuresEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RecordServiceFailuresNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RecordServiceFailuresIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RecordServiceFailuresNotIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoDelayShipmentsEQ                      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoDelayShipmentsNEQ                     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoDelayShipmentsIn                      func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoDelayShipmentsNotIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceHOSComplianceEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHOSComplianceNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHOSComplianceIn                    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceHOSComplianceNotIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceMedicalCertComplianceEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceMedicalCertComplianceNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceMedicalCertComplianceIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceMedicalCertComplianceNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceHazmatComplianceEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHazmatComplianceNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHazmatComplianceIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceHazmatComplianceNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceNEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceNotIn      func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrackDetentionTimeEQ                      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackDetentionTimeNEQ                     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackDetentionTimeIn                      func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrackDetentionTimeNotIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoGenerateDetentionChargesEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoGenerateDetentionChargesNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoGenerateDetentionChargesIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoGenerateDetentionChargesNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrackCustomerRejectionsEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackCustomerRejectionsNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackCustomerRejectionsIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrackCustomerRejectionsNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CheckForDuplicateBOLsEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckForDuplicateBOLsNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckForDuplicateBOLsIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CheckForDuplicateBOLsNotIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowMoveRemovalsEQ                       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowMoveRemovalsNEQ                      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowMoveRemovalsIn                       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowMoveRemovalsNotIn                    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CheckHazmatSegregationEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckHazmatSegregationNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckHazmatSegregationIn                  func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CheckHazmatSegregationNotIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                                    func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.organization_id"), bun.In(v))
		},
		ComplianceEnforcementLevelEQ: func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.compliance_enforcement_level"), v)
		},
		ComplianceEnforcementLevelNEQ: func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.compliance_enforcement_level"), v)
		},
		ComplianceEnforcementLevelIn: func(q *bun.SelectQuery, v []ComplianceEnforcementLevel) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.compliance_enforcement_level"), bun.In(v))
		},
		ComplianceEnforcementLevelNotIn: func(q *bun.SelectQuery, v []ComplianceEnforcementLevel) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.compliance_enforcement_level"), bun.In(v))
		},
		AutoAssignmentStrategyEQ: func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.auto_assignment_strategy"), v)
		},
		AutoAssignmentStrategyNEQ: func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.auto_assignment_strategy"), v)
		},
		AutoAssignmentStrategyIn: func(q *bun.SelectQuery, v []AutoAssignmentStrategy) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.auto_assignment_strategy"), bun.In(v))
		},
		AutoAssignmentStrategyNotIn: func(q *bun.SelectQuery, v []AutoAssignmentStrategy) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.auto_assignment_strategy"), bun.In(v))
		},
		ServiceFailureGracePeriodEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.service_failure_grace_period"), v)
		},
		ServiceFailureGracePeriodNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.service_failure_grace_period"), v)
		},
		ServiceFailureGracePeriodIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.service_failure_grace_period"), bun.In(v))
		},
		ServiceFailureGracePeriodNotIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.service_failure_grace_period"), bun.In(v))
		},
		ServiceFailureGracePeriodIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.service_failure_grace_period"))
		},
		ServiceFailureGracePeriodIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.service_failure_grace_period"))
		},
		AutoDelayShipmentsThresholdEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.auto_delay_shipments_threshold"), v)
		},
		AutoDelayShipmentsThresholdNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.auto_delay_shipments_threshold"), v)
		},
		AutoDelayShipmentsThresholdIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.auto_delay_shipments_threshold"), bun.In(v))
		},
		AutoDelayShipmentsThresholdNotIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.auto_delay_shipments_threshold"), bun.In(v))
		},
		AutoDelayShipmentsThresholdIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.auto_delay_shipments_threshold"))
		},
		AutoDelayShipmentsThresholdIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.auto_delay_shipments_threshold"))
		},
		DetentionThresholdEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.detention_threshold"), v)
		},
		DetentionThresholdNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.detention_threshold"), v)
		},
		DetentionThresholdIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.detention_threshold"), bun.In(v))
		},
		DetentionThresholdNotIn: func(q *bun.SelectQuery, v []*int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.detention_threshold"), bun.In(v))
		},
		DetentionThresholdIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.detention_threshold"))
		},
		DetentionThresholdIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.detention_threshold"))
		},
		OnTimeDeliveryTargetEQ: func(q *bun.SelectQuery, v *float32) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.on_time_delivery_target"), v)
		},
		OnTimeDeliveryTargetNEQ: func(q *bun.SelectQuery, v *float32) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.on_time_delivery_target"), v)
		},
		OnTimeDeliveryTargetIn: func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.on_time_delivery_target"), bun.In(v))
		},
		OnTimeDeliveryTargetNotIn: func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.on_time_delivery_target"), bun.In(v))
		},
		OnTimeDeliveryTargetIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.on_time_delivery_target"))
		},
		OnTimeDeliveryTargetIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.on_time_delivery_target"))
		},
		ServiceFailureTargetEQ: func(q *bun.SelectQuery, v *float32) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.service_failure_target"), v)
		},
		ServiceFailureTargetNEQ: func(q *bun.SelectQuery, v *float32) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.service_failure_target"), v)
		},
		ServiceFailureTargetIn: func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.service_failure_target"), bun.In(v))
		},
		ServiceFailureTargetNotIn: func(q *bun.SelectQuery, v []*float32) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.service_failure_target"), bun.In(v))
		},
		ServiceFailureTargetIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.service_failure_target"))
		},
		ServiceFailureTargetIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.service_failure_target"))
		},
		EnableAutoAssignmentEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enable_auto_assignment"), v)
		},
		EnableAutoAssignmentNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enable_auto_assignment"), v)
		},
		EnableAutoAssignmentIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.enable_auto_assignment"), bun.In(v))
		},
		EnableAutoAssignmentNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.enable_auto_assignment"), bun.In(v))
		},
		RecordServiceFailuresEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.record_service_failures"), v)
		},
		RecordServiceFailuresNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.record_service_failures"), v)
		},
		RecordServiceFailuresIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.record_service_failures"), bun.In(v))
		},
		RecordServiceFailuresNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.record_service_failures"), bun.In(v))
		},
		AutoDelayShipmentsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.auto_delay_shipments"), v)
		},
		AutoDelayShipmentsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.auto_delay_shipments"), v)
		},
		AutoDelayShipmentsIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.auto_delay_shipments"), bun.In(v))
		},
		AutoDelayShipmentsNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.auto_delay_shipments"), bun.In(v))
		},
		EnforceHOSComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_hos_compliance"), v)
		},
		EnforceHOSComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_hos_compliance"), v)
		},
		EnforceHOSComplianceIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.enforce_hos_compliance"), bun.In(v))
		},
		EnforceHOSComplianceNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.enforce_hos_compliance"), bun.In(v))
		},
		EnforceDriverQualificationComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_driver_qualification_compliance"), v)
		},
		EnforceDriverQualificationComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_driver_qualification_compliance"), v)
		},
		EnforceDriverQualificationComplianceIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.enforce_driver_qualification_compliance"), bun.In(v))
		},
		EnforceDriverQualificationComplianceNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.enforce_driver_qualification_compliance"), bun.In(v))
		},
		EnforceMedicalCertComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_medical_cert_compliance"), v)
		},
		EnforceMedicalCertComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_medical_cert_compliance"), v)
		},
		EnforceMedicalCertComplianceIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.enforce_medical_cert_compliance"), bun.In(v))
		},
		EnforceMedicalCertComplianceNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.enforce_medical_cert_compliance"), bun.In(v))
		},
		EnforceHazmatComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_hazmat_compliance"), v)
		},
		EnforceHazmatComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_hazmat_compliance"), v)
		},
		EnforceHazmatComplianceIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.enforce_hazmat_compliance"), bun.In(v))
		},
		EnforceHazmatComplianceNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.enforce_hazmat_compliance"), bun.In(v))
		},
		EnforceDrugAndAlcoholComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_drug_and_alcohol_compliance"), v)
		},
		EnforceDrugAndAlcoholComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_drug_and_alcohol_compliance"), v)
		},
		EnforceDrugAndAlcoholComplianceIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.enforce_drug_and_alcohol_compliance"), bun.In(v))
		},
		EnforceDrugAndAlcoholComplianceNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.enforce_drug_and_alcohol_compliance"), bun.In(v))
		},
		TrackDetentionTimeEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.track_detention_time"), v)
		},
		TrackDetentionTimeNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.track_detention_time"), v)
		},
		TrackDetentionTimeIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.track_detention_time"), bun.In(v))
		},
		TrackDetentionTimeNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.track_detention_time"), bun.In(v))
		},
		AutoGenerateDetentionChargesEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.auto_generate_detention_charges"), v)
		},
		AutoGenerateDetentionChargesNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.auto_generate_detention_charges"), v)
		},
		AutoGenerateDetentionChargesIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.auto_generate_detention_charges"), bun.In(v))
		},
		AutoGenerateDetentionChargesNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.auto_generate_detention_charges"), bun.In(v))
		},
		TrackCustomerRejectionsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.track_customer_rejections"), v)
		},
		TrackCustomerRejectionsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.track_customer_rejections"), v)
		},
		TrackCustomerRejectionsIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.track_customer_rejections"), bun.In(v))
		},
		TrackCustomerRejectionsNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.track_customer_rejections"), bun.In(v))
		},
		CheckForDuplicateBOLsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.check_for_duplicate_bols"), v)
		},
		CheckForDuplicateBOLsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.check_for_duplicate_bols"), v)
		},
		CheckForDuplicateBOLsIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.check_for_duplicate_bols"), bun.In(v))
		},
		CheckForDuplicateBOLsNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.check_for_duplicate_bols"), bun.In(v))
		},
		AllowMoveRemovalsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.allow_move_removals"), v)
		},
		AllowMoveRemovalsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.allow_move_removals"), v)
		},
		AllowMoveRemovalsIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.allow_move_removals"), bun.In(v))
		},
		AllowMoveRemovalsNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.allow_move_removals"), bun.In(v))
		},
		CheckHazmatSegregationEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.check_hazmat_segregation"), v)
		},
		CheckHazmatSegregationNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.check_hazmat_segregation"), v)
		},
		CheckHazmatSegregationIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.check_hazmat_segregation"), bun.In(v))
		},
		CheckHazmatSegregationNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.check_hazmat_segregation"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("sc.organization_id"), orgID).
				Where("? = ?", bun.Ident("sc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("sc.id"), id).
				Where("? = ?", bun.Ident("sc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "sc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"sc.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "sc.created_at DESC"
			}
			return "sc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "sc.updated_at DESC"
			}
			return "sc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]shipmentControlFieldConfig {
		return map[string]shipmentControlFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"compliance_enforcement_level": {
				Name:       "compliance_enforcement_level",
				Column:     "sc.compliance_enforcement_level",
				Sortable:   false,
				Filterable: false,
			},
			"auto_assignment_strategy": {
				Name:       "auto_assignment_strategy",
				Column:     "sc.auto_assignment_strategy",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_grace_period": {
				Name:       "service_failure_grace_period",
				Column:     "sc.service_failure_grace_period",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments_threshold": {
				Name:       "auto_delay_shipments_threshold",
				Column:     "sc.auto_delay_shipments_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"detention_threshold": {
				Name:       "detention_threshold",
				Column:     "sc.detention_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"on_time_delivery_target": {
				Name:       "on_time_delivery_target",
				Column:     "sc.on_time_delivery_target",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_target": {
				Name:       "service_failure_target",
				Column:     "sc.service_failure_target",
				Sortable:   false,
				Filterable: false,
			},
			"enable_auto_assignment": {
				Name:       "enable_auto_assignment",
				Column:     "sc.enable_auto_assignment",
				Sortable:   false,
				Filterable: false,
			},
			"record_service_failures": {
				Name:       "record_service_failures",
				Column:     "sc.record_service_failures",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments": {
				Name:       "auto_delay_shipments",
				Column:     "sc.auto_delay_shipments",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hos_compliance": {
				Name:       "enforce_hos_compliance",
				Column:     "sc.enforce_hos_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_driver_qualification_compliance": {
				Name:       "enforce_driver_qualification_compliance",
				Column:     "sc.enforce_driver_qualification_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_medical_cert_compliance": {
				Name:       "enforce_medical_cert_compliance",
				Column:     "sc.enforce_medical_cert_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hazmat_compliance": {
				Name:       "enforce_hazmat_compliance",
				Column:     "sc.enforce_hazmat_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_drug_and_alcohol_compliance": {
				Name:       "enforce_drug_and_alcohol_compliance",
				Column:     "sc.enforce_drug_and_alcohol_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"track_detention_time": {
				Name:       "track_detention_time",
				Column:     "sc.track_detention_time",
				Sortable:   false,
				Filterable: false,
			},
			"auto_generate_detention_charges": {
				Name:       "auto_generate_detention_charges",
				Column:     "sc.auto_generate_detention_charges",
				Sortable:   false,
				Filterable: false,
			},
			"track_customer_rejections": {
				Name:       "track_customer_rejections",
				Column:     "sc.track_customer_rejections",
				Sortable:   false,
				Filterable: false,
			},
			"check_for_duplicate_bols": {
				Name:       "check_for_duplicate_bols",
				Column:     "sc.check_for_duplicate_bols",
				Sortable:   false,
				Filterable: false,
			},
			"allow_move_removals": {
				Name:       "allow_move_removals",
				Column:     "sc.allow_move_removals",
				Sortable:   false,
				Filterable: false,
			},
			"check_hazmat_segregation": {
				Name:       "check_hazmat_segregation",
				Column:     "sc.check_hazmat_segregation",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]shipmentControlFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"compliance_enforcement_level": {
				Name:       "compliance_enforcement_level",
				Column:     "sc.compliance_enforcement_level",
				Sortable:   false,
				Filterable: false,
			},
			"auto_assignment_strategy": {
				Name:       "auto_assignment_strategy",
				Column:     "sc.auto_assignment_strategy",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_grace_period": {
				Name:       "service_failure_grace_period",
				Column:     "sc.service_failure_grace_period",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments_threshold": {
				Name:       "auto_delay_shipments_threshold",
				Column:     "sc.auto_delay_shipments_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"detention_threshold": {
				Name:       "detention_threshold",
				Column:     "sc.detention_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"on_time_delivery_target": {
				Name:       "on_time_delivery_target",
				Column:     "sc.on_time_delivery_target",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_target": {
				Name:       "service_failure_target",
				Column:     "sc.service_failure_target",
				Sortable:   false,
				Filterable: false,
			},
			"enable_auto_assignment": {
				Name:       "enable_auto_assignment",
				Column:     "sc.enable_auto_assignment",
				Sortable:   false,
				Filterable: false,
			},
			"record_service_failures": {
				Name:       "record_service_failures",
				Column:     "sc.record_service_failures",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments": {
				Name:       "auto_delay_shipments",
				Column:     "sc.auto_delay_shipments",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hos_compliance": {
				Name:       "enforce_hos_compliance",
				Column:     "sc.enforce_hos_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_driver_qualification_compliance": {
				Name:       "enforce_driver_qualification_compliance",
				Column:     "sc.enforce_driver_qualification_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_medical_cert_compliance": {
				Name:       "enforce_medical_cert_compliance",
				Column:     "sc.enforce_medical_cert_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hazmat_compliance": {
				Name:       "enforce_hazmat_compliance",
				Column:     "sc.enforce_hazmat_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_drug_and_alcohol_compliance": {
				Name:       "enforce_drug_and_alcohol_compliance",
				Column:     "sc.enforce_drug_and_alcohol_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"track_detention_time": {
				Name:       "track_detention_time",
				Column:     "sc.track_detention_time",
				Sortable:   false,
				Filterable: false,
			},
			"auto_generate_detention_charges": {
				Name:       "auto_generate_detention_charges",
				Column:     "sc.auto_generate_detention_charges",
				Sortable:   false,
				Filterable: false,
			},
			"track_customer_rejections": {
				Name:       "track_customer_rejections",
				Column:     "sc.track_customer_rejections",
				Sortable:   false,
				Filterable: false,
			},
			"check_for_duplicate_bols": {
				Name:       "check_for_duplicate_bols",
				Column:     "sc.check_for_duplicate_bols",
				Sortable:   false,
				Filterable: false,
			},
			"allow_move_removals": {
				Name:       "allow_move_removals",
				Column:     "sc.allow_move_removals",
				Sortable:   false,
				Filterable: false,
			},
			"check_hazmat_segregation": {
				Name:       "check_hazmat_segregation",
				Column:     "sc.check_hazmat_segregation",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]shipmentControlFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"compliance_enforcement_level": {
				Name:       "compliance_enforcement_level",
				Column:     "sc.compliance_enforcement_level",
				Sortable:   false,
				Filterable: false,
			},
			"auto_assignment_strategy": {
				Name:       "auto_assignment_strategy",
				Column:     "sc.auto_assignment_strategy",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_grace_period": {
				Name:       "service_failure_grace_period",
				Column:     "sc.service_failure_grace_period",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments_threshold": {
				Name:       "auto_delay_shipments_threshold",
				Column:     "sc.auto_delay_shipments_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"detention_threshold": {
				Name:       "detention_threshold",
				Column:     "sc.detention_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"on_time_delivery_target": {
				Name:       "on_time_delivery_target",
				Column:     "sc.on_time_delivery_target",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_target": {
				Name:       "service_failure_target",
				Column:     "sc.service_failure_target",
				Sortable:   false,
				Filterable: false,
			},
			"enable_auto_assignment": {
				Name:       "enable_auto_assignment",
				Column:     "sc.enable_auto_assignment",
				Sortable:   false,
				Filterable: false,
			},
			"record_service_failures": {
				Name:       "record_service_failures",
				Column:     "sc.record_service_failures",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments": {
				Name:       "auto_delay_shipments",
				Column:     "sc.auto_delay_shipments",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hos_compliance": {
				Name:       "enforce_hos_compliance",
				Column:     "sc.enforce_hos_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_driver_qualification_compliance": {
				Name:       "enforce_driver_qualification_compliance",
				Column:     "sc.enforce_driver_qualification_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_medical_cert_compliance": {
				Name:       "enforce_medical_cert_compliance",
				Column:     "sc.enforce_medical_cert_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hazmat_compliance": {
				Name:       "enforce_hazmat_compliance",
				Column:     "sc.enforce_hazmat_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_drug_and_alcohol_compliance": {
				Name:       "enforce_drug_and_alcohol_compliance",
				Column:     "sc.enforce_drug_and_alcohol_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"track_detention_time": {
				Name:       "track_detention_time",
				Column:     "sc.track_detention_time",
				Sortable:   false,
				Filterable: false,
			},
			"auto_generate_detention_charges": {
				Name:       "auto_generate_detention_charges",
				Column:     "sc.auto_generate_detention_charges",
				Sortable:   false,
				Filterable: false,
			},
			"track_customer_rejections": {
				Name:       "track_customer_rejections",
				Column:     "sc.track_customer_rejections",
				Sortable:   false,
				Filterable: false,
			},
			"check_for_duplicate_bols": {
				Name:       "check_for_duplicate_bols",
				Column:     "sc.check_for_duplicate_bols",
				Sortable:   false,
				Filterable: false,
			},
			"allow_move_removals": {
				Name:       "allow_move_removals",
				Column:     "sc.allow_move_removals",
				Sortable:   false,
				Filterable: false,
			},
			"check_hazmat_segregation": {
				Name:       "check_hazmat_segregation",
				Column:     "sc.check_hazmat_segregation",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
	},
}

// ShipmentControlQueryBuilder provides a fluent interface for building queries
type ShipmentControlQueryBuilder struct {
	query *bun.SelectQuery
}

// NewShipmentControlQuery creates a new query builder
func NewShipmentControlQuery(db bun.IDB) *ShipmentControlQueryBuilder {
	return &ShipmentControlQueryBuilder{
		query: db.NewSelect().Model((*ShipmentControl)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ShipmentControlFromQuery(q *bun.SelectQuery) *ShipmentControlQueryBuilder {
	return &ShipmentControlQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ShipmentControlQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ShipmentControlQueryBuilder) Model(model interface{}) *ShipmentControlQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ShipmentControlQueryBuilder) WhereIDEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ShipmentControlQueryBuilder) WhereIDNEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereIDIn(v []pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereIDNotIn(v []pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ShipmentControlQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ShipmentControlQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ShipmentControlQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ShipmentControlQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereComplianceEnforcementLevelEQ adds a WHERE compliance_enforcement_level = ? condition
func (b *ShipmentControlQueryBuilder) WhereComplianceEnforcementLevelEQ(v ComplianceEnforcementLevel) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ComplianceEnforcementLevelEQ(b.query, v)
	return b
}

// WhereComplianceEnforcementLevelNEQ adds a WHERE compliance_enforcement_level != ? condition
func (b *ShipmentControlQueryBuilder) WhereComplianceEnforcementLevelNEQ(v ComplianceEnforcementLevel) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ComplianceEnforcementLevelNEQ(b.query, v)
	return b
}

// WhereComplianceEnforcementLevelIn adds a WHERE compliance_enforcement_level IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereComplianceEnforcementLevelIn(v []ComplianceEnforcementLevel) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ComplianceEnforcementLevelIn(b.query, v)
	return b
}

// WhereComplianceEnforcementLevelNotIn adds a WHERE compliance_enforcement_level NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereComplianceEnforcementLevelNotIn(v []ComplianceEnforcementLevel) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ComplianceEnforcementLevelNotIn(b.query, v)
	return b
}

// WhereAutoAssignmentStrategyEQ adds a WHERE auto_assignment_strategy = ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoAssignmentStrategyEQ(v AutoAssignmentStrategy) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoAssignmentStrategyEQ(b.query, v)
	return b
}

// WhereAutoAssignmentStrategyNEQ adds a WHERE auto_assignment_strategy != ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoAssignmentStrategyNEQ(v AutoAssignmentStrategy) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoAssignmentStrategyNEQ(b.query, v)
	return b
}

// WhereAutoAssignmentStrategyIn adds a WHERE auto_assignment_strategy IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAutoAssignmentStrategyIn(v []AutoAssignmentStrategy) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoAssignmentStrategyIn(b.query, v)
	return b
}

// WhereAutoAssignmentStrategyNotIn adds a WHERE auto_assignment_strategy NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAutoAssignmentStrategyNotIn(v []AutoAssignmentStrategy) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoAssignmentStrategyNotIn(b.query, v)
	return b
}

// WhereServiceFailureGracePeriodEQ adds a WHERE service_failure_grace_period = ? condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureGracePeriodEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureGracePeriodEQ(b.query, v)
	return b
}

// WhereServiceFailureGracePeriodNEQ adds a WHERE service_failure_grace_period != ? condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureGracePeriodNEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureGracePeriodNEQ(b.query, v)
	return b
}

// WhereServiceFailureGracePeriodIn adds a WHERE service_failure_grace_period IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureGracePeriodIn(v []*int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureGracePeriodIn(b.query, v)
	return b
}

// WhereServiceFailureGracePeriodNotIn adds a WHERE service_failure_grace_period NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureGracePeriodNotIn(v []*int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureGracePeriodNotIn(b.query, v)
	return b
}

// WhereAutoDelayShipmentsThresholdEQ adds a WHERE auto_delay_shipments_threshold = ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsThresholdEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsThresholdEQ(b.query, v)
	return b
}

// WhereAutoDelayShipmentsThresholdNEQ adds a WHERE auto_delay_shipments_threshold != ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsThresholdNEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsThresholdNEQ(b.query, v)
	return b
}

// WhereAutoDelayShipmentsThresholdIn adds a WHERE auto_delay_shipments_threshold IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsThresholdIn(v []*int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsThresholdIn(b.query, v)
	return b
}

// WhereAutoDelayShipmentsThresholdNotIn adds a WHERE auto_delay_shipments_threshold NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsThresholdNotIn(v []*int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsThresholdNotIn(b.query, v)
	return b
}

// WhereDetentionThresholdEQ adds a WHERE detention_threshold = ? condition
func (b *ShipmentControlQueryBuilder) WhereDetentionThresholdEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.DetentionThresholdEQ(b.query, v)
	return b
}

// WhereDetentionThresholdNEQ adds a WHERE detention_threshold != ? condition
func (b *ShipmentControlQueryBuilder) WhereDetentionThresholdNEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.DetentionThresholdNEQ(b.query, v)
	return b
}

// WhereDetentionThresholdIn adds a WHERE detention_threshold IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereDetentionThresholdIn(v []*int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.DetentionThresholdIn(b.query, v)
	return b
}

// WhereDetentionThresholdNotIn adds a WHERE detention_threshold NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereDetentionThresholdNotIn(v []*int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.DetentionThresholdNotIn(b.query, v)
	return b
}

// WhereOnTimeDeliveryTargetEQ adds a WHERE on_time_delivery_target = ? condition
func (b *ShipmentControlQueryBuilder) WhereOnTimeDeliveryTargetEQ(v *float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OnTimeDeliveryTargetEQ(b.query, v)
	return b
}

// WhereOnTimeDeliveryTargetNEQ adds a WHERE on_time_delivery_target != ? condition
func (b *ShipmentControlQueryBuilder) WhereOnTimeDeliveryTargetNEQ(v *float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OnTimeDeliveryTargetNEQ(b.query, v)
	return b
}

// WhereOnTimeDeliveryTargetIn adds a WHERE on_time_delivery_target IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereOnTimeDeliveryTargetIn(v []*float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OnTimeDeliveryTargetIn(b.query, v)
	return b
}

// WhereOnTimeDeliveryTargetNotIn adds a WHERE on_time_delivery_target NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereOnTimeDeliveryTargetNotIn(v []*float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OnTimeDeliveryTargetNotIn(b.query, v)
	return b
}

// WhereServiceFailureTargetEQ adds a WHERE service_failure_target = ? condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureTargetEQ(v *float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureTargetEQ(b.query, v)
	return b
}

// WhereServiceFailureTargetNEQ adds a WHERE service_failure_target != ? condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureTargetNEQ(v *float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureTargetNEQ(b.query, v)
	return b
}

// WhereServiceFailureTargetIn adds a WHERE service_failure_target IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureTargetIn(v []*float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureTargetIn(b.query, v)
	return b
}

// WhereServiceFailureTargetNotIn adds a WHERE service_failure_target NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureTargetNotIn(v []*float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureTargetNotIn(b.query, v)
	return b
}

// WhereEnableAutoAssignmentEQ adds a WHERE enable_auto_assignment = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnableAutoAssignmentEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnableAutoAssignmentEQ(b.query, v)
	return b
}

// WhereEnableAutoAssignmentNEQ adds a WHERE enable_auto_assignment != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnableAutoAssignmentNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnableAutoAssignmentNEQ(b.query, v)
	return b
}

// WhereEnableAutoAssignmentIn adds a WHERE enable_auto_assignment IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnableAutoAssignmentIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnableAutoAssignmentIn(b.query, v)
	return b
}

// WhereEnableAutoAssignmentNotIn adds a WHERE enable_auto_assignment NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnableAutoAssignmentNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnableAutoAssignmentNotIn(b.query, v)
	return b
}

// WhereRecordServiceFailuresEQ adds a WHERE record_service_failures = ? condition
func (b *ShipmentControlQueryBuilder) WhereRecordServiceFailuresEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.RecordServiceFailuresEQ(b.query, v)
	return b
}

// WhereRecordServiceFailuresNEQ adds a WHERE record_service_failures != ? condition
func (b *ShipmentControlQueryBuilder) WhereRecordServiceFailuresNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.RecordServiceFailuresNEQ(b.query, v)
	return b
}

// WhereRecordServiceFailuresIn adds a WHERE record_service_failures IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereRecordServiceFailuresIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.RecordServiceFailuresIn(b.query, v)
	return b
}

// WhereRecordServiceFailuresNotIn adds a WHERE record_service_failures NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereRecordServiceFailuresNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.RecordServiceFailuresNotIn(b.query, v)
	return b
}

// WhereAutoDelayShipmentsEQ adds a WHERE auto_delay_shipments = ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsEQ(b.query, v)
	return b
}

// WhereAutoDelayShipmentsNEQ adds a WHERE auto_delay_shipments != ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsNEQ(b.query, v)
	return b
}

// WhereAutoDelayShipmentsIn adds a WHERE auto_delay_shipments IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsIn(b.query, v)
	return b
}

// WhereAutoDelayShipmentsNotIn adds a WHERE auto_delay_shipments NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsNotIn(b.query, v)
	return b
}

// WhereEnforceHOSComplianceEQ adds a WHERE enforce_hos_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHOSComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHOSComplianceEQ(b.query, v)
	return b
}

// WhereEnforceHOSComplianceNEQ adds a WHERE enforce_hos_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHOSComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHOSComplianceNEQ(b.query, v)
	return b
}

// WhereEnforceHOSComplianceIn adds a WHERE enforce_hos_compliance IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHOSComplianceIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHOSComplianceIn(b.query, v)
	return b
}

// WhereEnforceHOSComplianceNotIn adds a WHERE enforce_hos_compliance NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHOSComplianceNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHOSComplianceNotIn(b.query, v)
	return b
}

// WhereEnforceDriverQualificationComplianceEQ adds a WHERE enforce_driver_qualification_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDriverQualificationComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDriverQualificationComplianceEQ(b.query, v)
	return b
}

// WhereEnforceDriverQualificationComplianceNEQ adds a WHERE enforce_driver_qualification_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDriverQualificationComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDriverQualificationComplianceNEQ(b.query, v)
	return b
}

// WhereEnforceDriverQualificationComplianceIn adds a WHERE enforce_driver_qualification_compliance IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDriverQualificationComplianceIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDriverQualificationComplianceIn(b.query, v)
	return b
}

// WhereEnforceDriverQualificationComplianceNotIn adds a WHERE enforce_driver_qualification_compliance NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDriverQualificationComplianceNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDriverQualificationComplianceNotIn(b.query, v)
	return b
}

// WhereEnforceMedicalCertComplianceEQ adds a WHERE enforce_medical_cert_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceMedicalCertComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceMedicalCertComplianceEQ(b.query, v)
	return b
}

// WhereEnforceMedicalCertComplianceNEQ adds a WHERE enforce_medical_cert_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceMedicalCertComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceMedicalCertComplianceNEQ(b.query, v)
	return b
}

// WhereEnforceMedicalCertComplianceIn adds a WHERE enforce_medical_cert_compliance IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceMedicalCertComplianceIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceMedicalCertComplianceIn(b.query, v)
	return b
}

// WhereEnforceMedicalCertComplianceNotIn adds a WHERE enforce_medical_cert_compliance NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceMedicalCertComplianceNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceMedicalCertComplianceNotIn(b.query, v)
	return b
}

// WhereEnforceHazmatComplianceEQ adds a WHERE enforce_hazmat_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHazmatComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHazmatComplianceEQ(b.query, v)
	return b
}

// WhereEnforceHazmatComplianceNEQ adds a WHERE enforce_hazmat_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHazmatComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHazmatComplianceNEQ(b.query, v)
	return b
}

// WhereEnforceHazmatComplianceIn adds a WHERE enforce_hazmat_compliance IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHazmatComplianceIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHazmatComplianceIn(b.query, v)
	return b
}

// WhereEnforceHazmatComplianceNotIn adds a WHERE enforce_hazmat_compliance NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHazmatComplianceNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHazmatComplianceNotIn(b.query, v)
	return b
}

// WhereEnforceDrugAndAlcoholComplianceEQ adds a WHERE enforce_drug_and_alcohol_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDrugAndAlcoholComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDrugAndAlcoholComplianceEQ(b.query, v)
	return b
}

// WhereEnforceDrugAndAlcoholComplianceNEQ adds a WHERE enforce_drug_and_alcohol_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDrugAndAlcoholComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDrugAndAlcoholComplianceNEQ(b.query, v)
	return b
}

// WhereEnforceDrugAndAlcoholComplianceIn adds a WHERE enforce_drug_and_alcohol_compliance IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDrugAndAlcoholComplianceIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDrugAndAlcoholComplianceIn(b.query, v)
	return b
}

// WhereEnforceDrugAndAlcoholComplianceNotIn adds a WHERE enforce_drug_and_alcohol_compliance NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDrugAndAlcoholComplianceNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDrugAndAlcoholComplianceNotIn(b.query, v)
	return b
}

// WhereTrackDetentionTimeEQ adds a WHERE track_detention_time = ? condition
func (b *ShipmentControlQueryBuilder) WhereTrackDetentionTimeEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackDetentionTimeEQ(b.query, v)
	return b
}

// WhereTrackDetentionTimeNEQ adds a WHERE track_detention_time != ? condition
func (b *ShipmentControlQueryBuilder) WhereTrackDetentionTimeNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackDetentionTimeNEQ(b.query, v)
	return b
}

// WhereTrackDetentionTimeIn adds a WHERE track_detention_time IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereTrackDetentionTimeIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackDetentionTimeIn(b.query, v)
	return b
}

// WhereTrackDetentionTimeNotIn adds a WHERE track_detention_time NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereTrackDetentionTimeNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackDetentionTimeNotIn(b.query, v)
	return b
}

// WhereAutoGenerateDetentionChargesEQ adds a WHERE auto_generate_detention_charges = ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoGenerateDetentionChargesEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoGenerateDetentionChargesEQ(b.query, v)
	return b
}

// WhereAutoGenerateDetentionChargesNEQ adds a WHERE auto_generate_detention_charges != ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoGenerateDetentionChargesNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoGenerateDetentionChargesNEQ(b.query, v)
	return b
}

// WhereAutoGenerateDetentionChargesIn adds a WHERE auto_generate_detention_charges IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAutoGenerateDetentionChargesIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoGenerateDetentionChargesIn(b.query, v)
	return b
}

// WhereAutoGenerateDetentionChargesNotIn adds a WHERE auto_generate_detention_charges NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAutoGenerateDetentionChargesNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoGenerateDetentionChargesNotIn(b.query, v)
	return b
}

// WhereTrackCustomerRejectionsEQ adds a WHERE track_customer_rejections = ? condition
func (b *ShipmentControlQueryBuilder) WhereTrackCustomerRejectionsEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackCustomerRejectionsEQ(b.query, v)
	return b
}

// WhereTrackCustomerRejectionsNEQ adds a WHERE track_customer_rejections != ? condition
func (b *ShipmentControlQueryBuilder) WhereTrackCustomerRejectionsNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackCustomerRejectionsNEQ(b.query, v)
	return b
}

// WhereTrackCustomerRejectionsIn adds a WHERE track_customer_rejections IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereTrackCustomerRejectionsIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackCustomerRejectionsIn(b.query, v)
	return b
}

// WhereTrackCustomerRejectionsNotIn adds a WHERE track_customer_rejections NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereTrackCustomerRejectionsNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackCustomerRejectionsNotIn(b.query, v)
	return b
}

// WhereCheckForDuplicateBOLsEQ adds a WHERE check_for_duplicate_bols = ? condition
func (b *ShipmentControlQueryBuilder) WhereCheckForDuplicateBOLsEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckForDuplicateBOLsEQ(b.query, v)
	return b
}

// WhereCheckForDuplicateBOLsNEQ adds a WHERE check_for_duplicate_bols != ? condition
func (b *ShipmentControlQueryBuilder) WhereCheckForDuplicateBOLsNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckForDuplicateBOLsNEQ(b.query, v)
	return b
}

// WhereCheckForDuplicateBOLsIn adds a WHERE check_for_duplicate_bols IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereCheckForDuplicateBOLsIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckForDuplicateBOLsIn(b.query, v)
	return b
}

// WhereCheckForDuplicateBOLsNotIn adds a WHERE check_for_duplicate_bols NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereCheckForDuplicateBOLsNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckForDuplicateBOLsNotIn(b.query, v)
	return b
}

// WhereAllowMoveRemovalsEQ adds a WHERE allow_move_removals = ? condition
func (b *ShipmentControlQueryBuilder) WhereAllowMoveRemovalsEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AllowMoveRemovalsEQ(b.query, v)
	return b
}

// WhereAllowMoveRemovalsNEQ adds a WHERE allow_move_removals != ? condition
func (b *ShipmentControlQueryBuilder) WhereAllowMoveRemovalsNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AllowMoveRemovalsNEQ(b.query, v)
	return b
}

// WhereAllowMoveRemovalsIn adds a WHERE allow_move_removals IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAllowMoveRemovalsIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AllowMoveRemovalsIn(b.query, v)
	return b
}

// WhereAllowMoveRemovalsNotIn adds a WHERE allow_move_removals NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereAllowMoveRemovalsNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AllowMoveRemovalsNotIn(b.query, v)
	return b
}

// WhereCheckHazmatSegregationEQ adds a WHERE check_hazmat_segregation = ? condition
func (b *ShipmentControlQueryBuilder) WhereCheckHazmatSegregationEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckHazmatSegregationEQ(b.query, v)
	return b
}

// WhereCheckHazmatSegregationNEQ adds a WHERE check_hazmat_segregation != ? condition
func (b *ShipmentControlQueryBuilder) WhereCheckHazmatSegregationNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckHazmatSegregationNEQ(b.query, v)
	return b
}

// WhereCheckHazmatSegregationIn adds a WHERE check_hazmat_segregation IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereCheckHazmatSegregationIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckHazmatSegregationIn(b.query, v)
	return b
}

// WhereCheckHazmatSegregationNotIn adds a WHERE check_hazmat_segregation NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereCheckHazmatSegregationNotIn(v []bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckHazmatSegregationNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionNEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionGT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionGTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionLT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionLTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereVersionIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereVersionNotIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtNEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtGT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtGTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtLT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtLTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtNotIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtNEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtGT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtGTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtLT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtLTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ShipmentControlQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ShipmentControlQueryBuilder) WhereGroup(sep string, fn func(*ShipmentControlQueryBuilder) *ShipmentControlQueryBuilder) *ShipmentControlQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ShipmentControlQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ShipmentControlQueryBuilder) Where(query string, args ...interface{}) *ShipmentControlQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ShipmentControlQueryBuilder) OrderBy(column string, desc ...bool) *ShipmentControlQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ShipmentControlQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ShipmentControlQueryBuilder) Limit(n int) *ShipmentControlQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ShipmentControlQueryBuilder) Offset(n int) *ShipmentControlQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ShipmentControlQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ShipmentControlQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ShipmentControlQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ShipmentControlQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ShipmentControlQueryBuilder) All(ctx context.Context) ([]*ShipmentControl, error) {
	var entities []*ShipmentControl
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ShipmentControlQueryBuilder) AllWithCount(ctx context.Context) ([]*ShipmentControl, int, error) {
	var entities []*ShipmentControl
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ShipmentControlQueryBuilder) One(ctx context.Context) (*ShipmentControl, error) {
	entity := new(ShipmentControl)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ShipmentControlQueryBuilder) First(ctx context.Context) (*ShipmentControl, error) {
	entity := new(ShipmentControl)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ShipmentControlBuild creates a chainable query builder
func ShipmentControlBuild(db bun.IDB) *ShipmentControlQueryBuilder {
	return NewShipmentControlQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *ShipmentControlQueryBuilder) LoadBusinessUnit() *ShipmentControlQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *ShipmentControlQueryBuilder) LoadOrganization() *ShipmentControlQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for ShipmentControl
func (b *ShipmentControlQueryBuilder) LoadAllRelations() *ShipmentControlQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	return b
}

// ShipmentControlRelationChain provides a fluent API for building nested relationship chains
type ShipmentControlRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewShipmentControlRelationChain creates a new relation chain builder
func NewShipmentControlRelationChain() *ShipmentControlRelationChain {
	return &ShipmentControlRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *ShipmentControlRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentControlRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *ShipmentControlRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *ShipmentControlRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *ShipmentControlQueryBuilder) WithBusinessUnit() *ShipmentControlRelationChainBuilder {
	chain := &ShipmentControlRelationChainBuilder{
		parent: b,
		chain:  NewShipmentControlRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *ShipmentControlQueryBuilder) WithOrganization() *ShipmentControlRelationChainBuilder {
	chain := &ShipmentControlRelationChainBuilder{
		parent: b,
		chain:  NewShipmentControlRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// ShipmentControlRelationChainBuilder provides fluent API for building nested relations
type ShipmentControlRelationChainBuilder struct {
	parent *ShipmentControlQueryBuilder
	chain  *ShipmentControlRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *ShipmentControlRelationChainBuilder) Load() *ShipmentControlQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *ShipmentControlRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentControlRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *ShipmentControlRelationChainBuilder) OrderBy(order string) *ShipmentControlRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *ShipmentControlRelationChainBuilder) Where(condition string, args ...interface{}) *ShipmentControlRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
