// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// shipmentControlFieldConfig provides field configuration for ShipmentControl
type shipmentControlFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ShipmentControlQuery provides type-safe query helpers and constants
var ShipmentControlQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                                   string
		BusinessUnitID                       string
		OrganizationID                       string
		ComplianceEnforcementLevel           string
		AutoAssignmentStrategy               string
		ServiceFailureGracePeriod            string
		AutoDelayShipmentsThreshold          string
		DetentionThreshold                   string
		OnTimeDeliveryTarget                 string
		ServiceFailureTarget                 string
		EnableAutoAssignment                 string
		RecordServiceFailures                string
		AutoDelayShipments                   string
		EnforceHOSCompliance                 string
		EnforceDriverQualificationCompliance string
		EnforceMedicalCertCompliance         string
		EnforceHazmatCompliance              string
		EnforceDrugAndAlcoholCompliance      string
		TrackDetentionTime                   string
		AutoGenerateDetentionCharges         string
		TrackCustomerRejections              string
		CheckForDuplicateBOLs                string
		AllowMoveRemovals                    string
		CheckHazmatSegregation               string
		Version                              string
		CreatedAt                            string
		UpdatedAt                            string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ComplianceEnforcementLevelEQ            func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery
		ComplianceEnforcementLevelNEQ           func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery
		AutoAssignmentStrategyEQ                func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery
		AutoAssignmentStrategyNEQ               func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery
		ServiceFailureGracePeriodEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		ServiceFailureGracePeriodNEQ            func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		ServiceFailureGracePeriodIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureGracePeriodIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		AutoDelayShipmentsThresholdEQ           func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdNEQ          func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		AutoDelayShipmentsThresholdIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		DetentionThresholdEQ                    func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		DetentionThresholdNEQ                   func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		DetentionThresholdIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		DetentionThresholdIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		OnTimeDeliveryTargetEQ                  func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		OnTimeDeliveryTargetNEQ                 func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		OnTimeDeliveryTargetIsNull              func(q *bun.SelectQuery) *bun.SelectQuery
		OnTimeDeliveryTargetIsNotNull           func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureTargetEQ                  func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		ServiceFailureTargetNEQ                 func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		ServiceFailureTargetIsNull              func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureTargetIsNotNull           func(q *bun.SelectQuery) *bun.SelectQuery
		EnableAutoAssignmentEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnableAutoAssignmentNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RecordServiceFailuresEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RecordServiceFailuresNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoDelayShipmentsEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoDelayShipmentsNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHOSComplianceEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHOSComplianceNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceNEQ func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceMedicalCertComplianceEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceMedicalCertComplianceNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHazmatComplianceEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHazmatComplianceNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceNEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackDetentionTimeEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackDetentionTimeNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoGenerateDetentionChargesEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoGenerateDetentionChargesNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackCustomerRejectionsEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackCustomerRejectionsNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckForDuplicateBOLsEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckForDuplicateBOLsNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowMoveRemovalsEQ                     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowMoveRemovalsNEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckHazmatSegregationEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckHazmatSegregationNEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]shipmentControlFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "shipment_controls",
	Alias:    "sc",
	IDPrefix: "sc_",

	// Field names
	Field: struct {
		ID                                   string
		BusinessUnitID                       string
		OrganizationID                       string
		ComplianceEnforcementLevel           string
		AutoAssignmentStrategy               string
		ServiceFailureGracePeriod            string
		AutoDelayShipmentsThreshold          string
		DetentionThreshold                   string
		OnTimeDeliveryTarget                 string
		ServiceFailureTarget                 string
		EnableAutoAssignment                 string
		RecordServiceFailures                string
		AutoDelayShipments                   string
		EnforceHOSCompliance                 string
		EnforceDriverQualificationCompliance string
		EnforceMedicalCertCompliance         string
		EnforceHazmatCompliance              string
		EnforceDrugAndAlcoholCompliance      string
		TrackDetentionTime                   string
		AutoGenerateDetentionCharges         string
		TrackCustomerRejections              string
		CheckForDuplicateBOLs                string
		AllowMoveRemovals                    string
		CheckHazmatSegregation               string
		Version                              string
		CreatedAt                            string
		UpdatedAt                            string
	}{
		ID:                                   "id",
		BusinessUnitID:                       "business_unit_id",
		OrganizationID:                       "organization_id",
		ComplianceEnforcementLevel:           "compliance_enforcement_level",
		AutoAssignmentStrategy:               "auto_assignment_strategy",
		ServiceFailureGracePeriod:            "service_failure_grace_period",
		AutoDelayShipmentsThreshold:          "auto_delay_shipments_threshold",
		DetentionThreshold:                   "detention_threshold",
		OnTimeDeliveryTarget:                 "on_time_delivery_target",
		ServiceFailureTarget:                 "service_failure_target",
		EnableAutoAssignment:                 "enable_auto_assignment",
		RecordServiceFailures:                "record_service_failures",
		AutoDelayShipments:                   "auto_delay_shipments",
		EnforceHOSCompliance:                 "enforce_hos_compliance",
		EnforceDriverQualificationCompliance: "enforce_driver_qualification_compliance",
		EnforceMedicalCertCompliance:         "enforce_medical_cert_compliance",
		EnforceHazmatCompliance:              "enforce_hazmat_compliance",
		EnforceDrugAndAlcoholCompliance:      "enforce_drug_and_alcohol_compliance",
		TrackDetentionTime:                   "track_detention_time",
		AutoGenerateDetentionCharges:         "auto_generate_detention_charges",
		TrackCustomerRejections:              "track_customer_rejections",
		CheckForDuplicateBOLs:                "check_for_duplicate_bols",
		AllowMoveRemovals:                    "allow_move_removals",
		CheckHazmatSegregation:               "check_hazmat_segregation",
		Version:                              "version",
		CreatedAt:                            "created_at",
		UpdatedAt:                            "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "sc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "sc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ComplianceEnforcementLevelEQ            func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery
		ComplianceEnforcementLevelNEQ           func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery
		AutoAssignmentStrategyEQ                func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery
		AutoAssignmentStrategyNEQ               func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery
		ServiceFailureGracePeriodEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		ServiceFailureGracePeriodNEQ            func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		ServiceFailureGracePeriodIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureGracePeriodIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		AutoDelayShipmentsThresholdEQ           func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdNEQ          func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		AutoDelayShipmentsThresholdIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		AutoDelayShipmentsThresholdIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		DetentionThresholdEQ                    func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		DetentionThresholdNEQ                   func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		DetentionThresholdIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		DetentionThresholdIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		OnTimeDeliveryTargetEQ                  func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		OnTimeDeliveryTargetNEQ                 func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		OnTimeDeliveryTargetIsNull              func(q *bun.SelectQuery) *bun.SelectQuery
		OnTimeDeliveryTargetIsNotNull           func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureTargetEQ                  func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		ServiceFailureTargetNEQ                 func(q *bun.SelectQuery, v *float32) *bun.SelectQuery
		ServiceFailureTargetIsNull              func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceFailureTargetIsNotNull           func(q *bun.SelectQuery) *bun.SelectQuery
		EnableAutoAssignmentEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnableAutoAssignmentNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RecordServiceFailuresEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RecordServiceFailuresNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoDelayShipmentsEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoDelayShipmentsNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHOSComplianceEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHOSComplianceNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDriverQualificationComplianceNEQ func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceMedicalCertComplianceEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceMedicalCertComplianceNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHazmatComplianceEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceHazmatComplianceNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceDrugAndAlcoholComplianceNEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackDetentionTimeEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackDetentionTimeNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoGenerateDetentionChargesEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoGenerateDetentionChargesNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackCustomerRejectionsEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		TrackCustomerRejectionsNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckForDuplicateBOLsEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckForDuplicateBOLsNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowMoveRemovalsEQ                     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowMoveRemovalsNEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckHazmatSegregationEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CheckHazmatSegregationNEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                                  func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.organization_id"), v)
		},
		ComplianceEnforcementLevelEQ: func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.compliance_enforcement_level"), v)
		},
		ComplianceEnforcementLevelNEQ: func(q *bun.SelectQuery, v ComplianceEnforcementLevel) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.compliance_enforcement_level"), v)
		},
		AutoAssignmentStrategyEQ: func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.auto_assignment_strategy"), v)
		},
		AutoAssignmentStrategyNEQ: func(q *bun.SelectQuery, v AutoAssignmentStrategy) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.auto_assignment_strategy"), v)
		},
		ServiceFailureGracePeriodEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.service_failure_grace_period"), v)
		},
		ServiceFailureGracePeriodNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.service_failure_grace_period"), v)
		},
		ServiceFailureGracePeriodIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.service_failure_grace_period"))
		},
		ServiceFailureGracePeriodIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.service_failure_grace_period"))
		},
		AutoDelayShipmentsThresholdEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.auto_delay_shipments_threshold"), v)
		},
		AutoDelayShipmentsThresholdNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.auto_delay_shipments_threshold"), v)
		},
		AutoDelayShipmentsThresholdIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.auto_delay_shipments_threshold"))
		},
		AutoDelayShipmentsThresholdIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.auto_delay_shipments_threshold"))
		},
		DetentionThresholdEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.detention_threshold"), v)
		},
		DetentionThresholdNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.detention_threshold"), v)
		},
		DetentionThresholdIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.detention_threshold"))
		},
		DetentionThresholdIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.detention_threshold"))
		},
		OnTimeDeliveryTargetEQ: func(q *bun.SelectQuery, v *float32) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.on_time_delivery_target"), v)
		},
		OnTimeDeliveryTargetNEQ: func(q *bun.SelectQuery, v *float32) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.on_time_delivery_target"), v)
		},
		OnTimeDeliveryTargetIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.on_time_delivery_target"))
		},
		OnTimeDeliveryTargetIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.on_time_delivery_target"))
		},
		ServiceFailureTargetEQ: func(q *bun.SelectQuery, v *float32) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.service_failure_target"), v)
		},
		ServiceFailureTargetNEQ: func(q *bun.SelectQuery, v *float32) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.service_failure_target"), v)
		},
		ServiceFailureTargetIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sc.service_failure_target"))
		},
		ServiceFailureTargetIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sc.service_failure_target"))
		},
		EnableAutoAssignmentEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enable_auto_assignment"), v)
		},
		EnableAutoAssignmentNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enable_auto_assignment"), v)
		},
		RecordServiceFailuresEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.record_service_failures"), v)
		},
		RecordServiceFailuresNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.record_service_failures"), v)
		},
		AutoDelayShipmentsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.auto_delay_shipments"), v)
		},
		AutoDelayShipmentsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.auto_delay_shipments"), v)
		},
		EnforceHOSComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_hos_compliance"), v)
		},
		EnforceHOSComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_hos_compliance"), v)
		},
		EnforceDriverQualificationComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_driver_qualification_compliance"), v)
		},
		EnforceDriverQualificationComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_driver_qualification_compliance"), v)
		},
		EnforceMedicalCertComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_medical_cert_compliance"), v)
		},
		EnforceMedicalCertComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_medical_cert_compliance"), v)
		},
		EnforceHazmatComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_hazmat_compliance"), v)
		},
		EnforceHazmatComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_hazmat_compliance"), v)
		},
		EnforceDrugAndAlcoholComplianceEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.enforce_drug_and_alcohol_compliance"), v)
		},
		EnforceDrugAndAlcoholComplianceNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.enforce_drug_and_alcohol_compliance"), v)
		},
		TrackDetentionTimeEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.track_detention_time"), v)
		},
		TrackDetentionTimeNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.track_detention_time"), v)
		},
		AutoGenerateDetentionChargesEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.auto_generate_detention_charges"), v)
		},
		AutoGenerateDetentionChargesNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.auto_generate_detention_charges"), v)
		},
		TrackCustomerRejectionsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.track_customer_rejections"), v)
		},
		TrackCustomerRejectionsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.track_customer_rejections"), v)
		},
		CheckForDuplicateBOLsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.check_for_duplicate_bols"), v)
		},
		CheckForDuplicateBOLsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.check_for_duplicate_bols"), v)
		},
		AllowMoveRemovalsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.allow_move_removals"), v)
		},
		AllowMoveRemovalsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.allow_move_removals"), v)
		},
		CheckHazmatSegregationEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.check_hazmat_segregation"), v)
		},
		CheckHazmatSegregationNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.check_hazmat_segregation"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("sc.organization_id"), orgID).
				Where("? = ?", bun.Ident("sc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("sc.id"), id).
				Where("? = ?", bun.Ident("sc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "sc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"sc.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "sc.created_at DESC"
			}
			return "sc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "sc.updated_at DESC"
			}
			return "sc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]shipmentControlFieldConfig {
		return map[string]shipmentControlFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"compliance_enforcement_level": {
				Name:       "compliance_enforcement_level",
				Column:     "sc.compliance_enforcement_level",
				Sortable:   false,
				Filterable: false,
			},
			"auto_assignment_strategy": {
				Name:       "auto_assignment_strategy",
				Column:     "sc.auto_assignment_strategy",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_grace_period": {
				Name:       "service_failure_grace_period",
				Column:     "sc.service_failure_grace_period",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments_threshold": {
				Name:       "auto_delay_shipments_threshold",
				Column:     "sc.auto_delay_shipments_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"detention_threshold": {
				Name:       "detention_threshold",
				Column:     "sc.detention_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"on_time_delivery_target": {
				Name:       "on_time_delivery_target",
				Column:     "sc.on_time_delivery_target",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_target": {
				Name:       "service_failure_target",
				Column:     "sc.service_failure_target",
				Sortable:   false,
				Filterable: false,
			},
			"enable_auto_assignment": {
				Name:       "enable_auto_assignment",
				Column:     "sc.enable_auto_assignment",
				Sortable:   false,
				Filterable: false,
			},
			"record_service_failures": {
				Name:       "record_service_failures",
				Column:     "sc.record_service_failures",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments": {
				Name:       "auto_delay_shipments",
				Column:     "sc.auto_delay_shipments",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hos_compliance": {
				Name:       "enforce_hos_compliance",
				Column:     "sc.enforce_hos_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_driver_qualification_compliance": {
				Name:       "enforce_driver_qualification_compliance",
				Column:     "sc.enforce_driver_qualification_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_medical_cert_compliance": {
				Name:       "enforce_medical_cert_compliance",
				Column:     "sc.enforce_medical_cert_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hazmat_compliance": {
				Name:       "enforce_hazmat_compliance",
				Column:     "sc.enforce_hazmat_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_drug_and_alcohol_compliance": {
				Name:       "enforce_drug_and_alcohol_compliance",
				Column:     "sc.enforce_drug_and_alcohol_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"track_detention_time": {
				Name:       "track_detention_time",
				Column:     "sc.track_detention_time",
				Sortable:   false,
				Filterable: false,
			},
			"auto_generate_detention_charges": {
				Name:       "auto_generate_detention_charges",
				Column:     "sc.auto_generate_detention_charges",
				Sortable:   false,
				Filterable: false,
			},
			"track_customer_rejections": {
				Name:       "track_customer_rejections",
				Column:     "sc.track_customer_rejections",
				Sortable:   false,
				Filterable: false,
			},
			"check_for_duplicate_bols": {
				Name:       "check_for_duplicate_bols",
				Column:     "sc.check_for_duplicate_bols",
				Sortable:   false,
				Filterable: false,
			},
			"allow_move_removals": {
				Name:       "allow_move_removals",
				Column:     "sc.allow_move_removals",
				Sortable:   false,
				Filterable: false,
			},
			"check_hazmat_segregation": {
				Name:       "check_hazmat_segregation",
				Column:     "sc.check_hazmat_segregation",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]shipmentControlFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"compliance_enforcement_level": {
				Name:       "compliance_enforcement_level",
				Column:     "sc.compliance_enforcement_level",
				Sortable:   false,
				Filterable: false,
			},
			"auto_assignment_strategy": {
				Name:       "auto_assignment_strategy",
				Column:     "sc.auto_assignment_strategy",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_grace_period": {
				Name:       "service_failure_grace_period",
				Column:     "sc.service_failure_grace_period",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments_threshold": {
				Name:       "auto_delay_shipments_threshold",
				Column:     "sc.auto_delay_shipments_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"detention_threshold": {
				Name:       "detention_threshold",
				Column:     "sc.detention_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"on_time_delivery_target": {
				Name:       "on_time_delivery_target",
				Column:     "sc.on_time_delivery_target",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_target": {
				Name:       "service_failure_target",
				Column:     "sc.service_failure_target",
				Sortable:   false,
				Filterable: false,
			},
			"enable_auto_assignment": {
				Name:       "enable_auto_assignment",
				Column:     "sc.enable_auto_assignment",
				Sortable:   false,
				Filterable: false,
			},
			"record_service_failures": {
				Name:       "record_service_failures",
				Column:     "sc.record_service_failures",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments": {
				Name:       "auto_delay_shipments",
				Column:     "sc.auto_delay_shipments",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hos_compliance": {
				Name:       "enforce_hos_compliance",
				Column:     "sc.enforce_hos_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_driver_qualification_compliance": {
				Name:       "enforce_driver_qualification_compliance",
				Column:     "sc.enforce_driver_qualification_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_medical_cert_compliance": {
				Name:       "enforce_medical_cert_compliance",
				Column:     "sc.enforce_medical_cert_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hazmat_compliance": {
				Name:       "enforce_hazmat_compliance",
				Column:     "sc.enforce_hazmat_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_drug_and_alcohol_compliance": {
				Name:       "enforce_drug_and_alcohol_compliance",
				Column:     "sc.enforce_drug_and_alcohol_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"track_detention_time": {
				Name:       "track_detention_time",
				Column:     "sc.track_detention_time",
				Sortable:   false,
				Filterable: false,
			},
			"auto_generate_detention_charges": {
				Name:       "auto_generate_detention_charges",
				Column:     "sc.auto_generate_detention_charges",
				Sortable:   false,
				Filterable: false,
			},
			"track_customer_rejections": {
				Name:       "track_customer_rejections",
				Column:     "sc.track_customer_rejections",
				Sortable:   false,
				Filterable: false,
			},
			"check_for_duplicate_bols": {
				Name:       "check_for_duplicate_bols",
				Column:     "sc.check_for_duplicate_bols",
				Sortable:   false,
				Filterable: false,
			},
			"allow_move_removals": {
				Name:       "allow_move_removals",
				Column:     "sc.allow_move_removals",
				Sortable:   false,
				Filterable: false,
			},
			"check_hazmat_segregation": {
				Name:       "check_hazmat_segregation",
				Column:     "sc.check_hazmat_segregation",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]shipmentControlFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"compliance_enforcement_level": {
				Name:       "compliance_enforcement_level",
				Column:     "sc.compliance_enforcement_level",
				Sortable:   false,
				Filterable: false,
			},
			"auto_assignment_strategy": {
				Name:       "auto_assignment_strategy",
				Column:     "sc.auto_assignment_strategy",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_grace_period": {
				Name:       "service_failure_grace_period",
				Column:     "sc.service_failure_grace_period",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments_threshold": {
				Name:       "auto_delay_shipments_threshold",
				Column:     "sc.auto_delay_shipments_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"detention_threshold": {
				Name:       "detention_threshold",
				Column:     "sc.detention_threshold",
				Sortable:   false,
				Filterable: false,
			},
			"on_time_delivery_target": {
				Name:       "on_time_delivery_target",
				Column:     "sc.on_time_delivery_target",
				Sortable:   false,
				Filterable: false,
			},
			"service_failure_target": {
				Name:       "service_failure_target",
				Column:     "sc.service_failure_target",
				Sortable:   false,
				Filterable: false,
			},
			"enable_auto_assignment": {
				Name:       "enable_auto_assignment",
				Column:     "sc.enable_auto_assignment",
				Sortable:   false,
				Filterable: false,
			},
			"record_service_failures": {
				Name:       "record_service_failures",
				Column:     "sc.record_service_failures",
				Sortable:   false,
				Filterable: false,
			},
			"auto_delay_shipments": {
				Name:       "auto_delay_shipments",
				Column:     "sc.auto_delay_shipments",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hos_compliance": {
				Name:       "enforce_hos_compliance",
				Column:     "sc.enforce_hos_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_driver_qualification_compliance": {
				Name:       "enforce_driver_qualification_compliance",
				Column:     "sc.enforce_driver_qualification_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_medical_cert_compliance": {
				Name:       "enforce_medical_cert_compliance",
				Column:     "sc.enforce_medical_cert_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_hazmat_compliance": {
				Name:       "enforce_hazmat_compliance",
				Column:     "sc.enforce_hazmat_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_drug_and_alcohol_compliance": {
				Name:       "enforce_drug_and_alcohol_compliance",
				Column:     "sc.enforce_drug_and_alcohol_compliance",
				Sortable:   false,
				Filterable: false,
			},
			"track_detention_time": {
				Name:       "track_detention_time",
				Column:     "sc.track_detention_time",
				Sortable:   false,
				Filterable: false,
			},
			"auto_generate_detention_charges": {
				Name:       "auto_generate_detention_charges",
				Column:     "sc.auto_generate_detention_charges",
				Sortable:   false,
				Filterable: false,
			},
			"track_customer_rejections": {
				Name:       "track_customer_rejections",
				Column:     "sc.track_customer_rejections",
				Sortable:   false,
				Filterable: false,
			},
			"check_for_duplicate_bols": {
				Name:       "check_for_duplicate_bols",
				Column:     "sc.check_for_duplicate_bols",
				Sortable:   false,
				Filterable: false,
			},
			"allow_move_removals": {
				Name:       "allow_move_removals",
				Column:     "sc.allow_move_removals",
				Sortable:   false,
				Filterable: false,
			},
			"check_hazmat_segregation": {
				Name:       "check_hazmat_segregation",
				Column:     "sc.check_hazmat_segregation",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// ShipmentControlQueryBuilder provides a fluent interface for building queries
type ShipmentControlQueryBuilder struct {
	query *bun.SelectQuery
}

// NewShipmentControlQuery creates a new query builder
func NewShipmentControlQuery(db bun.IDB) *ShipmentControlQueryBuilder {
	return &ShipmentControlQueryBuilder{
		query: db.NewSelect().Model((*ShipmentControl)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ShipmentControlFromQuery(q *bun.SelectQuery) *ShipmentControlQueryBuilder {
	return &ShipmentControlQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ShipmentControlQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ShipmentControlQueryBuilder) Model(model interface{}) *ShipmentControlQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ShipmentControlQueryBuilder) WhereIDEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ShipmentControlQueryBuilder) WhereIDNEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ShipmentControlQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ShipmentControlQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ShipmentControlQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ShipmentControlQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereComplianceEnforcementLevelEQ adds a WHERE compliance_enforcement_level = ? condition
func (b *ShipmentControlQueryBuilder) WhereComplianceEnforcementLevelEQ(v ComplianceEnforcementLevel) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ComplianceEnforcementLevelEQ(b.query, v)
	return b
}

// WhereComplianceEnforcementLevelNEQ adds a WHERE compliance_enforcement_level != ? condition
func (b *ShipmentControlQueryBuilder) WhereComplianceEnforcementLevelNEQ(v ComplianceEnforcementLevel) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ComplianceEnforcementLevelNEQ(b.query, v)
	return b
}

// WhereAutoAssignmentStrategyEQ adds a WHERE auto_assignment_strategy = ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoAssignmentStrategyEQ(v AutoAssignmentStrategy) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoAssignmentStrategyEQ(b.query, v)
	return b
}

// WhereAutoAssignmentStrategyNEQ adds a WHERE auto_assignment_strategy != ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoAssignmentStrategyNEQ(v AutoAssignmentStrategy) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoAssignmentStrategyNEQ(b.query, v)
	return b
}

// WhereServiceFailureGracePeriodEQ adds a WHERE service_failure_grace_period = ? condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureGracePeriodEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureGracePeriodEQ(b.query, v)
	return b
}

// WhereServiceFailureGracePeriodNEQ adds a WHERE service_failure_grace_period != ? condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureGracePeriodNEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureGracePeriodNEQ(b.query, v)
	return b
}

// WhereAutoDelayShipmentsThresholdEQ adds a WHERE auto_delay_shipments_threshold = ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsThresholdEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsThresholdEQ(b.query, v)
	return b
}

// WhereAutoDelayShipmentsThresholdNEQ adds a WHERE auto_delay_shipments_threshold != ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsThresholdNEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsThresholdNEQ(b.query, v)
	return b
}

// WhereDetentionThresholdEQ adds a WHERE detention_threshold = ? condition
func (b *ShipmentControlQueryBuilder) WhereDetentionThresholdEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.DetentionThresholdEQ(b.query, v)
	return b
}

// WhereDetentionThresholdNEQ adds a WHERE detention_threshold != ? condition
func (b *ShipmentControlQueryBuilder) WhereDetentionThresholdNEQ(v *int16) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.DetentionThresholdNEQ(b.query, v)
	return b
}

// WhereOnTimeDeliveryTargetEQ adds a WHERE on_time_delivery_target = ? condition
func (b *ShipmentControlQueryBuilder) WhereOnTimeDeliveryTargetEQ(v *float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OnTimeDeliveryTargetEQ(b.query, v)
	return b
}

// WhereOnTimeDeliveryTargetNEQ adds a WHERE on_time_delivery_target != ? condition
func (b *ShipmentControlQueryBuilder) WhereOnTimeDeliveryTargetNEQ(v *float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.OnTimeDeliveryTargetNEQ(b.query, v)
	return b
}

// WhereServiceFailureTargetEQ adds a WHERE service_failure_target = ? condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureTargetEQ(v *float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureTargetEQ(b.query, v)
	return b
}

// WhereServiceFailureTargetNEQ adds a WHERE service_failure_target != ? condition
func (b *ShipmentControlQueryBuilder) WhereServiceFailureTargetNEQ(v *float32) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.ServiceFailureTargetNEQ(b.query, v)
	return b
}

// WhereEnableAutoAssignmentEQ adds a WHERE enable_auto_assignment = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnableAutoAssignmentEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnableAutoAssignmentEQ(b.query, v)
	return b
}

// WhereEnableAutoAssignmentNEQ adds a WHERE enable_auto_assignment != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnableAutoAssignmentNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnableAutoAssignmentNEQ(b.query, v)
	return b
}

// WhereRecordServiceFailuresEQ adds a WHERE record_service_failures = ? condition
func (b *ShipmentControlQueryBuilder) WhereRecordServiceFailuresEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.RecordServiceFailuresEQ(b.query, v)
	return b
}

// WhereRecordServiceFailuresNEQ adds a WHERE record_service_failures != ? condition
func (b *ShipmentControlQueryBuilder) WhereRecordServiceFailuresNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.RecordServiceFailuresNEQ(b.query, v)
	return b
}

// WhereAutoDelayShipmentsEQ adds a WHERE auto_delay_shipments = ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsEQ(b.query, v)
	return b
}

// WhereAutoDelayShipmentsNEQ adds a WHERE auto_delay_shipments != ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoDelayShipmentsNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoDelayShipmentsNEQ(b.query, v)
	return b
}

// WhereEnforceHOSComplianceEQ adds a WHERE enforce_hos_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHOSComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHOSComplianceEQ(b.query, v)
	return b
}

// WhereEnforceHOSComplianceNEQ adds a WHERE enforce_hos_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHOSComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHOSComplianceNEQ(b.query, v)
	return b
}

// WhereEnforceDriverQualificationComplianceEQ adds a WHERE enforce_driver_qualification_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDriverQualificationComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDriverQualificationComplianceEQ(b.query, v)
	return b
}

// WhereEnforceDriverQualificationComplianceNEQ adds a WHERE enforce_driver_qualification_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDriverQualificationComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDriverQualificationComplianceNEQ(b.query, v)
	return b
}

// WhereEnforceMedicalCertComplianceEQ adds a WHERE enforce_medical_cert_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceMedicalCertComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceMedicalCertComplianceEQ(b.query, v)
	return b
}

// WhereEnforceMedicalCertComplianceNEQ adds a WHERE enforce_medical_cert_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceMedicalCertComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceMedicalCertComplianceNEQ(b.query, v)
	return b
}

// WhereEnforceHazmatComplianceEQ adds a WHERE enforce_hazmat_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHazmatComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHazmatComplianceEQ(b.query, v)
	return b
}

// WhereEnforceHazmatComplianceNEQ adds a WHERE enforce_hazmat_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceHazmatComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceHazmatComplianceNEQ(b.query, v)
	return b
}

// WhereEnforceDrugAndAlcoholComplianceEQ adds a WHERE enforce_drug_and_alcohol_compliance = ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDrugAndAlcoholComplianceEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDrugAndAlcoholComplianceEQ(b.query, v)
	return b
}

// WhereEnforceDrugAndAlcoholComplianceNEQ adds a WHERE enforce_drug_and_alcohol_compliance != ? condition
func (b *ShipmentControlQueryBuilder) WhereEnforceDrugAndAlcoholComplianceNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.EnforceDrugAndAlcoholComplianceNEQ(b.query, v)
	return b
}

// WhereTrackDetentionTimeEQ adds a WHERE track_detention_time = ? condition
func (b *ShipmentControlQueryBuilder) WhereTrackDetentionTimeEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackDetentionTimeEQ(b.query, v)
	return b
}

// WhereTrackDetentionTimeNEQ adds a WHERE track_detention_time != ? condition
func (b *ShipmentControlQueryBuilder) WhereTrackDetentionTimeNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackDetentionTimeNEQ(b.query, v)
	return b
}

// WhereAutoGenerateDetentionChargesEQ adds a WHERE auto_generate_detention_charges = ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoGenerateDetentionChargesEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoGenerateDetentionChargesEQ(b.query, v)
	return b
}

// WhereAutoGenerateDetentionChargesNEQ adds a WHERE auto_generate_detention_charges != ? condition
func (b *ShipmentControlQueryBuilder) WhereAutoGenerateDetentionChargesNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AutoGenerateDetentionChargesNEQ(b.query, v)
	return b
}

// WhereTrackCustomerRejectionsEQ adds a WHERE track_customer_rejections = ? condition
func (b *ShipmentControlQueryBuilder) WhereTrackCustomerRejectionsEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackCustomerRejectionsEQ(b.query, v)
	return b
}

// WhereTrackCustomerRejectionsNEQ adds a WHERE track_customer_rejections != ? condition
func (b *ShipmentControlQueryBuilder) WhereTrackCustomerRejectionsNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.TrackCustomerRejectionsNEQ(b.query, v)
	return b
}

// WhereCheckForDuplicateBOLsEQ adds a WHERE check_for_duplicate_bols = ? condition
func (b *ShipmentControlQueryBuilder) WhereCheckForDuplicateBOLsEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckForDuplicateBOLsEQ(b.query, v)
	return b
}

// WhereCheckForDuplicateBOLsNEQ adds a WHERE check_for_duplicate_bols != ? condition
func (b *ShipmentControlQueryBuilder) WhereCheckForDuplicateBOLsNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckForDuplicateBOLsNEQ(b.query, v)
	return b
}

// WhereAllowMoveRemovalsEQ adds a WHERE allow_move_removals = ? condition
func (b *ShipmentControlQueryBuilder) WhereAllowMoveRemovalsEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AllowMoveRemovalsEQ(b.query, v)
	return b
}

// WhereAllowMoveRemovalsNEQ adds a WHERE allow_move_removals != ? condition
func (b *ShipmentControlQueryBuilder) WhereAllowMoveRemovalsNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.AllowMoveRemovalsNEQ(b.query, v)
	return b
}

// WhereCheckHazmatSegregationEQ adds a WHERE check_hazmat_segregation = ? condition
func (b *ShipmentControlQueryBuilder) WhereCheckHazmatSegregationEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckHazmatSegregationEQ(b.query, v)
	return b
}

// WhereCheckHazmatSegregationNEQ adds a WHERE check_hazmat_segregation != ? condition
func (b *ShipmentControlQueryBuilder) WhereCheckHazmatSegregationNEQ(v bool) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CheckHazmatSegregationNEQ(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionNEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionGT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionGTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionLT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ShipmentControlQueryBuilder) WhereVersionLTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereVersionIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereVersionNotIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtNEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtGT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtGTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtLT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtLTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereCreatedAtNotIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtNEQ(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtGT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtGTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtLT(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtLTE(v int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ShipmentControlQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ShipmentControlQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ShipmentControlQueryBuilder {
	b.query = ShipmentControlQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ShipmentControlQueryBuilder) WhereGroup(sep string, fn func(*ShipmentControlQueryBuilder) *ShipmentControlQueryBuilder) *ShipmentControlQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ShipmentControlQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ShipmentControlQueryBuilder) Where(query string, args ...interface{}) *ShipmentControlQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ShipmentControlQueryBuilder) OrderBy(column string, desc ...bool) *ShipmentControlQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ShipmentControlQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ShipmentControlQueryBuilder) Limit(n int) *ShipmentControlQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ShipmentControlQueryBuilder) Offset(n int) *ShipmentControlQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ShipmentControlQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ShipmentControlQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ShipmentControlQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ShipmentControlQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ShipmentControlQueryBuilder) All(ctx context.Context) ([]*ShipmentControl, error) {
	var entities []*ShipmentControl
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ShipmentControlQueryBuilder) AllWithCount(ctx context.Context) ([]*ShipmentControl, int, error) {
	var entities []*ShipmentControl
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ShipmentControlQueryBuilder) One(ctx context.Context) (*ShipmentControl, error) {
	entity := new(ShipmentControl)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ShipmentControlQueryBuilder) First(ctx context.Context) (*ShipmentControl, error) {
	entity := new(ShipmentControl)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ShipmentControlBuild creates a chainable query builder
func ShipmentControlBuild(db bun.IDB) *ShipmentControlQueryBuilder {
	return NewShipmentControlQuery(db)
}
