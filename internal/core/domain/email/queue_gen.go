// Code generated by gen-trenova. DO NOT EDIT.

package email

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// queueFieldConfig provides field configuration for Queue
type queueFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// QueueQuery provides type-safe query helpers and constants
var QueueQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                string
		OrganizationID    string
		BusinessUnitID    string
		ProfileID         string
		TemplateID        string
		ToAddresses       string
		CCAddresses       string
		BCCAddresses      string
		Subject           string
		HTMLBody          string
		TextBody          string
		Attachments       string
		Priority          string
		Status            string
		ScheduledAt       string
		SentAt            string
		ErrorMessage      string
		RetryCount        string
		TemplateVariables string
		Metadata          string
		CreatedAt         string
		UpdatedAt         string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ProfileIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ProfileIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		TemplateIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TemplateIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TemplateIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		TemplateIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		ToAddressesEQ         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ToAddressesNEQ        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CCAddressesEQ         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CCAddressesNEQ        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BCCAddressesEQ        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BCCAddressesNEQ       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HTMLBodyNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HTMLBodyGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TextBodyNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TextBodyGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentsEQ         func(q *bun.SelectQuery, v []AttachmentMeta) *bun.SelectQuery
		AttachmentsNEQ        func(q *bun.SelectQuery, v []AttachmentMeta) *bun.SelectQuery
		PriorityEQ            func(q *bun.SelectQuery, v Priority) *bun.SelectQuery
		PriorityNEQ           func(q *bun.SelectQuery, v Priority) *bun.SelectQuery
		StatusEQ              func(q *bun.SelectQuery, v QueueStatus) *bun.SelectQuery
		StatusNEQ             func(q *bun.SelectQuery, v QueueStatus) *bun.SelectQuery
		ScheduledAtEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ScheduledAtNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ScheduledAtIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		ScheduledAtIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		SentAtEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		SentAtNEQ             func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		SentAtIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		SentAtIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ErrorMessageEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ErrorMessageNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ErrorMessageGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RetryCountEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TemplateVariablesEQ   func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		TemplateVariablesNEQ  func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataEQ            func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ           func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]queueFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "email_queues",
	Alias:    "eq",
	IDPrefix: "eq_",

	// Field names
	Field: struct {
		ID                string
		OrganizationID    string
		BusinessUnitID    string
		ProfileID         string
		TemplateID        string
		ToAddresses       string
		CCAddresses       string
		BCCAddresses      string
		Subject           string
		HTMLBody          string
		TextBody          string
		Attachments       string
		Priority          string
		Status            string
		ScheduledAt       string
		SentAt            string
		ErrorMessage      string
		RetryCount        string
		TemplateVariables string
		Metadata          string
		CreatedAt         string
		UpdatedAt         string
	}{
		ID:                "id",
		OrganizationID:    "organization_id",
		BusinessUnitID:    "business_unit_id",
		ProfileID:         "profile_id",
		TemplateID:        "template_id",
		ToAddresses:       "to_addresses",
		CCAddresses:       "cc_addresses",
		BCCAddresses:      "bcc_addresses",
		Subject:           "subject",
		HTMLBody:          "html_body",
		TextBody:          "text_body",
		Attachments:       "attachments",
		Priority:          "priority",
		Status:            "status",
		ScheduledAt:       "scheduled_at",
		SentAt:            "sent_at",
		ErrorMessage:      "error_message",
		RetryCount:        "retry_count",
		TemplateVariables: "template_variables",
		Metadata:          "metadata",
		CreatedAt:         "created_at",
		UpdatedAt:         "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "eq." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "eq." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ProfileIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ProfileIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		TemplateIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TemplateIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TemplateIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		TemplateIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		ToAddressesEQ         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ToAddressesNEQ        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CCAddressesEQ         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CCAddressesNEQ        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BCCAddressesEQ        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BCCAddressesNEQ       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HTMLBodyNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HTMLBodyGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLBodyHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TextBodyNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TextBodyGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextBodyHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentsEQ         func(q *bun.SelectQuery, v []AttachmentMeta) *bun.SelectQuery
		AttachmentsNEQ        func(q *bun.SelectQuery, v []AttachmentMeta) *bun.SelectQuery
		PriorityEQ            func(q *bun.SelectQuery, v Priority) *bun.SelectQuery
		PriorityNEQ           func(q *bun.SelectQuery, v Priority) *bun.SelectQuery
		StatusEQ              func(q *bun.SelectQuery, v QueueStatus) *bun.SelectQuery
		StatusNEQ             func(q *bun.SelectQuery, v QueueStatus) *bun.SelectQuery
		ScheduledAtEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ScheduledAtNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ScheduledAtIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		ScheduledAtIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		SentAtEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		SentAtNEQ             func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		SentAtIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		SentAtIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ErrorMessageEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ErrorMessageNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ErrorMessageGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ErrorMessageHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RetryCountEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TemplateVariablesEQ   func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		TemplateVariablesNEQ  func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataEQ            func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ           func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.organization_id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.business_unit_id"), v)
		},
		ProfileIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.profile_id"), v)
		},
		ProfileIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.profile_id"), v)
		},
		TemplateIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.template_id"), v)
		},
		TemplateIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.template_id"), v)
		},
		TemplateIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("eq.template_id"))
		},
		TemplateIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("eq.template_id"))
		},
		ToAddressesEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.to_addresses"), v)
		},
		ToAddressesNEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.to_addresses"), v)
		},
		CCAddressesEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.cc_addresses"), v)
		},
		CCAddressesNEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.cc_addresses"), v)
		},
		BCCAddressesEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.bcc_addresses"), v)
		},
		BCCAddressesNEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.bcc_addresses"), v)
		},
		SubjectEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.subject"), v)
		},
		SubjectNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.subject"), v)
		},
		SubjectIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("eq.subject"), bun.In(v))
		},
		SubjectNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("eq.subject"), bun.In(v))
		},
		SubjectGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("eq.subject"), v)
		},
		SubjectGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("eq.subject"), v)
		},
		SubjectLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("eq.subject"), v)
		},
		SubjectLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("eq.subject"), v)
		},
		SubjectContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.subject"), "%"+v+"%")
		},
		SubjectHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.subject"), v+"%")
		},
		SubjectHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.subject"), "%"+v)
		},
		HTMLBodyEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.html_body"), v)
		},
		HTMLBodyNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.html_body"), v)
		},
		HTMLBodyIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("eq.html_body"), bun.In(v))
		},
		HTMLBodyNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("eq.html_body"), bun.In(v))
		},
		HTMLBodyGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("eq.html_body"), v)
		},
		HTMLBodyGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("eq.html_body"), v)
		},
		HTMLBodyLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("eq.html_body"), v)
		},
		HTMLBodyLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("eq.html_body"), v)
		},
		HTMLBodyContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.html_body"), "%"+v+"%")
		},
		HTMLBodyHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.html_body"), v+"%")
		},
		HTMLBodyHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.html_body"), "%"+v)
		},
		TextBodyEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.text_body"), v)
		},
		TextBodyNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.text_body"), v)
		},
		TextBodyIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("eq.text_body"), bun.In(v))
		},
		TextBodyNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("eq.text_body"), bun.In(v))
		},
		TextBodyGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("eq.text_body"), v)
		},
		TextBodyGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("eq.text_body"), v)
		},
		TextBodyLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("eq.text_body"), v)
		},
		TextBodyLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("eq.text_body"), v)
		},
		TextBodyContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.text_body"), "%"+v+"%")
		},
		TextBodyHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.text_body"), v+"%")
		},
		TextBodyHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.text_body"), "%"+v)
		},
		AttachmentsEQ: func(q *bun.SelectQuery, v []AttachmentMeta) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.attachments"), v)
		},
		AttachmentsNEQ: func(q *bun.SelectQuery, v []AttachmentMeta) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.attachments"), v)
		},
		PriorityEQ: func(q *bun.SelectQuery, v Priority) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.priority"), v)
		},
		PriorityNEQ: func(q *bun.SelectQuery, v Priority) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.priority"), v)
		},
		StatusEQ: func(q *bun.SelectQuery, v QueueStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v QueueStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.status"), v)
		},
		ScheduledAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.scheduled_at"), v)
		},
		ScheduledAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.scheduled_at"), v)
		},
		ScheduledAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("eq.scheduled_at"))
		},
		ScheduledAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("eq.scheduled_at"))
		},
		SentAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.sent_at"), v)
		},
		SentAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.sent_at"), v)
		},
		SentAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("eq.sent_at"))
		},
		SentAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("eq.sent_at"))
		},
		ErrorMessageEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.error_message"), v)
		},
		ErrorMessageNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.error_message"), v)
		},
		ErrorMessageIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("eq.error_message"), bun.In(v))
		},
		ErrorMessageNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("eq.error_message"), bun.In(v))
		},
		ErrorMessageGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("eq.error_message"), v)
		},
		ErrorMessageGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("eq.error_message"), v)
		},
		ErrorMessageLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("eq.error_message"), v)
		},
		ErrorMessageLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("eq.error_message"), v)
		},
		ErrorMessageContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.error_message"), "%"+v+"%")
		},
		ErrorMessageHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.error_message"), v+"%")
		},
		ErrorMessageHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("eq.error_message"), "%"+v)
		},
		RetryCountEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.retry_count"), v)
		},
		RetryCountNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.retry_count"), v)
		},
		RetryCountIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("eq.retry_count"), bun.In(v))
		},
		RetryCountNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("eq.retry_count"), bun.In(v))
		},
		RetryCountGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("eq.retry_count"), v)
		},
		RetryCountGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("eq.retry_count"), v)
		},
		RetryCountLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("eq.retry_count"), v)
		},
		RetryCountLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("eq.retry_count"), v)
		},
		TemplateVariablesEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.template_variables"), v)
		},
		TemplateVariablesNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.template_variables"), v)
		},
		MetadataEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.metadata"), v)
		},
		MetadataNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.metadata"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("eq.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("eq.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("eq.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("eq.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("eq.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("eq.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("eq.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("eq.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("eq.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("eq.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("eq.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("eq.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("eq.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("eq.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("eq.organization_id"), orgID).
				Where("? = ?", bun.Ident("eq.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "eq." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"eq.status ASC",
				"eq.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "eq.status DESC"
			}
			return "eq.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "eq.created_at DESC"
			}
			return "eq.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "eq.updated_at DESC"
			}
			return "eq.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]queueFieldConfig {
		return map[string]queueFieldConfig{
			"id": {
				Name:       "id",
				Column:     "eq.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "eq.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "eq.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"profile_id": {
				Name:       "profile_id",
				Column:     "eq.profile_id",
				Sortable:   false,
				Filterable: true,
			},
			"template_id": {
				Name:       "template_id",
				Column:     "eq.template_id",
				Sortable:   false,
				Filterable: true,
			},
			"to_addresses": {
				Name:       "to_addresses",
				Column:     "eq.to_addresses",
				Sortable:   false,
				Filterable: false,
			},
			"cc_addresses": {
				Name:       "cc_addresses",
				Column:     "eq.cc_addresses",
				Sortable:   false,
				Filterable: false,
			},
			"bcc_addresses": {
				Name:       "bcc_addresses",
				Column:     "eq.bcc_addresses",
				Sortable:   false,
				Filterable: false,
			},
			"subject": {
				Name:       "subject",
				Column:     "eq.subject",
				Sortable:   false,
				Filterable: false,
			},
			"html_body": {
				Name:       "html_body",
				Column:     "eq.html_body",
				Sortable:   false,
				Filterable: false,
			},
			"text_body": {
				Name:       "text_body",
				Column:     "eq.text_body",
				Sortable:   false,
				Filterable: false,
			},
			"attachments": {
				Name:       "attachments",
				Column:     "eq.attachments",
				Sortable:   false,
				Filterable: false,
			},
			"priority": {
				Name:       "priority",
				Column:     "eq.priority",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "eq.status",
				Sortable:   false,
				Filterable: true,
			},
			"scheduled_at": {
				Name:       "scheduled_at",
				Column:     "eq.scheduled_at",
				Sortable:   false,
				Filterable: false,
			},
			"sent_at": {
				Name:       "sent_at",
				Column:     "eq.sent_at",
				Sortable:   false,
				Filterable: false,
			},
			"error_message": {
				Name:       "error_message",
				Column:     "eq.error_message",
				Sortable:   false,
				Filterable: false,
			},
			"retry_count": {
				Name:       "retry_count",
				Column:     "eq.retry_count",
				Sortable:   false,
				Filterable: false,
			},
			"template_variables": {
				Name:       "template_variables",
				Column:     "eq.template_variables",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "eq.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "eq.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "eq.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]queueFieldConfig{
			"id": {
				Name:       "id",
				Column:     "eq.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "eq.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "eq.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"profile_id": {
				Name:       "profile_id",
				Column:     "eq.profile_id",
				Sortable:   false,
				Filterable: true,
			},
			"template_id": {
				Name:       "template_id",
				Column:     "eq.template_id",
				Sortable:   false,
				Filterable: true,
			},
			"to_addresses": {
				Name:       "to_addresses",
				Column:     "eq.to_addresses",
				Sortable:   false,
				Filterable: false,
			},
			"cc_addresses": {
				Name:       "cc_addresses",
				Column:     "eq.cc_addresses",
				Sortable:   false,
				Filterable: false,
			},
			"bcc_addresses": {
				Name:       "bcc_addresses",
				Column:     "eq.bcc_addresses",
				Sortable:   false,
				Filterable: false,
			},
			"subject": {
				Name:       "subject",
				Column:     "eq.subject",
				Sortable:   false,
				Filterable: false,
			},
			"html_body": {
				Name:       "html_body",
				Column:     "eq.html_body",
				Sortable:   false,
				Filterable: false,
			},
			"text_body": {
				Name:       "text_body",
				Column:     "eq.text_body",
				Sortable:   false,
				Filterable: false,
			},
			"attachments": {
				Name:       "attachments",
				Column:     "eq.attachments",
				Sortable:   false,
				Filterable: false,
			},
			"priority": {
				Name:       "priority",
				Column:     "eq.priority",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "eq.status",
				Sortable:   false,
				Filterable: true,
			},
			"scheduled_at": {
				Name:       "scheduled_at",
				Column:     "eq.scheduled_at",
				Sortable:   false,
				Filterable: false,
			},
			"sent_at": {
				Name:       "sent_at",
				Column:     "eq.sent_at",
				Sortable:   false,
				Filterable: false,
			},
			"error_message": {
				Name:       "error_message",
				Column:     "eq.error_message",
				Sortable:   false,
				Filterable: false,
			},
			"retry_count": {
				Name:       "retry_count",
				Column:     "eq.retry_count",
				Sortable:   false,
				Filterable: false,
			},
			"template_variables": {
				Name:       "template_variables",
				Column:     "eq.template_variables",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "eq.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "eq.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "eq.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]queueFieldConfig{
			"id": {
				Name:       "id",
				Column:     "eq.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "eq.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "eq.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"profile_id": {
				Name:       "profile_id",
				Column:     "eq.profile_id",
				Sortable:   false,
				Filterable: true,
			},
			"template_id": {
				Name:       "template_id",
				Column:     "eq.template_id",
				Sortable:   false,
				Filterable: true,
			},
			"to_addresses": {
				Name:       "to_addresses",
				Column:     "eq.to_addresses",
				Sortable:   false,
				Filterable: false,
			},
			"cc_addresses": {
				Name:       "cc_addresses",
				Column:     "eq.cc_addresses",
				Sortable:   false,
				Filterable: false,
			},
			"bcc_addresses": {
				Name:       "bcc_addresses",
				Column:     "eq.bcc_addresses",
				Sortable:   false,
				Filterable: false,
			},
			"subject": {
				Name:       "subject",
				Column:     "eq.subject",
				Sortable:   false,
				Filterable: false,
			},
			"html_body": {
				Name:       "html_body",
				Column:     "eq.html_body",
				Sortable:   false,
				Filterable: false,
			},
			"text_body": {
				Name:       "text_body",
				Column:     "eq.text_body",
				Sortable:   false,
				Filterable: false,
			},
			"attachments": {
				Name:       "attachments",
				Column:     "eq.attachments",
				Sortable:   false,
				Filterable: false,
			},
			"priority": {
				Name:       "priority",
				Column:     "eq.priority",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "eq.status",
				Sortable:   false,
				Filterable: true,
			},
			"scheduled_at": {
				Name:       "scheduled_at",
				Column:     "eq.scheduled_at",
				Sortable:   false,
				Filterable: false,
			},
			"sent_at": {
				Name:       "sent_at",
				Column:     "eq.sent_at",
				Sortable:   false,
				Filterable: false,
			},
			"error_message": {
				Name:       "error_message",
				Column:     "eq.error_message",
				Sortable:   false,
				Filterable: false,
			},
			"retry_count": {
				Name:       "retry_count",
				Column:     "eq.retry_count",
				Sortable:   false,
				Filterable: false,
			},
			"template_variables": {
				Name:       "template_variables",
				Column:     "eq.template_variables",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "eq.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "eq.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "eq.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// QueueQueryBuilder provides a fluent interface for building queries
type QueueQueryBuilder struct {
	query *bun.SelectQuery
}

// NewQueueQuery creates a new query builder
func NewQueueQuery(db bun.IDB) *QueueQueryBuilder {
	return &QueueQueryBuilder{
		query: db.NewSelect().Model((*Queue)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func QueueFromQuery(q *bun.SelectQuery) *QueueQueryBuilder {
	return &QueueQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *QueueQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *QueueQueryBuilder) Model(model interface{}) *QueueQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *QueueQueryBuilder) WhereIDEQ(v pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *QueueQueryBuilder) WhereIDNEQ(v pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *QueueQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *QueueQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *QueueQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *QueueQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereProfileIDEQ adds a WHERE profile_id = ? condition
func (b *QueueQueryBuilder) WhereProfileIDEQ(v pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ProfileIDEQ(b.query, v)
	return b
}

// WhereProfileIDNEQ adds a WHERE profile_id != ? condition
func (b *QueueQueryBuilder) WhereProfileIDNEQ(v pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ProfileIDNEQ(b.query, v)
	return b
}

// WhereTemplateIDEQ adds a WHERE template_id = ? condition
func (b *QueueQueryBuilder) WhereTemplateIDEQ(v *pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TemplateIDEQ(b.query, v)
	return b
}

// WhereTemplateIDNEQ adds a WHERE template_id != ? condition
func (b *QueueQueryBuilder) WhereTemplateIDNEQ(v *pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TemplateIDNEQ(b.query, v)
	return b
}

// WhereToAddressesEQ adds a WHERE to_addresses = ? condition
func (b *QueueQueryBuilder) WhereToAddressesEQ(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ToAddressesEQ(b.query, v)
	return b
}

// WhereToAddressesNEQ adds a WHERE to_addresses != ? condition
func (b *QueueQueryBuilder) WhereToAddressesNEQ(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ToAddressesNEQ(b.query, v)
	return b
}

// WhereCCAddressesEQ adds a WHERE cc_addresses = ? condition
func (b *QueueQueryBuilder) WhereCCAddressesEQ(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CCAddressesEQ(b.query, v)
	return b
}

// WhereCCAddressesNEQ adds a WHERE cc_addresses != ? condition
func (b *QueueQueryBuilder) WhereCCAddressesNEQ(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CCAddressesNEQ(b.query, v)
	return b
}

// WhereBCCAddressesEQ adds a WHERE bcc_addresses = ? condition
func (b *QueueQueryBuilder) WhereBCCAddressesEQ(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.BCCAddressesEQ(b.query, v)
	return b
}

// WhereBCCAddressesNEQ adds a WHERE bcc_addresses != ? condition
func (b *QueueQueryBuilder) WhereBCCAddressesNEQ(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.BCCAddressesNEQ(b.query, v)
	return b
}

// WhereSubjectEQ adds a WHERE subject = ? condition
func (b *QueueQueryBuilder) WhereSubjectEQ(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.SubjectEQ(b.query, v)
	return b
}

// WhereSubjectNEQ adds a WHERE subject != ? condition
func (b *QueueQueryBuilder) WhereSubjectNEQ(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.SubjectNEQ(b.query, v)
	return b
}

// WhereSubjectIn adds a WHERE subject IN (?) condition
func (b *QueueQueryBuilder) WhereSubjectIn(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.SubjectIn(b.query, v)
	return b
}

// WhereSubjectNotIn adds a WHERE subject NOT IN (?) condition
func (b *QueueQueryBuilder) WhereSubjectNotIn(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.SubjectNotIn(b.query, v)
	return b
}

// WhereSubjectContains adds a WHERE subject LIKE ? condition
func (b *QueueQueryBuilder) WhereSubjectContains(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.SubjectContains(b.query, v)
	return b
}

// WhereSubjectHasPrefix adds a WHERE subject LIKE ? condition
func (b *QueueQueryBuilder) WhereSubjectHasPrefix(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.SubjectHasPrefix(b.query, v)
	return b
}

// WhereSubjectHasSuffix adds a WHERE subject LIKE ? condition
func (b *QueueQueryBuilder) WhereSubjectHasSuffix(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.SubjectHasSuffix(b.query, v)
	return b
}

// WhereHTMLBodyEQ adds a WHERE html_body = ? condition
func (b *QueueQueryBuilder) WhereHTMLBodyEQ(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.HTMLBodyEQ(b.query, v)
	return b
}

// WhereHTMLBodyNEQ adds a WHERE html_body != ? condition
func (b *QueueQueryBuilder) WhereHTMLBodyNEQ(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.HTMLBodyNEQ(b.query, v)
	return b
}

// WhereHTMLBodyIn adds a WHERE html_body IN (?) condition
func (b *QueueQueryBuilder) WhereHTMLBodyIn(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.HTMLBodyIn(b.query, v)
	return b
}

// WhereHTMLBodyNotIn adds a WHERE html_body NOT IN (?) condition
func (b *QueueQueryBuilder) WhereHTMLBodyNotIn(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.HTMLBodyNotIn(b.query, v)
	return b
}

// WhereHTMLBodyContains adds a WHERE html_body LIKE ? condition
func (b *QueueQueryBuilder) WhereHTMLBodyContains(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.HTMLBodyContains(b.query, v)
	return b
}

// WhereHTMLBodyHasPrefix adds a WHERE html_body LIKE ? condition
func (b *QueueQueryBuilder) WhereHTMLBodyHasPrefix(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.HTMLBodyHasPrefix(b.query, v)
	return b
}

// WhereHTMLBodyHasSuffix adds a WHERE html_body LIKE ? condition
func (b *QueueQueryBuilder) WhereHTMLBodyHasSuffix(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.HTMLBodyHasSuffix(b.query, v)
	return b
}

// WhereTextBodyEQ adds a WHERE text_body = ? condition
func (b *QueueQueryBuilder) WhereTextBodyEQ(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TextBodyEQ(b.query, v)
	return b
}

// WhereTextBodyNEQ adds a WHERE text_body != ? condition
func (b *QueueQueryBuilder) WhereTextBodyNEQ(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TextBodyNEQ(b.query, v)
	return b
}

// WhereTextBodyIn adds a WHERE text_body IN (?) condition
func (b *QueueQueryBuilder) WhereTextBodyIn(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TextBodyIn(b.query, v)
	return b
}

// WhereTextBodyNotIn adds a WHERE text_body NOT IN (?) condition
func (b *QueueQueryBuilder) WhereTextBodyNotIn(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TextBodyNotIn(b.query, v)
	return b
}

// WhereTextBodyContains adds a WHERE text_body LIKE ? condition
func (b *QueueQueryBuilder) WhereTextBodyContains(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TextBodyContains(b.query, v)
	return b
}

// WhereTextBodyHasPrefix adds a WHERE text_body LIKE ? condition
func (b *QueueQueryBuilder) WhereTextBodyHasPrefix(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TextBodyHasPrefix(b.query, v)
	return b
}

// WhereTextBodyHasSuffix adds a WHERE text_body LIKE ? condition
func (b *QueueQueryBuilder) WhereTextBodyHasSuffix(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TextBodyHasSuffix(b.query, v)
	return b
}

// WhereAttachmentsEQ adds a WHERE attachments = ? condition
func (b *QueueQueryBuilder) WhereAttachmentsEQ(v []AttachmentMeta) *QueueQueryBuilder {
	b.query = QueueQuery.Where.AttachmentsEQ(b.query, v)
	return b
}

// WhereAttachmentsNEQ adds a WHERE attachments != ? condition
func (b *QueueQueryBuilder) WhereAttachmentsNEQ(v []AttachmentMeta) *QueueQueryBuilder {
	b.query = QueueQuery.Where.AttachmentsNEQ(b.query, v)
	return b
}

// WherePriorityEQ adds a WHERE priority = ? condition
func (b *QueueQueryBuilder) WherePriorityEQ(v Priority) *QueueQueryBuilder {
	b.query = QueueQuery.Where.PriorityEQ(b.query, v)
	return b
}

// WherePriorityNEQ adds a WHERE priority != ? condition
func (b *QueueQueryBuilder) WherePriorityNEQ(v Priority) *QueueQueryBuilder {
	b.query = QueueQuery.Where.PriorityNEQ(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *QueueQueryBuilder) WhereStatusEQ(v QueueStatus) *QueueQueryBuilder {
	b.query = QueueQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *QueueQueryBuilder) WhereStatusNEQ(v QueueStatus) *QueueQueryBuilder {
	b.query = QueueQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereScheduledAtEQ adds a WHERE scheduled_at = ? condition
func (b *QueueQueryBuilder) WhereScheduledAtEQ(v *int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ScheduledAtEQ(b.query, v)
	return b
}

// WhereScheduledAtNEQ adds a WHERE scheduled_at != ? condition
func (b *QueueQueryBuilder) WhereScheduledAtNEQ(v *int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ScheduledAtNEQ(b.query, v)
	return b
}

// WhereSentAtEQ adds a WHERE sent_at = ? condition
func (b *QueueQueryBuilder) WhereSentAtEQ(v *int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.SentAtEQ(b.query, v)
	return b
}

// WhereSentAtNEQ adds a WHERE sent_at != ? condition
func (b *QueueQueryBuilder) WhereSentAtNEQ(v *int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.SentAtNEQ(b.query, v)
	return b
}

// WhereErrorMessageEQ adds a WHERE error_message = ? condition
func (b *QueueQueryBuilder) WhereErrorMessageEQ(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ErrorMessageEQ(b.query, v)
	return b
}

// WhereErrorMessageNEQ adds a WHERE error_message != ? condition
func (b *QueueQueryBuilder) WhereErrorMessageNEQ(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ErrorMessageNEQ(b.query, v)
	return b
}

// WhereErrorMessageIn adds a WHERE error_message IN (?) condition
func (b *QueueQueryBuilder) WhereErrorMessageIn(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ErrorMessageIn(b.query, v)
	return b
}

// WhereErrorMessageNotIn adds a WHERE error_message NOT IN (?) condition
func (b *QueueQueryBuilder) WhereErrorMessageNotIn(v []string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ErrorMessageNotIn(b.query, v)
	return b
}

// WhereErrorMessageContains adds a WHERE error_message LIKE ? condition
func (b *QueueQueryBuilder) WhereErrorMessageContains(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ErrorMessageContains(b.query, v)
	return b
}

// WhereErrorMessageHasPrefix adds a WHERE error_message LIKE ? condition
func (b *QueueQueryBuilder) WhereErrorMessageHasPrefix(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ErrorMessageHasPrefix(b.query, v)
	return b
}

// WhereErrorMessageHasSuffix adds a WHERE error_message LIKE ? condition
func (b *QueueQueryBuilder) WhereErrorMessageHasSuffix(v string) *QueueQueryBuilder {
	b.query = QueueQuery.Where.ErrorMessageHasSuffix(b.query, v)
	return b
}

// WhereRetryCountEQ adds a WHERE retry_count = ? condition
func (b *QueueQueryBuilder) WhereRetryCountEQ(v int) *QueueQueryBuilder {
	b.query = QueueQuery.Where.RetryCountEQ(b.query, v)
	return b
}

// WhereRetryCountNEQ adds a WHERE retry_count != ? condition
func (b *QueueQueryBuilder) WhereRetryCountNEQ(v int) *QueueQueryBuilder {
	b.query = QueueQuery.Where.RetryCountNEQ(b.query, v)
	return b
}

// WhereRetryCountGT adds a WHERE retry_count > ? condition
func (b *QueueQueryBuilder) WhereRetryCountGT(v int) *QueueQueryBuilder {
	b.query = QueueQuery.Where.RetryCountGT(b.query, v)
	return b
}

// WhereRetryCountGTE adds a WHERE retry_count >= ? condition
func (b *QueueQueryBuilder) WhereRetryCountGTE(v int) *QueueQueryBuilder {
	b.query = QueueQuery.Where.RetryCountGTE(b.query, v)
	return b
}

// WhereRetryCountLT adds a WHERE retry_count < ? condition
func (b *QueueQueryBuilder) WhereRetryCountLT(v int) *QueueQueryBuilder {
	b.query = QueueQuery.Where.RetryCountLT(b.query, v)
	return b
}

// WhereRetryCountLTE adds a WHERE retry_count <= ? condition
func (b *QueueQueryBuilder) WhereRetryCountLTE(v int) *QueueQueryBuilder {
	b.query = QueueQuery.Where.RetryCountLTE(b.query, v)
	return b
}

// WhereRetryCountIn adds a WHERE retry_count IN (?) condition
func (b *QueueQueryBuilder) WhereRetryCountIn(v []int) *QueueQueryBuilder {
	b.query = QueueQuery.Where.RetryCountIn(b.query, v)
	return b
}

// WhereRetryCountNotIn adds a WHERE retry_count NOT IN (?) condition
func (b *QueueQueryBuilder) WhereRetryCountNotIn(v []int) *QueueQueryBuilder {
	b.query = QueueQuery.Where.RetryCountNotIn(b.query, v)
	return b
}

// WhereTemplateVariablesEQ adds a WHERE template_variables = ? condition
func (b *QueueQueryBuilder) WhereTemplateVariablesEQ(v map[string]any) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TemplateVariablesEQ(b.query, v)
	return b
}

// WhereTemplateVariablesNEQ adds a WHERE template_variables != ? condition
func (b *QueueQueryBuilder) WhereTemplateVariablesNEQ(v map[string]any) *QueueQueryBuilder {
	b.query = QueueQuery.Where.TemplateVariablesNEQ(b.query, v)
	return b
}

// WhereMetadataEQ adds a WHERE metadata = ? condition
func (b *QueueQueryBuilder) WhereMetadataEQ(v map[string]any) *QueueQueryBuilder {
	b.query = QueueQuery.Where.MetadataEQ(b.query, v)
	return b
}

// WhereMetadataNEQ adds a WHERE metadata != ? condition
func (b *QueueQueryBuilder) WhereMetadataNEQ(v map[string]any) *QueueQueryBuilder {
	b.query = QueueQuery.Where.MetadataNEQ(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *QueueQueryBuilder) WhereCreatedAtEQ(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *QueueQueryBuilder) WhereCreatedAtNEQ(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *QueueQueryBuilder) WhereCreatedAtGT(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *QueueQueryBuilder) WhereCreatedAtGTE(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *QueueQueryBuilder) WhereCreatedAtLT(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *QueueQueryBuilder) WhereCreatedAtLTE(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *QueueQueryBuilder) WhereCreatedAtIn(v []int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *QueueQueryBuilder) WhereCreatedAtNotIn(v []int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *QueueQueryBuilder) WhereUpdatedAtEQ(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *QueueQueryBuilder) WhereUpdatedAtNEQ(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *QueueQueryBuilder) WhereUpdatedAtGT(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *QueueQueryBuilder) WhereUpdatedAtGTE(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *QueueQueryBuilder) WhereUpdatedAtLT(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *QueueQueryBuilder) WhereUpdatedAtLTE(v int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *QueueQueryBuilder) WhereUpdatedAtIn(v []int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *QueueQueryBuilder) WhereUpdatedAtNotIn(v []int64) *QueueQueryBuilder {
	b.query = QueueQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *QueueQueryBuilder) WhereTenant(orgID, buID pulid.ID) *QueueQueryBuilder {
	b.query = QueueQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *QueueQueryBuilder) WhereGroup(sep string, fn func(*QueueQueryBuilder) *QueueQueryBuilder) *QueueQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &QueueQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *QueueQueryBuilder) Where(query string, args ...interface{}) *QueueQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *QueueQueryBuilder) OrderBy(column string, desc ...bool) *QueueQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(QueueQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *QueueQueryBuilder) Limit(n int) *QueueQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *QueueQueryBuilder) Offset(n int) *QueueQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *QueueQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *QueueQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *QueueQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *QueueQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *QueueQueryBuilder) All(ctx context.Context) ([]*Queue, error) {
	var entities []*Queue
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *QueueQueryBuilder) AllWithCount(ctx context.Context) ([]*Queue, int, error) {
	var entities []*Queue
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *QueueQueryBuilder) One(ctx context.Context) (*Queue, error) {
	entity := new(Queue)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *QueueQueryBuilder) First(ctx context.Context) (*Queue, error) {
	entity := new(Queue)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// QueueBuild creates a chainable query builder
func QueueBuild(db bun.IDB) *QueueQueryBuilder {
	return NewQueueQuery(db)
}
