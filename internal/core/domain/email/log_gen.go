// Code generated by gen-trenova. DO NOT EDIT.

package email

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// logFieldConfig provides field configuration for Log
type logFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// LogQuery provides type-safe query helpers and constants
var LogQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID               string
		OrganizationID   string
		BusinessUnitID   string
		QueueID          string
		MessageID        string
		Status           string
		ProviderResponse string
		OpenedAt         string
		ClickedAt        string
		BouncedAt        string
		ComplainedAt     string
		UnsubscribedAt   string
		BounceType       string
		BounceReason     string
		WebhookEvents    string
		UserAgent        string
		IPAddress        string
		ClickedURLs      string
		Metadata         string
		CreatedAt        string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		QueueIDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		QueueIDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		QueueIDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		QueueIDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		MessageIDEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MessageIDNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MessageIDGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ                  func(q *bun.SelectQuery, v LogStatus) *bun.SelectQuery
		StatusNEQ                 func(q *bun.SelectQuery, v LogStatus) *bun.SelectQuery
		StatusIn                  func(q *bun.SelectQuery, v []LogStatus) *bun.SelectQuery
		StatusNotIn               func(q *bun.SelectQuery, v []LogStatus) *bun.SelectQuery
		ProviderResponseEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProviderResponseNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProviderResponseGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OpenedAtEQ                func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		OpenedAtNEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		OpenedAtIn                func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		OpenedAtNotIn             func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		OpenedAtIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		OpenedAtIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		ClickedAtEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ClickedAtNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ClickedAtIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ClickedAtNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ClickedAtIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		ClickedAtIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		BouncedAtEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		BouncedAtNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		BouncedAtIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		BouncedAtNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		BouncedAtIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		BouncedAtIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		ComplainedAtEQ            func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ComplainedAtNEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ComplainedAtIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ComplainedAtNotIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ComplainedAtIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		ComplainedAtIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		UnsubscribedAtEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		UnsubscribedAtNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		UnsubscribedAtIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		UnsubscribedAtNotIn       func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		UnsubscribedAtIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		UnsubscribedAtIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		BounceTypeEQ              func(q *bun.SelectQuery, v *BounceType) *bun.SelectQuery
		BounceTypeNEQ             func(q *bun.SelectQuery, v *BounceType) *bun.SelectQuery
		BounceTypeIn              func(q *bun.SelectQuery, v []*BounceType) *bun.SelectQuery
		BounceTypeNotIn           func(q *bun.SelectQuery, v []*BounceType) *bun.SelectQuery
		BounceTypeIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		BounceTypeIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		BounceReasonEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BounceReasonNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BounceReasonGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WebhookEventsEQ           func(q *bun.SelectQuery, v []WebhookEvent) *bun.SelectQuery
		WebhookEventsNEQ          func(q *bun.SelectQuery, v []WebhookEvent) *bun.SelectQuery
		WebhookEventsIn           func(q *bun.SelectQuery, v [][]WebhookEvent) *bun.SelectQuery
		WebhookEventsNotIn        func(q *bun.SelectQuery, v [][]WebhookEvent) *bun.SelectQuery
		UserAgentEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UserAgentNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UserAgentGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		IPAddressNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		IPAddressGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ClickedURLsEQ             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ClickedURLsNEQ            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ClickedURLsIn             func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		ClickedURLsNotIn          func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		MetadataEQ                func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ               func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn                func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn             func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CreatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]logFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
		Queue        string
	}
}{
	// Table and alias constants
	Table:    "email_logs",
	Alias:    "el",
	IDPrefix: "el_",

	// Field names
	Field: struct {
		ID               string
		OrganizationID   string
		BusinessUnitID   string
		QueueID          string
		MessageID        string
		Status           string
		ProviderResponse string
		OpenedAt         string
		ClickedAt        string
		BouncedAt        string
		ComplainedAt     string
		UnsubscribedAt   string
		BounceType       string
		BounceReason     string
		WebhookEvents    string
		UserAgent        string
		IPAddress        string
		ClickedURLs      string
		Metadata         string
		CreatedAt        string
	}{
		ID:               "id",
		OrganizationID:   "organization_id",
		BusinessUnitID:   "business_unit_id",
		QueueID:          "queue_id",
		MessageID:        "message_id",
		Status:           "status",
		ProviderResponse: "provider_response",
		OpenedAt:         "opened_at",
		ClickedAt:        "clicked_at",
		BouncedAt:        "bounced_at",
		ComplainedAt:     "complained_at",
		UnsubscribedAt:   "unsubscribed_at",
		BounceType:       "bounce_type",
		BounceReason:     "bounce_reason",
		WebhookEvents:    "webhook_events",
		UserAgent:        "user_agent",
		IPAddress:        "ip_address",
		ClickedURLs:      "clicked_urls",
		Metadata:         "metadata",
		CreatedAt:        "created_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "el." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "el." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		QueueIDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		QueueIDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		QueueIDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		QueueIDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		MessageIDEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MessageIDNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MessageIDGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIDHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ                  func(q *bun.SelectQuery, v LogStatus) *bun.SelectQuery
		StatusNEQ                 func(q *bun.SelectQuery, v LogStatus) *bun.SelectQuery
		StatusIn                  func(q *bun.SelectQuery, v []LogStatus) *bun.SelectQuery
		StatusNotIn               func(q *bun.SelectQuery, v []LogStatus) *bun.SelectQuery
		ProviderResponseEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProviderResponseNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProviderResponseGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProviderResponseHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OpenedAtEQ                func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		OpenedAtNEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		OpenedAtIn                func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		OpenedAtNotIn             func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		OpenedAtIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		OpenedAtIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		ClickedAtEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ClickedAtNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ClickedAtIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ClickedAtNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ClickedAtIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		ClickedAtIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		BouncedAtEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		BouncedAtNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		BouncedAtIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		BouncedAtNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		BouncedAtIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		BouncedAtIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		ComplainedAtEQ            func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ComplainedAtNEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ComplainedAtIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ComplainedAtNotIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ComplainedAtIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		ComplainedAtIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		UnsubscribedAtEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		UnsubscribedAtNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		UnsubscribedAtIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		UnsubscribedAtNotIn       func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		UnsubscribedAtIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		UnsubscribedAtIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		BounceTypeEQ              func(q *bun.SelectQuery, v *BounceType) *bun.SelectQuery
		BounceTypeNEQ             func(q *bun.SelectQuery, v *BounceType) *bun.SelectQuery
		BounceTypeIn              func(q *bun.SelectQuery, v []*BounceType) *bun.SelectQuery
		BounceTypeNotIn           func(q *bun.SelectQuery, v []*BounceType) *bun.SelectQuery
		BounceTypeIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		BounceTypeIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		BounceReasonEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BounceReasonNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BounceReasonGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BounceReasonHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WebhookEventsEQ           func(q *bun.SelectQuery, v []WebhookEvent) *bun.SelectQuery
		WebhookEventsNEQ          func(q *bun.SelectQuery, v []WebhookEvent) *bun.SelectQuery
		WebhookEventsIn           func(q *bun.SelectQuery, v [][]WebhookEvent) *bun.SelectQuery
		WebhookEventsNotIn        func(q *bun.SelectQuery, v [][]WebhookEvent) *bun.SelectQuery
		UserAgentEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UserAgentNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UserAgentGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UserAgentHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		IPAddressNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		IPAddressGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IPAddressHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ClickedURLsEQ             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ClickedURLsNEQ            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ClickedURLsIn             func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		ClickedURLsNotIn          func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		MetadataEQ                func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ               func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn                func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn             func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CreatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                    func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.organization_id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.business_unit_id"), bun.In(v))
		},
		QueueIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.queue_id"), v)
		},
		QueueIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.queue_id"), v)
		},
		QueueIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.queue_id"), bun.In(v))
		},
		QueueIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.queue_id"), bun.In(v))
		},
		MessageIDEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.message_id"), v)
		},
		MessageIDNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.message_id"), v)
		},
		MessageIDIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.message_id"), bun.In(v))
		},
		MessageIDNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.message_id"), bun.In(v))
		},
		MessageIDGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("el.message_id"), v)
		},
		MessageIDGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("el.message_id"), v)
		},
		MessageIDLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("el.message_id"), v)
		},
		MessageIDLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("el.message_id"), v)
		},
		MessageIDContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.message_id"), "%"+v+"%")
		},
		MessageIDHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.message_id"), v+"%")
		},
		MessageIDHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.message_id"), "%"+v)
		},
		StatusEQ: func(q *bun.SelectQuery, v LogStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v LogStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []LogStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []LogStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.status"), bun.In(v))
		},
		ProviderResponseEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.provider_response"), v)
		},
		ProviderResponseNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.provider_response"), v)
		},
		ProviderResponseIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.provider_response"), bun.In(v))
		},
		ProviderResponseNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.provider_response"), bun.In(v))
		},
		ProviderResponseGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("el.provider_response"), v)
		},
		ProviderResponseGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("el.provider_response"), v)
		},
		ProviderResponseLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("el.provider_response"), v)
		},
		ProviderResponseLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("el.provider_response"), v)
		},
		ProviderResponseContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.provider_response"), "%"+v+"%")
		},
		ProviderResponseHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.provider_response"), v+"%")
		},
		ProviderResponseHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.provider_response"), "%"+v)
		},
		OpenedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.opened_at"), v)
		},
		OpenedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.opened_at"), v)
		},
		OpenedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.opened_at"), bun.In(v))
		},
		OpenedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.opened_at"), bun.In(v))
		},
		OpenedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("el.opened_at"))
		},
		OpenedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("el.opened_at"))
		},
		ClickedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.clicked_at"), v)
		},
		ClickedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.clicked_at"), v)
		},
		ClickedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.clicked_at"), bun.In(v))
		},
		ClickedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.clicked_at"), bun.In(v))
		},
		ClickedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("el.clicked_at"))
		},
		ClickedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("el.clicked_at"))
		},
		BouncedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.bounced_at"), v)
		},
		BouncedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.bounced_at"), v)
		},
		BouncedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.bounced_at"), bun.In(v))
		},
		BouncedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.bounced_at"), bun.In(v))
		},
		BouncedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("el.bounced_at"))
		},
		BouncedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("el.bounced_at"))
		},
		ComplainedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.complained_at"), v)
		},
		ComplainedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.complained_at"), v)
		},
		ComplainedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.complained_at"), bun.In(v))
		},
		ComplainedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.complained_at"), bun.In(v))
		},
		ComplainedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("el.complained_at"))
		},
		ComplainedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("el.complained_at"))
		},
		UnsubscribedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.unsubscribed_at"), v)
		},
		UnsubscribedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.unsubscribed_at"), v)
		},
		UnsubscribedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.unsubscribed_at"), bun.In(v))
		},
		UnsubscribedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.unsubscribed_at"), bun.In(v))
		},
		UnsubscribedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("el.unsubscribed_at"))
		},
		UnsubscribedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("el.unsubscribed_at"))
		},
		BounceTypeEQ: func(q *bun.SelectQuery, v *BounceType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.bounce_type"), v)
		},
		BounceTypeNEQ: func(q *bun.SelectQuery, v *BounceType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.bounce_type"), v)
		},
		BounceTypeIn: func(q *bun.SelectQuery, v []*BounceType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.bounce_type"), bun.In(v))
		},
		BounceTypeNotIn: func(q *bun.SelectQuery, v []*BounceType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.bounce_type"), bun.In(v))
		},
		BounceTypeIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("el.bounce_type"))
		},
		BounceTypeIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("el.bounce_type"))
		},
		BounceReasonEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.bounce_reason"), v)
		},
		BounceReasonNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.bounce_reason"), v)
		},
		BounceReasonIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.bounce_reason"), bun.In(v))
		},
		BounceReasonNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.bounce_reason"), bun.In(v))
		},
		BounceReasonGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("el.bounce_reason"), v)
		},
		BounceReasonGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("el.bounce_reason"), v)
		},
		BounceReasonLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("el.bounce_reason"), v)
		},
		BounceReasonLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("el.bounce_reason"), v)
		},
		BounceReasonContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.bounce_reason"), "%"+v+"%")
		},
		BounceReasonHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.bounce_reason"), v+"%")
		},
		BounceReasonHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.bounce_reason"), "%"+v)
		},
		WebhookEventsEQ: func(q *bun.SelectQuery, v []WebhookEvent) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.webhook_events"), v)
		},
		WebhookEventsNEQ: func(q *bun.SelectQuery, v []WebhookEvent) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.webhook_events"), v)
		},
		WebhookEventsIn: func(q *bun.SelectQuery, v [][]WebhookEvent) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.webhook_events"), bun.In(v))
		},
		WebhookEventsNotIn: func(q *bun.SelectQuery, v [][]WebhookEvent) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.webhook_events"), bun.In(v))
		},
		UserAgentEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.user_agent"), v)
		},
		UserAgentNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.user_agent"), v)
		},
		UserAgentIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.user_agent"), bun.In(v))
		},
		UserAgentNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.user_agent"), bun.In(v))
		},
		UserAgentGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("el.user_agent"), v)
		},
		UserAgentGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("el.user_agent"), v)
		},
		UserAgentLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("el.user_agent"), v)
		},
		UserAgentLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("el.user_agent"), v)
		},
		UserAgentContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.user_agent"), "%"+v+"%")
		},
		UserAgentHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.user_agent"), v+"%")
		},
		UserAgentHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.user_agent"), "%"+v)
		},
		IPAddressEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.ip_address"), v)
		},
		IPAddressNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.ip_address"), v)
		},
		IPAddressIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.ip_address"), bun.In(v))
		},
		IPAddressNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.ip_address"), bun.In(v))
		},
		IPAddressGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("el.ip_address"), v)
		},
		IPAddressGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("el.ip_address"), v)
		},
		IPAddressLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("el.ip_address"), v)
		},
		IPAddressLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("el.ip_address"), v)
		},
		IPAddressContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.ip_address"), "%"+v+"%")
		},
		IPAddressHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.ip_address"), v+"%")
		},
		IPAddressHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("el.ip_address"), "%"+v)
		},
		ClickedURLsEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.clicked_urls"), v)
		},
		ClickedURLsNEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.clicked_urls"), v)
		},
		ClickedURLsIn: func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.clicked_urls"), bun.In(v))
		},
		ClickedURLsNotIn: func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.clicked_urls"), bun.In(v))
		},
		MetadataEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.metadata"), v)
		},
		MetadataNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.metadata"), v)
		},
		MetadataIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.metadata"), bun.In(v))
		},
		MetadataNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.metadata"), bun.In(v))
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("el.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("el.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("el.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("el.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("el.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("el.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("el.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("el.created_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("el.organization_id"), orgID).
				Where("? = ?", bun.Ident("el.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "el." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"el.status ASC",
				"el.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "el.status DESC"
			}
			return "el.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "el.created_at DESC"
			}
			return "el.created_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]logFieldConfig {
		return map[string]logFieldConfig{
			"id": {
				Name:       "id",
				Column:     "el.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "el.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "el.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"queue_id": {
				Name:       "queue_id",
				Column:     "el.queue_id",
				Sortable:   false,
				Filterable: true,
			},
			"message_id": {
				Name:       "message_id",
				Column:     "el.message_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "el.status",
				Sortable:   false,
				Filterable: true,
			},
			"provider_response": {
				Name:       "provider_response",
				Column:     "el.provider_response",
				Sortable:   false,
				Filterable: false,
			},
			"opened_at": {
				Name:       "opened_at",
				Column:     "el.opened_at",
				Sortable:   false,
				Filterable: false,
			},
			"clicked_at": {
				Name:       "clicked_at",
				Column:     "el.clicked_at",
				Sortable:   false,
				Filterable: false,
			},
			"bounced_at": {
				Name:       "bounced_at",
				Column:     "el.bounced_at",
				Sortable:   false,
				Filterable: false,
			},
			"complained_at": {
				Name:       "complained_at",
				Column:     "el.complained_at",
				Sortable:   false,
				Filterable: false,
			},
			"unsubscribed_at": {
				Name:       "unsubscribed_at",
				Column:     "el.unsubscribed_at",
				Sortable:   false,
				Filterable: false,
			},
			"bounce_type": {
				Name:       "bounce_type",
				Column:     "el.bounce_type",
				Sortable:   false,
				Filterable: false,
			},
			"bounce_reason": {
				Name:       "bounce_reason",
				Column:     "el.bounce_reason",
				Sortable:   false,
				Filterable: false,
			},
			"webhook_events": {
				Name:       "webhook_events",
				Column:     "el.webhook_events",
				Sortable:   false,
				Filterable: false,
			},
			"user_agent": {
				Name:       "user_agent",
				Column:     "el.user_agent",
				Sortable:   false,
				Filterable: false,
			},
			"ip_address": {
				Name:       "ip_address",
				Column:     "el.ip_address",
				Sortable:   false,
				Filterable: false,
			},
			"clicked_urls": {
				Name:       "clicked_urls",
				Column:     "el.clicked_urls",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "el.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "el.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]logFieldConfig{
			"id": {
				Name:       "id",
				Column:     "el.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "el.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "el.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"queue_id": {
				Name:       "queue_id",
				Column:     "el.queue_id",
				Sortable:   false,
				Filterable: true,
			},
			"message_id": {
				Name:       "message_id",
				Column:     "el.message_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "el.status",
				Sortable:   false,
				Filterable: true,
			},
			"provider_response": {
				Name:       "provider_response",
				Column:     "el.provider_response",
				Sortable:   false,
				Filterable: false,
			},
			"opened_at": {
				Name:       "opened_at",
				Column:     "el.opened_at",
				Sortable:   false,
				Filterable: false,
			},
			"clicked_at": {
				Name:       "clicked_at",
				Column:     "el.clicked_at",
				Sortable:   false,
				Filterable: false,
			},
			"bounced_at": {
				Name:       "bounced_at",
				Column:     "el.bounced_at",
				Sortable:   false,
				Filterable: false,
			},
			"complained_at": {
				Name:       "complained_at",
				Column:     "el.complained_at",
				Sortable:   false,
				Filterable: false,
			},
			"unsubscribed_at": {
				Name:       "unsubscribed_at",
				Column:     "el.unsubscribed_at",
				Sortable:   false,
				Filterable: false,
			},
			"bounce_type": {
				Name:       "bounce_type",
				Column:     "el.bounce_type",
				Sortable:   false,
				Filterable: false,
			},
			"bounce_reason": {
				Name:       "bounce_reason",
				Column:     "el.bounce_reason",
				Sortable:   false,
				Filterable: false,
			},
			"webhook_events": {
				Name:       "webhook_events",
				Column:     "el.webhook_events",
				Sortable:   false,
				Filterable: false,
			},
			"user_agent": {
				Name:       "user_agent",
				Column:     "el.user_agent",
				Sortable:   false,
				Filterable: false,
			},
			"ip_address": {
				Name:       "ip_address",
				Column:     "el.ip_address",
				Sortable:   false,
				Filterable: false,
			},
			"clicked_urls": {
				Name:       "clicked_urls",
				Column:     "el.clicked_urls",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "el.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "el.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]logFieldConfig{
			"id": {
				Name:       "id",
				Column:     "el.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "el.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "el.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"queue_id": {
				Name:       "queue_id",
				Column:     "el.queue_id",
				Sortable:   false,
				Filterable: true,
			},
			"message_id": {
				Name:       "message_id",
				Column:     "el.message_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "el.status",
				Sortable:   false,
				Filterable: true,
			},
			"provider_response": {
				Name:       "provider_response",
				Column:     "el.provider_response",
				Sortable:   false,
				Filterable: false,
			},
			"opened_at": {
				Name:       "opened_at",
				Column:     "el.opened_at",
				Sortable:   false,
				Filterable: false,
			},
			"clicked_at": {
				Name:       "clicked_at",
				Column:     "el.clicked_at",
				Sortable:   false,
				Filterable: false,
			},
			"bounced_at": {
				Name:       "bounced_at",
				Column:     "el.bounced_at",
				Sortable:   false,
				Filterable: false,
			},
			"complained_at": {
				Name:       "complained_at",
				Column:     "el.complained_at",
				Sortable:   false,
				Filterable: false,
			},
			"unsubscribed_at": {
				Name:       "unsubscribed_at",
				Column:     "el.unsubscribed_at",
				Sortable:   false,
				Filterable: false,
			},
			"bounce_type": {
				Name:       "bounce_type",
				Column:     "el.bounce_type",
				Sortable:   false,
				Filterable: false,
			},
			"bounce_reason": {
				Name:       "bounce_reason",
				Column:     "el.bounce_reason",
				Sortable:   false,
				Filterable: false,
			},
			"webhook_events": {
				Name:       "webhook_events",
				Column:     "el.webhook_events",
				Sortable:   false,
				Filterable: false,
			},
			"user_agent": {
				Name:       "user_agent",
				Column:     "el.user_agent",
				Sortable:   false,
				Filterable: false,
			},
			"ip_address": {
				Name:       "ip_address",
				Column:     "el.ip_address",
				Sortable:   false,
				Filterable: false,
			},
			"clicked_urls": {
				Name:       "clicked_urls",
				Column:     "el.clicked_urls",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "el.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "el.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
		Queue        string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		Queue:        "Queue",
	},
}

// LogQueryBuilder provides a fluent interface for building queries
type LogQueryBuilder struct {
	query *bun.SelectQuery
}

// NewLogQuery creates a new query builder
func NewLogQuery(db bun.IDB) *LogQueryBuilder {
	return &LogQueryBuilder{
		query: db.NewSelect().Model((*Log)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func LogFromQuery(q *bun.SelectQuery) *LogQueryBuilder {
	return &LogQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *LogQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *LogQueryBuilder) Model(model interface{}) *LogQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *LogQueryBuilder) WhereIDEQ(v pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *LogQueryBuilder) WhereIDNEQ(v pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *LogQueryBuilder) WhereIDIn(v []pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *LogQueryBuilder) WhereIDNotIn(v []pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *LogQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *LogQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *LogQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *LogQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *LogQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *LogQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *LogQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *LogQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereQueueIDEQ adds a WHERE queue_id = ? condition
func (b *LogQueryBuilder) WhereQueueIDEQ(v pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.QueueIDEQ(b.query, v)
	return b
}

// WhereQueueIDNEQ adds a WHERE queue_id != ? condition
func (b *LogQueryBuilder) WhereQueueIDNEQ(v pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.QueueIDNEQ(b.query, v)
	return b
}

// WhereQueueIDIn adds a WHERE queue_id IN (?) condition
func (b *LogQueryBuilder) WhereQueueIDIn(v []pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.QueueIDIn(b.query, v)
	return b
}

// WhereQueueIDNotIn adds a WHERE queue_id NOT IN (?) condition
func (b *LogQueryBuilder) WhereQueueIDNotIn(v []pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.QueueIDNotIn(b.query, v)
	return b
}

// WhereMessageIDEQ adds a WHERE message_id = ? condition
func (b *LogQueryBuilder) WhereMessageIDEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.MessageIDEQ(b.query, v)
	return b
}

// WhereMessageIDNEQ adds a WHERE message_id != ? condition
func (b *LogQueryBuilder) WhereMessageIDNEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.MessageIDNEQ(b.query, v)
	return b
}

// WhereMessageIDIn adds a WHERE message_id IN (?) condition
func (b *LogQueryBuilder) WhereMessageIDIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.MessageIDIn(b.query, v)
	return b
}

// WhereMessageIDNotIn adds a WHERE message_id NOT IN (?) condition
func (b *LogQueryBuilder) WhereMessageIDNotIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.MessageIDNotIn(b.query, v)
	return b
}

// WhereMessageIDContains adds a WHERE message_id LIKE ? condition
func (b *LogQueryBuilder) WhereMessageIDContains(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.MessageIDContains(b.query, v)
	return b
}

// WhereMessageIDHasPrefix adds a WHERE message_id LIKE ? condition
func (b *LogQueryBuilder) WhereMessageIDHasPrefix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.MessageIDHasPrefix(b.query, v)
	return b
}

// WhereMessageIDHasSuffix adds a WHERE message_id LIKE ? condition
func (b *LogQueryBuilder) WhereMessageIDHasSuffix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.MessageIDHasSuffix(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *LogQueryBuilder) WhereStatusEQ(v LogStatus) *LogQueryBuilder {
	b.query = LogQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *LogQueryBuilder) WhereStatusNEQ(v LogStatus) *LogQueryBuilder {
	b.query = LogQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *LogQueryBuilder) WhereStatusIn(v []LogStatus) *LogQueryBuilder {
	b.query = LogQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *LogQueryBuilder) WhereStatusNotIn(v []LogStatus) *LogQueryBuilder {
	b.query = LogQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereProviderResponseEQ adds a WHERE provider_response = ? condition
func (b *LogQueryBuilder) WhereProviderResponseEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.ProviderResponseEQ(b.query, v)
	return b
}

// WhereProviderResponseNEQ adds a WHERE provider_response != ? condition
func (b *LogQueryBuilder) WhereProviderResponseNEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.ProviderResponseNEQ(b.query, v)
	return b
}

// WhereProviderResponseIn adds a WHERE provider_response IN (?) condition
func (b *LogQueryBuilder) WhereProviderResponseIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.ProviderResponseIn(b.query, v)
	return b
}

// WhereProviderResponseNotIn adds a WHERE provider_response NOT IN (?) condition
func (b *LogQueryBuilder) WhereProviderResponseNotIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.ProviderResponseNotIn(b.query, v)
	return b
}

// WhereProviderResponseContains adds a WHERE provider_response LIKE ? condition
func (b *LogQueryBuilder) WhereProviderResponseContains(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.ProviderResponseContains(b.query, v)
	return b
}

// WhereProviderResponseHasPrefix adds a WHERE provider_response LIKE ? condition
func (b *LogQueryBuilder) WhereProviderResponseHasPrefix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.ProviderResponseHasPrefix(b.query, v)
	return b
}

// WhereProviderResponseHasSuffix adds a WHERE provider_response LIKE ? condition
func (b *LogQueryBuilder) WhereProviderResponseHasSuffix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.ProviderResponseHasSuffix(b.query, v)
	return b
}

// WhereOpenedAtEQ adds a WHERE opened_at = ? condition
func (b *LogQueryBuilder) WhereOpenedAtEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.OpenedAtEQ(b.query, v)
	return b
}

// WhereOpenedAtNEQ adds a WHERE opened_at != ? condition
func (b *LogQueryBuilder) WhereOpenedAtNEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.OpenedAtNEQ(b.query, v)
	return b
}

// WhereOpenedAtIn adds a WHERE opened_at IN (?) condition
func (b *LogQueryBuilder) WhereOpenedAtIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.OpenedAtIn(b.query, v)
	return b
}

// WhereOpenedAtNotIn adds a WHERE opened_at NOT IN (?) condition
func (b *LogQueryBuilder) WhereOpenedAtNotIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.OpenedAtNotIn(b.query, v)
	return b
}

// WhereClickedAtEQ adds a WHERE clicked_at = ? condition
func (b *LogQueryBuilder) WhereClickedAtEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.ClickedAtEQ(b.query, v)
	return b
}

// WhereClickedAtNEQ adds a WHERE clicked_at != ? condition
func (b *LogQueryBuilder) WhereClickedAtNEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.ClickedAtNEQ(b.query, v)
	return b
}

// WhereClickedAtIn adds a WHERE clicked_at IN (?) condition
func (b *LogQueryBuilder) WhereClickedAtIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.ClickedAtIn(b.query, v)
	return b
}

// WhereClickedAtNotIn adds a WHERE clicked_at NOT IN (?) condition
func (b *LogQueryBuilder) WhereClickedAtNotIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.ClickedAtNotIn(b.query, v)
	return b
}

// WhereBouncedAtEQ adds a WHERE bounced_at = ? condition
func (b *LogQueryBuilder) WhereBouncedAtEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.BouncedAtEQ(b.query, v)
	return b
}

// WhereBouncedAtNEQ adds a WHERE bounced_at != ? condition
func (b *LogQueryBuilder) WhereBouncedAtNEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.BouncedAtNEQ(b.query, v)
	return b
}

// WhereBouncedAtIn adds a WHERE bounced_at IN (?) condition
func (b *LogQueryBuilder) WhereBouncedAtIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.BouncedAtIn(b.query, v)
	return b
}

// WhereBouncedAtNotIn adds a WHERE bounced_at NOT IN (?) condition
func (b *LogQueryBuilder) WhereBouncedAtNotIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.BouncedAtNotIn(b.query, v)
	return b
}

// WhereComplainedAtEQ adds a WHERE complained_at = ? condition
func (b *LogQueryBuilder) WhereComplainedAtEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.ComplainedAtEQ(b.query, v)
	return b
}

// WhereComplainedAtNEQ adds a WHERE complained_at != ? condition
func (b *LogQueryBuilder) WhereComplainedAtNEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.ComplainedAtNEQ(b.query, v)
	return b
}

// WhereComplainedAtIn adds a WHERE complained_at IN (?) condition
func (b *LogQueryBuilder) WhereComplainedAtIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.ComplainedAtIn(b.query, v)
	return b
}

// WhereComplainedAtNotIn adds a WHERE complained_at NOT IN (?) condition
func (b *LogQueryBuilder) WhereComplainedAtNotIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.ComplainedAtNotIn(b.query, v)
	return b
}

// WhereUnsubscribedAtEQ adds a WHERE unsubscribed_at = ? condition
func (b *LogQueryBuilder) WhereUnsubscribedAtEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.UnsubscribedAtEQ(b.query, v)
	return b
}

// WhereUnsubscribedAtNEQ adds a WHERE unsubscribed_at != ? condition
func (b *LogQueryBuilder) WhereUnsubscribedAtNEQ(v *int64) *LogQueryBuilder {
	b.query = LogQuery.Where.UnsubscribedAtNEQ(b.query, v)
	return b
}

// WhereUnsubscribedAtIn adds a WHERE unsubscribed_at IN (?) condition
func (b *LogQueryBuilder) WhereUnsubscribedAtIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.UnsubscribedAtIn(b.query, v)
	return b
}

// WhereUnsubscribedAtNotIn adds a WHERE unsubscribed_at NOT IN (?) condition
func (b *LogQueryBuilder) WhereUnsubscribedAtNotIn(v []*int64) *LogQueryBuilder {
	b.query = LogQuery.Where.UnsubscribedAtNotIn(b.query, v)
	return b
}

// WhereBounceTypeEQ adds a WHERE bounce_type = ? condition
func (b *LogQueryBuilder) WhereBounceTypeEQ(v *BounceType) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceTypeEQ(b.query, v)
	return b
}

// WhereBounceTypeNEQ adds a WHERE bounce_type != ? condition
func (b *LogQueryBuilder) WhereBounceTypeNEQ(v *BounceType) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceTypeNEQ(b.query, v)
	return b
}

// WhereBounceTypeIn adds a WHERE bounce_type IN (?) condition
func (b *LogQueryBuilder) WhereBounceTypeIn(v []*BounceType) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceTypeIn(b.query, v)
	return b
}

// WhereBounceTypeNotIn adds a WHERE bounce_type NOT IN (?) condition
func (b *LogQueryBuilder) WhereBounceTypeNotIn(v []*BounceType) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceTypeNotIn(b.query, v)
	return b
}

// WhereBounceReasonEQ adds a WHERE bounce_reason = ? condition
func (b *LogQueryBuilder) WhereBounceReasonEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceReasonEQ(b.query, v)
	return b
}

// WhereBounceReasonNEQ adds a WHERE bounce_reason != ? condition
func (b *LogQueryBuilder) WhereBounceReasonNEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceReasonNEQ(b.query, v)
	return b
}

// WhereBounceReasonIn adds a WHERE bounce_reason IN (?) condition
func (b *LogQueryBuilder) WhereBounceReasonIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceReasonIn(b.query, v)
	return b
}

// WhereBounceReasonNotIn adds a WHERE bounce_reason NOT IN (?) condition
func (b *LogQueryBuilder) WhereBounceReasonNotIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceReasonNotIn(b.query, v)
	return b
}

// WhereBounceReasonContains adds a WHERE bounce_reason LIKE ? condition
func (b *LogQueryBuilder) WhereBounceReasonContains(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceReasonContains(b.query, v)
	return b
}

// WhereBounceReasonHasPrefix adds a WHERE bounce_reason LIKE ? condition
func (b *LogQueryBuilder) WhereBounceReasonHasPrefix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceReasonHasPrefix(b.query, v)
	return b
}

// WhereBounceReasonHasSuffix adds a WHERE bounce_reason LIKE ? condition
func (b *LogQueryBuilder) WhereBounceReasonHasSuffix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.BounceReasonHasSuffix(b.query, v)
	return b
}

// WhereWebhookEventsEQ adds a WHERE webhook_events = ? condition
func (b *LogQueryBuilder) WhereWebhookEventsEQ(v []WebhookEvent) *LogQueryBuilder {
	b.query = LogQuery.Where.WebhookEventsEQ(b.query, v)
	return b
}

// WhereWebhookEventsNEQ adds a WHERE webhook_events != ? condition
func (b *LogQueryBuilder) WhereWebhookEventsNEQ(v []WebhookEvent) *LogQueryBuilder {
	b.query = LogQuery.Where.WebhookEventsNEQ(b.query, v)
	return b
}

// WhereWebhookEventsIn adds a WHERE webhook_events IN (?) condition
func (b *LogQueryBuilder) WhereWebhookEventsIn(v [][]WebhookEvent) *LogQueryBuilder {
	b.query = LogQuery.Where.WebhookEventsIn(b.query, v)
	return b
}

// WhereWebhookEventsNotIn adds a WHERE webhook_events NOT IN (?) condition
func (b *LogQueryBuilder) WhereWebhookEventsNotIn(v [][]WebhookEvent) *LogQueryBuilder {
	b.query = LogQuery.Where.WebhookEventsNotIn(b.query, v)
	return b
}

// WhereUserAgentEQ adds a WHERE user_agent = ? condition
func (b *LogQueryBuilder) WhereUserAgentEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.UserAgentEQ(b.query, v)
	return b
}

// WhereUserAgentNEQ adds a WHERE user_agent != ? condition
func (b *LogQueryBuilder) WhereUserAgentNEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.UserAgentNEQ(b.query, v)
	return b
}

// WhereUserAgentIn adds a WHERE user_agent IN (?) condition
func (b *LogQueryBuilder) WhereUserAgentIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.UserAgentIn(b.query, v)
	return b
}

// WhereUserAgentNotIn adds a WHERE user_agent NOT IN (?) condition
func (b *LogQueryBuilder) WhereUserAgentNotIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.UserAgentNotIn(b.query, v)
	return b
}

// WhereUserAgentContains adds a WHERE user_agent LIKE ? condition
func (b *LogQueryBuilder) WhereUserAgentContains(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.UserAgentContains(b.query, v)
	return b
}

// WhereUserAgentHasPrefix adds a WHERE user_agent LIKE ? condition
func (b *LogQueryBuilder) WhereUserAgentHasPrefix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.UserAgentHasPrefix(b.query, v)
	return b
}

// WhereUserAgentHasSuffix adds a WHERE user_agent LIKE ? condition
func (b *LogQueryBuilder) WhereUserAgentHasSuffix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.UserAgentHasSuffix(b.query, v)
	return b
}

// WhereIPAddressEQ adds a WHERE ip_address = ? condition
func (b *LogQueryBuilder) WhereIPAddressEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.IPAddressEQ(b.query, v)
	return b
}

// WhereIPAddressNEQ adds a WHERE ip_address != ? condition
func (b *LogQueryBuilder) WhereIPAddressNEQ(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.IPAddressNEQ(b.query, v)
	return b
}

// WhereIPAddressIn adds a WHERE ip_address IN (?) condition
func (b *LogQueryBuilder) WhereIPAddressIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.IPAddressIn(b.query, v)
	return b
}

// WhereIPAddressNotIn adds a WHERE ip_address NOT IN (?) condition
func (b *LogQueryBuilder) WhereIPAddressNotIn(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.IPAddressNotIn(b.query, v)
	return b
}

// WhereIPAddressContains adds a WHERE ip_address LIKE ? condition
func (b *LogQueryBuilder) WhereIPAddressContains(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.IPAddressContains(b.query, v)
	return b
}

// WhereIPAddressHasPrefix adds a WHERE ip_address LIKE ? condition
func (b *LogQueryBuilder) WhereIPAddressHasPrefix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.IPAddressHasPrefix(b.query, v)
	return b
}

// WhereIPAddressHasSuffix adds a WHERE ip_address LIKE ? condition
func (b *LogQueryBuilder) WhereIPAddressHasSuffix(v string) *LogQueryBuilder {
	b.query = LogQuery.Where.IPAddressHasSuffix(b.query, v)
	return b
}

// WhereClickedURLsEQ adds a WHERE clicked_urls = ? condition
func (b *LogQueryBuilder) WhereClickedURLsEQ(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.ClickedURLsEQ(b.query, v)
	return b
}

// WhereClickedURLsNEQ adds a WHERE clicked_urls != ? condition
func (b *LogQueryBuilder) WhereClickedURLsNEQ(v []string) *LogQueryBuilder {
	b.query = LogQuery.Where.ClickedURLsNEQ(b.query, v)
	return b
}

// WhereClickedURLsIn adds a WHERE clicked_urls IN (?) condition
func (b *LogQueryBuilder) WhereClickedURLsIn(v [][]string) *LogQueryBuilder {
	b.query = LogQuery.Where.ClickedURLsIn(b.query, v)
	return b
}

// WhereClickedURLsNotIn adds a WHERE clicked_urls NOT IN (?) condition
func (b *LogQueryBuilder) WhereClickedURLsNotIn(v [][]string) *LogQueryBuilder {
	b.query = LogQuery.Where.ClickedURLsNotIn(b.query, v)
	return b
}

// WhereMetadataEQ adds a WHERE metadata = ? condition
func (b *LogQueryBuilder) WhereMetadataEQ(v map[string]any) *LogQueryBuilder {
	b.query = LogQuery.Where.MetadataEQ(b.query, v)
	return b
}

// WhereMetadataNEQ adds a WHERE metadata != ? condition
func (b *LogQueryBuilder) WhereMetadataNEQ(v map[string]any) *LogQueryBuilder {
	b.query = LogQuery.Where.MetadataNEQ(b.query, v)
	return b
}

// WhereMetadataIn adds a WHERE metadata IN (?) condition
func (b *LogQueryBuilder) WhereMetadataIn(v []map[string]any) *LogQueryBuilder {
	b.query = LogQuery.Where.MetadataIn(b.query, v)
	return b
}

// WhereMetadataNotIn adds a WHERE metadata NOT IN (?) condition
func (b *LogQueryBuilder) WhereMetadataNotIn(v []map[string]any) *LogQueryBuilder {
	b.query = LogQuery.Where.MetadataNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *LogQueryBuilder) WhereCreatedAtEQ(v int64) *LogQueryBuilder {
	b.query = LogQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *LogQueryBuilder) WhereCreatedAtNEQ(v int64) *LogQueryBuilder {
	b.query = LogQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *LogQueryBuilder) WhereCreatedAtGT(v int64) *LogQueryBuilder {
	b.query = LogQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *LogQueryBuilder) WhereCreatedAtGTE(v int64) *LogQueryBuilder {
	b.query = LogQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *LogQueryBuilder) WhereCreatedAtLT(v int64) *LogQueryBuilder {
	b.query = LogQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *LogQueryBuilder) WhereCreatedAtLTE(v int64) *LogQueryBuilder {
	b.query = LogQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *LogQueryBuilder) WhereCreatedAtIn(v []int64) *LogQueryBuilder {
	b.query = LogQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *LogQueryBuilder) WhereCreatedAtNotIn(v []int64) *LogQueryBuilder {
	b.query = LogQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *LogQueryBuilder) WhereTenant(orgID, buID pulid.ID) *LogQueryBuilder {
	b.query = LogQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *LogQueryBuilder) WhereGroup(sep string, fn func(*LogQueryBuilder) *LogQueryBuilder) *LogQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &LogQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *LogQueryBuilder) Where(query string, args ...interface{}) *LogQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *LogQueryBuilder) OrderBy(column string, desc ...bool) *LogQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(LogQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *LogQueryBuilder) Limit(n int) *LogQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *LogQueryBuilder) Offset(n int) *LogQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *LogQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *LogQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *LogQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *LogQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *LogQueryBuilder) All(ctx context.Context) ([]*Log, error) {
	var entities []*Log
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *LogQueryBuilder) AllWithCount(ctx context.Context) ([]*Log, int, error) {
	var entities []*Log
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *LogQueryBuilder) One(ctx context.Context) (*Log, error) {
	entity := new(Log)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *LogQueryBuilder) First(ctx context.Context) (*Log, error) {
	entity := new(Log)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// LogBuild creates a chainable query builder
func LogBuild(db bun.IDB) *LogQueryBuilder {
	return NewLogQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *LogQueryBuilder) LoadBusinessUnit() *LogQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *LogQueryBuilder) LoadOrganization() *LogQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadQueue loads the Queue relationship
func (b *LogQueryBuilder) LoadQueue() *LogQueryBuilder {
	b.query = b.query.Relation("Queue")
	return b
}

// LoadAllRelations loads all relationships for Log
func (b *LogQueryBuilder) LoadAllRelations() *LogQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadQueue()
	return b
}
