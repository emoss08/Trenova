/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package email

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// profileFieldConfig provides field configuration for Profile
type profileFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ProfileQuery provides type-safe query helpers and constants
var ProfileQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                 string
		BusinessUnitID     string
		OrganizationID     string
		Name               string
		Description        string
		Status             string
		ProviderType       string
		AuthType           string
		EncryptionType     string
		Host               string
		Username           string
		EncryptedPassword  string
		EncryptedAPIKey    string
		OAuth2ClientID     string
		OAuth2ClientSecret string
		OAuth2TenantID     string
		FromAddress        string
		FromName           string
		ReplyTo            string
		Port               string
		MaxConnections     string
		TimeoutSeconds     string
		RetryCount         string
		RetryDelaySeconds  string
		RateLimitPerMinute string
		RateLimitPerHour   string
		RateLimitPerDay    string
		Version            string
		CreatedAt          string
		UpdatedAt          string
		Metadata           string
		IsDefault          string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ                    func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                   func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                    func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                 func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		ProviderTypeEQ              func(q *bun.SelectQuery, v ProviderType) *bun.SelectQuery
		ProviderTypeNEQ             func(q *bun.SelectQuery, v ProviderType) *bun.SelectQuery
		ProviderTypeIn              func(q *bun.SelectQuery, v []ProviderType) *bun.SelectQuery
		ProviderTypeNotIn           func(q *bun.SelectQuery, v []ProviderType) *bun.SelectQuery
		AuthTypeEQ                  func(q *bun.SelectQuery, v AuthType) *bun.SelectQuery
		AuthTypeNEQ                 func(q *bun.SelectQuery, v AuthType) *bun.SelectQuery
		AuthTypeIn                  func(q *bun.SelectQuery, v []AuthType) *bun.SelectQuery
		AuthTypeNotIn               func(q *bun.SelectQuery, v []AuthType) *bun.SelectQuery
		EncryptionTypeEQ            func(q *bun.SelectQuery, v EncryptionType) *bun.SelectQuery
		EncryptionTypeNEQ           func(q *bun.SelectQuery, v EncryptionType) *bun.SelectQuery
		EncryptionTypeIn            func(q *bun.SelectQuery, v []EncryptionType) *bun.SelectQuery
		EncryptionTypeNotIn         func(q *bun.SelectQuery, v []EncryptionType) *bun.SelectQuery
		HostEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HostNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HostGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UsernameNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UsernameGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EncryptedPasswordNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EncryptedPasswordGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EncryptedAPIKeyNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EncryptedAPIKeyGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2ClientIDNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2ClientIDGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2ClientSecretNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2ClientSecretGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2TenantIDNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2TenantIDGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromAddressNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromAddressGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromNameNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromNameGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReplyToNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReplyToGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PortEQ                      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortNEQ                     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortIn                      func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		PortNotIn                   func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		PortGT                      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortGTE                     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortLT                      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortLTE                     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxConnectionsNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxConnectionsGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		TimeoutSecondsNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		TimeoutSecondsGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountEQ                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountNEQ               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountIn                func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountNotIn             func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountGT                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountGTE               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLT                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLTE               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsNEQ        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryDelaySecondsNotIn      func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryDelaySecondsGT         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsGTE        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsLT         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsLTE        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteEQ        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteNEQ       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteIn        func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerMinuteNotIn     func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerMinuteGT        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteGTE       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteLT        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteLTE       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerHourNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerHourGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayNEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayIn           func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerDayNotIn        func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerDayGT           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayGTE          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayLT           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayLTE          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		VersionEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MetadataEQ                  func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ                 func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn                  func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn               func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		IsDefaultEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsDefaultNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]profileFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
	}
}{
	// Table and alias constants
	Table:    "email_profiles",
	Alias:    "ep",
	IDPrefix: "ep_",

	// Field names
	Field: struct {
		ID                 string
		BusinessUnitID     string
		OrganizationID     string
		Name               string
		Description        string
		Status             string
		ProviderType       string
		AuthType           string
		EncryptionType     string
		Host               string
		Username           string
		EncryptedPassword  string
		EncryptedAPIKey    string
		OAuth2ClientID     string
		OAuth2ClientSecret string
		OAuth2TenantID     string
		FromAddress        string
		FromName           string
		ReplyTo            string
		Port               string
		MaxConnections     string
		TimeoutSeconds     string
		RetryCount         string
		RetryDelaySeconds  string
		RateLimitPerMinute string
		RateLimitPerHour   string
		RateLimitPerDay    string
		Version            string
		CreatedAt          string
		UpdatedAt          string
		Metadata           string
		IsDefault          string
	}{
		ID:                 "id",
		BusinessUnitID:     "business_unit_id",
		OrganizationID:     "organization_id",
		Name:               "name",
		Description:        "description",
		Status:             "status",
		ProviderType:       "provider_type",
		AuthType:           "auth_type",
		EncryptionType:     "encryption_type",
		Host:               "host",
		Username:           "username",
		EncryptedPassword:  "encrypted_password",
		EncryptedAPIKey:    "encrypted_api_key",
		OAuth2ClientID:     "oauth2_client_id",
		OAuth2ClientSecret: "oauth2_client_secret",
		OAuth2TenantID:     "oauth2_tenant_id",
		FromAddress:        "from_address",
		FromName:           "from_name",
		ReplyTo:            "reply_to",
		Port:               "port",
		MaxConnections:     "max_connections",
		TimeoutSeconds:     "timeout_seconds",
		RetryCount:         "retry_count",
		RetryDelaySeconds:  "retry_delay_seconds",
		RateLimitPerMinute: "rate_limit_per_minute",
		RateLimitPerHour:   "rate_limit_per_hour",
		RateLimitPerDay:    "rate_limit_per_day",
		Version:            "version",
		CreatedAt:          "created_at",
		UpdatedAt:          "updated_at",
		Metadata:           "metadata",
		IsDefault:          "is_default",
	},

	// Column helpers
	Column: func(field string) string {
		return "ep." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "ep." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ                    func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                   func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                    func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                 func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		ProviderTypeEQ              func(q *bun.SelectQuery, v ProviderType) *bun.SelectQuery
		ProviderTypeNEQ             func(q *bun.SelectQuery, v ProviderType) *bun.SelectQuery
		ProviderTypeIn              func(q *bun.SelectQuery, v []ProviderType) *bun.SelectQuery
		ProviderTypeNotIn           func(q *bun.SelectQuery, v []ProviderType) *bun.SelectQuery
		AuthTypeEQ                  func(q *bun.SelectQuery, v AuthType) *bun.SelectQuery
		AuthTypeNEQ                 func(q *bun.SelectQuery, v AuthType) *bun.SelectQuery
		AuthTypeIn                  func(q *bun.SelectQuery, v []AuthType) *bun.SelectQuery
		AuthTypeNotIn               func(q *bun.SelectQuery, v []AuthType) *bun.SelectQuery
		EncryptionTypeEQ            func(q *bun.SelectQuery, v EncryptionType) *bun.SelectQuery
		EncryptionTypeNEQ           func(q *bun.SelectQuery, v EncryptionType) *bun.SelectQuery
		EncryptionTypeIn            func(q *bun.SelectQuery, v []EncryptionType) *bun.SelectQuery
		EncryptionTypeNotIn         func(q *bun.SelectQuery, v []EncryptionType) *bun.SelectQuery
		HostEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HostNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HostGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HostHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UsernameNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UsernameGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EncryptedPasswordNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EncryptedPasswordGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedPasswordHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EncryptedAPIKeyNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EncryptedAPIKeyGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EncryptedAPIKeyHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2ClientIDNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2ClientIDGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientIDHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2ClientSecretNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2ClientSecretGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2ClientSecretHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2TenantIDNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OAuth2TenantIDGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OAuth2TenantIDHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromAddressNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromAddressGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromAddressHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromNameNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromNameGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromNameHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReplyToNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReplyToGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReplyToHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PortEQ                      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortNEQ                     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortIn                      func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		PortNotIn                   func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		PortGT                      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortGTE                     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortLT                      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PortLTE                     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxConnectionsNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxConnectionsGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxConnectionsLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		TimeoutSecondsNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		TimeoutSecondsGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		TimeoutSecondsLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountEQ                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountNEQ               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountIn                func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountNotIn             func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountGT                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountGTE               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLT                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLTE               func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsNEQ        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryDelaySecondsNotIn      func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryDelaySecondsGT         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsGTE        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsLT         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryDelaySecondsLTE        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteEQ        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteNEQ       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteIn        func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerMinuteNotIn     func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerMinuteGT        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteGTE       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteLT        func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerMinuteLTE       func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerHourNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerHourGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerHourLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayNEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayIn           func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerDayNotIn        func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RateLimitPerDayGT           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayGTE          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayLT           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RateLimitPerDayLTE          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		VersionEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MetadataEQ                  func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ                 func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn                  func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn               func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		IsDefaultEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsDefaultNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		Tenant                      func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.organization_id"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.description"), "%"+v)
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.status"), bun.In(v))
		},
		ProviderTypeEQ: func(q *bun.SelectQuery, v ProviderType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.provider_type"), v)
		},
		ProviderTypeNEQ: func(q *bun.SelectQuery, v ProviderType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.provider_type"), v)
		},
		ProviderTypeIn: func(q *bun.SelectQuery, v []ProviderType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.provider_type"), bun.In(v))
		},
		ProviderTypeNotIn: func(q *bun.SelectQuery, v []ProviderType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.provider_type"), bun.In(v))
		},
		AuthTypeEQ: func(q *bun.SelectQuery, v AuthType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.auth_type"), v)
		},
		AuthTypeNEQ: func(q *bun.SelectQuery, v AuthType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.auth_type"), v)
		},
		AuthTypeIn: func(q *bun.SelectQuery, v []AuthType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.auth_type"), bun.In(v))
		},
		AuthTypeNotIn: func(q *bun.SelectQuery, v []AuthType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.auth_type"), bun.In(v))
		},
		EncryptionTypeEQ: func(q *bun.SelectQuery, v EncryptionType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.encryption_type"), v)
		},
		EncryptionTypeNEQ: func(q *bun.SelectQuery, v EncryptionType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.encryption_type"), v)
		},
		EncryptionTypeIn: func(q *bun.SelectQuery, v []EncryptionType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.encryption_type"), bun.In(v))
		},
		EncryptionTypeNotIn: func(q *bun.SelectQuery, v []EncryptionType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.encryption_type"), bun.In(v))
		},
		HostEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.host"), v)
		},
		HostNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.host"), v)
		},
		HostIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.host"), bun.In(v))
		},
		HostNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.host"), bun.In(v))
		},
		HostGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.host"), v)
		},
		HostGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.host"), v)
		},
		HostLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.host"), v)
		},
		HostLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.host"), v)
		},
		HostContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.host"), "%"+v+"%")
		},
		HostHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.host"), v+"%")
		},
		HostHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.host"), "%"+v)
		},
		UsernameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.username"), v)
		},
		UsernameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.username"), v)
		},
		UsernameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.username"), bun.In(v))
		},
		UsernameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.username"), bun.In(v))
		},
		UsernameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.username"), v)
		},
		UsernameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.username"), v)
		},
		UsernameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.username"), v)
		},
		UsernameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.username"), v)
		},
		UsernameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.username"), "%"+v+"%")
		},
		UsernameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.username"), v+"%")
		},
		UsernameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.username"), "%"+v)
		},
		EncryptedPasswordEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.encrypted_password"), v)
		},
		EncryptedPasswordNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.encrypted_password"), v)
		},
		EncryptedPasswordIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.encrypted_password"), bun.In(v))
		},
		EncryptedPasswordNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.encrypted_password"), bun.In(v))
		},
		EncryptedPasswordGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.encrypted_password"), v)
		},
		EncryptedPasswordGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.encrypted_password"), v)
		},
		EncryptedPasswordLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.encrypted_password"), v)
		},
		EncryptedPasswordLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.encrypted_password"), v)
		},
		EncryptedPasswordContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.encrypted_password"), "%"+v+"%")
		},
		EncryptedPasswordHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.encrypted_password"), v+"%")
		},
		EncryptedPasswordHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.encrypted_password"), "%"+v)
		},
		EncryptedAPIKeyEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.encrypted_api_key"), v)
		},
		EncryptedAPIKeyNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.encrypted_api_key"), v)
		},
		EncryptedAPIKeyIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.encrypted_api_key"), bun.In(v))
		},
		EncryptedAPIKeyNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.encrypted_api_key"), bun.In(v))
		},
		EncryptedAPIKeyGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.encrypted_api_key"), v)
		},
		EncryptedAPIKeyGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.encrypted_api_key"), v)
		},
		EncryptedAPIKeyLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.encrypted_api_key"), v)
		},
		EncryptedAPIKeyLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.encrypted_api_key"), v)
		},
		EncryptedAPIKeyContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.encrypted_api_key"), "%"+v+"%")
		},
		EncryptedAPIKeyHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.encrypted_api_key"), v+"%")
		},
		EncryptedAPIKeyHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.encrypted_api_key"), "%"+v)
		},
		OAuth2ClientIDEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.oauth2_client_id"), v)
		},
		OAuth2ClientIDNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.oauth2_client_id"), v)
		},
		OAuth2ClientIDIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.oauth2_client_id"), bun.In(v))
		},
		OAuth2ClientIDNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.oauth2_client_id"), bun.In(v))
		},
		OAuth2ClientIDGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.oauth2_client_id"), v)
		},
		OAuth2ClientIDGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.oauth2_client_id"), v)
		},
		OAuth2ClientIDLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.oauth2_client_id"), v)
		},
		OAuth2ClientIDLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.oauth2_client_id"), v)
		},
		OAuth2ClientIDContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.oauth2_client_id"), "%"+v+"%")
		},
		OAuth2ClientIDHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.oauth2_client_id"), v+"%")
		},
		OAuth2ClientIDHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.oauth2_client_id"), "%"+v)
		},
		OAuth2ClientSecretEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.oauth2_client_secret"), v)
		},
		OAuth2ClientSecretNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.oauth2_client_secret"), v)
		},
		OAuth2ClientSecretIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.oauth2_client_secret"), bun.In(v))
		},
		OAuth2ClientSecretNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.oauth2_client_secret"), bun.In(v))
		},
		OAuth2ClientSecretGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.oauth2_client_secret"), v)
		},
		OAuth2ClientSecretGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.oauth2_client_secret"), v)
		},
		OAuth2ClientSecretLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.oauth2_client_secret"), v)
		},
		OAuth2ClientSecretLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.oauth2_client_secret"), v)
		},
		OAuth2ClientSecretContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.oauth2_client_secret"), "%"+v+"%")
		},
		OAuth2ClientSecretHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.oauth2_client_secret"), v+"%")
		},
		OAuth2ClientSecretHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.oauth2_client_secret"), "%"+v)
		},
		OAuth2TenantIDEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.oauth2_tenant_id"), v)
		},
		OAuth2TenantIDNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.oauth2_tenant_id"), v)
		},
		OAuth2TenantIDIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.oauth2_tenant_id"), bun.In(v))
		},
		OAuth2TenantIDNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.oauth2_tenant_id"), bun.In(v))
		},
		OAuth2TenantIDGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.oauth2_tenant_id"), v)
		},
		OAuth2TenantIDGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.oauth2_tenant_id"), v)
		},
		OAuth2TenantIDLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.oauth2_tenant_id"), v)
		},
		OAuth2TenantIDLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.oauth2_tenant_id"), v)
		},
		OAuth2TenantIDContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.oauth2_tenant_id"), "%"+v+"%")
		},
		OAuth2TenantIDHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.oauth2_tenant_id"), v+"%")
		},
		OAuth2TenantIDHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.oauth2_tenant_id"), "%"+v)
		},
		FromAddressEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.from_address"), v)
		},
		FromAddressNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.from_address"), v)
		},
		FromAddressIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.from_address"), bun.In(v))
		},
		FromAddressNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.from_address"), bun.In(v))
		},
		FromAddressGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.from_address"), v)
		},
		FromAddressGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.from_address"), v)
		},
		FromAddressLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.from_address"), v)
		},
		FromAddressLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.from_address"), v)
		},
		FromAddressContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.from_address"), "%"+v+"%")
		},
		FromAddressHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.from_address"), v+"%")
		},
		FromAddressHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.from_address"), "%"+v)
		},
		FromNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.from_name"), v)
		},
		FromNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.from_name"), v)
		},
		FromNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.from_name"), bun.In(v))
		},
		FromNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.from_name"), bun.In(v))
		},
		FromNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.from_name"), v)
		},
		FromNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.from_name"), v)
		},
		FromNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.from_name"), v)
		},
		FromNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.from_name"), v)
		},
		FromNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.from_name"), "%"+v+"%")
		},
		FromNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.from_name"), v+"%")
		},
		FromNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.from_name"), "%"+v)
		},
		ReplyToEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.reply_to"), v)
		},
		ReplyToNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.reply_to"), v)
		},
		ReplyToIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.reply_to"), bun.In(v))
		},
		ReplyToNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.reply_to"), bun.In(v))
		},
		ReplyToGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.reply_to"), v)
		},
		ReplyToGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.reply_to"), v)
		},
		ReplyToLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.reply_to"), v)
		},
		ReplyToLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.reply_to"), v)
		},
		ReplyToContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.reply_to"), "%"+v+"%")
		},
		ReplyToHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.reply_to"), v+"%")
		},
		ReplyToHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ep.reply_to"), "%"+v)
		},
		PortEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.port"), v)
		},
		PortNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.port"), v)
		},
		PortIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.port"), bun.In(v))
		},
		PortNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.port"), bun.In(v))
		},
		PortGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.port"), v)
		},
		PortGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.port"), v)
		},
		PortLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.port"), v)
		},
		PortLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.port"), v)
		},
		MaxConnectionsEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.max_connections"), v)
		},
		MaxConnectionsNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.max_connections"), v)
		},
		MaxConnectionsIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.max_connections"), bun.In(v))
		},
		MaxConnectionsNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.max_connections"), bun.In(v))
		},
		MaxConnectionsGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.max_connections"), v)
		},
		MaxConnectionsGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.max_connections"), v)
		},
		MaxConnectionsLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.max_connections"), v)
		},
		MaxConnectionsLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.max_connections"), v)
		},
		TimeoutSecondsEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.timeout_seconds"), v)
		},
		TimeoutSecondsNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.timeout_seconds"), v)
		},
		TimeoutSecondsIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.timeout_seconds"), bun.In(v))
		},
		TimeoutSecondsNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.timeout_seconds"), bun.In(v))
		},
		TimeoutSecondsGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.timeout_seconds"), v)
		},
		TimeoutSecondsGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.timeout_seconds"), v)
		},
		TimeoutSecondsLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.timeout_seconds"), v)
		},
		TimeoutSecondsLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.timeout_seconds"), v)
		},
		RetryCountEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.retry_count"), v)
		},
		RetryCountNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.retry_count"), v)
		},
		RetryCountIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.retry_count"), bun.In(v))
		},
		RetryCountNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.retry_count"), bun.In(v))
		},
		RetryCountGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.retry_count"), v)
		},
		RetryCountGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.retry_count"), v)
		},
		RetryCountLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.retry_count"), v)
		},
		RetryCountLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.retry_count"), v)
		},
		RetryDelaySecondsEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.retry_delay_seconds"), v)
		},
		RetryDelaySecondsNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.retry_delay_seconds"), v)
		},
		RetryDelaySecondsIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.retry_delay_seconds"), bun.In(v))
		},
		RetryDelaySecondsNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.retry_delay_seconds"), bun.In(v))
		},
		RetryDelaySecondsGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.retry_delay_seconds"), v)
		},
		RetryDelaySecondsGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.retry_delay_seconds"), v)
		},
		RetryDelaySecondsLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.retry_delay_seconds"), v)
		},
		RetryDelaySecondsLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.retry_delay_seconds"), v)
		},
		RateLimitPerMinuteEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.rate_limit_per_minute"), v)
		},
		RateLimitPerMinuteNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.rate_limit_per_minute"), v)
		},
		RateLimitPerMinuteIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.rate_limit_per_minute"), bun.In(v))
		},
		RateLimitPerMinuteNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.rate_limit_per_minute"), bun.In(v))
		},
		RateLimitPerMinuteGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.rate_limit_per_minute"), v)
		},
		RateLimitPerMinuteGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.rate_limit_per_minute"), v)
		},
		RateLimitPerMinuteLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.rate_limit_per_minute"), v)
		},
		RateLimitPerMinuteLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.rate_limit_per_minute"), v)
		},
		RateLimitPerHourEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.rate_limit_per_hour"), v)
		},
		RateLimitPerHourNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.rate_limit_per_hour"), v)
		},
		RateLimitPerHourIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.rate_limit_per_hour"), bun.In(v))
		},
		RateLimitPerHourNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.rate_limit_per_hour"), bun.In(v))
		},
		RateLimitPerHourGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.rate_limit_per_hour"), v)
		},
		RateLimitPerHourGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.rate_limit_per_hour"), v)
		},
		RateLimitPerHourLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.rate_limit_per_hour"), v)
		},
		RateLimitPerHourLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.rate_limit_per_hour"), v)
		},
		RateLimitPerDayEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.rate_limit_per_day"), v)
		},
		RateLimitPerDayNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.rate_limit_per_day"), v)
		},
		RateLimitPerDayIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.rate_limit_per_day"), bun.In(v))
		},
		RateLimitPerDayNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.rate_limit_per_day"), bun.In(v))
		},
		RateLimitPerDayGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.rate_limit_per_day"), v)
		},
		RateLimitPerDayGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.rate_limit_per_day"), v)
		},
		RateLimitPerDayLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.rate_limit_per_day"), v)
		},
		RateLimitPerDayLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.rate_limit_per_day"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ep.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ep.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ep.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ep.updated_at"), v)
		},
		MetadataEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.metadata"), v)
		},
		MetadataNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.metadata"), v)
		},
		MetadataIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.metadata"), bun.In(v))
		},
		MetadataNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.metadata"), bun.In(v))
		},
		IsDefaultEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ep.is_default"), v)
		},
		IsDefaultNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ep.is_default"), v)
		},
		IsDefaultIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ep.is_default"), bun.In(v))
		},
		IsDefaultNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ep.is_default"), bun.In(v))
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("ep.organization_id"), orgID).
				Where("? = ?", bun.Ident("ep.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("ep.id"), id).
				Where("? = ?", bun.Ident("ep.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "ep." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"ep.status ASC",
				"ep.name ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "ep.status DESC"
			}
			return "ep.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "ep.created_at DESC"
			}
			return "ep.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "ep.updated_at DESC"
			}
			return "ep.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]profileFieldConfig {
		return map[string]profileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ep.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ep.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ep.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "ep.name",
				Sortable:   true,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "ep.description",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "ep.status",
				Sortable:   true,
				Filterable: true,
			},
			"provider_type": {
				Name:       "provider_type",
				Column:     "ep.provider_type",
				Sortable:   false,
				Filterable: false,
			},
			"auth_type": {
				Name:       "auth_type",
				Column:     "ep.auth_type",
				Sortable:   false,
				Filterable: false,
			},
			"encryption_type": {
				Name:       "encryption_type",
				Column:     "ep.encryption_type",
				Sortable:   false,
				Filterable: false,
			},
			"host": {
				Name:       "host",
				Column:     "ep.host",
				Sortable:   false,
				Filterable: false,
			},
			"username": {
				Name:       "username",
				Column:     "ep.username",
				Sortable:   false,
				Filterable: false,
			},
			"encrypted_password": {
				Name:       "encrypted_password",
				Column:     "ep.encrypted_password",
				Sortable:   false,
				Filterable: false,
			},
			"encrypted_api_key": {
				Name:       "encrypted_api_key",
				Column:     "ep.encrypted_api_key",
				Sortable:   false,
				Filterable: false,
			},
			"oauth2_client_id": {
				Name:       "oauth2_client_id",
				Column:     "ep.oauth2_client_id",
				Sortable:   false,
				Filterable: true,
			},
			"oauth2_client_secret": {
				Name:       "oauth2_client_secret",
				Column:     "ep.oauth2_client_secret",
				Sortable:   false,
				Filterable: false,
			},
			"oauth2_tenant_id": {
				Name:       "oauth2_tenant_id",
				Column:     "ep.oauth2_tenant_id",
				Sortable:   false,
				Filterable: true,
			},
			"from_address": {
				Name:       "from_address",
				Column:     "ep.from_address",
				Sortable:   false,
				Filterable: false,
			},
			"from_name": {
				Name:       "from_name",
				Column:     "ep.from_name",
				Sortable:   false,
				Filterable: false,
			},
			"reply_to": {
				Name:       "reply_to",
				Column:     "ep.reply_to",
				Sortable:   false,
				Filterable: false,
			},
			"port": {
				Name:       "port",
				Column:     "ep.port",
				Sortable:   false,
				Filterable: false,
			},
			"max_connections": {
				Name:       "max_connections",
				Column:     "ep.max_connections",
				Sortable:   false,
				Filterable: false,
			},
			"timeout_seconds": {
				Name:       "timeout_seconds",
				Column:     "ep.timeout_seconds",
				Sortable:   false,
				Filterable: false,
			},
			"retry_count": {
				Name:       "retry_count",
				Column:     "ep.retry_count",
				Sortable:   false,
				Filterable: false,
			},
			"retry_delay_seconds": {
				Name:       "retry_delay_seconds",
				Column:     "ep.retry_delay_seconds",
				Sortable:   false,
				Filterable: false,
			},
			"rate_limit_per_minute": {
				Name:       "rate_limit_per_minute",
				Column:     "ep.rate_limit_per_minute",
				Sortable:   false,
				Filterable: false,
			},
			"rate_limit_per_hour": {
				Name:       "rate_limit_per_hour",
				Column:     "ep.rate_limit_per_hour",
				Sortable:   false,
				Filterable: false,
			},
			"rate_limit_per_day": {
				Name:       "rate_limit_per_day",
				Column:     "ep.rate_limit_per_day",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "ep.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ep.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ep.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "ep.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "ep.is_default",
				Sortable:   false,
				Filterable: false,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]profileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ep.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ep.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ep.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "ep.name",
				Sortable:   true,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "ep.description",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "ep.status",
				Sortable:   true,
				Filterable: true,
			},
			"provider_type": {
				Name:       "provider_type",
				Column:     "ep.provider_type",
				Sortable:   false,
				Filterable: false,
			},
			"auth_type": {
				Name:       "auth_type",
				Column:     "ep.auth_type",
				Sortable:   false,
				Filterable: false,
			},
			"encryption_type": {
				Name:       "encryption_type",
				Column:     "ep.encryption_type",
				Sortable:   false,
				Filterable: false,
			},
			"host": {
				Name:       "host",
				Column:     "ep.host",
				Sortable:   false,
				Filterable: false,
			},
			"username": {
				Name:       "username",
				Column:     "ep.username",
				Sortable:   false,
				Filterable: false,
			},
			"encrypted_password": {
				Name:       "encrypted_password",
				Column:     "ep.encrypted_password",
				Sortable:   false,
				Filterable: false,
			},
			"encrypted_api_key": {
				Name:       "encrypted_api_key",
				Column:     "ep.encrypted_api_key",
				Sortable:   false,
				Filterable: false,
			},
			"oauth2_client_id": {
				Name:       "oauth2_client_id",
				Column:     "ep.oauth2_client_id",
				Sortable:   false,
				Filterable: true,
			},
			"oauth2_client_secret": {
				Name:       "oauth2_client_secret",
				Column:     "ep.oauth2_client_secret",
				Sortable:   false,
				Filterable: false,
			},
			"oauth2_tenant_id": {
				Name:       "oauth2_tenant_id",
				Column:     "ep.oauth2_tenant_id",
				Sortable:   false,
				Filterable: true,
			},
			"from_address": {
				Name:       "from_address",
				Column:     "ep.from_address",
				Sortable:   false,
				Filterable: false,
			},
			"from_name": {
				Name:       "from_name",
				Column:     "ep.from_name",
				Sortable:   false,
				Filterable: false,
			},
			"reply_to": {
				Name:       "reply_to",
				Column:     "ep.reply_to",
				Sortable:   false,
				Filterable: false,
			},
			"port": {
				Name:       "port",
				Column:     "ep.port",
				Sortable:   false,
				Filterable: false,
			},
			"max_connections": {
				Name:       "max_connections",
				Column:     "ep.max_connections",
				Sortable:   false,
				Filterable: false,
			},
			"timeout_seconds": {
				Name:       "timeout_seconds",
				Column:     "ep.timeout_seconds",
				Sortable:   false,
				Filterable: false,
			},
			"retry_count": {
				Name:       "retry_count",
				Column:     "ep.retry_count",
				Sortable:   false,
				Filterable: false,
			},
			"retry_delay_seconds": {
				Name:       "retry_delay_seconds",
				Column:     "ep.retry_delay_seconds",
				Sortable:   false,
				Filterable: false,
			},
			"rate_limit_per_minute": {
				Name:       "rate_limit_per_minute",
				Column:     "ep.rate_limit_per_minute",
				Sortable:   false,
				Filterable: false,
			},
			"rate_limit_per_hour": {
				Name:       "rate_limit_per_hour",
				Column:     "ep.rate_limit_per_hour",
				Sortable:   false,
				Filterable: false,
			},
			"rate_limit_per_day": {
				Name:       "rate_limit_per_day",
				Column:     "ep.rate_limit_per_day",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "ep.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ep.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ep.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "ep.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "ep.is_default",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]profileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ep.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ep.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ep.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "ep.name",
				Sortable:   true,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "ep.description",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "ep.status",
				Sortable:   true,
				Filterable: true,
			},
			"provider_type": {
				Name:       "provider_type",
				Column:     "ep.provider_type",
				Sortable:   false,
				Filterable: false,
			},
			"auth_type": {
				Name:       "auth_type",
				Column:     "ep.auth_type",
				Sortable:   false,
				Filterable: false,
			},
			"encryption_type": {
				Name:       "encryption_type",
				Column:     "ep.encryption_type",
				Sortable:   false,
				Filterable: false,
			},
			"host": {
				Name:       "host",
				Column:     "ep.host",
				Sortable:   false,
				Filterable: false,
			},
			"username": {
				Name:       "username",
				Column:     "ep.username",
				Sortable:   false,
				Filterable: false,
			},
			"encrypted_password": {
				Name:       "encrypted_password",
				Column:     "ep.encrypted_password",
				Sortable:   false,
				Filterable: false,
			},
			"encrypted_api_key": {
				Name:       "encrypted_api_key",
				Column:     "ep.encrypted_api_key",
				Sortable:   false,
				Filterable: false,
			},
			"oauth2_client_id": {
				Name:       "oauth2_client_id",
				Column:     "ep.oauth2_client_id",
				Sortable:   false,
				Filterable: true,
			},
			"oauth2_client_secret": {
				Name:       "oauth2_client_secret",
				Column:     "ep.oauth2_client_secret",
				Sortable:   false,
				Filterable: false,
			},
			"oauth2_tenant_id": {
				Name:       "oauth2_tenant_id",
				Column:     "ep.oauth2_tenant_id",
				Sortable:   false,
				Filterable: true,
			},
			"from_address": {
				Name:       "from_address",
				Column:     "ep.from_address",
				Sortable:   false,
				Filterable: false,
			},
			"from_name": {
				Name:       "from_name",
				Column:     "ep.from_name",
				Sortable:   false,
				Filterable: false,
			},
			"reply_to": {
				Name:       "reply_to",
				Column:     "ep.reply_to",
				Sortable:   false,
				Filterable: false,
			},
			"port": {
				Name:       "port",
				Column:     "ep.port",
				Sortable:   false,
				Filterable: false,
			},
			"max_connections": {
				Name:       "max_connections",
				Column:     "ep.max_connections",
				Sortable:   false,
				Filterable: false,
			},
			"timeout_seconds": {
				Name:       "timeout_seconds",
				Column:     "ep.timeout_seconds",
				Sortable:   false,
				Filterable: false,
			},
			"retry_count": {
				Name:       "retry_count",
				Column:     "ep.retry_count",
				Sortable:   false,
				Filterable: false,
			},
			"retry_delay_seconds": {
				Name:       "retry_delay_seconds",
				Column:     "ep.retry_delay_seconds",
				Sortable:   false,
				Filterable: false,
			},
			"rate_limit_per_minute": {
				Name:       "rate_limit_per_minute",
				Column:     "ep.rate_limit_per_minute",
				Sortable:   false,
				Filterable: false,
			},
			"rate_limit_per_hour": {
				Name:       "rate_limit_per_hour",
				Column:     "ep.rate_limit_per_hour",
				Sortable:   false,
				Filterable: false,
			},
			"rate_limit_per_day": {
				Name:       "rate_limit_per_day",
				Column:     "ep.rate_limit_per_day",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "ep.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ep.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ep.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "ep.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "ep.is_default",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
	},
}

// ProfileQueryBuilder provides a fluent interface for building queries
type ProfileQueryBuilder struct {
	query *bun.SelectQuery
}

// NewProfileQuery creates a new query builder
func NewProfileQuery(db bun.IDB) *ProfileQueryBuilder {
	return &ProfileQueryBuilder{
		query: db.NewSelect().Model((*Profile)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ProfileFromQuery(q *bun.SelectQuery) *ProfileQueryBuilder {
	return &ProfileQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ProfileQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ProfileQueryBuilder) Model(model interface{}) *ProfileQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ProfileQueryBuilder) WhereIDEQ(v pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ProfileQueryBuilder) WhereIDNEQ(v pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ProfileQueryBuilder) WhereIDIn(v []pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereIDNotIn(v []pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ProfileQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ProfileQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *ProfileQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ProfileQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ProfileQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ProfileQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *ProfileQueryBuilder) WhereNameEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *ProfileQueryBuilder) WhereNameNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *ProfileQueryBuilder) WhereNameIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereNameNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *ProfileQueryBuilder) WhereNameContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *ProfileQueryBuilder) WhereNameHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *ProfileQueryBuilder) WhereNameHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *ProfileQueryBuilder) WhereDescriptionEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *ProfileQueryBuilder) WhereDescriptionNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *ProfileQueryBuilder) WhereDescriptionIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereDescriptionNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *ProfileQueryBuilder) WhereDescriptionContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *ProfileQueryBuilder) WhereDescriptionHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *ProfileQueryBuilder) WhereDescriptionHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *ProfileQueryBuilder) WhereStatusEQ(v domain.Status) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *ProfileQueryBuilder) WhereStatusNEQ(v domain.Status) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *ProfileQueryBuilder) WhereStatusIn(v []domain.Status) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereStatusNotIn(v []domain.Status) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereProviderTypeEQ adds a WHERE provider_type = ? condition
func (b *ProfileQueryBuilder) WhereProviderTypeEQ(v ProviderType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ProviderTypeEQ(b.query, v)
	return b
}

// WhereProviderTypeNEQ adds a WHERE provider_type != ? condition
func (b *ProfileQueryBuilder) WhereProviderTypeNEQ(v ProviderType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ProviderTypeNEQ(b.query, v)
	return b
}

// WhereProviderTypeIn adds a WHERE provider_type IN (?) condition
func (b *ProfileQueryBuilder) WhereProviderTypeIn(v []ProviderType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ProviderTypeIn(b.query, v)
	return b
}

// WhereProviderTypeNotIn adds a WHERE provider_type NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereProviderTypeNotIn(v []ProviderType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ProviderTypeNotIn(b.query, v)
	return b
}

// WhereAuthTypeEQ adds a WHERE auth_type = ? condition
func (b *ProfileQueryBuilder) WhereAuthTypeEQ(v AuthType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.AuthTypeEQ(b.query, v)
	return b
}

// WhereAuthTypeNEQ adds a WHERE auth_type != ? condition
func (b *ProfileQueryBuilder) WhereAuthTypeNEQ(v AuthType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.AuthTypeNEQ(b.query, v)
	return b
}

// WhereAuthTypeIn adds a WHERE auth_type IN (?) condition
func (b *ProfileQueryBuilder) WhereAuthTypeIn(v []AuthType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.AuthTypeIn(b.query, v)
	return b
}

// WhereAuthTypeNotIn adds a WHERE auth_type NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereAuthTypeNotIn(v []AuthType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.AuthTypeNotIn(b.query, v)
	return b
}

// WhereEncryptionTypeEQ adds a WHERE encryption_type = ? condition
func (b *ProfileQueryBuilder) WhereEncryptionTypeEQ(v EncryptionType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptionTypeEQ(b.query, v)
	return b
}

// WhereEncryptionTypeNEQ adds a WHERE encryption_type != ? condition
func (b *ProfileQueryBuilder) WhereEncryptionTypeNEQ(v EncryptionType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptionTypeNEQ(b.query, v)
	return b
}

// WhereEncryptionTypeIn adds a WHERE encryption_type IN (?) condition
func (b *ProfileQueryBuilder) WhereEncryptionTypeIn(v []EncryptionType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptionTypeIn(b.query, v)
	return b
}

// WhereEncryptionTypeNotIn adds a WHERE encryption_type NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereEncryptionTypeNotIn(v []EncryptionType) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptionTypeNotIn(b.query, v)
	return b
}

// WhereHostEQ adds a WHERE host = ? condition
func (b *ProfileQueryBuilder) WhereHostEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.HostEQ(b.query, v)
	return b
}

// WhereHostNEQ adds a WHERE host != ? condition
func (b *ProfileQueryBuilder) WhereHostNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.HostNEQ(b.query, v)
	return b
}

// WhereHostIn adds a WHERE host IN (?) condition
func (b *ProfileQueryBuilder) WhereHostIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.HostIn(b.query, v)
	return b
}

// WhereHostNotIn adds a WHERE host NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereHostNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.HostNotIn(b.query, v)
	return b
}

// WhereHostContains adds a WHERE host LIKE ? condition
func (b *ProfileQueryBuilder) WhereHostContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.HostContains(b.query, v)
	return b
}

// WhereHostHasPrefix adds a WHERE host LIKE ? condition
func (b *ProfileQueryBuilder) WhereHostHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.HostHasPrefix(b.query, v)
	return b
}

// WhereHostHasSuffix adds a WHERE host LIKE ? condition
func (b *ProfileQueryBuilder) WhereHostHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.HostHasSuffix(b.query, v)
	return b
}

// WhereUsernameEQ adds a WHERE username = ? condition
func (b *ProfileQueryBuilder) WhereUsernameEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UsernameEQ(b.query, v)
	return b
}

// WhereUsernameNEQ adds a WHERE username != ? condition
func (b *ProfileQueryBuilder) WhereUsernameNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UsernameNEQ(b.query, v)
	return b
}

// WhereUsernameIn adds a WHERE username IN (?) condition
func (b *ProfileQueryBuilder) WhereUsernameIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UsernameIn(b.query, v)
	return b
}

// WhereUsernameNotIn adds a WHERE username NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereUsernameNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UsernameNotIn(b.query, v)
	return b
}

// WhereUsernameContains adds a WHERE username LIKE ? condition
func (b *ProfileQueryBuilder) WhereUsernameContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UsernameContains(b.query, v)
	return b
}

// WhereUsernameHasPrefix adds a WHERE username LIKE ? condition
func (b *ProfileQueryBuilder) WhereUsernameHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UsernameHasPrefix(b.query, v)
	return b
}

// WhereUsernameHasSuffix adds a WHERE username LIKE ? condition
func (b *ProfileQueryBuilder) WhereUsernameHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UsernameHasSuffix(b.query, v)
	return b
}

// WhereEncryptedPasswordEQ adds a WHERE encrypted_password = ? condition
func (b *ProfileQueryBuilder) WhereEncryptedPasswordEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedPasswordEQ(b.query, v)
	return b
}

// WhereEncryptedPasswordNEQ adds a WHERE encrypted_password != ? condition
func (b *ProfileQueryBuilder) WhereEncryptedPasswordNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedPasswordNEQ(b.query, v)
	return b
}

// WhereEncryptedPasswordIn adds a WHERE encrypted_password IN (?) condition
func (b *ProfileQueryBuilder) WhereEncryptedPasswordIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedPasswordIn(b.query, v)
	return b
}

// WhereEncryptedPasswordNotIn adds a WHERE encrypted_password NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereEncryptedPasswordNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedPasswordNotIn(b.query, v)
	return b
}

// WhereEncryptedPasswordContains adds a WHERE encrypted_password LIKE ? condition
func (b *ProfileQueryBuilder) WhereEncryptedPasswordContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedPasswordContains(b.query, v)
	return b
}

// WhereEncryptedPasswordHasPrefix adds a WHERE encrypted_password LIKE ? condition
func (b *ProfileQueryBuilder) WhereEncryptedPasswordHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedPasswordHasPrefix(b.query, v)
	return b
}

// WhereEncryptedPasswordHasSuffix adds a WHERE encrypted_password LIKE ? condition
func (b *ProfileQueryBuilder) WhereEncryptedPasswordHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedPasswordHasSuffix(b.query, v)
	return b
}

// WhereEncryptedAPIKeyEQ adds a WHERE encrypted_api_key = ? condition
func (b *ProfileQueryBuilder) WhereEncryptedAPIKeyEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedAPIKeyEQ(b.query, v)
	return b
}

// WhereEncryptedAPIKeyNEQ adds a WHERE encrypted_api_key != ? condition
func (b *ProfileQueryBuilder) WhereEncryptedAPIKeyNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedAPIKeyNEQ(b.query, v)
	return b
}

// WhereEncryptedAPIKeyIn adds a WHERE encrypted_api_key IN (?) condition
func (b *ProfileQueryBuilder) WhereEncryptedAPIKeyIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedAPIKeyIn(b.query, v)
	return b
}

// WhereEncryptedAPIKeyNotIn adds a WHERE encrypted_api_key NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereEncryptedAPIKeyNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedAPIKeyNotIn(b.query, v)
	return b
}

// WhereEncryptedAPIKeyContains adds a WHERE encrypted_api_key LIKE ? condition
func (b *ProfileQueryBuilder) WhereEncryptedAPIKeyContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedAPIKeyContains(b.query, v)
	return b
}

// WhereEncryptedAPIKeyHasPrefix adds a WHERE encrypted_api_key LIKE ? condition
func (b *ProfileQueryBuilder) WhereEncryptedAPIKeyHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedAPIKeyHasPrefix(b.query, v)
	return b
}

// WhereEncryptedAPIKeyHasSuffix adds a WHERE encrypted_api_key LIKE ? condition
func (b *ProfileQueryBuilder) WhereEncryptedAPIKeyHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.EncryptedAPIKeyHasSuffix(b.query, v)
	return b
}

// WhereOAuth2ClientIDEQ adds a WHERE oauth2_client_id = ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientIDEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientIDEQ(b.query, v)
	return b
}

// WhereOAuth2ClientIDNEQ adds a WHERE oauth2_client_id != ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientIDNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientIDNEQ(b.query, v)
	return b
}

// WhereOAuth2ClientIDIn adds a WHERE oauth2_client_id IN (?) condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientIDIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientIDIn(b.query, v)
	return b
}

// WhereOAuth2ClientIDNotIn adds a WHERE oauth2_client_id NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientIDNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientIDNotIn(b.query, v)
	return b
}

// WhereOAuth2ClientIDContains adds a WHERE oauth2_client_id LIKE ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientIDContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientIDContains(b.query, v)
	return b
}

// WhereOAuth2ClientIDHasPrefix adds a WHERE oauth2_client_id LIKE ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientIDHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientIDHasPrefix(b.query, v)
	return b
}

// WhereOAuth2ClientIDHasSuffix adds a WHERE oauth2_client_id LIKE ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientIDHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientIDHasSuffix(b.query, v)
	return b
}

// WhereOAuth2ClientSecretEQ adds a WHERE oauth2_client_secret = ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientSecretEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientSecretEQ(b.query, v)
	return b
}

// WhereOAuth2ClientSecretNEQ adds a WHERE oauth2_client_secret != ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientSecretNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientSecretNEQ(b.query, v)
	return b
}

// WhereOAuth2ClientSecretIn adds a WHERE oauth2_client_secret IN (?) condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientSecretIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientSecretIn(b.query, v)
	return b
}

// WhereOAuth2ClientSecretNotIn adds a WHERE oauth2_client_secret NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientSecretNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientSecretNotIn(b.query, v)
	return b
}

// WhereOAuth2ClientSecretContains adds a WHERE oauth2_client_secret LIKE ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientSecretContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientSecretContains(b.query, v)
	return b
}

// WhereOAuth2ClientSecretHasPrefix adds a WHERE oauth2_client_secret LIKE ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientSecretHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientSecretHasPrefix(b.query, v)
	return b
}

// WhereOAuth2ClientSecretHasSuffix adds a WHERE oauth2_client_secret LIKE ? condition
func (b *ProfileQueryBuilder) WhereOAuth2ClientSecretHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2ClientSecretHasSuffix(b.query, v)
	return b
}

// WhereOAuth2TenantIDEQ adds a WHERE oauth2_tenant_id = ? condition
func (b *ProfileQueryBuilder) WhereOAuth2TenantIDEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2TenantIDEQ(b.query, v)
	return b
}

// WhereOAuth2TenantIDNEQ adds a WHERE oauth2_tenant_id != ? condition
func (b *ProfileQueryBuilder) WhereOAuth2TenantIDNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2TenantIDNEQ(b.query, v)
	return b
}

// WhereOAuth2TenantIDIn adds a WHERE oauth2_tenant_id IN (?) condition
func (b *ProfileQueryBuilder) WhereOAuth2TenantIDIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2TenantIDIn(b.query, v)
	return b
}

// WhereOAuth2TenantIDNotIn adds a WHERE oauth2_tenant_id NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereOAuth2TenantIDNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2TenantIDNotIn(b.query, v)
	return b
}

// WhereOAuth2TenantIDContains adds a WHERE oauth2_tenant_id LIKE ? condition
func (b *ProfileQueryBuilder) WhereOAuth2TenantIDContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2TenantIDContains(b.query, v)
	return b
}

// WhereOAuth2TenantIDHasPrefix adds a WHERE oauth2_tenant_id LIKE ? condition
func (b *ProfileQueryBuilder) WhereOAuth2TenantIDHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2TenantIDHasPrefix(b.query, v)
	return b
}

// WhereOAuth2TenantIDHasSuffix adds a WHERE oauth2_tenant_id LIKE ? condition
func (b *ProfileQueryBuilder) WhereOAuth2TenantIDHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.OAuth2TenantIDHasSuffix(b.query, v)
	return b
}

// WhereFromAddressEQ adds a WHERE from_address = ? condition
func (b *ProfileQueryBuilder) WhereFromAddressEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromAddressEQ(b.query, v)
	return b
}

// WhereFromAddressNEQ adds a WHERE from_address != ? condition
func (b *ProfileQueryBuilder) WhereFromAddressNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromAddressNEQ(b.query, v)
	return b
}

// WhereFromAddressIn adds a WHERE from_address IN (?) condition
func (b *ProfileQueryBuilder) WhereFromAddressIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromAddressIn(b.query, v)
	return b
}

// WhereFromAddressNotIn adds a WHERE from_address NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereFromAddressNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromAddressNotIn(b.query, v)
	return b
}

// WhereFromAddressContains adds a WHERE from_address LIKE ? condition
func (b *ProfileQueryBuilder) WhereFromAddressContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromAddressContains(b.query, v)
	return b
}

// WhereFromAddressHasPrefix adds a WHERE from_address LIKE ? condition
func (b *ProfileQueryBuilder) WhereFromAddressHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromAddressHasPrefix(b.query, v)
	return b
}

// WhereFromAddressHasSuffix adds a WHERE from_address LIKE ? condition
func (b *ProfileQueryBuilder) WhereFromAddressHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromAddressHasSuffix(b.query, v)
	return b
}

// WhereFromNameEQ adds a WHERE from_name = ? condition
func (b *ProfileQueryBuilder) WhereFromNameEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromNameEQ(b.query, v)
	return b
}

// WhereFromNameNEQ adds a WHERE from_name != ? condition
func (b *ProfileQueryBuilder) WhereFromNameNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromNameNEQ(b.query, v)
	return b
}

// WhereFromNameIn adds a WHERE from_name IN (?) condition
func (b *ProfileQueryBuilder) WhereFromNameIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromNameIn(b.query, v)
	return b
}

// WhereFromNameNotIn adds a WHERE from_name NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereFromNameNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromNameNotIn(b.query, v)
	return b
}

// WhereFromNameContains adds a WHERE from_name LIKE ? condition
func (b *ProfileQueryBuilder) WhereFromNameContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromNameContains(b.query, v)
	return b
}

// WhereFromNameHasPrefix adds a WHERE from_name LIKE ? condition
func (b *ProfileQueryBuilder) WhereFromNameHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromNameHasPrefix(b.query, v)
	return b
}

// WhereFromNameHasSuffix adds a WHERE from_name LIKE ? condition
func (b *ProfileQueryBuilder) WhereFromNameHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.FromNameHasSuffix(b.query, v)
	return b
}

// WhereReplyToEQ adds a WHERE reply_to = ? condition
func (b *ProfileQueryBuilder) WhereReplyToEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ReplyToEQ(b.query, v)
	return b
}

// WhereReplyToNEQ adds a WHERE reply_to != ? condition
func (b *ProfileQueryBuilder) WhereReplyToNEQ(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ReplyToNEQ(b.query, v)
	return b
}

// WhereReplyToIn adds a WHERE reply_to IN (?) condition
func (b *ProfileQueryBuilder) WhereReplyToIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ReplyToIn(b.query, v)
	return b
}

// WhereReplyToNotIn adds a WHERE reply_to NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereReplyToNotIn(v []string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ReplyToNotIn(b.query, v)
	return b
}

// WhereReplyToContains adds a WHERE reply_to LIKE ? condition
func (b *ProfileQueryBuilder) WhereReplyToContains(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ReplyToContains(b.query, v)
	return b
}

// WhereReplyToHasPrefix adds a WHERE reply_to LIKE ? condition
func (b *ProfileQueryBuilder) WhereReplyToHasPrefix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ReplyToHasPrefix(b.query, v)
	return b
}

// WhereReplyToHasSuffix adds a WHERE reply_to LIKE ? condition
func (b *ProfileQueryBuilder) WhereReplyToHasSuffix(v string) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.ReplyToHasSuffix(b.query, v)
	return b
}

// WherePortEQ adds a WHERE port = ? condition
func (b *ProfileQueryBuilder) WherePortEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.PortEQ(b.query, v)
	return b
}

// WherePortNEQ adds a WHERE port != ? condition
func (b *ProfileQueryBuilder) WherePortNEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.PortNEQ(b.query, v)
	return b
}

// WherePortGT adds a WHERE port > ? condition
func (b *ProfileQueryBuilder) WherePortGT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.PortGT(b.query, v)
	return b
}

// WherePortGTE adds a WHERE port >= ? condition
func (b *ProfileQueryBuilder) WherePortGTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.PortGTE(b.query, v)
	return b
}

// WherePortLT adds a WHERE port < ? condition
func (b *ProfileQueryBuilder) WherePortLT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.PortLT(b.query, v)
	return b
}

// WherePortLTE adds a WHERE port <= ? condition
func (b *ProfileQueryBuilder) WherePortLTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.PortLTE(b.query, v)
	return b
}

// WherePortIn adds a WHERE port IN (?) condition
func (b *ProfileQueryBuilder) WherePortIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.PortIn(b.query, v)
	return b
}

// WherePortNotIn adds a WHERE port NOT IN (?) condition
func (b *ProfileQueryBuilder) WherePortNotIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.PortNotIn(b.query, v)
	return b
}

// WhereMaxConnectionsEQ adds a WHERE max_connections = ? condition
func (b *ProfileQueryBuilder) WhereMaxConnectionsEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MaxConnectionsEQ(b.query, v)
	return b
}

// WhereMaxConnectionsNEQ adds a WHERE max_connections != ? condition
func (b *ProfileQueryBuilder) WhereMaxConnectionsNEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MaxConnectionsNEQ(b.query, v)
	return b
}

// WhereMaxConnectionsGT adds a WHERE max_connections > ? condition
func (b *ProfileQueryBuilder) WhereMaxConnectionsGT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MaxConnectionsGT(b.query, v)
	return b
}

// WhereMaxConnectionsGTE adds a WHERE max_connections >= ? condition
func (b *ProfileQueryBuilder) WhereMaxConnectionsGTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MaxConnectionsGTE(b.query, v)
	return b
}

// WhereMaxConnectionsLT adds a WHERE max_connections < ? condition
func (b *ProfileQueryBuilder) WhereMaxConnectionsLT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MaxConnectionsLT(b.query, v)
	return b
}

// WhereMaxConnectionsLTE adds a WHERE max_connections <= ? condition
func (b *ProfileQueryBuilder) WhereMaxConnectionsLTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MaxConnectionsLTE(b.query, v)
	return b
}

// WhereMaxConnectionsIn adds a WHERE max_connections IN (?) condition
func (b *ProfileQueryBuilder) WhereMaxConnectionsIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MaxConnectionsIn(b.query, v)
	return b
}

// WhereMaxConnectionsNotIn adds a WHERE max_connections NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereMaxConnectionsNotIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MaxConnectionsNotIn(b.query, v)
	return b
}

// WhereTimeoutSecondsEQ adds a WHERE timeout_seconds = ? condition
func (b *ProfileQueryBuilder) WhereTimeoutSecondsEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.TimeoutSecondsEQ(b.query, v)
	return b
}

// WhereTimeoutSecondsNEQ adds a WHERE timeout_seconds != ? condition
func (b *ProfileQueryBuilder) WhereTimeoutSecondsNEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.TimeoutSecondsNEQ(b.query, v)
	return b
}

// WhereTimeoutSecondsGT adds a WHERE timeout_seconds > ? condition
func (b *ProfileQueryBuilder) WhereTimeoutSecondsGT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.TimeoutSecondsGT(b.query, v)
	return b
}

// WhereTimeoutSecondsGTE adds a WHERE timeout_seconds >= ? condition
func (b *ProfileQueryBuilder) WhereTimeoutSecondsGTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.TimeoutSecondsGTE(b.query, v)
	return b
}

// WhereTimeoutSecondsLT adds a WHERE timeout_seconds < ? condition
func (b *ProfileQueryBuilder) WhereTimeoutSecondsLT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.TimeoutSecondsLT(b.query, v)
	return b
}

// WhereTimeoutSecondsLTE adds a WHERE timeout_seconds <= ? condition
func (b *ProfileQueryBuilder) WhereTimeoutSecondsLTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.TimeoutSecondsLTE(b.query, v)
	return b
}

// WhereTimeoutSecondsIn adds a WHERE timeout_seconds IN (?) condition
func (b *ProfileQueryBuilder) WhereTimeoutSecondsIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.TimeoutSecondsIn(b.query, v)
	return b
}

// WhereTimeoutSecondsNotIn adds a WHERE timeout_seconds NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereTimeoutSecondsNotIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.TimeoutSecondsNotIn(b.query, v)
	return b
}

// WhereRetryCountEQ adds a WHERE retry_count = ? condition
func (b *ProfileQueryBuilder) WhereRetryCountEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryCountEQ(b.query, v)
	return b
}

// WhereRetryCountNEQ adds a WHERE retry_count != ? condition
func (b *ProfileQueryBuilder) WhereRetryCountNEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryCountNEQ(b.query, v)
	return b
}

// WhereRetryCountGT adds a WHERE retry_count > ? condition
func (b *ProfileQueryBuilder) WhereRetryCountGT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryCountGT(b.query, v)
	return b
}

// WhereRetryCountGTE adds a WHERE retry_count >= ? condition
func (b *ProfileQueryBuilder) WhereRetryCountGTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryCountGTE(b.query, v)
	return b
}

// WhereRetryCountLT adds a WHERE retry_count < ? condition
func (b *ProfileQueryBuilder) WhereRetryCountLT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryCountLT(b.query, v)
	return b
}

// WhereRetryCountLTE adds a WHERE retry_count <= ? condition
func (b *ProfileQueryBuilder) WhereRetryCountLTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryCountLTE(b.query, v)
	return b
}

// WhereRetryCountIn adds a WHERE retry_count IN (?) condition
func (b *ProfileQueryBuilder) WhereRetryCountIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryCountIn(b.query, v)
	return b
}

// WhereRetryCountNotIn adds a WHERE retry_count NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereRetryCountNotIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryCountNotIn(b.query, v)
	return b
}

// WhereRetryDelaySecondsEQ adds a WHERE retry_delay_seconds = ? condition
func (b *ProfileQueryBuilder) WhereRetryDelaySecondsEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryDelaySecondsEQ(b.query, v)
	return b
}

// WhereRetryDelaySecondsNEQ adds a WHERE retry_delay_seconds != ? condition
func (b *ProfileQueryBuilder) WhereRetryDelaySecondsNEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryDelaySecondsNEQ(b.query, v)
	return b
}

// WhereRetryDelaySecondsGT adds a WHERE retry_delay_seconds > ? condition
func (b *ProfileQueryBuilder) WhereRetryDelaySecondsGT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryDelaySecondsGT(b.query, v)
	return b
}

// WhereRetryDelaySecondsGTE adds a WHERE retry_delay_seconds >= ? condition
func (b *ProfileQueryBuilder) WhereRetryDelaySecondsGTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryDelaySecondsGTE(b.query, v)
	return b
}

// WhereRetryDelaySecondsLT adds a WHERE retry_delay_seconds < ? condition
func (b *ProfileQueryBuilder) WhereRetryDelaySecondsLT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryDelaySecondsLT(b.query, v)
	return b
}

// WhereRetryDelaySecondsLTE adds a WHERE retry_delay_seconds <= ? condition
func (b *ProfileQueryBuilder) WhereRetryDelaySecondsLTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryDelaySecondsLTE(b.query, v)
	return b
}

// WhereRetryDelaySecondsIn adds a WHERE retry_delay_seconds IN (?) condition
func (b *ProfileQueryBuilder) WhereRetryDelaySecondsIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryDelaySecondsIn(b.query, v)
	return b
}

// WhereRetryDelaySecondsNotIn adds a WHERE retry_delay_seconds NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereRetryDelaySecondsNotIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RetryDelaySecondsNotIn(b.query, v)
	return b
}

// WhereRateLimitPerMinuteEQ adds a WHERE rate_limit_per_minute = ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerMinuteEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerMinuteEQ(b.query, v)
	return b
}

// WhereRateLimitPerMinuteNEQ adds a WHERE rate_limit_per_minute != ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerMinuteNEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerMinuteNEQ(b.query, v)
	return b
}

// WhereRateLimitPerMinuteGT adds a WHERE rate_limit_per_minute > ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerMinuteGT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerMinuteGT(b.query, v)
	return b
}

// WhereRateLimitPerMinuteGTE adds a WHERE rate_limit_per_minute >= ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerMinuteGTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerMinuteGTE(b.query, v)
	return b
}

// WhereRateLimitPerMinuteLT adds a WHERE rate_limit_per_minute < ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerMinuteLT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerMinuteLT(b.query, v)
	return b
}

// WhereRateLimitPerMinuteLTE adds a WHERE rate_limit_per_minute <= ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerMinuteLTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerMinuteLTE(b.query, v)
	return b
}

// WhereRateLimitPerMinuteIn adds a WHERE rate_limit_per_minute IN (?) condition
func (b *ProfileQueryBuilder) WhereRateLimitPerMinuteIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerMinuteIn(b.query, v)
	return b
}

// WhereRateLimitPerMinuteNotIn adds a WHERE rate_limit_per_minute NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereRateLimitPerMinuteNotIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerMinuteNotIn(b.query, v)
	return b
}

// WhereRateLimitPerHourEQ adds a WHERE rate_limit_per_hour = ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerHourEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerHourEQ(b.query, v)
	return b
}

// WhereRateLimitPerHourNEQ adds a WHERE rate_limit_per_hour != ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerHourNEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerHourNEQ(b.query, v)
	return b
}

// WhereRateLimitPerHourGT adds a WHERE rate_limit_per_hour > ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerHourGT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerHourGT(b.query, v)
	return b
}

// WhereRateLimitPerHourGTE adds a WHERE rate_limit_per_hour >= ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerHourGTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerHourGTE(b.query, v)
	return b
}

// WhereRateLimitPerHourLT adds a WHERE rate_limit_per_hour < ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerHourLT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerHourLT(b.query, v)
	return b
}

// WhereRateLimitPerHourLTE adds a WHERE rate_limit_per_hour <= ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerHourLTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerHourLTE(b.query, v)
	return b
}

// WhereRateLimitPerHourIn adds a WHERE rate_limit_per_hour IN (?) condition
func (b *ProfileQueryBuilder) WhereRateLimitPerHourIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerHourIn(b.query, v)
	return b
}

// WhereRateLimitPerHourNotIn adds a WHERE rate_limit_per_hour NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereRateLimitPerHourNotIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerHourNotIn(b.query, v)
	return b
}

// WhereRateLimitPerDayEQ adds a WHERE rate_limit_per_day = ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerDayEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerDayEQ(b.query, v)
	return b
}

// WhereRateLimitPerDayNEQ adds a WHERE rate_limit_per_day != ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerDayNEQ(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerDayNEQ(b.query, v)
	return b
}

// WhereRateLimitPerDayGT adds a WHERE rate_limit_per_day > ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerDayGT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerDayGT(b.query, v)
	return b
}

// WhereRateLimitPerDayGTE adds a WHERE rate_limit_per_day >= ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerDayGTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerDayGTE(b.query, v)
	return b
}

// WhereRateLimitPerDayLT adds a WHERE rate_limit_per_day < ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerDayLT(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerDayLT(b.query, v)
	return b
}

// WhereRateLimitPerDayLTE adds a WHERE rate_limit_per_day <= ? condition
func (b *ProfileQueryBuilder) WhereRateLimitPerDayLTE(v int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerDayLTE(b.query, v)
	return b
}

// WhereRateLimitPerDayIn adds a WHERE rate_limit_per_day IN (?) condition
func (b *ProfileQueryBuilder) WhereRateLimitPerDayIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerDayIn(b.query, v)
	return b
}

// WhereRateLimitPerDayNotIn adds a WHERE rate_limit_per_day NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereRateLimitPerDayNotIn(v []int) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.RateLimitPerDayNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ProfileQueryBuilder) WhereVersionEQ(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ProfileQueryBuilder) WhereVersionNEQ(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ProfileQueryBuilder) WhereVersionGT(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ProfileQueryBuilder) WhereVersionGTE(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ProfileQueryBuilder) WhereVersionLT(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ProfileQueryBuilder) WhereVersionLTE(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ProfileQueryBuilder) WhereVersionIn(v []int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereVersionNotIn(v []int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ProfileQueryBuilder) WhereCreatedAtEQ(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ProfileQueryBuilder) WhereCreatedAtNEQ(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ProfileQueryBuilder) WhereCreatedAtGT(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ProfileQueryBuilder) WhereCreatedAtGTE(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ProfileQueryBuilder) WhereCreatedAtLT(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ProfileQueryBuilder) WhereCreatedAtLTE(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ProfileQueryBuilder) WhereCreatedAtIn(v []int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereCreatedAtNotIn(v []int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ProfileQueryBuilder) WhereUpdatedAtEQ(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ProfileQueryBuilder) WhereUpdatedAtNEQ(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ProfileQueryBuilder) WhereUpdatedAtGT(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ProfileQueryBuilder) WhereUpdatedAtGTE(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ProfileQueryBuilder) WhereUpdatedAtLT(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ProfileQueryBuilder) WhereUpdatedAtLTE(v int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ProfileQueryBuilder) WhereUpdatedAtIn(v []int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereMetadataEQ adds a WHERE metadata = ? condition
func (b *ProfileQueryBuilder) WhereMetadataEQ(v map[string]any) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MetadataEQ(b.query, v)
	return b
}

// WhereMetadataNEQ adds a WHERE metadata != ? condition
func (b *ProfileQueryBuilder) WhereMetadataNEQ(v map[string]any) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MetadataNEQ(b.query, v)
	return b
}

// WhereMetadataIn adds a WHERE metadata IN (?) condition
func (b *ProfileQueryBuilder) WhereMetadataIn(v []map[string]any) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MetadataIn(b.query, v)
	return b
}

// WhereMetadataNotIn adds a WHERE metadata NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereMetadataNotIn(v []map[string]any) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.MetadataNotIn(b.query, v)
	return b
}

// WhereIsDefaultEQ adds a WHERE is_default = ? condition
func (b *ProfileQueryBuilder) WhereIsDefaultEQ(v bool) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.IsDefaultEQ(b.query, v)
	return b
}

// WhereIsDefaultNEQ adds a WHERE is_default != ? condition
func (b *ProfileQueryBuilder) WhereIsDefaultNEQ(v bool) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.IsDefaultNEQ(b.query, v)
	return b
}

// WhereIsDefaultIn adds a WHERE is_default IN (?) condition
func (b *ProfileQueryBuilder) WhereIsDefaultIn(v []bool) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.IsDefaultIn(b.query, v)
	return b
}

// WhereIsDefaultNotIn adds a WHERE is_default NOT IN (?) condition
func (b *ProfileQueryBuilder) WhereIsDefaultNotIn(v []bool) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.IsDefaultNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ProfileQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ProfileQueryBuilder {
	b.query = ProfileQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ProfileQueryBuilder) WhereGroup(sep string, fn func(*ProfileQueryBuilder) *ProfileQueryBuilder) *ProfileQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ProfileQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ProfileQueryBuilder) Where(query string, args ...interface{}) *ProfileQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ProfileQueryBuilder) OrderBy(column string, desc ...bool) *ProfileQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ProfileQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ProfileQueryBuilder) Limit(n int) *ProfileQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ProfileQueryBuilder) Offset(n int) *ProfileQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ProfileQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ProfileQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ProfileQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ProfileQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ProfileQueryBuilder) All(ctx context.Context) ([]*Profile, error) {
	var entities []*Profile
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ProfileQueryBuilder) AllWithCount(ctx context.Context) ([]*Profile, int, error) {
	var entities []*Profile
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ProfileQueryBuilder) One(ctx context.Context) (*Profile, error) {
	entity := new(Profile)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ProfileQueryBuilder) First(ctx context.Context) (*Profile, error) {
	entity := new(Profile)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ProfileBuild creates a chainable query builder
func ProfileBuild(db bun.IDB) *ProfileQueryBuilder {
	return NewProfileQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *ProfileQueryBuilder) LoadBusinessUnit() *ProfileQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *ProfileQueryBuilder) LoadOrganization() *ProfileQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for Profile
func (b *ProfileQueryBuilder) LoadAllRelations() *ProfileQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	return b
}
