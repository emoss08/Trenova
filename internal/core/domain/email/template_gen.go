// Code generated by gen-trenova. DO NOT EDIT.

package email

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// templateFieldConfig provides field configuration for Template
type templateFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// TemplateQuery provides type-safe query helpers and constants
var TemplateQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID              string
		BusinessUnitID  string
		OrganizationID  string
		Name            string
		Slug            string
		Description     string
		Category        string
		IsSystem        string
		IsActive        string
		Status          string
		SubjectTemplate string
		HTMLTemplate    string
		TextTemplate    string
		VariablesSchema string
		Metadata        string
		SearchVector    string
		Rank            string
		Version         string
		CreatedAt       string
		UpdatedAt       string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		NameEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SlugNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SlugGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryEQ               func(q *bun.SelectQuery, v TemplateCategory) *bun.SelectQuery
		CategoryNEQ              func(q *bun.SelectQuery, v TemplateCategory) *bun.SelectQuery
		IsSystemEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		StatusEQ                 func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		SubjectTemplateEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectTemplateNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectTemplateGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HTMLTemplateNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HTMLTemplateGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TextTemplateNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TextTemplateGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VariablesSchemaEQ        func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		VariablesSchemaNEQ       func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataEQ               func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ              func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		SearchVectorEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]templateFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "email_templates",
	Alias:    "et",
	IDPrefix: "et_",

	// Field names
	Field: struct {
		ID              string
		BusinessUnitID  string
		OrganizationID  string
		Name            string
		Slug            string
		Description     string
		Category        string
		IsSystem        string
		IsActive        string
		Status          string
		SubjectTemplate string
		HTMLTemplate    string
		TextTemplate    string
		VariablesSchema string
		Metadata        string
		SearchVector    string
		Rank            string
		Version         string
		CreatedAt       string
		UpdatedAt       string
	}{
		ID:              "id",
		BusinessUnitID:  "business_unit_id",
		OrganizationID:  "organization_id",
		Name:            "name",
		Slug:            "slug",
		Description:     "description",
		Category:        "category",
		IsSystem:        "is_system",
		IsActive:        "is_active",
		Status:          "status",
		SubjectTemplate: "subject_template",
		HTMLTemplate:    "html_template",
		TextTemplate:    "text_template",
		VariablesSchema: "variables_schema",
		Metadata:        "metadata",
		SearchVector:    "search_vector",
		Rank:            "rank",
		Version:         "version",
		CreatedAt:       "created_at",
		UpdatedAt:       "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "et." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "et." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		NameEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SlugNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SlugGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SlugHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryEQ               func(q *bun.SelectQuery, v TemplateCategory) *bun.SelectQuery
		CategoryNEQ              func(q *bun.SelectQuery, v TemplateCategory) *bun.SelectQuery
		IsSystemEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		StatusEQ                 func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		SubjectTemplateEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectTemplateNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectTemplateGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectTemplateHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HTMLTemplateNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HTMLTemplateGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HTMLTemplateHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TextTemplateNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TextTemplateGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TextTemplateHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VariablesSchemaEQ        func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		VariablesSchemaNEQ       func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataEQ               func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ              func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		SearchVectorEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                   func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.organization_id"), v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.name"), "%"+v)
		},
		SlugEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.slug"), v)
		},
		SlugNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.slug"), v)
		},
		SlugIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.slug"), bun.In(v))
		},
		SlugNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.slug"), bun.In(v))
		},
		SlugGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.slug"), v)
		},
		SlugGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.slug"), v)
		},
		SlugLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.slug"), v)
		},
		SlugLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.slug"), v)
		},
		SlugContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.slug"), "%"+v+"%")
		},
		SlugHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.slug"), v+"%")
		},
		SlugHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.slug"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.description"), "%"+v)
		},
		CategoryEQ: func(q *bun.SelectQuery, v TemplateCategory) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.category"), v)
		},
		CategoryNEQ: func(q *bun.SelectQuery, v TemplateCategory) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.category"), v)
		},
		IsSystemEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.is_system"), v)
		},
		IsSystemNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.is_system"), v)
		},
		IsActiveEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.is_active"), v)
		},
		IsActiveNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.is_active"), v)
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.status"), v)
		},
		SubjectTemplateEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.subject_template"), v)
		},
		SubjectTemplateNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.subject_template"), v)
		},
		SubjectTemplateIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.subject_template"), bun.In(v))
		},
		SubjectTemplateNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.subject_template"), bun.In(v))
		},
		SubjectTemplateGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.subject_template"), v)
		},
		SubjectTemplateGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.subject_template"), v)
		},
		SubjectTemplateLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.subject_template"), v)
		},
		SubjectTemplateLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.subject_template"), v)
		},
		SubjectTemplateContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.subject_template"), "%"+v+"%")
		},
		SubjectTemplateHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.subject_template"), v+"%")
		},
		SubjectTemplateHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.subject_template"), "%"+v)
		},
		HTMLTemplateEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.html_template"), v)
		},
		HTMLTemplateNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.html_template"), v)
		},
		HTMLTemplateIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.html_template"), bun.In(v))
		},
		HTMLTemplateNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.html_template"), bun.In(v))
		},
		HTMLTemplateGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.html_template"), v)
		},
		HTMLTemplateGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.html_template"), v)
		},
		HTMLTemplateLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.html_template"), v)
		},
		HTMLTemplateLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.html_template"), v)
		},
		HTMLTemplateContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.html_template"), "%"+v+"%")
		},
		HTMLTemplateHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.html_template"), v+"%")
		},
		HTMLTemplateHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.html_template"), "%"+v)
		},
		TextTemplateEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.text_template"), v)
		},
		TextTemplateNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.text_template"), v)
		},
		TextTemplateIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.text_template"), bun.In(v))
		},
		TextTemplateNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.text_template"), bun.In(v))
		},
		TextTemplateGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.text_template"), v)
		},
		TextTemplateGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.text_template"), v)
		},
		TextTemplateLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.text_template"), v)
		},
		TextTemplateLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.text_template"), v)
		},
		TextTemplateContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.text_template"), "%"+v+"%")
		},
		TextTemplateHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.text_template"), v+"%")
		},
		TextTemplateHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.text_template"), "%"+v)
		},
		VariablesSchemaEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.variables_schema"), v)
		},
		VariablesSchemaNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.variables_schema"), v)
		},
		MetadataEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.metadata"), v)
		},
		MetadataNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.metadata"), v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("et.rank"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("et.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("et.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("et.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("et.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("et.organization_id"), orgID).
				Where("? = ?", bun.Ident("et.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("et.id"), id).
				Where("? = ?", bun.Ident("et.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "et." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"et.status ASC",
				"et.name ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "et.status DESC"
			}
			return "et.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "et.created_at DESC"
			}
			return "et.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "et.updated_at DESC"
			}
			return "et.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]templateFieldConfig {
		return map[string]templateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "et.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "et.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "et.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "et.name",
				Sortable:   true,
				Filterable: false,
			},
			"slug": {
				Name:       "slug",
				Column:     "et.slug",
				Sortable:   false,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "et.description",
				Sortable:   false,
				Filterable: false,
			},
			"category": {
				Name:       "category",
				Column:     "et.category",
				Sortable:   false,
				Filterable: false,
			},
			"is_system": {
				Name:       "is_system",
				Column:     "et.is_system",
				Sortable:   false,
				Filterable: false,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "et.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "et.status",
				Sortable:   true,
				Filterable: true,
			},
			"subject_template": {
				Name:       "subject_template",
				Column:     "et.subject_template",
				Sortable:   false,
				Filterable: false,
			},
			"html_template": {
				Name:       "html_template",
				Column:     "et.html_template",
				Sortable:   false,
				Filterable: false,
			},
			"text_template": {
				Name:       "text_template",
				Column:     "et.text_template",
				Sortable:   false,
				Filterable: false,
			},
			"variables_schema": {
				Name:       "variables_schema",
				Column:     "et.variables_schema",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "et.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "et.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "et.rank",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "et.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "et.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "et.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]templateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "et.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "et.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "et.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "et.name",
				Sortable:   true,
				Filterable: false,
			},
			"slug": {
				Name:       "slug",
				Column:     "et.slug",
				Sortable:   false,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "et.description",
				Sortable:   false,
				Filterable: false,
			},
			"category": {
				Name:       "category",
				Column:     "et.category",
				Sortable:   false,
				Filterable: false,
			},
			"is_system": {
				Name:       "is_system",
				Column:     "et.is_system",
				Sortable:   false,
				Filterable: false,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "et.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "et.status",
				Sortable:   true,
				Filterable: true,
			},
			"subject_template": {
				Name:       "subject_template",
				Column:     "et.subject_template",
				Sortable:   false,
				Filterable: false,
			},
			"html_template": {
				Name:       "html_template",
				Column:     "et.html_template",
				Sortable:   false,
				Filterable: false,
			},
			"text_template": {
				Name:       "text_template",
				Column:     "et.text_template",
				Sortable:   false,
				Filterable: false,
			},
			"variables_schema": {
				Name:       "variables_schema",
				Column:     "et.variables_schema",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "et.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "et.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "et.rank",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "et.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "et.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "et.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]templateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "et.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "et.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "et.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "et.name",
				Sortable:   true,
				Filterable: false,
			},
			"slug": {
				Name:       "slug",
				Column:     "et.slug",
				Sortable:   false,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "et.description",
				Sortable:   false,
				Filterable: false,
			},
			"category": {
				Name:       "category",
				Column:     "et.category",
				Sortable:   false,
				Filterable: false,
			},
			"is_system": {
				Name:       "is_system",
				Column:     "et.is_system",
				Sortable:   false,
				Filterable: false,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "et.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "et.status",
				Sortable:   true,
				Filterable: true,
			},
			"subject_template": {
				Name:       "subject_template",
				Column:     "et.subject_template",
				Sortable:   false,
				Filterable: false,
			},
			"html_template": {
				Name:       "html_template",
				Column:     "et.html_template",
				Sortable:   false,
				Filterable: false,
			},
			"text_template": {
				Name:       "text_template",
				Column:     "et.text_template",
				Sortable:   false,
				Filterable: false,
			},
			"variables_schema": {
				Name:       "variables_schema",
				Column:     "et.variables_schema",
				Sortable:   false,
				Filterable: false,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "et.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "et.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "et.rank",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "et.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "et.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "et.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// TemplateQueryBuilder provides a fluent interface for building queries
type TemplateQueryBuilder struct {
	query *bun.SelectQuery
}

// NewTemplateQuery creates a new query builder
func NewTemplateQuery(db bun.IDB) *TemplateQueryBuilder {
	return &TemplateQueryBuilder{
		query: db.NewSelect().Model((*Template)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func TemplateFromQuery(q *bun.SelectQuery) *TemplateQueryBuilder {
	return &TemplateQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *TemplateQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *TemplateQueryBuilder) Model(model interface{}) *TemplateQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *TemplateQueryBuilder) WhereIDEQ(v pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *TemplateQueryBuilder) WhereIDNEQ(v pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *TemplateQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *TemplateQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *TemplateQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *TemplateQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *TemplateQueryBuilder) WhereNameEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *TemplateQueryBuilder) WhereNameNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *TemplateQueryBuilder) WhereNameIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereNameNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *TemplateQueryBuilder) WhereNameContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *TemplateQueryBuilder) WhereNameHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *TemplateQueryBuilder) WhereNameHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereSlugEQ adds a WHERE slug = ? condition
func (b *TemplateQueryBuilder) WhereSlugEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SlugEQ(b.query, v)
	return b
}

// WhereSlugNEQ adds a WHERE slug != ? condition
func (b *TemplateQueryBuilder) WhereSlugNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SlugNEQ(b.query, v)
	return b
}

// WhereSlugIn adds a WHERE slug IN (?) condition
func (b *TemplateQueryBuilder) WhereSlugIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SlugIn(b.query, v)
	return b
}

// WhereSlugNotIn adds a WHERE slug NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereSlugNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SlugNotIn(b.query, v)
	return b
}

// WhereSlugContains adds a WHERE slug LIKE ? condition
func (b *TemplateQueryBuilder) WhereSlugContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SlugContains(b.query, v)
	return b
}

// WhereSlugHasPrefix adds a WHERE slug LIKE ? condition
func (b *TemplateQueryBuilder) WhereSlugHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SlugHasPrefix(b.query, v)
	return b
}

// WhereSlugHasSuffix adds a WHERE slug LIKE ? condition
func (b *TemplateQueryBuilder) WhereSlugHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SlugHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *TemplateQueryBuilder) WhereDescriptionEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *TemplateQueryBuilder) WhereDescriptionNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *TemplateQueryBuilder) WhereDescriptionIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereDescriptionNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *TemplateQueryBuilder) WhereDescriptionContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *TemplateQueryBuilder) WhereDescriptionHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *TemplateQueryBuilder) WhereDescriptionHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereCategoryEQ adds a WHERE category = ? condition
func (b *TemplateQueryBuilder) WhereCategoryEQ(v TemplateCategory) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CategoryEQ(b.query, v)
	return b
}

// WhereCategoryNEQ adds a WHERE category != ? condition
func (b *TemplateQueryBuilder) WhereCategoryNEQ(v TemplateCategory) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CategoryNEQ(b.query, v)
	return b
}

// WhereIsSystemEQ adds a WHERE is_system = ? condition
func (b *TemplateQueryBuilder) WhereIsSystemEQ(v bool) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IsSystemEQ(b.query, v)
	return b
}

// WhereIsSystemNEQ adds a WHERE is_system != ? condition
func (b *TemplateQueryBuilder) WhereIsSystemNEQ(v bool) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IsSystemNEQ(b.query, v)
	return b
}

// WhereIsActiveEQ adds a WHERE is_active = ? condition
func (b *TemplateQueryBuilder) WhereIsActiveEQ(v bool) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IsActiveEQ(b.query, v)
	return b
}

// WhereIsActiveNEQ adds a WHERE is_active != ? condition
func (b *TemplateQueryBuilder) WhereIsActiveNEQ(v bool) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IsActiveNEQ(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *TemplateQueryBuilder) WhereStatusEQ(v domain.Status) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *TemplateQueryBuilder) WhereStatusNEQ(v domain.Status) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereSubjectTemplateEQ adds a WHERE subject_template = ? condition
func (b *TemplateQueryBuilder) WhereSubjectTemplateEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SubjectTemplateEQ(b.query, v)
	return b
}

// WhereSubjectTemplateNEQ adds a WHERE subject_template != ? condition
func (b *TemplateQueryBuilder) WhereSubjectTemplateNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SubjectTemplateNEQ(b.query, v)
	return b
}

// WhereSubjectTemplateIn adds a WHERE subject_template IN (?) condition
func (b *TemplateQueryBuilder) WhereSubjectTemplateIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SubjectTemplateIn(b.query, v)
	return b
}

// WhereSubjectTemplateNotIn adds a WHERE subject_template NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereSubjectTemplateNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SubjectTemplateNotIn(b.query, v)
	return b
}

// WhereSubjectTemplateContains adds a WHERE subject_template LIKE ? condition
func (b *TemplateQueryBuilder) WhereSubjectTemplateContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SubjectTemplateContains(b.query, v)
	return b
}

// WhereSubjectTemplateHasPrefix adds a WHERE subject_template LIKE ? condition
func (b *TemplateQueryBuilder) WhereSubjectTemplateHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SubjectTemplateHasPrefix(b.query, v)
	return b
}

// WhereSubjectTemplateHasSuffix adds a WHERE subject_template LIKE ? condition
func (b *TemplateQueryBuilder) WhereSubjectTemplateHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SubjectTemplateHasSuffix(b.query, v)
	return b
}

// WhereHTMLTemplateEQ adds a WHERE html_template = ? condition
func (b *TemplateQueryBuilder) WhereHTMLTemplateEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.HTMLTemplateEQ(b.query, v)
	return b
}

// WhereHTMLTemplateNEQ adds a WHERE html_template != ? condition
func (b *TemplateQueryBuilder) WhereHTMLTemplateNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.HTMLTemplateNEQ(b.query, v)
	return b
}

// WhereHTMLTemplateIn adds a WHERE html_template IN (?) condition
func (b *TemplateQueryBuilder) WhereHTMLTemplateIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.HTMLTemplateIn(b.query, v)
	return b
}

// WhereHTMLTemplateNotIn adds a WHERE html_template NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereHTMLTemplateNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.HTMLTemplateNotIn(b.query, v)
	return b
}

// WhereHTMLTemplateContains adds a WHERE html_template LIKE ? condition
func (b *TemplateQueryBuilder) WhereHTMLTemplateContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.HTMLTemplateContains(b.query, v)
	return b
}

// WhereHTMLTemplateHasPrefix adds a WHERE html_template LIKE ? condition
func (b *TemplateQueryBuilder) WhereHTMLTemplateHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.HTMLTemplateHasPrefix(b.query, v)
	return b
}

// WhereHTMLTemplateHasSuffix adds a WHERE html_template LIKE ? condition
func (b *TemplateQueryBuilder) WhereHTMLTemplateHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.HTMLTemplateHasSuffix(b.query, v)
	return b
}

// WhereTextTemplateEQ adds a WHERE text_template = ? condition
func (b *TemplateQueryBuilder) WhereTextTemplateEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.TextTemplateEQ(b.query, v)
	return b
}

// WhereTextTemplateNEQ adds a WHERE text_template != ? condition
func (b *TemplateQueryBuilder) WhereTextTemplateNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.TextTemplateNEQ(b.query, v)
	return b
}

// WhereTextTemplateIn adds a WHERE text_template IN (?) condition
func (b *TemplateQueryBuilder) WhereTextTemplateIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.TextTemplateIn(b.query, v)
	return b
}

// WhereTextTemplateNotIn adds a WHERE text_template NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereTextTemplateNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.TextTemplateNotIn(b.query, v)
	return b
}

// WhereTextTemplateContains adds a WHERE text_template LIKE ? condition
func (b *TemplateQueryBuilder) WhereTextTemplateContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.TextTemplateContains(b.query, v)
	return b
}

// WhereTextTemplateHasPrefix adds a WHERE text_template LIKE ? condition
func (b *TemplateQueryBuilder) WhereTextTemplateHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.TextTemplateHasPrefix(b.query, v)
	return b
}

// WhereTextTemplateHasSuffix adds a WHERE text_template LIKE ? condition
func (b *TemplateQueryBuilder) WhereTextTemplateHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.TextTemplateHasSuffix(b.query, v)
	return b
}

// WhereVariablesSchemaEQ adds a WHERE variables_schema = ? condition
func (b *TemplateQueryBuilder) WhereVariablesSchemaEQ(v map[string]any) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VariablesSchemaEQ(b.query, v)
	return b
}

// WhereVariablesSchemaNEQ adds a WHERE variables_schema != ? condition
func (b *TemplateQueryBuilder) WhereVariablesSchemaNEQ(v map[string]any) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VariablesSchemaNEQ(b.query, v)
	return b
}

// WhereMetadataEQ adds a WHERE metadata = ? condition
func (b *TemplateQueryBuilder) WhereMetadataEQ(v map[string]any) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.MetadataEQ(b.query, v)
	return b
}

// WhereMetadataNEQ adds a WHERE metadata != ? condition
func (b *TemplateQueryBuilder) WhereMetadataNEQ(v map[string]any) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.MetadataNEQ(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *TemplateQueryBuilder) WhereSearchVectorEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *TemplateQueryBuilder) WhereSearchVectorNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *TemplateQueryBuilder) WhereSearchVectorIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereSearchVectorNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *TemplateQueryBuilder) WhereSearchVectorContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *TemplateQueryBuilder) WhereSearchVectorHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *TemplateQueryBuilder) WhereSearchVectorHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *TemplateQueryBuilder) WhereRankEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *TemplateQueryBuilder) WhereRankNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *TemplateQueryBuilder) WhereRankIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereRankNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *TemplateQueryBuilder) WhereRankContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *TemplateQueryBuilder) WhereRankHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *TemplateQueryBuilder) WhereRankHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *TemplateQueryBuilder) WhereVersionEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *TemplateQueryBuilder) WhereVersionNEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *TemplateQueryBuilder) WhereVersionGT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *TemplateQueryBuilder) WhereVersionGTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *TemplateQueryBuilder) WhereVersionLT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *TemplateQueryBuilder) WhereVersionLTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *TemplateQueryBuilder) WhereVersionIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereVersionNotIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtNEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtGT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtGTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtLT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtLTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *TemplateQueryBuilder) WhereCreatedAtIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereCreatedAtNotIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtNEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtGT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtGTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtLT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtLTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *TemplateQueryBuilder) WhereUpdatedAtIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereUpdatedAtNotIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *TemplateQueryBuilder) WhereTenant(orgID, buID pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *TemplateQueryBuilder) WhereGroup(sep string, fn func(*TemplateQueryBuilder) *TemplateQueryBuilder) *TemplateQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &TemplateQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *TemplateQueryBuilder) Where(query string, args ...interface{}) *TemplateQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *TemplateQueryBuilder) OrderBy(column string, desc ...bool) *TemplateQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(TemplateQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *TemplateQueryBuilder) Limit(n int) *TemplateQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *TemplateQueryBuilder) Offset(n int) *TemplateQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *TemplateQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *TemplateQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *TemplateQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *TemplateQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *TemplateQueryBuilder) All(ctx context.Context) ([]*Template, error) {
	var entities []*Template
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *TemplateQueryBuilder) AllWithCount(ctx context.Context) ([]*Template, int, error) {
	var entities []*Template
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *TemplateQueryBuilder) One(ctx context.Context) (*Template, error) {
	entity := new(Template)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *TemplateQueryBuilder) First(ctx context.Context) (*Template, error) {
	entity := new(Template)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// TemplateBuild creates a chainable query builder
func TemplateBuild(db bun.IDB) *TemplateQueryBuilder {
	return NewTemplateQuery(db)
}
