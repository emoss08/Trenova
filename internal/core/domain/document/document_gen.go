// Code generated by gen-trenova. DO NOT EDIT.

package document

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain/permission"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// documentFieldConfig provides field configuration for Document
type documentFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// DocumentQuery provides type-safe query helpers and constants
var DocumentQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                 string
		BusinessUnitID     string
		OrganizationID     string
		FileName           string
		OriginalName       string
		FileSize           string
		FileType           string
		PreviewStoragePath string
		StoragePath        string
		DocumentTypeID     string
		Status             string
		ResourceID         string
		ResourceType       string
		ExpirationDate     string
		Tags               string
		UploadedByID       string
		ApprovedByID       string
		ApprovedAt         string
		Version            string
		CreatedAt          string
		UpdatedAt          string
		SearchVector       string
		Rank               string
		PresignedURL       string
		PreviewURL         string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		FileNameEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FileNameNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FileNameGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OriginalNameNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OriginalNameGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileSizeEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FileSizeNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FileSizeGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileTypeEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FileTypeNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FileTypeGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PreviewStoragePathNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PreviewStoragePathGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		StoragePathNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		StoragePathGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentTypeIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DocumentTypeIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DocumentTypeIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DocumentTypeIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                    func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusNEQ                   func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusIn                    func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		StatusNotIn                 func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		ResourceIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ResourceIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ResourceIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ResourceIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ResourceTypeEQ              func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceTypeNEQ             func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceTypeIn              func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ResourceTypeNotIn           func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ExpirationDateEQ            func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpirationDateNEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpirationDateIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpirationDateNotIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpirationDateIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		ExpirationDateIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		TagsEQ                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsNEQ                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsIn                      func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		TagsNotIn                   func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		UploadedByIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UploadedByIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UploadedByIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UploadedByIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ApprovedByIDEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ApprovedByIDNEQ             func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ApprovedByIDIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ApprovedByIDNotIn           func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ApprovedByIDIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		ApprovedByIDIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ApprovedAtEQ                func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ApprovedAtNEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ApprovedAtIn                func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ApprovedAtNotIn             func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ApprovedAtIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		ApprovedAtIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PresignedURLNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PresignedURLGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PreviewURLNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PreviewURLGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]documentFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
		DT           string
		UploadedBy   string
		ApprovedBy   string
	}
}{
	// Table and alias constants
	Table:    "documents",
	Alias:    "doc",
	IDPrefix: "doc_",

	// Field names
	Field: struct {
		ID                 string
		BusinessUnitID     string
		OrganizationID     string
		FileName           string
		OriginalName       string
		FileSize           string
		FileType           string
		PreviewStoragePath string
		StoragePath        string
		DocumentTypeID     string
		Status             string
		ResourceID         string
		ResourceType       string
		ExpirationDate     string
		Tags               string
		UploadedByID       string
		ApprovedByID       string
		ApprovedAt         string
		Version            string
		CreatedAt          string
		UpdatedAt          string
		SearchVector       string
		Rank               string
		PresignedURL       string
		PreviewURL         string
	}{
		ID:                 "id",
		BusinessUnitID:     "business_unit_id",
		OrganizationID:     "organization_id",
		FileName:           "file_name",
		OriginalName:       "original_name",
		FileSize:           "file_size",
		FileType:           "file_type",
		PreviewStoragePath: "preview_storage_path",
		StoragePath:        "storage_path",
		DocumentTypeID:     "document_type_id",
		Status:             "status",
		ResourceID:         "resource_id",
		ResourceType:       "resource_type",
		ExpirationDate:     "expiration_date",
		Tags:               "tags",
		UploadedByID:       "uploaded_by_id",
		ApprovedByID:       "approved_by_id",
		ApprovedAt:         "approved_at",
		Version:            "version",
		CreatedAt:          "created_at",
		UpdatedAt:          "updated_at",
		SearchVector:       "search_vector",
		Rank:               "rank",
		PresignedURL:       "presigned_url",
		PreviewURL:         "preview_url",
	},

	// Column helpers
	Column: func(field string) string {
		return "doc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "doc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		FileNameEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FileNameNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FileNameGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileNameHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OriginalNameNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OriginalNameGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OriginalNameHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileSizeEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FileSizeNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FileSizeGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileSizeLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FileTypeEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FileTypeNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FileTypeGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FileTypeHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PreviewStoragePathNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PreviewStoragePathGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewStoragePathHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		StoragePathNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		StoragePathGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StoragePathHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentTypeIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DocumentTypeIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DocumentTypeIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DocumentTypeIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                    func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusNEQ                   func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusIn                    func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		StatusNotIn                 func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		ResourceIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ResourceIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ResourceIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ResourceIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ResourceTypeEQ              func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceTypeNEQ             func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceTypeIn              func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ResourceTypeNotIn           func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ExpirationDateEQ            func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpirationDateNEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpirationDateIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpirationDateNotIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpirationDateIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		ExpirationDateIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		TagsEQ                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsNEQ                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsIn                      func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		TagsNotIn                   func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		UploadedByIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UploadedByIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UploadedByIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UploadedByIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ApprovedByIDEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ApprovedByIDNEQ             func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ApprovedByIDIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ApprovedByIDNotIn           func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ApprovedByIDIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		ApprovedByIDIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ApprovedAtEQ                func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ApprovedAtNEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ApprovedAtIn                func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ApprovedAtNotIn             func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ApprovedAtIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		ApprovedAtIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PresignedURLNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PresignedURLGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PresignedURLHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PreviewURLNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PreviewURLGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PreviewURLHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		Tenant                      func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.organization_id"), bun.In(v))
		},
		FileNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.file_name"), v)
		},
		FileNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.file_name"), v)
		},
		FileNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.file_name"), bun.In(v))
		},
		FileNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.file_name"), bun.In(v))
		},
		FileNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.file_name"), v)
		},
		FileNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.file_name"), v)
		},
		FileNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.file_name"), v)
		},
		FileNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.file_name"), v)
		},
		FileNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.file_name"), "%"+v+"%")
		},
		FileNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.file_name"), v+"%")
		},
		FileNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.file_name"), "%"+v)
		},
		OriginalNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.original_name"), v)
		},
		OriginalNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.original_name"), v)
		},
		OriginalNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.original_name"), bun.In(v))
		},
		OriginalNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.original_name"), bun.In(v))
		},
		OriginalNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.original_name"), v)
		},
		OriginalNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.original_name"), v)
		},
		OriginalNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.original_name"), v)
		},
		OriginalNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.original_name"), v)
		},
		OriginalNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.original_name"), "%"+v+"%")
		},
		OriginalNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.original_name"), v+"%")
		},
		OriginalNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.original_name"), "%"+v)
		},
		FileSizeEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.file_size"), v)
		},
		FileSizeNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.file_size"), v)
		},
		FileSizeIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.file_size"), bun.In(v))
		},
		FileSizeNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.file_size"), bun.In(v))
		},
		FileSizeGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.file_size"), v)
		},
		FileSizeGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.file_size"), v)
		},
		FileSizeLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.file_size"), v)
		},
		FileSizeLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.file_size"), v)
		},
		FileTypeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.file_type"), v)
		},
		FileTypeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.file_type"), v)
		},
		FileTypeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.file_type"), bun.In(v))
		},
		FileTypeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.file_type"), bun.In(v))
		},
		FileTypeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.file_type"), v)
		},
		FileTypeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.file_type"), v)
		},
		FileTypeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.file_type"), v)
		},
		FileTypeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.file_type"), v)
		},
		FileTypeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.file_type"), "%"+v+"%")
		},
		FileTypeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.file_type"), v+"%")
		},
		FileTypeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.file_type"), "%"+v)
		},
		PreviewStoragePathEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.preview_storage_path"), v)
		},
		PreviewStoragePathNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.preview_storage_path"), v)
		},
		PreviewStoragePathIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.preview_storage_path"), bun.In(v))
		},
		PreviewStoragePathNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.preview_storage_path"), bun.In(v))
		},
		PreviewStoragePathGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.preview_storage_path"), v)
		},
		PreviewStoragePathGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.preview_storage_path"), v)
		},
		PreviewStoragePathLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.preview_storage_path"), v)
		},
		PreviewStoragePathLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.preview_storage_path"), v)
		},
		PreviewStoragePathContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.preview_storage_path"), "%"+v+"%")
		},
		PreviewStoragePathHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.preview_storage_path"), v+"%")
		},
		PreviewStoragePathHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.preview_storage_path"), "%"+v)
		},
		StoragePathEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.storage_path"), v)
		},
		StoragePathNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.storage_path"), v)
		},
		StoragePathIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.storage_path"), bun.In(v))
		},
		StoragePathNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.storage_path"), bun.In(v))
		},
		StoragePathGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.storage_path"), v)
		},
		StoragePathGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.storage_path"), v)
		},
		StoragePathLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.storage_path"), v)
		},
		StoragePathLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.storage_path"), v)
		},
		StoragePathContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.storage_path"), "%"+v+"%")
		},
		StoragePathHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.storage_path"), v+"%")
		},
		StoragePathHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.storage_path"), "%"+v)
		},
		DocumentTypeIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.document_type_id"), v)
		},
		DocumentTypeIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.document_type_id"), v)
		},
		DocumentTypeIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.document_type_id"), bun.In(v))
		},
		DocumentTypeIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.document_type_id"), bun.In(v))
		},
		StatusEQ: func(q *bun.SelectQuery, v Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.status"), bun.In(v))
		},
		ResourceIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.resource_id"), v)
		},
		ResourceIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.resource_id"), v)
		},
		ResourceIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.resource_id"), bun.In(v))
		},
		ResourceIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.resource_id"), bun.In(v))
		},
		ResourceTypeEQ: func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.resource_type"), v)
		},
		ResourceTypeNEQ: func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.resource_type"), v)
		},
		ResourceTypeIn: func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.resource_type"), bun.In(v))
		},
		ResourceTypeNotIn: func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.resource_type"), bun.In(v))
		},
		ExpirationDateEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.expiration_date"), v)
		},
		ExpirationDateNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.expiration_date"), v)
		},
		ExpirationDateIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.expiration_date"), bun.In(v))
		},
		ExpirationDateNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.expiration_date"), bun.In(v))
		},
		ExpirationDateIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("doc.expiration_date"))
		},
		ExpirationDateIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("doc.expiration_date"))
		},
		TagsEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.tags"), v)
		},
		TagsNEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.tags"), v)
		},
		TagsIn: func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.tags"), bun.In(v))
		},
		TagsNotIn: func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.tags"), bun.In(v))
		},
		UploadedByIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.uploaded_by_id"), v)
		},
		UploadedByIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.uploaded_by_id"), v)
		},
		UploadedByIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.uploaded_by_id"), bun.In(v))
		},
		UploadedByIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.uploaded_by_id"), bun.In(v))
		},
		ApprovedByIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.approved_by_id"), v)
		},
		ApprovedByIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.approved_by_id"), v)
		},
		ApprovedByIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.approved_by_id"), bun.In(v))
		},
		ApprovedByIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.approved_by_id"), bun.In(v))
		},
		ApprovedByIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("doc.approved_by_id"))
		},
		ApprovedByIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("doc.approved_by_id"))
		},
		ApprovedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.approved_at"), v)
		},
		ApprovedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.approved_at"), v)
		},
		ApprovedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.approved_at"), bun.In(v))
		},
		ApprovedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.approved_at"), bun.In(v))
		},
		ApprovedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("doc.approved_at"))
		},
		ApprovedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("doc.approved_at"))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.updated_at"), v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.rank"), "%"+v)
		},
		PresignedURLEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.presigned_url"), v)
		},
		PresignedURLNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.presigned_url"), v)
		},
		PresignedURLIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.presigned_url"), bun.In(v))
		},
		PresignedURLNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.presigned_url"), bun.In(v))
		},
		PresignedURLGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.presigned_url"), v)
		},
		PresignedURLGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.presigned_url"), v)
		},
		PresignedURLLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.presigned_url"), v)
		},
		PresignedURLLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.presigned_url"), v)
		},
		PresignedURLContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.presigned_url"), "%"+v+"%")
		},
		PresignedURLHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.presigned_url"), v+"%")
		},
		PresignedURLHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.presigned_url"), "%"+v)
		},
		PreviewURLEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("doc.preview_url"), v)
		},
		PreviewURLNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("doc.preview_url"), v)
		},
		PreviewURLIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("doc.preview_url"), bun.In(v))
		},
		PreviewURLNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("doc.preview_url"), bun.In(v))
		},
		PreviewURLGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("doc.preview_url"), v)
		},
		PreviewURLGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("doc.preview_url"), v)
		},
		PreviewURLLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("doc.preview_url"), v)
		},
		PreviewURLLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("doc.preview_url"), v)
		},
		PreviewURLContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.preview_url"), "%"+v+"%")
		},
		PreviewURLHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.preview_url"), v+"%")
		},
		PreviewURLHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("doc.preview_url"), "%"+v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("doc.organization_id"), orgID).
				Where("? = ?", bun.Ident("doc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("doc.id"), id).
				Where("? = ?", bun.Ident("doc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "doc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"doc.status ASC",
				"doc.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "doc.status DESC"
			}
			return "doc.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "doc.created_at DESC"
			}
			return "doc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "doc.updated_at DESC"
			}
			return "doc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]documentFieldConfig {
		return map[string]documentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "doc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "doc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "doc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"file_name": {
				Name:       "file_name",
				Column:     "doc.file_name",
				Sortable:   false,
				Filterable: true,
			},
			"original_name": {
				Name:       "original_name",
				Column:     "doc.original_name",
				Sortable:   false,
				Filterable: true,
			},
			"file_size": {
				Name:       "file_size",
				Column:     "doc.file_size",
				Sortable:   false,
				Filterable: false,
			},
			"file_type": {
				Name:       "file_type",
				Column:     "doc.file_type",
				Sortable:   false,
				Filterable: true,
			},
			"preview_storage_path": {
				Name:       "preview_storage_path",
				Column:     "doc.preview_storage_path",
				Sortable:   false,
				Filterable: false,
			},
			"storage_path": {
				Name:       "storage_path",
				Column:     "doc.storage_path",
				Sortable:   false,
				Filterable: false,
			},
			"document_type_id": {
				Name:       "document_type_id",
				Column:     "doc.document_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "doc.status",
				Sortable:   false,
				Filterable: true,
			},
			"resource_id": {
				Name:       "resource_id",
				Column:     "doc.resource_id",
				Sortable:   false,
				Filterable: true,
			},
			"resource_type": {
				Name:       "resource_type",
				Column:     "doc.resource_type",
				Sortable:   false,
				Filterable: false,
			},
			"expiration_date": {
				Name:       "expiration_date",
				Column:     "doc.expiration_date",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "doc.tags",
				Sortable:   false,
				Filterable: false,
			},
			"uploaded_by_id": {
				Name:       "uploaded_by_id",
				Column:     "doc.uploaded_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"approved_by_id": {
				Name:       "approved_by_id",
				Column:     "doc.approved_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"approved_at": {
				Name:       "approved_at",
				Column:     "doc.approved_at",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "doc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "doc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "doc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "doc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "doc.rank",
				Sortable:   false,
				Filterable: true,
			},
			"presigned_url": {
				Name:       "presigned_url",
				Column:     "doc.presigned_url",
				Sortable:   false,
				Filterable: false,
			},
			"preview_url": {
				Name:       "preview_url",
				Column:     "doc.preview_url",
				Sortable:   false,
				Filterable: false,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]documentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "doc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "doc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "doc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"file_name": {
				Name:       "file_name",
				Column:     "doc.file_name",
				Sortable:   false,
				Filterable: true,
			},
			"original_name": {
				Name:       "original_name",
				Column:     "doc.original_name",
				Sortable:   false,
				Filterable: true,
			},
			"file_size": {
				Name:       "file_size",
				Column:     "doc.file_size",
				Sortable:   false,
				Filterable: false,
			},
			"file_type": {
				Name:       "file_type",
				Column:     "doc.file_type",
				Sortable:   false,
				Filterable: true,
			},
			"preview_storage_path": {
				Name:       "preview_storage_path",
				Column:     "doc.preview_storage_path",
				Sortable:   false,
				Filterable: false,
			},
			"storage_path": {
				Name:       "storage_path",
				Column:     "doc.storage_path",
				Sortable:   false,
				Filterable: false,
			},
			"document_type_id": {
				Name:       "document_type_id",
				Column:     "doc.document_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "doc.status",
				Sortable:   false,
				Filterable: true,
			},
			"resource_id": {
				Name:       "resource_id",
				Column:     "doc.resource_id",
				Sortable:   false,
				Filterable: true,
			},
			"resource_type": {
				Name:       "resource_type",
				Column:     "doc.resource_type",
				Sortable:   false,
				Filterable: false,
			},
			"expiration_date": {
				Name:       "expiration_date",
				Column:     "doc.expiration_date",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "doc.tags",
				Sortable:   false,
				Filterable: false,
			},
			"uploaded_by_id": {
				Name:       "uploaded_by_id",
				Column:     "doc.uploaded_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"approved_by_id": {
				Name:       "approved_by_id",
				Column:     "doc.approved_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"approved_at": {
				Name:       "approved_at",
				Column:     "doc.approved_at",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "doc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "doc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "doc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "doc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "doc.rank",
				Sortable:   false,
				Filterable: true,
			},
			"presigned_url": {
				Name:       "presigned_url",
				Column:     "doc.presigned_url",
				Sortable:   false,
				Filterable: false,
			},
			"preview_url": {
				Name:       "preview_url",
				Column:     "doc.preview_url",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]documentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "doc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "doc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "doc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"file_name": {
				Name:       "file_name",
				Column:     "doc.file_name",
				Sortable:   false,
				Filterable: true,
			},
			"original_name": {
				Name:       "original_name",
				Column:     "doc.original_name",
				Sortable:   false,
				Filterable: true,
			},
			"file_size": {
				Name:       "file_size",
				Column:     "doc.file_size",
				Sortable:   false,
				Filterable: false,
			},
			"file_type": {
				Name:       "file_type",
				Column:     "doc.file_type",
				Sortable:   false,
				Filterable: true,
			},
			"preview_storage_path": {
				Name:       "preview_storage_path",
				Column:     "doc.preview_storage_path",
				Sortable:   false,
				Filterable: false,
			},
			"storage_path": {
				Name:       "storage_path",
				Column:     "doc.storage_path",
				Sortable:   false,
				Filterable: false,
			},
			"document_type_id": {
				Name:       "document_type_id",
				Column:     "doc.document_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "doc.status",
				Sortable:   false,
				Filterable: true,
			},
			"resource_id": {
				Name:       "resource_id",
				Column:     "doc.resource_id",
				Sortable:   false,
				Filterable: true,
			},
			"resource_type": {
				Name:       "resource_type",
				Column:     "doc.resource_type",
				Sortable:   false,
				Filterable: false,
			},
			"expiration_date": {
				Name:       "expiration_date",
				Column:     "doc.expiration_date",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "doc.tags",
				Sortable:   false,
				Filterable: false,
			},
			"uploaded_by_id": {
				Name:       "uploaded_by_id",
				Column:     "doc.uploaded_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"approved_by_id": {
				Name:       "approved_by_id",
				Column:     "doc.approved_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"approved_at": {
				Name:       "approved_at",
				Column:     "doc.approved_at",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "doc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "doc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "doc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "doc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "doc.rank",
				Sortable:   false,
				Filterable: true,
			},
			"presigned_url": {
				Name:       "presigned_url",
				Column:     "doc.presigned_url",
				Sortable:   false,
				Filterable: false,
			},
			"preview_url": {
				Name:       "preview_url",
				Column:     "doc.preview_url",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
		DT           string
		UploadedBy   string
		ApprovedBy   string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		DT:           "DT",
		UploadedBy:   "UploadedBy",
		ApprovedBy:   "ApprovedBy",
	},
}

// DocumentQueryBuilder provides a fluent interface for building queries
type DocumentQueryBuilder struct {
	query *bun.SelectQuery
}

// NewDocumentQuery creates a new query builder
func NewDocumentQuery(db bun.IDB) *DocumentQueryBuilder {
	return &DocumentQueryBuilder{
		query: db.NewSelect().Model((*Document)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func DocumentFromQuery(q *bun.SelectQuery) *DocumentQueryBuilder {
	return &DocumentQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *DocumentQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *DocumentQueryBuilder) Model(model interface{}) *DocumentQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *DocumentQueryBuilder) WhereIDEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *DocumentQueryBuilder) WhereIDNEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *DocumentQueryBuilder) WhereIDIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereIDNotIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *DocumentQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *DocumentQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *DocumentQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *DocumentQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *DocumentQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *DocumentQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereFileNameEQ adds a WHERE file_name = ? condition
func (b *DocumentQueryBuilder) WhereFileNameEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileNameEQ(b.query, v)
	return b
}

// WhereFileNameNEQ adds a WHERE file_name != ? condition
func (b *DocumentQueryBuilder) WhereFileNameNEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileNameNEQ(b.query, v)
	return b
}

// WhereFileNameIn adds a WHERE file_name IN (?) condition
func (b *DocumentQueryBuilder) WhereFileNameIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileNameIn(b.query, v)
	return b
}

// WhereFileNameNotIn adds a WHERE file_name NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereFileNameNotIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileNameNotIn(b.query, v)
	return b
}

// WhereFileNameContains adds a WHERE file_name LIKE ? condition
func (b *DocumentQueryBuilder) WhereFileNameContains(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileNameContains(b.query, v)
	return b
}

// WhereFileNameHasPrefix adds a WHERE file_name LIKE ? condition
func (b *DocumentQueryBuilder) WhereFileNameHasPrefix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileNameHasPrefix(b.query, v)
	return b
}

// WhereFileNameHasSuffix adds a WHERE file_name LIKE ? condition
func (b *DocumentQueryBuilder) WhereFileNameHasSuffix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileNameHasSuffix(b.query, v)
	return b
}

// WhereOriginalNameEQ adds a WHERE original_name = ? condition
func (b *DocumentQueryBuilder) WhereOriginalNameEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OriginalNameEQ(b.query, v)
	return b
}

// WhereOriginalNameNEQ adds a WHERE original_name != ? condition
func (b *DocumentQueryBuilder) WhereOriginalNameNEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OriginalNameNEQ(b.query, v)
	return b
}

// WhereOriginalNameIn adds a WHERE original_name IN (?) condition
func (b *DocumentQueryBuilder) WhereOriginalNameIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OriginalNameIn(b.query, v)
	return b
}

// WhereOriginalNameNotIn adds a WHERE original_name NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereOriginalNameNotIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OriginalNameNotIn(b.query, v)
	return b
}

// WhereOriginalNameContains adds a WHERE original_name LIKE ? condition
func (b *DocumentQueryBuilder) WhereOriginalNameContains(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OriginalNameContains(b.query, v)
	return b
}

// WhereOriginalNameHasPrefix adds a WHERE original_name LIKE ? condition
func (b *DocumentQueryBuilder) WhereOriginalNameHasPrefix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OriginalNameHasPrefix(b.query, v)
	return b
}

// WhereOriginalNameHasSuffix adds a WHERE original_name LIKE ? condition
func (b *DocumentQueryBuilder) WhereOriginalNameHasSuffix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.OriginalNameHasSuffix(b.query, v)
	return b
}

// WhereFileSizeEQ adds a WHERE file_size = ? condition
func (b *DocumentQueryBuilder) WhereFileSizeEQ(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileSizeEQ(b.query, v)
	return b
}

// WhereFileSizeNEQ adds a WHERE file_size != ? condition
func (b *DocumentQueryBuilder) WhereFileSizeNEQ(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileSizeNEQ(b.query, v)
	return b
}

// WhereFileSizeGT adds a WHERE file_size > ? condition
func (b *DocumentQueryBuilder) WhereFileSizeGT(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileSizeGT(b.query, v)
	return b
}

// WhereFileSizeGTE adds a WHERE file_size >= ? condition
func (b *DocumentQueryBuilder) WhereFileSizeGTE(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileSizeGTE(b.query, v)
	return b
}

// WhereFileSizeLT adds a WHERE file_size < ? condition
func (b *DocumentQueryBuilder) WhereFileSizeLT(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileSizeLT(b.query, v)
	return b
}

// WhereFileSizeLTE adds a WHERE file_size <= ? condition
func (b *DocumentQueryBuilder) WhereFileSizeLTE(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileSizeLTE(b.query, v)
	return b
}

// WhereFileSizeIn adds a WHERE file_size IN (?) condition
func (b *DocumentQueryBuilder) WhereFileSizeIn(v []int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileSizeIn(b.query, v)
	return b
}

// WhereFileSizeNotIn adds a WHERE file_size NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereFileSizeNotIn(v []int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileSizeNotIn(b.query, v)
	return b
}

// WhereFileTypeEQ adds a WHERE file_type = ? condition
func (b *DocumentQueryBuilder) WhereFileTypeEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileTypeEQ(b.query, v)
	return b
}

// WhereFileTypeNEQ adds a WHERE file_type != ? condition
func (b *DocumentQueryBuilder) WhereFileTypeNEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileTypeNEQ(b.query, v)
	return b
}

// WhereFileTypeIn adds a WHERE file_type IN (?) condition
func (b *DocumentQueryBuilder) WhereFileTypeIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileTypeIn(b.query, v)
	return b
}

// WhereFileTypeNotIn adds a WHERE file_type NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereFileTypeNotIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileTypeNotIn(b.query, v)
	return b
}

// WhereFileTypeContains adds a WHERE file_type LIKE ? condition
func (b *DocumentQueryBuilder) WhereFileTypeContains(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileTypeContains(b.query, v)
	return b
}

// WhereFileTypeHasPrefix adds a WHERE file_type LIKE ? condition
func (b *DocumentQueryBuilder) WhereFileTypeHasPrefix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileTypeHasPrefix(b.query, v)
	return b
}

// WhereFileTypeHasSuffix adds a WHERE file_type LIKE ? condition
func (b *DocumentQueryBuilder) WhereFileTypeHasSuffix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.FileTypeHasSuffix(b.query, v)
	return b
}

// WherePreviewStoragePathEQ adds a WHERE preview_storage_path = ? condition
func (b *DocumentQueryBuilder) WherePreviewStoragePathEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewStoragePathEQ(b.query, v)
	return b
}

// WherePreviewStoragePathNEQ adds a WHERE preview_storage_path != ? condition
func (b *DocumentQueryBuilder) WherePreviewStoragePathNEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewStoragePathNEQ(b.query, v)
	return b
}

// WherePreviewStoragePathIn adds a WHERE preview_storage_path IN (?) condition
func (b *DocumentQueryBuilder) WherePreviewStoragePathIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewStoragePathIn(b.query, v)
	return b
}

// WherePreviewStoragePathNotIn adds a WHERE preview_storage_path NOT IN (?) condition
func (b *DocumentQueryBuilder) WherePreviewStoragePathNotIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewStoragePathNotIn(b.query, v)
	return b
}

// WherePreviewStoragePathContains adds a WHERE preview_storage_path LIKE ? condition
func (b *DocumentQueryBuilder) WherePreviewStoragePathContains(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewStoragePathContains(b.query, v)
	return b
}

// WherePreviewStoragePathHasPrefix adds a WHERE preview_storage_path LIKE ? condition
func (b *DocumentQueryBuilder) WherePreviewStoragePathHasPrefix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewStoragePathHasPrefix(b.query, v)
	return b
}

// WherePreviewStoragePathHasSuffix adds a WHERE preview_storage_path LIKE ? condition
func (b *DocumentQueryBuilder) WherePreviewStoragePathHasSuffix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewStoragePathHasSuffix(b.query, v)
	return b
}

// WhereStoragePathEQ adds a WHERE storage_path = ? condition
func (b *DocumentQueryBuilder) WhereStoragePathEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StoragePathEQ(b.query, v)
	return b
}

// WhereStoragePathNEQ adds a WHERE storage_path != ? condition
func (b *DocumentQueryBuilder) WhereStoragePathNEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StoragePathNEQ(b.query, v)
	return b
}

// WhereStoragePathIn adds a WHERE storage_path IN (?) condition
func (b *DocumentQueryBuilder) WhereStoragePathIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StoragePathIn(b.query, v)
	return b
}

// WhereStoragePathNotIn adds a WHERE storage_path NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereStoragePathNotIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StoragePathNotIn(b.query, v)
	return b
}

// WhereStoragePathContains adds a WHERE storage_path LIKE ? condition
func (b *DocumentQueryBuilder) WhereStoragePathContains(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StoragePathContains(b.query, v)
	return b
}

// WhereStoragePathHasPrefix adds a WHERE storage_path LIKE ? condition
func (b *DocumentQueryBuilder) WhereStoragePathHasPrefix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StoragePathHasPrefix(b.query, v)
	return b
}

// WhereStoragePathHasSuffix adds a WHERE storage_path LIKE ? condition
func (b *DocumentQueryBuilder) WhereStoragePathHasSuffix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StoragePathHasSuffix(b.query, v)
	return b
}

// WhereDocumentTypeIDEQ adds a WHERE document_type_id = ? condition
func (b *DocumentQueryBuilder) WhereDocumentTypeIDEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.DocumentTypeIDEQ(b.query, v)
	return b
}

// WhereDocumentTypeIDNEQ adds a WHERE document_type_id != ? condition
func (b *DocumentQueryBuilder) WhereDocumentTypeIDNEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.DocumentTypeIDNEQ(b.query, v)
	return b
}

// WhereDocumentTypeIDIn adds a WHERE document_type_id IN (?) condition
func (b *DocumentQueryBuilder) WhereDocumentTypeIDIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.DocumentTypeIDIn(b.query, v)
	return b
}

// WhereDocumentTypeIDNotIn adds a WHERE document_type_id NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereDocumentTypeIDNotIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.DocumentTypeIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *DocumentQueryBuilder) WhereStatusEQ(v Status) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *DocumentQueryBuilder) WhereStatusNEQ(v Status) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *DocumentQueryBuilder) WhereStatusIn(v []Status) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereStatusNotIn(v []Status) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereResourceIDEQ adds a WHERE resource_id = ? condition
func (b *DocumentQueryBuilder) WhereResourceIDEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ResourceIDEQ(b.query, v)
	return b
}

// WhereResourceIDNEQ adds a WHERE resource_id != ? condition
func (b *DocumentQueryBuilder) WhereResourceIDNEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ResourceIDNEQ(b.query, v)
	return b
}

// WhereResourceIDIn adds a WHERE resource_id IN (?) condition
func (b *DocumentQueryBuilder) WhereResourceIDIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ResourceIDIn(b.query, v)
	return b
}

// WhereResourceIDNotIn adds a WHERE resource_id NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereResourceIDNotIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ResourceIDNotIn(b.query, v)
	return b
}

// WhereResourceTypeEQ adds a WHERE resource_type = ? condition
func (b *DocumentQueryBuilder) WhereResourceTypeEQ(v permission.Resource) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ResourceTypeEQ(b.query, v)
	return b
}

// WhereResourceTypeNEQ adds a WHERE resource_type != ? condition
func (b *DocumentQueryBuilder) WhereResourceTypeNEQ(v permission.Resource) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ResourceTypeNEQ(b.query, v)
	return b
}

// WhereResourceTypeIn adds a WHERE resource_type IN (?) condition
func (b *DocumentQueryBuilder) WhereResourceTypeIn(v []permission.Resource) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ResourceTypeIn(b.query, v)
	return b
}

// WhereResourceTypeNotIn adds a WHERE resource_type NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereResourceTypeNotIn(v []permission.Resource) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ResourceTypeNotIn(b.query, v)
	return b
}

// WhereExpirationDateEQ adds a WHERE expiration_date = ? condition
func (b *DocumentQueryBuilder) WhereExpirationDateEQ(v *int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ExpirationDateEQ(b.query, v)
	return b
}

// WhereExpirationDateNEQ adds a WHERE expiration_date != ? condition
func (b *DocumentQueryBuilder) WhereExpirationDateNEQ(v *int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ExpirationDateNEQ(b.query, v)
	return b
}

// WhereExpirationDateIn adds a WHERE expiration_date IN (?) condition
func (b *DocumentQueryBuilder) WhereExpirationDateIn(v []*int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ExpirationDateIn(b.query, v)
	return b
}

// WhereExpirationDateNotIn adds a WHERE expiration_date NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereExpirationDateNotIn(v []*int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ExpirationDateNotIn(b.query, v)
	return b
}

// WhereTagsEQ adds a WHERE tags = ? condition
func (b *DocumentQueryBuilder) WhereTagsEQ(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.TagsEQ(b.query, v)
	return b
}

// WhereTagsNEQ adds a WHERE tags != ? condition
func (b *DocumentQueryBuilder) WhereTagsNEQ(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.TagsNEQ(b.query, v)
	return b
}

// WhereTagsIn adds a WHERE tags IN (?) condition
func (b *DocumentQueryBuilder) WhereTagsIn(v [][]string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.TagsIn(b.query, v)
	return b
}

// WhereTagsNotIn adds a WHERE tags NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereTagsNotIn(v [][]string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.TagsNotIn(b.query, v)
	return b
}

// WhereUploadedByIDEQ adds a WHERE uploaded_by_id = ? condition
func (b *DocumentQueryBuilder) WhereUploadedByIDEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UploadedByIDEQ(b.query, v)
	return b
}

// WhereUploadedByIDNEQ adds a WHERE uploaded_by_id != ? condition
func (b *DocumentQueryBuilder) WhereUploadedByIDNEQ(v pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UploadedByIDNEQ(b.query, v)
	return b
}

// WhereUploadedByIDIn adds a WHERE uploaded_by_id IN (?) condition
func (b *DocumentQueryBuilder) WhereUploadedByIDIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UploadedByIDIn(b.query, v)
	return b
}

// WhereUploadedByIDNotIn adds a WHERE uploaded_by_id NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereUploadedByIDNotIn(v []pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UploadedByIDNotIn(b.query, v)
	return b
}

// WhereApprovedByIDEQ adds a WHERE approved_by_id = ? condition
func (b *DocumentQueryBuilder) WhereApprovedByIDEQ(v *pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ApprovedByIDEQ(b.query, v)
	return b
}

// WhereApprovedByIDNEQ adds a WHERE approved_by_id != ? condition
func (b *DocumentQueryBuilder) WhereApprovedByIDNEQ(v *pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ApprovedByIDNEQ(b.query, v)
	return b
}

// WhereApprovedByIDIn adds a WHERE approved_by_id IN (?) condition
func (b *DocumentQueryBuilder) WhereApprovedByIDIn(v []*pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ApprovedByIDIn(b.query, v)
	return b
}

// WhereApprovedByIDNotIn adds a WHERE approved_by_id NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereApprovedByIDNotIn(v []*pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ApprovedByIDNotIn(b.query, v)
	return b
}

// WhereApprovedAtEQ adds a WHERE approved_at = ? condition
func (b *DocumentQueryBuilder) WhereApprovedAtEQ(v *int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ApprovedAtEQ(b.query, v)
	return b
}

// WhereApprovedAtNEQ adds a WHERE approved_at != ? condition
func (b *DocumentQueryBuilder) WhereApprovedAtNEQ(v *int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ApprovedAtNEQ(b.query, v)
	return b
}

// WhereApprovedAtIn adds a WHERE approved_at IN (?) condition
func (b *DocumentQueryBuilder) WhereApprovedAtIn(v []*int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ApprovedAtIn(b.query, v)
	return b
}

// WhereApprovedAtNotIn adds a WHERE approved_at NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereApprovedAtNotIn(v []*int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.ApprovedAtNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *DocumentQueryBuilder) WhereVersionEQ(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *DocumentQueryBuilder) WhereVersionNEQ(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *DocumentQueryBuilder) WhereVersionGT(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *DocumentQueryBuilder) WhereVersionGTE(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *DocumentQueryBuilder) WhereVersionLT(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *DocumentQueryBuilder) WhereVersionLTE(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *DocumentQueryBuilder) WhereVersionIn(v []int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereVersionNotIn(v []int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *DocumentQueryBuilder) WhereCreatedAtEQ(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *DocumentQueryBuilder) WhereCreatedAtNEQ(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *DocumentQueryBuilder) WhereCreatedAtGT(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *DocumentQueryBuilder) WhereCreatedAtGTE(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *DocumentQueryBuilder) WhereCreatedAtLT(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *DocumentQueryBuilder) WhereCreatedAtLTE(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *DocumentQueryBuilder) WhereCreatedAtIn(v []int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereCreatedAtNotIn(v []int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *DocumentQueryBuilder) WhereUpdatedAtEQ(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *DocumentQueryBuilder) WhereUpdatedAtNEQ(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *DocumentQueryBuilder) WhereUpdatedAtGT(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *DocumentQueryBuilder) WhereUpdatedAtGTE(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *DocumentQueryBuilder) WhereUpdatedAtLT(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *DocumentQueryBuilder) WhereUpdatedAtLTE(v int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *DocumentQueryBuilder) WhereUpdatedAtIn(v []int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereUpdatedAtNotIn(v []int64) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *DocumentQueryBuilder) WhereSearchVectorEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *DocumentQueryBuilder) WhereSearchVectorNEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *DocumentQueryBuilder) WhereSearchVectorIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereSearchVectorNotIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *DocumentQueryBuilder) WhereSearchVectorContains(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *DocumentQueryBuilder) WhereSearchVectorHasPrefix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *DocumentQueryBuilder) WhereSearchVectorHasSuffix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *DocumentQueryBuilder) WhereRankEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *DocumentQueryBuilder) WhereRankNEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *DocumentQueryBuilder) WhereRankIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *DocumentQueryBuilder) WhereRankNotIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *DocumentQueryBuilder) WhereRankContains(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *DocumentQueryBuilder) WhereRankHasPrefix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *DocumentQueryBuilder) WhereRankHasSuffix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// WherePresignedURLEQ adds a WHERE presigned_url = ? condition
func (b *DocumentQueryBuilder) WherePresignedURLEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PresignedURLEQ(b.query, v)
	return b
}

// WherePresignedURLNEQ adds a WHERE presigned_url != ? condition
func (b *DocumentQueryBuilder) WherePresignedURLNEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PresignedURLNEQ(b.query, v)
	return b
}

// WherePresignedURLIn adds a WHERE presigned_url IN (?) condition
func (b *DocumentQueryBuilder) WherePresignedURLIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PresignedURLIn(b.query, v)
	return b
}

// WherePresignedURLNotIn adds a WHERE presigned_url NOT IN (?) condition
func (b *DocumentQueryBuilder) WherePresignedURLNotIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PresignedURLNotIn(b.query, v)
	return b
}

// WherePresignedURLContains adds a WHERE presigned_url LIKE ? condition
func (b *DocumentQueryBuilder) WherePresignedURLContains(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PresignedURLContains(b.query, v)
	return b
}

// WherePresignedURLHasPrefix adds a WHERE presigned_url LIKE ? condition
func (b *DocumentQueryBuilder) WherePresignedURLHasPrefix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PresignedURLHasPrefix(b.query, v)
	return b
}

// WherePresignedURLHasSuffix adds a WHERE presigned_url LIKE ? condition
func (b *DocumentQueryBuilder) WherePresignedURLHasSuffix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PresignedURLHasSuffix(b.query, v)
	return b
}

// WherePreviewURLEQ adds a WHERE preview_url = ? condition
func (b *DocumentQueryBuilder) WherePreviewURLEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewURLEQ(b.query, v)
	return b
}

// WherePreviewURLNEQ adds a WHERE preview_url != ? condition
func (b *DocumentQueryBuilder) WherePreviewURLNEQ(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewURLNEQ(b.query, v)
	return b
}

// WherePreviewURLIn adds a WHERE preview_url IN (?) condition
func (b *DocumentQueryBuilder) WherePreviewURLIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewURLIn(b.query, v)
	return b
}

// WherePreviewURLNotIn adds a WHERE preview_url NOT IN (?) condition
func (b *DocumentQueryBuilder) WherePreviewURLNotIn(v []string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewURLNotIn(b.query, v)
	return b
}

// WherePreviewURLContains adds a WHERE preview_url LIKE ? condition
func (b *DocumentQueryBuilder) WherePreviewURLContains(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewURLContains(b.query, v)
	return b
}

// WherePreviewURLHasPrefix adds a WHERE preview_url LIKE ? condition
func (b *DocumentQueryBuilder) WherePreviewURLHasPrefix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewURLHasPrefix(b.query, v)
	return b
}

// WherePreviewURLHasSuffix adds a WHERE preview_url LIKE ? condition
func (b *DocumentQueryBuilder) WherePreviewURLHasSuffix(v string) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.PreviewURLHasSuffix(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *DocumentQueryBuilder) WhereTenant(orgID, buID pulid.ID) *DocumentQueryBuilder {
	b.query = DocumentQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *DocumentQueryBuilder) WhereGroup(sep string, fn func(*DocumentQueryBuilder) *DocumentQueryBuilder) *DocumentQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &DocumentQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *DocumentQueryBuilder) Where(query string, args ...interface{}) *DocumentQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *DocumentQueryBuilder) OrderBy(column string, desc ...bool) *DocumentQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(DocumentQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *DocumentQueryBuilder) Limit(n int) *DocumentQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *DocumentQueryBuilder) Offset(n int) *DocumentQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *DocumentQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *DocumentQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *DocumentQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *DocumentQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *DocumentQueryBuilder) All(ctx context.Context) ([]*Document, error) {
	var entities []*Document
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *DocumentQueryBuilder) AllWithCount(ctx context.Context) ([]*Document, int, error) {
	var entities []*Document
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *DocumentQueryBuilder) One(ctx context.Context) (*Document, error) {
	entity := new(Document)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *DocumentQueryBuilder) First(ctx context.Context) (*Document, error) {
	entity := new(Document)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// DocumentBuild creates a chainable query builder
func DocumentBuild(db bun.IDB) *DocumentQueryBuilder {
	return NewDocumentQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *DocumentQueryBuilder) LoadBusinessUnit() *DocumentQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *DocumentQueryBuilder) LoadOrganization() *DocumentQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadDT loads the DT relationship
func (b *DocumentQueryBuilder) LoadDT() *DocumentQueryBuilder {
	b.query = b.query.Relation("DT")
	return b
}

// LoadUploadedBy loads the UploadedBy relationship
func (b *DocumentQueryBuilder) LoadUploadedBy() *DocumentQueryBuilder {
	b.query = b.query.Relation("UploadedBy")
	return b
}

// LoadApprovedBy loads the ApprovedBy relationship
func (b *DocumentQueryBuilder) LoadApprovedBy() *DocumentQueryBuilder {
	b.query = b.query.Relation("ApprovedBy")
	return b
}

// LoadAllRelations loads all relationships for Document
func (b *DocumentQueryBuilder) LoadAllRelations() *DocumentQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadDT()
	b.LoadUploadedBy()
	b.LoadApprovedBy()
	return b
}

// DocumentRelationChain provides a fluent API for building nested relationship chains
type DocumentRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewDocumentRelationChain creates a new relation chain builder
func NewDocumentRelationChain() *DocumentRelationChain {
	return &DocumentRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *DocumentRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *DocumentRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *DocumentRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *DocumentRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *DocumentQueryBuilder) WithBusinessUnit() *DocumentRelationChainBuilder {
	chain := &DocumentRelationChainBuilder{
		parent: b,
		chain:  NewDocumentRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *DocumentQueryBuilder) WithOrganization() *DocumentRelationChainBuilder {
	chain := &DocumentRelationChainBuilder{
		parent: b,
		chain:  NewDocumentRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithDT creates a relation chain starting with DT
func (b *DocumentQueryBuilder) WithDT() *DocumentRelationChainBuilder {
	chain := &DocumentRelationChainBuilder{
		parent: b,
		chain:  NewDocumentRelationChain(),
	}
	chain.chain.Add("DT")
	return chain
}

// WithUploadedBy creates a relation chain starting with UploadedBy
func (b *DocumentQueryBuilder) WithUploadedBy() *DocumentRelationChainBuilder {
	chain := &DocumentRelationChainBuilder{
		parent: b,
		chain:  NewDocumentRelationChain(),
	}
	chain.chain.Add("UploadedBy")
	return chain
}

// WithApprovedBy creates a relation chain starting with ApprovedBy
func (b *DocumentQueryBuilder) WithApprovedBy() *DocumentRelationChainBuilder {
	chain := &DocumentRelationChainBuilder{
		parent: b,
		chain:  NewDocumentRelationChain(),
	}
	chain.chain.Add("ApprovedBy")
	return chain
}

// DocumentRelationChainBuilder provides fluent API for building nested relations
type DocumentRelationChainBuilder struct {
	parent *DocumentQueryBuilder
	chain  *DocumentRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *DocumentRelationChainBuilder) Load() *DocumentQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *DocumentRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *DocumentRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *DocumentRelationChainBuilder) OrderBy(order string) *DocumentRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *DocumentRelationChainBuilder) Where(condition string, args ...interface{}) *DocumentRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
