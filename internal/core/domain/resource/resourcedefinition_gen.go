// Code generated by gen-trenova. DO NOT EDIT.

package resource

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain/permission"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// resourceDefinitionFieldConfig provides field configuration for ResourceDefinition
type resourceDefinitionFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ResourceDefinitionQuery provides type-safe query helpers and constants
var ResourceDefinitionQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                 string
		ResourceType       string
		DisplayName        string
		TableName          string
		Description        string
		AllowCustomFields  string
		AllowAutomations   string
		AllowNotifications string
		Version            string
		CreatedAt          string
		UpdatedAt          string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ResourceTypeEQ        func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceTypeNEQ       func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		DisplayNameEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DisplayNameNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DisplayNameGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TableNameNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TableNameGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AllowCustomFieldsEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowCustomFieldsNEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowAutomationsEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowAutomationsNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowNotificationsEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowNotificationsNEQ func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]resourceDefinitionFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "resource_definitions",
	Alias:    "rd",
	IDPrefix: "rd_",

	// Field names
	Field: struct {
		ID                 string
		ResourceType       string
		DisplayName        string
		TableName          string
		Description        string
		AllowCustomFields  string
		AllowAutomations   string
		AllowNotifications string
		Version            string
		CreatedAt          string
		UpdatedAt          string
	}{
		ID:                 "id",
		ResourceType:       "resource_type",
		DisplayName:        "display_name",
		TableName:          "table_name",
		Description:        "description",
		AllowCustomFields:  "allow_custom_fields",
		AllowAutomations:   "allow_automations",
		AllowNotifications: "allow_notifications",
		Version:            "version",
		CreatedAt:          "created_at",
		UpdatedAt:          "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "rd." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "rd." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ResourceTypeEQ        func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceTypeNEQ       func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		DisplayNameEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DisplayNameNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DisplayNameGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisplayNameHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TableNameNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TableNameGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableNameHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AllowCustomFieldsEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowCustomFieldsNEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowAutomationsEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowAutomationsNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowNotificationsEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowNotificationsNEQ func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.id"), v)
		},
		ResourceTypeEQ: func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.resource_type"), v)
		},
		ResourceTypeNEQ: func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.resource_type"), v)
		},
		DisplayNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.display_name"), v)
		},
		DisplayNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.display_name"), v)
		},
		DisplayNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rd.display_name"), bun.In(v))
		},
		DisplayNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rd.display_name"), bun.In(v))
		},
		DisplayNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rd.display_name"), v)
		},
		DisplayNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rd.display_name"), v)
		},
		DisplayNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rd.display_name"), v)
		},
		DisplayNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rd.display_name"), v)
		},
		DisplayNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rd.display_name"), "%"+v+"%")
		},
		DisplayNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rd.display_name"), v+"%")
		},
		DisplayNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rd.display_name"), "%"+v)
		},
		TableNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.table_name"), v)
		},
		TableNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.table_name"), v)
		},
		TableNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rd.table_name"), bun.In(v))
		},
		TableNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rd.table_name"), bun.In(v))
		},
		TableNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rd.table_name"), v)
		},
		TableNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rd.table_name"), v)
		},
		TableNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rd.table_name"), v)
		},
		TableNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rd.table_name"), v)
		},
		TableNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rd.table_name"), "%"+v+"%")
		},
		TableNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rd.table_name"), v+"%")
		},
		TableNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rd.table_name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rd.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rd.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rd.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rd.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rd.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rd.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rd.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rd.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("rd.description"), "%"+v)
		},
		AllowCustomFieldsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.allow_custom_fields"), v)
		},
		AllowCustomFieldsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.allow_custom_fields"), v)
		},
		AllowAutomationsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.allow_automations"), v)
		},
		AllowAutomationsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.allow_automations"), v)
		},
		AllowNotificationsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.allow_notifications"), v)
		},
		AllowNotificationsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.allow_notifications"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rd.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rd.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rd.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rd.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rd.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rd.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rd.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rd.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rd.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rd.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rd.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rd.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rd.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rd.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rd.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rd.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("rd.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("rd.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("rd.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("rd.updated_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("rd.id"), id).
				Where("? = ?", bun.Ident("rd.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "rd." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"rd.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "rd.created_at DESC"
			}
			return "rd.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "rd.updated_at DESC"
			}
			return "rd.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]resourceDefinitionFieldConfig {
		return map[string]resourceDefinitionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "rd.id",
				Sortable:   false,
				Filterable: true,
			},
			"resource_type": {
				Name:       "resource_type",
				Column:     "rd.resource_type",
				Sortable:   false,
				Filterable: false,
			},
			"display_name": {
				Name:       "display_name",
				Column:     "rd.display_name",
				Sortable:   false,
				Filterable: true,
			},
			"table_name": {
				Name:       "table_name",
				Column:     "rd.table_name",
				Sortable:   false,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "rd.description",
				Sortable:   false,
				Filterable: false,
			},
			"allow_custom_fields": {
				Name:       "allow_custom_fields",
				Column:     "rd.allow_custom_fields",
				Sortable:   false,
				Filterable: false,
			},
			"allow_automations": {
				Name:       "allow_automations",
				Column:     "rd.allow_automations",
				Sortable:   false,
				Filterable: false,
			},
			"allow_notifications": {
				Name:       "allow_notifications",
				Column:     "rd.allow_notifications",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "rd.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "rd.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "rd.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]resourceDefinitionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "rd.id",
				Sortable:   false,
				Filterable: true,
			},
			"resource_type": {
				Name:       "resource_type",
				Column:     "rd.resource_type",
				Sortable:   false,
				Filterable: false,
			},
			"display_name": {
				Name:       "display_name",
				Column:     "rd.display_name",
				Sortable:   false,
				Filterable: true,
			},
			"table_name": {
				Name:       "table_name",
				Column:     "rd.table_name",
				Sortable:   false,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "rd.description",
				Sortable:   false,
				Filterable: false,
			},
			"allow_custom_fields": {
				Name:       "allow_custom_fields",
				Column:     "rd.allow_custom_fields",
				Sortable:   false,
				Filterable: false,
			},
			"allow_automations": {
				Name:       "allow_automations",
				Column:     "rd.allow_automations",
				Sortable:   false,
				Filterable: false,
			},
			"allow_notifications": {
				Name:       "allow_notifications",
				Column:     "rd.allow_notifications",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "rd.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "rd.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "rd.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]resourceDefinitionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "rd.id",
				Sortable:   false,
				Filterable: true,
			},
			"resource_type": {
				Name:       "resource_type",
				Column:     "rd.resource_type",
				Sortable:   false,
				Filterable: false,
			},
			"display_name": {
				Name:       "display_name",
				Column:     "rd.display_name",
				Sortable:   false,
				Filterable: true,
			},
			"table_name": {
				Name:       "table_name",
				Column:     "rd.table_name",
				Sortable:   false,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "rd.description",
				Sortable:   false,
				Filterable: false,
			},
			"allow_custom_fields": {
				Name:       "allow_custom_fields",
				Column:     "rd.allow_custom_fields",
				Sortable:   false,
				Filterable: false,
			},
			"allow_automations": {
				Name:       "allow_automations",
				Column:     "rd.allow_automations",
				Sortable:   false,
				Filterable: false,
			},
			"allow_notifications": {
				Name:       "allow_notifications",
				Column:     "rd.allow_notifications",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "rd.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "rd.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "rd.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// ResourceDefinitionQueryBuilder provides a fluent interface for building queries
type ResourceDefinitionQueryBuilder struct {
	query *bun.SelectQuery
}

// NewResourceDefinitionQuery creates a new query builder
func NewResourceDefinitionQuery(db bun.IDB) *ResourceDefinitionQueryBuilder {
	return &ResourceDefinitionQueryBuilder{
		query: db.NewSelect().Model((*ResourceDefinition)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ResourceDefinitionFromQuery(q *bun.SelectQuery) *ResourceDefinitionQueryBuilder {
	return &ResourceDefinitionQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ResourceDefinitionQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ResourceDefinitionQueryBuilder) Model(model interface{}) *ResourceDefinitionQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereIDEQ(v pulid.ID) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereIDNEQ(v pulid.ID) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereResourceTypeEQ adds a WHERE resource_type = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereResourceTypeEQ(v permission.Resource) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.ResourceTypeEQ(b.query, v)
	return b
}

// WhereResourceTypeNEQ adds a WHERE resource_type != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereResourceTypeNEQ(v permission.Resource) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.ResourceTypeNEQ(b.query, v)
	return b
}

// WhereDisplayNameEQ adds a WHERE display_name = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDisplayNameEQ(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DisplayNameEQ(b.query, v)
	return b
}

// WhereDisplayNameNEQ adds a WHERE display_name != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDisplayNameNEQ(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DisplayNameNEQ(b.query, v)
	return b
}

// WhereDisplayNameIn adds a WHERE display_name IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereDisplayNameIn(v []string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DisplayNameIn(b.query, v)
	return b
}

// WhereDisplayNameNotIn adds a WHERE display_name NOT IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereDisplayNameNotIn(v []string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DisplayNameNotIn(b.query, v)
	return b
}

// WhereDisplayNameContains adds a WHERE display_name LIKE ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDisplayNameContains(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DisplayNameContains(b.query, v)
	return b
}

// WhereDisplayNameHasPrefix adds a WHERE display_name LIKE ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDisplayNameHasPrefix(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DisplayNameHasPrefix(b.query, v)
	return b
}

// WhereDisplayNameHasSuffix adds a WHERE display_name LIKE ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDisplayNameHasSuffix(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DisplayNameHasSuffix(b.query, v)
	return b
}

// WhereTableNameEQ adds a WHERE table_name = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereTableNameEQ(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.TableNameEQ(b.query, v)
	return b
}

// WhereTableNameNEQ adds a WHERE table_name != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereTableNameNEQ(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.TableNameNEQ(b.query, v)
	return b
}

// WhereTableNameIn adds a WHERE table_name IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereTableNameIn(v []string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.TableNameIn(b.query, v)
	return b
}

// WhereTableNameNotIn adds a WHERE table_name NOT IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereTableNameNotIn(v []string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.TableNameNotIn(b.query, v)
	return b
}

// WhereTableNameContains adds a WHERE table_name LIKE ? condition
func (b *ResourceDefinitionQueryBuilder) WhereTableNameContains(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.TableNameContains(b.query, v)
	return b
}

// WhereTableNameHasPrefix adds a WHERE table_name LIKE ? condition
func (b *ResourceDefinitionQueryBuilder) WhereTableNameHasPrefix(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.TableNameHasPrefix(b.query, v)
	return b
}

// WhereTableNameHasSuffix adds a WHERE table_name LIKE ? condition
func (b *ResourceDefinitionQueryBuilder) WhereTableNameHasSuffix(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.TableNameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDescriptionEQ(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDescriptionNEQ(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereDescriptionIn(v []string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereDescriptionNotIn(v []string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDescriptionContains(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDescriptionHasPrefix(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *ResourceDefinitionQueryBuilder) WhereDescriptionHasSuffix(v string) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereAllowCustomFieldsEQ adds a WHERE allow_custom_fields = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereAllowCustomFieldsEQ(v bool) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.AllowCustomFieldsEQ(b.query, v)
	return b
}

// WhereAllowCustomFieldsNEQ adds a WHERE allow_custom_fields != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereAllowCustomFieldsNEQ(v bool) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.AllowCustomFieldsNEQ(b.query, v)
	return b
}

// WhereAllowAutomationsEQ adds a WHERE allow_automations = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereAllowAutomationsEQ(v bool) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.AllowAutomationsEQ(b.query, v)
	return b
}

// WhereAllowAutomationsNEQ adds a WHERE allow_automations != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereAllowAutomationsNEQ(v bool) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.AllowAutomationsNEQ(b.query, v)
	return b
}

// WhereAllowNotificationsEQ adds a WHERE allow_notifications = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereAllowNotificationsEQ(v bool) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.AllowNotificationsEQ(b.query, v)
	return b
}

// WhereAllowNotificationsNEQ adds a WHERE allow_notifications != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereAllowNotificationsNEQ(v bool) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.AllowNotificationsNEQ(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereVersionEQ(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereVersionNEQ(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ResourceDefinitionQueryBuilder) WhereVersionGT(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ResourceDefinitionQueryBuilder) WhereVersionGTE(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ResourceDefinitionQueryBuilder) WhereVersionLT(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ResourceDefinitionQueryBuilder) WhereVersionLTE(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereVersionIn(v []int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereVersionNotIn(v []int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereCreatedAtEQ(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereCreatedAtNEQ(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ResourceDefinitionQueryBuilder) WhereCreatedAtGT(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ResourceDefinitionQueryBuilder) WhereCreatedAtGTE(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ResourceDefinitionQueryBuilder) WhereCreatedAtLT(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ResourceDefinitionQueryBuilder) WhereCreatedAtLTE(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereCreatedAtIn(v []int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereCreatedAtNotIn(v []int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ResourceDefinitionQueryBuilder) WhereUpdatedAtEQ(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ResourceDefinitionQueryBuilder) WhereUpdatedAtNEQ(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ResourceDefinitionQueryBuilder) WhereUpdatedAtGT(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ResourceDefinitionQueryBuilder) WhereUpdatedAtGTE(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ResourceDefinitionQueryBuilder) WhereUpdatedAtLT(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ResourceDefinitionQueryBuilder) WhereUpdatedAtLTE(v int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereUpdatedAtIn(v []int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ResourceDefinitionQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ResourceDefinitionQueryBuilder {
	b.query = ResourceDefinitionQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ResourceDefinitionQueryBuilder) WhereGroup(sep string, fn func(*ResourceDefinitionQueryBuilder) *ResourceDefinitionQueryBuilder) *ResourceDefinitionQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ResourceDefinitionQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ResourceDefinitionQueryBuilder) Where(query string, args ...interface{}) *ResourceDefinitionQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ResourceDefinitionQueryBuilder) OrderBy(column string, desc ...bool) *ResourceDefinitionQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ResourceDefinitionQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ResourceDefinitionQueryBuilder) Limit(n int) *ResourceDefinitionQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ResourceDefinitionQueryBuilder) Offset(n int) *ResourceDefinitionQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ResourceDefinitionQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ResourceDefinitionQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ResourceDefinitionQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ResourceDefinitionQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ResourceDefinitionQueryBuilder) All(ctx context.Context) ([]*ResourceDefinition, error) {
	var entities []*ResourceDefinition
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ResourceDefinitionQueryBuilder) AllWithCount(ctx context.Context) ([]*ResourceDefinition, int, error) {
	var entities []*ResourceDefinition
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ResourceDefinitionQueryBuilder) One(ctx context.Context) (*ResourceDefinition, error) {
	entity := new(ResourceDefinition)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ResourceDefinitionQueryBuilder) First(ctx context.Context) (*ResourceDefinition, error) {
	entity := new(ResourceDefinition)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ResourceDefinitionBuild creates a chainable query builder
func ResourceDefinitionBuild(db bun.IDB) *ResourceDefinitionQueryBuilder {
	return NewResourceDefinitionQuery(db)
}
