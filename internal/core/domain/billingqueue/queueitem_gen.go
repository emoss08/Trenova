// Code generated by gen-trenova. DO NOT EDIT.

package billingqueue

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// queueItemFieldConfig provides field configuration for QueueItem
type queueItemFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// QueueItemQuery provides type-safe query helpers and constants
var QueueItemQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		ShipmentID        string
		Status            string
		BillType          string
		ReviewNotes       string
		ExceptionNotes    string
		CancelReason      string
		ReviewStartedAt   string
		ReviewCompletedAt string
		CanceledAt        string
		AssignedBillerID  string
		CanceledByID      string
		Version           string
		CreatedAt         string
		UpdatedAt         string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                   func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusNEQ                  func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusIn                   func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		StatusNotIn                func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		BillTypeEQ                 func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		BillTypeNEQ                func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		BillTypeIn                 func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		BillTypeNotIn              func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		ReviewNotesEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReviewNotesNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReviewNotesGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExceptionNotesNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExceptionNotesGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewStartedAtEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReviewStartedAtNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReviewStartedAtIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReviewStartedAtNotIn       func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReviewStartedAtIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		ReviewStartedAtIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		ReviewCompletedAtEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReviewCompletedAtNEQ       func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReviewCompletedAtIn        func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReviewCompletedAtNotIn     func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReviewCompletedAtIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ReviewCompletedAtIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		AssignedBillerIDEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		AssignedBillerIDNEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		AssignedBillerIDIn         func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		AssignedBillerIDNotIn      func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		AssignedBillerIDIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		AssignedBillerIDIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDEQ             func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDNEQ            func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDNotIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]queueItemFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit   string
		Organization   string
		Shipment       string
		AssignedBiller string
		CancelledBy    string
	}
}{
	// Table and alias constants
	Table:    "billing_queue_items",
	Alias:    "bqi",
	IDPrefix: "bqi_",

	// Field names
	Field: struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		ShipmentID        string
		Status            string
		BillType          string
		ReviewNotes       string
		ExceptionNotes    string
		CancelReason      string
		ReviewStartedAt   string
		ReviewCompletedAt string
		CanceledAt        string
		AssignedBillerID  string
		CanceledByID      string
		Version           string
		CreatedAt         string
		UpdatedAt         string
	}{
		ID:                "id",
		BusinessUnitID:    "business_unit_id",
		OrganizationID:    "organization_id",
		ShipmentID:        "shipment_id",
		Status:            "status",
		BillType:          "bill_type",
		ReviewNotes:       "review_notes",
		ExceptionNotes:    "exception_notes",
		CancelReason:      "cancel_reason",
		ReviewStartedAt:   "review_started_at",
		ReviewCompletedAt: "review_completed_at",
		CanceledAt:        "canceled_at",
		AssignedBillerID:  "assigned_biller_id",
		CanceledByID:      "canceled_by_id",
		Version:           "version",
		CreatedAt:         "created_at",
		UpdatedAt:         "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "bqi." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "bqi." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                   func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusNEQ                  func(q *bun.SelectQuery, v Status) *bun.SelectQuery
		StatusIn                   func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		StatusNotIn                func(q *bun.SelectQuery, v []Status) *bun.SelectQuery
		BillTypeEQ                 func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		BillTypeNEQ                func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		BillTypeIn                 func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		BillTypeNotIn              func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		ReviewNotesEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReviewNotesNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReviewNotesGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewNotesHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExceptionNotesNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExceptionNotesGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReviewStartedAtEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReviewStartedAtNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReviewStartedAtIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReviewStartedAtNotIn       func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReviewStartedAtIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		ReviewStartedAtIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		ReviewCompletedAtEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReviewCompletedAtNEQ       func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReviewCompletedAtIn        func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReviewCompletedAtNotIn     func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReviewCompletedAtIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ReviewCompletedAtIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		AssignedBillerIDEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		AssignedBillerIDNEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		AssignedBillerIDIn         func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		AssignedBillerIDNotIn      func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		AssignedBillerIDIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		AssignedBillerIDIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDEQ             func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDNEQ            func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDNotIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                     func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.organization_id"), bun.In(v))
		},
		ShipmentIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.shipment_id"), v)
		},
		ShipmentIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.shipment_id"), v)
		},
		ShipmentIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.shipment_id"), bun.In(v))
		},
		ShipmentIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.shipment_id"), bun.In(v))
		},
		StatusEQ: func(q *bun.SelectQuery, v Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.status"), bun.In(v))
		},
		BillTypeEQ: func(q *bun.SelectQuery, v Type) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.bill_type"), v)
		},
		BillTypeNEQ: func(q *bun.SelectQuery, v Type) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.bill_type"), v)
		},
		BillTypeIn: func(q *bun.SelectQuery, v []Type) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.bill_type"), bun.In(v))
		},
		BillTypeNotIn: func(q *bun.SelectQuery, v []Type) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.bill_type"), bun.In(v))
		},
		ReviewNotesEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.review_notes"), v)
		},
		ReviewNotesNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.review_notes"), v)
		},
		ReviewNotesIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.review_notes"), bun.In(v))
		},
		ReviewNotesNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.review_notes"), bun.In(v))
		},
		ReviewNotesGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bqi.review_notes"), v)
		},
		ReviewNotesGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bqi.review_notes"), v)
		},
		ReviewNotesLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bqi.review_notes"), v)
		},
		ReviewNotesLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bqi.review_notes"), v)
		},
		ReviewNotesContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bqi.review_notes"), "%"+v+"%")
		},
		ReviewNotesHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bqi.review_notes"), v+"%")
		},
		ReviewNotesHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bqi.review_notes"), "%"+v)
		},
		ExceptionNotesEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.exception_notes"), v)
		},
		ExceptionNotesNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.exception_notes"), v)
		},
		ExceptionNotesIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.exception_notes"), bun.In(v))
		},
		ExceptionNotesNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.exception_notes"), bun.In(v))
		},
		ExceptionNotesGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bqi.exception_notes"), v)
		},
		ExceptionNotesGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bqi.exception_notes"), v)
		},
		ExceptionNotesLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bqi.exception_notes"), v)
		},
		ExceptionNotesLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bqi.exception_notes"), v)
		},
		ExceptionNotesContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bqi.exception_notes"), "%"+v+"%")
		},
		ExceptionNotesHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bqi.exception_notes"), v+"%")
		},
		ExceptionNotesHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bqi.exception_notes"), "%"+v)
		},
		CancelReasonEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.cancel_reason"), v)
		},
		CancelReasonNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.cancel_reason"), v)
		},
		CancelReasonIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.cancel_reason"), bun.In(v))
		},
		CancelReasonNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.cancel_reason"), bun.In(v))
		},
		CancelReasonGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bqi.cancel_reason"), v)
		},
		CancelReasonGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bqi.cancel_reason"), v)
		},
		CancelReasonLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bqi.cancel_reason"), v)
		},
		CancelReasonLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bqi.cancel_reason"), v)
		},
		CancelReasonContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bqi.cancel_reason"), "%"+v+"%")
		},
		CancelReasonHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bqi.cancel_reason"), v+"%")
		},
		CancelReasonHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bqi.cancel_reason"), "%"+v)
		},
		ReviewStartedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.review_started_at"), v)
		},
		ReviewStartedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.review_started_at"), v)
		},
		ReviewStartedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.review_started_at"), bun.In(v))
		},
		ReviewStartedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.review_started_at"), bun.In(v))
		},
		ReviewStartedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("bqi.review_started_at"))
		},
		ReviewStartedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("bqi.review_started_at"))
		},
		ReviewCompletedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.review_completed_at"), v)
		},
		ReviewCompletedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.review_completed_at"), v)
		},
		ReviewCompletedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.review_completed_at"), bun.In(v))
		},
		ReviewCompletedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.review_completed_at"), bun.In(v))
		},
		ReviewCompletedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("bqi.review_completed_at"))
		},
		ReviewCompletedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("bqi.review_completed_at"))
		},
		CanceledAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.canceled_at"), v)
		},
		CanceledAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.canceled_at"), v)
		},
		CanceledAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.canceled_at"), bun.In(v))
		},
		CanceledAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.canceled_at"), bun.In(v))
		},
		CanceledAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("bqi.canceled_at"))
		},
		CanceledAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("bqi.canceled_at"))
		},
		AssignedBillerIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.assigned_biller_id"), v)
		},
		AssignedBillerIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.assigned_biller_id"), v)
		},
		AssignedBillerIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.assigned_biller_id"), bun.In(v))
		},
		AssignedBillerIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.assigned_biller_id"), bun.In(v))
		},
		AssignedBillerIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("bqi.assigned_biller_id"))
		},
		AssignedBillerIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("bqi.assigned_biller_id"))
		},
		CanceledByIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.canceled_by_id"), v)
		},
		CanceledByIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.canceled_by_id"), v)
		},
		CanceledByIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.canceled_by_id"), bun.In(v))
		},
		CanceledByIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.canceled_by_id"), bun.In(v))
		},
		CanceledByIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("bqi.canceled_by_id"))
		},
		CanceledByIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("bqi.canceled_by_id"))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bqi.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bqi.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bqi.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bqi.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bqi.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bqi.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bqi.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bqi.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bqi.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bqi.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bqi.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bqi.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bqi.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bqi.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bqi.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bqi.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("bqi.organization_id"), orgID).
				Where("? = ?", bun.Ident("bqi.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("bqi.id"), id).
				Where("? = ?", bun.Ident("bqi.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "bqi." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"bqi.status ASC",
				"bqi.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "bqi.status DESC"
			}
			return "bqi.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "bqi.created_at DESC"
			}
			return "bqi.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "bqi.updated_at DESC"
			}
			return "bqi.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]queueItemFieldConfig {
		return map[string]queueItemFieldConfig{
			"id": {
				Name:       "id",
				Column:     "bqi.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "bqi.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "bqi.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "bqi.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "bqi.status",
				Sortable:   false,
				Filterable: true,
			},
			"bill_type": {
				Name:       "bill_type",
				Column:     "bqi.bill_type",
				Sortable:   false,
				Filterable: false,
			},
			"review_notes": {
				Name:       "review_notes",
				Column:     "bqi.review_notes",
				Sortable:   false,
				Filterable: false,
			},
			"exception_notes": {
				Name:       "exception_notes",
				Column:     "bqi.exception_notes",
				Sortable:   false,
				Filterable: false,
			},
			"cancel_reason": {
				Name:       "cancel_reason",
				Column:     "bqi.cancel_reason",
				Sortable:   false,
				Filterable: true,
			},
			"review_started_at": {
				Name:       "review_started_at",
				Column:     "bqi.review_started_at",
				Sortable:   false,
				Filterable: false,
			},
			"review_completed_at": {
				Name:       "review_completed_at",
				Column:     "bqi.review_completed_at",
				Sortable:   false,
				Filterable: false,
			},
			"canceled_at": {
				Name:       "canceled_at",
				Column:     "bqi.canceled_at",
				Sortable:   false,
				Filterable: false,
			},
			"assigned_biller_id": {
				Name:       "assigned_biller_id",
				Column:     "bqi.assigned_biller_id",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_by_id": {
				Name:       "canceled_by_id",
				Column:     "bqi.canceled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "bqi.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "bqi.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "bqi.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]queueItemFieldConfig{
			"id": {
				Name:       "id",
				Column:     "bqi.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "bqi.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "bqi.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "bqi.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "bqi.status",
				Sortable:   false,
				Filterable: true,
			},
			"bill_type": {
				Name:       "bill_type",
				Column:     "bqi.bill_type",
				Sortable:   false,
				Filterable: false,
			},
			"review_notes": {
				Name:       "review_notes",
				Column:     "bqi.review_notes",
				Sortable:   false,
				Filterable: false,
			},
			"exception_notes": {
				Name:       "exception_notes",
				Column:     "bqi.exception_notes",
				Sortable:   false,
				Filterable: false,
			},
			"cancel_reason": {
				Name:       "cancel_reason",
				Column:     "bqi.cancel_reason",
				Sortable:   false,
				Filterable: true,
			},
			"review_started_at": {
				Name:       "review_started_at",
				Column:     "bqi.review_started_at",
				Sortable:   false,
				Filterable: false,
			},
			"review_completed_at": {
				Name:       "review_completed_at",
				Column:     "bqi.review_completed_at",
				Sortable:   false,
				Filterable: false,
			},
			"canceled_at": {
				Name:       "canceled_at",
				Column:     "bqi.canceled_at",
				Sortable:   false,
				Filterable: false,
			},
			"assigned_biller_id": {
				Name:       "assigned_biller_id",
				Column:     "bqi.assigned_biller_id",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_by_id": {
				Name:       "canceled_by_id",
				Column:     "bqi.canceled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "bqi.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "bqi.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "bqi.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]queueItemFieldConfig{
			"id": {
				Name:       "id",
				Column:     "bqi.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "bqi.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "bqi.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "bqi.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "bqi.status",
				Sortable:   false,
				Filterable: true,
			},
			"bill_type": {
				Name:       "bill_type",
				Column:     "bqi.bill_type",
				Sortable:   false,
				Filterable: false,
			},
			"review_notes": {
				Name:       "review_notes",
				Column:     "bqi.review_notes",
				Sortable:   false,
				Filterable: false,
			},
			"exception_notes": {
				Name:       "exception_notes",
				Column:     "bqi.exception_notes",
				Sortable:   false,
				Filterable: false,
			},
			"cancel_reason": {
				Name:       "cancel_reason",
				Column:     "bqi.cancel_reason",
				Sortable:   false,
				Filterable: true,
			},
			"review_started_at": {
				Name:       "review_started_at",
				Column:     "bqi.review_started_at",
				Sortable:   false,
				Filterable: false,
			},
			"review_completed_at": {
				Name:       "review_completed_at",
				Column:     "bqi.review_completed_at",
				Sortable:   false,
				Filterable: false,
			},
			"canceled_at": {
				Name:       "canceled_at",
				Column:     "bqi.canceled_at",
				Sortable:   false,
				Filterable: false,
			},
			"assigned_biller_id": {
				Name:       "assigned_biller_id",
				Column:     "bqi.assigned_biller_id",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_by_id": {
				Name:       "canceled_by_id",
				Column:     "bqi.canceled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "bqi.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "bqi.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "bqi.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit   string
		Organization   string
		Shipment       string
		AssignedBiller string
		CancelledBy    string
	}{
		BusinessUnit:   "BusinessUnit",
		Organization:   "Organization",
		Shipment:       "Shipment",
		AssignedBiller: "AssignedBiller",
		CancelledBy:    "CancelledBy",
	},
}

// QueueItemQueryBuilder provides a fluent interface for building queries
type QueueItemQueryBuilder struct {
	query *bun.SelectQuery
}

// NewQueueItemQuery creates a new query builder
func NewQueueItemQuery(db bun.IDB) *QueueItemQueryBuilder {
	return &QueueItemQueryBuilder{
		query: db.NewSelect().Model((*QueueItem)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func QueueItemFromQuery(q *bun.SelectQuery) *QueueItemQueryBuilder {
	return &QueueItemQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *QueueItemQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *QueueItemQueryBuilder) Model(model interface{}) *QueueItemQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *QueueItemQueryBuilder) WhereIDEQ(v pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *QueueItemQueryBuilder) WhereIDNEQ(v pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *QueueItemQueryBuilder) WhereIDIn(v []pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereIDNotIn(v []pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *QueueItemQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *QueueItemQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *QueueItemQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *QueueItemQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *QueueItemQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *QueueItemQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereShipmentIDEQ adds a WHERE shipment_id = ? condition
func (b *QueueItemQueryBuilder) WhereShipmentIDEQ(v pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ShipmentIDEQ(b.query, v)
	return b
}

// WhereShipmentIDNEQ adds a WHERE shipment_id != ? condition
func (b *QueueItemQueryBuilder) WhereShipmentIDNEQ(v pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ShipmentIDNEQ(b.query, v)
	return b
}

// WhereShipmentIDIn adds a WHERE shipment_id IN (?) condition
func (b *QueueItemQueryBuilder) WhereShipmentIDIn(v []pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ShipmentIDIn(b.query, v)
	return b
}

// WhereShipmentIDNotIn adds a WHERE shipment_id NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereShipmentIDNotIn(v []pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ShipmentIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *QueueItemQueryBuilder) WhereStatusEQ(v Status) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *QueueItemQueryBuilder) WhereStatusNEQ(v Status) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *QueueItemQueryBuilder) WhereStatusIn(v []Status) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereStatusNotIn(v []Status) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereBillTypeEQ adds a WHERE bill_type = ? condition
func (b *QueueItemQueryBuilder) WhereBillTypeEQ(v Type) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.BillTypeEQ(b.query, v)
	return b
}

// WhereBillTypeNEQ adds a WHERE bill_type != ? condition
func (b *QueueItemQueryBuilder) WhereBillTypeNEQ(v Type) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.BillTypeNEQ(b.query, v)
	return b
}

// WhereBillTypeIn adds a WHERE bill_type IN (?) condition
func (b *QueueItemQueryBuilder) WhereBillTypeIn(v []Type) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.BillTypeIn(b.query, v)
	return b
}

// WhereBillTypeNotIn adds a WHERE bill_type NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereBillTypeNotIn(v []Type) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.BillTypeNotIn(b.query, v)
	return b
}

// WhereReviewNotesEQ adds a WHERE review_notes = ? condition
func (b *QueueItemQueryBuilder) WhereReviewNotesEQ(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewNotesEQ(b.query, v)
	return b
}

// WhereReviewNotesNEQ adds a WHERE review_notes != ? condition
func (b *QueueItemQueryBuilder) WhereReviewNotesNEQ(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewNotesNEQ(b.query, v)
	return b
}

// WhereReviewNotesIn adds a WHERE review_notes IN (?) condition
func (b *QueueItemQueryBuilder) WhereReviewNotesIn(v []string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewNotesIn(b.query, v)
	return b
}

// WhereReviewNotesNotIn adds a WHERE review_notes NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereReviewNotesNotIn(v []string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewNotesNotIn(b.query, v)
	return b
}

// WhereReviewNotesContains adds a WHERE review_notes LIKE ? condition
func (b *QueueItemQueryBuilder) WhereReviewNotesContains(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewNotesContains(b.query, v)
	return b
}

// WhereReviewNotesHasPrefix adds a WHERE review_notes LIKE ? condition
func (b *QueueItemQueryBuilder) WhereReviewNotesHasPrefix(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewNotesHasPrefix(b.query, v)
	return b
}

// WhereReviewNotesHasSuffix adds a WHERE review_notes LIKE ? condition
func (b *QueueItemQueryBuilder) WhereReviewNotesHasSuffix(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewNotesHasSuffix(b.query, v)
	return b
}

// WhereExceptionNotesEQ adds a WHERE exception_notes = ? condition
func (b *QueueItemQueryBuilder) WhereExceptionNotesEQ(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ExceptionNotesEQ(b.query, v)
	return b
}

// WhereExceptionNotesNEQ adds a WHERE exception_notes != ? condition
func (b *QueueItemQueryBuilder) WhereExceptionNotesNEQ(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ExceptionNotesNEQ(b.query, v)
	return b
}

// WhereExceptionNotesIn adds a WHERE exception_notes IN (?) condition
func (b *QueueItemQueryBuilder) WhereExceptionNotesIn(v []string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ExceptionNotesIn(b.query, v)
	return b
}

// WhereExceptionNotesNotIn adds a WHERE exception_notes NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereExceptionNotesNotIn(v []string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ExceptionNotesNotIn(b.query, v)
	return b
}

// WhereExceptionNotesContains adds a WHERE exception_notes LIKE ? condition
func (b *QueueItemQueryBuilder) WhereExceptionNotesContains(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ExceptionNotesContains(b.query, v)
	return b
}

// WhereExceptionNotesHasPrefix adds a WHERE exception_notes LIKE ? condition
func (b *QueueItemQueryBuilder) WhereExceptionNotesHasPrefix(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ExceptionNotesHasPrefix(b.query, v)
	return b
}

// WhereExceptionNotesHasSuffix adds a WHERE exception_notes LIKE ? condition
func (b *QueueItemQueryBuilder) WhereExceptionNotesHasSuffix(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ExceptionNotesHasSuffix(b.query, v)
	return b
}

// WhereCancelReasonEQ adds a WHERE cancel_reason = ? condition
func (b *QueueItemQueryBuilder) WhereCancelReasonEQ(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CancelReasonEQ(b.query, v)
	return b
}

// WhereCancelReasonNEQ adds a WHERE cancel_reason != ? condition
func (b *QueueItemQueryBuilder) WhereCancelReasonNEQ(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CancelReasonNEQ(b.query, v)
	return b
}

// WhereCancelReasonIn adds a WHERE cancel_reason IN (?) condition
func (b *QueueItemQueryBuilder) WhereCancelReasonIn(v []string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CancelReasonIn(b.query, v)
	return b
}

// WhereCancelReasonNotIn adds a WHERE cancel_reason NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereCancelReasonNotIn(v []string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CancelReasonNotIn(b.query, v)
	return b
}

// WhereCancelReasonContains adds a WHERE cancel_reason LIKE ? condition
func (b *QueueItemQueryBuilder) WhereCancelReasonContains(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CancelReasonContains(b.query, v)
	return b
}

// WhereCancelReasonHasPrefix adds a WHERE cancel_reason LIKE ? condition
func (b *QueueItemQueryBuilder) WhereCancelReasonHasPrefix(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CancelReasonHasPrefix(b.query, v)
	return b
}

// WhereCancelReasonHasSuffix adds a WHERE cancel_reason LIKE ? condition
func (b *QueueItemQueryBuilder) WhereCancelReasonHasSuffix(v string) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CancelReasonHasSuffix(b.query, v)
	return b
}

// WhereReviewStartedAtEQ adds a WHERE review_started_at = ? condition
func (b *QueueItemQueryBuilder) WhereReviewStartedAtEQ(v *int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewStartedAtEQ(b.query, v)
	return b
}

// WhereReviewStartedAtNEQ adds a WHERE review_started_at != ? condition
func (b *QueueItemQueryBuilder) WhereReviewStartedAtNEQ(v *int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewStartedAtNEQ(b.query, v)
	return b
}

// WhereReviewStartedAtIn adds a WHERE review_started_at IN (?) condition
func (b *QueueItemQueryBuilder) WhereReviewStartedAtIn(v []*int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewStartedAtIn(b.query, v)
	return b
}

// WhereReviewStartedAtNotIn adds a WHERE review_started_at NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereReviewStartedAtNotIn(v []*int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewStartedAtNotIn(b.query, v)
	return b
}

// WhereReviewCompletedAtEQ adds a WHERE review_completed_at = ? condition
func (b *QueueItemQueryBuilder) WhereReviewCompletedAtEQ(v *int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewCompletedAtEQ(b.query, v)
	return b
}

// WhereReviewCompletedAtNEQ adds a WHERE review_completed_at != ? condition
func (b *QueueItemQueryBuilder) WhereReviewCompletedAtNEQ(v *int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewCompletedAtNEQ(b.query, v)
	return b
}

// WhereReviewCompletedAtIn adds a WHERE review_completed_at IN (?) condition
func (b *QueueItemQueryBuilder) WhereReviewCompletedAtIn(v []*int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewCompletedAtIn(b.query, v)
	return b
}

// WhereReviewCompletedAtNotIn adds a WHERE review_completed_at NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereReviewCompletedAtNotIn(v []*int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.ReviewCompletedAtNotIn(b.query, v)
	return b
}

// WhereCanceledAtEQ adds a WHERE canceled_at = ? condition
func (b *QueueItemQueryBuilder) WhereCanceledAtEQ(v *int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CanceledAtEQ(b.query, v)
	return b
}

// WhereCanceledAtNEQ adds a WHERE canceled_at != ? condition
func (b *QueueItemQueryBuilder) WhereCanceledAtNEQ(v *int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CanceledAtNEQ(b.query, v)
	return b
}

// WhereCanceledAtIn adds a WHERE canceled_at IN (?) condition
func (b *QueueItemQueryBuilder) WhereCanceledAtIn(v []*int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CanceledAtIn(b.query, v)
	return b
}

// WhereCanceledAtNotIn adds a WHERE canceled_at NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereCanceledAtNotIn(v []*int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CanceledAtNotIn(b.query, v)
	return b
}

// WhereAssignedBillerIDEQ adds a WHERE assigned_biller_id = ? condition
func (b *QueueItemQueryBuilder) WhereAssignedBillerIDEQ(v *pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.AssignedBillerIDEQ(b.query, v)
	return b
}

// WhereAssignedBillerIDNEQ adds a WHERE assigned_biller_id != ? condition
func (b *QueueItemQueryBuilder) WhereAssignedBillerIDNEQ(v *pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.AssignedBillerIDNEQ(b.query, v)
	return b
}

// WhereAssignedBillerIDIn adds a WHERE assigned_biller_id IN (?) condition
func (b *QueueItemQueryBuilder) WhereAssignedBillerIDIn(v []*pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.AssignedBillerIDIn(b.query, v)
	return b
}

// WhereAssignedBillerIDNotIn adds a WHERE assigned_biller_id NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereAssignedBillerIDNotIn(v []*pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.AssignedBillerIDNotIn(b.query, v)
	return b
}

// WhereCanceledByIDEQ adds a WHERE canceled_by_id = ? condition
func (b *QueueItemQueryBuilder) WhereCanceledByIDEQ(v *pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CanceledByIDEQ(b.query, v)
	return b
}

// WhereCanceledByIDNEQ adds a WHERE canceled_by_id != ? condition
func (b *QueueItemQueryBuilder) WhereCanceledByIDNEQ(v *pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CanceledByIDNEQ(b.query, v)
	return b
}

// WhereCanceledByIDIn adds a WHERE canceled_by_id IN (?) condition
func (b *QueueItemQueryBuilder) WhereCanceledByIDIn(v []*pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CanceledByIDIn(b.query, v)
	return b
}

// WhereCanceledByIDNotIn adds a WHERE canceled_by_id NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereCanceledByIDNotIn(v []*pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CanceledByIDNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *QueueItemQueryBuilder) WhereVersionEQ(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *QueueItemQueryBuilder) WhereVersionNEQ(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *QueueItemQueryBuilder) WhereVersionGT(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *QueueItemQueryBuilder) WhereVersionGTE(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *QueueItemQueryBuilder) WhereVersionLT(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *QueueItemQueryBuilder) WhereVersionLTE(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *QueueItemQueryBuilder) WhereVersionIn(v []int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereVersionNotIn(v []int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *QueueItemQueryBuilder) WhereCreatedAtEQ(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *QueueItemQueryBuilder) WhereCreatedAtNEQ(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *QueueItemQueryBuilder) WhereCreatedAtGT(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *QueueItemQueryBuilder) WhereCreatedAtGTE(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *QueueItemQueryBuilder) WhereCreatedAtLT(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *QueueItemQueryBuilder) WhereCreatedAtLTE(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *QueueItemQueryBuilder) WhereCreatedAtIn(v []int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereCreatedAtNotIn(v []int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *QueueItemQueryBuilder) WhereUpdatedAtEQ(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *QueueItemQueryBuilder) WhereUpdatedAtNEQ(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *QueueItemQueryBuilder) WhereUpdatedAtGT(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *QueueItemQueryBuilder) WhereUpdatedAtGTE(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *QueueItemQueryBuilder) WhereUpdatedAtLT(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *QueueItemQueryBuilder) WhereUpdatedAtLTE(v int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *QueueItemQueryBuilder) WhereUpdatedAtIn(v []int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *QueueItemQueryBuilder) WhereUpdatedAtNotIn(v []int64) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *QueueItemQueryBuilder) WhereTenant(orgID, buID pulid.ID) *QueueItemQueryBuilder {
	b.query = QueueItemQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *QueueItemQueryBuilder) WhereGroup(sep string, fn func(*QueueItemQueryBuilder) *QueueItemQueryBuilder) *QueueItemQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &QueueItemQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *QueueItemQueryBuilder) Where(query string, args ...interface{}) *QueueItemQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *QueueItemQueryBuilder) OrderBy(column string, desc ...bool) *QueueItemQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(QueueItemQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *QueueItemQueryBuilder) Limit(n int) *QueueItemQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *QueueItemQueryBuilder) Offset(n int) *QueueItemQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *QueueItemQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *QueueItemQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *QueueItemQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *QueueItemQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *QueueItemQueryBuilder) All(ctx context.Context) ([]*QueueItem, error) {
	var entities []*QueueItem
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *QueueItemQueryBuilder) AllWithCount(ctx context.Context) ([]*QueueItem, int, error) {
	var entities []*QueueItem
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *QueueItemQueryBuilder) One(ctx context.Context) (*QueueItem, error) {
	entity := new(QueueItem)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *QueueItemQueryBuilder) First(ctx context.Context) (*QueueItem, error) {
	entity := new(QueueItem)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// QueueItemBuild creates a chainable query builder
func QueueItemBuild(db bun.IDB) *QueueItemQueryBuilder {
	return NewQueueItemQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *QueueItemQueryBuilder) LoadBusinessUnit() *QueueItemQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *QueueItemQueryBuilder) LoadOrganization() *QueueItemQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadShipment loads the Shipment relationship
func (b *QueueItemQueryBuilder) LoadShipment() *QueueItemQueryBuilder {
	b.query = b.query.Relation("Shipment")
	return b
}

// LoadAssignedBiller loads the AssignedBiller relationship
func (b *QueueItemQueryBuilder) LoadAssignedBiller() *QueueItemQueryBuilder {
	b.query = b.query.Relation("AssignedBiller")
	return b
}

// LoadCancelledBy loads the CancelledBy relationship
func (b *QueueItemQueryBuilder) LoadCancelledBy() *QueueItemQueryBuilder {
	b.query = b.query.Relation("CancelledBy")
	return b
}

// LoadAllRelations loads all relationships for QueueItem
func (b *QueueItemQueryBuilder) LoadAllRelations() *QueueItemQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadShipment()
	b.LoadAssignedBiller()
	b.LoadCancelledBy()
	return b
}

// QueueItemRelationChain provides a fluent API for building nested relationship chains
type QueueItemRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewQueueItemRelationChain creates a new relation chain builder
func NewQueueItemRelationChain() *QueueItemRelationChain {
	return &QueueItemRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *QueueItemRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *QueueItemRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *QueueItemRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *QueueItemRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *QueueItemQueryBuilder) WithBusinessUnit() *QueueItemRelationChainBuilder {
	chain := &QueueItemRelationChainBuilder{
		parent: b,
		chain:  NewQueueItemRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *QueueItemQueryBuilder) WithOrganization() *QueueItemRelationChainBuilder {
	chain := &QueueItemRelationChainBuilder{
		parent: b,
		chain:  NewQueueItemRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithShipment creates a relation chain starting with Shipment
func (b *QueueItemQueryBuilder) WithShipment() *QueueItemRelationChainBuilder {
	chain := &QueueItemRelationChainBuilder{
		parent: b,
		chain:  NewQueueItemRelationChain(),
	}
	chain.chain.Add("Shipment")
	return chain
}

// WithAssignedBiller creates a relation chain starting with AssignedBiller
func (b *QueueItemQueryBuilder) WithAssignedBiller() *QueueItemRelationChainBuilder {
	chain := &QueueItemRelationChainBuilder{
		parent: b,
		chain:  NewQueueItemRelationChain(),
	}
	chain.chain.Add("AssignedBiller")
	return chain
}

// WithCancelledBy creates a relation chain starting with CancelledBy
func (b *QueueItemQueryBuilder) WithCancelledBy() *QueueItemRelationChainBuilder {
	chain := &QueueItemRelationChainBuilder{
		parent: b,
		chain:  NewQueueItemRelationChain(),
	}
	chain.chain.Add("CancelledBy")
	return chain
}

// QueueItemRelationChainBuilder provides fluent API for building nested relations
type QueueItemRelationChainBuilder struct {
	parent *QueueItemQueryBuilder
	chain  *QueueItemRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *QueueItemRelationChainBuilder) Load() *QueueItemQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *QueueItemRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *QueueItemRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *QueueItemRelationChainBuilder) OrderBy(order string) *QueueItemRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *QueueItemRelationChainBuilder) Where(condition string, args ...interface{}) *QueueItemRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
