// Code generated by gen-trenova. DO NOT EDIT.

package usstate

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// usStateFieldConfig provides field configuration for UsState
type usStateFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// UsStateQuery provides type-safe query helpers and constants
var UsStateQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID           string
		Name         string
		Abbreviation string
		CountryName  string
		CountryIso3  string
		CreatedAt    string
		UpdatedAt    string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AbbreviationNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AbbreviationGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CountryNameNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CountryNameGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3EQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3NEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3In         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CountryIso3NotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CountryIso3GT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3GTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3LT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3LTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3Contains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3HasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3HasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]usStateFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "us_states",
	Alias:    "ust",
	IDPrefix: "ust_",

	// Field names
	Field: struct {
		ID           string
		Name         string
		Abbreviation string
		CountryName  string
		CountryIso3  string
		CreatedAt    string
		UpdatedAt    string
	}{
		ID:           "id",
		Name:         "name",
		Abbreviation: "abbreviation",
		CountryName:  "country_name",
		CountryIso3:  "country_iso3",
		CreatedAt:    "created_at",
		UpdatedAt:    "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "ust." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "ust." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AbbreviationNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AbbreviationGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AbbreviationHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CountryNameNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CountryNameGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryNameHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3EQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3NEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3In         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CountryIso3NotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CountryIso3GT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3GTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3LT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3LTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3Contains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3HasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CountryIso3HasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ust.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ust.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ust.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ust.id"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ust.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ust.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ust.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ust.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ust.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ust.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ust.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ust.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.name"), "%"+v)
		},
		AbbreviationEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ust.abbreviation"), v)
		},
		AbbreviationNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ust.abbreviation"), v)
		},
		AbbreviationIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ust.abbreviation"), bun.In(v))
		},
		AbbreviationNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ust.abbreviation"), bun.In(v))
		},
		AbbreviationGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ust.abbreviation"), v)
		},
		AbbreviationGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ust.abbreviation"), v)
		},
		AbbreviationLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ust.abbreviation"), v)
		},
		AbbreviationLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ust.abbreviation"), v)
		},
		AbbreviationContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.abbreviation"), "%"+v+"%")
		},
		AbbreviationHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.abbreviation"), v+"%")
		},
		AbbreviationHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.abbreviation"), "%"+v)
		},
		CountryNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ust.country_name"), v)
		},
		CountryNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ust.country_name"), v)
		},
		CountryNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ust.country_name"), bun.In(v))
		},
		CountryNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ust.country_name"), bun.In(v))
		},
		CountryNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ust.country_name"), v)
		},
		CountryNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ust.country_name"), v)
		},
		CountryNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ust.country_name"), v)
		},
		CountryNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ust.country_name"), v)
		},
		CountryNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.country_name"), "%"+v+"%")
		},
		CountryNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.country_name"), v+"%")
		},
		CountryNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.country_name"), "%"+v)
		},
		CountryIso3EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ust.country_iso3"), v)
		},
		CountryIso3NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ust.country_iso3"), v)
		},
		CountryIso3In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ust.country_iso3"), bun.In(v))
		},
		CountryIso3NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ust.country_iso3"), bun.In(v))
		},
		CountryIso3GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ust.country_iso3"), v)
		},
		CountryIso3GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ust.country_iso3"), v)
		},
		CountryIso3LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ust.country_iso3"), v)
		},
		CountryIso3LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ust.country_iso3"), v)
		},
		CountryIso3Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.country_iso3"), "%"+v+"%")
		},
		CountryIso3HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.country_iso3"), v+"%")
		},
		CountryIso3HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ust.country_iso3"), "%"+v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ust.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ust.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ust.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ust.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ust.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ust.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ust.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ust.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ust.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ust.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ust.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ust.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ust.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ust.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ust.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ust.updated_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "ust." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"ust.name ASC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "ust.created_at DESC"
			}
			return "ust.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "ust.updated_at DESC"
			}
			return "ust.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]usStateFieldConfig {
		return map[string]usStateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ust.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "ust.name",
				Sortable:   true,
				Filterable: false,
			},
			"abbreviation": {
				Name:       "abbreviation",
				Column:     "ust.abbreviation",
				Sortable:   false,
				Filterable: false,
			},
			"country_name": {
				Name:       "country_name",
				Column:     "ust.country_name",
				Sortable:   false,
				Filterable: false,
			},
			"country_iso3": {
				Name:       "country_iso3",
				Column:     "ust.country_iso3",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ust.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ust.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]usStateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ust.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "ust.name",
				Sortable:   true,
				Filterable: false,
			},
			"abbreviation": {
				Name:       "abbreviation",
				Column:     "ust.abbreviation",
				Sortable:   false,
				Filterable: false,
			},
			"country_name": {
				Name:       "country_name",
				Column:     "ust.country_name",
				Sortable:   false,
				Filterable: false,
			},
			"country_iso3": {
				Name:       "country_iso3",
				Column:     "ust.country_iso3",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ust.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ust.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]usStateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ust.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "ust.name",
				Sortable:   true,
				Filterable: false,
			},
			"abbreviation": {
				Name:       "abbreviation",
				Column:     "ust.abbreviation",
				Sortable:   false,
				Filterable: false,
			},
			"country_name": {
				Name:       "country_name",
				Column:     "ust.country_name",
				Sortable:   false,
				Filterable: false,
			},
			"country_iso3": {
				Name:       "country_iso3",
				Column:     "ust.country_iso3",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ust.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ust.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// UsStateQueryBuilder provides a fluent interface for building queries
type UsStateQueryBuilder struct {
	query *bun.SelectQuery
}

// NewUsStateQuery creates a new query builder
func NewUsStateQuery(db bun.IDB) *UsStateQueryBuilder {
	return &UsStateQueryBuilder{
		query: db.NewSelect().Model((*UsState)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func UsStateFromQuery(q *bun.SelectQuery) *UsStateQueryBuilder {
	return &UsStateQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *UsStateQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *UsStateQueryBuilder) Model(model interface{}) *UsStateQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *UsStateQueryBuilder) WhereIDEQ(v pulid.ID) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *UsStateQueryBuilder) WhereIDNEQ(v pulid.ID) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *UsStateQueryBuilder) WhereIDIn(v []pulid.ID) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *UsStateQueryBuilder) WhereIDNotIn(v []pulid.ID) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *UsStateQueryBuilder) WhereNameEQ(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *UsStateQueryBuilder) WhereNameNEQ(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *UsStateQueryBuilder) WhereNameIn(v []string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *UsStateQueryBuilder) WhereNameNotIn(v []string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *UsStateQueryBuilder) WhereNameContains(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *UsStateQueryBuilder) WhereNameHasPrefix(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *UsStateQueryBuilder) WhereNameHasSuffix(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereAbbreviationEQ adds a WHERE abbreviation = ? condition
func (b *UsStateQueryBuilder) WhereAbbreviationEQ(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.AbbreviationEQ(b.query, v)
	return b
}

// WhereAbbreviationNEQ adds a WHERE abbreviation != ? condition
func (b *UsStateQueryBuilder) WhereAbbreviationNEQ(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.AbbreviationNEQ(b.query, v)
	return b
}

// WhereAbbreviationIn adds a WHERE abbreviation IN (?) condition
func (b *UsStateQueryBuilder) WhereAbbreviationIn(v []string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.AbbreviationIn(b.query, v)
	return b
}

// WhereAbbreviationNotIn adds a WHERE abbreviation NOT IN (?) condition
func (b *UsStateQueryBuilder) WhereAbbreviationNotIn(v []string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.AbbreviationNotIn(b.query, v)
	return b
}

// WhereAbbreviationContains adds a WHERE abbreviation LIKE ? condition
func (b *UsStateQueryBuilder) WhereAbbreviationContains(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.AbbreviationContains(b.query, v)
	return b
}

// WhereAbbreviationHasPrefix adds a WHERE abbreviation LIKE ? condition
func (b *UsStateQueryBuilder) WhereAbbreviationHasPrefix(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.AbbreviationHasPrefix(b.query, v)
	return b
}

// WhereAbbreviationHasSuffix adds a WHERE abbreviation LIKE ? condition
func (b *UsStateQueryBuilder) WhereAbbreviationHasSuffix(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.AbbreviationHasSuffix(b.query, v)
	return b
}

// WhereCountryNameEQ adds a WHERE country_name = ? condition
func (b *UsStateQueryBuilder) WhereCountryNameEQ(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryNameEQ(b.query, v)
	return b
}

// WhereCountryNameNEQ adds a WHERE country_name != ? condition
func (b *UsStateQueryBuilder) WhereCountryNameNEQ(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryNameNEQ(b.query, v)
	return b
}

// WhereCountryNameIn adds a WHERE country_name IN (?) condition
func (b *UsStateQueryBuilder) WhereCountryNameIn(v []string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryNameIn(b.query, v)
	return b
}

// WhereCountryNameNotIn adds a WHERE country_name NOT IN (?) condition
func (b *UsStateQueryBuilder) WhereCountryNameNotIn(v []string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryNameNotIn(b.query, v)
	return b
}

// WhereCountryNameContains adds a WHERE country_name LIKE ? condition
func (b *UsStateQueryBuilder) WhereCountryNameContains(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryNameContains(b.query, v)
	return b
}

// WhereCountryNameHasPrefix adds a WHERE country_name LIKE ? condition
func (b *UsStateQueryBuilder) WhereCountryNameHasPrefix(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryNameHasPrefix(b.query, v)
	return b
}

// WhereCountryNameHasSuffix adds a WHERE country_name LIKE ? condition
func (b *UsStateQueryBuilder) WhereCountryNameHasSuffix(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryNameHasSuffix(b.query, v)
	return b
}

// WhereCountryIso3EQ adds a WHERE country_iso3 = ? condition
func (b *UsStateQueryBuilder) WhereCountryIso3EQ(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryIso3EQ(b.query, v)
	return b
}

// WhereCountryIso3NEQ adds a WHERE country_iso3 != ? condition
func (b *UsStateQueryBuilder) WhereCountryIso3NEQ(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryIso3NEQ(b.query, v)
	return b
}

// WhereCountryIso3In adds a WHERE country_iso3 IN (?) condition
func (b *UsStateQueryBuilder) WhereCountryIso3In(v []string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryIso3In(b.query, v)
	return b
}

// WhereCountryIso3NotIn adds a WHERE country_iso3 NOT IN (?) condition
func (b *UsStateQueryBuilder) WhereCountryIso3NotIn(v []string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryIso3NotIn(b.query, v)
	return b
}

// WhereCountryIso3Contains adds a WHERE country_iso3 LIKE ? condition
func (b *UsStateQueryBuilder) WhereCountryIso3Contains(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryIso3Contains(b.query, v)
	return b
}

// WhereCountryIso3HasPrefix adds a WHERE country_iso3 LIKE ? condition
func (b *UsStateQueryBuilder) WhereCountryIso3HasPrefix(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryIso3HasPrefix(b.query, v)
	return b
}

// WhereCountryIso3HasSuffix adds a WHERE country_iso3 LIKE ? condition
func (b *UsStateQueryBuilder) WhereCountryIso3HasSuffix(v string) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CountryIso3HasSuffix(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *UsStateQueryBuilder) WhereCreatedAtEQ(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *UsStateQueryBuilder) WhereCreatedAtNEQ(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *UsStateQueryBuilder) WhereCreatedAtGT(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *UsStateQueryBuilder) WhereCreatedAtGTE(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *UsStateQueryBuilder) WhereCreatedAtLT(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *UsStateQueryBuilder) WhereCreatedAtLTE(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *UsStateQueryBuilder) WhereCreatedAtIn(v []int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *UsStateQueryBuilder) WhereCreatedAtNotIn(v []int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *UsStateQueryBuilder) WhereUpdatedAtEQ(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *UsStateQueryBuilder) WhereUpdatedAtNEQ(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *UsStateQueryBuilder) WhereUpdatedAtGT(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *UsStateQueryBuilder) WhereUpdatedAtGTE(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *UsStateQueryBuilder) WhereUpdatedAtLT(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *UsStateQueryBuilder) WhereUpdatedAtLTE(v int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *UsStateQueryBuilder) WhereUpdatedAtIn(v []int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *UsStateQueryBuilder) WhereUpdatedAtNotIn(v []int64) *UsStateQueryBuilder {
	b.query = UsStateQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *UsStateQueryBuilder) WhereGroup(sep string, fn func(*UsStateQueryBuilder) *UsStateQueryBuilder) *UsStateQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &UsStateQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *UsStateQueryBuilder) Where(query string, args ...interface{}) *UsStateQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *UsStateQueryBuilder) OrderBy(column string, desc ...bool) *UsStateQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(UsStateQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *UsStateQueryBuilder) Limit(n int) *UsStateQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *UsStateQueryBuilder) Offset(n int) *UsStateQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *UsStateQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *UsStateQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *UsStateQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *UsStateQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *UsStateQueryBuilder) All(ctx context.Context) ([]*UsState, error) {
	var entities []*UsState
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *UsStateQueryBuilder) AllWithCount(ctx context.Context) ([]*UsState, int, error) {
	var entities []*UsState
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *UsStateQueryBuilder) One(ctx context.Context) (*UsState, error) {
	entity := new(UsState)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *UsStateQueryBuilder) First(ctx context.Context) (*UsState, error) {
	entity := new(UsState)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// UsStateBuild creates a chainable query builder
func UsStateBuild(db bun.IDB) *UsStateQueryBuilder {
	return NewUsStateQuery(db)
}

// Relationship loading methods
