/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package location

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// locationCategoryFieldConfig provides field configuration for LocationCategory
type locationCategoryFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// LocationCategoryQuery provides type-safe query helpers and constants
var LocationCategoryQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                  string
		BusinessUnitID      string
		OrganizationID      string
		Name                string
		Description         string
		Type                string
		FacilityType        string
		Color               string
		HasSecureParking    string
		RequiresAppointment string
		AllowsOvernight     string
		HasRestroom         string
		Version             string
		CreatedAt           string
		UpdatedAt           string
		SearchVector        string
		Rank                string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TypeEQ                   func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		TypeNEQ                  func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		TypeIn                   func(q *bun.SelectQuery, v []Category) *bun.SelectQuery
		TypeNotIn                func(q *bun.SelectQuery, v []Category) *bun.SelectQuery
		FacilityTypeEQ           func(q *bun.SelectQuery, v FacilityType) *bun.SelectQuery
		FacilityTypeNEQ          func(q *bun.SelectQuery, v FacilityType) *bun.SelectQuery
		FacilityTypeIn           func(q *bun.SelectQuery, v []FacilityType) *bun.SelectQuery
		FacilityTypeNotIn        func(q *bun.SelectQuery, v []FacilityType) *bun.SelectQuery
		ColorEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HasSecureParkingEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasSecureParkingNEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasSecureParkingIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasSecureParkingNotIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RequiresAppointmentEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RequiresAppointmentNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RequiresAppointmentIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RequiresAppointmentNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowsOvernightEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowsOvernightNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowsOvernightIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowsOvernightNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasRestroomEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasRestroomNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasRestroomIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasRestroomNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]locationCategoryFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
	}
}{
	// Table and alias constants
	Table:    "location_categories",
	Alias:    "lc",
	IDPrefix: "lc_",

	// Field names
	Field: struct {
		ID                  string
		BusinessUnitID      string
		OrganizationID      string
		Name                string
		Description         string
		Type                string
		FacilityType        string
		Color               string
		HasSecureParking    string
		RequiresAppointment string
		AllowsOvernight     string
		HasRestroom         string
		Version             string
		CreatedAt           string
		UpdatedAt           string
		SearchVector        string
		Rank                string
	}{
		ID:                  "id",
		BusinessUnitID:      "business_unit_id",
		OrganizationID:      "organization_id",
		Name:                "name",
		Description:         "description",
		Type:                "type",
		FacilityType:        "facility_type",
		Color:               "color",
		HasSecureParking:    "has_secure_parking",
		RequiresAppointment: "requires_appointment",
		AllowsOvernight:     "allows_overnight",
		HasRestroom:         "has_restroom",
		Version:             "version",
		CreatedAt:           "created_at",
		UpdatedAt:           "updated_at",
		SearchVector:        "search_vector",
		Rank:                "rank",
	},

	// Column helpers
	Column: func(field string) string {
		return "lc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "lc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TypeEQ                   func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		TypeNEQ                  func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		TypeIn                   func(q *bun.SelectQuery, v []Category) *bun.SelectQuery
		TypeNotIn                func(q *bun.SelectQuery, v []Category) *bun.SelectQuery
		FacilityTypeEQ           func(q *bun.SelectQuery, v FacilityType) *bun.SelectQuery
		FacilityTypeNEQ          func(q *bun.SelectQuery, v FacilityType) *bun.SelectQuery
		FacilityTypeIn           func(q *bun.SelectQuery, v []FacilityType) *bun.SelectQuery
		FacilityTypeNotIn        func(q *bun.SelectQuery, v []FacilityType) *bun.SelectQuery
		ColorEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ColorGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ColorHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HasSecureParkingEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasSecureParkingNEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasSecureParkingIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasSecureParkingNotIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RequiresAppointmentEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RequiresAppointmentNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RequiresAppointmentIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RequiresAppointmentNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowsOvernightEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowsOvernightNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowsOvernightIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowsOvernightNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasRestroomEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasRestroomNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasRestroomIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasRestroomNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		Tenant                   func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.organization_id"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("lc.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("lc.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("lc.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("lc.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("lc.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("lc.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("lc.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("lc.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.description"), "%"+v)
		},
		TypeEQ: func(q *bun.SelectQuery, v Category) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.type"), v)
		},
		TypeNEQ: func(q *bun.SelectQuery, v Category) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.type"), v)
		},
		TypeIn: func(q *bun.SelectQuery, v []Category) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.type"), bun.In(v))
		},
		TypeNotIn: func(q *bun.SelectQuery, v []Category) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.type"), bun.In(v))
		},
		FacilityTypeEQ: func(q *bun.SelectQuery, v FacilityType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.facility_type"), v)
		},
		FacilityTypeNEQ: func(q *bun.SelectQuery, v FacilityType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.facility_type"), v)
		},
		FacilityTypeIn: func(q *bun.SelectQuery, v []FacilityType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.facility_type"), bun.In(v))
		},
		FacilityTypeNotIn: func(q *bun.SelectQuery, v []FacilityType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.facility_type"), bun.In(v))
		},
		ColorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.color"), v)
		},
		ColorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.color"), v)
		},
		ColorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.color"), bun.In(v))
		},
		ColorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.color"), bun.In(v))
		},
		ColorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("lc.color"), v)
		},
		ColorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("lc.color"), v)
		},
		ColorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("lc.color"), v)
		},
		ColorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("lc.color"), v)
		},
		ColorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.color"), "%"+v+"%")
		},
		ColorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.color"), v+"%")
		},
		ColorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.color"), "%"+v)
		},
		HasSecureParkingEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.has_secure_parking"), v)
		},
		HasSecureParkingNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.has_secure_parking"), v)
		},
		HasSecureParkingIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.has_secure_parking"), bun.In(v))
		},
		HasSecureParkingNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.has_secure_parking"), bun.In(v))
		},
		RequiresAppointmentEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.requires_appointment"), v)
		},
		RequiresAppointmentNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.requires_appointment"), v)
		},
		RequiresAppointmentIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.requires_appointment"), bun.In(v))
		},
		RequiresAppointmentNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.requires_appointment"), bun.In(v))
		},
		AllowsOvernightEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.allows_overnight"), v)
		},
		AllowsOvernightNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.allows_overnight"), v)
		},
		AllowsOvernightIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.allows_overnight"), bun.In(v))
		},
		AllowsOvernightNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.allows_overnight"), bun.In(v))
		},
		HasRestroomEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.has_restroom"), v)
		},
		HasRestroomNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.has_restroom"), v)
		},
		HasRestroomIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.has_restroom"), bun.In(v))
		},
		HasRestroomNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.has_restroom"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("lc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("lc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("lc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("lc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("lc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("lc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("lc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("lc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("lc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("lc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("lc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("lc.updated_at"), v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("lc.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("lc.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("lc.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("lc.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("lc.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("lc.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("lc.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("lc.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("lc.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("lc.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("lc.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("lc.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("lc.rank"), "%"+v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("lc.organization_id"), orgID).
				Where("? = ?", bun.Ident("lc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("lc.id"), id).
				Where("? = ?", bun.Ident("lc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "lc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"lc.name ASC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "lc.created_at DESC"
			}
			return "lc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "lc.updated_at DESC"
			}
			return "lc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]locationCategoryFieldConfig {
		return map[string]locationCategoryFieldConfig{
			"id": {
				Name:       "id",
				Column:     "lc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "lc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "lc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "lc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "lc.description",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "lc.type",
				Sortable:   false,
				Filterable: false,
			},
			"facility_type": {
				Name:       "facility_type",
				Column:     "lc.facility_type",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "lc.color",
				Sortable:   false,
				Filterable: true,
			},
			"has_secure_parking": {
				Name:       "has_secure_parking",
				Column:     "lc.has_secure_parking",
				Sortable:   false,
				Filterable: false,
			},
			"requires_appointment": {
				Name:       "requires_appointment",
				Column:     "lc.requires_appointment",
				Sortable:   false,
				Filterable: false,
			},
			"allows_overnight": {
				Name:       "allows_overnight",
				Column:     "lc.allows_overnight",
				Sortable:   false,
				Filterable: false,
			},
			"has_restroom": {
				Name:       "has_restroom",
				Column:     "lc.has_restroom",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "lc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "lc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "lc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "lc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "lc.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]locationCategoryFieldConfig{
			"id": {
				Name:       "id",
				Column:     "lc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "lc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "lc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "lc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "lc.description",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "lc.type",
				Sortable:   false,
				Filterable: false,
			},
			"facility_type": {
				Name:       "facility_type",
				Column:     "lc.facility_type",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "lc.color",
				Sortable:   false,
				Filterable: true,
			},
			"has_secure_parking": {
				Name:       "has_secure_parking",
				Column:     "lc.has_secure_parking",
				Sortable:   false,
				Filterable: false,
			},
			"requires_appointment": {
				Name:       "requires_appointment",
				Column:     "lc.requires_appointment",
				Sortable:   false,
				Filterable: false,
			},
			"allows_overnight": {
				Name:       "allows_overnight",
				Column:     "lc.allows_overnight",
				Sortable:   false,
				Filterable: false,
			},
			"has_restroom": {
				Name:       "has_restroom",
				Column:     "lc.has_restroom",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "lc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "lc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "lc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "lc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "lc.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]locationCategoryFieldConfig{
			"id": {
				Name:       "id",
				Column:     "lc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "lc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "lc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "lc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "lc.description",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "lc.type",
				Sortable:   false,
				Filterable: false,
			},
			"facility_type": {
				Name:       "facility_type",
				Column:     "lc.facility_type",
				Sortable:   false,
				Filterable: false,
			},
			"color": {
				Name:       "color",
				Column:     "lc.color",
				Sortable:   false,
				Filterable: true,
			},
			"has_secure_parking": {
				Name:       "has_secure_parking",
				Column:     "lc.has_secure_parking",
				Sortable:   false,
				Filterable: false,
			},
			"requires_appointment": {
				Name:       "requires_appointment",
				Column:     "lc.requires_appointment",
				Sortable:   false,
				Filterable: false,
			},
			"allows_overnight": {
				Name:       "allows_overnight",
				Column:     "lc.allows_overnight",
				Sortable:   false,
				Filterable: false,
			},
			"has_restroom": {
				Name:       "has_restroom",
				Column:     "lc.has_restroom",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "lc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "lc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "lc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "lc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "lc.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
	},
}

// LocationCategoryQueryBuilder provides a fluent interface for building queries
type LocationCategoryQueryBuilder struct {
	query *bun.SelectQuery
}

// NewLocationCategoryQuery creates a new query builder
func NewLocationCategoryQuery(db bun.IDB) *LocationCategoryQueryBuilder {
	return &LocationCategoryQueryBuilder{
		query: db.NewSelect().Model((*LocationCategory)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func LocationCategoryFromQuery(q *bun.SelectQuery) *LocationCategoryQueryBuilder {
	return &LocationCategoryQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *LocationCategoryQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *LocationCategoryQueryBuilder) Model(model interface{}) *LocationCategoryQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *LocationCategoryQueryBuilder) WhereIDEQ(v pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *LocationCategoryQueryBuilder) WhereIDNEQ(v pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereIDIn(v []pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereIDNotIn(v []pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *LocationCategoryQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *LocationCategoryQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *LocationCategoryQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *LocationCategoryQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *LocationCategoryQueryBuilder) WhereNameEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *LocationCategoryQueryBuilder) WhereNameNEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereNameIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereNameNotIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereNameContains(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereNameHasPrefix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereNameHasSuffix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *LocationCategoryQueryBuilder) WhereDescriptionEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *LocationCategoryQueryBuilder) WhereDescriptionNEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereDescriptionIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereDescriptionNotIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereDescriptionContains(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereDescriptionHasPrefix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereDescriptionHasSuffix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereTypeEQ adds a WHERE type = ? condition
func (b *LocationCategoryQueryBuilder) WhereTypeEQ(v Category) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.TypeEQ(b.query, v)
	return b
}

// WhereTypeNEQ adds a WHERE type != ? condition
func (b *LocationCategoryQueryBuilder) WhereTypeNEQ(v Category) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.TypeNEQ(b.query, v)
	return b
}

// WhereTypeIn adds a WHERE type IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereTypeIn(v []Category) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.TypeIn(b.query, v)
	return b
}

// WhereTypeNotIn adds a WHERE type NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereTypeNotIn(v []Category) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.TypeNotIn(b.query, v)
	return b
}

// WhereFacilityTypeEQ adds a WHERE facility_type = ? condition
func (b *LocationCategoryQueryBuilder) WhereFacilityTypeEQ(v FacilityType) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.FacilityTypeEQ(b.query, v)
	return b
}

// WhereFacilityTypeNEQ adds a WHERE facility_type != ? condition
func (b *LocationCategoryQueryBuilder) WhereFacilityTypeNEQ(v FacilityType) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.FacilityTypeNEQ(b.query, v)
	return b
}

// WhereFacilityTypeIn adds a WHERE facility_type IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereFacilityTypeIn(v []FacilityType) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.FacilityTypeIn(b.query, v)
	return b
}

// WhereFacilityTypeNotIn adds a WHERE facility_type NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereFacilityTypeNotIn(v []FacilityType) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.FacilityTypeNotIn(b.query, v)
	return b
}

// WhereColorEQ adds a WHERE color = ? condition
func (b *LocationCategoryQueryBuilder) WhereColorEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.ColorEQ(b.query, v)
	return b
}

// WhereColorNEQ adds a WHERE color != ? condition
func (b *LocationCategoryQueryBuilder) WhereColorNEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.ColorNEQ(b.query, v)
	return b
}

// WhereColorIn adds a WHERE color IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereColorIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.ColorIn(b.query, v)
	return b
}

// WhereColorNotIn adds a WHERE color NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereColorNotIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.ColorNotIn(b.query, v)
	return b
}

// WhereColorContains adds a WHERE color LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereColorContains(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.ColorContains(b.query, v)
	return b
}

// WhereColorHasPrefix adds a WHERE color LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereColorHasPrefix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.ColorHasPrefix(b.query, v)
	return b
}

// WhereColorHasSuffix adds a WHERE color LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereColorHasSuffix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.ColorHasSuffix(b.query, v)
	return b
}

// WhereHasSecureParkingEQ adds a WHERE has_secure_parking = ? condition
func (b *LocationCategoryQueryBuilder) WhereHasSecureParkingEQ(v bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.HasSecureParkingEQ(b.query, v)
	return b
}

// WhereHasSecureParkingNEQ adds a WHERE has_secure_parking != ? condition
func (b *LocationCategoryQueryBuilder) WhereHasSecureParkingNEQ(v bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.HasSecureParkingNEQ(b.query, v)
	return b
}

// WhereHasSecureParkingIn adds a WHERE has_secure_parking IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereHasSecureParkingIn(v []bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.HasSecureParkingIn(b.query, v)
	return b
}

// WhereHasSecureParkingNotIn adds a WHERE has_secure_parking NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereHasSecureParkingNotIn(v []bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.HasSecureParkingNotIn(b.query, v)
	return b
}

// WhereRequiresAppointmentEQ adds a WHERE requires_appointment = ? condition
func (b *LocationCategoryQueryBuilder) WhereRequiresAppointmentEQ(v bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RequiresAppointmentEQ(b.query, v)
	return b
}

// WhereRequiresAppointmentNEQ adds a WHERE requires_appointment != ? condition
func (b *LocationCategoryQueryBuilder) WhereRequiresAppointmentNEQ(v bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RequiresAppointmentNEQ(b.query, v)
	return b
}

// WhereRequiresAppointmentIn adds a WHERE requires_appointment IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereRequiresAppointmentIn(v []bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RequiresAppointmentIn(b.query, v)
	return b
}

// WhereRequiresAppointmentNotIn adds a WHERE requires_appointment NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereRequiresAppointmentNotIn(v []bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RequiresAppointmentNotIn(b.query, v)
	return b
}

// WhereAllowsOvernightEQ adds a WHERE allows_overnight = ? condition
func (b *LocationCategoryQueryBuilder) WhereAllowsOvernightEQ(v bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.AllowsOvernightEQ(b.query, v)
	return b
}

// WhereAllowsOvernightNEQ adds a WHERE allows_overnight != ? condition
func (b *LocationCategoryQueryBuilder) WhereAllowsOvernightNEQ(v bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.AllowsOvernightNEQ(b.query, v)
	return b
}

// WhereAllowsOvernightIn adds a WHERE allows_overnight IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereAllowsOvernightIn(v []bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.AllowsOvernightIn(b.query, v)
	return b
}

// WhereAllowsOvernightNotIn adds a WHERE allows_overnight NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereAllowsOvernightNotIn(v []bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.AllowsOvernightNotIn(b.query, v)
	return b
}

// WhereHasRestroomEQ adds a WHERE has_restroom = ? condition
func (b *LocationCategoryQueryBuilder) WhereHasRestroomEQ(v bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.HasRestroomEQ(b.query, v)
	return b
}

// WhereHasRestroomNEQ adds a WHERE has_restroom != ? condition
func (b *LocationCategoryQueryBuilder) WhereHasRestroomNEQ(v bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.HasRestroomNEQ(b.query, v)
	return b
}

// WhereHasRestroomIn adds a WHERE has_restroom IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereHasRestroomIn(v []bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.HasRestroomIn(b.query, v)
	return b
}

// WhereHasRestroomNotIn adds a WHERE has_restroom NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereHasRestroomNotIn(v []bool) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.HasRestroomNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *LocationCategoryQueryBuilder) WhereVersionEQ(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *LocationCategoryQueryBuilder) WhereVersionNEQ(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *LocationCategoryQueryBuilder) WhereVersionGT(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *LocationCategoryQueryBuilder) WhereVersionGTE(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *LocationCategoryQueryBuilder) WhereVersionLT(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *LocationCategoryQueryBuilder) WhereVersionLTE(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereVersionIn(v []int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereVersionNotIn(v []int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *LocationCategoryQueryBuilder) WhereCreatedAtEQ(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *LocationCategoryQueryBuilder) WhereCreatedAtNEQ(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *LocationCategoryQueryBuilder) WhereCreatedAtGT(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *LocationCategoryQueryBuilder) WhereCreatedAtGTE(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *LocationCategoryQueryBuilder) WhereCreatedAtLT(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *LocationCategoryQueryBuilder) WhereCreatedAtLTE(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereCreatedAtIn(v []int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereCreatedAtNotIn(v []int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *LocationCategoryQueryBuilder) WhereUpdatedAtEQ(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *LocationCategoryQueryBuilder) WhereUpdatedAtNEQ(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *LocationCategoryQueryBuilder) WhereUpdatedAtGT(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *LocationCategoryQueryBuilder) WhereUpdatedAtGTE(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *LocationCategoryQueryBuilder) WhereUpdatedAtLT(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *LocationCategoryQueryBuilder) WhereUpdatedAtLTE(v int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereUpdatedAtIn(v []int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereUpdatedAtNotIn(v []int64) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *LocationCategoryQueryBuilder) WhereSearchVectorEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *LocationCategoryQueryBuilder) WhereSearchVectorNEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereSearchVectorIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereSearchVectorNotIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereSearchVectorContains(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereSearchVectorHasPrefix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereSearchVectorHasSuffix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *LocationCategoryQueryBuilder) WhereRankEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *LocationCategoryQueryBuilder) WhereRankNEQ(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereRankIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *LocationCategoryQueryBuilder) WhereRankNotIn(v []string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereRankContains(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereRankHasPrefix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *LocationCategoryQueryBuilder) WhereRankHasSuffix(v string) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *LocationCategoryQueryBuilder) WhereTenant(orgID, buID pulid.ID) *LocationCategoryQueryBuilder {
	b.query = LocationCategoryQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *LocationCategoryQueryBuilder) WhereGroup(sep string, fn func(*LocationCategoryQueryBuilder) *LocationCategoryQueryBuilder) *LocationCategoryQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &LocationCategoryQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *LocationCategoryQueryBuilder) Where(query string, args ...interface{}) *LocationCategoryQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *LocationCategoryQueryBuilder) OrderBy(column string, desc ...bool) *LocationCategoryQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(LocationCategoryQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *LocationCategoryQueryBuilder) Limit(n int) *LocationCategoryQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *LocationCategoryQueryBuilder) Offset(n int) *LocationCategoryQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *LocationCategoryQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *LocationCategoryQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *LocationCategoryQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *LocationCategoryQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *LocationCategoryQueryBuilder) All(ctx context.Context) ([]*LocationCategory, error) {
	var entities []*LocationCategory
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *LocationCategoryQueryBuilder) AllWithCount(ctx context.Context) ([]*LocationCategory, int, error) {
	var entities []*LocationCategory
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *LocationCategoryQueryBuilder) One(ctx context.Context) (*LocationCategory, error) {
	entity := new(LocationCategory)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *LocationCategoryQueryBuilder) First(ctx context.Context) (*LocationCategory, error) {
	entity := new(LocationCategory)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// LocationCategoryBuild creates a chainable query builder
func LocationCategoryBuild(db bun.IDB) *LocationCategoryQueryBuilder {
	return NewLocationCategoryQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *LocationCategoryQueryBuilder) LoadBusinessUnit() *LocationCategoryQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *LocationCategoryQueryBuilder) LoadOrganization() *LocationCategoryQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for LocationCategory
func (b *LocationCategoryQueryBuilder) LoadAllRelations() *LocationCategoryQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	return b
}
