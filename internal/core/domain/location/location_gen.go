/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package location

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// locationFieldConfig provides field configuration for Location
type locationFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// LocationQuery provides type-safe query helpers and constants
var LocationQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                 string
		BusinessUnitID     string
		OrganizationID     string
		LocationCategoryID string
		StateID            string
		Status             string
		Code               string
		Name               string
		Description        string
		AddressLine1       string
		AddressLine2       string
		City               string
		PostalCode         string
		Longitude          string
		Latitude           string
		PlaceID            string
		IsGeocoded         string
		Version            string
		CreatedAt          string
		UpdatedAt          string
		SearchVector       string
		Rank               string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		LocationCategoryIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LocationCategoryIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LocationCategoryIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		LocationCategoryIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ               func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn             func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CodeEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LongitudeEQ             func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LongitudeNEQ            func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LongitudeIn             func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		LongitudeNotIn          func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		LongitudeIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		LongitudeIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		LatitudeEQ              func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LatitudeNEQ             func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LatitudeIn              func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		LatitudeNotIn           func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		LatitudeIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		LatitudeIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		PlaceIDEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PlaceIDNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PlaceIDGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsGeocodedEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsGeocodedNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsGeocodedIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsGeocodedNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]locationFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit     string
		Organization     string
		State            string
		LocationCategory string
	}
}{
	// Table and alias constants
	Table:    "locations",
	Alias:    "loc",
	IDPrefix: "loc_",

	// Field names
	Field: struct {
		ID                 string
		BusinessUnitID     string
		OrganizationID     string
		LocationCategoryID string
		StateID            string
		Status             string
		Code               string
		Name               string
		Description        string
		AddressLine1       string
		AddressLine2       string
		City               string
		PostalCode         string
		Longitude          string
		Latitude           string
		PlaceID            string
		IsGeocoded         string
		Version            string
		CreatedAt          string
		UpdatedAt          string
		SearchVector       string
		Rank               string
	}{
		ID:                 "id",
		BusinessUnitID:     "business_unit_id",
		OrganizationID:     "organization_id",
		LocationCategoryID: "location_category_id",
		StateID:            "state_id",
		Status:             "status",
		Code:               "code",
		Name:               "name",
		Description:        "description",
		AddressLine1:       "address_line_1",
		AddressLine2:       "address_line_2",
		City:               "city",
		PostalCode:         "postal_code",
		Longitude:          "longitude",
		Latitude:           "latitude",
		PlaceID:            "place_id",
		IsGeocoded:         "is_geocoded",
		Version:            "version",
		CreatedAt:          "created_at",
		UpdatedAt:          "updated_at",
		SearchVector:       "search_vector",
		Rank:               "rank",
	},

	// Column helpers
	Column: func(field string) string {
		return "loc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "loc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		LocationCategoryIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LocationCategoryIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LocationCategoryIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		LocationCategoryIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ               func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn             func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CodeEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LongitudeEQ             func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LongitudeNEQ            func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LongitudeIn             func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		LongitudeNotIn          func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		LongitudeIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		LongitudeIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		LatitudeEQ              func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LatitudeNEQ             func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LatitudeIn              func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		LatitudeNotIn           func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		LatitudeIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		LatitudeIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		PlaceIDEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PlaceIDNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PlaceIDGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlaceIDHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsGeocodedEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsGeocodedNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsGeocodedIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsGeocodedNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		Tenant                  func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.organization_id"), bun.In(v))
		},
		LocationCategoryIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.location_category_id"), v)
		},
		LocationCategoryIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.location_category_id"), v)
		},
		LocationCategoryIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.location_category_id"), bun.In(v))
		},
		LocationCategoryIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.location_category_id"), bun.In(v))
		},
		StateIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.state_id"), v)
		},
		StateIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.state_id"), v)
		},
		StateIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.state_id"), bun.In(v))
		},
		StateIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.state_id"), bun.In(v))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.status"), bun.In(v))
		},
		CodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.code"), v)
		},
		CodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.code"), v)
		},
		CodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.code"), bun.In(v))
		},
		CodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.code"), bun.In(v))
		},
		CodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.code"), v)
		},
		CodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.code"), v)
		},
		CodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.code"), v)
		},
		CodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.code"), v)
		},
		CodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.code"), "%"+v+"%")
		},
		CodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.code"), v+"%")
		},
		CodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.code"), "%"+v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.description"), "%"+v)
		},
		AddressLine1EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.address_line_1"), v)
		},
		AddressLine1NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.address_line_1"), v)
		},
		AddressLine1In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.address_line_1"), bun.In(v))
		},
		AddressLine1NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.address_line_1"), bun.In(v))
		},
		AddressLine1GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.address_line_1"), v)
		},
		AddressLine1GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.address_line_1"), v)
		},
		AddressLine1LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.address_line_1"), v)
		},
		AddressLine1LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.address_line_1"), v)
		},
		AddressLine1Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.address_line_1"), "%"+v+"%")
		},
		AddressLine1HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.address_line_1"), v+"%")
		},
		AddressLine1HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.address_line_1"), "%"+v)
		},
		AddressLine2EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.address_line_2"), v)
		},
		AddressLine2NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.address_line_2"), v)
		},
		AddressLine2In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.address_line_2"), bun.In(v))
		},
		AddressLine2NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.address_line_2"), bun.In(v))
		},
		AddressLine2GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.address_line_2"), v)
		},
		AddressLine2GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.address_line_2"), v)
		},
		AddressLine2LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.address_line_2"), v)
		},
		AddressLine2LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.address_line_2"), v)
		},
		AddressLine2Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.address_line_2"), "%"+v+"%")
		},
		AddressLine2HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.address_line_2"), v+"%")
		},
		AddressLine2HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.address_line_2"), "%"+v)
		},
		CityEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.city"), v)
		},
		CityNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.city"), v)
		},
		CityIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.city"), bun.In(v))
		},
		CityNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.city"), bun.In(v))
		},
		CityGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.city"), v)
		},
		CityGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.city"), v)
		},
		CityLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.city"), v)
		},
		CityLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.city"), v)
		},
		CityContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.city"), "%"+v+"%")
		},
		CityHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.city"), v+"%")
		},
		CityHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.city"), "%"+v)
		},
		PostalCodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.postal_code"), v)
		},
		PostalCodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.postal_code"), v)
		},
		PostalCodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.postal_code"), bun.In(v))
		},
		PostalCodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.postal_code"), bun.In(v))
		},
		PostalCodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.postal_code"), v)
		},
		PostalCodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.postal_code"), v)
		},
		PostalCodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.postal_code"), v)
		},
		PostalCodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.postal_code"), v)
		},
		PostalCodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.postal_code"), "%"+v+"%")
		},
		PostalCodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.postal_code"), v+"%")
		},
		PostalCodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.postal_code"), "%"+v)
		},
		LongitudeEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.longitude"), v)
		},
		LongitudeNEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.longitude"), v)
		},
		LongitudeIn: func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.longitude"), bun.In(v))
		},
		LongitudeNotIn: func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.longitude"), bun.In(v))
		},
		LongitudeIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("loc.longitude"))
		},
		LongitudeIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("loc.longitude"))
		},
		LatitudeEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.latitude"), v)
		},
		LatitudeNEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.latitude"), v)
		},
		LatitudeIn: func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.latitude"), bun.In(v))
		},
		LatitudeNotIn: func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.latitude"), bun.In(v))
		},
		LatitudeIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("loc.latitude"))
		},
		LatitudeIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("loc.latitude"))
		},
		PlaceIDEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.place_id"), v)
		},
		PlaceIDNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.place_id"), v)
		},
		PlaceIDIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.place_id"), bun.In(v))
		},
		PlaceIDNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.place_id"), bun.In(v))
		},
		PlaceIDGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.place_id"), v)
		},
		PlaceIDGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.place_id"), v)
		},
		PlaceIDLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.place_id"), v)
		},
		PlaceIDLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.place_id"), v)
		},
		PlaceIDContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.place_id"), "%"+v+"%")
		},
		PlaceIDHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.place_id"), v+"%")
		},
		PlaceIDHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.place_id"), "%"+v)
		},
		IsGeocodedEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.is_geocoded"), v)
		},
		IsGeocodedNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.is_geocoded"), v)
		},
		IsGeocodedIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.is_geocoded"), bun.In(v))
		},
		IsGeocodedNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.is_geocoded"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.updated_at"), v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("loc.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("loc.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("loc.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("loc.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("loc.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("loc.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("loc.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("loc.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("loc.rank"), "%"+v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("loc.organization_id"), orgID).
				Where("? = ?", bun.Ident("loc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("loc.id"), id).
				Where("? = ?", bun.Ident("loc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "loc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"loc.status ASC",
				"loc.code ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "loc.status DESC"
			}
			return "loc.status ASC"
		},
		Code: func(desc bool) string {
			if desc {
				return "loc.code DESC"
			}
			return "loc.code ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "loc.created_at DESC"
			}
			return "loc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "loc.updated_at DESC"
			}
			return "loc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]locationFieldConfig {
		return map[string]locationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "loc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "loc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "loc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"location_category_id": {
				Name:       "location_category_id",
				Column:     "loc.location_category_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "loc.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "loc.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "loc.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "loc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "loc.description",
				Sortable:   false,
				Filterable: true,
			},
			"address_line_1": {
				Name:       "address_line_1",
				Column:     "loc.address_line_1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line_2": {
				Name:       "address_line_2",
				Column:     "loc.address_line_2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "loc.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "loc.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"longitude": {
				Name:       "longitude",
				Column:     "loc.longitude",
				Sortable:   false,
				Filterable: false,
			},
			"latitude": {
				Name:       "latitude",
				Column:     "loc.latitude",
				Sortable:   false,
				Filterable: false,
			},
			"place_id": {
				Name:       "place_id",
				Column:     "loc.place_id",
				Sortable:   false,
				Filterable: true,
			},
			"is_geocoded": {
				Name:       "is_geocoded",
				Column:     "loc.is_geocoded",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "loc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "loc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "loc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "loc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "loc.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]locationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "loc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "loc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "loc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"location_category_id": {
				Name:       "location_category_id",
				Column:     "loc.location_category_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "loc.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "loc.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "loc.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "loc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "loc.description",
				Sortable:   false,
				Filterable: true,
			},
			"address_line_1": {
				Name:       "address_line_1",
				Column:     "loc.address_line_1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line_2": {
				Name:       "address_line_2",
				Column:     "loc.address_line_2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "loc.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "loc.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"longitude": {
				Name:       "longitude",
				Column:     "loc.longitude",
				Sortable:   false,
				Filterable: false,
			},
			"latitude": {
				Name:       "latitude",
				Column:     "loc.latitude",
				Sortable:   false,
				Filterable: false,
			},
			"place_id": {
				Name:       "place_id",
				Column:     "loc.place_id",
				Sortable:   false,
				Filterable: true,
			},
			"is_geocoded": {
				Name:       "is_geocoded",
				Column:     "loc.is_geocoded",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "loc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "loc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "loc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "loc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "loc.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]locationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "loc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "loc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "loc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"location_category_id": {
				Name:       "location_category_id",
				Column:     "loc.location_category_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "loc.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "loc.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "loc.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "loc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "loc.description",
				Sortable:   false,
				Filterable: true,
			},
			"address_line_1": {
				Name:       "address_line_1",
				Column:     "loc.address_line_1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line_2": {
				Name:       "address_line_2",
				Column:     "loc.address_line_2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "loc.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "loc.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"longitude": {
				Name:       "longitude",
				Column:     "loc.longitude",
				Sortable:   false,
				Filterable: false,
			},
			"latitude": {
				Name:       "latitude",
				Column:     "loc.latitude",
				Sortable:   false,
				Filterable: false,
			},
			"place_id": {
				Name:       "place_id",
				Column:     "loc.place_id",
				Sortable:   false,
				Filterable: true,
			},
			"is_geocoded": {
				Name:       "is_geocoded",
				Column:     "loc.is_geocoded",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "loc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "loc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "loc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "loc.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "loc.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit     string
		Organization     string
		State            string
		LocationCategory string
	}{
		BusinessUnit:     "BusinessUnit",
		Organization:     "Organization",
		State:            "State",
		LocationCategory: "LocationCategory",
	},
}

// LocationQueryBuilder provides a fluent interface for building queries
type LocationQueryBuilder struct {
	query *bun.SelectQuery
}

// NewLocationQuery creates a new query builder
func NewLocationQuery(db bun.IDB) *LocationQueryBuilder {
	return &LocationQueryBuilder{
		query: db.NewSelect().Model((*Location)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func LocationFromQuery(q *bun.SelectQuery) *LocationQueryBuilder {
	return &LocationQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *LocationQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *LocationQueryBuilder) Model(model interface{}) *LocationQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *LocationQueryBuilder) WhereIDEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *LocationQueryBuilder) WhereIDNEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *LocationQueryBuilder) WhereIDIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *LocationQueryBuilder) WhereIDNotIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *LocationQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *LocationQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *LocationQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *LocationQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *LocationQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *LocationQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *LocationQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *LocationQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereLocationCategoryIDEQ adds a WHERE location_category_id = ? condition
func (b *LocationQueryBuilder) WhereLocationCategoryIDEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LocationCategoryIDEQ(b.query, v)
	return b
}

// WhereLocationCategoryIDNEQ adds a WHERE location_category_id != ? condition
func (b *LocationQueryBuilder) WhereLocationCategoryIDNEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LocationCategoryIDNEQ(b.query, v)
	return b
}

// WhereLocationCategoryIDIn adds a WHERE location_category_id IN (?) condition
func (b *LocationQueryBuilder) WhereLocationCategoryIDIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LocationCategoryIDIn(b.query, v)
	return b
}

// WhereLocationCategoryIDNotIn adds a WHERE location_category_id NOT IN (?) condition
func (b *LocationQueryBuilder) WhereLocationCategoryIDNotIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LocationCategoryIDNotIn(b.query, v)
	return b
}

// WhereStateIDEQ adds a WHERE state_id = ? condition
func (b *LocationQueryBuilder) WhereStateIDEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.StateIDEQ(b.query, v)
	return b
}

// WhereStateIDNEQ adds a WHERE state_id != ? condition
func (b *LocationQueryBuilder) WhereStateIDNEQ(v pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.StateIDNEQ(b.query, v)
	return b
}

// WhereStateIDIn adds a WHERE state_id IN (?) condition
func (b *LocationQueryBuilder) WhereStateIDIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.StateIDIn(b.query, v)
	return b
}

// WhereStateIDNotIn adds a WHERE state_id NOT IN (?) condition
func (b *LocationQueryBuilder) WhereStateIDNotIn(v []pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.StateIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *LocationQueryBuilder) WhereStatusEQ(v domain.Status) *LocationQueryBuilder {
	b.query = LocationQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *LocationQueryBuilder) WhereStatusNEQ(v domain.Status) *LocationQueryBuilder {
	b.query = LocationQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *LocationQueryBuilder) WhereStatusIn(v []domain.Status) *LocationQueryBuilder {
	b.query = LocationQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *LocationQueryBuilder) WhereStatusNotIn(v []domain.Status) *LocationQueryBuilder {
	b.query = LocationQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereCodeEQ adds a WHERE code = ? condition
func (b *LocationQueryBuilder) WhereCodeEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CodeEQ(b.query, v)
	return b
}

// WhereCodeNEQ adds a WHERE code != ? condition
func (b *LocationQueryBuilder) WhereCodeNEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CodeNEQ(b.query, v)
	return b
}

// WhereCodeIn adds a WHERE code IN (?) condition
func (b *LocationQueryBuilder) WhereCodeIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CodeIn(b.query, v)
	return b
}

// WhereCodeNotIn adds a WHERE code NOT IN (?) condition
func (b *LocationQueryBuilder) WhereCodeNotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CodeNotIn(b.query, v)
	return b
}

// WhereCodeContains adds a WHERE code LIKE ? condition
func (b *LocationQueryBuilder) WhereCodeContains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CodeContains(b.query, v)
	return b
}

// WhereCodeHasPrefix adds a WHERE code LIKE ? condition
func (b *LocationQueryBuilder) WhereCodeHasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CodeHasPrefix(b.query, v)
	return b
}

// WhereCodeHasSuffix adds a WHERE code LIKE ? condition
func (b *LocationQueryBuilder) WhereCodeHasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CodeHasSuffix(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *LocationQueryBuilder) WhereNameEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *LocationQueryBuilder) WhereNameNEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *LocationQueryBuilder) WhereNameIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *LocationQueryBuilder) WhereNameNotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *LocationQueryBuilder) WhereNameContains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *LocationQueryBuilder) WhereNameHasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *LocationQueryBuilder) WhereNameHasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *LocationQueryBuilder) WhereDescriptionEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *LocationQueryBuilder) WhereDescriptionNEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *LocationQueryBuilder) WhereDescriptionIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *LocationQueryBuilder) WhereDescriptionNotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *LocationQueryBuilder) WhereDescriptionContains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *LocationQueryBuilder) WhereDescriptionHasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *LocationQueryBuilder) WhereDescriptionHasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereAddressLine1EQ adds a WHERE address_line_1 = ? condition
func (b *LocationQueryBuilder) WhereAddressLine1EQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine1EQ(b.query, v)
	return b
}

// WhereAddressLine1NEQ adds a WHERE address_line_1 != ? condition
func (b *LocationQueryBuilder) WhereAddressLine1NEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine1NEQ(b.query, v)
	return b
}

// WhereAddressLine1In adds a WHERE address_line_1 IN (?) condition
func (b *LocationQueryBuilder) WhereAddressLine1In(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine1In(b.query, v)
	return b
}

// WhereAddressLine1NotIn adds a WHERE address_line_1 NOT IN (?) condition
func (b *LocationQueryBuilder) WhereAddressLine1NotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine1NotIn(b.query, v)
	return b
}

// WhereAddressLine1Contains adds a WHERE address_line_1 LIKE ? condition
func (b *LocationQueryBuilder) WhereAddressLine1Contains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine1Contains(b.query, v)
	return b
}

// WhereAddressLine1HasPrefix adds a WHERE address_line_1 LIKE ? condition
func (b *LocationQueryBuilder) WhereAddressLine1HasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine1HasPrefix(b.query, v)
	return b
}

// WhereAddressLine1HasSuffix adds a WHERE address_line_1 LIKE ? condition
func (b *LocationQueryBuilder) WhereAddressLine1HasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine1HasSuffix(b.query, v)
	return b
}

// WhereAddressLine2EQ adds a WHERE address_line_2 = ? condition
func (b *LocationQueryBuilder) WhereAddressLine2EQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine2EQ(b.query, v)
	return b
}

// WhereAddressLine2NEQ adds a WHERE address_line_2 != ? condition
func (b *LocationQueryBuilder) WhereAddressLine2NEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine2NEQ(b.query, v)
	return b
}

// WhereAddressLine2In adds a WHERE address_line_2 IN (?) condition
func (b *LocationQueryBuilder) WhereAddressLine2In(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine2In(b.query, v)
	return b
}

// WhereAddressLine2NotIn adds a WHERE address_line_2 NOT IN (?) condition
func (b *LocationQueryBuilder) WhereAddressLine2NotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine2NotIn(b.query, v)
	return b
}

// WhereAddressLine2Contains adds a WHERE address_line_2 LIKE ? condition
func (b *LocationQueryBuilder) WhereAddressLine2Contains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine2Contains(b.query, v)
	return b
}

// WhereAddressLine2HasPrefix adds a WHERE address_line_2 LIKE ? condition
func (b *LocationQueryBuilder) WhereAddressLine2HasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine2HasPrefix(b.query, v)
	return b
}

// WhereAddressLine2HasSuffix adds a WHERE address_line_2 LIKE ? condition
func (b *LocationQueryBuilder) WhereAddressLine2HasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.AddressLine2HasSuffix(b.query, v)
	return b
}

// WhereCityEQ adds a WHERE city = ? condition
func (b *LocationQueryBuilder) WhereCityEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CityEQ(b.query, v)
	return b
}

// WhereCityNEQ adds a WHERE city != ? condition
func (b *LocationQueryBuilder) WhereCityNEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CityNEQ(b.query, v)
	return b
}

// WhereCityIn adds a WHERE city IN (?) condition
func (b *LocationQueryBuilder) WhereCityIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CityIn(b.query, v)
	return b
}

// WhereCityNotIn adds a WHERE city NOT IN (?) condition
func (b *LocationQueryBuilder) WhereCityNotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CityNotIn(b.query, v)
	return b
}

// WhereCityContains adds a WHERE city LIKE ? condition
func (b *LocationQueryBuilder) WhereCityContains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CityContains(b.query, v)
	return b
}

// WhereCityHasPrefix adds a WHERE city LIKE ? condition
func (b *LocationQueryBuilder) WhereCityHasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CityHasPrefix(b.query, v)
	return b
}

// WhereCityHasSuffix adds a WHERE city LIKE ? condition
func (b *LocationQueryBuilder) WhereCityHasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CityHasSuffix(b.query, v)
	return b
}

// WherePostalCodeEQ adds a WHERE postal_code = ? condition
func (b *LocationQueryBuilder) WherePostalCodeEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PostalCodeEQ(b.query, v)
	return b
}

// WherePostalCodeNEQ adds a WHERE postal_code != ? condition
func (b *LocationQueryBuilder) WherePostalCodeNEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PostalCodeNEQ(b.query, v)
	return b
}

// WherePostalCodeIn adds a WHERE postal_code IN (?) condition
func (b *LocationQueryBuilder) WherePostalCodeIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PostalCodeIn(b.query, v)
	return b
}

// WherePostalCodeNotIn adds a WHERE postal_code NOT IN (?) condition
func (b *LocationQueryBuilder) WherePostalCodeNotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PostalCodeNotIn(b.query, v)
	return b
}

// WherePostalCodeContains adds a WHERE postal_code LIKE ? condition
func (b *LocationQueryBuilder) WherePostalCodeContains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PostalCodeContains(b.query, v)
	return b
}

// WherePostalCodeHasPrefix adds a WHERE postal_code LIKE ? condition
func (b *LocationQueryBuilder) WherePostalCodeHasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PostalCodeHasPrefix(b.query, v)
	return b
}

// WherePostalCodeHasSuffix adds a WHERE postal_code LIKE ? condition
func (b *LocationQueryBuilder) WherePostalCodeHasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PostalCodeHasSuffix(b.query, v)
	return b
}

// WhereLongitudeEQ adds a WHERE longitude = ? condition
func (b *LocationQueryBuilder) WhereLongitudeEQ(v *float64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LongitudeEQ(b.query, v)
	return b
}

// WhereLongitudeNEQ adds a WHERE longitude != ? condition
func (b *LocationQueryBuilder) WhereLongitudeNEQ(v *float64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LongitudeNEQ(b.query, v)
	return b
}

// WhereLongitudeIn adds a WHERE longitude IN (?) condition
func (b *LocationQueryBuilder) WhereLongitudeIn(v []*float64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LongitudeIn(b.query, v)
	return b
}

// WhereLongitudeNotIn adds a WHERE longitude NOT IN (?) condition
func (b *LocationQueryBuilder) WhereLongitudeNotIn(v []*float64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LongitudeNotIn(b.query, v)
	return b
}

// WhereLatitudeEQ adds a WHERE latitude = ? condition
func (b *LocationQueryBuilder) WhereLatitudeEQ(v *float64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LatitudeEQ(b.query, v)
	return b
}

// WhereLatitudeNEQ adds a WHERE latitude != ? condition
func (b *LocationQueryBuilder) WhereLatitudeNEQ(v *float64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LatitudeNEQ(b.query, v)
	return b
}

// WhereLatitudeIn adds a WHERE latitude IN (?) condition
func (b *LocationQueryBuilder) WhereLatitudeIn(v []*float64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LatitudeIn(b.query, v)
	return b
}

// WhereLatitudeNotIn adds a WHERE latitude NOT IN (?) condition
func (b *LocationQueryBuilder) WhereLatitudeNotIn(v []*float64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.LatitudeNotIn(b.query, v)
	return b
}

// WherePlaceIDEQ adds a WHERE place_id = ? condition
func (b *LocationQueryBuilder) WherePlaceIDEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PlaceIDEQ(b.query, v)
	return b
}

// WherePlaceIDNEQ adds a WHERE place_id != ? condition
func (b *LocationQueryBuilder) WherePlaceIDNEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PlaceIDNEQ(b.query, v)
	return b
}

// WherePlaceIDIn adds a WHERE place_id IN (?) condition
func (b *LocationQueryBuilder) WherePlaceIDIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PlaceIDIn(b.query, v)
	return b
}

// WherePlaceIDNotIn adds a WHERE place_id NOT IN (?) condition
func (b *LocationQueryBuilder) WherePlaceIDNotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PlaceIDNotIn(b.query, v)
	return b
}

// WherePlaceIDContains adds a WHERE place_id LIKE ? condition
func (b *LocationQueryBuilder) WherePlaceIDContains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PlaceIDContains(b.query, v)
	return b
}

// WherePlaceIDHasPrefix adds a WHERE place_id LIKE ? condition
func (b *LocationQueryBuilder) WherePlaceIDHasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PlaceIDHasPrefix(b.query, v)
	return b
}

// WherePlaceIDHasSuffix adds a WHERE place_id LIKE ? condition
func (b *LocationQueryBuilder) WherePlaceIDHasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.PlaceIDHasSuffix(b.query, v)
	return b
}

// WhereIsGeocodedEQ adds a WHERE is_geocoded = ? condition
func (b *LocationQueryBuilder) WhereIsGeocodedEQ(v bool) *LocationQueryBuilder {
	b.query = LocationQuery.Where.IsGeocodedEQ(b.query, v)
	return b
}

// WhereIsGeocodedNEQ adds a WHERE is_geocoded != ? condition
func (b *LocationQueryBuilder) WhereIsGeocodedNEQ(v bool) *LocationQueryBuilder {
	b.query = LocationQuery.Where.IsGeocodedNEQ(b.query, v)
	return b
}

// WhereIsGeocodedIn adds a WHERE is_geocoded IN (?) condition
func (b *LocationQueryBuilder) WhereIsGeocodedIn(v []bool) *LocationQueryBuilder {
	b.query = LocationQuery.Where.IsGeocodedIn(b.query, v)
	return b
}

// WhereIsGeocodedNotIn adds a WHERE is_geocoded NOT IN (?) condition
func (b *LocationQueryBuilder) WhereIsGeocodedNotIn(v []bool) *LocationQueryBuilder {
	b.query = LocationQuery.Where.IsGeocodedNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *LocationQueryBuilder) WhereVersionEQ(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *LocationQueryBuilder) WhereVersionNEQ(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *LocationQueryBuilder) WhereVersionGT(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *LocationQueryBuilder) WhereVersionGTE(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *LocationQueryBuilder) WhereVersionLT(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *LocationQueryBuilder) WhereVersionLTE(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *LocationQueryBuilder) WhereVersionIn(v []int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *LocationQueryBuilder) WhereVersionNotIn(v []int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *LocationQueryBuilder) WhereCreatedAtEQ(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *LocationQueryBuilder) WhereCreatedAtNEQ(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *LocationQueryBuilder) WhereCreatedAtGT(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *LocationQueryBuilder) WhereCreatedAtGTE(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *LocationQueryBuilder) WhereCreatedAtLT(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *LocationQueryBuilder) WhereCreatedAtLTE(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *LocationQueryBuilder) WhereCreatedAtIn(v []int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *LocationQueryBuilder) WhereCreatedAtNotIn(v []int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *LocationQueryBuilder) WhereUpdatedAtEQ(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *LocationQueryBuilder) WhereUpdatedAtNEQ(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *LocationQueryBuilder) WhereUpdatedAtGT(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *LocationQueryBuilder) WhereUpdatedAtGTE(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *LocationQueryBuilder) WhereUpdatedAtLT(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *LocationQueryBuilder) WhereUpdatedAtLTE(v int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *LocationQueryBuilder) WhereUpdatedAtIn(v []int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *LocationQueryBuilder) WhereUpdatedAtNotIn(v []int64) *LocationQueryBuilder {
	b.query = LocationQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *LocationQueryBuilder) WhereSearchVectorEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *LocationQueryBuilder) WhereSearchVectorNEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *LocationQueryBuilder) WhereSearchVectorIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *LocationQueryBuilder) WhereSearchVectorNotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *LocationQueryBuilder) WhereSearchVectorContains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *LocationQueryBuilder) WhereSearchVectorHasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *LocationQueryBuilder) WhereSearchVectorHasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *LocationQueryBuilder) WhereRankEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *LocationQueryBuilder) WhereRankNEQ(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *LocationQueryBuilder) WhereRankIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *LocationQueryBuilder) WhereRankNotIn(v []string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *LocationQueryBuilder) WhereRankContains(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *LocationQueryBuilder) WhereRankHasPrefix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *LocationQueryBuilder) WhereRankHasSuffix(v string) *LocationQueryBuilder {
	b.query = LocationQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *LocationQueryBuilder) WhereTenant(orgID, buID pulid.ID) *LocationQueryBuilder {
	b.query = LocationQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *LocationQueryBuilder) WhereGroup(sep string, fn func(*LocationQueryBuilder) *LocationQueryBuilder) *LocationQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &LocationQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *LocationQueryBuilder) Where(query string, args ...interface{}) *LocationQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *LocationQueryBuilder) OrderBy(column string, desc ...bool) *LocationQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(LocationQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *LocationQueryBuilder) Limit(n int) *LocationQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *LocationQueryBuilder) Offset(n int) *LocationQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *LocationQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *LocationQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *LocationQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *LocationQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *LocationQueryBuilder) All(ctx context.Context) ([]*Location, error) {
	var entities []*Location
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *LocationQueryBuilder) AllWithCount(ctx context.Context) ([]*Location, int, error) {
	var entities []*Location
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *LocationQueryBuilder) One(ctx context.Context) (*Location, error) {
	entity := new(Location)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *LocationQueryBuilder) First(ctx context.Context) (*Location, error) {
	entity := new(Location)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// LocationBuild creates a chainable query builder
func LocationBuild(db bun.IDB) *LocationQueryBuilder {
	return NewLocationQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *LocationQueryBuilder) LoadBusinessUnit() *LocationQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *LocationQueryBuilder) LoadOrganization() *LocationQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadState loads the State relationship
func (b *LocationQueryBuilder) LoadState() *LocationQueryBuilder {
	b.query = b.query.Relation("State")
	return b
}

// LoadLocationCategory loads the LocationCategory relationship
func (b *LocationQueryBuilder) LoadLocationCategory() *LocationQueryBuilder {
	b.query = b.query.Relation("LocationCategory")
	return b
}

// LoadAllRelations loads all relationships for Location
func (b *LocationQueryBuilder) LoadAllRelations() *LocationQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadState()
	b.LoadLocationCategory()
	return b
}
