/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package customer

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// customerFieldConfig provides field configuration for Customer
type customerFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// CustomerQuery provides type-safe query helpers and constants
var CustomerQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                     string
		BusinessUnitID         string
		OrganizationID         string
		StateID                string
		Status                 string
		Code                   string
		Name                   string
		AddressLine1           string
		AddressLine2           string
		City                   string
		PostalCode             string
		AllowConsolidation     string
		ExclusiveConsolidation string
		ConsolidationPriority  string
		SearchVector           string
		Rank                   string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                    func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                   func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                    func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                 func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CodeEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AllowConsolidationEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowConsolidationNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowConsolidationIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowConsolidationNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ExclusiveConsolidationEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ExclusiveConsolidationNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ExclusiveConsolidationIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ExclusiveConsolidationNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ConsolidationPriorityEQ     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityNEQ    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityIn     func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		ConsolidationPriorityNotIn  func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		ConsolidationPriorityGT     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityGTE    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityLT     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityLTE    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SearchVectorEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]customerFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit   string
		Organization   string
		BillingProfile string
		EmailProfile   string
		State          string
	}
}{
	// Table and alias constants
	Table:    "customers",
	Alias:    "cus",
	IDPrefix: "cus_",

	// Field names
	Field: struct {
		ID                     string
		BusinessUnitID         string
		OrganizationID         string
		StateID                string
		Status                 string
		Code                   string
		Name                   string
		AddressLine1           string
		AddressLine2           string
		City                   string
		PostalCode             string
		AllowConsolidation     string
		ExclusiveConsolidation string
		ConsolidationPriority  string
		SearchVector           string
		Rank                   string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}{
		ID:                     "id",
		BusinessUnitID:         "business_unit_id",
		OrganizationID:         "organization_id",
		StateID:                "state_id",
		Status:                 "status",
		Code:                   "code",
		Name:                   "name",
		AddressLine1:           "address_line_1",
		AddressLine2:           "address_line_2",
		City:                   "city",
		PostalCode:             "postal_code",
		AllowConsolidation:     "allow_consolidation",
		ExclusiveConsolidation: "exclusive_consolidation",
		ConsolidationPriority:  "consolidation_priority",
		SearchVector:           "search_vector",
		Rank:                   "rank",
		Version:                "version",
		CreatedAt:              "created_at",
		UpdatedAt:              "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "cus." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "cus." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                    func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                   func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                    func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                 func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CodeEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AllowConsolidationEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowConsolidationNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowConsolidationIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowConsolidationNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ExclusiveConsolidationEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ExclusiveConsolidationNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ExclusiveConsolidationIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ExclusiveConsolidationNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ConsolidationPriorityEQ     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityNEQ    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityIn     func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		ConsolidationPriorityNotIn  func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		ConsolidationPriorityGT     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityGTE    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityLT     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		ConsolidationPriorityLTE    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SearchVectorEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                      func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.organization_id"), bun.In(v))
		},
		StateIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.state_id"), v)
		},
		StateIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.state_id"), v)
		},
		StateIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.state_id"), bun.In(v))
		},
		StateIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.state_id"), bun.In(v))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.status"), bun.In(v))
		},
		CodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.code"), v)
		},
		CodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.code"), v)
		},
		CodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.code"), bun.In(v))
		},
		CodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.code"), bun.In(v))
		},
		CodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.code"), v)
		},
		CodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.code"), v)
		},
		CodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.code"), v)
		},
		CodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.code"), v)
		},
		CodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.code"), "%"+v+"%")
		},
		CodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.code"), v+"%")
		},
		CodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.code"), "%"+v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.name"), "%"+v)
		},
		AddressLine1EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.address_line_1"), v)
		},
		AddressLine1NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.address_line_1"), v)
		},
		AddressLine1In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.address_line_1"), bun.In(v))
		},
		AddressLine1NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.address_line_1"), bun.In(v))
		},
		AddressLine1GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.address_line_1"), v)
		},
		AddressLine1GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.address_line_1"), v)
		},
		AddressLine1LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.address_line_1"), v)
		},
		AddressLine1LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.address_line_1"), v)
		},
		AddressLine1Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.address_line_1"), "%"+v+"%")
		},
		AddressLine1HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.address_line_1"), v+"%")
		},
		AddressLine1HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.address_line_1"), "%"+v)
		},
		AddressLine2EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.address_line_2"), v)
		},
		AddressLine2NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.address_line_2"), v)
		},
		AddressLine2In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.address_line_2"), bun.In(v))
		},
		AddressLine2NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.address_line_2"), bun.In(v))
		},
		AddressLine2GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.address_line_2"), v)
		},
		AddressLine2GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.address_line_2"), v)
		},
		AddressLine2LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.address_line_2"), v)
		},
		AddressLine2LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.address_line_2"), v)
		},
		AddressLine2Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.address_line_2"), "%"+v+"%")
		},
		AddressLine2HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.address_line_2"), v+"%")
		},
		AddressLine2HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.address_line_2"), "%"+v)
		},
		CityEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.city"), v)
		},
		CityNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.city"), v)
		},
		CityIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.city"), bun.In(v))
		},
		CityNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.city"), bun.In(v))
		},
		CityGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.city"), v)
		},
		CityGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.city"), v)
		},
		CityLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.city"), v)
		},
		CityLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.city"), v)
		},
		CityContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.city"), "%"+v+"%")
		},
		CityHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.city"), v+"%")
		},
		CityHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.city"), "%"+v)
		},
		PostalCodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.postal_code"), v)
		},
		PostalCodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.postal_code"), v)
		},
		PostalCodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.postal_code"), bun.In(v))
		},
		PostalCodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.postal_code"), bun.In(v))
		},
		PostalCodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.postal_code"), v)
		},
		PostalCodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.postal_code"), v)
		},
		PostalCodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.postal_code"), v)
		},
		PostalCodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.postal_code"), v)
		},
		PostalCodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.postal_code"), "%"+v+"%")
		},
		PostalCodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.postal_code"), v+"%")
		},
		PostalCodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.postal_code"), "%"+v)
		},
		AllowConsolidationEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.allow_consolidation"), v)
		},
		AllowConsolidationNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.allow_consolidation"), v)
		},
		AllowConsolidationIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.allow_consolidation"), bun.In(v))
		},
		AllowConsolidationNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.allow_consolidation"), bun.In(v))
		},
		ExclusiveConsolidationEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.exclusive_consolidation"), v)
		},
		ExclusiveConsolidationNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.exclusive_consolidation"), v)
		},
		ExclusiveConsolidationIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.exclusive_consolidation"), bun.In(v))
		},
		ExclusiveConsolidationNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.exclusive_consolidation"), bun.In(v))
		},
		ConsolidationPriorityEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.consolidation_priority"), v)
		},
		ConsolidationPriorityNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.consolidation_priority"), v)
		},
		ConsolidationPriorityIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.consolidation_priority"), bun.In(v))
		},
		ConsolidationPriorityNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.consolidation_priority"), bun.In(v))
		},
		ConsolidationPriorityGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.consolidation_priority"), v)
		},
		ConsolidationPriorityGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.consolidation_priority"), v)
		},
		ConsolidationPriorityLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.consolidation_priority"), v)
		},
		ConsolidationPriorityLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.consolidation_priority"), v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cus.rank"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cus.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cus.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cus.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cus.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cus.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cus.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cus.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cus.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("cus.organization_id"), orgID).
				Where("? = ?", bun.Ident("cus.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("cus.id"), id).
				Where("? = ?", bun.Ident("cus.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "cus." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"cus.status ASC",
				"cus.code ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "cus.status DESC"
			}
			return "cus.status ASC"
		},
		Code: func(desc bool) string {
			if desc {
				return "cus.code DESC"
			}
			return "cus.code ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "cus.created_at DESC"
			}
			return "cus.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "cus.updated_at DESC"
			}
			return "cus.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]customerFieldConfig {
		return map[string]customerFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cus.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cus.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cus.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "cus.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "cus.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "cus.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "cus.name",
				Sortable:   true,
				Filterable: true,
			},
			"address_line_1": {
				Name:       "address_line_1",
				Column:     "cus.address_line_1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line_2": {
				Name:       "address_line_2",
				Column:     "cus.address_line_2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "cus.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "cus.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"allow_consolidation": {
				Name:       "allow_consolidation",
				Column:     "cus.allow_consolidation",
				Sortable:   false,
				Filterable: false,
			},
			"exclusive_consolidation": {
				Name:       "exclusive_consolidation",
				Column:     "cus.exclusive_consolidation",
				Sortable:   false,
				Filterable: false,
			},
			"consolidation_priority": {
				Name:       "consolidation_priority",
				Column:     "cus.consolidation_priority",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "cus.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "cus.rank",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "cus.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cus.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cus.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]customerFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cus.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cus.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cus.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "cus.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "cus.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "cus.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "cus.name",
				Sortable:   true,
				Filterable: true,
			},
			"address_line_1": {
				Name:       "address_line_1",
				Column:     "cus.address_line_1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line_2": {
				Name:       "address_line_2",
				Column:     "cus.address_line_2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "cus.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "cus.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"allow_consolidation": {
				Name:       "allow_consolidation",
				Column:     "cus.allow_consolidation",
				Sortable:   false,
				Filterable: false,
			},
			"exclusive_consolidation": {
				Name:       "exclusive_consolidation",
				Column:     "cus.exclusive_consolidation",
				Sortable:   false,
				Filterable: false,
			},
			"consolidation_priority": {
				Name:       "consolidation_priority",
				Column:     "cus.consolidation_priority",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "cus.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "cus.rank",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "cus.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cus.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cus.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]customerFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cus.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cus.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cus.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "cus.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "cus.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "cus.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "cus.name",
				Sortable:   true,
				Filterable: true,
			},
			"address_line_1": {
				Name:       "address_line_1",
				Column:     "cus.address_line_1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line_2": {
				Name:       "address_line_2",
				Column:     "cus.address_line_2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "cus.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "cus.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"allow_consolidation": {
				Name:       "allow_consolidation",
				Column:     "cus.allow_consolidation",
				Sortable:   false,
				Filterable: false,
			},
			"exclusive_consolidation": {
				Name:       "exclusive_consolidation",
				Column:     "cus.exclusive_consolidation",
				Sortable:   false,
				Filterable: false,
			},
			"consolidation_priority": {
				Name:       "consolidation_priority",
				Column:     "cus.consolidation_priority",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "cus.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "cus.rank",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "cus.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cus.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cus.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit   string
		Organization   string
		BillingProfile string
		EmailProfile   string
		State          string
	}{
		BusinessUnit:   "BusinessUnit",
		Organization:   "Organization",
		BillingProfile: "BillingProfile",
		EmailProfile:   "EmailProfile",
		State:          "State",
	},
}

// CustomerQueryBuilder provides a fluent interface for building queries
type CustomerQueryBuilder struct {
	query *bun.SelectQuery
}

// NewCustomerQuery creates a new query builder
func NewCustomerQuery(db bun.IDB) *CustomerQueryBuilder {
	return &CustomerQueryBuilder{
		query: db.NewSelect().Model((*Customer)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func CustomerFromQuery(q *bun.SelectQuery) *CustomerQueryBuilder {
	return &CustomerQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *CustomerQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *CustomerQueryBuilder) Model(model interface{}) *CustomerQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *CustomerQueryBuilder) WhereIDEQ(v pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *CustomerQueryBuilder) WhereIDNEQ(v pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *CustomerQueryBuilder) WhereIDIn(v []pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereIDNotIn(v []pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *CustomerQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *CustomerQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *CustomerQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *CustomerQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *CustomerQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *CustomerQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereStateIDEQ adds a WHERE state_id = ? condition
func (b *CustomerQueryBuilder) WhereStateIDEQ(v pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.StateIDEQ(b.query, v)
	return b
}

// WhereStateIDNEQ adds a WHERE state_id != ? condition
func (b *CustomerQueryBuilder) WhereStateIDNEQ(v pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.StateIDNEQ(b.query, v)
	return b
}

// WhereStateIDIn adds a WHERE state_id IN (?) condition
func (b *CustomerQueryBuilder) WhereStateIDIn(v []pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.StateIDIn(b.query, v)
	return b
}

// WhereStateIDNotIn adds a WHERE state_id NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereStateIDNotIn(v []pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.StateIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *CustomerQueryBuilder) WhereStatusEQ(v domain.Status) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *CustomerQueryBuilder) WhereStatusNEQ(v domain.Status) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *CustomerQueryBuilder) WhereStatusIn(v []domain.Status) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereStatusNotIn(v []domain.Status) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereCodeEQ adds a WHERE code = ? condition
func (b *CustomerQueryBuilder) WhereCodeEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CodeEQ(b.query, v)
	return b
}

// WhereCodeNEQ adds a WHERE code != ? condition
func (b *CustomerQueryBuilder) WhereCodeNEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CodeNEQ(b.query, v)
	return b
}

// WhereCodeIn adds a WHERE code IN (?) condition
func (b *CustomerQueryBuilder) WhereCodeIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CodeIn(b.query, v)
	return b
}

// WhereCodeNotIn adds a WHERE code NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereCodeNotIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CodeNotIn(b.query, v)
	return b
}

// WhereCodeContains adds a WHERE code LIKE ? condition
func (b *CustomerQueryBuilder) WhereCodeContains(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CodeContains(b.query, v)
	return b
}

// WhereCodeHasPrefix adds a WHERE code LIKE ? condition
func (b *CustomerQueryBuilder) WhereCodeHasPrefix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CodeHasPrefix(b.query, v)
	return b
}

// WhereCodeHasSuffix adds a WHERE code LIKE ? condition
func (b *CustomerQueryBuilder) WhereCodeHasSuffix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CodeHasSuffix(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *CustomerQueryBuilder) WhereNameEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *CustomerQueryBuilder) WhereNameNEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *CustomerQueryBuilder) WhereNameIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereNameNotIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *CustomerQueryBuilder) WhereNameContains(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *CustomerQueryBuilder) WhereNameHasPrefix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *CustomerQueryBuilder) WhereNameHasSuffix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereAddressLine1EQ adds a WHERE address_line_1 = ? condition
func (b *CustomerQueryBuilder) WhereAddressLine1EQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine1EQ(b.query, v)
	return b
}

// WhereAddressLine1NEQ adds a WHERE address_line_1 != ? condition
func (b *CustomerQueryBuilder) WhereAddressLine1NEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine1NEQ(b.query, v)
	return b
}

// WhereAddressLine1In adds a WHERE address_line_1 IN (?) condition
func (b *CustomerQueryBuilder) WhereAddressLine1In(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine1In(b.query, v)
	return b
}

// WhereAddressLine1NotIn adds a WHERE address_line_1 NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereAddressLine1NotIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine1NotIn(b.query, v)
	return b
}

// WhereAddressLine1Contains adds a WHERE address_line_1 LIKE ? condition
func (b *CustomerQueryBuilder) WhereAddressLine1Contains(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine1Contains(b.query, v)
	return b
}

// WhereAddressLine1HasPrefix adds a WHERE address_line_1 LIKE ? condition
func (b *CustomerQueryBuilder) WhereAddressLine1HasPrefix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine1HasPrefix(b.query, v)
	return b
}

// WhereAddressLine1HasSuffix adds a WHERE address_line_1 LIKE ? condition
func (b *CustomerQueryBuilder) WhereAddressLine1HasSuffix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine1HasSuffix(b.query, v)
	return b
}

// WhereAddressLine2EQ adds a WHERE address_line_2 = ? condition
func (b *CustomerQueryBuilder) WhereAddressLine2EQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine2EQ(b.query, v)
	return b
}

// WhereAddressLine2NEQ adds a WHERE address_line_2 != ? condition
func (b *CustomerQueryBuilder) WhereAddressLine2NEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine2NEQ(b.query, v)
	return b
}

// WhereAddressLine2In adds a WHERE address_line_2 IN (?) condition
func (b *CustomerQueryBuilder) WhereAddressLine2In(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine2In(b.query, v)
	return b
}

// WhereAddressLine2NotIn adds a WHERE address_line_2 NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereAddressLine2NotIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine2NotIn(b.query, v)
	return b
}

// WhereAddressLine2Contains adds a WHERE address_line_2 LIKE ? condition
func (b *CustomerQueryBuilder) WhereAddressLine2Contains(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine2Contains(b.query, v)
	return b
}

// WhereAddressLine2HasPrefix adds a WHERE address_line_2 LIKE ? condition
func (b *CustomerQueryBuilder) WhereAddressLine2HasPrefix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine2HasPrefix(b.query, v)
	return b
}

// WhereAddressLine2HasSuffix adds a WHERE address_line_2 LIKE ? condition
func (b *CustomerQueryBuilder) WhereAddressLine2HasSuffix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AddressLine2HasSuffix(b.query, v)
	return b
}

// WhereCityEQ adds a WHERE city = ? condition
func (b *CustomerQueryBuilder) WhereCityEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CityEQ(b.query, v)
	return b
}

// WhereCityNEQ adds a WHERE city != ? condition
func (b *CustomerQueryBuilder) WhereCityNEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CityNEQ(b.query, v)
	return b
}

// WhereCityIn adds a WHERE city IN (?) condition
func (b *CustomerQueryBuilder) WhereCityIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CityIn(b.query, v)
	return b
}

// WhereCityNotIn adds a WHERE city NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereCityNotIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CityNotIn(b.query, v)
	return b
}

// WhereCityContains adds a WHERE city LIKE ? condition
func (b *CustomerQueryBuilder) WhereCityContains(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CityContains(b.query, v)
	return b
}

// WhereCityHasPrefix adds a WHERE city LIKE ? condition
func (b *CustomerQueryBuilder) WhereCityHasPrefix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CityHasPrefix(b.query, v)
	return b
}

// WhereCityHasSuffix adds a WHERE city LIKE ? condition
func (b *CustomerQueryBuilder) WhereCityHasSuffix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CityHasSuffix(b.query, v)
	return b
}

// WherePostalCodeEQ adds a WHERE postal_code = ? condition
func (b *CustomerQueryBuilder) WherePostalCodeEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.PostalCodeEQ(b.query, v)
	return b
}

// WherePostalCodeNEQ adds a WHERE postal_code != ? condition
func (b *CustomerQueryBuilder) WherePostalCodeNEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.PostalCodeNEQ(b.query, v)
	return b
}

// WherePostalCodeIn adds a WHERE postal_code IN (?) condition
func (b *CustomerQueryBuilder) WherePostalCodeIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.PostalCodeIn(b.query, v)
	return b
}

// WherePostalCodeNotIn adds a WHERE postal_code NOT IN (?) condition
func (b *CustomerQueryBuilder) WherePostalCodeNotIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.PostalCodeNotIn(b.query, v)
	return b
}

// WherePostalCodeContains adds a WHERE postal_code LIKE ? condition
func (b *CustomerQueryBuilder) WherePostalCodeContains(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.PostalCodeContains(b.query, v)
	return b
}

// WherePostalCodeHasPrefix adds a WHERE postal_code LIKE ? condition
func (b *CustomerQueryBuilder) WherePostalCodeHasPrefix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.PostalCodeHasPrefix(b.query, v)
	return b
}

// WherePostalCodeHasSuffix adds a WHERE postal_code LIKE ? condition
func (b *CustomerQueryBuilder) WherePostalCodeHasSuffix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.PostalCodeHasSuffix(b.query, v)
	return b
}

// WhereAllowConsolidationEQ adds a WHERE allow_consolidation = ? condition
func (b *CustomerQueryBuilder) WhereAllowConsolidationEQ(v bool) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AllowConsolidationEQ(b.query, v)
	return b
}

// WhereAllowConsolidationNEQ adds a WHERE allow_consolidation != ? condition
func (b *CustomerQueryBuilder) WhereAllowConsolidationNEQ(v bool) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AllowConsolidationNEQ(b.query, v)
	return b
}

// WhereAllowConsolidationIn adds a WHERE allow_consolidation IN (?) condition
func (b *CustomerQueryBuilder) WhereAllowConsolidationIn(v []bool) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AllowConsolidationIn(b.query, v)
	return b
}

// WhereAllowConsolidationNotIn adds a WHERE allow_consolidation NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereAllowConsolidationNotIn(v []bool) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.AllowConsolidationNotIn(b.query, v)
	return b
}

// WhereExclusiveConsolidationEQ adds a WHERE exclusive_consolidation = ? condition
func (b *CustomerQueryBuilder) WhereExclusiveConsolidationEQ(v bool) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ExclusiveConsolidationEQ(b.query, v)
	return b
}

// WhereExclusiveConsolidationNEQ adds a WHERE exclusive_consolidation != ? condition
func (b *CustomerQueryBuilder) WhereExclusiveConsolidationNEQ(v bool) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ExclusiveConsolidationNEQ(b.query, v)
	return b
}

// WhereExclusiveConsolidationIn adds a WHERE exclusive_consolidation IN (?) condition
func (b *CustomerQueryBuilder) WhereExclusiveConsolidationIn(v []bool) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ExclusiveConsolidationIn(b.query, v)
	return b
}

// WhereExclusiveConsolidationNotIn adds a WHERE exclusive_consolidation NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereExclusiveConsolidationNotIn(v []bool) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ExclusiveConsolidationNotIn(b.query, v)
	return b
}

// WhereConsolidationPriorityEQ adds a WHERE consolidation_priority = ? condition
func (b *CustomerQueryBuilder) WhereConsolidationPriorityEQ(v int) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ConsolidationPriorityEQ(b.query, v)
	return b
}

// WhereConsolidationPriorityNEQ adds a WHERE consolidation_priority != ? condition
func (b *CustomerQueryBuilder) WhereConsolidationPriorityNEQ(v int) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ConsolidationPriorityNEQ(b.query, v)
	return b
}

// WhereConsolidationPriorityGT adds a WHERE consolidation_priority > ? condition
func (b *CustomerQueryBuilder) WhereConsolidationPriorityGT(v int) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ConsolidationPriorityGT(b.query, v)
	return b
}

// WhereConsolidationPriorityGTE adds a WHERE consolidation_priority >= ? condition
func (b *CustomerQueryBuilder) WhereConsolidationPriorityGTE(v int) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ConsolidationPriorityGTE(b.query, v)
	return b
}

// WhereConsolidationPriorityLT adds a WHERE consolidation_priority < ? condition
func (b *CustomerQueryBuilder) WhereConsolidationPriorityLT(v int) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ConsolidationPriorityLT(b.query, v)
	return b
}

// WhereConsolidationPriorityLTE adds a WHERE consolidation_priority <= ? condition
func (b *CustomerQueryBuilder) WhereConsolidationPriorityLTE(v int) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ConsolidationPriorityLTE(b.query, v)
	return b
}

// WhereConsolidationPriorityIn adds a WHERE consolidation_priority IN (?) condition
func (b *CustomerQueryBuilder) WhereConsolidationPriorityIn(v []int) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ConsolidationPriorityIn(b.query, v)
	return b
}

// WhereConsolidationPriorityNotIn adds a WHERE consolidation_priority NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereConsolidationPriorityNotIn(v []int) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.ConsolidationPriorityNotIn(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *CustomerQueryBuilder) WhereSearchVectorEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *CustomerQueryBuilder) WhereSearchVectorNEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *CustomerQueryBuilder) WhereSearchVectorIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereSearchVectorNotIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *CustomerQueryBuilder) WhereSearchVectorContains(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *CustomerQueryBuilder) WhereSearchVectorHasPrefix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *CustomerQueryBuilder) WhereSearchVectorHasSuffix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *CustomerQueryBuilder) WhereRankEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *CustomerQueryBuilder) WhereRankNEQ(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *CustomerQueryBuilder) WhereRankIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereRankNotIn(v []string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *CustomerQueryBuilder) WhereRankContains(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *CustomerQueryBuilder) WhereRankHasPrefix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *CustomerQueryBuilder) WhereRankHasSuffix(v string) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *CustomerQueryBuilder) WhereVersionEQ(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *CustomerQueryBuilder) WhereVersionNEQ(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *CustomerQueryBuilder) WhereVersionGT(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *CustomerQueryBuilder) WhereVersionGTE(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *CustomerQueryBuilder) WhereVersionLT(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *CustomerQueryBuilder) WhereVersionLTE(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *CustomerQueryBuilder) WhereVersionIn(v []int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereVersionNotIn(v []int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *CustomerQueryBuilder) WhereCreatedAtEQ(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *CustomerQueryBuilder) WhereCreatedAtNEQ(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *CustomerQueryBuilder) WhereCreatedAtGT(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *CustomerQueryBuilder) WhereCreatedAtGTE(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *CustomerQueryBuilder) WhereCreatedAtLT(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *CustomerQueryBuilder) WhereCreatedAtLTE(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *CustomerQueryBuilder) WhereCreatedAtIn(v []int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereCreatedAtNotIn(v []int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *CustomerQueryBuilder) WhereUpdatedAtEQ(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *CustomerQueryBuilder) WhereUpdatedAtNEQ(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *CustomerQueryBuilder) WhereUpdatedAtGT(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *CustomerQueryBuilder) WhereUpdatedAtGTE(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *CustomerQueryBuilder) WhereUpdatedAtLT(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *CustomerQueryBuilder) WhereUpdatedAtLTE(v int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *CustomerQueryBuilder) WhereUpdatedAtIn(v []int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *CustomerQueryBuilder) WhereUpdatedAtNotIn(v []int64) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *CustomerQueryBuilder) WhereTenant(orgID, buID pulid.ID) *CustomerQueryBuilder {
	b.query = CustomerQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *CustomerQueryBuilder) WhereGroup(sep string, fn func(*CustomerQueryBuilder) *CustomerQueryBuilder) *CustomerQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &CustomerQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *CustomerQueryBuilder) Where(query string, args ...interface{}) *CustomerQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *CustomerQueryBuilder) OrderBy(column string, desc ...bool) *CustomerQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(CustomerQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *CustomerQueryBuilder) Limit(n int) *CustomerQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *CustomerQueryBuilder) Offset(n int) *CustomerQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *CustomerQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *CustomerQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *CustomerQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *CustomerQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *CustomerQueryBuilder) All(ctx context.Context) ([]*Customer, error) {
	var entities []*Customer
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *CustomerQueryBuilder) AllWithCount(ctx context.Context) ([]*Customer, int, error) {
	var entities []*Customer
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *CustomerQueryBuilder) One(ctx context.Context) (*Customer, error) {
	entity := new(Customer)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *CustomerQueryBuilder) First(ctx context.Context) (*Customer, error) {
	entity := new(Customer)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// CustomerBuild creates a chainable query builder
func CustomerBuild(db bun.IDB) *CustomerQueryBuilder {
	return NewCustomerQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *CustomerQueryBuilder) LoadBusinessUnit() *CustomerQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *CustomerQueryBuilder) LoadOrganization() *CustomerQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadBillingProfile loads the BillingProfile relationship
func (b *CustomerQueryBuilder) LoadBillingProfile() *CustomerQueryBuilder {
	b.query = b.query.Relation("BillingProfile")
	return b
}

// LoadEmailProfile loads the EmailProfile relationship
func (b *CustomerQueryBuilder) LoadEmailProfile() *CustomerQueryBuilder {
	b.query = b.query.Relation("EmailProfile")
	return b
}

// LoadState loads the State relationship
func (b *CustomerQueryBuilder) LoadState() *CustomerQueryBuilder {
	b.query = b.query.Relation("State")
	return b
}

// LoadAllRelations loads all relationships for Customer
func (b *CustomerQueryBuilder) LoadAllRelations() *CustomerQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadBillingProfile()
	b.LoadEmailProfile()
	b.LoadState()
	return b
}
