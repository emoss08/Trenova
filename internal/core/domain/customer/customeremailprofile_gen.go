// Code generated by gen-trenova. DO NOT EDIT.

package customer

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// customerEmailProfileFieldConfig provides field configuration for CustomerEmailProfile
type customerEmailProfileFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// CustomerEmailProfileQuery provides type-safe query helpers and constants
var CustomerEmailProfileQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		CustomerID     string
		Subject        string
		Comment        string
		FromEmail      string
		BlindCopy      string
		AttachmentName string
		ReadReceipt    string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		SubjectEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromEmailNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromEmailGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BlindCopyNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BlindCopyGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AttachmentNameNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AttachmentNameGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReadReceiptEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ReadReceiptNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]customerEmailProfileFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "customer_email_profiles",
	Alias:    "cem",
	IDPrefix: "cem_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		CustomerID     string
		Subject        string
		Comment        string
		FromEmail      string
		BlindCopy      string
		AttachmentName string
		ReadReceipt    string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		CustomerID:     "customer_id",
		Subject:        "subject",
		Comment:        "comment",
		FromEmail:      "from_email",
		BlindCopy:      "blind_copy",
		AttachmentName: "attachment_name",
		ReadReceipt:    "read_receipt",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "cem." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "cem." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		SubjectEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SubjectGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SubjectHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromEmailNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FromEmailGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FromEmailHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BlindCopyNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BlindCopyGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BlindCopyHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AttachmentNameNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AttachmentNameGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AttachmentNameHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReadReceiptEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ReadReceiptNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                  func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.organization_id"), v)
		},
		CustomerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.customer_id"), v)
		},
		CustomerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.customer_id"), v)
		},
		SubjectEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.subject"), v)
		},
		SubjectNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.subject"), v)
		},
		SubjectIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cem.subject"), bun.In(v))
		},
		SubjectNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cem.subject"), bun.In(v))
		},
		SubjectGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cem.subject"), v)
		},
		SubjectGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cem.subject"), v)
		},
		SubjectLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cem.subject"), v)
		},
		SubjectLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cem.subject"), v)
		},
		SubjectContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.subject"), "%"+v+"%")
		},
		SubjectHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.subject"), v+"%")
		},
		SubjectHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.subject"), "%"+v)
		},
		CommentEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.comment"), v)
		},
		CommentNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.comment"), v)
		},
		CommentIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cem.comment"), bun.In(v))
		},
		CommentNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cem.comment"), bun.In(v))
		},
		CommentGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cem.comment"), v)
		},
		CommentGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cem.comment"), v)
		},
		CommentLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cem.comment"), v)
		},
		CommentLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cem.comment"), v)
		},
		CommentContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.comment"), "%"+v+"%")
		},
		CommentHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.comment"), v+"%")
		},
		CommentHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.comment"), "%"+v)
		},
		FromEmailEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.from_email"), v)
		},
		FromEmailNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.from_email"), v)
		},
		FromEmailIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cem.from_email"), bun.In(v))
		},
		FromEmailNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cem.from_email"), bun.In(v))
		},
		FromEmailGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cem.from_email"), v)
		},
		FromEmailGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cem.from_email"), v)
		},
		FromEmailLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cem.from_email"), v)
		},
		FromEmailLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cem.from_email"), v)
		},
		FromEmailContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.from_email"), "%"+v+"%")
		},
		FromEmailHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.from_email"), v+"%")
		},
		FromEmailHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.from_email"), "%"+v)
		},
		BlindCopyEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.blind_copy"), v)
		},
		BlindCopyNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.blind_copy"), v)
		},
		BlindCopyIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cem.blind_copy"), bun.In(v))
		},
		BlindCopyNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cem.blind_copy"), bun.In(v))
		},
		BlindCopyGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cem.blind_copy"), v)
		},
		BlindCopyGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cem.blind_copy"), v)
		},
		BlindCopyLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cem.blind_copy"), v)
		},
		BlindCopyLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cem.blind_copy"), v)
		},
		BlindCopyContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.blind_copy"), "%"+v+"%")
		},
		BlindCopyHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.blind_copy"), v+"%")
		},
		BlindCopyHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.blind_copy"), "%"+v)
		},
		AttachmentNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.attachment_name"), v)
		},
		AttachmentNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.attachment_name"), v)
		},
		AttachmentNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cem.attachment_name"), bun.In(v))
		},
		AttachmentNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cem.attachment_name"), bun.In(v))
		},
		AttachmentNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cem.attachment_name"), v)
		},
		AttachmentNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cem.attachment_name"), v)
		},
		AttachmentNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cem.attachment_name"), v)
		},
		AttachmentNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cem.attachment_name"), v)
		},
		AttachmentNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.attachment_name"), "%"+v+"%")
		},
		AttachmentNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.attachment_name"), v+"%")
		},
		AttachmentNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cem.attachment_name"), "%"+v)
		},
		ReadReceiptEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.read_receipt"), v)
		},
		ReadReceiptNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.read_receipt"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cem.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cem.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cem.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cem.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cem.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cem.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cem.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cem.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cem.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cem.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cem.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cem.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cem.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cem.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cem.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cem.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cem.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cem.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cem.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cem.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("cem.organization_id"), orgID).
				Where("? = ?", bun.Ident("cem.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("cem.id"), id).
				Where("? = ?", bun.Ident("cem.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "cem." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"cem.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "cem.created_at DESC"
			}
			return "cem.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "cem.updated_at DESC"
			}
			return "cem.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]customerEmailProfileFieldConfig {
		return map[string]customerEmailProfileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cem.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cem.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cem.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "cem.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"subject": {
				Name:       "subject",
				Column:     "cem.subject",
				Sortable:   false,
				Filterable: true,
			},
			"comment": {
				Name:       "comment",
				Column:     "cem.comment",
				Sortable:   false,
				Filterable: false,
			},
			"from_email": {
				Name:       "from_email",
				Column:     "cem.from_email",
				Sortable:   false,
				Filterable: true,
			},
			"blind_copy": {
				Name:       "blind_copy",
				Column:     "cem.blind_copy",
				Sortable:   false,
				Filterable: true,
			},
			"attachment_name": {
				Name:       "attachment_name",
				Column:     "cem.attachment_name",
				Sortable:   false,
				Filterable: true,
			},
			"read_receipt": {
				Name:       "read_receipt",
				Column:     "cem.read_receipt",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cem.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cem.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cem.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]customerEmailProfileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cem.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cem.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cem.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "cem.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"subject": {
				Name:       "subject",
				Column:     "cem.subject",
				Sortable:   false,
				Filterable: true,
			},
			"comment": {
				Name:       "comment",
				Column:     "cem.comment",
				Sortable:   false,
				Filterable: false,
			},
			"from_email": {
				Name:       "from_email",
				Column:     "cem.from_email",
				Sortable:   false,
				Filterable: true,
			},
			"blind_copy": {
				Name:       "blind_copy",
				Column:     "cem.blind_copy",
				Sortable:   false,
				Filterable: true,
			},
			"attachment_name": {
				Name:       "attachment_name",
				Column:     "cem.attachment_name",
				Sortable:   false,
				Filterable: true,
			},
			"read_receipt": {
				Name:       "read_receipt",
				Column:     "cem.read_receipt",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cem.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cem.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cem.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]customerEmailProfileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cem.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cem.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cem.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "cem.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"subject": {
				Name:       "subject",
				Column:     "cem.subject",
				Sortable:   false,
				Filterable: true,
			},
			"comment": {
				Name:       "comment",
				Column:     "cem.comment",
				Sortable:   false,
				Filterable: false,
			},
			"from_email": {
				Name:       "from_email",
				Column:     "cem.from_email",
				Sortable:   false,
				Filterable: true,
			},
			"blind_copy": {
				Name:       "blind_copy",
				Column:     "cem.blind_copy",
				Sortable:   false,
				Filterable: true,
			},
			"attachment_name": {
				Name:       "attachment_name",
				Column:     "cem.attachment_name",
				Sortable:   false,
				Filterable: true,
			},
			"read_receipt": {
				Name:       "read_receipt",
				Column:     "cem.read_receipt",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cem.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cem.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cem.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// CustomerEmailProfileQueryBuilder provides a fluent interface for building queries
type CustomerEmailProfileQueryBuilder struct {
	query *bun.SelectQuery
}

// NewCustomerEmailProfileQuery creates a new query builder
func NewCustomerEmailProfileQuery(db bun.IDB) *CustomerEmailProfileQueryBuilder {
	return &CustomerEmailProfileQueryBuilder{
		query: db.NewSelect().Model((*CustomerEmailProfile)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func CustomerEmailProfileFromQuery(q *bun.SelectQuery) *CustomerEmailProfileQueryBuilder {
	return &CustomerEmailProfileQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *CustomerEmailProfileQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *CustomerEmailProfileQueryBuilder) Model(model interface{}) *CustomerEmailProfileQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereIDEQ(v pulid.ID) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereIDNEQ(v pulid.ID) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereCustomerIDEQ adds a WHERE customer_id = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCustomerIDEQ(v pulid.ID) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CustomerIDEQ(b.query, v)
	return b
}

// WhereCustomerIDNEQ adds a WHERE customer_id != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCustomerIDNEQ(v pulid.ID) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CustomerIDNEQ(b.query, v)
	return b
}

// WhereSubjectEQ adds a WHERE subject = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereSubjectEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.SubjectEQ(b.query, v)
	return b
}

// WhereSubjectNEQ adds a WHERE subject != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereSubjectNEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.SubjectNEQ(b.query, v)
	return b
}

// WhereSubjectIn adds a WHERE subject IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereSubjectIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.SubjectIn(b.query, v)
	return b
}

// WhereSubjectNotIn adds a WHERE subject NOT IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereSubjectNotIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.SubjectNotIn(b.query, v)
	return b
}

// WhereSubjectContains adds a WHERE subject LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereSubjectContains(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.SubjectContains(b.query, v)
	return b
}

// WhereSubjectHasPrefix adds a WHERE subject LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereSubjectHasPrefix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.SubjectHasPrefix(b.query, v)
	return b
}

// WhereSubjectHasSuffix adds a WHERE subject LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereSubjectHasSuffix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.SubjectHasSuffix(b.query, v)
	return b
}

// WhereCommentEQ adds a WHERE comment = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCommentEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CommentEQ(b.query, v)
	return b
}

// WhereCommentNEQ adds a WHERE comment != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCommentNEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CommentNEQ(b.query, v)
	return b
}

// WhereCommentIn adds a WHERE comment IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereCommentIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CommentIn(b.query, v)
	return b
}

// WhereCommentNotIn adds a WHERE comment NOT IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereCommentNotIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CommentNotIn(b.query, v)
	return b
}

// WhereCommentContains adds a WHERE comment LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCommentContains(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CommentContains(b.query, v)
	return b
}

// WhereCommentHasPrefix adds a WHERE comment LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCommentHasPrefix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CommentHasPrefix(b.query, v)
	return b
}

// WhereCommentHasSuffix adds a WHERE comment LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCommentHasSuffix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CommentHasSuffix(b.query, v)
	return b
}

// WhereFromEmailEQ adds a WHERE from_email = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereFromEmailEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.FromEmailEQ(b.query, v)
	return b
}

// WhereFromEmailNEQ adds a WHERE from_email != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereFromEmailNEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.FromEmailNEQ(b.query, v)
	return b
}

// WhereFromEmailIn adds a WHERE from_email IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereFromEmailIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.FromEmailIn(b.query, v)
	return b
}

// WhereFromEmailNotIn adds a WHERE from_email NOT IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereFromEmailNotIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.FromEmailNotIn(b.query, v)
	return b
}

// WhereFromEmailContains adds a WHERE from_email LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereFromEmailContains(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.FromEmailContains(b.query, v)
	return b
}

// WhereFromEmailHasPrefix adds a WHERE from_email LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereFromEmailHasPrefix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.FromEmailHasPrefix(b.query, v)
	return b
}

// WhereFromEmailHasSuffix adds a WHERE from_email LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereFromEmailHasSuffix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.FromEmailHasSuffix(b.query, v)
	return b
}

// WhereBlindCopyEQ adds a WHERE blind_copy = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereBlindCopyEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.BlindCopyEQ(b.query, v)
	return b
}

// WhereBlindCopyNEQ adds a WHERE blind_copy != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereBlindCopyNEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.BlindCopyNEQ(b.query, v)
	return b
}

// WhereBlindCopyIn adds a WHERE blind_copy IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereBlindCopyIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.BlindCopyIn(b.query, v)
	return b
}

// WhereBlindCopyNotIn adds a WHERE blind_copy NOT IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereBlindCopyNotIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.BlindCopyNotIn(b.query, v)
	return b
}

// WhereBlindCopyContains adds a WHERE blind_copy LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereBlindCopyContains(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.BlindCopyContains(b.query, v)
	return b
}

// WhereBlindCopyHasPrefix adds a WHERE blind_copy LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereBlindCopyHasPrefix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.BlindCopyHasPrefix(b.query, v)
	return b
}

// WhereBlindCopyHasSuffix adds a WHERE blind_copy LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereBlindCopyHasSuffix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.BlindCopyHasSuffix(b.query, v)
	return b
}

// WhereAttachmentNameEQ adds a WHERE attachment_name = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereAttachmentNameEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.AttachmentNameEQ(b.query, v)
	return b
}

// WhereAttachmentNameNEQ adds a WHERE attachment_name != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereAttachmentNameNEQ(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.AttachmentNameNEQ(b.query, v)
	return b
}

// WhereAttachmentNameIn adds a WHERE attachment_name IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereAttachmentNameIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.AttachmentNameIn(b.query, v)
	return b
}

// WhereAttachmentNameNotIn adds a WHERE attachment_name NOT IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereAttachmentNameNotIn(v []string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.AttachmentNameNotIn(b.query, v)
	return b
}

// WhereAttachmentNameContains adds a WHERE attachment_name LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereAttachmentNameContains(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.AttachmentNameContains(b.query, v)
	return b
}

// WhereAttachmentNameHasPrefix adds a WHERE attachment_name LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereAttachmentNameHasPrefix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.AttachmentNameHasPrefix(b.query, v)
	return b
}

// WhereAttachmentNameHasSuffix adds a WHERE attachment_name LIKE ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereAttachmentNameHasSuffix(v string) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.AttachmentNameHasSuffix(b.query, v)
	return b
}

// WhereReadReceiptEQ adds a WHERE read_receipt = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereReadReceiptEQ(v bool) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.ReadReceiptEQ(b.query, v)
	return b
}

// WhereReadReceiptNEQ adds a WHERE read_receipt != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereReadReceiptNEQ(v bool) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.ReadReceiptNEQ(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereVersionEQ(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereVersionNEQ(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereVersionGT(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereVersionGTE(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereVersionLT(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereVersionLTE(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereVersionIn(v []int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereVersionNotIn(v []int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCreatedAtEQ(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCreatedAtNEQ(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCreatedAtGT(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCreatedAtGTE(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCreatedAtLT(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereCreatedAtLTE(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereCreatedAtIn(v []int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereCreatedAtNotIn(v []int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereUpdatedAtEQ(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereUpdatedAtNEQ(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereUpdatedAtGT(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereUpdatedAtGTE(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereUpdatedAtLT(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *CustomerEmailProfileQueryBuilder) WhereUpdatedAtLTE(v int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereUpdatedAtIn(v []int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *CustomerEmailProfileQueryBuilder) WhereUpdatedAtNotIn(v []int64) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *CustomerEmailProfileQueryBuilder) WhereTenant(orgID, buID pulid.ID) *CustomerEmailProfileQueryBuilder {
	b.query = CustomerEmailProfileQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *CustomerEmailProfileQueryBuilder) WhereGroup(sep string, fn func(*CustomerEmailProfileQueryBuilder) *CustomerEmailProfileQueryBuilder) *CustomerEmailProfileQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &CustomerEmailProfileQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *CustomerEmailProfileQueryBuilder) Where(query string, args ...interface{}) *CustomerEmailProfileQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *CustomerEmailProfileQueryBuilder) OrderBy(column string, desc ...bool) *CustomerEmailProfileQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(CustomerEmailProfileQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *CustomerEmailProfileQueryBuilder) Limit(n int) *CustomerEmailProfileQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *CustomerEmailProfileQueryBuilder) Offset(n int) *CustomerEmailProfileQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *CustomerEmailProfileQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *CustomerEmailProfileQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *CustomerEmailProfileQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *CustomerEmailProfileQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *CustomerEmailProfileQueryBuilder) All(ctx context.Context) ([]*CustomerEmailProfile, error) {
	var entities []*CustomerEmailProfile
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *CustomerEmailProfileQueryBuilder) AllWithCount(ctx context.Context) ([]*CustomerEmailProfile, int, error) {
	var entities []*CustomerEmailProfile
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *CustomerEmailProfileQueryBuilder) One(ctx context.Context) (*CustomerEmailProfile, error) {
	entity := new(CustomerEmailProfile)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *CustomerEmailProfileQueryBuilder) First(ctx context.Context) (*CustomerEmailProfile, error) {
	entity := new(CustomerEmailProfile)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// CustomerEmailProfileBuild creates a chainable query builder
func CustomerEmailProfileBuild(db bun.IDB) *CustomerEmailProfileQueryBuilder {
	return NewCustomerEmailProfileQuery(db)
}
