// Code generated by gen-trenova. DO NOT EDIT.

package customer

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// billingProfileDocumentTypeFieldConfig provides field configuration for BillingProfileDocumentType
type billingProfileDocumentTypeFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// BillingProfileDocumentTypeQuery provides type-safe query helpers and constants
var BillingProfileDocumentTypeQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		OrganizationID   string
		BusinessUnitID   string
		BillingProfileID string
		DocumentTypeID   string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BillingProfileIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BillingProfileIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BillingProfileIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BillingProfileIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DocumentTypeIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DocumentTypeIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DocumentTypeIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DocumentTypeIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field   func(field string, desc bool) string
		Default func() []string
	}

	// Field configuration
	FieldConfig  func() map[string]billingProfileDocumentTypeFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BillingProfile string
		DocumentType   string
	}
}{
	// Table and alias constants
	Table:    "customer_billing_profile_document_types",
	Alias:    "bpdt",
	IDPrefix: "bpdt_",

	// Field names
	Field: struct {
		OrganizationID   string
		BusinessUnitID   string
		BillingProfileID string
		DocumentTypeID   string
	}{
		OrganizationID:   "organization_id",
		BusinessUnitID:   "business_unit_id",
		BillingProfileID: "billing_profile_id",
		DocumentTypeID:   "document_type_id",
	},

	// Column helpers
	Column: func(field string) string {
		return "bpdt." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "bpdt." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BillingProfileIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BillingProfileIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BillingProfileIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BillingProfileIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DocumentTypeIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DocumentTypeIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DocumentTypeIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DocumentTypeIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		Tenant                func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bpdt.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bpdt.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bpdt.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bpdt.organization_id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bpdt.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bpdt.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bpdt.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bpdt.business_unit_id"), bun.In(v))
		},
		BillingProfileIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bpdt.billing_profile_id"), v)
		},
		BillingProfileIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bpdt.billing_profile_id"), v)
		},
		BillingProfileIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bpdt.billing_profile_id"), bun.In(v))
		},
		BillingProfileIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bpdt.billing_profile_id"), bun.In(v))
		},
		DocumentTypeIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bpdt.document_type_id"), v)
		},
		DocumentTypeIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bpdt.document_type_id"), v)
		},
		DocumentTypeIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bpdt.document_type_id"), bun.In(v))
		},
		DocumentTypeIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bpdt.document_type_id"), bun.In(v))
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("bpdt.organization_id"), orgID).
				Where("? = ?", bun.Ident("bpdt.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field   func(field string, desc bool) string
		Default func() []string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "bpdt." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"bpdt.created_at DESC",
			}
		},
	},

	// Field configuration
	FieldConfig: func() map[string]billingProfileDocumentTypeFieldConfig {
		return map[string]billingProfileDocumentTypeFieldConfig{
			"organization_id": {
				Name:       "organization_id",
				Column:     "bpdt.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "bpdt.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"billing_profile_id": {
				Name:       "billing_profile_id",
				Column:     "bpdt.billing_profile_id",
				Sortable:   false,
				Filterable: true,
			},
			"document_type_id": {
				Name:       "document_type_id",
				Column:     "bpdt.document_type_id",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]billingProfileDocumentTypeFieldConfig{
			"organization_id": {
				Name:       "organization_id",
				Column:     "bpdt.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "bpdt.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"billing_profile_id": {
				Name:       "billing_profile_id",
				Column:     "bpdt.billing_profile_id",
				Sortable:   false,
				Filterable: true,
			},
			"document_type_id": {
				Name:       "document_type_id",
				Column:     "bpdt.document_type_id",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]billingProfileDocumentTypeFieldConfig{
			"organization_id": {
				Name:       "organization_id",
				Column:     "bpdt.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "bpdt.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"billing_profile_id": {
				Name:       "billing_profile_id",
				Column:     "bpdt.billing_profile_id",
				Sortable:   false,
				Filterable: true,
			},
			"document_type_id": {
				Name:       "document_type_id",
				Column:     "bpdt.document_type_id",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BillingProfile string
		DocumentType   string
	}{
		BillingProfile: "BillingProfile",
		DocumentType:   "DocumentType",
	},
}

// BillingProfileDocumentTypeQueryBuilder provides a fluent interface for building queries
type BillingProfileDocumentTypeQueryBuilder struct {
	query *bun.SelectQuery
}

// NewBillingProfileDocumentTypeQuery creates a new query builder
func NewBillingProfileDocumentTypeQuery(db bun.IDB) *BillingProfileDocumentTypeQueryBuilder {
	return &BillingProfileDocumentTypeQueryBuilder{
		query: db.NewSelect().Model((*BillingProfileDocumentType)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func BillingProfileDocumentTypeFromQuery(q *bun.SelectQuery) *BillingProfileDocumentTypeQueryBuilder {
	return &BillingProfileDocumentTypeQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *BillingProfileDocumentTypeQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *BillingProfileDocumentTypeQueryBuilder) Model(model interface{}) *BillingProfileDocumentTypeQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereBillingProfileIDEQ adds a WHERE billing_profile_id = ? condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereBillingProfileIDEQ(v pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.BillingProfileIDEQ(b.query, v)
	return b
}

// WhereBillingProfileIDNEQ adds a WHERE billing_profile_id != ? condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereBillingProfileIDNEQ(v pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.BillingProfileIDNEQ(b.query, v)
	return b
}

// WhereBillingProfileIDIn adds a WHERE billing_profile_id IN (?) condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereBillingProfileIDIn(v []pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.BillingProfileIDIn(b.query, v)
	return b
}

// WhereBillingProfileIDNotIn adds a WHERE billing_profile_id NOT IN (?) condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereBillingProfileIDNotIn(v []pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.BillingProfileIDNotIn(b.query, v)
	return b
}

// WhereDocumentTypeIDEQ adds a WHERE document_type_id = ? condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereDocumentTypeIDEQ(v pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.DocumentTypeIDEQ(b.query, v)
	return b
}

// WhereDocumentTypeIDNEQ adds a WHERE document_type_id != ? condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereDocumentTypeIDNEQ(v pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.DocumentTypeIDNEQ(b.query, v)
	return b
}

// WhereDocumentTypeIDIn adds a WHERE document_type_id IN (?) condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereDocumentTypeIDIn(v []pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.DocumentTypeIDIn(b.query, v)
	return b
}

// WhereDocumentTypeIDNotIn adds a WHERE document_type_id NOT IN (?) condition
func (b *BillingProfileDocumentTypeQueryBuilder) WhereDocumentTypeIDNotIn(v []pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.DocumentTypeIDNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *BillingProfileDocumentTypeQueryBuilder) WhereTenant(orgID, buID pulid.ID) *BillingProfileDocumentTypeQueryBuilder {
	b.query = BillingProfileDocumentTypeQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *BillingProfileDocumentTypeQueryBuilder) WhereGroup(sep string, fn func(*BillingProfileDocumentTypeQueryBuilder) *BillingProfileDocumentTypeQueryBuilder) *BillingProfileDocumentTypeQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &BillingProfileDocumentTypeQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *BillingProfileDocumentTypeQueryBuilder) Where(query string, args ...interface{}) *BillingProfileDocumentTypeQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *BillingProfileDocumentTypeQueryBuilder) OrderBy(column string, desc ...bool) *BillingProfileDocumentTypeQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(BillingProfileDocumentTypeQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *BillingProfileDocumentTypeQueryBuilder) Limit(n int) *BillingProfileDocumentTypeQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *BillingProfileDocumentTypeQueryBuilder) Offset(n int) *BillingProfileDocumentTypeQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *BillingProfileDocumentTypeQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *BillingProfileDocumentTypeQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *BillingProfileDocumentTypeQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *BillingProfileDocumentTypeQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *BillingProfileDocumentTypeQueryBuilder) All(ctx context.Context) ([]*BillingProfileDocumentType, error) {
	var entities []*BillingProfileDocumentType
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *BillingProfileDocumentTypeQueryBuilder) AllWithCount(ctx context.Context) ([]*BillingProfileDocumentType, int, error) {
	var entities []*BillingProfileDocumentType
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *BillingProfileDocumentTypeQueryBuilder) One(ctx context.Context) (*BillingProfileDocumentType, error) {
	entity := new(BillingProfileDocumentType)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *BillingProfileDocumentTypeQueryBuilder) First(ctx context.Context) (*BillingProfileDocumentType, error) {
	entity := new(BillingProfileDocumentType)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// BillingProfileDocumentTypeBuild creates a chainable query builder
func BillingProfileDocumentTypeBuild(db bun.IDB) *BillingProfileDocumentTypeQueryBuilder {
	return NewBillingProfileDocumentTypeQuery(db)
}

// Relationship loading methods

// LoadBillingProfile loads the BillingProfile relationship
func (b *BillingProfileDocumentTypeQueryBuilder) LoadBillingProfile() *BillingProfileDocumentTypeQueryBuilder {
	b.query = b.query.Relation("BillingProfile")
	return b
}

// LoadDocumentType loads the DocumentType relationship
func (b *BillingProfileDocumentTypeQueryBuilder) LoadDocumentType() *BillingProfileDocumentTypeQueryBuilder {
	b.query = b.query.Relation("DocumentType")
	return b
}

// LoadAllRelations loads all relationships for BillingProfileDocumentType
func (b *BillingProfileDocumentTypeQueryBuilder) LoadAllRelations() *BillingProfileDocumentTypeQueryBuilder {
	b.LoadBillingProfile()
	b.LoadDocumentType()
	return b
}

// BillingProfileDocumentTypeRelationChain provides a fluent API for building nested relationship chains
type BillingProfileDocumentTypeRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewBillingProfileDocumentTypeRelationChain creates a new relation chain builder
func NewBillingProfileDocumentTypeRelationChain() *BillingProfileDocumentTypeRelationChain {
	return &BillingProfileDocumentTypeRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *BillingProfileDocumentTypeRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *BillingProfileDocumentTypeRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *BillingProfileDocumentTypeRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *BillingProfileDocumentTypeRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBillingProfile creates a relation chain starting with BillingProfile
func (b *BillingProfileDocumentTypeQueryBuilder) WithBillingProfile() *BillingProfileDocumentTypeRelationChainBuilder {
	chain := &BillingProfileDocumentTypeRelationChainBuilder{
		parent: b,
		chain:  NewBillingProfileDocumentTypeRelationChain(),
	}
	chain.chain.Add("BillingProfile")
	return chain
}

// WithDocumentType creates a relation chain starting with DocumentType
func (b *BillingProfileDocumentTypeQueryBuilder) WithDocumentType() *BillingProfileDocumentTypeRelationChainBuilder {
	chain := &BillingProfileDocumentTypeRelationChainBuilder{
		parent: b,
		chain:  NewBillingProfileDocumentTypeRelationChain(),
	}
	chain.chain.Add("DocumentType")
	return chain
}

// BillingProfileDocumentTypeRelationChainBuilder provides fluent API for building nested relations
type BillingProfileDocumentTypeRelationChainBuilder struct {
	parent *BillingProfileDocumentTypeQueryBuilder
	chain  *BillingProfileDocumentTypeRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *BillingProfileDocumentTypeRelationChainBuilder) Load() *BillingProfileDocumentTypeQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *BillingProfileDocumentTypeRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *BillingProfileDocumentTypeRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *BillingProfileDocumentTypeRelationChainBuilder) OrderBy(order string) *BillingProfileDocumentTypeRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *BillingProfileDocumentTypeRelationChainBuilder) Where(condition string, args ...interface{}) *BillingProfileDocumentTypeRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
