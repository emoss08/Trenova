/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package customer

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain/billing"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// billingProfileFieldConfig provides field configuration for BillingProfile
type billingProfileFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// BillingProfileQuery provides type-safe query helpers and constants
var BillingProfileQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                        string
		BusinessUnitID            string
		OrganizationID            string
		CustomerID                string
		BillingCycleType          string
		PaymentTerm               string
		HasOverrides              string
		EnforceCustomerBillingReq string
		ValidateCustomerRates     string
		AutoTransfer              string
		AutoMarkReadyToBill       string
		AutoBill                  string
		Version                   string
		CreatedAt                 string
		UpdatedAt                 string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDNotIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BillingCycleTypeEQ             func(q *bun.SelectQuery, v BillingCycleType) *bun.SelectQuery
		BillingCycleTypeNEQ            func(q *bun.SelectQuery, v BillingCycleType) *bun.SelectQuery
		BillingCycleTypeIn             func(q *bun.SelectQuery, v []BillingCycleType) *bun.SelectQuery
		BillingCycleTypeNotIn          func(q *bun.SelectQuery, v []BillingCycleType) *bun.SelectQuery
		PaymentTermEQ                  func(q *bun.SelectQuery, v billing.PaymentTerm) *bun.SelectQuery
		PaymentTermNEQ                 func(q *bun.SelectQuery, v billing.PaymentTerm) *bun.SelectQuery
		PaymentTermIn                  func(q *bun.SelectQuery, v []billing.PaymentTerm) *bun.SelectQuery
		PaymentTermNotIn               func(q *bun.SelectQuery, v []billing.PaymentTerm) *bun.SelectQuery
		HasOverridesEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasOverridesNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasOverridesIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasOverridesNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceCustomerBillingReqEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceCustomerBillingReqNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceCustomerBillingReqIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceCustomerBillingReqNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ValidateCustomerRatesEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ValidateCustomerRatesNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ValidateCustomerRatesIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ValidateCustomerRatesNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoTransferEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoTransferNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoTransferIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoTransferNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoMarkReadyToBillEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoMarkReadyToBillNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoMarkReadyToBillIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoMarkReadyToBillNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoBillEQ                     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoBillNEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoBillIn                     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoBillNotIn                  func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]billingProfileFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
	}
}{
	// Table and alias constants
	Table:    "customer_billing_profiles",
	Alias:    "cbr",
	IDPrefix: "cbr_",

	// Field names
	Field: struct {
		ID                        string
		BusinessUnitID            string
		OrganizationID            string
		CustomerID                string
		BillingCycleType          string
		PaymentTerm               string
		HasOverrides              string
		EnforceCustomerBillingReq string
		ValidateCustomerRates     string
		AutoTransfer              string
		AutoMarkReadyToBill       string
		AutoBill                  string
		Version                   string
		CreatedAt                 string
		UpdatedAt                 string
	}{
		ID:                        "id",
		BusinessUnitID:            "business_unit_id",
		OrganizationID:            "organization_id",
		CustomerID:                "customer_id",
		BillingCycleType:          "billing_cycle_type",
		PaymentTerm:               "payment_term",
		HasOverrides:              "has_overrides",
		EnforceCustomerBillingReq: "enforce_customer_billing_req",
		ValidateCustomerRates:     "validate_customer_rates",
		AutoTransfer:              "auto_transfer",
		AutoMarkReadyToBill:       "auto_mark_ready_to_bill",
		AutoBill:                  "auto_bill",
		Version:                   "version",
		CreatedAt:                 "created_at",
		UpdatedAt:                 "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "cbr." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "cbr." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDNotIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BillingCycleTypeEQ             func(q *bun.SelectQuery, v BillingCycleType) *bun.SelectQuery
		BillingCycleTypeNEQ            func(q *bun.SelectQuery, v BillingCycleType) *bun.SelectQuery
		BillingCycleTypeIn             func(q *bun.SelectQuery, v []BillingCycleType) *bun.SelectQuery
		BillingCycleTypeNotIn          func(q *bun.SelectQuery, v []BillingCycleType) *bun.SelectQuery
		PaymentTermEQ                  func(q *bun.SelectQuery, v billing.PaymentTerm) *bun.SelectQuery
		PaymentTermNEQ                 func(q *bun.SelectQuery, v billing.PaymentTerm) *bun.SelectQuery
		PaymentTermIn                  func(q *bun.SelectQuery, v []billing.PaymentTerm) *bun.SelectQuery
		PaymentTermNotIn               func(q *bun.SelectQuery, v []billing.PaymentTerm) *bun.SelectQuery
		HasOverridesEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasOverridesNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasOverridesIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasOverridesNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceCustomerBillingReqEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceCustomerBillingReqNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnforceCustomerBillingReqIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnforceCustomerBillingReqNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ValidateCustomerRatesEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ValidateCustomerRatesNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		ValidateCustomerRatesIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ValidateCustomerRatesNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoTransferEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoTransferNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoTransferIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoTransferNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoMarkReadyToBillEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoMarkReadyToBillNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoMarkReadyToBillIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoMarkReadyToBillNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoBillEQ                     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoBillNEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoBillIn                     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoBillNotIn                  func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                         func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.organization_id"), bun.In(v))
		},
		CustomerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.customer_id"), v)
		},
		CustomerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.customer_id"), v)
		},
		CustomerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.customer_id"), bun.In(v))
		},
		CustomerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.customer_id"), bun.In(v))
		},
		BillingCycleTypeEQ: func(q *bun.SelectQuery, v BillingCycleType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.billing_cycle_type"), v)
		},
		BillingCycleTypeNEQ: func(q *bun.SelectQuery, v BillingCycleType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.billing_cycle_type"), v)
		},
		BillingCycleTypeIn: func(q *bun.SelectQuery, v []BillingCycleType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.billing_cycle_type"), bun.In(v))
		},
		BillingCycleTypeNotIn: func(q *bun.SelectQuery, v []BillingCycleType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.billing_cycle_type"), bun.In(v))
		},
		PaymentTermEQ: func(q *bun.SelectQuery, v billing.PaymentTerm) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.payment_term"), v)
		},
		PaymentTermNEQ: func(q *bun.SelectQuery, v billing.PaymentTerm) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.payment_term"), v)
		},
		PaymentTermIn: func(q *bun.SelectQuery, v []billing.PaymentTerm) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.payment_term"), bun.In(v))
		},
		PaymentTermNotIn: func(q *bun.SelectQuery, v []billing.PaymentTerm) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.payment_term"), bun.In(v))
		},
		HasOverridesEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.has_overrides"), v)
		},
		HasOverridesNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.has_overrides"), v)
		},
		HasOverridesIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.has_overrides"), bun.In(v))
		},
		HasOverridesNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.has_overrides"), bun.In(v))
		},
		EnforceCustomerBillingReqEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.enforce_customer_billing_req"), v)
		},
		EnforceCustomerBillingReqNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.enforce_customer_billing_req"), v)
		},
		EnforceCustomerBillingReqIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.enforce_customer_billing_req"), bun.In(v))
		},
		EnforceCustomerBillingReqNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.enforce_customer_billing_req"), bun.In(v))
		},
		ValidateCustomerRatesEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.validate_customer_rates"), v)
		},
		ValidateCustomerRatesNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.validate_customer_rates"), v)
		},
		ValidateCustomerRatesIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.validate_customer_rates"), bun.In(v))
		},
		ValidateCustomerRatesNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.validate_customer_rates"), bun.In(v))
		},
		AutoTransferEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.auto_transfer"), v)
		},
		AutoTransferNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.auto_transfer"), v)
		},
		AutoTransferIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.auto_transfer"), bun.In(v))
		},
		AutoTransferNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.auto_transfer"), bun.In(v))
		},
		AutoMarkReadyToBillEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.auto_mark_ready_to_bill"), v)
		},
		AutoMarkReadyToBillNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.auto_mark_ready_to_bill"), v)
		},
		AutoMarkReadyToBillIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.auto_mark_ready_to_bill"), bun.In(v))
		},
		AutoMarkReadyToBillNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.auto_mark_ready_to_bill"), bun.In(v))
		},
		AutoBillEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.auto_bill"), v)
		},
		AutoBillNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.auto_bill"), v)
		},
		AutoBillIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.auto_bill"), bun.In(v))
		},
		AutoBillNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.auto_bill"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cbr.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cbr.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cbr.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cbr.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cbr.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cbr.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cbr.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cbr.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cbr.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cbr.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cbr.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cbr.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cbr.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cbr.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cbr.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cbr.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("cbr.organization_id"), orgID).
				Where("? = ?", bun.Ident("cbr.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("cbr.id"), id).
				Where("? = ?", bun.Ident("cbr.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "cbr." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"cbr.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "cbr.created_at DESC"
			}
			return "cbr.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "cbr.updated_at DESC"
			}
			return "cbr.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]billingProfileFieldConfig {
		return map[string]billingProfileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cbr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cbr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cbr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "cbr.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"billing_cycle_type": {
				Name:       "billing_cycle_type",
				Column:     "cbr.billing_cycle_type",
				Sortable:   false,
				Filterable: false,
			},
			"payment_term": {
				Name:       "payment_term",
				Column:     "cbr.payment_term",
				Sortable:   false,
				Filterable: false,
			},
			"has_overrides": {
				Name:       "has_overrides",
				Column:     "cbr.has_overrides",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_customer_billing_req": {
				Name:       "enforce_customer_billing_req",
				Column:     "cbr.enforce_customer_billing_req",
				Sortable:   false,
				Filterable: false,
			},
			"validate_customer_rates": {
				Name:       "validate_customer_rates",
				Column:     "cbr.validate_customer_rates",
				Sortable:   false,
				Filterable: false,
			},
			"auto_transfer": {
				Name:       "auto_transfer",
				Column:     "cbr.auto_transfer",
				Sortable:   false,
				Filterable: false,
			},
			"auto_mark_ready_to_bill": {
				Name:       "auto_mark_ready_to_bill",
				Column:     "cbr.auto_mark_ready_to_bill",
				Sortable:   false,
				Filterable: false,
			},
			"auto_bill": {
				Name:       "auto_bill",
				Column:     "cbr.auto_bill",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cbr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cbr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cbr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]billingProfileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cbr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cbr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cbr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "cbr.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"billing_cycle_type": {
				Name:       "billing_cycle_type",
				Column:     "cbr.billing_cycle_type",
				Sortable:   false,
				Filterable: false,
			},
			"payment_term": {
				Name:       "payment_term",
				Column:     "cbr.payment_term",
				Sortable:   false,
				Filterable: false,
			},
			"has_overrides": {
				Name:       "has_overrides",
				Column:     "cbr.has_overrides",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_customer_billing_req": {
				Name:       "enforce_customer_billing_req",
				Column:     "cbr.enforce_customer_billing_req",
				Sortable:   false,
				Filterable: false,
			},
			"validate_customer_rates": {
				Name:       "validate_customer_rates",
				Column:     "cbr.validate_customer_rates",
				Sortable:   false,
				Filterable: false,
			},
			"auto_transfer": {
				Name:       "auto_transfer",
				Column:     "cbr.auto_transfer",
				Sortable:   false,
				Filterable: false,
			},
			"auto_mark_ready_to_bill": {
				Name:       "auto_mark_ready_to_bill",
				Column:     "cbr.auto_mark_ready_to_bill",
				Sortable:   false,
				Filterable: false,
			},
			"auto_bill": {
				Name:       "auto_bill",
				Column:     "cbr.auto_bill",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cbr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cbr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cbr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]billingProfileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cbr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cbr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cbr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "cbr.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"billing_cycle_type": {
				Name:       "billing_cycle_type",
				Column:     "cbr.billing_cycle_type",
				Sortable:   false,
				Filterable: false,
			},
			"payment_term": {
				Name:       "payment_term",
				Column:     "cbr.payment_term",
				Sortable:   false,
				Filterable: false,
			},
			"has_overrides": {
				Name:       "has_overrides",
				Column:     "cbr.has_overrides",
				Sortable:   false,
				Filterable: false,
			},
			"enforce_customer_billing_req": {
				Name:       "enforce_customer_billing_req",
				Column:     "cbr.enforce_customer_billing_req",
				Sortable:   false,
				Filterable: false,
			},
			"validate_customer_rates": {
				Name:       "validate_customer_rates",
				Column:     "cbr.validate_customer_rates",
				Sortable:   false,
				Filterable: false,
			},
			"auto_transfer": {
				Name:       "auto_transfer",
				Column:     "cbr.auto_transfer",
				Sortable:   false,
				Filterable: false,
			},
			"auto_mark_ready_to_bill": {
				Name:       "auto_mark_ready_to_bill",
				Column:     "cbr.auto_mark_ready_to_bill",
				Sortable:   false,
				Filterable: false,
			},
			"auto_bill": {
				Name:       "auto_bill",
				Column:     "cbr.auto_bill",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cbr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cbr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cbr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
	},
}

// BillingProfileQueryBuilder provides a fluent interface for building queries
type BillingProfileQueryBuilder struct {
	query *bun.SelectQuery
}

// NewBillingProfileQuery creates a new query builder
func NewBillingProfileQuery(db bun.IDB) *BillingProfileQueryBuilder {
	return &BillingProfileQueryBuilder{
		query: db.NewSelect().Model((*BillingProfile)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func BillingProfileFromQuery(q *bun.SelectQuery) *BillingProfileQueryBuilder {
	return &BillingProfileQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *BillingProfileQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *BillingProfileQueryBuilder) Model(model interface{}) *BillingProfileQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *BillingProfileQueryBuilder) WhereIDEQ(v pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *BillingProfileQueryBuilder) WhereIDNEQ(v pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *BillingProfileQueryBuilder) WhereIDIn(v []pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereIDNotIn(v []pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *BillingProfileQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *BillingProfileQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *BillingProfileQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *BillingProfileQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *BillingProfileQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *BillingProfileQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereCustomerIDEQ adds a WHERE customer_id = ? condition
func (b *BillingProfileQueryBuilder) WhereCustomerIDEQ(v pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CustomerIDEQ(b.query, v)
	return b
}

// WhereCustomerIDNEQ adds a WHERE customer_id != ? condition
func (b *BillingProfileQueryBuilder) WhereCustomerIDNEQ(v pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CustomerIDNEQ(b.query, v)
	return b
}

// WhereCustomerIDIn adds a WHERE customer_id IN (?) condition
func (b *BillingProfileQueryBuilder) WhereCustomerIDIn(v []pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CustomerIDIn(b.query, v)
	return b
}

// WhereCustomerIDNotIn adds a WHERE customer_id NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereCustomerIDNotIn(v []pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CustomerIDNotIn(b.query, v)
	return b
}

// WhereBillingCycleTypeEQ adds a WHERE billing_cycle_type = ? condition
func (b *BillingProfileQueryBuilder) WhereBillingCycleTypeEQ(v BillingCycleType) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.BillingCycleTypeEQ(b.query, v)
	return b
}

// WhereBillingCycleTypeNEQ adds a WHERE billing_cycle_type != ? condition
func (b *BillingProfileQueryBuilder) WhereBillingCycleTypeNEQ(v BillingCycleType) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.BillingCycleTypeNEQ(b.query, v)
	return b
}

// WhereBillingCycleTypeIn adds a WHERE billing_cycle_type IN (?) condition
func (b *BillingProfileQueryBuilder) WhereBillingCycleTypeIn(v []BillingCycleType) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.BillingCycleTypeIn(b.query, v)
	return b
}

// WhereBillingCycleTypeNotIn adds a WHERE billing_cycle_type NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereBillingCycleTypeNotIn(v []BillingCycleType) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.BillingCycleTypeNotIn(b.query, v)
	return b
}

// WherePaymentTermEQ adds a WHERE payment_term = ? condition
func (b *BillingProfileQueryBuilder) WherePaymentTermEQ(v billing.PaymentTerm) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.PaymentTermEQ(b.query, v)
	return b
}

// WherePaymentTermNEQ adds a WHERE payment_term != ? condition
func (b *BillingProfileQueryBuilder) WherePaymentTermNEQ(v billing.PaymentTerm) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.PaymentTermNEQ(b.query, v)
	return b
}

// WherePaymentTermIn adds a WHERE payment_term IN (?) condition
func (b *BillingProfileQueryBuilder) WherePaymentTermIn(v []billing.PaymentTerm) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.PaymentTermIn(b.query, v)
	return b
}

// WherePaymentTermNotIn adds a WHERE payment_term NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WherePaymentTermNotIn(v []billing.PaymentTerm) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.PaymentTermNotIn(b.query, v)
	return b
}

// WhereHasOverridesEQ adds a WHERE has_overrides = ? condition
func (b *BillingProfileQueryBuilder) WhereHasOverridesEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.HasOverridesEQ(b.query, v)
	return b
}

// WhereHasOverridesNEQ adds a WHERE has_overrides != ? condition
func (b *BillingProfileQueryBuilder) WhereHasOverridesNEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.HasOverridesNEQ(b.query, v)
	return b
}

// WhereHasOverridesIn adds a WHERE has_overrides IN (?) condition
func (b *BillingProfileQueryBuilder) WhereHasOverridesIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.HasOverridesIn(b.query, v)
	return b
}

// WhereHasOverridesNotIn adds a WHERE has_overrides NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereHasOverridesNotIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.HasOverridesNotIn(b.query, v)
	return b
}

// WhereEnforceCustomerBillingReqEQ adds a WHERE enforce_customer_billing_req = ? condition
func (b *BillingProfileQueryBuilder) WhereEnforceCustomerBillingReqEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.EnforceCustomerBillingReqEQ(b.query, v)
	return b
}

// WhereEnforceCustomerBillingReqNEQ adds a WHERE enforce_customer_billing_req != ? condition
func (b *BillingProfileQueryBuilder) WhereEnforceCustomerBillingReqNEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.EnforceCustomerBillingReqNEQ(b.query, v)
	return b
}

// WhereEnforceCustomerBillingReqIn adds a WHERE enforce_customer_billing_req IN (?) condition
func (b *BillingProfileQueryBuilder) WhereEnforceCustomerBillingReqIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.EnforceCustomerBillingReqIn(b.query, v)
	return b
}

// WhereEnforceCustomerBillingReqNotIn adds a WHERE enforce_customer_billing_req NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereEnforceCustomerBillingReqNotIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.EnforceCustomerBillingReqNotIn(b.query, v)
	return b
}

// WhereValidateCustomerRatesEQ adds a WHERE validate_customer_rates = ? condition
func (b *BillingProfileQueryBuilder) WhereValidateCustomerRatesEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.ValidateCustomerRatesEQ(b.query, v)
	return b
}

// WhereValidateCustomerRatesNEQ adds a WHERE validate_customer_rates != ? condition
func (b *BillingProfileQueryBuilder) WhereValidateCustomerRatesNEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.ValidateCustomerRatesNEQ(b.query, v)
	return b
}

// WhereValidateCustomerRatesIn adds a WHERE validate_customer_rates IN (?) condition
func (b *BillingProfileQueryBuilder) WhereValidateCustomerRatesIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.ValidateCustomerRatesIn(b.query, v)
	return b
}

// WhereValidateCustomerRatesNotIn adds a WHERE validate_customer_rates NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereValidateCustomerRatesNotIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.ValidateCustomerRatesNotIn(b.query, v)
	return b
}

// WhereAutoTransferEQ adds a WHERE auto_transfer = ? condition
func (b *BillingProfileQueryBuilder) WhereAutoTransferEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoTransferEQ(b.query, v)
	return b
}

// WhereAutoTransferNEQ adds a WHERE auto_transfer != ? condition
func (b *BillingProfileQueryBuilder) WhereAutoTransferNEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoTransferNEQ(b.query, v)
	return b
}

// WhereAutoTransferIn adds a WHERE auto_transfer IN (?) condition
func (b *BillingProfileQueryBuilder) WhereAutoTransferIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoTransferIn(b.query, v)
	return b
}

// WhereAutoTransferNotIn adds a WHERE auto_transfer NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereAutoTransferNotIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoTransferNotIn(b.query, v)
	return b
}

// WhereAutoMarkReadyToBillEQ adds a WHERE auto_mark_ready_to_bill = ? condition
func (b *BillingProfileQueryBuilder) WhereAutoMarkReadyToBillEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoMarkReadyToBillEQ(b.query, v)
	return b
}

// WhereAutoMarkReadyToBillNEQ adds a WHERE auto_mark_ready_to_bill != ? condition
func (b *BillingProfileQueryBuilder) WhereAutoMarkReadyToBillNEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoMarkReadyToBillNEQ(b.query, v)
	return b
}

// WhereAutoMarkReadyToBillIn adds a WHERE auto_mark_ready_to_bill IN (?) condition
func (b *BillingProfileQueryBuilder) WhereAutoMarkReadyToBillIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoMarkReadyToBillIn(b.query, v)
	return b
}

// WhereAutoMarkReadyToBillNotIn adds a WHERE auto_mark_ready_to_bill NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereAutoMarkReadyToBillNotIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoMarkReadyToBillNotIn(b.query, v)
	return b
}

// WhereAutoBillEQ adds a WHERE auto_bill = ? condition
func (b *BillingProfileQueryBuilder) WhereAutoBillEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoBillEQ(b.query, v)
	return b
}

// WhereAutoBillNEQ adds a WHERE auto_bill != ? condition
func (b *BillingProfileQueryBuilder) WhereAutoBillNEQ(v bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoBillNEQ(b.query, v)
	return b
}

// WhereAutoBillIn adds a WHERE auto_bill IN (?) condition
func (b *BillingProfileQueryBuilder) WhereAutoBillIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoBillIn(b.query, v)
	return b
}

// WhereAutoBillNotIn adds a WHERE auto_bill NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereAutoBillNotIn(v []bool) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.AutoBillNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *BillingProfileQueryBuilder) WhereVersionEQ(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *BillingProfileQueryBuilder) WhereVersionNEQ(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *BillingProfileQueryBuilder) WhereVersionGT(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *BillingProfileQueryBuilder) WhereVersionGTE(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *BillingProfileQueryBuilder) WhereVersionLT(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *BillingProfileQueryBuilder) WhereVersionLTE(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *BillingProfileQueryBuilder) WhereVersionIn(v []int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereVersionNotIn(v []int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *BillingProfileQueryBuilder) WhereCreatedAtEQ(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *BillingProfileQueryBuilder) WhereCreatedAtNEQ(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *BillingProfileQueryBuilder) WhereCreatedAtGT(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *BillingProfileQueryBuilder) WhereCreatedAtGTE(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *BillingProfileQueryBuilder) WhereCreatedAtLT(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *BillingProfileQueryBuilder) WhereCreatedAtLTE(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *BillingProfileQueryBuilder) WhereCreatedAtIn(v []int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereCreatedAtNotIn(v []int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *BillingProfileQueryBuilder) WhereUpdatedAtEQ(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *BillingProfileQueryBuilder) WhereUpdatedAtNEQ(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *BillingProfileQueryBuilder) WhereUpdatedAtGT(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *BillingProfileQueryBuilder) WhereUpdatedAtGTE(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *BillingProfileQueryBuilder) WhereUpdatedAtLT(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *BillingProfileQueryBuilder) WhereUpdatedAtLTE(v int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *BillingProfileQueryBuilder) WhereUpdatedAtIn(v []int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *BillingProfileQueryBuilder) WhereUpdatedAtNotIn(v []int64) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *BillingProfileQueryBuilder) WhereTenant(orgID, buID pulid.ID) *BillingProfileQueryBuilder {
	b.query = BillingProfileQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *BillingProfileQueryBuilder) WhereGroup(sep string, fn func(*BillingProfileQueryBuilder) *BillingProfileQueryBuilder) *BillingProfileQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &BillingProfileQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *BillingProfileQueryBuilder) Where(query string, args ...interface{}) *BillingProfileQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *BillingProfileQueryBuilder) OrderBy(column string, desc ...bool) *BillingProfileQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(BillingProfileQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *BillingProfileQueryBuilder) Limit(n int) *BillingProfileQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *BillingProfileQueryBuilder) Offset(n int) *BillingProfileQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *BillingProfileQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *BillingProfileQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *BillingProfileQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *BillingProfileQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *BillingProfileQueryBuilder) All(ctx context.Context) ([]*BillingProfile, error) {
	var entities []*BillingProfile
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *BillingProfileQueryBuilder) AllWithCount(ctx context.Context) ([]*BillingProfile, int, error) {
	var entities []*BillingProfile
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *BillingProfileQueryBuilder) One(ctx context.Context) (*BillingProfile, error) {
	entity := new(BillingProfile)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *BillingProfileQueryBuilder) First(ctx context.Context) (*BillingProfile, error) {
	entity := new(BillingProfile)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// BillingProfileBuild creates a chainable query builder
func BillingProfileBuild(db bun.IDB) *BillingProfileQueryBuilder {
	return NewBillingProfileQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *BillingProfileQueryBuilder) LoadBusinessUnit() *BillingProfileQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *BillingProfileQueryBuilder) LoadOrganization() *BillingProfileQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for BillingProfile
func (b *BillingProfileQueryBuilder) LoadAllRelations() *BillingProfileQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	return b
}
