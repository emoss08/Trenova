// Code generated by gen-trenova. DO NOT EDIT.

package hazardousmaterial

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// hazardousMaterialFieldConfig provides field configuration for HazardousMaterial
type hazardousMaterialFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// HazardousMaterialQuery provides type-safe query helpers and constants
var HazardousMaterialQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                          string
		BusinessUnitID              string
		OrganizationID              string
		Status                      string
		Code                        string
		Name                        string
		Description                 string
		Class                       string
		UNNumber                    string
		CASNumber                   string
		PackingGroup                string
		ProperShippingName          string
		HandlingInstructions        string
		EmergencyContact            string
		EmergencyContactPhoneNumber string
		SearchVector                string
		Rank                        string
		PlacardRequired             string
		IsReportableQuantity        string
		Version                     string
		CreatedAt                   string
		UpdatedAt                   string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                             func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                            func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                             func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                          func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CodeEQ                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ClassEQ                              func(q *bun.SelectQuery, v HazardousClass) *bun.SelectQuery
		ClassNEQ                             func(q *bun.SelectQuery, v HazardousClass) *bun.SelectQuery
		ClassIn                              func(q *bun.SelectQuery, v []HazardousClass) *bun.SelectQuery
		ClassNotIn                           func(q *bun.SelectQuery, v []HazardousClass) *bun.SelectQuery
		UNNumberEQ                           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberNEQ                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberIn                           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UNNumberNotIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UNNumberGT                           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberGTE                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberLT                           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberLTE                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberContains                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberHasPrefix                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberHasSuffix                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberEQ                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberNEQ                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberIn                          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CASNumberNotIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CASNumberGT                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberGTE                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberLT                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberLTE                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberContains                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberHasPrefix                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberHasSuffix                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PackingGroupEQ                       func(q *bun.SelectQuery, v PackingGroup) *bun.SelectQuery
		PackingGroupNEQ                      func(q *bun.SelectQuery, v PackingGroup) *bun.SelectQuery
		PackingGroupIn                       func(q *bun.SelectQuery, v []PackingGroup) *bun.SelectQuery
		PackingGroupNotIn                    func(q *bun.SelectQuery, v []PackingGroup) *bun.SelectQuery
		ProperShippingNameEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProperShippingNameNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProperShippingNameGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HandlingInstructionsNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HandlingInstructionsGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmergencyContactNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmergencyContactGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmergencyContactPhoneNumberNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmergencyContactPhoneNumberGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlacardRequiredEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		PlacardRequiredNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		PlacardRequiredIn                    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		PlacardRequiredNotIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsReportableQuantityEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsReportableQuantityNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsReportableQuantityIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsReportableQuantityNotIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]hazardousMaterialFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
	}
}{
	// Table and alias constants
	Table:    "hazardous_materials",
	Alias:    "hm",
	IDPrefix: "hm_",

	// Field names
	Field: struct {
		ID                          string
		BusinessUnitID              string
		OrganizationID              string
		Status                      string
		Code                        string
		Name                        string
		Description                 string
		Class                       string
		UNNumber                    string
		CASNumber                   string
		PackingGroup                string
		ProperShippingName          string
		HandlingInstructions        string
		EmergencyContact            string
		EmergencyContactPhoneNumber string
		SearchVector                string
		Rank                        string
		PlacardRequired             string
		IsReportableQuantity        string
		Version                     string
		CreatedAt                   string
		UpdatedAt                   string
	}{
		ID:                          "id",
		BusinessUnitID:              "business_unit_id",
		OrganizationID:              "organization_id",
		Status:                      "status",
		Code:                        "code",
		Name:                        "name",
		Description:                 "description",
		Class:                       "class",
		UNNumber:                    "un_number",
		CASNumber:                   "cas_number",
		PackingGroup:                "packing_group",
		ProperShippingName:          "proper_shipping_name",
		HandlingInstructions:        "handling_instructions",
		EmergencyContact:            "emergency_contact",
		EmergencyContactPhoneNumber: "emergency_contact_phone_number",
		SearchVector:                "search_vector",
		Rank:                        "rank",
		PlacardRequired:             "placard_required",
		IsReportableQuantity:        "is_reportable_quantity",
		Version:                     "version",
		CreatedAt:                   "created_at",
		UpdatedAt:                   "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "hm." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "hm." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                             func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                            func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                             func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                          func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CodeEQ                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ClassEQ                              func(q *bun.SelectQuery, v HazardousClass) *bun.SelectQuery
		ClassNEQ                             func(q *bun.SelectQuery, v HazardousClass) *bun.SelectQuery
		ClassIn                              func(q *bun.SelectQuery, v []HazardousClass) *bun.SelectQuery
		ClassNotIn                           func(q *bun.SelectQuery, v []HazardousClass) *bun.SelectQuery
		UNNumberEQ                           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberNEQ                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberIn                           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UNNumberNotIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UNNumberGT                           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberGTE                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberLT                           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberLTE                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberContains                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberHasPrefix                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UNNumberHasSuffix                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberEQ                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberNEQ                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberIn                          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CASNumberNotIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CASNumberGT                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberGTE                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberLT                          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberLTE                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberContains                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberHasPrefix                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CASNumberHasSuffix                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PackingGroupEQ                       func(q *bun.SelectQuery, v PackingGroup) *bun.SelectQuery
		PackingGroupNEQ                      func(q *bun.SelectQuery, v PackingGroup) *bun.SelectQuery
		PackingGroupIn                       func(q *bun.SelectQuery, v []PackingGroup) *bun.SelectQuery
		PackingGroupNotIn                    func(q *bun.SelectQuery, v []PackingGroup) *bun.SelectQuery
		ProperShippingNameEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProperShippingNameNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProperShippingNameGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProperShippingNameHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HandlingInstructionsNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		HandlingInstructionsGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HandlingInstructionsHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmergencyContactNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmergencyContactGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmergencyContactPhoneNumberNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmergencyContactPhoneNumberGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmergencyContactPhoneNumberHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PlacardRequiredEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		PlacardRequiredNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		PlacardRequiredIn                    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		PlacardRequiredNotIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsReportableQuantityEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsReportableQuantityNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsReportableQuantityIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsReportableQuantityNotIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                               func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.organization_id"), bun.In(v))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.status"), bun.In(v))
		},
		CodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.code"), v)
		},
		CodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.code"), v)
		},
		CodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.code"), bun.In(v))
		},
		CodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.code"), bun.In(v))
		},
		CodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.code"), v)
		},
		CodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.code"), v)
		},
		CodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.code"), v)
		},
		CodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.code"), v)
		},
		CodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.code"), "%"+v+"%")
		},
		CodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.code"), v+"%")
		},
		CodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.code"), "%"+v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.description"), "%"+v)
		},
		ClassEQ: func(q *bun.SelectQuery, v HazardousClass) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.class"), v)
		},
		ClassNEQ: func(q *bun.SelectQuery, v HazardousClass) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.class"), v)
		},
		ClassIn: func(q *bun.SelectQuery, v []HazardousClass) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.class"), bun.In(v))
		},
		ClassNotIn: func(q *bun.SelectQuery, v []HazardousClass) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.class"), bun.In(v))
		},
		UNNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.un_number"), v)
		},
		UNNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.un_number"), v)
		},
		UNNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.un_number"), bun.In(v))
		},
		UNNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.un_number"), bun.In(v))
		},
		UNNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.un_number"), v)
		},
		UNNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.un_number"), v)
		},
		UNNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.un_number"), v)
		},
		UNNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.un_number"), v)
		},
		UNNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.un_number"), "%"+v+"%")
		},
		UNNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.un_number"), v+"%")
		},
		UNNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.un_number"), "%"+v)
		},
		CASNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.cas_number"), v)
		},
		CASNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.cas_number"), v)
		},
		CASNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.cas_number"), bun.In(v))
		},
		CASNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.cas_number"), bun.In(v))
		},
		CASNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.cas_number"), v)
		},
		CASNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.cas_number"), v)
		},
		CASNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.cas_number"), v)
		},
		CASNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.cas_number"), v)
		},
		CASNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.cas_number"), "%"+v+"%")
		},
		CASNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.cas_number"), v+"%")
		},
		CASNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.cas_number"), "%"+v)
		},
		PackingGroupEQ: func(q *bun.SelectQuery, v PackingGroup) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.packing_group"), v)
		},
		PackingGroupNEQ: func(q *bun.SelectQuery, v PackingGroup) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.packing_group"), v)
		},
		PackingGroupIn: func(q *bun.SelectQuery, v []PackingGroup) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.packing_group"), bun.In(v))
		},
		PackingGroupNotIn: func(q *bun.SelectQuery, v []PackingGroup) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.packing_group"), bun.In(v))
		},
		ProperShippingNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.proper_shipping_name"), v)
		},
		ProperShippingNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.proper_shipping_name"), v)
		},
		ProperShippingNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.proper_shipping_name"), bun.In(v))
		},
		ProperShippingNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.proper_shipping_name"), bun.In(v))
		},
		ProperShippingNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.proper_shipping_name"), v)
		},
		ProperShippingNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.proper_shipping_name"), v)
		},
		ProperShippingNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.proper_shipping_name"), v)
		},
		ProperShippingNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.proper_shipping_name"), v)
		},
		ProperShippingNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.proper_shipping_name"), "%"+v+"%")
		},
		ProperShippingNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.proper_shipping_name"), v+"%")
		},
		ProperShippingNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.proper_shipping_name"), "%"+v)
		},
		HandlingInstructionsEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.handling_instructions"), v)
		},
		HandlingInstructionsNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.handling_instructions"), v)
		},
		HandlingInstructionsIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.handling_instructions"), bun.In(v))
		},
		HandlingInstructionsNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.handling_instructions"), bun.In(v))
		},
		HandlingInstructionsGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.handling_instructions"), v)
		},
		HandlingInstructionsGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.handling_instructions"), v)
		},
		HandlingInstructionsLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.handling_instructions"), v)
		},
		HandlingInstructionsLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.handling_instructions"), v)
		},
		HandlingInstructionsContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.handling_instructions"), "%"+v+"%")
		},
		HandlingInstructionsHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.handling_instructions"), v+"%")
		},
		HandlingInstructionsHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.handling_instructions"), "%"+v)
		},
		EmergencyContactEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.emergency_contact"), v)
		},
		EmergencyContactNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.emergency_contact"), v)
		},
		EmergencyContactIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.emergency_contact"), bun.In(v))
		},
		EmergencyContactNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.emergency_contact"), bun.In(v))
		},
		EmergencyContactGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.emergency_contact"), v)
		},
		EmergencyContactGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.emergency_contact"), v)
		},
		EmergencyContactLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.emergency_contact"), v)
		},
		EmergencyContactLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.emergency_contact"), v)
		},
		EmergencyContactContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.emergency_contact"), "%"+v+"%")
		},
		EmergencyContactHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.emergency_contact"), v+"%")
		},
		EmergencyContactHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.emergency_contact"), "%"+v)
		},
		EmergencyContactPhoneNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.emergency_contact_phone_number"), v)
		},
		EmergencyContactPhoneNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.emergency_contact_phone_number"), v)
		},
		EmergencyContactPhoneNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.emergency_contact_phone_number"), bun.In(v))
		},
		EmergencyContactPhoneNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.emergency_contact_phone_number"), bun.In(v))
		},
		EmergencyContactPhoneNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.emergency_contact_phone_number"), v)
		},
		EmergencyContactPhoneNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.emergency_contact_phone_number"), v)
		},
		EmergencyContactPhoneNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.emergency_contact_phone_number"), v)
		},
		EmergencyContactPhoneNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.emergency_contact_phone_number"), v)
		},
		EmergencyContactPhoneNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.emergency_contact_phone_number"), "%"+v+"%")
		},
		EmergencyContactPhoneNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.emergency_contact_phone_number"), v+"%")
		},
		EmergencyContactPhoneNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.emergency_contact_phone_number"), "%"+v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hm.rank"), "%"+v)
		},
		PlacardRequiredEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.placard_required"), v)
		},
		PlacardRequiredNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.placard_required"), v)
		},
		PlacardRequiredIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.placard_required"), bun.In(v))
		},
		PlacardRequiredNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.placard_required"), bun.In(v))
		},
		IsReportableQuantityEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.is_reportable_quantity"), v)
		},
		IsReportableQuantityNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.is_reportable_quantity"), v)
		},
		IsReportableQuantityIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.is_reportable_quantity"), bun.In(v))
		},
		IsReportableQuantityNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.is_reportable_quantity"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hm.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hm.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hm.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hm.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hm.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hm.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hm.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hm.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("hm.organization_id"), orgID).
				Where("? = ?", bun.Ident("hm.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("hm.id"), id).
				Where("? = ?", bun.Ident("hm.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "hm." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"hm.status ASC",
				"hm.code ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "hm.status DESC"
			}
			return "hm.status ASC"
		},
		Code: func(desc bool) string {
			if desc {
				return "hm.code DESC"
			}
			return "hm.code ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "hm.created_at DESC"
			}
			return "hm.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "hm.updated_at DESC"
			}
			return "hm.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]hazardousMaterialFieldConfig {
		return map[string]hazardousMaterialFieldConfig{
			"id": {
				Name:       "id",
				Column:     "hm.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "hm.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "hm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "hm.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "hm.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "hm.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "hm.description",
				Sortable:   false,
				Filterable: false,
			},
			"class": {
				Name:       "class",
				Column:     "hm.class",
				Sortable:   false,
				Filterable: false,
			},
			"un_number": {
				Name:       "un_number",
				Column:     "hm.un_number",
				Sortable:   false,
				Filterable: true,
			},
			"cas_number": {
				Name:       "cas_number",
				Column:     "hm.cas_number",
				Sortable:   false,
				Filterable: true,
			},
			"packing_group": {
				Name:       "packing_group",
				Column:     "hm.packing_group",
				Sortable:   false,
				Filterable: false,
			},
			"proper_shipping_name": {
				Name:       "proper_shipping_name",
				Column:     "hm.proper_shipping_name",
				Sortable:   false,
				Filterable: false,
			},
			"handling_instructions": {
				Name:       "handling_instructions",
				Column:     "hm.handling_instructions",
				Sortable:   false,
				Filterable: false,
			},
			"emergency_contact": {
				Name:       "emergency_contact",
				Column:     "hm.emergency_contact",
				Sortable:   false,
				Filterable: false,
			},
			"emergency_contact_phone_number": {
				Name:       "emergency_contact_phone_number",
				Column:     "hm.emergency_contact_phone_number",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "hm.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "hm.rank",
				Sortable:   false,
				Filterable: true,
			},
			"placard_required": {
				Name:       "placard_required",
				Column:     "hm.placard_required",
				Sortable:   false,
				Filterable: false,
			},
			"is_reportable_quantity": {
				Name:       "is_reportable_quantity",
				Column:     "hm.is_reportable_quantity",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "hm.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "hm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "hm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]hazardousMaterialFieldConfig{
			"id": {
				Name:       "id",
				Column:     "hm.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "hm.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "hm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "hm.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "hm.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "hm.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "hm.description",
				Sortable:   false,
				Filterable: false,
			},
			"class": {
				Name:       "class",
				Column:     "hm.class",
				Sortable:   false,
				Filterable: false,
			},
			"un_number": {
				Name:       "un_number",
				Column:     "hm.un_number",
				Sortable:   false,
				Filterable: true,
			},
			"cas_number": {
				Name:       "cas_number",
				Column:     "hm.cas_number",
				Sortable:   false,
				Filterable: true,
			},
			"packing_group": {
				Name:       "packing_group",
				Column:     "hm.packing_group",
				Sortable:   false,
				Filterable: false,
			},
			"proper_shipping_name": {
				Name:       "proper_shipping_name",
				Column:     "hm.proper_shipping_name",
				Sortable:   false,
				Filterable: false,
			},
			"handling_instructions": {
				Name:       "handling_instructions",
				Column:     "hm.handling_instructions",
				Sortable:   false,
				Filterable: false,
			},
			"emergency_contact": {
				Name:       "emergency_contact",
				Column:     "hm.emergency_contact",
				Sortable:   false,
				Filterable: false,
			},
			"emergency_contact_phone_number": {
				Name:       "emergency_contact_phone_number",
				Column:     "hm.emergency_contact_phone_number",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "hm.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "hm.rank",
				Sortable:   false,
				Filterable: true,
			},
			"placard_required": {
				Name:       "placard_required",
				Column:     "hm.placard_required",
				Sortable:   false,
				Filterable: false,
			},
			"is_reportable_quantity": {
				Name:       "is_reportable_quantity",
				Column:     "hm.is_reportable_quantity",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "hm.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "hm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "hm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]hazardousMaterialFieldConfig{
			"id": {
				Name:       "id",
				Column:     "hm.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "hm.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "hm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "hm.status",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "hm.code",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "hm.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "hm.description",
				Sortable:   false,
				Filterable: false,
			},
			"class": {
				Name:       "class",
				Column:     "hm.class",
				Sortable:   false,
				Filterable: false,
			},
			"un_number": {
				Name:       "un_number",
				Column:     "hm.un_number",
				Sortable:   false,
				Filterable: true,
			},
			"cas_number": {
				Name:       "cas_number",
				Column:     "hm.cas_number",
				Sortable:   false,
				Filterable: true,
			},
			"packing_group": {
				Name:       "packing_group",
				Column:     "hm.packing_group",
				Sortable:   false,
				Filterable: false,
			},
			"proper_shipping_name": {
				Name:       "proper_shipping_name",
				Column:     "hm.proper_shipping_name",
				Sortable:   false,
				Filterable: false,
			},
			"handling_instructions": {
				Name:       "handling_instructions",
				Column:     "hm.handling_instructions",
				Sortable:   false,
				Filterable: false,
			},
			"emergency_contact": {
				Name:       "emergency_contact",
				Column:     "hm.emergency_contact",
				Sortable:   false,
				Filterable: false,
			},
			"emergency_contact_phone_number": {
				Name:       "emergency_contact_phone_number",
				Column:     "hm.emergency_contact_phone_number",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "hm.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "hm.rank",
				Sortable:   false,
				Filterable: true,
			},
			"placard_required": {
				Name:       "placard_required",
				Column:     "hm.placard_required",
				Sortable:   false,
				Filterable: false,
			},
			"is_reportable_quantity": {
				Name:       "is_reportable_quantity",
				Column:     "hm.is_reportable_quantity",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "hm.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "hm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "hm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
	},
}

// HazardousMaterialQueryBuilder provides a fluent interface for building queries
type HazardousMaterialQueryBuilder struct {
	query *bun.SelectQuery
}

// NewHazardousMaterialQuery creates a new query builder
func NewHazardousMaterialQuery(db bun.IDB) *HazardousMaterialQueryBuilder {
	return &HazardousMaterialQueryBuilder{
		query: db.NewSelect().Model((*HazardousMaterial)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func HazardousMaterialFromQuery(q *bun.SelectQuery) *HazardousMaterialQueryBuilder {
	return &HazardousMaterialQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *HazardousMaterialQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *HazardousMaterialQueryBuilder) Model(model interface{}) *HazardousMaterialQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *HazardousMaterialQueryBuilder) WhereIDEQ(v pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *HazardousMaterialQueryBuilder) WhereIDNEQ(v pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereIDIn(v []pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereIDNotIn(v []pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *HazardousMaterialQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *HazardousMaterialQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *HazardousMaterialQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *HazardousMaterialQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *HazardousMaterialQueryBuilder) WhereStatusEQ(v domain.Status) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *HazardousMaterialQueryBuilder) WhereStatusNEQ(v domain.Status) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereStatusIn(v []domain.Status) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereStatusNotIn(v []domain.Status) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereCodeEQ adds a WHERE code = ? condition
func (b *HazardousMaterialQueryBuilder) WhereCodeEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CodeEQ(b.query, v)
	return b
}

// WhereCodeNEQ adds a WHERE code != ? condition
func (b *HazardousMaterialQueryBuilder) WhereCodeNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CodeNEQ(b.query, v)
	return b
}

// WhereCodeIn adds a WHERE code IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereCodeIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CodeIn(b.query, v)
	return b
}

// WhereCodeNotIn adds a WHERE code NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereCodeNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CodeNotIn(b.query, v)
	return b
}

// WhereCodeContains adds a WHERE code LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereCodeContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CodeContains(b.query, v)
	return b
}

// WhereCodeHasPrefix adds a WHERE code LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereCodeHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CodeHasPrefix(b.query, v)
	return b
}

// WhereCodeHasSuffix adds a WHERE code LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereCodeHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CodeHasSuffix(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *HazardousMaterialQueryBuilder) WhereNameEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *HazardousMaterialQueryBuilder) WhereNameNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereNameIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereNameNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereNameContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereNameHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereNameHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *HazardousMaterialQueryBuilder) WhereDescriptionEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *HazardousMaterialQueryBuilder) WhereDescriptionNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereDescriptionIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereDescriptionNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereDescriptionContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereDescriptionHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereDescriptionHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereClassEQ adds a WHERE class = ? condition
func (b *HazardousMaterialQueryBuilder) WhereClassEQ(v HazardousClass) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ClassEQ(b.query, v)
	return b
}

// WhereClassNEQ adds a WHERE class != ? condition
func (b *HazardousMaterialQueryBuilder) WhereClassNEQ(v HazardousClass) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ClassNEQ(b.query, v)
	return b
}

// WhereClassIn adds a WHERE class IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereClassIn(v []HazardousClass) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ClassIn(b.query, v)
	return b
}

// WhereClassNotIn adds a WHERE class NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereClassNotIn(v []HazardousClass) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ClassNotIn(b.query, v)
	return b
}

// WhereUNNumberEQ adds a WHERE un_number = ? condition
func (b *HazardousMaterialQueryBuilder) WhereUNNumberEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UNNumberEQ(b.query, v)
	return b
}

// WhereUNNumberNEQ adds a WHERE un_number != ? condition
func (b *HazardousMaterialQueryBuilder) WhereUNNumberNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UNNumberNEQ(b.query, v)
	return b
}

// WhereUNNumberIn adds a WHERE un_number IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereUNNumberIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UNNumberIn(b.query, v)
	return b
}

// WhereUNNumberNotIn adds a WHERE un_number NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereUNNumberNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UNNumberNotIn(b.query, v)
	return b
}

// WhereUNNumberContains adds a WHERE un_number LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereUNNumberContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UNNumberContains(b.query, v)
	return b
}

// WhereUNNumberHasPrefix adds a WHERE un_number LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereUNNumberHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UNNumberHasPrefix(b.query, v)
	return b
}

// WhereUNNumberHasSuffix adds a WHERE un_number LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereUNNumberHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UNNumberHasSuffix(b.query, v)
	return b
}

// WhereCASNumberEQ adds a WHERE cas_number = ? condition
func (b *HazardousMaterialQueryBuilder) WhereCASNumberEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CASNumberEQ(b.query, v)
	return b
}

// WhereCASNumberNEQ adds a WHERE cas_number != ? condition
func (b *HazardousMaterialQueryBuilder) WhereCASNumberNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CASNumberNEQ(b.query, v)
	return b
}

// WhereCASNumberIn adds a WHERE cas_number IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereCASNumberIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CASNumberIn(b.query, v)
	return b
}

// WhereCASNumberNotIn adds a WHERE cas_number NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereCASNumberNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CASNumberNotIn(b.query, v)
	return b
}

// WhereCASNumberContains adds a WHERE cas_number LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereCASNumberContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CASNumberContains(b.query, v)
	return b
}

// WhereCASNumberHasPrefix adds a WHERE cas_number LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereCASNumberHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CASNumberHasPrefix(b.query, v)
	return b
}

// WhereCASNumberHasSuffix adds a WHERE cas_number LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereCASNumberHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CASNumberHasSuffix(b.query, v)
	return b
}

// WherePackingGroupEQ adds a WHERE packing_group = ? condition
func (b *HazardousMaterialQueryBuilder) WherePackingGroupEQ(v PackingGroup) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.PackingGroupEQ(b.query, v)
	return b
}

// WherePackingGroupNEQ adds a WHERE packing_group != ? condition
func (b *HazardousMaterialQueryBuilder) WherePackingGroupNEQ(v PackingGroup) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.PackingGroupNEQ(b.query, v)
	return b
}

// WherePackingGroupIn adds a WHERE packing_group IN (?) condition
func (b *HazardousMaterialQueryBuilder) WherePackingGroupIn(v []PackingGroup) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.PackingGroupIn(b.query, v)
	return b
}

// WherePackingGroupNotIn adds a WHERE packing_group NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WherePackingGroupNotIn(v []PackingGroup) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.PackingGroupNotIn(b.query, v)
	return b
}

// WhereProperShippingNameEQ adds a WHERE proper_shipping_name = ? condition
func (b *HazardousMaterialQueryBuilder) WhereProperShippingNameEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ProperShippingNameEQ(b.query, v)
	return b
}

// WhereProperShippingNameNEQ adds a WHERE proper_shipping_name != ? condition
func (b *HazardousMaterialQueryBuilder) WhereProperShippingNameNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ProperShippingNameNEQ(b.query, v)
	return b
}

// WhereProperShippingNameIn adds a WHERE proper_shipping_name IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereProperShippingNameIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ProperShippingNameIn(b.query, v)
	return b
}

// WhereProperShippingNameNotIn adds a WHERE proper_shipping_name NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereProperShippingNameNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ProperShippingNameNotIn(b.query, v)
	return b
}

// WhereProperShippingNameContains adds a WHERE proper_shipping_name LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereProperShippingNameContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ProperShippingNameContains(b.query, v)
	return b
}

// WhereProperShippingNameHasPrefix adds a WHERE proper_shipping_name LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereProperShippingNameHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ProperShippingNameHasPrefix(b.query, v)
	return b
}

// WhereProperShippingNameHasSuffix adds a WHERE proper_shipping_name LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereProperShippingNameHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.ProperShippingNameHasSuffix(b.query, v)
	return b
}

// WhereHandlingInstructionsEQ adds a WHERE handling_instructions = ? condition
func (b *HazardousMaterialQueryBuilder) WhereHandlingInstructionsEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.HandlingInstructionsEQ(b.query, v)
	return b
}

// WhereHandlingInstructionsNEQ adds a WHERE handling_instructions != ? condition
func (b *HazardousMaterialQueryBuilder) WhereHandlingInstructionsNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.HandlingInstructionsNEQ(b.query, v)
	return b
}

// WhereHandlingInstructionsIn adds a WHERE handling_instructions IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereHandlingInstructionsIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.HandlingInstructionsIn(b.query, v)
	return b
}

// WhereHandlingInstructionsNotIn adds a WHERE handling_instructions NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereHandlingInstructionsNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.HandlingInstructionsNotIn(b.query, v)
	return b
}

// WhereHandlingInstructionsContains adds a WHERE handling_instructions LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereHandlingInstructionsContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.HandlingInstructionsContains(b.query, v)
	return b
}

// WhereHandlingInstructionsHasPrefix adds a WHERE handling_instructions LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereHandlingInstructionsHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.HandlingInstructionsHasPrefix(b.query, v)
	return b
}

// WhereHandlingInstructionsHasSuffix adds a WHERE handling_instructions LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereHandlingInstructionsHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.HandlingInstructionsHasSuffix(b.query, v)
	return b
}

// WhereEmergencyContactEQ adds a WHERE emergency_contact = ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactEQ(b.query, v)
	return b
}

// WhereEmergencyContactNEQ adds a WHERE emergency_contact != ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactNEQ(b.query, v)
	return b
}

// WhereEmergencyContactIn adds a WHERE emergency_contact IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactIn(b.query, v)
	return b
}

// WhereEmergencyContactNotIn adds a WHERE emergency_contact NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactNotIn(b.query, v)
	return b
}

// WhereEmergencyContactContains adds a WHERE emergency_contact LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactContains(b.query, v)
	return b
}

// WhereEmergencyContactHasPrefix adds a WHERE emergency_contact LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactHasPrefix(b.query, v)
	return b
}

// WhereEmergencyContactHasSuffix adds a WHERE emergency_contact LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactHasSuffix(b.query, v)
	return b
}

// WhereEmergencyContactPhoneNumberEQ adds a WHERE emergency_contact_phone_number = ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactPhoneNumberEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactPhoneNumberEQ(b.query, v)
	return b
}

// WhereEmergencyContactPhoneNumberNEQ adds a WHERE emergency_contact_phone_number != ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactPhoneNumberNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactPhoneNumberNEQ(b.query, v)
	return b
}

// WhereEmergencyContactPhoneNumberIn adds a WHERE emergency_contact_phone_number IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactPhoneNumberIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactPhoneNumberIn(b.query, v)
	return b
}

// WhereEmergencyContactPhoneNumberNotIn adds a WHERE emergency_contact_phone_number NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactPhoneNumberNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactPhoneNumberNotIn(b.query, v)
	return b
}

// WhereEmergencyContactPhoneNumberContains adds a WHERE emergency_contact_phone_number LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactPhoneNumberContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactPhoneNumberContains(b.query, v)
	return b
}

// WhereEmergencyContactPhoneNumberHasPrefix adds a WHERE emergency_contact_phone_number LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactPhoneNumberHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactPhoneNumberHasPrefix(b.query, v)
	return b
}

// WhereEmergencyContactPhoneNumberHasSuffix adds a WHERE emergency_contact_phone_number LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereEmergencyContactPhoneNumberHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.EmergencyContactPhoneNumberHasSuffix(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *HazardousMaterialQueryBuilder) WhereSearchVectorEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *HazardousMaterialQueryBuilder) WhereSearchVectorNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereSearchVectorIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereSearchVectorNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereSearchVectorContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereSearchVectorHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereSearchVectorHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *HazardousMaterialQueryBuilder) WhereRankEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *HazardousMaterialQueryBuilder) WhereRankNEQ(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereRankIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereRankNotIn(v []string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereRankContains(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereRankHasPrefix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *HazardousMaterialQueryBuilder) WhereRankHasSuffix(v string) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// WherePlacardRequiredEQ adds a WHERE placard_required = ? condition
func (b *HazardousMaterialQueryBuilder) WherePlacardRequiredEQ(v bool) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.PlacardRequiredEQ(b.query, v)
	return b
}

// WherePlacardRequiredNEQ adds a WHERE placard_required != ? condition
func (b *HazardousMaterialQueryBuilder) WherePlacardRequiredNEQ(v bool) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.PlacardRequiredNEQ(b.query, v)
	return b
}

// WherePlacardRequiredIn adds a WHERE placard_required IN (?) condition
func (b *HazardousMaterialQueryBuilder) WherePlacardRequiredIn(v []bool) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.PlacardRequiredIn(b.query, v)
	return b
}

// WherePlacardRequiredNotIn adds a WHERE placard_required NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WherePlacardRequiredNotIn(v []bool) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.PlacardRequiredNotIn(b.query, v)
	return b
}

// WhereIsReportableQuantityEQ adds a WHERE is_reportable_quantity = ? condition
func (b *HazardousMaterialQueryBuilder) WhereIsReportableQuantityEQ(v bool) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.IsReportableQuantityEQ(b.query, v)
	return b
}

// WhereIsReportableQuantityNEQ adds a WHERE is_reportable_quantity != ? condition
func (b *HazardousMaterialQueryBuilder) WhereIsReportableQuantityNEQ(v bool) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.IsReportableQuantityNEQ(b.query, v)
	return b
}

// WhereIsReportableQuantityIn adds a WHERE is_reportable_quantity IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereIsReportableQuantityIn(v []bool) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.IsReportableQuantityIn(b.query, v)
	return b
}

// WhereIsReportableQuantityNotIn adds a WHERE is_reportable_quantity NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereIsReportableQuantityNotIn(v []bool) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.IsReportableQuantityNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *HazardousMaterialQueryBuilder) WhereVersionEQ(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *HazardousMaterialQueryBuilder) WhereVersionNEQ(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *HazardousMaterialQueryBuilder) WhereVersionGT(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *HazardousMaterialQueryBuilder) WhereVersionGTE(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *HazardousMaterialQueryBuilder) WhereVersionLT(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *HazardousMaterialQueryBuilder) WhereVersionLTE(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereVersionIn(v []int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereVersionNotIn(v []int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *HazardousMaterialQueryBuilder) WhereCreatedAtEQ(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *HazardousMaterialQueryBuilder) WhereCreatedAtNEQ(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *HazardousMaterialQueryBuilder) WhereCreatedAtGT(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *HazardousMaterialQueryBuilder) WhereCreatedAtGTE(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *HazardousMaterialQueryBuilder) WhereCreatedAtLT(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *HazardousMaterialQueryBuilder) WhereCreatedAtLTE(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereCreatedAtIn(v []int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereCreatedAtNotIn(v []int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *HazardousMaterialQueryBuilder) WhereUpdatedAtEQ(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *HazardousMaterialQueryBuilder) WhereUpdatedAtNEQ(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *HazardousMaterialQueryBuilder) WhereUpdatedAtGT(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *HazardousMaterialQueryBuilder) WhereUpdatedAtGTE(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *HazardousMaterialQueryBuilder) WhereUpdatedAtLT(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *HazardousMaterialQueryBuilder) WhereUpdatedAtLTE(v int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereUpdatedAtIn(v []int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *HazardousMaterialQueryBuilder) WhereUpdatedAtNotIn(v []int64) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *HazardousMaterialQueryBuilder) WhereTenant(orgID, buID pulid.ID) *HazardousMaterialQueryBuilder {
	b.query = HazardousMaterialQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *HazardousMaterialQueryBuilder) WhereGroup(sep string, fn func(*HazardousMaterialQueryBuilder) *HazardousMaterialQueryBuilder) *HazardousMaterialQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &HazardousMaterialQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *HazardousMaterialQueryBuilder) Where(query string, args ...interface{}) *HazardousMaterialQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *HazardousMaterialQueryBuilder) OrderBy(column string, desc ...bool) *HazardousMaterialQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(HazardousMaterialQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *HazardousMaterialQueryBuilder) Limit(n int) *HazardousMaterialQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *HazardousMaterialQueryBuilder) Offset(n int) *HazardousMaterialQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *HazardousMaterialQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *HazardousMaterialQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *HazardousMaterialQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *HazardousMaterialQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *HazardousMaterialQueryBuilder) All(ctx context.Context) ([]*HazardousMaterial, error) {
	var entities []*HazardousMaterial
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *HazardousMaterialQueryBuilder) AllWithCount(ctx context.Context) ([]*HazardousMaterial, int, error) {
	var entities []*HazardousMaterial
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *HazardousMaterialQueryBuilder) One(ctx context.Context) (*HazardousMaterial, error) {
	entity := new(HazardousMaterial)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *HazardousMaterialQueryBuilder) First(ctx context.Context) (*HazardousMaterial, error) {
	entity := new(HazardousMaterial)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// HazardousMaterialBuild creates a chainable query builder
func HazardousMaterialBuild(db bun.IDB) *HazardousMaterialQueryBuilder {
	return NewHazardousMaterialQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *HazardousMaterialQueryBuilder) LoadBusinessUnit() *HazardousMaterialQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *HazardousMaterialQueryBuilder) LoadOrganization() *HazardousMaterialQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for HazardousMaterial
func (b *HazardousMaterialQueryBuilder) LoadAllRelations() *HazardousMaterialQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	return b
}

// HazardousMaterialRelationChain provides a fluent API for building nested relationship chains
type HazardousMaterialRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewHazardousMaterialRelationChain creates a new relation chain builder
func NewHazardousMaterialRelationChain() *HazardousMaterialRelationChain {
	return &HazardousMaterialRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *HazardousMaterialRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *HazardousMaterialRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *HazardousMaterialRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *HazardousMaterialRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *HazardousMaterialQueryBuilder) WithBusinessUnit() *HazardousMaterialRelationChainBuilder {
	chain := &HazardousMaterialRelationChainBuilder{
		parent: b,
		chain:  NewHazardousMaterialRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *HazardousMaterialQueryBuilder) WithOrganization() *HazardousMaterialRelationChainBuilder {
	chain := &HazardousMaterialRelationChainBuilder{
		parent: b,
		chain:  NewHazardousMaterialRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// HazardousMaterialRelationChainBuilder provides fluent API for building nested relations
type HazardousMaterialRelationChainBuilder struct {
	parent *HazardousMaterialQueryBuilder
	chain  *HazardousMaterialRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *HazardousMaterialRelationChainBuilder) Load() *HazardousMaterialQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *HazardousMaterialRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *HazardousMaterialRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *HazardousMaterialRelationChainBuilder) OrderBy(order string) *HazardousMaterialRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *HazardousMaterialRelationChainBuilder) Where(condition string, args ...interface{}) *HazardousMaterialRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
