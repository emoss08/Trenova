/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package user

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// userRoleFieldConfig provides field configuration for UserRole
type userRoleFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// UserRoleQuery provides type-safe query helpers and constants
var UserRoleQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		BusinessUnitID string
		OrganizationID string
		UserID         string
		RoleID         string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RoleIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		RoleIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		RoleIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RoleIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field   func(field string, desc bool) string
		Default func() []string
	}

	// Field configuration
	FieldConfig  func() map[string]userRoleFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		User string
		Role string
	}
}{
	// Table and alias constants
	Table:    "user_roles",
	Alias:    "ur",
	IDPrefix: "ur_",

	// Field names
	Field: struct {
		BusinessUnitID string
		OrganizationID string
		UserID         string
		RoleID         string
	}{
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		UserID:         "user_id",
		RoleID:         "role_id",
	},

	// Column helpers
	Column: func(field string) string {
		return "ur." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "ur." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RoleIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		RoleIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		RoleIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RoleIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		Tenant              func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ur.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ur.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ur.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ur.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ur.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ur.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ur.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ur.organization_id"), bun.In(v))
		},
		UserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ur.user_id"), v)
		},
		UserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ur.user_id"), v)
		},
		UserIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ur.user_id"), bun.In(v))
		},
		UserIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ur.user_id"), bun.In(v))
		},
		RoleIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ur.role_id"), v)
		},
		RoleIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ur.role_id"), v)
		},
		RoleIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ur.role_id"), bun.In(v))
		},
		RoleIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ur.role_id"), bun.In(v))
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("ur.organization_id"), orgID).
				Where("? = ?", bun.Ident("ur.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field   func(field string, desc bool) string
		Default func() []string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "ur." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"ur.created_at DESC",
			}
		},
	},

	// Field configuration
	FieldConfig: func() map[string]userRoleFieldConfig {
		return map[string]userRoleFieldConfig{
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ur.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ur.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "ur.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"role_id": {
				Name:       "role_id",
				Column:     "ur.role_id",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]userRoleFieldConfig{
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ur.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ur.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "ur.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"role_id": {
				Name:       "role_id",
				Column:     "ur.role_id",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]userRoleFieldConfig{
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ur.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ur.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "ur.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"role_id": {
				Name:       "role_id",
				Column:     "ur.role_id",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		User string
		Role string
	}{
		User: "User",
		Role: "Role",
	},
}

// UserRoleQueryBuilder provides a fluent interface for building queries
type UserRoleQueryBuilder struct {
	query *bun.SelectQuery
}

// NewUserRoleQuery creates a new query builder
func NewUserRoleQuery(db bun.IDB) *UserRoleQueryBuilder {
	return &UserRoleQueryBuilder{
		query: db.NewSelect().Model((*UserRole)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func UserRoleFromQuery(q *bun.SelectQuery) *UserRoleQueryBuilder {
	return &UserRoleQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *UserRoleQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *UserRoleQueryBuilder) Model(model interface{}) *UserRoleQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *UserRoleQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *UserRoleQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *UserRoleQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *UserRoleQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *UserRoleQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *UserRoleQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *UserRoleQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *UserRoleQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereUserIDEQ adds a WHERE user_id = ? condition
func (b *UserRoleQueryBuilder) WhereUserIDEQ(v pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.UserIDEQ(b.query, v)
	return b
}

// WhereUserIDNEQ adds a WHERE user_id != ? condition
func (b *UserRoleQueryBuilder) WhereUserIDNEQ(v pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.UserIDNEQ(b.query, v)
	return b
}

// WhereUserIDIn adds a WHERE user_id IN (?) condition
func (b *UserRoleQueryBuilder) WhereUserIDIn(v []pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.UserIDIn(b.query, v)
	return b
}

// WhereUserIDNotIn adds a WHERE user_id NOT IN (?) condition
func (b *UserRoleQueryBuilder) WhereUserIDNotIn(v []pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.UserIDNotIn(b.query, v)
	return b
}

// WhereRoleIDEQ adds a WHERE role_id = ? condition
func (b *UserRoleQueryBuilder) WhereRoleIDEQ(v pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.RoleIDEQ(b.query, v)
	return b
}

// WhereRoleIDNEQ adds a WHERE role_id != ? condition
func (b *UserRoleQueryBuilder) WhereRoleIDNEQ(v pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.RoleIDNEQ(b.query, v)
	return b
}

// WhereRoleIDIn adds a WHERE role_id IN (?) condition
func (b *UserRoleQueryBuilder) WhereRoleIDIn(v []pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.RoleIDIn(b.query, v)
	return b
}

// WhereRoleIDNotIn adds a WHERE role_id NOT IN (?) condition
func (b *UserRoleQueryBuilder) WhereRoleIDNotIn(v []pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.RoleIDNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *UserRoleQueryBuilder) WhereTenant(orgID, buID pulid.ID) *UserRoleQueryBuilder {
	b.query = UserRoleQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *UserRoleQueryBuilder) WhereGroup(sep string, fn func(*UserRoleQueryBuilder) *UserRoleQueryBuilder) *UserRoleQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &UserRoleQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *UserRoleQueryBuilder) Where(query string, args ...interface{}) *UserRoleQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *UserRoleQueryBuilder) OrderBy(column string, desc ...bool) *UserRoleQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(UserRoleQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *UserRoleQueryBuilder) Limit(n int) *UserRoleQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *UserRoleQueryBuilder) Offset(n int) *UserRoleQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *UserRoleQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *UserRoleQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *UserRoleQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *UserRoleQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *UserRoleQueryBuilder) All(ctx context.Context) ([]*UserRole, error) {
	var entities []*UserRole
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *UserRoleQueryBuilder) AllWithCount(ctx context.Context) ([]*UserRole, int, error) {
	var entities []*UserRole
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *UserRoleQueryBuilder) One(ctx context.Context) (*UserRole, error) {
	entity := new(UserRole)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *UserRoleQueryBuilder) First(ctx context.Context) (*UserRole, error) {
	entity := new(UserRole)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// UserRoleBuild creates a chainable query builder
func UserRoleBuild(db bun.IDB) *UserRoleQueryBuilder {
	return NewUserRoleQuery(db)
}

// Relationship loading methods

// LoadUser loads the User relationship
func (b *UserRoleQueryBuilder) LoadUser() *UserRoleQueryBuilder {
	b.query = b.query.Relation("User")
	return b
}

// LoadRole loads the Role relationship
func (b *UserRoleQueryBuilder) LoadRole() *UserRoleQueryBuilder {
	b.query = b.query.Relation("Role")
	return b
}

// LoadAllRelations loads all relationships for UserRole
func (b *UserRoleQueryBuilder) LoadAllRelations() *UserRoleQueryBuilder {
	b.LoadUser()
	b.LoadRole()
	return b
}
