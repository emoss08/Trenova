// Code generated by gen-trenova. DO NOT EDIT.

package user

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// userOrganizationFieldConfig provides field configuration for UserOrganization
type userOrganizationFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// UserOrganizationQuery provides type-safe query helpers and constants
var UserOrganizationQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		UserID         string
		OrganizationID string
		CreatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		UserIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CreatedAtEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]userOrganizationFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "user_organizations",
	Alias:    "uo",
	IDPrefix: "uo_",

	// Field names
	Field: struct {
		UserID         string
		OrganizationID string
		CreatedAt      string
	}{
		UserID:         "user_id",
		OrganizationID: "organization_id",
		CreatedAt:      "created_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "uo." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "uo." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		UserIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CreatedAtEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		UserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("uo.user_id"), v)
		},
		UserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("uo.user_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("uo.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("uo.organization_id"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("uo.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("uo.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("uo.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("uo.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("uo.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("uo.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("uo.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("uo.created_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "uo." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"uo.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "uo.created_at DESC"
			}
			return "uo.created_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]userOrganizationFieldConfig {
		return map[string]userOrganizationFieldConfig{
			"user_id": {
				Name:       "user_id",
				Column:     "uo.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "uo.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "uo.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]userOrganizationFieldConfig{
			"user_id": {
				Name:       "user_id",
				Column:     "uo.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "uo.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "uo.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]userOrganizationFieldConfig{
			"user_id": {
				Name:       "user_id",
				Column:     "uo.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "uo.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "uo.created_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// UserOrganizationQueryBuilder provides a fluent interface for building queries
type UserOrganizationQueryBuilder struct {
	query *bun.SelectQuery
}

// NewUserOrganizationQuery creates a new query builder
func NewUserOrganizationQuery(db bun.IDB) *UserOrganizationQueryBuilder {
	return &UserOrganizationQueryBuilder{
		query: db.NewSelect().Model((*UserOrganization)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func UserOrganizationFromQuery(q *bun.SelectQuery) *UserOrganizationQueryBuilder {
	return &UserOrganizationQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *UserOrganizationQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *UserOrganizationQueryBuilder) Model(model interface{}) *UserOrganizationQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereUserIDEQ adds a WHERE user_id = ? condition
func (b *UserOrganizationQueryBuilder) WhereUserIDEQ(v pulid.ID) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.UserIDEQ(b.query, v)
	return b
}

// WhereUserIDNEQ adds a WHERE user_id != ? condition
func (b *UserOrganizationQueryBuilder) WhereUserIDNEQ(v pulid.ID) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.UserIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *UserOrganizationQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *UserOrganizationQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *UserOrganizationQueryBuilder) WhereCreatedAtEQ(v int64) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *UserOrganizationQueryBuilder) WhereCreatedAtNEQ(v int64) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *UserOrganizationQueryBuilder) WhereCreatedAtGT(v int64) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *UserOrganizationQueryBuilder) WhereCreatedAtGTE(v int64) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *UserOrganizationQueryBuilder) WhereCreatedAtLT(v int64) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *UserOrganizationQueryBuilder) WhereCreatedAtLTE(v int64) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *UserOrganizationQueryBuilder) WhereCreatedAtIn(v []int64) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *UserOrganizationQueryBuilder) WhereCreatedAtNotIn(v []int64) *UserOrganizationQueryBuilder {
	b.query = UserOrganizationQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *UserOrganizationQueryBuilder) WhereGroup(sep string, fn func(*UserOrganizationQueryBuilder) *UserOrganizationQueryBuilder) *UserOrganizationQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &UserOrganizationQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *UserOrganizationQueryBuilder) Where(query string, args ...interface{}) *UserOrganizationQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *UserOrganizationQueryBuilder) OrderBy(column string, desc ...bool) *UserOrganizationQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(UserOrganizationQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *UserOrganizationQueryBuilder) Limit(n int) *UserOrganizationQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *UserOrganizationQueryBuilder) Offset(n int) *UserOrganizationQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *UserOrganizationQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *UserOrganizationQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *UserOrganizationQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *UserOrganizationQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *UserOrganizationQueryBuilder) All(ctx context.Context) ([]*UserOrganization, error) {
	var entities []*UserOrganization
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *UserOrganizationQueryBuilder) AllWithCount(ctx context.Context) ([]*UserOrganization, int, error) {
	var entities []*UserOrganization
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *UserOrganizationQueryBuilder) One(ctx context.Context) (*UserOrganization, error) {
	entity := new(UserOrganization)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *UserOrganizationQueryBuilder) First(ctx context.Context) (*UserOrganization, error) {
	entity := new(UserOrganization)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// UserOrganizationBuild creates a chainable query builder
func UserOrganizationBuild(db bun.IDB) *UserOrganizationQueryBuilder {
	return NewUserOrganizationQuery(db)
}
