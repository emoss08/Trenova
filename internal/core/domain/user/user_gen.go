// Code generated by gen-trenova. DO NOT EDIT.

package user

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// userFieldConfig provides field configuration for User
type userFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// UserQuery provides type-safe query helpers and constants
var UserQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                    string
		BusinessUnitID        string
		CurrentOrganizationID string
		Status                string
		Name                  string
		Username              string
		Password              string
		EmailAddress          string
		ProfilePicURL         string
		ThumbnailURL          string
		Timezone              string
		TimeFormat            string
		IsLocked              string
		MustChangePassword    string
		LastLoginAt           string
		Version               string
		CreatedAt             string
		UpdatedAt             string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CurrentOrganizationIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CurrentOrganizationIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StatusEQ                 func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		NameEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UsernameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UsernameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PasswordNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PasswordGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmailAddressNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmailAddressGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProfilePicURLNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProfilePicURLGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ThumbnailURLNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ThumbnailURLGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimeFormatEQ             func(q *bun.SelectQuery, v TimeFormat) *bun.SelectQuery
		TimeFormatNEQ            func(q *bun.SelectQuery, v TimeFormat) *bun.SelectQuery
		IsLockedEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsLockedNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		MustChangePasswordEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		MustChangePasswordNEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		LastLoginAtEQ            func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		LastLoginAtNEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		LastLoginAtIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		LastLoginAtIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]userFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "users",
	Alias:    "usr",
	IDPrefix: "usr_",

	// Field names
	Field: struct {
		ID                    string
		BusinessUnitID        string
		CurrentOrganizationID string
		Status                string
		Name                  string
		Username              string
		Password              string
		EmailAddress          string
		ProfilePicURL         string
		ThumbnailURL          string
		Timezone              string
		TimeFormat            string
		IsLocked              string
		MustChangePassword    string
		LastLoginAt           string
		Version               string
		CreatedAt             string
		UpdatedAt             string
	}{
		ID:                    "id",
		BusinessUnitID:        "business_unit_id",
		CurrentOrganizationID: "current_organization_id",
		Status:                "status",
		Name:                  "name",
		Username:              "username",
		Password:              "password",
		EmailAddress:          "email_address",
		ProfilePicURL:         "profile_pic_url",
		ThumbnailURL:          "thumbnail_url",
		Timezone:              "timezone",
		TimeFormat:            "time_format",
		IsLocked:              "is_locked",
		MustChangePassword:    "must_change_password",
		LastLoginAt:           "last_login_at",
		Version:               "version",
		CreatedAt:             "created_at",
		UpdatedAt:             "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "usr." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "usr." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CurrentOrganizationIDEQ  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CurrentOrganizationIDNEQ func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StatusEQ                 func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		NameEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UsernameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		UsernameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UsernameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PasswordNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PasswordGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PasswordHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmailAddressNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		EmailAddressGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EmailAddressHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProfilePicURLNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProfilePicURLGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ThumbnailURLNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ThumbnailURLGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ThumbnailURLHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimeFormatEQ             func(q *bun.SelectQuery, v TimeFormat) *bun.SelectQuery
		TimeFormatNEQ            func(q *bun.SelectQuery, v TimeFormat) *bun.SelectQuery
		IsLockedEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsLockedNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		MustChangePasswordEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		MustChangePasswordNEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		LastLoginAtEQ            func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		LastLoginAtNEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		LastLoginAtIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		LastLoginAtIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.business_unit_id"), v)
		},
		CurrentOrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.current_organization_id"), v)
		},
		CurrentOrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.current_organization_id"), v)
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.status"), v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.name"), "%"+v)
		},
		UsernameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.username"), v)
		},
		UsernameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.username"), v)
		},
		UsernameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.username"), bun.In(v))
		},
		UsernameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.username"), bun.In(v))
		},
		UsernameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.username"), v)
		},
		UsernameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.username"), v)
		},
		UsernameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.username"), v)
		},
		UsernameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.username"), v)
		},
		UsernameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.username"), "%"+v+"%")
		},
		UsernameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.username"), v+"%")
		},
		UsernameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.username"), "%"+v)
		},
		PasswordEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.password"), v)
		},
		PasswordNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.password"), v)
		},
		PasswordIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.password"), bun.In(v))
		},
		PasswordNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.password"), bun.In(v))
		},
		PasswordGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.password"), v)
		},
		PasswordGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.password"), v)
		},
		PasswordLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.password"), v)
		},
		PasswordLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.password"), v)
		},
		PasswordContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.password"), "%"+v+"%")
		},
		PasswordHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.password"), v+"%")
		},
		PasswordHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.password"), "%"+v)
		},
		EmailAddressEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.email_address"), v)
		},
		EmailAddressNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.email_address"), v)
		},
		EmailAddressIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.email_address"), bun.In(v))
		},
		EmailAddressNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.email_address"), bun.In(v))
		},
		EmailAddressGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.email_address"), v)
		},
		EmailAddressGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.email_address"), v)
		},
		EmailAddressLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.email_address"), v)
		},
		EmailAddressLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.email_address"), v)
		},
		EmailAddressContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.email_address"), "%"+v+"%")
		},
		EmailAddressHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.email_address"), v+"%")
		},
		EmailAddressHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.email_address"), "%"+v)
		},
		ProfilePicURLEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.profile_pic_url"), v)
		},
		ProfilePicURLNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.profile_pic_url"), v)
		},
		ProfilePicURLIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.profile_pic_url"), bun.In(v))
		},
		ProfilePicURLNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.profile_pic_url"), bun.In(v))
		},
		ProfilePicURLGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.profile_pic_url"), v)
		},
		ProfilePicURLGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.profile_pic_url"), v)
		},
		ProfilePicURLLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.profile_pic_url"), v)
		},
		ProfilePicURLLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.profile_pic_url"), v)
		},
		ProfilePicURLContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.profile_pic_url"), "%"+v+"%")
		},
		ProfilePicURLHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.profile_pic_url"), v+"%")
		},
		ProfilePicURLHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.profile_pic_url"), "%"+v)
		},
		ThumbnailURLEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.thumbnail_url"), v)
		},
		ThumbnailURLNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.thumbnail_url"), v)
		},
		ThumbnailURLIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.thumbnail_url"), bun.In(v))
		},
		ThumbnailURLNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.thumbnail_url"), bun.In(v))
		},
		ThumbnailURLGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.thumbnail_url"), v)
		},
		ThumbnailURLGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.thumbnail_url"), v)
		},
		ThumbnailURLLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.thumbnail_url"), v)
		},
		ThumbnailURLLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.thumbnail_url"), v)
		},
		ThumbnailURLContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.thumbnail_url"), "%"+v+"%")
		},
		ThumbnailURLHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.thumbnail_url"), v+"%")
		},
		ThumbnailURLHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.thumbnail_url"), "%"+v)
		},
		TimezoneEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.timezone"), v)
		},
		TimezoneNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.timezone"), v)
		},
		TimezoneIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.timezone"), bun.In(v))
		},
		TimezoneNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.timezone"), bun.In(v))
		},
		TimezoneGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.timezone"), v)
		},
		TimezoneGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.timezone"), v)
		},
		TimezoneLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.timezone"), v)
		},
		TimezoneLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.timezone"), v)
		},
		TimezoneContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.timezone"), "%"+v+"%")
		},
		TimezoneHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.timezone"), v+"%")
		},
		TimezoneHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("usr.timezone"), "%"+v)
		},
		TimeFormatEQ: func(q *bun.SelectQuery, v TimeFormat) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.time_format"), v)
		},
		TimeFormatNEQ: func(q *bun.SelectQuery, v TimeFormat) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.time_format"), v)
		},
		IsLockedEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.is_locked"), v)
		},
		IsLockedNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.is_locked"), v)
		},
		MustChangePasswordEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.must_change_password"), v)
		},
		MustChangePasswordNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.must_change_password"), v)
		},
		LastLoginAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.last_login_at"), v)
		},
		LastLoginAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.last_login_at"), v)
		},
		LastLoginAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("usr.last_login_at"))
		},
		LastLoginAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("usr.last_login_at"))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("usr.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("usr.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("usr.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("usr.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("usr.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("usr.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("usr.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("usr.updated_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("usr.id"), id).
				Where("? = ?", bun.Ident("usr.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "usr." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"usr.status ASC",
				"usr.name ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "usr.status DESC"
			}
			return "usr.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "usr.created_at DESC"
			}
			return "usr.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "usr.updated_at DESC"
			}
			return "usr.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]userFieldConfig {
		return map[string]userFieldConfig{
			"id": {
				Name:       "id",
				Column:     "usr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "usr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"current_organization_id": {
				Name:       "current_organization_id",
				Column:     "usr.current_organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "usr.status",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "usr.name",
				Sortable:   true,
				Filterable: true,
			},
			"username": {
				Name:       "username",
				Column:     "usr.username",
				Sortable:   false,
				Filterable: true,
			},
			"password": {
				Name:       "password",
				Column:     "usr.password",
				Sortable:   false,
				Filterable: true,
			},
			"email_address": {
				Name:       "email_address",
				Column:     "usr.email_address",
				Sortable:   false,
				Filterable: true,
			},
			"profile_pic_url": {
				Name:       "profile_pic_url",
				Column:     "usr.profile_pic_url",
				Sortable:   false,
				Filterable: true,
			},
			"thumbnail_url": {
				Name:       "thumbnail_url",
				Column:     "usr.thumbnail_url",
				Sortable:   false,
				Filterable: true,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "usr.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"time_format": {
				Name:       "time_format",
				Column:     "usr.time_format",
				Sortable:   false,
				Filterable: false,
			},
			"is_locked": {
				Name:       "is_locked",
				Column:     "usr.is_locked",
				Sortable:   false,
				Filterable: false,
			},
			"must_change_password": {
				Name:       "must_change_password",
				Column:     "usr.must_change_password",
				Sortable:   false,
				Filterable: false,
			},
			"last_login_at": {
				Name:       "last_login_at",
				Column:     "usr.last_login_at",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "usr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "usr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "usr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]userFieldConfig{
			"id": {
				Name:       "id",
				Column:     "usr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "usr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"current_organization_id": {
				Name:       "current_organization_id",
				Column:     "usr.current_organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "usr.status",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "usr.name",
				Sortable:   true,
				Filterable: true,
			},
			"username": {
				Name:       "username",
				Column:     "usr.username",
				Sortable:   false,
				Filterable: true,
			},
			"password": {
				Name:       "password",
				Column:     "usr.password",
				Sortable:   false,
				Filterable: true,
			},
			"email_address": {
				Name:       "email_address",
				Column:     "usr.email_address",
				Sortable:   false,
				Filterable: true,
			},
			"profile_pic_url": {
				Name:       "profile_pic_url",
				Column:     "usr.profile_pic_url",
				Sortable:   false,
				Filterable: true,
			},
			"thumbnail_url": {
				Name:       "thumbnail_url",
				Column:     "usr.thumbnail_url",
				Sortable:   false,
				Filterable: true,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "usr.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"time_format": {
				Name:       "time_format",
				Column:     "usr.time_format",
				Sortable:   false,
				Filterable: false,
			},
			"is_locked": {
				Name:       "is_locked",
				Column:     "usr.is_locked",
				Sortable:   false,
				Filterable: false,
			},
			"must_change_password": {
				Name:       "must_change_password",
				Column:     "usr.must_change_password",
				Sortable:   false,
				Filterable: false,
			},
			"last_login_at": {
				Name:       "last_login_at",
				Column:     "usr.last_login_at",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "usr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "usr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "usr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]userFieldConfig{
			"id": {
				Name:       "id",
				Column:     "usr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "usr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"current_organization_id": {
				Name:       "current_organization_id",
				Column:     "usr.current_organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "usr.status",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "usr.name",
				Sortable:   true,
				Filterable: true,
			},
			"username": {
				Name:       "username",
				Column:     "usr.username",
				Sortable:   false,
				Filterable: true,
			},
			"password": {
				Name:       "password",
				Column:     "usr.password",
				Sortable:   false,
				Filterable: true,
			},
			"email_address": {
				Name:       "email_address",
				Column:     "usr.email_address",
				Sortable:   false,
				Filterable: true,
			},
			"profile_pic_url": {
				Name:       "profile_pic_url",
				Column:     "usr.profile_pic_url",
				Sortable:   false,
				Filterable: true,
			},
			"thumbnail_url": {
				Name:       "thumbnail_url",
				Column:     "usr.thumbnail_url",
				Sortable:   false,
				Filterable: true,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "usr.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"time_format": {
				Name:       "time_format",
				Column:     "usr.time_format",
				Sortable:   false,
				Filterable: false,
			},
			"is_locked": {
				Name:       "is_locked",
				Column:     "usr.is_locked",
				Sortable:   false,
				Filterable: false,
			},
			"must_change_password": {
				Name:       "must_change_password",
				Column:     "usr.must_change_password",
				Sortable:   false,
				Filterable: false,
			},
			"last_login_at": {
				Name:       "last_login_at",
				Column:     "usr.last_login_at",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "usr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "usr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "usr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// UserQueryBuilder provides a fluent interface for building queries
type UserQueryBuilder struct {
	query *bun.SelectQuery
}

// NewUserQuery creates a new query builder
func NewUserQuery(db bun.IDB) *UserQueryBuilder {
	return &UserQueryBuilder{
		query: db.NewSelect().Model((*User)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func UserFromQuery(q *bun.SelectQuery) *UserQueryBuilder {
	return &UserQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *UserQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *UserQueryBuilder) Model(model interface{}) *UserQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *UserQueryBuilder) WhereIDEQ(v pulid.ID) *UserQueryBuilder {
	b.query = UserQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *UserQueryBuilder) WhereIDNEQ(v pulid.ID) *UserQueryBuilder {
	b.query = UserQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *UserQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *UserQueryBuilder {
	b.query = UserQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *UserQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *UserQueryBuilder {
	b.query = UserQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereCurrentOrganizationIDEQ adds a WHERE current_organization_id = ? condition
func (b *UserQueryBuilder) WhereCurrentOrganizationIDEQ(v pulid.ID) *UserQueryBuilder {
	b.query = UserQuery.Where.CurrentOrganizationIDEQ(b.query, v)
	return b
}

// WhereCurrentOrganizationIDNEQ adds a WHERE current_organization_id != ? condition
func (b *UserQueryBuilder) WhereCurrentOrganizationIDNEQ(v pulid.ID) *UserQueryBuilder {
	b.query = UserQuery.Where.CurrentOrganizationIDNEQ(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *UserQueryBuilder) WhereStatusEQ(v domain.Status) *UserQueryBuilder {
	b.query = UserQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *UserQueryBuilder) WhereStatusNEQ(v domain.Status) *UserQueryBuilder {
	b.query = UserQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *UserQueryBuilder) WhereNameEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *UserQueryBuilder) WhereNameNEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *UserQueryBuilder) WhereNameIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *UserQueryBuilder) WhereNameNotIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *UserQueryBuilder) WhereNameContains(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *UserQueryBuilder) WhereNameHasPrefix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *UserQueryBuilder) WhereNameHasSuffix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereUsernameEQ adds a WHERE username = ? condition
func (b *UserQueryBuilder) WhereUsernameEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.UsernameEQ(b.query, v)
	return b
}

// WhereUsernameNEQ adds a WHERE username != ? condition
func (b *UserQueryBuilder) WhereUsernameNEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.UsernameNEQ(b.query, v)
	return b
}

// WhereUsernameIn adds a WHERE username IN (?) condition
func (b *UserQueryBuilder) WhereUsernameIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.UsernameIn(b.query, v)
	return b
}

// WhereUsernameNotIn adds a WHERE username NOT IN (?) condition
func (b *UserQueryBuilder) WhereUsernameNotIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.UsernameNotIn(b.query, v)
	return b
}

// WhereUsernameContains adds a WHERE username LIKE ? condition
func (b *UserQueryBuilder) WhereUsernameContains(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.UsernameContains(b.query, v)
	return b
}

// WhereUsernameHasPrefix adds a WHERE username LIKE ? condition
func (b *UserQueryBuilder) WhereUsernameHasPrefix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.UsernameHasPrefix(b.query, v)
	return b
}

// WhereUsernameHasSuffix adds a WHERE username LIKE ? condition
func (b *UserQueryBuilder) WhereUsernameHasSuffix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.UsernameHasSuffix(b.query, v)
	return b
}

// WherePasswordEQ adds a WHERE password = ? condition
func (b *UserQueryBuilder) WherePasswordEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.PasswordEQ(b.query, v)
	return b
}

// WherePasswordNEQ adds a WHERE password != ? condition
func (b *UserQueryBuilder) WherePasswordNEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.PasswordNEQ(b.query, v)
	return b
}

// WherePasswordIn adds a WHERE password IN (?) condition
func (b *UserQueryBuilder) WherePasswordIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.PasswordIn(b.query, v)
	return b
}

// WherePasswordNotIn adds a WHERE password NOT IN (?) condition
func (b *UserQueryBuilder) WherePasswordNotIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.PasswordNotIn(b.query, v)
	return b
}

// WherePasswordContains adds a WHERE password LIKE ? condition
func (b *UserQueryBuilder) WherePasswordContains(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.PasswordContains(b.query, v)
	return b
}

// WherePasswordHasPrefix adds a WHERE password LIKE ? condition
func (b *UserQueryBuilder) WherePasswordHasPrefix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.PasswordHasPrefix(b.query, v)
	return b
}

// WherePasswordHasSuffix adds a WHERE password LIKE ? condition
func (b *UserQueryBuilder) WherePasswordHasSuffix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.PasswordHasSuffix(b.query, v)
	return b
}

// WhereEmailAddressEQ adds a WHERE email_address = ? condition
func (b *UserQueryBuilder) WhereEmailAddressEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.EmailAddressEQ(b.query, v)
	return b
}

// WhereEmailAddressNEQ adds a WHERE email_address != ? condition
func (b *UserQueryBuilder) WhereEmailAddressNEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.EmailAddressNEQ(b.query, v)
	return b
}

// WhereEmailAddressIn adds a WHERE email_address IN (?) condition
func (b *UserQueryBuilder) WhereEmailAddressIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.EmailAddressIn(b.query, v)
	return b
}

// WhereEmailAddressNotIn adds a WHERE email_address NOT IN (?) condition
func (b *UserQueryBuilder) WhereEmailAddressNotIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.EmailAddressNotIn(b.query, v)
	return b
}

// WhereEmailAddressContains adds a WHERE email_address LIKE ? condition
func (b *UserQueryBuilder) WhereEmailAddressContains(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.EmailAddressContains(b.query, v)
	return b
}

// WhereEmailAddressHasPrefix adds a WHERE email_address LIKE ? condition
func (b *UserQueryBuilder) WhereEmailAddressHasPrefix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.EmailAddressHasPrefix(b.query, v)
	return b
}

// WhereEmailAddressHasSuffix adds a WHERE email_address LIKE ? condition
func (b *UserQueryBuilder) WhereEmailAddressHasSuffix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.EmailAddressHasSuffix(b.query, v)
	return b
}

// WhereProfilePicURLEQ adds a WHERE profile_pic_url = ? condition
func (b *UserQueryBuilder) WhereProfilePicURLEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ProfilePicURLEQ(b.query, v)
	return b
}

// WhereProfilePicURLNEQ adds a WHERE profile_pic_url != ? condition
func (b *UserQueryBuilder) WhereProfilePicURLNEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ProfilePicURLNEQ(b.query, v)
	return b
}

// WhereProfilePicURLIn adds a WHERE profile_pic_url IN (?) condition
func (b *UserQueryBuilder) WhereProfilePicURLIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.ProfilePicURLIn(b.query, v)
	return b
}

// WhereProfilePicURLNotIn adds a WHERE profile_pic_url NOT IN (?) condition
func (b *UserQueryBuilder) WhereProfilePicURLNotIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.ProfilePicURLNotIn(b.query, v)
	return b
}

// WhereProfilePicURLContains adds a WHERE profile_pic_url LIKE ? condition
func (b *UserQueryBuilder) WhereProfilePicURLContains(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ProfilePicURLContains(b.query, v)
	return b
}

// WhereProfilePicURLHasPrefix adds a WHERE profile_pic_url LIKE ? condition
func (b *UserQueryBuilder) WhereProfilePicURLHasPrefix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ProfilePicURLHasPrefix(b.query, v)
	return b
}

// WhereProfilePicURLHasSuffix adds a WHERE profile_pic_url LIKE ? condition
func (b *UserQueryBuilder) WhereProfilePicURLHasSuffix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ProfilePicURLHasSuffix(b.query, v)
	return b
}

// WhereThumbnailURLEQ adds a WHERE thumbnail_url = ? condition
func (b *UserQueryBuilder) WhereThumbnailURLEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ThumbnailURLEQ(b.query, v)
	return b
}

// WhereThumbnailURLNEQ adds a WHERE thumbnail_url != ? condition
func (b *UserQueryBuilder) WhereThumbnailURLNEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ThumbnailURLNEQ(b.query, v)
	return b
}

// WhereThumbnailURLIn adds a WHERE thumbnail_url IN (?) condition
func (b *UserQueryBuilder) WhereThumbnailURLIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.ThumbnailURLIn(b.query, v)
	return b
}

// WhereThumbnailURLNotIn adds a WHERE thumbnail_url NOT IN (?) condition
func (b *UserQueryBuilder) WhereThumbnailURLNotIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.ThumbnailURLNotIn(b.query, v)
	return b
}

// WhereThumbnailURLContains adds a WHERE thumbnail_url LIKE ? condition
func (b *UserQueryBuilder) WhereThumbnailURLContains(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ThumbnailURLContains(b.query, v)
	return b
}

// WhereThumbnailURLHasPrefix adds a WHERE thumbnail_url LIKE ? condition
func (b *UserQueryBuilder) WhereThumbnailURLHasPrefix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ThumbnailURLHasPrefix(b.query, v)
	return b
}

// WhereThumbnailURLHasSuffix adds a WHERE thumbnail_url LIKE ? condition
func (b *UserQueryBuilder) WhereThumbnailURLHasSuffix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.ThumbnailURLHasSuffix(b.query, v)
	return b
}

// WhereTimezoneEQ adds a WHERE timezone = ? condition
func (b *UserQueryBuilder) WhereTimezoneEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.TimezoneEQ(b.query, v)
	return b
}

// WhereTimezoneNEQ adds a WHERE timezone != ? condition
func (b *UserQueryBuilder) WhereTimezoneNEQ(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.TimezoneNEQ(b.query, v)
	return b
}

// WhereTimezoneIn adds a WHERE timezone IN (?) condition
func (b *UserQueryBuilder) WhereTimezoneIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.TimezoneIn(b.query, v)
	return b
}

// WhereTimezoneNotIn adds a WHERE timezone NOT IN (?) condition
func (b *UserQueryBuilder) WhereTimezoneNotIn(v []string) *UserQueryBuilder {
	b.query = UserQuery.Where.TimezoneNotIn(b.query, v)
	return b
}

// WhereTimezoneContains adds a WHERE timezone LIKE ? condition
func (b *UserQueryBuilder) WhereTimezoneContains(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.TimezoneContains(b.query, v)
	return b
}

// WhereTimezoneHasPrefix adds a WHERE timezone LIKE ? condition
func (b *UserQueryBuilder) WhereTimezoneHasPrefix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.TimezoneHasPrefix(b.query, v)
	return b
}

// WhereTimezoneHasSuffix adds a WHERE timezone LIKE ? condition
func (b *UserQueryBuilder) WhereTimezoneHasSuffix(v string) *UserQueryBuilder {
	b.query = UserQuery.Where.TimezoneHasSuffix(b.query, v)
	return b
}

// WhereTimeFormatEQ adds a WHERE time_format = ? condition
func (b *UserQueryBuilder) WhereTimeFormatEQ(v TimeFormat) *UserQueryBuilder {
	b.query = UserQuery.Where.TimeFormatEQ(b.query, v)
	return b
}

// WhereTimeFormatNEQ adds a WHERE time_format != ? condition
func (b *UserQueryBuilder) WhereTimeFormatNEQ(v TimeFormat) *UserQueryBuilder {
	b.query = UserQuery.Where.TimeFormatNEQ(b.query, v)
	return b
}

// WhereIsLockedEQ adds a WHERE is_locked = ? condition
func (b *UserQueryBuilder) WhereIsLockedEQ(v bool) *UserQueryBuilder {
	b.query = UserQuery.Where.IsLockedEQ(b.query, v)
	return b
}

// WhereIsLockedNEQ adds a WHERE is_locked != ? condition
func (b *UserQueryBuilder) WhereIsLockedNEQ(v bool) *UserQueryBuilder {
	b.query = UserQuery.Where.IsLockedNEQ(b.query, v)
	return b
}

// WhereMustChangePasswordEQ adds a WHERE must_change_password = ? condition
func (b *UserQueryBuilder) WhereMustChangePasswordEQ(v bool) *UserQueryBuilder {
	b.query = UserQuery.Where.MustChangePasswordEQ(b.query, v)
	return b
}

// WhereMustChangePasswordNEQ adds a WHERE must_change_password != ? condition
func (b *UserQueryBuilder) WhereMustChangePasswordNEQ(v bool) *UserQueryBuilder {
	b.query = UserQuery.Where.MustChangePasswordNEQ(b.query, v)
	return b
}

// WhereLastLoginAtEQ adds a WHERE last_login_at = ? condition
func (b *UserQueryBuilder) WhereLastLoginAtEQ(v *int64) *UserQueryBuilder {
	b.query = UserQuery.Where.LastLoginAtEQ(b.query, v)
	return b
}

// WhereLastLoginAtNEQ adds a WHERE last_login_at != ? condition
func (b *UserQueryBuilder) WhereLastLoginAtNEQ(v *int64) *UserQueryBuilder {
	b.query = UserQuery.Where.LastLoginAtNEQ(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *UserQueryBuilder) WhereVersionEQ(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *UserQueryBuilder) WhereVersionNEQ(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *UserQueryBuilder) WhereVersionGT(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *UserQueryBuilder) WhereVersionGTE(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *UserQueryBuilder) WhereVersionLT(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *UserQueryBuilder) WhereVersionLTE(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *UserQueryBuilder) WhereVersionIn(v []int64) *UserQueryBuilder {
	b.query = UserQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *UserQueryBuilder) WhereVersionNotIn(v []int64) *UserQueryBuilder {
	b.query = UserQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *UserQueryBuilder) WhereCreatedAtEQ(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *UserQueryBuilder) WhereCreatedAtNEQ(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *UserQueryBuilder) WhereCreatedAtGT(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *UserQueryBuilder) WhereCreatedAtGTE(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *UserQueryBuilder) WhereCreatedAtLT(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *UserQueryBuilder) WhereCreatedAtLTE(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *UserQueryBuilder) WhereCreatedAtIn(v []int64) *UserQueryBuilder {
	b.query = UserQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *UserQueryBuilder) WhereCreatedAtNotIn(v []int64) *UserQueryBuilder {
	b.query = UserQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *UserQueryBuilder) WhereUpdatedAtEQ(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *UserQueryBuilder) WhereUpdatedAtNEQ(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *UserQueryBuilder) WhereUpdatedAtGT(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *UserQueryBuilder) WhereUpdatedAtGTE(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *UserQueryBuilder) WhereUpdatedAtLT(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *UserQueryBuilder) WhereUpdatedAtLTE(v int64) *UserQueryBuilder {
	b.query = UserQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *UserQueryBuilder) WhereUpdatedAtIn(v []int64) *UserQueryBuilder {
	b.query = UserQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *UserQueryBuilder) WhereUpdatedAtNotIn(v []int64) *UserQueryBuilder {
	b.query = UserQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *UserQueryBuilder) WhereGroup(sep string, fn func(*UserQueryBuilder) *UserQueryBuilder) *UserQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &UserQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *UserQueryBuilder) Where(query string, args ...interface{}) *UserQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *UserQueryBuilder) OrderBy(column string, desc ...bool) *UserQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(UserQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *UserQueryBuilder) Limit(n int) *UserQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *UserQueryBuilder) Offset(n int) *UserQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *UserQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *UserQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *UserQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *UserQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *UserQueryBuilder) All(ctx context.Context) ([]*User, error) {
	var entities []*User
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *UserQueryBuilder) AllWithCount(ctx context.Context) ([]*User, int, error) {
	var entities []*User
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *UserQueryBuilder) One(ctx context.Context) (*User, error) {
	entity := new(User)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *UserQueryBuilder) First(ctx context.Context) (*User, error) {
	entity := new(User)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// UserBuild creates a chainable query builder
func UserBuild(db bun.IDB) *UserQueryBuilder {
	return NewUserQuery(db)
}
