// Code generated by gen-trenova. DO NOT EDIT.

package worker

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// workerPTOFieldConfig provides field configuration for WorkerPTO
type workerPTOFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// WorkerPTOQuery provides type-safe query helpers and constants
var WorkerPTOQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		WorkerID       string
		ApproverID     string
		Status         string
		Type           string
		StartDate      string
		EndDate        string
		Reason         string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		WorkerIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WorkerIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WorkerIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		WorkerIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ApproverIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ApproverIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ApproverIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ApproverIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ApproverIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ApproverIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ            func(q *bun.SelectQuery, v PTOStatus) *bun.SelectQuery
		StatusNEQ           func(q *bun.SelectQuery, v PTOStatus) *bun.SelectQuery
		StatusIn            func(q *bun.SelectQuery, v []PTOStatus) *bun.SelectQuery
		StatusNotIn         func(q *bun.SelectQuery, v []PTOStatus) *bun.SelectQuery
		TypeEQ              func(q *bun.SelectQuery, v PTOType) *bun.SelectQuery
		TypeNEQ             func(q *bun.SelectQuery, v PTOType) *bun.SelectQuery
		TypeIn              func(q *bun.SelectQuery, v []PTOType) *bun.SelectQuery
		TypeNotIn           func(q *bun.SelectQuery, v []PTOType) *bun.SelectQuery
		StartDateEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		StartDateNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		StartDateGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		EndDateNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		EndDateGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ReasonEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReasonNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReasonGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]workerPTOFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
		Worker       string
		Approver     string
	}
}{
	// Table and alias constants
	Table:    "worker_pto",
	Alias:    "wpto",
	IDPrefix: "wpto_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		WorkerID       string
		ApproverID     string
		Status         string
		Type           string
		StartDate      string
		EndDate        string
		Reason         string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		WorkerID:       "worker_id",
		ApproverID:     "approver_id",
		Status:         "status",
		Type:           "type",
		StartDate:      "start_date",
		EndDate:        "end_date",
		Reason:         "reason",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "wpto." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "wpto." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		WorkerIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WorkerIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WorkerIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		WorkerIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ApproverIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ApproverIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ApproverIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ApproverIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ApproverIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ApproverIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ            func(q *bun.SelectQuery, v PTOStatus) *bun.SelectQuery
		StatusNEQ           func(q *bun.SelectQuery, v PTOStatus) *bun.SelectQuery
		StatusIn            func(q *bun.SelectQuery, v []PTOStatus) *bun.SelectQuery
		StatusNotIn         func(q *bun.SelectQuery, v []PTOStatus) *bun.SelectQuery
		TypeEQ              func(q *bun.SelectQuery, v PTOType) *bun.SelectQuery
		TypeNEQ             func(q *bun.SelectQuery, v PTOType) *bun.SelectQuery
		TypeIn              func(q *bun.SelectQuery, v []PTOType) *bun.SelectQuery
		TypeNotIn           func(q *bun.SelectQuery, v []PTOType) *bun.SelectQuery
		StartDateEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		StartDateNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		StartDateGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		StartDateLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		EndDateNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		EndDateGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		EndDateLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ReasonEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReasonNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReasonGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant              func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.organization_id"), bun.In(v))
		},
		WorkerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.worker_id"), v)
		},
		WorkerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.worker_id"), v)
		},
		WorkerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.worker_id"), bun.In(v))
		},
		WorkerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.worker_id"), bun.In(v))
		},
		ApproverIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.approver_id"), v)
		},
		ApproverIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.approver_id"), v)
		},
		ApproverIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.approver_id"), bun.In(v))
		},
		ApproverIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.approver_id"), bun.In(v))
		},
		ApproverIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("wpto.approver_id"))
		},
		ApproverIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("wpto.approver_id"))
		},
		StatusEQ: func(q *bun.SelectQuery, v PTOStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v PTOStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []PTOStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []PTOStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.status"), bun.In(v))
		},
		TypeEQ: func(q *bun.SelectQuery, v PTOType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.type"), v)
		},
		TypeNEQ: func(q *bun.SelectQuery, v PTOType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.type"), v)
		},
		TypeIn: func(q *bun.SelectQuery, v []PTOType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.type"), bun.In(v))
		},
		TypeNotIn: func(q *bun.SelectQuery, v []PTOType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.type"), bun.In(v))
		},
		StartDateEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.start_date"), v)
		},
		StartDateNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.start_date"), v)
		},
		StartDateIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.start_date"), bun.In(v))
		},
		StartDateNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.start_date"), bun.In(v))
		},
		StartDateGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wpto.start_date"), v)
		},
		StartDateGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wpto.start_date"), v)
		},
		StartDateLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wpto.start_date"), v)
		},
		StartDateLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wpto.start_date"), v)
		},
		EndDateEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.end_date"), v)
		},
		EndDateNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.end_date"), v)
		},
		EndDateIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.end_date"), bun.In(v))
		},
		EndDateNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.end_date"), bun.In(v))
		},
		EndDateGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wpto.end_date"), v)
		},
		EndDateGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wpto.end_date"), v)
		},
		EndDateLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wpto.end_date"), v)
		},
		EndDateLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wpto.end_date"), v)
		},
		ReasonEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.reason"), v)
		},
		ReasonNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.reason"), v)
		},
		ReasonIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.reason"), bun.In(v))
		},
		ReasonNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.reason"), bun.In(v))
		},
		ReasonGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wpto.reason"), v)
		},
		ReasonGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wpto.reason"), v)
		},
		ReasonLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wpto.reason"), v)
		},
		ReasonLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wpto.reason"), v)
		},
		ReasonContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wpto.reason"), "%"+v+"%")
		},
		ReasonHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wpto.reason"), v+"%")
		},
		ReasonHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wpto.reason"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wpto.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wpto.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wpto.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wpto.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wpto.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wpto.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wpto.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wpto.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wpto.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wpto.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wpto.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wpto.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wpto.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wpto.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wpto.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wpto.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("wpto.organization_id"), orgID).
				Where("? = ?", bun.Ident("wpto.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("wpto.id"), id).
				Where("? = ?", bun.Ident("wpto.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "wpto." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"wpto.status ASC",
				"wpto.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "wpto.status DESC"
			}
			return "wpto.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "wpto.created_at DESC"
			}
			return "wpto.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "wpto.updated_at DESC"
			}
			return "wpto.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]workerPTOFieldConfig {
		return map[string]workerPTOFieldConfig{
			"id": {
				Name:       "id",
				Column:     "wpto.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "wpto.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "wpto.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"worker_id": {
				Name:       "worker_id",
				Column:     "wpto.worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"approver_id": {
				Name:       "approver_id",
				Column:     "wpto.approver_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "wpto.status",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "wpto.type",
				Sortable:   false,
				Filterable: false,
			},
			"start_date": {
				Name:       "start_date",
				Column:     "wpto.start_date",
				Sortable:   false,
				Filterable: false,
			},
			"end_date": {
				Name:       "end_date",
				Column:     "wpto.end_date",
				Sortable:   false,
				Filterable: false,
			},
			"reason": {
				Name:       "reason",
				Column:     "wpto.reason",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "wpto.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "wpto.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "wpto.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]workerPTOFieldConfig{
			"id": {
				Name:       "id",
				Column:     "wpto.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "wpto.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "wpto.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"worker_id": {
				Name:       "worker_id",
				Column:     "wpto.worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"approver_id": {
				Name:       "approver_id",
				Column:     "wpto.approver_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "wpto.status",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "wpto.type",
				Sortable:   false,
				Filterable: false,
			},
			"start_date": {
				Name:       "start_date",
				Column:     "wpto.start_date",
				Sortable:   false,
				Filterable: false,
			},
			"end_date": {
				Name:       "end_date",
				Column:     "wpto.end_date",
				Sortable:   false,
				Filterable: false,
			},
			"reason": {
				Name:       "reason",
				Column:     "wpto.reason",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "wpto.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "wpto.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "wpto.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]workerPTOFieldConfig{
			"id": {
				Name:       "id",
				Column:     "wpto.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "wpto.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "wpto.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"worker_id": {
				Name:       "worker_id",
				Column:     "wpto.worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"approver_id": {
				Name:       "approver_id",
				Column:     "wpto.approver_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "wpto.status",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "wpto.type",
				Sortable:   false,
				Filterable: false,
			},
			"start_date": {
				Name:       "start_date",
				Column:     "wpto.start_date",
				Sortable:   false,
				Filterable: false,
			},
			"end_date": {
				Name:       "end_date",
				Column:     "wpto.end_date",
				Sortable:   false,
				Filterable: false,
			},
			"reason": {
				Name:       "reason",
				Column:     "wpto.reason",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "wpto.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "wpto.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "wpto.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
		Worker       string
		Approver     string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		Worker:       "Worker",
		Approver:     "Approver",
	},
}

// WorkerPTOQueryBuilder provides a fluent interface for building queries
type WorkerPTOQueryBuilder struct {
	query *bun.SelectQuery
}

// NewWorkerPTOQuery creates a new query builder
func NewWorkerPTOQuery(db bun.IDB) *WorkerPTOQueryBuilder {
	return &WorkerPTOQueryBuilder{
		query: db.NewSelect().Model((*WorkerPTO)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func WorkerPTOFromQuery(q *bun.SelectQuery) *WorkerPTOQueryBuilder {
	return &WorkerPTOQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *WorkerPTOQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *WorkerPTOQueryBuilder) Model(model interface{}) *WorkerPTOQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *WorkerPTOQueryBuilder) WhereIDEQ(v pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *WorkerPTOQueryBuilder) WhereIDNEQ(v pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereIDIn(v []pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereIDNotIn(v []pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *WorkerPTOQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *WorkerPTOQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *WorkerPTOQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *WorkerPTOQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereWorkerIDEQ adds a WHERE worker_id = ? condition
func (b *WorkerPTOQueryBuilder) WhereWorkerIDEQ(v pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.WorkerIDEQ(b.query, v)
	return b
}

// WhereWorkerIDNEQ adds a WHERE worker_id != ? condition
func (b *WorkerPTOQueryBuilder) WhereWorkerIDNEQ(v pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.WorkerIDNEQ(b.query, v)
	return b
}

// WhereWorkerIDIn adds a WHERE worker_id IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereWorkerIDIn(v []pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.WorkerIDIn(b.query, v)
	return b
}

// WhereWorkerIDNotIn adds a WHERE worker_id NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereWorkerIDNotIn(v []pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.WorkerIDNotIn(b.query, v)
	return b
}

// WhereApproverIDEQ adds a WHERE approver_id = ? condition
func (b *WorkerPTOQueryBuilder) WhereApproverIDEQ(v *pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ApproverIDEQ(b.query, v)
	return b
}

// WhereApproverIDNEQ adds a WHERE approver_id != ? condition
func (b *WorkerPTOQueryBuilder) WhereApproverIDNEQ(v *pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ApproverIDNEQ(b.query, v)
	return b
}

// WhereApproverIDIn adds a WHERE approver_id IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereApproverIDIn(v []*pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ApproverIDIn(b.query, v)
	return b
}

// WhereApproverIDNotIn adds a WHERE approver_id NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereApproverIDNotIn(v []*pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ApproverIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *WorkerPTOQueryBuilder) WhereStatusEQ(v PTOStatus) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *WorkerPTOQueryBuilder) WhereStatusNEQ(v PTOStatus) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereStatusIn(v []PTOStatus) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereStatusNotIn(v []PTOStatus) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereTypeEQ adds a WHERE type = ? condition
func (b *WorkerPTOQueryBuilder) WhereTypeEQ(v PTOType) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.TypeEQ(b.query, v)
	return b
}

// WhereTypeNEQ adds a WHERE type != ? condition
func (b *WorkerPTOQueryBuilder) WhereTypeNEQ(v PTOType) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.TypeNEQ(b.query, v)
	return b
}

// WhereTypeIn adds a WHERE type IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereTypeIn(v []PTOType) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.TypeIn(b.query, v)
	return b
}

// WhereTypeNotIn adds a WHERE type NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereTypeNotIn(v []PTOType) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.TypeNotIn(b.query, v)
	return b
}

// WhereStartDateEQ adds a WHERE start_date = ? condition
func (b *WorkerPTOQueryBuilder) WhereStartDateEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StartDateEQ(b.query, v)
	return b
}

// WhereStartDateNEQ adds a WHERE start_date != ? condition
func (b *WorkerPTOQueryBuilder) WhereStartDateNEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StartDateNEQ(b.query, v)
	return b
}

// WhereStartDateGT adds a WHERE start_date > ? condition
func (b *WorkerPTOQueryBuilder) WhereStartDateGT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StartDateGT(b.query, v)
	return b
}

// WhereStartDateGTE adds a WHERE start_date >= ? condition
func (b *WorkerPTOQueryBuilder) WhereStartDateGTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StartDateGTE(b.query, v)
	return b
}

// WhereStartDateLT adds a WHERE start_date < ? condition
func (b *WorkerPTOQueryBuilder) WhereStartDateLT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StartDateLT(b.query, v)
	return b
}

// WhereStartDateLTE adds a WHERE start_date <= ? condition
func (b *WorkerPTOQueryBuilder) WhereStartDateLTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StartDateLTE(b.query, v)
	return b
}

// WhereStartDateIn adds a WHERE start_date IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereStartDateIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StartDateIn(b.query, v)
	return b
}

// WhereStartDateNotIn adds a WHERE start_date NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereStartDateNotIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.StartDateNotIn(b.query, v)
	return b
}

// WhereEndDateEQ adds a WHERE end_date = ? condition
func (b *WorkerPTOQueryBuilder) WhereEndDateEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.EndDateEQ(b.query, v)
	return b
}

// WhereEndDateNEQ adds a WHERE end_date != ? condition
func (b *WorkerPTOQueryBuilder) WhereEndDateNEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.EndDateNEQ(b.query, v)
	return b
}

// WhereEndDateGT adds a WHERE end_date > ? condition
func (b *WorkerPTOQueryBuilder) WhereEndDateGT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.EndDateGT(b.query, v)
	return b
}

// WhereEndDateGTE adds a WHERE end_date >= ? condition
func (b *WorkerPTOQueryBuilder) WhereEndDateGTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.EndDateGTE(b.query, v)
	return b
}

// WhereEndDateLT adds a WHERE end_date < ? condition
func (b *WorkerPTOQueryBuilder) WhereEndDateLT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.EndDateLT(b.query, v)
	return b
}

// WhereEndDateLTE adds a WHERE end_date <= ? condition
func (b *WorkerPTOQueryBuilder) WhereEndDateLTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.EndDateLTE(b.query, v)
	return b
}

// WhereEndDateIn adds a WHERE end_date IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereEndDateIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.EndDateIn(b.query, v)
	return b
}

// WhereEndDateNotIn adds a WHERE end_date NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereEndDateNotIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.EndDateNotIn(b.query, v)
	return b
}

// WhereReasonEQ adds a WHERE reason = ? condition
func (b *WorkerPTOQueryBuilder) WhereReasonEQ(v string) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ReasonEQ(b.query, v)
	return b
}

// WhereReasonNEQ adds a WHERE reason != ? condition
func (b *WorkerPTOQueryBuilder) WhereReasonNEQ(v string) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ReasonNEQ(b.query, v)
	return b
}

// WhereReasonIn adds a WHERE reason IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereReasonIn(v []string) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ReasonIn(b.query, v)
	return b
}

// WhereReasonNotIn adds a WHERE reason NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereReasonNotIn(v []string) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ReasonNotIn(b.query, v)
	return b
}

// WhereReasonContains adds a WHERE reason LIKE ? condition
func (b *WorkerPTOQueryBuilder) WhereReasonContains(v string) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ReasonContains(b.query, v)
	return b
}

// WhereReasonHasPrefix adds a WHERE reason LIKE ? condition
func (b *WorkerPTOQueryBuilder) WhereReasonHasPrefix(v string) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ReasonHasPrefix(b.query, v)
	return b
}

// WhereReasonHasSuffix adds a WHERE reason LIKE ? condition
func (b *WorkerPTOQueryBuilder) WhereReasonHasSuffix(v string) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.ReasonHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *WorkerPTOQueryBuilder) WhereVersionEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *WorkerPTOQueryBuilder) WhereVersionNEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *WorkerPTOQueryBuilder) WhereVersionGT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *WorkerPTOQueryBuilder) WhereVersionGTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *WorkerPTOQueryBuilder) WhereVersionLT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *WorkerPTOQueryBuilder) WhereVersionLTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereVersionIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereVersionNotIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *WorkerPTOQueryBuilder) WhereCreatedAtEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *WorkerPTOQueryBuilder) WhereCreatedAtNEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *WorkerPTOQueryBuilder) WhereCreatedAtGT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *WorkerPTOQueryBuilder) WhereCreatedAtGTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *WorkerPTOQueryBuilder) WhereCreatedAtLT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *WorkerPTOQueryBuilder) WhereCreatedAtLTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereCreatedAtIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereCreatedAtNotIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *WorkerPTOQueryBuilder) WhereUpdatedAtEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *WorkerPTOQueryBuilder) WhereUpdatedAtNEQ(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *WorkerPTOQueryBuilder) WhereUpdatedAtGT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *WorkerPTOQueryBuilder) WhereUpdatedAtGTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *WorkerPTOQueryBuilder) WhereUpdatedAtLT(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *WorkerPTOQueryBuilder) WhereUpdatedAtLTE(v int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereUpdatedAtIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *WorkerPTOQueryBuilder) WhereUpdatedAtNotIn(v []int64) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *WorkerPTOQueryBuilder) WhereTenant(orgID, buID pulid.ID) *WorkerPTOQueryBuilder {
	b.query = WorkerPTOQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *WorkerPTOQueryBuilder) WhereGroup(sep string, fn func(*WorkerPTOQueryBuilder) *WorkerPTOQueryBuilder) *WorkerPTOQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &WorkerPTOQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *WorkerPTOQueryBuilder) Where(query string, args ...interface{}) *WorkerPTOQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *WorkerPTOQueryBuilder) OrderBy(column string, desc ...bool) *WorkerPTOQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(WorkerPTOQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *WorkerPTOQueryBuilder) Limit(n int) *WorkerPTOQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *WorkerPTOQueryBuilder) Offset(n int) *WorkerPTOQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *WorkerPTOQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *WorkerPTOQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *WorkerPTOQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *WorkerPTOQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *WorkerPTOQueryBuilder) All(ctx context.Context) ([]*WorkerPTO, error) {
	var entities []*WorkerPTO
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *WorkerPTOQueryBuilder) AllWithCount(ctx context.Context) ([]*WorkerPTO, int, error) {
	var entities []*WorkerPTO
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *WorkerPTOQueryBuilder) One(ctx context.Context) (*WorkerPTO, error) {
	entity := new(WorkerPTO)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *WorkerPTOQueryBuilder) First(ctx context.Context) (*WorkerPTO, error) {
	entity := new(WorkerPTO)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// WorkerPTOBuild creates a chainable query builder
func WorkerPTOBuild(db bun.IDB) *WorkerPTOQueryBuilder {
	return NewWorkerPTOQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *WorkerPTOQueryBuilder) LoadBusinessUnit() *WorkerPTOQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *WorkerPTOQueryBuilder) LoadOrganization() *WorkerPTOQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadWorker loads the Worker relationship
func (b *WorkerPTOQueryBuilder) LoadWorker() *WorkerPTOQueryBuilder {
	b.query = b.query.Relation("Worker")
	return b
}

// LoadApprover loads the Approver relationship
func (b *WorkerPTOQueryBuilder) LoadApprover() *WorkerPTOQueryBuilder {
	b.query = b.query.Relation("Approver")
	return b
}

// LoadAllRelations loads all relationships for WorkerPTO
func (b *WorkerPTOQueryBuilder) LoadAllRelations() *WorkerPTOQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadWorker()
	b.LoadApprover()
	return b
}

// WorkerPTORelationChain provides a fluent API for building nested relationship chains
type WorkerPTORelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewWorkerPTORelationChain creates a new relation chain builder
func NewWorkerPTORelationChain() *WorkerPTORelationChain {
	return &WorkerPTORelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *WorkerPTORelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *WorkerPTORelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *WorkerPTORelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *WorkerPTORelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *WorkerPTOQueryBuilder) WithBusinessUnit() *WorkerPTORelationChainBuilder {
	chain := &WorkerPTORelationChainBuilder{
		parent: b,
		chain:  NewWorkerPTORelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *WorkerPTOQueryBuilder) WithOrganization() *WorkerPTORelationChainBuilder {
	chain := &WorkerPTORelationChainBuilder{
		parent: b,
		chain:  NewWorkerPTORelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithWorker creates a relation chain starting with Worker
func (b *WorkerPTOQueryBuilder) WithWorker() *WorkerPTORelationChainBuilder {
	chain := &WorkerPTORelationChainBuilder{
		parent: b,
		chain:  NewWorkerPTORelationChain(),
	}
	chain.chain.Add("Worker")
	return chain
}

// WithApprover creates a relation chain starting with Approver
func (b *WorkerPTOQueryBuilder) WithApprover() *WorkerPTORelationChainBuilder {
	chain := &WorkerPTORelationChainBuilder{
		parent: b,
		chain:  NewWorkerPTORelationChain(),
	}
	chain.chain.Add("Approver")
	return chain
}

// WorkerPTORelationChainBuilder provides fluent API for building nested relations
type WorkerPTORelationChainBuilder struct {
	parent *WorkerPTOQueryBuilder
	chain  *WorkerPTORelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *WorkerPTORelationChainBuilder) Load() *WorkerPTOQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *WorkerPTORelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *WorkerPTORelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *WorkerPTORelationChainBuilder) OrderBy(order string) *WorkerPTORelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *WorkerPTORelationChainBuilder) Where(condition string, args ...interface{}) *WorkerPTORelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
