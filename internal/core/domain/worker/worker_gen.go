// Code generated by gen-trenova. DO NOT EDIT.

package worker

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// workerFieldConfig provides field configuration for Worker
type workerFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// WorkerQuery provides type-safe query helpers and constants
var WorkerQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		StateID           string
		FleetCodeID       string
		Status            string
		Type              string
		ProfilePicURL     string
		FirstName         string
		LastName          string
		WholeName         string
		AddressLine1      string
		AddressLine2      string
		City              string
		PostalCode        string
		Gender            string
		CanBeAssigned     string
		AssignmentBlocked string
		Version           string
		CreatedAt         string
		UpdatedAt         string
		SearchVector      string
		Rank              string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		FleetCodeIDEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDNEQ             func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDNotIn           func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		FleetCodeIDIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                   func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                  func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                   func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		TypeEQ                     func(q *bun.SelectQuery, v WorkerType) *bun.SelectQuery
		TypeNEQ                    func(q *bun.SelectQuery, v WorkerType) *bun.SelectQuery
		TypeIn                     func(q *bun.SelectQuery, v []WorkerType) *bun.SelectQuery
		TypeNotIn                  func(q *bun.SelectQuery, v []WorkerType) *bun.SelectQuery
		ProfilePicURLEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProfilePicURLNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProfilePicURLGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FirstNameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FirstNameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LastNameNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LastNameGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		WholeNameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		WholeNameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		GenderEQ                   func(q *bun.SelectQuery, v domain.Gender) *bun.SelectQuery
		GenderNEQ                  func(q *bun.SelectQuery, v domain.Gender) *bun.SelectQuery
		GenderIn                   func(q *bun.SelectQuery, v []domain.Gender) *bun.SelectQuery
		GenderNotIn                func(q *bun.SelectQuery, v []domain.Gender) *bun.SelectQuery
		CanBeAssignedEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CanBeAssignedNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CanBeAssignedIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CanBeAssignedNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AssignmentBlockedEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AssignmentBlockedNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AssignmentBlockedGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix              func(q *bun.SelectQuery, v string) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]workerFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
		State        string
		Profile      string
		PTO          string
	}
}{
	// Table and alias constants
	Table:    "workers",
	Alias:    "wrk",
	IDPrefix: "wrk_",

	// Field names
	Field: struct {
		ID                string
		BusinessUnitID    string
		OrganizationID    string
		StateID           string
		FleetCodeID       string
		Status            string
		Type              string
		ProfilePicURL     string
		FirstName         string
		LastName          string
		WholeName         string
		AddressLine1      string
		AddressLine2      string
		City              string
		PostalCode        string
		Gender            string
		CanBeAssigned     string
		AssignmentBlocked string
		Version           string
		CreatedAt         string
		UpdatedAt         string
		SearchVector      string
		Rank              string
	}{
		ID:                "id",
		BusinessUnitID:    "business_unit_id",
		OrganizationID:    "organization_id",
		StateID:           "state_id",
		FleetCodeID:       "fleet_code_id",
		Status:            "status",
		Type:              "type",
		ProfilePicURL:     "profile_pic_url",
		FirstName:         "first_name",
		LastName:          "last_name",
		WholeName:         "whole_name",
		AddressLine1:      "address_line1",
		AddressLine2:      "address_line2",
		City:              "city",
		PostalCode:        "postal_code",
		Gender:            "gender",
		CanBeAssigned:     "can_be_assigned",
		AssignmentBlocked: "assignment_blocked",
		Version:           "version",
		CreatedAt:         "created_at",
		UpdatedAt:         "updated_at",
		SearchVector:      "search_vector",
		Rank:              "rank",
	},

	// Column helpers
	Column: func(field string) string {
		return "wrk." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "wrk." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		FleetCodeIDEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDNEQ             func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDNotIn           func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		FleetCodeIDIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                   func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                  func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                   func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		TypeEQ                     func(q *bun.SelectQuery, v WorkerType) *bun.SelectQuery
		TypeNEQ                    func(q *bun.SelectQuery, v WorkerType) *bun.SelectQuery
		TypeIn                     func(q *bun.SelectQuery, v []WorkerType) *bun.SelectQuery
		TypeNotIn                  func(q *bun.SelectQuery, v []WorkerType) *bun.SelectQuery
		ProfilePicURLEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProfilePicURLNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ProfilePicURLGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ProfilePicURLHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FirstNameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FirstNameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FirstNameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LastNameNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LastNameGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastNameHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		WholeNameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		WholeNameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		WholeNameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		GenderEQ                   func(q *bun.SelectQuery, v domain.Gender) *bun.SelectQuery
		GenderNEQ                  func(q *bun.SelectQuery, v domain.Gender) *bun.SelectQuery
		GenderIn                   func(q *bun.SelectQuery, v []domain.Gender) *bun.SelectQuery
		GenderNotIn                func(q *bun.SelectQuery, v []domain.Gender) *bun.SelectQuery
		CanBeAssignedEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CanBeAssignedNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		CanBeAssignedIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CanBeAssignedNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AssignmentBlockedEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AssignmentBlockedNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AssignmentBlockedGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AssignmentBlockedHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		Tenant                     func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.organization_id"), bun.In(v))
		},
		StateIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.state_id"), v)
		},
		StateIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.state_id"), v)
		},
		StateIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.state_id"), bun.In(v))
		},
		StateIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.state_id"), bun.In(v))
		},
		FleetCodeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.fleet_code_id"), v)
		},
		FleetCodeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.fleet_code_id"), v)
		},
		FleetCodeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.fleet_code_id"), bun.In(v))
		},
		FleetCodeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.fleet_code_id"), bun.In(v))
		},
		FleetCodeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("wrk.fleet_code_id"))
		},
		FleetCodeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("wrk.fleet_code_id"))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.status"), bun.In(v))
		},
		TypeEQ: func(q *bun.SelectQuery, v WorkerType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.type"), v)
		},
		TypeNEQ: func(q *bun.SelectQuery, v WorkerType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.type"), v)
		},
		TypeIn: func(q *bun.SelectQuery, v []WorkerType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.type"), bun.In(v))
		},
		TypeNotIn: func(q *bun.SelectQuery, v []WorkerType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.type"), bun.In(v))
		},
		ProfilePicURLEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.profile_pic_url"), v)
		},
		ProfilePicURLNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.profile_pic_url"), v)
		},
		ProfilePicURLIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.profile_pic_url"), bun.In(v))
		},
		ProfilePicURLNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.profile_pic_url"), bun.In(v))
		},
		ProfilePicURLGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.profile_pic_url"), v)
		},
		ProfilePicURLGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.profile_pic_url"), v)
		},
		ProfilePicURLLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.profile_pic_url"), v)
		},
		ProfilePicURLLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.profile_pic_url"), v)
		},
		ProfilePicURLContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.profile_pic_url"), "%"+v+"%")
		},
		ProfilePicURLHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.profile_pic_url"), v+"%")
		},
		ProfilePicURLHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.profile_pic_url"), "%"+v)
		},
		FirstNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.first_name"), v)
		},
		FirstNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.first_name"), v)
		},
		FirstNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.first_name"), bun.In(v))
		},
		FirstNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.first_name"), bun.In(v))
		},
		FirstNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.first_name"), v)
		},
		FirstNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.first_name"), v)
		},
		FirstNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.first_name"), v)
		},
		FirstNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.first_name"), v)
		},
		FirstNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.first_name"), "%"+v+"%")
		},
		FirstNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.first_name"), v+"%")
		},
		FirstNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.first_name"), "%"+v)
		},
		LastNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.last_name"), v)
		},
		LastNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.last_name"), v)
		},
		LastNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.last_name"), bun.In(v))
		},
		LastNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.last_name"), bun.In(v))
		},
		LastNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.last_name"), v)
		},
		LastNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.last_name"), v)
		},
		LastNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.last_name"), v)
		},
		LastNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.last_name"), v)
		},
		LastNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.last_name"), "%"+v+"%")
		},
		LastNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.last_name"), v+"%")
		},
		LastNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.last_name"), "%"+v)
		},
		WholeNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.whole_name"), v)
		},
		WholeNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.whole_name"), v)
		},
		WholeNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.whole_name"), bun.In(v))
		},
		WholeNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.whole_name"), bun.In(v))
		},
		WholeNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.whole_name"), v)
		},
		WholeNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.whole_name"), v)
		},
		WholeNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.whole_name"), v)
		},
		WholeNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.whole_name"), v)
		},
		WholeNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.whole_name"), "%"+v+"%")
		},
		WholeNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.whole_name"), v+"%")
		},
		WholeNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.whole_name"), "%"+v)
		},
		AddressLine1EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.address_line1"), v)
		},
		AddressLine1NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.address_line1"), v)
		},
		AddressLine1In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.address_line1"), bun.In(v))
		},
		AddressLine1NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.address_line1"), bun.In(v))
		},
		AddressLine1GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.address_line1"), v)
		},
		AddressLine1GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.address_line1"), v)
		},
		AddressLine1LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.address_line1"), v)
		},
		AddressLine1LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.address_line1"), v)
		},
		AddressLine1Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.address_line1"), "%"+v+"%")
		},
		AddressLine1HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.address_line1"), v+"%")
		},
		AddressLine1HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.address_line1"), "%"+v)
		},
		AddressLine2EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.address_line2"), v)
		},
		AddressLine2NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.address_line2"), v)
		},
		AddressLine2In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.address_line2"), bun.In(v))
		},
		AddressLine2NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.address_line2"), bun.In(v))
		},
		AddressLine2GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.address_line2"), v)
		},
		AddressLine2GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.address_line2"), v)
		},
		AddressLine2LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.address_line2"), v)
		},
		AddressLine2LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.address_line2"), v)
		},
		AddressLine2Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.address_line2"), "%"+v+"%")
		},
		AddressLine2HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.address_line2"), v+"%")
		},
		AddressLine2HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.address_line2"), "%"+v)
		},
		CityEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.city"), v)
		},
		CityNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.city"), v)
		},
		CityIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.city"), bun.In(v))
		},
		CityNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.city"), bun.In(v))
		},
		CityGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.city"), v)
		},
		CityGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.city"), v)
		},
		CityLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.city"), v)
		},
		CityLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.city"), v)
		},
		CityContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.city"), "%"+v+"%")
		},
		CityHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.city"), v+"%")
		},
		CityHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.city"), "%"+v)
		},
		PostalCodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.postal_code"), v)
		},
		PostalCodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.postal_code"), v)
		},
		PostalCodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.postal_code"), bun.In(v))
		},
		PostalCodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.postal_code"), bun.In(v))
		},
		PostalCodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.postal_code"), v)
		},
		PostalCodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.postal_code"), v)
		},
		PostalCodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.postal_code"), v)
		},
		PostalCodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.postal_code"), v)
		},
		PostalCodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.postal_code"), "%"+v+"%")
		},
		PostalCodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.postal_code"), v+"%")
		},
		PostalCodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.postal_code"), "%"+v)
		},
		GenderEQ: func(q *bun.SelectQuery, v domain.Gender) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.gender"), v)
		},
		GenderNEQ: func(q *bun.SelectQuery, v domain.Gender) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.gender"), v)
		},
		GenderIn: func(q *bun.SelectQuery, v []domain.Gender) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.gender"), bun.In(v))
		},
		GenderNotIn: func(q *bun.SelectQuery, v []domain.Gender) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.gender"), bun.In(v))
		},
		CanBeAssignedEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.can_be_assigned"), v)
		},
		CanBeAssignedNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.can_be_assigned"), v)
		},
		CanBeAssignedIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.can_be_assigned"), bun.In(v))
		},
		CanBeAssignedNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.can_be_assigned"), bun.In(v))
		},
		AssignmentBlockedEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.assignment_blocked"), v)
		},
		AssignmentBlockedNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.assignment_blocked"), v)
		},
		AssignmentBlockedIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.assignment_blocked"), bun.In(v))
		},
		AssignmentBlockedNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.assignment_blocked"), bun.In(v))
		},
		AssignmentBlockedGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.assignment_blocked"), v)
		},
		AssignmentBlockedGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.assignment_blocked"), v)
		},
		AssignmentBlockedLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.assignment_blocked"), v)
		},
		AssignmentBlockedLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.assignment_blocked"), v)
		},
		AssignmentBlockedContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.assignment_blocked"), "%"+v+"%")
		},
		AssignmentBlockedHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.assignment_blocked"), v+"%")
		},
		AssignmentBlockedHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.assignment_blocked"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.updated_at"), v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wrk.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wrk.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wrk.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wrk.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wrk.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wrk.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wrk.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wrk.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wrk.rank"), "%"+v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("wrk.organization_id"), orgID).
				Where("? = ?", bun.Ident("wrk.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("wrk.id"), id).
				Where("? = ?", bun.Ident("wrk.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "wrk." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"wrk.status ASC",
				"wrk.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "wrk.status DESC"
			}
			return "wrk.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "wrk.created_at DESC"
			}
			return "wrk.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "wrk.updated_at DESC"
			}
			return "wrk.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]workerFieldConfig {
		return map[string]workerFieldConfig{
			"id": {
				Name:       "id",
				Column:     "wrk.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "wrk.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "wrk.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "wrk.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"fleet_code_id": {
				Name:       "fleet_code_id",
				Column:     "wrk.fleet_code_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "wrk.status",
				Sortable:   true,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "wrk.type",
				Sortable:   false,
				Filterable: false,
			},
			"profile_pic_url": {
				Name:       "profile_pic_url",
				Column:     "wrk.profile_pic_url",
				Sortable:   false,
				Filterable: true,
			},
			"first_name": {
				Name:       "first_name",
				Column:     "wrk.first_name",
				Sortable:   false,
				Filterable: true,
			},
			"last_name": {
				Name:       "last_name",
				Column:     "wrk.last_name",
				Sortable:   false,
				Filterable: true,
			},
			"whole_name": {
				Name:       "whole_name",
				Column:     "wrk.whole_name",
				Sortable:   false,
				Filterable: true,
			},
			"address_line1": {
				Name:       "address_line1",
				Column:     "wrk.address_line1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line2": {
				Name:       "address_line2",
				Column:     "wrk.address_line2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "wrk.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "wrk.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"gender": {
				Name:       "gender",
				Column:     "wrk.gender",
				Sortable:   false,
				Filterable: false,
			},
			"can_be_assigned": {
				Name:       "can_be_assigned",
				Column:     "wrk.can_be_assigned",
				Sortable:   false,
				Filterable: false,
			},
			"assignment_blocked": {
				Name:       "assignment_blocked",
				Column:     "wrk.assignment_blocked",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "wrk.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "wrk.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "wrk.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "wrk.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "wrk.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]workerFieldConfig{
			"id": {
				Name:       "id",
				Column:     "wrk.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "wrk.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "wrk.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "wrk.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"fleet_code_id": {
				Name:       "fleet_code_id",
				Column:     "wrk.fleet_code_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "wrk.status",
				Sortable:   true,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "wrk.type",
				Sortable:   false,
				Filterable: false,
			},
			"profile_pic_url": {
				Name:       "profile_pic_url",
				Column:     "wrk.profile_pic_url",
				Sortable:   false,
				Filterable: true,
			},
			"first_name": {
				Name:       "first_name",
				Column:     "wrk.first_name",
				Sortable:   false,
				Filterable: true,
			},
			"last_name": {
				Name:       "last_name",
				Column:     "wrk.last_name",
				Sortable:   false,
				Filterable: true,
			},
			"whole_name": {
				Name:       "whole_name",
				Column:     "wrk.whole_name",
				Sortable:   false,
				Filterable: true,
			},
			"address_line1": {
				Name:       "address_line1",
				Column:     "wrk.address_line1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line2": {
				Name:       "address_line2",
				Column:     "wrk.address_line2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "wrk.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "wrk.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"gender": {
				Name:       "gender",
				Column:     "wrk.gender",
				Sortable:   false,
				Filterable: false,
			},
			"can_be_assigned": {
				Name:       "can_be_assigned",
				Column:     "wrk.can_be_assigned",
				Sortable:   false,
				Filterable: false,
			},
			"assignment_blocked": {
				Name:       "assignment_blocked",
				Column:     "wrk.assignment_blocked",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "wrk.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "wrk.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "wrk.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "wrk.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "wrk.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]workerFieldConfig{
			"id": {
				Name:       "id",
				Column:     "wrk.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "wrk.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "wrk.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "wrk.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"fleet_code_id": {
				Name:       "fleet_code_id",
				Column:     "wrk.fleet_code_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "wrk.status",
				Sortable:   true,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "wrk.type",
				Sortable:   false,
				Filterable: false,
			},
			"profile_pic_url": {
				Name:       "profile_pic_url",
				Column:     "wrk.profile_pic_url",
				Sortable:   false,
				Filterable: true,
			},
			"first_name": {
				Name:       "first_name",
				Column:     "wrk.first_name",
				Sortable:   false,
				Filterable: true,
			},
			"last_name": {
				Name:       "last_name",
				Column:     "wrk.last_name",
				Sortable:   false,
				Filterable: true,
			},
			"whole_name": {
				Name:       "whole_name",
				Column:     "wrk.whole_name",
				Sortable:   false,
				Filterable: true,
			},
			"address_line1": {
				Name:       "address_line1",
				Column:     "wrk.address_line1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line2": {
				Name:       "address_line2",
				Column:     "wrk.address_line2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "wrk.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "wrk.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"gender": {
				Name:       "gender",
				Column:     "wrk.gender",
				Sortable:   false,
				Filterable: false,
			},
			"can_be_assigned": {
				Name:       "can_be_assigned",
				Column:     "wrk.can_be_assigned",
				Sortable:   false,
				Filterable: false,
			},
			"assignment_blocked": {
				Name:       "assignment_blocked",
				Column:     "wrk.assignment_blocked",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "wrk.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "wrk.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "wrk.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "wrk.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "wrk.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
		State        string
		Profile      string
		PTO          string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		State:        "State",
		Profile:      "Profile",
		PTO:          "PTO",
	},
}

// WorkerQueryBuilder provides a fluent interface for building queries
type WorkerQueryBuilder struct {
	query *bun.SelectQuery
}

// NewWorkerQuery creates a new query builder
func NewWorkerQuery(db bun.IDB) *WorkerQueryBuilder {
	return &WorkerQueryBuilder{
		query: db.NewSelect().Model((*Worker)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func WorkerFromQuery(q *bun.SelectQuery) *WorkerQueryBuilder {
	return &WorkerQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *WorkerQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *WorkerQueryBuilder) Model(model interface{}) *WorkerQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *WorkerQueryBuilder) WhereIDEQ(v pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *WorkerQueryBuilder) WhereIDNEQ(v pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *WorkerQueryBuilder) WhereIDIn(v []pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereIDNotIn(v []pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *WorkerQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *WorkerQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *WorkerQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *WorkerQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *WorkerQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *WorkerQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereStateIDEQ adds a WHERE state_id = ? condition
func (b *WorkerQueryBuilder) WhereStateIDEQ(v pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.StateIDEQ(b.query, v)
	return b
}

// WhereStateIDNEQ adds a WHERE state_id != ? condition
func (b *WorkerQueryBuilder) WhereStateIDNEQ(v pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.StateIDNEQ(b.query, v)
	return b
}

// WhereStateIDIn adds a WHERE state_id IN (?) condition
func (b *WorkerQueryBuilder) WhereStateIDIn(v []pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.StateIDIn(b.query, v)
	return b
}

// WhereStateIDNotIn adds a WHERE state_id NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereStateIDNotIn(v []pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.StateIDNotIn(b.query, v)
	return b
}

// WhereFleetCodeIDEQ adds a WHERE fleet_code_id = ? condition
func (b *WorkerQueryBuilder) WhereFleetCodeIDEQ(v *pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FleetCodeIDEQ(b.query, v)
	return b
}

// WhereFleetCodeIDNEQ adds a WHERE fleet_code_id != ? condition
func (b *WorkerQueryBuilder) WhereFleetCodeIDNEQ(v *pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FleetCodeIDNEQ(b.query, v)
	return b
}

// WhereFleetCodeIDIn adds a WHERE fleet_code_id IN (?) condition
func (b *WorkerQueryBuilder) WhereFleetCodeIDIn(v []*pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FleetCodeIDIn(b.query, v)
	return b
}

// WhereFleetCodeIDNotIn adds a WHERE fleet_code_id NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereFleetCodeIDNotIn(v []*pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FleetCodeIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *WorkerQueryBuilder) WhereStatusEQ(v domain.Status) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *WorkerQueryBuilder) WhereStatusNEQ(v domain.Status) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *WorkerQueryBuilder) WhereStatusIn(v []domain.Status) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereStatusNotIn(v []domain.Status) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereTypeEQ adds a WHERE type = ? condition
func (b *WorkerQueryBuilder) WhereTypeEQ(v WorkerType) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.TypeEQ(b.query, v)
	return b
}

// WhereTypeNEQ adds a WHERE type != ? condition
func (b *WorkerQueryBuilder) WhereTypeNEQ(v WorkerType) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.TypeNEQ(b.query, v)
	return b
}

// WhereTypeIn adds a WHERE type IN (?) condition
func (b *WorkerQueryBuilder) WhereTypeIn(v []WorkerType) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.TypeIn(b.query, v)
	return b
}

// WhereTypeNotIn adds a WHERE type NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereTypeNotIn(v []WorkerType) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.TypeNotIn(b.query, v)
	return b
}

// WhereProfilePicURLEQ adds a WHERE profile_pic_url = ? condition
func (b *WorkerQueryBuilder) WhereProfilePicURLEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.ProfilePicURLEQ(b.query, v)
	return b
}

// WhereProfilePicURLNEQ adds a WHERE profile_pic_url != ? condition
func (b *WorkerQueryBuilder) WhereProfilePicURLNEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.ProfilePicURLNEQ(b.query, v)
	return b
}

// WhereProfilePicURLIn adds a WHERE profile_pic_url IN (?) condition
func (b *WorkerQueryBuilder) WhereProfilePicURLIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.ProfilePicURLIn(b.query, v)
	return b
}

// WhereProfilePicURLNotIn adds a WHERE profile_pic_url NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereProfilePicURLNotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.ProfilePicURLNotIn(b.query, v)
	return b
}

// WhereProfilePicURLContains adds a WHERE profile_pic_url LIKE ? condition
func (b *WorkerQueryBuilder) WhereProfilePicURLContains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.ProfilePicURLContains(b.query, v)
	return b
}

// WhereProfilePicURLHasPrefix adds a WHERE profile_pic_url LIKE ? condition
func (b *WorkerQueryBuilder) WhereProfilePicURLHasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.ProfilePicURLHasPrefix(b.query, v)
	return b
}

// WhereProfilePicURLHasSuffix adds a WHERE profile_pic_url LIKE ? condition
func (b *WorkerQueryBuilder) WhereProfilePicURLHasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.ProfilePicURLHasSuffix(b.query, v)
	return b
}

// WhereFirstNameEQ adds a WHERE first_name = ? condition
func (b *WorkerQueryBuilder) WhereFirstNameEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FirstNameEQ(b.query, v)
	return b
}

// WhereFirstNameNEQ adds a WHERE first_name != ? condition
func (b *WorkerQueryBuilder) WhereFirstNameNEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FirstNameNEQ(b.query, v)
	return b
}

// WhereFirstNameIn adds a WHERE first_name IN (?) condition
func (b *WorkerQueryBuilder) WhereFirstNameIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FirstNameIn(b.query, v)
	return b
}

// WhereFirstNameNotIn adds a WHERE first_name NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereFirstNameNotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FirstNameNotIn(b.query, v)
	return b
}

// WhereFirstNameContains adds a WHERE first_name LIKE ? condition
func (b *WorkerQueryBuilder) WhereFirstNameContains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FirstNameContains(b.query, v)
	return b
}

// WhereFirstNameHasPrefix adds a WHERE first_name LIKE ? condition
func (b *WorkerQueryBuilder) WhereFirstNameHasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FirstNameHasPrefix(b.query, v)
	return b
}

// WhereFirstNameHasSuffix adds a WHERE first_name LIKE ? condition
func (b *WorkerQueryBuilder) WhereFirstNameHasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.FirstNameHasSuffix(b.query, v)
	return b
}

// WhereLastNameEQ adds a WHERE last_name = ? condition
func (b *WorkerQueryBuilder) WhereLastNameEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.LastNameEQ(b.query, v)
	return b
}

// WhereLastNameNEQ adds a WHERE last_name != ? condition
func (b *WorkerQueryBuilder) WhereLastNameNEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.LastNameNEQ(b.query, v)
	return b
}

// WhereLastNameIn adds a WHERE last_name IN (?) condition
func (b *WorkerQueryBuilder) WhereLastNameIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.LastNameIn(b.query, v)
	return b
}

// WhereLastNameNotIn adds a WHERE last_name NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereLastNameNotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.LastNameNotIn(b.query, v)
	return b
}

// WhereLastNameContains adds a WHERE last_name LIKE ? condition
func (b *WorkerQueryBuilder) WhereLastNameContains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.LastNameContains(b.query, v)
	return b
}

// WhereLastNameHasPrefix adds a WHERE last_name LIKE ? condition
func (b *WorkerQueryBuilder) WhereLastNameHasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.LastNameHasPrefix(b.query, v)
	return b
}

// WhereLastNameHasSuffix adds a WHERE last_name LIKE ? condition
func (b *WorkerQueryBuilder) WhereLastNameHasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.LastNameHasSuffix(b.query, v)
	return b
}

// WhereWholeNameEQ adds a WHERE whole_name = ? condition
func (b *WorkerQueryBuilder) WhereWholeNameEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.WholeNameEQ(b.query, v)
	return b
}

// WhereWholeNameNEQ adds a WHERE whole_name != ? condition
func (b *WorkerQueryBuilder) WhereWholeNameNEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.WholeNameNEQ(b.query, v)
	return b
}

// WhereWholeNameIn adds a WHERE whole_name IN (?) condition
func (b *WorkerQueryBuilder) WhereWholeNameIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.WholeNameIn(b.query, v)
	return b
}

// WhereWholeNameNotIn adds a WHERE whole_name NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereWholeNameNotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.WholeNameNotIn(b.query, v)
	return b
}

// WhereWholeNameContains adds a WHERE whole_name LIKE ? condition
func (b *WorkerQueryBuilder) WhereWholeNameContains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.WholeNameContains(b.query, v)
	return b
}

// WhereWholeNameHasPrefix adds a WHERE whole_name LIKE ? condition
func (b *WorkerQueryBuilder) WhereWholeNameHasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.WholeNameHasPrefix(b.query, v)
	return b
}

// WhereWholeNameHasSuffix adds a WHERE whole_name LIKE ? condition
func (b *WorkerQueryBuilder) WhereWholeNameHasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.WholeNameHasSuffix(b.query, v)
	return b
}

// WhereAddressLine1EQ adds a WHERE address_line1 = ? condition
func (b *WorkerQueryBuilder) WhereAddressLine1EQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine1EQ(b.query, v)
	return b
}

// WhereAddressLine1NEQ adds a WHERE address_line1 != ? condition
func (b *WorkerQueryBuilder) WhereAddressLine1NEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine1NEQ(b.query, v)
	return b
}

// WhereAddressLine1In adds a WHERE address_line1 IN (?) condition
func (b *WorkerQueryBuilder) WhereAddressLine1In(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine1In(b.query, v)
	return b
}

// WhereAddressLine1NotIn adds a WHERE address_line1 NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereAddressLine1NotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine1NotIn(b.query, v)
	return b
}

// WhereAddressLine1Contains adds a WHERE address_line1 LIKE ? condition
func (b *WorkerQueryBuilder) WhereAddressLine1Contains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine1Contains(b.query, v)
	return b
}

// WhereAddressLine1HasPrefix adds a WHERE address_line1 LIKE ? condition
func (b *WorkerQueryBuilder) WhereAddressLine1HasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine1HasPrefix(b.query, v)
	return b
}

// WhereAddressLine1HasSuffix adds a WHERE address_line1 LIKE ? condition
func (b *WorkerQueryBuilder) WhereAddressLine1HasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine1HasSuffix(b.query, v)
	return b
}

// WhereAddressLine2EQ adds a WHERE address_line2 = ? condition
func (b *WorkerQueryBuilder) WhereAddressLine2EQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine2EQ(b.query, v)
	return b
}

// WhereAddressLine2NEQ adds a WHERE address_line2 != ? condition
func (b *WorkerQueryBuilder) WhereAddressLine2NEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine2NEQ(b.query, v)
	return b
}

// WhereAddressLine2In adds a WHERE address_line2 IN (?) condition
func (b *WorkerQueryBuilder) WhereAddressLine2In(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine2In(b.query, v)
	return b
}

// WhereAddressLine2NotIn adds a WHERE address_line2 NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereAddressLine2NotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine2NotIn(b.query, v)
	return b
}

// WhereAddressLine2Contains adds a WHERE address_line2 LIKE ? condition
func (b *WorkerQueryBuilder) WhereAddressLine2Contains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine2Contains(b.query, v)
	return b
}

// WhereAddressLine2HasPrefix adds a WHERE address_line2 LIKE ? condition
func (b *WorkerQueryBuilder) WhereAddressLine2HasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine2HasPrefix(b.query, v)
	return b
}

// WhereAddressLine2HasSuffix adds a WHERE address_line2 LIKE ? condition
func (b *WorkerQueryBuilder) WhereAddressLine2HasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AddressLine2HasSuffix(b.query, v)
	return b
}

// WhereCityEQ adds a WHERE city = ? condition
func (b *WorkerQueryBuilder) WhereCityEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CityEQ(b.query, v)
	return b
}

// WhereCityNEQ adds a WHERE city != ? condition
func (b *WorkerQueryBuilder) WhereCityNEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CityNEQ(b.query, v)
	return b
}

// WhereCityIn adds a WHERE city IN (?) condition
func (b *WorkerQueryBuilder) WhereCityIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CityIn(b.query, v)
	return b
}

// WhereCityNotIn adds a WHERE city NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereCityNotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CityNotIn(b.query, v)
	return b
}

// WhereCityContains adds a WHERE city LIKE ? condition
func (b *WorkerQueryBuilder) WhereCityContains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CityContains(b.query, v)
	return b
}

// WhereCityHasPrefix adds a WHERE city LIKE ? condition
func (b *WorkerQueryBuilder) WhereCityHasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CityHasPrefix(b.query, v)
	return b
}

// WhereCityHasSuffix adds a WHERE city LIKE ? condition
func (b *WorkerQueryBuilder) WhereCityHasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CityHasSuffix(b.query, v)
	return b
}

// WherePostalCodeEQ adds a WHERE postal_code = ? condition
func (b *WorkerQueryBuilder) WherePostalCodeEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.PostalCodeEQ(b.query, v)
	return b
}

// WherePostalCodeNEQ adds a WHERE postal_code != ? condition
func (b *WorkerQueryBuilder) WherePostalCodeNEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.PostalCodeNEQ(b.query, v)
	return b
}

// WherePostalCodeIn adds a WHERE postal_code IN (?) condition
func (b *WorkerQueryBuilder) WherePostalCodeIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.PostalCodeIn(b.query, v)
	return b
}

// WherePostalCodeNotIn adds a WHERE postal_code NOT IN (?) condition
func (b *WorkerQueryBuilder) WherePostalCodeNotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.PostalCodeNotIn(b.query, v)
	return b
}

// WherePostalCodeContains adds a WHERE postal_code LIKE ? condition
func (b *WorkerQueryBuilder) WherePostalCodeContains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.PostalCodeContains(b.query, v)
	return b
}

// WherePostalCodeHasPrefix adds a WHERE postal_code LIKE ? condition
func (b *WorkerQueryBuilder) WherePostalCodeHasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.PostalCodeHasPrefix(b.query, v)
	return b
}

// WherePostalCodeHasSuffix adds a WHERE postal_code LIKE ? condition
func (b *WorkerQueryBuilder) WherePostalCodeHasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.PostalCodeHasSuffix(b.query, v)
	return b
}

// WhereGenderEQ adds a WHERE gender = ? condition
func (b *WorkerQueryBuilder) WhereGenderEQ(v domain.Gender) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.GenderEQ(b.query, v)
	return b
}

// WhereGenderNEQ adds a WHERE gender != ? condition
func (b *WorkerQueryBuilder) WhereGenderNEQ(v domain.Gender) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.GenderNEQ(b.query, v)
	return b
}

// WhereGenderIn adds a WHERE gender IN (?) condition
func (b *WorkerQueryBuilder) WhereGenderIn(v []domain.Gender) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.GenderIn(b.query, v)
	return b
}

// WhereGenderNotIn adds a WHERE gender NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereGenderNotIn(v []domain.Gender) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.GenderNotIn(b.query, v)
	return b
}

// WhereCanBeAssignedEQ adds a WHERE can_be_assigned = ? condition
func (b *WorkerQueryBuilder) WhereCanBeAssignedEQ(v bool) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CanBeAssignedEQ(b.query, v)
	return b
}

// WhereCanBeAssignedNEQ adds a WHERE can_be_assigned != ? condition
func (b *WorkerQueryBuilder) WhereCanBeAssignedNEQ(v bool) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CanBeAssignedNEQ(b.query, v)
	return b
}

// WhereCanBeAssignedIn adds a WHERE can_be_assigned IN (?) condition
func (b *WorkerQueryBuilder) WhereCanBeAssignedIn(v []bool) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CanBeAssignedIn(b.query, v)
	return b
}

// WhereCanBeAssignedNotIn adds a WHERE can_be_assigned NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereCanBeAssignedNotIn(v []bool) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CanBeAssignedNotIn(b.query, v)
	return b
}

// WhereAssignmentBlockedEQ adds a WHERE assignment_blocked = ? condition
func (b *WorkerQueryBuilder) WhereAssignmentBlockedEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AssignmentBlockedEQ(b.query, v)
	return b
}

// WhereAssignmentBlockedNEQ adds a WHERE assignment_blocked != ? condition
func (b *WorkerQueryBuilder) WhereAssignmentBlockedNEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AssignmentBlockedNEQ(b.query, v)
	return b
}

// WhereAssignmentBlockedIn adds a WHERE assignment_blocked IN (?) condition
func (b *WorkerQueryBuilder) WhereAssignmentBlockedIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AssignmentBlockedIn(b.query, v)
	return b
}

// WhereAssignmentBlockedNotIn adds a WHERE assignment_blocked NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereAssignmentBlockedNotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AssignmentBlockedNotIn(b.query, v)
	return b
}

// WhereAssignmentBlockedContains adds a WHERE assignment_blocked LIKE ? condition
func (b *WorkerQueryBuilder) WhereAssignmentBlockedContains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AssignmentBlockedContains(b.query, v)
	return b
}

// WhereAssignmentBlockedHasPrefix adds a WHERE assignment_blocked LIKE ? condition
func (b *WorkerQueryBuilder) WhereAssignmentBlockedHasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AssignmentBlockedHasPrefix(b.query, v)
	return b
}

// WhereAssignmentBlockedHasSuffix adds a WHERE assignment_blocked LIKE ? condition
func (b *WorkerQueryBuilder) WhereAssignmentBlockedHasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.AssignmentBlockedHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *WorkerQueryBuilder) WhereVersionEQ(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *WorkerQueryBuilder) WhereVersionNEQ(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *WorkerQueryBuilder) WhereVersionGT(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *WorkerQueryBuilder) WhereVersionGTE(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *WorkerQueryBuilder) WhereVersionLT(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *WorkerQueryBuilder) WhereVersionLTE(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *WorkerQueryBuilder) WhereVersionIn(v []int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereVersionNotIn(v []int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *WorkerQueryBuilder) WhereCreatedAtEQ(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *WorkerQueryBuilder) WhereCreatedAtNEQ(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *WorkerQueryBuilder) WhereCreatedAtGT(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *WorkerQueryBuilder) WhereCreatedAtGTE(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *WorkerQueryBuilder) WhereCreatedAtLT(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *WorkerQueryBuilder) WhereCreatedAtLTE(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *WorkerQueryBuilder) WhereCreatedAtIn(v []int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereCreatedAtNotIn(v []int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *WorkerQueryBuilder) WhereUpdatedAtEQ(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *WorkerQueryBuilder) WhereUpdatedAtNEQ(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *WorkerQueryBuilder) WhereUpdatedAtGT(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *WorkerQueryBuilder) WhereUpdatedAtGTE(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *WorkerQueryBuilder) WhereUpdatedAtLT(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *WorkerQueryBuilder) WhereUpdatedAtLTE(v int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *WorkerQueryBuilder) WhereUpdatedAtIn(v []int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereUpdatedAtNotIn(v []int64) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *WorkerQueryBuilder) WhereSearchVectorEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *WorkerQueryBuilder) WhereSearchVectorNEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *WorkerQueryBuilder) WhereSearchVectorIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereSearchVectorNotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *WorkerQueryBuilder) WhereSearchVectorContains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *WorkerQueryBuilder) WhereSearchVectorHasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *WorkerQueryBuilder) WhereSearchVectorHasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *WorkerQueryBuilder) WhereRankEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *WorkerQueryBuilder) WhereRankNEQ(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *WorkerQueryBuilder) WhereRankIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *WorkerQueryBuilder) WhereRankNotIn(v []string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *WorkerQueryBuilder) WhereRankContains(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *WorkerQueryBuilder) WhereRankHasPrefix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *WorkerQueryBuilder) WhereRankHasSuffix(v string) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *WorkerQueryBuilder) WhereTenant(orgID, buID pulid.ID) *WorkerQueryBuilder {
	b.query = WorkerQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *WorkerQueryBuilder) WhereGroup(sep string, fn func(*WorkerQueryBuilder) *WorkerQueryBuilder) *WorkerQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &WorkerQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *WorkerQueryBuilder) Where(query string, args ...interface{}) *WorkerQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *WorkerQueryBuilder) OrderBy(column string, desc ...bool) *WorkerQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(WorkerQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *WorkerQueryBuilder) Limit(n int) *WorkerQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *WorkerQueryBuilder) Offset(n int) *WorkerQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *WorkerQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *WorkerQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *WorkerQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *WorkerQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *WorkerQueryBuilder) All(ctx context.Context) ([]*Worker, error) {
	var entities []*Worker
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *WorkerQueryBuilder) AllWithCount(ctx context.Context) ([]*Worker, int, error) {
	var entities []*Worker
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *WorkerQueryBuilder) One(ctx context.Context) (*Worker, error) {
	entity := new(Worker)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *WorkerQueryBuilder) First(ctx context.Context) (*Worker, error) {
	entity := new(Worker)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// WorkerBuild creates a chainable query builder
func WorkerBuild(db bun.IDB) *WorkerQueryBuilder {
	return NewWorkerQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *WorkerQueryBuilder) LoadBusinessUnit() *WorkerQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *WorkerQueryBuilder) LoadOrganization() *WorkerQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadState loads the State relationship
func (b *WorkerQueryBuilder) LoadState() *WorkerQueryBuilder {
	b.query = b.query.Relation("State")
	return b
}

// LoadProfile loads the Profile relationship
func (b *WorkerQueryBuilder) LoadProfile() *WorkerQueryBuilder {
	b.query = b.query.Relation("Profile")
	return b
}

// LoadPTO loads the PTO relationship
func (b *WorkerQueryBuilder) LoadPTO(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *WorkerQueryBuilder {
	if len(opts) > 0 {
		b.query = b.query.Relation("PTO", func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		})
	} else {
		b.query = b.query.Relation("PTO")
	}
	return b
}

// LoadAllRelations loads all relationships for Worker
func (b *WorkerQueryBuilder) LoadAllRelations() *WorkerQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadState()
	b.LoadProfile()
	b.LoadPTO()
	return b
}
