/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package worker

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// workerProfileFieldConfig provides field configuration for WorkerProfile
type workerProfileFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// WorkerProfileQuery provides type-safe query helpers and constants
var WorkerProfileQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                     string
		WorkerID               string
		BusinessUnitID         string
		OrganizationID         string
		LicenseStateID         string
		DOB                    string
		LicenseNumber          string
		Endorsement            string
		HazmatExpiry           string
		LicenseExpiry          string
		HireDate               string
		TerminationDate        string
		PhysicalDueDate        string
		MVRDueDate             string
		ComplianceStatus       string
		IsQualified            string
		DisqualificationReason string
		LastComplianceCheck    string
		LastMVRCheck           string
		LastDrugTest           string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		WorkerIDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WorkerIDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WorkerIDIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		WorkerIDNotIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		LicenseStateIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LicenseStateIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LicenseStateIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		LicenseStateIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DOBEQ                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBNEQ                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBIn                           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		DOBNotIn                        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		DOBGT                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBGTE                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBLT                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBLTE                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseNumberEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicenseNumberNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicenseNumberGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EndorsementEQ                   func(q *bun.SelectQuery, v EndorsementType) *bun.SelectQuery
		EndorsementNEQ                  func(q *bun.SelectQuery, v EndorsementType) *bun.SelectQuery
		EndorsementIn                   func(q *bun.SelectQuery, v []EndorsementType) *bun.SelectQuery
		EndorsementNotIn                func(q *bun.SelectQuery, v []EndorsementType) *bun.SelectQuery
		HazmatExpiryEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		HazmatExpiryNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		HazmatExpiryGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LicenseExpiryNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LicenseExpiryGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateNEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateIn                      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		HireDateNotIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		HireDateGT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateGTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateLT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateLTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TerminationDateEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		TerminationDateNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		TerminationDateIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		TerminationDateNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		TerminationDateIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		TerminationDateIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		PhysicalDueDateEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		PhysicalDueDateNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		PhysicalDueDateIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		PhysicalDueDateNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		PhysicalDueDateIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		PhysicalDueDateIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		MVRDueDateEQ                    func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		MVRDueDateNEQ                   func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		MVRDueDateIn                    func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		MVRDueDateNotIn                 func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		MVRDueDateIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		MVRDueDateIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		ComplianceStatusEQ              func(q *bun.SelectQuery, v ComplianceStatus) *bun.SelectQuery
		ComplianceStatusNEQ             func(q *bun.SelectQuery, v ComplianceStatus) *bun.SelectQuery
		ComplianceStatusIn              func(q *bun.SelectQuery, v []ComplianceStatus) *bun.SelectQuery
		ComplianceStatusNotIn           func(q *bun.SelectQuery, v []ComplianceStatus) *bun.SelectQuery
		IsQualifiedEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsQualifiedNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsQualifiedIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsQualifiedNotIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		DisqualificationReasonEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DisqualificationReasonNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DisqualificationReasonGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastComplianceCheckEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastComplianceCheckNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastComplianceCheckGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastMVRCheckNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastMVRCheckGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastDrugTestNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastDrugTestGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]workerProfileFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
		LicenseState string
	}
}{
	// Table and alias constants
	Table:    "worker_profiles",
	Alias:    "wp",
	IDPrefix: "wp_",

	// Field names
	Field: struct {
		ID                     string
		WorkerID               string
		BusinessUnitID         string
		OrganizationID         string
		LicenseStateID         string
		DOB                    string
		LicenseNumber          string
		Endorsement            string
		HazmatExpiry           string
		LicenseExpiry          string
		HireDate               string
		TerminationDate        string
		PhysicalDueDate        string
		MVRDueDate             string
		ComplianceStatus       string
		IsQualified            string
		DisqualificationReason string
		LastComplianceCheck    string
		LastMVRCheck           string
		LastDrugTest           string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}{
		ID:                     "id",
		WorkerID:               "worker_id",
		BusinessUnitID:         "business_unit_id",
		OrganizationID:         "organization_id",
		LicenseStateID:         "license_state_id",
		DOB:                    "dob",
		LicenseNumber:          "license_number",
		Endorsement:            "endorsement",
		HazmatExpiry:           "hazmat_expiry",
		LicenseExpiry:          "license_expiry",
		HireDate:               "hire_date",
		TerminationDate:        "termination_date",
		PhysicalDueDate:        "physical_due_date",
		MVRDueDate:             "mvr_due_date",
		ComplianceStatus:       "compliance_status",
		IsQualified:            "is_qualified",
		DisqualificationReason: "disqualification_reason",
		LastComplianceCheck:    "last_compliance_check",
		LastMVRCheck:           "last_mvr_check",
		LastDrugTest:           "last_drug_test",
		Version:                "version",
		CreatedAt:              "created_at",
		UpdatedAt:              "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "wp." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "wp." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		WorkerIDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WorkerIDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		WorkerIDIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		WorkerIDNotIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		LicenseStateIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LicenseStateIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		LicenseStateIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		LicenseStateIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DOBEQ                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBNEQ                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBIn                           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		DOBNotIn                        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		DOBGT                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBGTE                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBLT                           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		DOBLTE                          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseNumberEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicenseNumberNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicenseNumberGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicenseNumberHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EndorsementEQ                   func(q *bun.SelectQuery, v EndorsementType) *bun.SelectQuery
		EndorsementNEQ                  func(q *bun.SelectQuery, v EndorsementType) *bun.SelectQuery
		EndorsementIn                   func(q *bun.SelectQuery, v []EndorsementType) *bun.SelectQuery
		EndorsementNotIn                func(q *bun.SelectQuery, v []EndorsementType) *bun.SelectQuery
		HazmatExpiryEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		HazmatExpiryNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		HazmatExpiryGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HazmatExpiryLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LicenseExpiryNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LicenseExpiryGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LicenseExpiryLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateNEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateIn                      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		HireDateNotIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		HireDateGT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateGTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateLT                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		HireDateLTE                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TerminationDateEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		TerminationDateNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		TerminationDateIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		TerminationDateNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		TerminationDateIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		TerminationDateIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		PhysicalDueDateEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		PhysicalDueDateNEQ              func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		PhysicalDueDateIn               func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		PhysicalDueDateNotIn            func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		PhysicalDueDateIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		PhysicalDueDateIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		MVRDueDateEQ                    func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		MVRDueDateNEQ                   func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		MVRDueDateIn                    func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		MVRDueDateNotIn                 func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		MVRDueDateIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		MVRDueDateIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		ComplianceStatusEQ              func(q *bun.SelectQuery, v ComplianceStatus) *bun.SelectQuery
		ComplianceStatusNEQ             func(q *bun.SelectQuery, v ComplianceStatus) *bun.SelectQuery
		ComplianceStatusIn              func(q *bun.SelectQuery, v []ComplianceStatus) *bun.SelectQuery
		ComplianceStatusNotIn           func(q *bun.SelectQuery, v []ComplianceStatus) *bun.SelectQuery
		IsQualifiedEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsQualifiedNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsQualifiedIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsQualifiedNotIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		DisqualificationReasonEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DisqualificationReasonNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DisqualificationReasonGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DisqualificationReasonHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LastComplianceCheckEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastComplianceCheckNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastComplianceCheckGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastComplianceCheckLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastMVRCheckNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastMVRCheckGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastMVRCheckLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastDrugTestNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastDrugTestGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastDrugTestLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                          func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.id"), bun.In(v))
		},
		WorkerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.worker_id"), v)
		},
		WorkerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.worker_id"), v)
		},
		WorkerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.worker_id"), bun.In(v))
		},
		WorkerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.worker_id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.organization_id"), bun.In(v))
		},
		LicenseStateIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.license_state_id"), v)
		},
		LicenseStateIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.license_state_id"), v)
		},
		LicenseStateIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.license_state_id"), bun.In(v))
		},
		LicenseStateIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.license_state_id"), bun.In(v))
		},
		DOBEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.dob"), v)
		},
		DOBNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.dob"), v)
		},
		DOBIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.dob"), bun.In(v))
		},
		DOBNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.dob"), bun.In(v))
		},
		DOBGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.dob"), v)
		},
		DOBGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.dob"), v)
		},
		DOBLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.dob"), v)
		},
		DOBLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.dob"), v)
		},
		LicenseNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.license_number"), v)
		},
		LicenseNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.license_number"), v)
		},
		LicenseNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.license_number"), bun.In(v))
		},
		LicenseNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.license_number"), bun.In(v))
		},
		LicenseNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.license_number"), v)
		},
		LicenseNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.license_number"), v)
		},
		LicenseNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.license_number"), v)
		},
		LicenseNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.license_number"), v)
		},
		LicenseNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wp.license_number"), "%"+v+"%")
		},
		LicenseNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wp.license_number"), v+"%")
		},
		LicenseNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wp.license_number"), "%"+v)
		},
		EndorsementEQ: func(q *bun.SelectQuery, v EndorsementType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.endorsement"), v)
		},
		EndorsementNEQ: func(q *bun.SelectQuery, v EndorsementType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.endorsement"), v)
		},
		EndorsementIn: func(q *bun.SelectQuery, v []EndorsementType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.endorsement"), bun.In(v))
		},
		EndorsementNotIn: func(q *bun.SelectQuery, v []EndorsementType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.endorsement"), bun.In(v))
		},
		HazmatExpiryEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.hazmat_expiry"), v)
		},
		HazmatExpiryNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.hazmat_expiry"), v)
		},
		HazmatExpiryIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.hazmat_expiry"), bun.In(v))
		},
		HazmatExpiryNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.hazmat_expiry"), bun.In(v))
		},
		HazmatExpiryGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.hazmat_expiry"), v)
		},
		HazmatExpiryGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.hazmat_expiry"), v)
		},
		HazmatExpiryLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.hazmat_expiry"), v)
		},
		HazmatExpiryLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.hazmat_expiry"), v)
		},
		LicenseExpiryEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.license_expiry"), v)
		},
		LicenseExpiryNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.license_expiry"), v)
		},
		LicenseExpiryIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.license_expiry"), bun.In(v))
		},
		LicenseExpiryNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.license_expiry"), bun.In(v))
		},
		LicenseExpiryGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.license_expiry"), v)
		},
		LicenseExpiryGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.license_expiry"), v)
		},
		LicenseExpiryLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.license_expiry"), v)
		},
		LicenseExpiryLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.license_expiry"), v)
		},
		HireDateEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.hire_date"), v)
		},
		HireDateNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.hire_date"), v)
		},
		HireDateIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.hire_date"), bun.In(v))
		},
		HireDateNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.hire_date"), bun.In(v))
		},
		HireDateGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.hire_date"), v)
		},
		HireDateGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.hire_date"), v)
		},
		HireDateLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.hire_date"), v)
		},
		HireDateLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.hire_date"), v)
		},
		TerminationDateEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.termination_date"), v)
		},
		TerminationDateNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.termination_date"), v)
		},
		TerminationDateIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.termination_date"), bun.In(v))
		},
		TerminationDateNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.termination_date"), bun.In(v))
		},
		TerminationDateIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("wp.termination_date"))
		},
		TerminationDateIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("wp.termination_date"))
		},
		PhysicalDueDateEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.physical_due_date"), v)
		},
		PhysicalDueDateNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.physical_due_date"), v)
		},
		PhysicalDueDateIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.physical_due_date"), bun.In(v))
		},
		PhysicalDueDateNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.physical_due_date"), bun.In(v))
		},
		PhysicalDueDateIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("wp.physical_due_date"))
		},
		PhysicalDueDateIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("wp.physical_due_date"))
		},
		MVRDueDateEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.mvr_due_date"), v)
		},
		MVRDueDateNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.mvr_due_date"), v)
		},
		MVRDueDateIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.mvr_due_date"), bun.In(v))
		},
		MVRDueDateNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.mvr_due_date"), bun.In(v))
		},
		MVRDueDateIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("wp.mvr_due_date"))
		},
		MVRDueDateIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("wp.mvr_due_date"))
		},
		ComplianceStatusEQ: func(q *bun.SelectQuery, v ComplianceStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.compliance_status"), v)
		},
		ComplianceStatusNEQ: func(q *bun.SelectQuery, v ComplianceStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.compliance_status"), v)
		},
		ComplianceStatusIn: func(q *bun.SelectQuery, v []ComplianceStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.compliance_status"), bun.In(v))
		},
		ComplianceStatusNotIn: func(q *bun.SelectQuery, v []ComplianceStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.compliance_status"), bun.In(v))
		},
		IsQualifiedEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.is_qualified"), v)
		},
		IsQualifiedNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.is_qualified"), v)
		},
		IsQualifiedIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.is_qualified"), bun.In(v))
		},
		IsQualifiedNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.is_qualified"), bun.In(v))
		},
		DisqualificationReasonEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.disqualification_reason"), v)
		},
		DisqualificationReasonNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.disqualification_reason"), v)
		},
		DisqualificationReasonIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.disqualification_reason"), bun.In(v))
		},
		DisqualificationReasonNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.disqualification_reason"), bun.In(v))
		},
		DisqualificationReasonGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.disqualification_reason"), v)
		},
		DisqualificationReasonGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.disqualification_reason"), v)
		},
		DisqualificationReasonLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.disqualification_reason"), v)
		},
		DisqualificationReasonLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.disqualification_reason"), v)
		},
		DisqualificationReasonContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wp.disqualification_reason"), "%"+v+"%")
		},
		DisqualificationReasonHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wp.disqualification_reason"), v+"%")
		},
		DisqualificationReasonHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("wp.disqualification_reason"), "%"+v)
		},
		LastComplianceCheckEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.last_compliance_check"), v)
		},
		LastComplianceCheckNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.last_compliance_check"), v)
		},
		LastComplianceCheckIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.last_compliance_check"), bun.In(v))
		},
		LastComplianceCheckNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.last_compliance_check"), bun.In(v))
		},
		LastComplianceCheckGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.last_compliance_check"), v)
		},
		LastComplianceCheckGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.last_compliance_check"), v)
		},
		LastComplianceCheckLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.last_compliance_check"), v)
		},
		LastComplianceCheckLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.last_compliance_check"), v)
		},
		LastMVRCheckEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.last_mvr_check"), v)
		},
		LastMVRCheckNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.last_mvr_check"), v)
		},
		LastMVRCheckIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.last_mvr_check"), bun.In(v))
		},
		LastMVRCheckNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.last_mvr_check"), bun.In(v))
		},
		LastMVRCheckGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.last_mvr_check"), v)
		},
		LastMVRCheckGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.last_mvr_check"), v)
		},
		LastMVRCheckLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.last_mvr_check"), v)
		},
		LastMVRCheckLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.last_mvr_check"), v)
		},
		LastDrugTestEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.last_drug_test"), v)
		},
		LastDrugTestNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.last_drug_test"), v)
		},
		LastDrugTestIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.last_drug_test"), bun.In(v))
		},
		LastDrugTestNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.last_drug_test"), bun.In(v))
		},
		LastDrugTestGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.last_drug_test"), v)
		},
		LastDrugTestGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.last_drug_test"), v)
		},
		LastDrugTestLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.last_drug_test"), v)
		},
		LastDrugTestLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.last_drug_test"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("wp.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("wp.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("wp.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("wp.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("wp.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("wp.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("wp.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("wp.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("wp.organization_id"), orgID).
				Where("? = ?", bun.Ident("wp.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("wp.id"), id).
				Where("? = ?", bun.Ident("wp.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "wp." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"wp.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "wp.created_at DESC"
			}
			return "wp.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "wp.updated_at DESC"
			}
			return "wp.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]workerProfileFieldConfig {
		return map[string]workerProfileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "wp.id",
				Sortable:   false,
				Filterable: true,
			},
			"worker_id": {
				Name:       "worker_id",
				Column:     "wp.worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "wp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "wp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"license_state_id": {
				Name:       "license_state_id",
				Column:     "wp.license_state_id",
				Sortable:   false,
				Filterable: true,
			},
			"dob": {
				Name:       "dob",
				Column:     "wp.dob",
				Sortable:   false,
				Filterable: false,
			},
			"license_number": {
				Name:       "license_number",
				Column:     "wp.license_number",
				Sortable:   false,
				Filterable: true,
			},
			"endorsement": {
				Name:       "endorsement",
				Column:     "wp.endorsement",
				Sortable:   false,
				Filterable: false,
			},
			"hazmat_expiry": {
				Name:       "hazmat_expiry",
				Column:     "wp.hazmat_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"license_expiry": {
				Name:       "license_expiry",
				Column:     "wp.license_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"hire_date": {
				Name:       "hire_date",
				Column:     "wp.hire_date",
				Sortable:   false,
				Filterable: false,
			},
			"termination_date": {
				Name:       "termination_date",
				Column:     "wp.termination_date",
				Sortable:   false,
				Filterable: false,
			},
			"physical_due_date": {
				Name:       "physical_due_date",
				Column:     "wp.physical_due_date",
				Sortable:   false,
				Filterable: false,
			},
			"mvr_due_date": {
				Name:       "mvr_due_date",
				Column:     "wp.mvr_due_date",
				Sortable:   false,
				Filterable: false,
			},
			"compliance_status": {
				Name:       "compliance_status",
				Column:     "wp.compliance_status",
				Sortable:   false,
				Filterable: false,
			},
			"is_qualified": {
				Name:       "is_qualified",
				Column:     "wp.is_qualified",
				Sortable:   false,
				Filterable: false,
			},
			"disqualification_reason": {
				Name:       "disqualification_reason",
				Column:     "wp.disqualification_reason",
				Sortable:   false,
				Filterable: false,
			},
			"last_compliance_check": {
				Name:       "last_compliance_check",
				Column:     "wp.last_compliance_check",
				Sortable:   false,
				Filterable: false,
			},
			"last_mvr_check": {
				Name:       "last_mvr_check",
				Column:     "wp.last_mvr_check",
				Sortable:   false,
				Filterable: false,
			},
			"last_drug_test": {
				Name:       "last_drug_test",
				Column:     "wp.last_drug_test",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "wp.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "wp.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "wp.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]workerProfileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "wp.id",
				Sortable:   false,
				Filterable: true,
			},
			"worker_id": {
				Name:       "worker_id",
				Column:     "wp.worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "wp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "wp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"license_state_id": {
				Name:       "license_state_id",
				Column:     "wp.license_state_id",
				Sortable:   false,
				Filterable: true,
			},
			"dob": {
				Name:       "dob",
				Column:     "wp.dob",
				Sortable:   false,
				Filterable: false,
			},
			"license_number": {
				Name:       "license_number",
				Column:     "wp.license_number",
				Sortable:   false,
				Filterable: true,
			},
			"endorsement": {
				Name:       "endorsement",
				Column:     "wp.endorsement",
				Sortable:   false,
				Filterable: false,
			},
			"hazmat_expiry": {
				Name:       "hazmat_expiry",
				Column:     "wp.hazmat_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"license_expiry": {
				Name:       "license_expiry",
				Column:     "wp.license_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"hire_date": {
				Name:       "hire_date",
				Column:     "wp.hire_date",
				Sortable:   false,
				Filterable: false,
			},
			"termination_date": {
				Name:       "termination_date",
				Column:     "wp.termination_date",
				Sortable:   false,
				Filterable: false,
			},
			"physical_due_date": {
				Name:       "physical_due_date",
				Column:     "wp.physical_due_date",
				Sortable:   false,
				Filterable: false,
			},
			"mvr_due_date": {
				Name:       "mvr_due_date",
				Column:     "wp.mvr_due_date",
				Sortable:   false,
				Filterable: false,
			},
			"compliance_status": {
				Name:       "compliance_status",
				Column:     "wp.compliance_status",
				Sortable:   false,
				Filterable: false,
			},
			"is_qualified": {
				Name:       "is_qualified",
				Column:     "wp.is_qualified",
				Sortable:   false,
				Filterable: false,
			},
			"disqualification_reason": {
				Name:       "disqualification_reason",
				Column:     "wp.disqualification_reason",
				Sortable:   false,
				Filterable: false,
			},
			"last_compliance_check": {
				Name:       "last_compliance_check",
				Column:     "wp.last_compliance_check",
				Sortable:   false,
				Filterable: false,
			},
			"last_mvr_check": {
				Name:       "last_mvr_check",
				Column:     "wp.last_mvr_check",
				Sortable:   false,
				Filterable: false,
			},
			"last_drug_test": {
				Name:       "last_drug_test",
				Column:     "wp.last_drug_test",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "wp.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "wp.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "wp.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]workerProfileFieldConfig{
			"id": {
				Name:       "id",
				Column:     "wp.id",
				Sortable:   false,
				Filterable: true,
			},
			"worker_id": {
				Name:       "worker_id",
				Column:     "wp.worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "wp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "wp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"license_state_id": {
				Name:       "license_state_id",
				Column:     "wp.license_state_id",
				Sortable:   false,
				Filterable: true,
			},
			"dob": {
				Name:       "dob",
				Column:     "wp.dob",
				Sortable:   false,
				Filterable: false,
			},
			"license_number": {
				Name:       "license_number",
				Column:     "wp.license_number",
				Sortable:   false,
				Filterable: true,
			},
			"endorsement": {
				Name:       "endorsement",
				Column:     "wp.endorsement",
				Sortable:   false,
				Filterable: false,
			},
			"hazmat_expiry": {
				Name:       "hazmat_expiry",
				Column:     "wp.hazmat_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"license_expiry": {
				Name:       "license_expiry",
				Column:     "wp.license_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"hire_date": {
				Name:       "hire_date",
				Column:     "wp.hire_date",
				Sortable:   false,
				Filterable: false,
			},
			"termination_date": {
				Name:       "termination_date",
				Column:     "wp.termination_date",
				Sortable:   false,
				Filterable: false,
			},
			"physical_due_date": {
				Name:       "physical_due_date",
				Column:     "wp.physical_due_date",
				Sortable:   false,
				Filterable: false,
			},
			"mvr_due_date": {
				Name:       "mvr_due_date",
				Column:     "wp.mvr_due_date",
				Sortable:   false,
				Filterable: false,
			},
			"compliance_status": {
				Name:       "compliance_status",
				Column:     "wp.compliance_status",
				Sortable:   false,
				Filterable: false,
			},
			"is_qualified": {
				Name:       "is_qualified",
				Column:     "wp.is_qualified",
				Sortable:   false,
				Filterable: false,
			},
			"disqualification_reason": {
				Name:       "disqualification_reason",
				Column:     "wp.disqualification_reason",
				Sortable:   false,
				Filterable: false,
			},
			"last_compliance_check": {
				Name:       "last_compliance_check",
				Column:     "wp.last_compliance_check",
				Sortable:   false,
				Filterable: false,
			},
			"last_mvr_check": {
				Name:       "last_mvr_check",
				Column:     "wp.last_mvr_check",
				Sortable:   false,
				Filterable: false,
			},
			"last_drug_test": {
				Name:       "last_drug_test",
				Column:     "wp.last_drug_test",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "wp.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "wp.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "wp.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
		LicenseState string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		LicenseState: "LicenseState",
	},
}

// WorkerProfileQueryBuilder provides a fluent interface for building queries
type WorkerProfileQueryBuilder struct {
	query *bun.SelectQuery
}

// NewWorkerProfileQuery creates a new query builder
func NewWorkerProfileQuery(db bun.IDB) *WorkerProfileQueryBuilder {
	return &WorkerProfileQueryBuilder{
		query: db.NewSelect().Model((*WorkerProfile)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func WorkerProfileFromQuery(q *bun.SelectQuery) *WorkerProfileQueryBuilder {
	return &WorkerProfileQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *WorkerProfileQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *WorkerProfileQueryBuilder) Model(model interface{}) *WorkerProfileQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *WorkerProfileQueryBuilder) WhereIDEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *WorkerProfileQueryBuilder) WhereIDNEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereIDIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereIDNotIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereWorkerIDEQ adds a WHERE worker_id = ? condition
func (b *WorkerProfileQueryBuilder) WhereWorkerIDEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.WorkerIDEQ(b.query, v)
	return b
}

// WhereWorkerIDNEQ adds a WHERE worker_id != ? condition
func (b *WorkerProfileQueryBuilder) WhereWorkerIDNEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.WorkerIDNEQ(b.query, v)
	return b
}

// WhereWorkerIDIn adds a WHERE worker_id IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereWorkerIDIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.WorkerIDIn(b.query, v)
	return b
}

// WhereWorkerIDNotIn adds a WHERE worker_id NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereWorkerIDNotIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.WorkerIDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *WorkerProfileQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *WorkerProfileQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *WorkerProfileQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *WorkerProfileQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereLicenseStateIDEQ adds a WHERE license_state_id = ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseStateIDEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseStateIDEQ(b.query, v)
	return b
}

// WhereLicenseStateIDNEQ adds a WHERE license_state_id != ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseStateIDNEQ(v pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseStateIDNEQ(b.query, v)
	return b
}

// WhereLicenseStateIDIn adds a WHERE license_state_id IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLicenseStateIDIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseStateIDIn(b.query, v)
	return b
}

// WhereLicenseStateIDNotIn adds a WHERE license_state_id NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLicenseStateIDNotIn(v []pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseStateIDNotIn(b.query, v)
	return b
}

// WhereDOBEQ adds a WHERE dob = ? condition
func (b *WorkerProfileQueryBuilder) WhereDOBEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DOBEQ(b.query, v)
	return b
}

// WhereDOBNEQ adds a WHERE dob != ? condition
func (b *WorkerProfileQueryBuilder) WhereDOBNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DOBNEQ(b.query, v)
	return b
}

// WhereDOBGT adds a WHERE dob > ? condition
func (b *WorkerProfileQueryBuilder) WhereDOBGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DOBGT(b.query, v)
	return b
}

// WhereDOBGTE adds a WHERE dob >= ? condition
func (b *WorkerProfileQueryBuilder) WhereDOBGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DOBGTE(b.query, v)
	return b
}

// WhereDOBLT adds a WHERE dob < ? condition
func (b *WorkerProfileQueryBuilder) WhereDOBLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DOBLT(b.query, v)
	return b
}

// WhereDOBLTE adds a WHERE dob <= ? condition
func (b *WorkerProfileQueryBuilder) WhereDOBLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DOBLTE(b.query, v)
	return b
}

// WhereDOBIn adds a WHERE dob IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereDOBIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DOBIn(b.query, v)
	return b
}

// WhereDOBNotIn adds a WHERE dob NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereDOBNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DOBNotIn(b.query, v)
	return b
}

// WhereLicenseNumberEQ adds a WHERE license_number = ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseNumberEQ(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseNumberEQ(b.query, v)
	return b
}

// WhereLicenseNumberNEQ adds a WHERE license_number != ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseNumberNEQ(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseNumberNEQ(b.query, v)
	return b
}

// WhereLicenseNumberIn adds a WHERE license_number IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLicenseNumberIn(v []string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseNumberIn(b.query, v)
	return b
}

// WhereLicenseNumberNotIn adds a WHERE license_number NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLicenseNumberNotIn(v []string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseNumberNotIn(b.query, v)
	return b
}

// WhereLicenseNumberContains adds a WHERE license_number LIKE ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseNumberContains(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseNumberContains(b.query, v)
	return b
}

// WhereLicenseNumberHasPrefix adds a WHERE license_number LIKE ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseNumberHasPrefix(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseNumberHasPrefix(b.query, v)
	return b
}

// WhereLicenseNumberHasSuffix adds a WHERE license_number LIKE ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseNumberHasSuffix(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseNumberHasSuffix(b.query, v)
	return b
}

// WhereEndorsementEQ adds a WHERE endorsement = ? condition
func (b *WorkerProfileQueryBuilder) WhereEndorsementEQ(v EndorsementType) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.EndorsementEQ(b.query, v)
	return b
}

// WhereEndorsementNEQ adds a WHERE endorsement != ? condition
func (b *WorkerProfileQueryBuilder) WhereEndorsementNEQ(v EndorsementType) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.EndorsementNEQ(b.query, v)
	return b
}

// WhereEndorsementIn adds a WHERE endorsement IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereEndorsementIn(v []EndorsementType) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.EndorsementIn(b.query, v)
	return b
}

// WhereEndorsementNotIn adds a WHERE endorsement NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereEndorsementNotIn(v []EndorsementType) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.EndorsementNotIn(b.query, v)
	return b
}

// WhereHazmatExpiryEQ adds a WHERE hazmat_expiry = ? condition
func (b *WorkerProfileQueryBuilder) WhereHazmatExpiryEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HazmatExpiryEQ(b.query, v)
	return b
}

// WhereHazmatExpiryNEQ adds a WHERE hazmat_expiry != ? condition
func (b *WorkerProfileQueryBuilder) WhereHazmatExpiryNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HazmatExpiryNEQ(b.query, v)
	return b
}

// WhereHazmatExpiryGT adds a WHERE hazmat_expiry > ? condition
func (b *WorkerProfileQueryBuilder) WhereHazmatExpiryGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HazmatExpiryGT(b.query, v)
	return b
}

// WhereHazmatExpiryGTE adds a WHERE hazmat_expiry >= ? condition
func (b *WorkerProfileQueryBuilder) WhereHazmatExpiryGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HazmatExpiryGTE(b.query, v)
	return b
}

// WhereHazmatExpiryLT adds a WHERE hazmat_expiry < ? condition
func (b *WorkerProfileQueryBuilder) WhereHazmatExpiryLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HazmatExpiryLT(b.query, v)
	return b
}

// WhereHazmatExpiryLTE adds a WHERE hazmat_expiry <= ? condition
func (b *WorkerProfileQueryBuilder) WhereHazmatExpiryLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HazmatExpiryLTE(b.query, v)
	return b
}

// WhereHazmatExpiryIn adds a WHERE hazmat_expiry IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereHazmatExpiryIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HazmatExpiryIn(b.query, v)
	return b
}

// WhereHazmatExpiryNotIn adds a WHERE hazmat_expiry NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereHazmatExpiryNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HazmatExpiryNotIn(b.query, v)
	return b
}

// WhereLicenseExpiryEQ adds a WHERE license_expiry = ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseExpiryEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseExpiryEQ(b.query, v)
	return b
}

// WhereLicenseExpiryNEQ adds a WHERE license_expiry != ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseExpiryNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseExpiryNEQ(b.query, v)
	return b
}

// WhereLicenseExpiryGT adds a WHERE license_expiry > ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseExpiryGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseExpiryGT(b.query, v)
	return b
}

// WhereLicenseExpiryGTE adds a WHERE license_expiry >= ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseExpiryGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseExpiryGTE(b.query, v)
	return b
}

// WhereLicenseExpiryLT adds a WHERE license_expiry < ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseExpiryLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseExpiryLT(b.query, v)
	return b
}

// WhereLicenseExpiryLTE adds a WHERE license_expiry <= ? condition
func (b *WorkerProfileQueryBuilder) WhereLicenseExpiryLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseExpiryLTE(b.query, v)
	return b
}

// WhereLicenseExpiryIn adds a WHERE license_expiry IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLicenseExpiryIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseExpiryIn(b.query, v)
	return b
}

// WhereLicenseExpiryNotIn adds a WHERE license_expiry NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLicenseExpiryNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LicenseExpiryNotIn(b.query, v)
	return b
}

// WhereHireDateEQ adds a WHERE hire_date = ? condition
func (b *WorkerProfileQueryBuilder) WhereHireDateEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HireDateEQ(b.query, v)
	return b
}

// WhereHireDateNEQ adds a WHERE hire_date != ? condition
func (b *WorkerProfileQueryBuilder) WhereHireDateNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HireDateNEQ(b.query, v)
	return b
}

// WhereHireDateGT adds a WHERE hire_date > ? condition
func (b *WorkerProfileQueryBuilder) WhereHireDateGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HireDateGT(b.query, v)
	return b
}

// WhereHireDateGTE adds a WHERE hire_date >= ? condition
func (b *WorkerProfileQueryBuilder) WhereHireDateGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HireDateGTE(b.query, v)
	return b
}

// WhereHireDateLT adds a WHERE hire_date < ? condition
func (b *WorkerProfileQueryBuilder) WhereHireDateLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HireDateLT(b.query, v)
	return b
}

// WhereHireDateLTE adds a WHERE hire_date <= ? condition
func (b *WorkerProfileQueryBuilder) WhereHireDateLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HireDateLTE(b.query, v)
	return b
}

// WhereHireDateIn adds a WHERE hire_date IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereHireDateIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HireDateIn(b.query, v)
	return b
}

// WhereHireDateNotIn adds a WHERE hire_date NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereHireDateNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.HireDateNotIn(b.query, v)
	return b
}

// WhereTerminationDateEQ adds a WHERE termination_date = ? condition
func (b *WorkerProfileQueryBuilder) WhereTerminationDateEQ(v *int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.TerminationDateEQ(b.query, v)
	return b
}

// WhereTerminationDateNEQ adds a WHERE termination_date != ? condition
func (b *WorkerProfileQueryBuilder) WhereTerminationDateNEQ(v *int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.TerminationDateNEQ(b.query, v)
	return b
}

// WhereTerminationDateIn adds a WHERE termination_date IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereTerminationDateIn(v []*int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.TerminationDateIn(b.query, v)
	return b
}

// WhereTerminationDateNotIn adds a WHERE termination_date NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereTerminationDateNotIn(v []*int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.TerminationDateNotIn(b.query, v)
	return b
}

// WherePhysicalDueDateEQ adds a WHERE physical_due_date = ? condition
func (b *WorkerProfileQueryBuilder) WherePhysicalDueDateEQ(v *int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.PhysicalDueDateEQ(b.query, v)
	return b
}

// WherePhysicalDueDateNEQ adds a WHERE physical_due_date != ? condition
func (b *WorkerProfileQueryBuilder) WherePhysicalDueDateNEQ(v *int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.PhysicalDueDateNEQ(b.query, v)
	return b
}

// WherePhysicalDueDateIn adds a WHERE physical_due_date IN (?) condition
func (b *WorkerProfileQueryBuilder) WherePhysicalDueDateIn(v []*int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.PhysicalDueDateIn(b.query, v)
	return b
}

// WherePhysicalDueDateNotIn adds a WHERE physical_due_date NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WherePhysicalDueDateNotIn(v []*int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.PhysicalDueDateNotIn(b.query, v)
	return b
}

// WhereMVRDueDateEQ adds a WHERE mvr_due_date = ? condition
func (b *WorkerProfileQueryBuilder) WhereMVRDueDateEQ(v *int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.MVRDueDateEQ(b.query, v)
	return b
}

// WhereMVRDueDateNEQ adds a WHERE mvr_due_date != ? condition
func (b *WorkerProfileQueryBuilder) WhereMVRDueDateNEQ(v *int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.MVRDueDateNEQ(b.query, v)
	return b
}

// WhereMVRDueDateIn adds a WHERE mvr_due_date IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereMVRDueDateIn(v []*int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.MVRDueDateIn(b.query, v)
	return b
}

// WhereMVRDueDateNotIn adds a WHERE mvr_due_date NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereMVRDueDateNotIn(v []*int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.MVRDueDateNotIn(b.query, v)
	return b
}

// WhereComplianceStatusEQ adds a WHERE compliance_status = ? condition
func (b *WorkerProfileQueryBuilder) WhereComplianceStatusEQ(v ComplianceStatus) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.ComplianceStatusEQ(b.query, v)
	return b
}

// WhereComplianceStatusNEQ adds a WHERE compliance_status != ? condition
func (b *WorkerProfileQueryBuilder) WhereComplianceStatusNEQ(v ComplianceStatus) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.ComplianceStatusNEQ(b.query, v)
	return b
}

// WhereComplianceStatusIn adds a WHERE compliance_status IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereComplianceStatusIn(v []ComplianceStatus) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.ComplianceStatusIn(b.query, v)
	return b
}

// WhereComplianceStatusNotIn adds a WHERE compliance_status NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereComplianceStatusNotIn(v []ComplianceStatus) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.ComplianceStatusNotIn(b.query, v)
	return b
}

// WhereIsQualifiedEQ adds a WHERE is_qualified = ? condition
func (b *WorkerProfileQueryBuilder) WhereIsQualifiedEQ(v bool) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.IsQualifiedEQ(b.query, v)
	return b
}

// WhereIsQualifiedNEQ adds a WHERE is_qualified != ? condition
func (b *WorkerProfileQueryBuilder) WhereIsQualifiedNEQ(v bool) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.IsQualifiedNEQ(b.query, v)
	return b
}

// WhereIsQualifiedIn adds a WHERE is_qualified IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereIsQualifiedIn(v []bool) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.IsQualifiedIn(b.query, v)
	return b
}

// WhereIsQualifiedNotIn adds a WHERE is_qualified NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereIsQualifiedNotIn(v []bool) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.IsQualifiedNotIn(b.query, v)
	return b
}

// WhereDisqualificationReasonEQ adds a WHERE disqualification_reason = ? condition
func (b *WorkerProfileQueryBuilder) WhereDisqualificationReasonEQ(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DisqualificationReasonEQ(b.query, v)
	return b
}

// WhereDisqualificationReasonNEQ adds a WHERE disqualification_reason != ? condition
func (b *WorkerProfileQueryBuilder) WhereDisqualificationReasonNEQ(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DisqualificationReasonNEQ(b.query, v)
	return b
}

// WhereDisqualificationReasonIn adds a WHERE disqualification_reason IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereDisqualificationReasonIn(v []string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DisqualificationReasonIn(b.query, v)
	return b
}

// WhereDisqualificationReasonNotIn adds a WHERE disqualification_reason NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereDisqualificationReasonNotIn(v []string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DisqualificationReasonNotIn(b.query, v)
	return b
}

// WhereDisqualificationReasonContains adds a WHERE disqualification_reason LIKE ? condition
func (b *WorkerProfileQueryBuilder) WhereDisqualificationReasonContains(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DisqualificationReasonContains(b.query, v)
	return b
}

// WhereDisqualificationReasonHasPrefix adds a WHERE disqualification_reason LIKE ? condition
func (b *WorkerProfileQueryBuilder) WhereDisqualificationReasonHasPrefix(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DisqualificationReasonHasPrefix(b.query, v)
	return b
}

// WhereDisqualificationReasonHasSuffix adds a WHERE disqualification_reason LIKE ? condition
func (b *WorkerProfileQueryBuilder) WhereDisqualificationReasonHasSuffix(v string) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.DisqualificationReasonHasSuffix(b.query, v)
	return b
}

// WhereLastComplianceCheckEQ adds a WHERE last_compliance_check = ? condition
func (b *WorkerProfileQueryBuilder) WhereLastComplianceCheckEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastComplianceCheckEQ(b.query, v)
	return b
}

// WhereLastComplianceCheckNEQ adds a WHERE last_compliance_check != ? condition
func (b *WorkerProfileQueryBuilder) WhereLastComplianceCheckNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastComplianceCheckNEQ(b.query, v)
	return b
}

// WhereLastComplianceCheckGT adds a WHERE last_compliance_check > ? condition
func (b *WorkerProfileQueryBuilder) WhereLastComplianceCheckGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastComplianceCheckGT(b.query, v)
	return b
}

// WhereLastComplianceCheckGTE adds a WHERE last_compliance_check >= ? condition
func (b *WorkerProfileQueryBuilder) WhereLastComplianceCheckGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastComplianceCheckGTE(b.query, v)
	return b
}

// WhereLastComplianceCheckLT adds a WHERE last_compliance_check < ? condition
func (b *WorkerProfileQueryBuilder) WhereLastComplianceCheckLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastComplianceCheckLT(b.query, v)
	return b
}

// WhereLastComplianceCheckLTE adds a WHERE last_compliance_check <= ? condition
func (b *WorkerProfileQueryBuilder) WhereLastComplianceCheckLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastComplianceCheckLTE(b.query, v)
	return b
}

// WhereLastComplianceCheckIn adds a WHERE last_compliance_check IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLastComplianceCheckIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastComplianceCheckIn(b.query, v)
	return b
}

// WhereLastComplianceCheckNotIn adds a WHERE last_compliance_check NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLastComplianceCheckNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastComplianceCheckNotIn(b.query, v)
	return b
}

// WhereLastMVRCheckEQ adds a WHERE last_mvr_check = ? condition
func (b *WorkerProfileQueryBuilder) WhereLastMVRCheckEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastMVRCheckEQ(b.query, v)
	return b
}

// WhereLastMVRCheckNEQ adds a WHERE last_mvr_check != ? condition
func (b *WorkerProfileQueryBuilder) WhereLastMVRCheckNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastMVRCheckNEQ(b.query, v)
	return b
}

// WhereLastMVRCheckGT adds a WHERE last_mvr_check > ? condition
func (b *WorkerProfileQueryBuilder) WhereLastMVRCheckGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastMVRCheckGT(b.query, v)
	return b
}

// WhereLastMVRCheckGTE adds a WHERE last_mvr_check >= ? condition
func (b *WorkerProfileQueryBuilder) WhereLastMVRCheckGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastMVRCheckGTE(b.query, v)
	return b
}

// WhereLastMVRCheckLT adds a WHERE last_mvr_check < ? condition
func (b *WorkerProfileQueryBuilder) WhereLastMVRCheckLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastMVRCheckLT(b.query, v)
	return b
}

// WhereLastMVRCheckLTE adds a WHERE last_mvr_check <= ? condition
func (b *WorkerProfileQueryBuilder) WhereLastMVRCheckLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastMVRCheckLTE(b.query, v)
	return b
}

// WhereLastMVRCheckIn adds a WHERE last_mvr_check IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLastMVRCheckIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastMVRCheckIn(b.query, v)
	return b
}

// WhereLastMVRCheckNotIn adds a WHERE last_mvr_check NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLastMVRCheckNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastMVRCheckNotIn(b.query, v)
	return b
}

// WhereLastDrugTestEQ adds a WHERE last_drug_test = ? condition
func (b *WorkerProfileQueryBuilder) WhereLastDrugTestEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastDrugTestEQ(b.query, v)
	return b
}

// WhereLastDrugTestNEQ adds a WHERE last_drug_test != ? condition
func (b *WorkerProfileQueryBuilder) WhereLastDrugTestNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastDrugTestNEQ(b.query, v)
	return b
}

// WhereLastDrugTestGT adds a WHERE last_drug_test > ? condition
func (b *WorkerProfileQueryBuilder) WhereLastDrugTestGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastDrugTestGT(b.query, v)
	return b
}

// WhereLastDrugTestGTE adds a WHERE last_drug_test >= ? condition
func (b *WorkerProfileQueryBuilder) WhereLastDrugTestGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastDrugTestGTE(b.query, v)
	return b
}

// WhereLastDrugTestLT adds a WHERE last_drug_test < ? condition
func (b *WorkerProfileQueryBuilder) WhereLastDrugTestLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastDrugTestLT(b.query, v)
	return b
}

// WhereLastDrugTestLTE adds a WHERE last_drug_test <= ? condition
func (b *WorkerProfileQueryBuilder) WhereLastDrugTestLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastDrugTestLTE(b.query, v)
	return b
}

// WhereLastDrugTestIn adds a WHERE last_drug_test IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLastDrugTestIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastDrugTestIn(b.query, v)
	return b
}

// WhereLastDrugTestNotIn adds a WHERE last_drug_test NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereLastDrugTestNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.LastDrugTestNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *WorkerProfileQueryBuilder) WhereVersionEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *WorkerProfileQueryBuilder) WhereVersionNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *WorkerProfileQueryBuilder) WhereVersionGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *WorkerProfileQueryBuilder) WhereVersionGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *WorkerProfileQueryBuilder) WhereVersionLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *WorkerProfileQueryBuilder) WhereVersionLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereVersionIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereVersionNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *WorkerProfileQueryBuilder) WhereCreatedAtEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *WorkerProfileQueryBuilder) WhereCreatedAtNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *WorkerProfileQueryBuilder) WhereCreatedAtGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *WorkerProfileQueryBuilder) WhereCreatedAtGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *WorkerProfileQueryBuilder) WhereCreatedAtLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *WorkerProfileQueryBuilder) WhereCreatedAtLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereCreatedAtIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereCreatedAtNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *WorkerProfileQueryBuilder) WhereUpdatedAtEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *WorkerProfileQueryBuilder) WhereUpdatedAtNEQ(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *WorkerProfileQueryBuilder) WhereUpdatedAtGT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *WorkerProfileQueryBuilder) WhereUpdatedAtGTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *WorkerProfileQueryBuilder) WhereUpdatedAtLT(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *WorkerProfileQueryBuilder) WhereUpdatedAtLTE(v int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereUpdatedAtIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *WorkerProfileQueryBuilder) WhereUpdatedAtNotIn(v []int64) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *WorkerProfileQueryBuilder) WhereTenant(orgID, buID pulid.ID) *WorkerProfileQueryBuilder {
	b.query = WorkerProfileQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *WorkerProfileQueryBuilder) WhereGroup(sep string, fn func(*WorkerProfileQueryBuilder) *WorkerProfileQueryBuilder) *WorkerProfileQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &WorkerProfileQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *WorkerProfileQueryBuilder) Where(query string, args ...interface{}) *WorkerProfileQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *WorkerProfileQueryBuilder) OrderBy(column string, desc ...bool) *WorkerProfileQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(WorkerProfileQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *WorkerProfileQueryBuilder) Limit(n int) *WorkerProfileQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *WorkerProfileQueryBuilder) Offset(n int) *WorkerProfileQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *WorkerProfileQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *WorkerProfileQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *WorkerProfileQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *WorkerProfileQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *WorkerProfileQueryBuilder) All(ctx context.Context) ([]*WorkerProfile, error) {
	var entities []*WorkerProfile
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *WorkerProfileQueryBuilder) AllWithCount(ctx context.Context) ([]*WorkerProfile, int, error) {
	var entities []*WorkerProfile
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *WorkerProfileQueryBuilder) One(ctx context.Context) (*WorkerProfile, error) {
	entity := new(WorkerProfile)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *WorkerProfileQueryBuilder) First(ctx context.Context) (*WorkerProfile, error) {
	entity := new(WorkerProfile)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// WorkerProfileBuild creates a chainable query builder
func WorkerProfileBuild(db bun.IDB) *WorkerProfileQueryBuilder {
	return NewWorkerProfileQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *WorkerProfileQueryBuilder) LoadBusinessUnit() *WorkerProfileQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *WorkerProfileQueryBuilder) LoadOrganization() *WorkerProfileQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadLicenseState loads the LicenseState relationship
func (b *WorkerProfileQueryBuilder) LoadLicenseState() *WorkerProfileQueryBuilder {
	b.query = b.query.Relation("LicenseState")
	return b
}

// LoadAllRelations loads all relationships for WorkerProfile
func (b *WorkerProfileQueryBuilder) LoadAllRelations() *WorkerProfileQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadLicenseState()
	return b
}
