/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package organization

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// organizationFieldConfig provides field configuration for Organization
type organizationFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// OrganizationQuery provides type-safe query helpers and constants
var OrganizationQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		StateID        string
		Name           string
		ScacCode       string
		DOTNumber      string
		LogoURL        string
		OrgType        string
		BucketName     string
		AddressLine1   string
		AddressLine2   string
		City           string
		PostalCode     string
		Timezone       string
		TaxID          string
		Metadata       string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ScacCodeNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ScacCodeGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DOTNumberNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DOTNumberGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LogoURLNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LogoURLGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OrgTypeEQ             func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		OrgTypeNEQ            func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		OrgTypeIn             func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		OrgTypeNotIn          func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		BucketNameEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BucketNameNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BucketNameGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TaxIDNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TaxIDGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MetadataEQ            func(q *bun.SelectQuery, v *Metadata) *bun.SelectQuery
		MetadataNEQ           func(q *bun.SelectQuery, v *Metadata) *bun.SelectQuery
		MetadataIn            func(q *bun.SelectQuery, v []*Metadata) *bun.SelectQuery
		MetadataNotIn         func(q *bun.SelectQuery, v []*Metadata) *bun.SelectQuery
		MetadataIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		MetadataIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]organizationFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit          string
		State                 string
		DocumentQualityConfig string
	}
}{
	// Table and alias constants
	Table:    "organizations",
	Alias:    "org",
	IDPrefix: "org_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		StateID        string
		Name           string
		ScacCode       string
		DOTNumber      string
		LogoURL        string
		OrgType        string
		BucketName     string
		AddressLine1   string
		AddressLine2   string
		City           string
		PostalCode     string
		Timezone       string
		TaxID          string
		Metadata       string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		StateID:        "state_id",
		Name:           "name",
		ScacCode:       "scac_code",
		DOTNumber:      "dot_number",
		LogoURL:        "logo_url",
		OrgType:        "org_type",
		BucketName:     "bucket_name",
		AddressLine1:   "address_line1",
		AddressLine2:   "address_line2",
		City:           "city",
		PostalCode:     "postal_code",
		Timezone:       "timezone",
		TaxID:          "tax_id",
		Metadata:       "metadata",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "org." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "org." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ScacCodeNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ScacCodeGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ScacCodeHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DOTNumberNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DOTNumberGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTNumberHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LogoURLNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LogoURLGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LogoURLHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OrgTypeEQ             func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		OrgTypeNEQ            func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		OrgTypeIn             func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		OrgTypeNotIn          func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		BucketNameEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BucketNameNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BucketNameGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BucketNameHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TaxIDNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TaxIDGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MetadataEQ            func(q *bun.SelectQuery, v *Metadata) *bun.SelectQuery
		MetadataNEQ           func(q *bun.SelectQuery, v *Metadata) *bun.SelectQuery
		MetadataIn            func(q *bun.SelectQuery, v []*Metadata) *bun.SelectQuery
		MetadataNotIn         func(q *bun.SelectQuery, v []*Metadata) *bun.SelectQuery
		MetadataIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		MetadataIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.business_unit_id"), bun.In(v))
		},
		StateIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.state_id"), v)
		},
		StateIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.state_id"), v)
		},
		StateIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.state_id"), bun.In(v))
		},
		StateIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.state_id"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.name"), "%"+v)
		},
		ScacCodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.scac_code"), v)
		},
		ScacCodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.scac_code"), v)
		},
		ScacCodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.scac_code"), bun.In(v))
		},
		ScacCodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.scac_code"), bun.In(v))
		},
		ScacCodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.scac_code"), v)
		},
		ScacCodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.scac_code"), v)
		},
		ScacCodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.scac_code"), v)
		},
		ScacCodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.scac_code"), v)
		},
		ScacCodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.scac_code"), "%"+v+"%")
		},
		ScacCodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.scac_code"), v+"%")
		},
		ScacCodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.scac_code"), "%"+v)
		},
		DOTNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.dot_number"), v)
		},
		DOTNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.dot_number"), v)
		},
		DOTNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.dot_number"), bun.In(v))
		},
		DOTNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.dot_number"), bun.In(v))
		},
		DOTNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.dot_number"), v)
		},
		DOTNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.dot_number"), v)
		},
		DOTNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.dot_number"), v)
		},
		DOTNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.dot_number"), v)
		},
		DOTNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.dot_number"), "%"+v+"%")
		},
		DOTNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.dot_number"), v+"%")
		},
		DOTNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.dot_number"), "%"+v)
		},
		LogoURLEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.logo_url"), v)
		},
		LogoURLNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.logo_url"), v)
		},
		LogoURLIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.logo_url"), bun.In(v))
		},
		LogoURLNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.logo_url"), bun.In(v))
		},
		LogoURLGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.logo_url"), v)
		},
		LogoURLGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.logo_url"), v)
		},
		LogoURLLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.logo_url"), v)
		},
		LogoURLLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.logo_url"), v)
		},
		LogoURLContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.logo_url"), "%"+v+"%")
		},
		LogoURLHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.logo_url"), v+"%")
		},
		LogoURLHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.logo_url"), "%"+v)
		},
		OrgTypeEQ: func(q *bun.SelectQuery, v Type) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.org_type"), v)
		},
		OrgTypeNEQ: func(q *bun.SelectQuery, v Type) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.org_type"), v)
		},
		OrgTypeIn: func(q *bun.SelectQuery, v []Type) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.org_type"), bun.In(v))
		},
		OrgTypeNotIn: func(q *bun.SelectQuery, v []Type) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.org_type"), bun.In(v))
		},
		BucketNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.bucket_name"), v)
		},
		BucketNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.bucket_name"), v)
		},
		BucketNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.bucket_name"), bun.In(v))
		},
		BucketNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.bucket_name"), bun.In(v))
		},
		BucketNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.bucket_name"), v)
		},
		BucketNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.bucket_name"), v)
		},
		BucketNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.bucket_name"), v)
		},
		BucketNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.bucket_name"), v)
		},
		BucketNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.bucket_name"), "%"+v+"%")
		},
		BucketNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.bucket_name"), v+"%")
		},
		BucketNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.bucket_name"), "%"+v)
		},
		AddressLine1EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.address_line1"), v)
		},
		AddressLine1NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.address_line1"), v)
		},
		AddressLine1In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.address_line1"), bun.In(v))
		},
		AddressLine1NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.address_line1"), bun.In(v))
		},
		AddressLine1GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.address_line1"), v)
		},
		AddressLine1GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.address_line1"), v)
		},
		AddressLine1LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.address_line1"), v)
		},
		AddressLine1LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.address_line1"), v)
		},
		AddressLine1Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.address_line1"), "%"+v+"%")
		},
		AddressLine1HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.address_line1"), v+"%")
		},
		AddressLine1HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.address_line1"), "%"+v)
		},
		AddressLine2EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.address_line2"), v)
		},
		AddressLine2NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.address_line2"), v)
		},
		AddressLine2In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.address_line2"), bun.In(v))
		},
		AddressLine2NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.address_line2"), bun.In(v))
		},
		AddressLine2GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.address_line2"), v)
		},
		AddressLine2GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.address_line2"), v)
		},
		AddressLine2LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.address_line2"), v)
		},
		AddressLine2LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.address_line2"), v)
		},
		AddressLine2Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.address_line2"), "%"+v+"%")
		},
		AddressLine2HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.address_line2"), v+"%")
		},
		AddressLine2HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.address_line2"), "%"+v)
		},
		CityEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.city"), v)
		},
		CityNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.city"), v)
		},
		CityIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.city"), bun.In(v))
		},
		CityNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.city"), bun.In(v))
		},
		CityGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.city"), v)
		},
		CityGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.city"), v)
		},
		CityLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.city"), v)
		},
		CityLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.city"), v)
		},
		CityContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.city"), "%"+v+"%")
		},
		CityHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.city"), v+"%")
		},
		CityHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.city"), "%"+v)
		},
		PostalCodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.postal_code"), v)
		},
		PostalCodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.postal_code"), v)
		},
		PostalCodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.postal_code"), bun.In(v))
		},
		PostalCodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.postal_code"), bun.In(v))
		},
		PostalCodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.postal_code"), v)
		},
		PostalCodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.postal_code"), v)
		},
		PostalCodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.postal_code"), v)
		},
		PostalCodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.postal_code"), v)
		},
		PostalCodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.postal_code"), "%"+v+"%")
		},
		PostalCodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.postal_code"), v+"%")
		},
		PostalCodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.postal_code"), "%"+v)
		},
		TimezoneEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.timezone"), v)
		},
		TimezoneNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.timezone"), v)
		},
		TimezoneIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.timezone"), bun.In(v))
		},
		TimezoneNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.timezone"), bun.In(v))
		},
		TimezoneGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.timezone"), v)
		},
		TimezoneGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.timezone"), v)
		},
		TimezoneLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.timezone"), v)
		},
		TimezoneLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.timezone"), v)
		},
		TimezoneContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.timezone"), "%"+v+"%")
		},
		TimezoneHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.timezone"), v+"%")
		},
		TimezoneHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.timezone"), "%"+v)
		},
		TaxIDEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.tax_id"), v)
		},
		TaxIDNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.tax_id"), v)
		},
		TaxIDIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.tax_id"), bun.In(v))
		},
		TaxIDNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.tax_id"), bun.In(v))
		},
		TaxIDGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.tax_id"), v)
		},
		TaxIDGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.tax_id"), v)
		},
		TaxIDLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.tax_id"), v)
		},
		TaxIDLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.tax_id"), v)
		},
		TaxIDContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.tax_id"), "%"+v+"%")
		},
		TaxIDHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.tax_id"), v+"%")
		},
		TaxIDHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("org.tax_id"), "%"+v)
		},
		MetadataEQ: func(q *bun.SelectQuery, v *Metadata) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.metadata"), v)
		},
		MetadataNEQ: func(q *bun.SelectQuery, v *Metadata) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.metadata"), v)
		},
		MetadataIn: func(q *bun.SelectQuery, v []*Metadata) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.metadata"), bun.In(v))
		},
		MetadataNotIn: func(q *bun.SelectQuery, v []*Metadata) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.metadata"), bun.In(v))
		},
		MetadataIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("org.metadata"))
		},
		MetadataIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("org.metadata"))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("org.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("org.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("org.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("org.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("org.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("org.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("org.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("org.updated_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("org.id"), id).
				Where("? = ?", bun.Ident("org.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "org." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"org.name ASC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "org.created_at DESC"
			}
			return "org.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "org.updated_at DESC"
			}
			return "org.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]organizationFieldConfig {
		return map[string]organizationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "org.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "org.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "org.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "org.name",
				Sortable:   true,
				Filterable: true,
			},
			"scac_code": {
				Name:       "scac_code",
				Column:     "org.scac_code",
				Sortable:   false,
				Filterable: true,
			},
			"dot_number": {
				Name:       "dot_number",
				Column:     "org.dot_number",
				Sortable:   false,
				Filterable: true,
			},
			"logo_url": {
				Name:       "logo_url",
				Column:     "org.logo_url",
				Sortable:   false,
				Filterable: true,
			},
			"org_type": {
				Name:       "org_type",
				Column:     "org.org_type",
				Sortable:   false,
				Filterable: false,
			},
			"bucket_name": {
				Name:       "bucket_name",
				Column:     "org.bucket_name",
				Sortable:   false,
				Filterable: true,
			},
			"address_line1": {
				Name:       "address_line1",
				Column:     "org.address_line1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line2": {
				Name:       "address_line2",
				Column:     "org.address_line2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "org.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "org.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "org.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"tax_id": {
				Name:       "tax_id",
				Column:     "org.tax_id",
				Sortable:   false,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "org.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "org.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "org.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "org.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]organizationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "org.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "org.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "org.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "org.name",
				Sortable:   true,
				Filterable: true,
			},
			"scac_code": {
				Name:       "scac_code",
				Column:     "org.scac_code",
				Sortable:   false,
				Filterable: true,
			},
			"dot_number": {
				Name:       "dot_number",
				Column:     "org.dot_number",
				Sortable:   false,
				Filterable: true,
			},
			"logo_url": {
				Name:       "logo_url",
				Column:     "org.logo_url",
				Sortable:   false,
				Filterable: true,
			},
			"org_type": {
				Name:       "org_type",
				Column:     "org.org_type",
				Sortable:   false,
				Filterable: false,
			},
			"bucket_name": {
				Name:       "bucket_name",
				Column:     "org.bucket_name",
				Sortable:   false,
				Filterable: true,
			},
			"address_line1": {
				Name:       "address_line1",
				Column:     "org.address_line1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line2": {
				Name:       "address_line2",
				Column:     "org.address_line2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "org.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "org.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "org.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"tax_id": {
				Name:       "tax_id",
				Column:     "org.tax_id",
				Sortable:   false,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "org.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "org.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "org.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "org.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]organizationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "org.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "org.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "org.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "org.name",
				Sortable:   true,
				Filterable: true,
			},
			"scac_code": {
				Name:       "scac_code",
				Column:     "org.scac_code",
				Sortable:   false,
				Filterable: true,
			},
			"dot_number": {
				Name:       "dot_number",
				Column:     "org.dot_number",
				Sortable:   false,
				Filterable: true,
			},
			"logo_url": {
				Name:       "logo_url",
				Column:     "org.logo_url",
				Sortable:   false,
				Filterable: true,
			},
			"org_type": {
				Name:       "org_type",
				Column:     "org.org_type",
				Sortable:   false,
				Filterable: false,
			},
			"bucket_name": {
				Name:       "bucket_name",
				Column:     "org.bucket_name",
				Sortable:   false,
				Filterable: true,
			},
			"address_line1": {
				Name:       "address_line1",
				Column:     "org.address_line1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line2": {
				Name:       "address_line2",
				Column:     "org.address_line2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "org.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "org.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "org.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"tax_id": {
				Name:       "tax_id",
				Column:     "org.tax_id",
				Sortable:   false,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "org.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "org.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "org.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "org.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit          string
		State                 string
		DocumentQualityConfig string
	}{
		BusinessUnit:          "BusinessUnit",
		State:                 "State",
		DocumentQualityConfig: "DocumentQualityConfig",
	},
}

// OrganizationQueryBuilder provides a fluent interface for building queries
type OrganizationQueryBuilder struct {
	query *bun.SelectQuery
}

// NewOrganizationQuery creates a new query builder
func NewOrganizationQuery(db bun.IDB) *OrganizationQueryBuilder {
	return &OrganizationQueryBuilder{
		query: db.NewSelect().Model((*Organization)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func OrganizationFromQuery(q *bun.SelectQuery) *OrganizationQueryBuilder {
	return &OrganizationQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *OrganizationQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *OrganizationQueryBuilder) Model(model interface{}) *OrganizationQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *OrganizationQueryBuilder) WhereIDEQ(v pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *OrganizationQueryBuilder) WhereIDNEQ(v pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *OrganizationQueryBuilder) WhereIDIn(v []pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereIDNotIn(v []pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *OrganizationQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *OrganizationQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *OrganizationQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereStateIDEQ adds a WHERE state_id = ? condition
func (b *OrganizationQueryBuilder) WhereStateIDEQ(v pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.StateIDEQ(b.query, v)
	return b
}

// WhereStateIDNEQ adds a WHERE state_id != ? condition
func (b *OrganizationQueryBuilder) WhereStateIDNEQ(v pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.StateIDNEQ(b.query, v)
	return b
}

// WhereStateIDIn adds a WHERE state_id IN (?) condition
func (b *OrganizationQueryBuilder) WhereStateIDIn(v []pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.StateIDIn(b.query, v)
	return b
}

// WhereStateIDNotIn adds a WHERE state_id NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereStateIDNotIn(v []pulid.ID) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.StateIDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *OrganizationQueryBuilder) WhereNameEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *OrganizationQueryBuilder) WhereNameNEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *OrganizationQueryBuilder) WhereNameIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereNameNotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *OrganizationQueryBuilder) WhereNameContains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *OrganizationQueryBuilder) WhereNameHasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *OrganizationQueryBuilder) WhereNameHasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereScacCodeEQ adds a WHERE scac_code = ? condition
func (b *OrganizationQueryBuilder) WhereScacCodeEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.ScacCodeEQ(b.query, v)
	return b
}

// WhereScacCodeNEQ adds a WHERE scac_code != ? condition
func (b *OrganizationQueryBuilder) WhereScacCodeNEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.ScacCodeNEQ(b.query, v)
	return b
}

// WhereScacCodeIn adds a WHERE scac_code IN (?) condition
func (b *OrganizationQueryBuilder) WhereScacCodeIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.ScacCodeIn(b.query, v)
	return b
}

// WhereScacCodeNotIn adds a WHERE scac_code NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereScacCodeNotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.ScacCodeNotIn(b.query, v)
	return b
}

// WhereScacCodeContains adds a WHERE scac_code LIKE ? condition
func (b *OrganizationQueryBuilder) WhereScacCodeContains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.ScacCodeContains(b.query, v)
	return b
}

// WhereScacCodeHasPrefix adds a WHERE scac_code LIKE ? condition
func (b *OrganizationQueryBuilder) WhereScacCodeHasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.ScacCodeHasPrefix(b.query, v)
	return b
}

// WhereScacCodeHasSuffix adds a WHERE scac_code LIKE ? condition
func (b *OrganizationQueryBuilder) WhereScacCodeHasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.ScacCodeHasSuffix(b.query, v)
	return b
}

// WhereDOTNumberEQ adds a WHERE dot_number = ? condition
func (b *OrganizationQueryBuilder) WhereDOTNumberEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.DOTNumberEQ(b.query, v)
	return b
}

// WhereDOTNumberNEQ adds a WHERE dot_number != ? condition
func (b *OrganizationQueryBuilder) WhereDOTNumberNEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.DOTNumberNEQ(b.query, v)
	return b
}

// WhereDOTNumberIn adds a WHERE dot_number IN (?) condition
func (b *OrganizationQueryBuilder) WhereDOTNumberIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.DOTNumberIn(b.query, v)
	return b
}

// WhereDOTNumberNotIn adds a WHERE dot_number NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereDOTNumberNotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.DOTNumberNotIn(b.query, v)
	return b
}

// WhereDOTNumberContains adds a WHERE dot_number LIKE ? condition
func (b *OrganizationQueryBuilder) WhereDOTNumberContains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.DOTNumberContains(b.query, v)
	return b
}

// WhereDOTNumberHasPrefix adds a WHERE dot_number LIKE ? condition
func (b *OrganizationQueryBuilder) WhereDOTNumberHasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.DOTNumberHasPrefix(b.query, v)
	return b
}

// WhereDOTNumberHasSuffix adds a WHERE dot_number LIKE ? condition
func (b *OrganizationQueryBuilder) WhereDOTNumberHasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.DOTNumberHasSuffix(b.query, v)
	return b
}

// WhereLogoURLEQ adds a WHERE logo_url = ? condition
func (b *OrganizationQueryBuilder) WhereLogoURLEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.LogoURLEQ(b.query, v)
	return b
}

// WhereLogoURLNEQ adds a WHERE logo_url != ? condition
func (b *OrganizationQueryBuilder) WhereLogoURLNEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.LogoURLNEQ(b.query, v)
	return b
}

// WhereLogoURLIn adds a WHERE logo_url IN (?) condition
func (b *OrganizationQueryBuilder) WhereLogoURLIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.LogoURLIn(b.query, v)
	return b
}

// WhereLogoURLNotIn adds a WHERE logo_url NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereLogoURLNotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.LogoURLNotIn(b.query, v)
	return b
}

// WhereLogoURLContains adds a WHERE logo_url LIKE ? condition
func (b *OrganizationQueryBuilder) WhereLogoURLContains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.LogoURLContains(b.query, v)
	return b
}

// WhereLogoURLHasPrefix adds a WHERE logo_url LIKE ? condition
func (b *OrganizationQueryBuilder) WhereLogoURLHasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.LogoURLHasPrefix(b.query, v)
	return b
}

// WhereLogoURLHasSuffix adds a WHERE logo_url LIKE ? condition
func (b *OrganizationQueryBuilder) WhereLogoURLHasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.LogoURLHasSuffix(b.query, v)
	return b
}

// WhereOrgTypeEQ adds a WHERE org_type = ? condition
func (b *OrganizationQueryBuilder) WhereOrgTypeEQ(v Type) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.OrgTypeEQ(b.query, v)
	return b
}

// WhereOrgTypeNEQ adds a WHERE org_type != ? condition
func (b *OrganizationQueryBuilder) WhereOrgTypeNEQ(v Type) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.OrgTypeNEQ(b.query, v)
	return b
}

// WhereOrgTypeIn adds a WHERE org_type IN (?) condition
func (b *OrganizationQueryBuilder) WhereOrgTypeIn(v []Type) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.OrgTypeIn(b.query, v)
	return b
}

// WhereOrgTypeNotIn adds a WHERE org_type NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereOrgTypeNotIn(v []Type) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.OrgTypeNotIn(b.query, v)
	return b
}

// WhereBucketNameEQ adds a WHERE bucket_name = ? condition
func (b *OrganizationQueryBuilder) WhereBucketNameEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BucketNameEQ(b.query, v)
	return b
}

// WhereBucketNameNEQ adds a WHERE bucket_name != ? condition
func (b *OrganizationQueryBuilder) WhereBucketNameNEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BucketNameNEQ(b.query, v)
	return b
}

// WhereBucketNameIn adds a WHERE bucket_name IN (?) condition
func (b *OrganizationQueryBuilder) WhereBucketNameIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BucketNameIn(b.query, v)
	return b
}

// WhereBucketNameNotIn adds a WHERE bucket_name NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereBucketNameNotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BucketNameNotIn(b.query, v)
	return b
}

// WhereBucketNameContains adds a WHERE bucket_name LIKE ? condition
func (b *OrganizationQueryBuilder) WhereBucketNameContains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BucketNameContains(b.query, v)
	return b
}

// WhereBucketNameHasPrefix adds a WHERE bucket_name LIKE ? condition
func (b *OrganizationQueryBuilder) WhereBucketNameHasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BucketNameHasPrefix(b.query, v)
	return b
}

// WhereBucketNameHasSuffix adds a WHERE bucket_name LIKE ? condition
func (b *OrganizationQueryBuilder) WhereBucketNameHasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.BucketNameHasSuffix(b.query, v)
	return b
}

// WhereAddressLine1EQ adds a WHERE address_line1 = ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine1EQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine1EQ(b.query, v)
	return b
}

// WhereAddressLine1NEQ adds a WHERE address_line1 != ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine1NEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine1NEQ(b.query, v)
	return b
}

// WhereAddressLine1In adds a WHERE address_line1 IN (?) condition
func (b *OrganizationQueryBuilder) WhereAddressLine1In(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine1In(b.query, v)
	return b
}

// WhereAddressLine1NotIn adds a WHERE address_line1 NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereAddressLine1NotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine1NotIn(b.query, v)
	return b
}

// WhereAddressLine1Contains adds a WHERE address_line1 LIKE ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine1Contains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine1Contains(b.query, v)
	return b
}

// WhereAddressLine1HasPrefix adds a WHERE address_line1 LIKE ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine1HasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine1HasPrefix(b.query, v)
	return b
}

// WhereAddressLine1HasSuffix adds a WHERE address_line1 LIKE ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine1HasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine1HasSuffix(b.query, v)
	return b
}

// WhereAddressLine2EQ adds a WHERE address_line2 = ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine2EQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine2EQ(b.query, v)
	return b
}

// WhereAddressLine2NEQ adds a WHERE address_line2 != ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine2NEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine2NEQ(b.query, v)
	return b
}

// WhereAddressLine2In adds a WHERE address_line2 IN (?) condition
func (b *OrganizationQueryBuilder) WhereAddressLine2In(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine2In(b.query, v)
	return b
}

// WhereAddressLine2NotIn adds a WHERE address_line2 NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereAddressLine2NotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine2NotIn(b.query, v)
	return b
}

// WhereAddressLine2Contains adds a WHERE address_line2 LIKE ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine2Contains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine2Contains(b.query, v)
	return b
}

// WhereAddressLine2HasPrefix adds a WHERE address_line2 LIKE ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine2HasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine2HasPrefix(b.query, v)
	return b
}

// WhereAddressLine2HasSuffix adds a WHERE address_line2 LIKE ? condition
func (b *OrganizationQueryBuilder) WhereAddressLine2HasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.AddressLine2HasSuffix(b.query, v)
	return b
}

// WhereCityEQ adds a WHERE city = ? condition
func (b *OrganizationQueryBuilder) WhereCityEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CityEQ(b.query, v)
	return b
}

// WhereCityNEQ adds a WHERE city != ? condition
func (b *OrganizationQueryBuilder) WhereCityNEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CityNEQ(b.query, v)
	return b
}

// WhereCityIn adds a WHERE city IN (?) condition
func (b *OrganizationQueryBuilder) WhereCityIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CityIn(b.query, v)
	return b
}

// WhereCityNotIn adds a WHERE city NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereCityNotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CityNotIn(b.query, v)
	return b
}

// WhereCityContains adds a WHERE city LIKE ? condition
func (b *OrganizationQueryBuilder) WhereCityContains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CityContains(b.query, v)
	return b
}

// WhereCityHasPrefix adds a WHERE city LIKE ? condition
func (b *OrganizationQueryBuilder) WhereCityHasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CityHasPrefix(b.query, v)
	return b
}

// WhereCityHasSuffix adds a WHERE city LIKE ? condition
func (b *OrganizationQueryBuilder) WhereCityHasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CityHasSuffix(b.query, v)
	return b
}

// WherePostalCodeEQ adds a WHERE postal_code = ? condition
func (b *OrganizationQueryBuilder) WherePostalCodeEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.PostalCodeEQ(b.query, v)
	return b
}

// WherePostalCodeNEQ adds a WHERE postal_code != ? condition
func (b *OrganizationQueryBuilder) WherePostalCodeNEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.PostalCodeNEQ(b.query, v)
	return b
}

// WherePostalCodeIn adds a WHERE postal_code IN (?) condition
func (b *OrganizationQueryBuilder) WherePostalCodeIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.PostalCodeIn(b.query, v)
	return b
}

// WherePostalCodeNotIn adds a WHERE postal_code NOT IN (?) condition
func (b *OrganizationQueryBuilder) WherePostalCodeNotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.PostalCodeNotIn(b.query, v)
	return b
}

// WherePostalCodeContains adds a WHERE postal_code LIKE ? condition
func (b *OrganizationQueryBuilder) WherePostalCodeContains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.PostalCodeContains(b.query, v)
	return b
}

// WherePostalCodeHasPrefix adds a WHERE postal_code LIKE ? condition
func (b *OrganizationQueryBuilder) WherePostalCodeHasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.PostalCodeHasPrefix(b.query, v)
	return b
}

// WherePostalCodeHasSuffix adds a WHERE postal_code LIKE ? condition
func (b *OrganizationQueryBuilder) WherePostalCodeHasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.PostalCodeHasSuffix(b.query, v)
	return b
}

// WhereTimezoneEQ adds a WHERE timezone = ? condition
func (b *OrganizationQueryBuilder) WhereTimezoneEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TimezoneEQ(b.query, v)
	return b
}

// WhereTimezoneNEQ adds a WHERE timezone != ? condition
func (b *OrganizationQueryBuilder) WhereTimezoneNEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TimezoneNEQ(b.query, v)
	return b
}

// WhereTimezoneIn adds a WHERE timezone IN (?) condition
func (b *OrganizationQueryBuilder) WhereTimezoneIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TimezoneIn(b.query, v)
	return b
}

// WhereTimezoneNotIn adds a WHERE timezone NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereTimezoneNotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TimezoneNotIn(b.query, v)
	return b
}

// WhereTimezoneContains adds a WHERE timezone LIKE ? condition
func (b *OrganizationQueryBuilder) WhereTimezoneContains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TimezoneContains(b.query, v)
	return b
}

// WhereTimezoneHasPrefix adds a WHERE timezone LIKE ? condition
func (b *OrganizationQueryBuilder) WhereTimezoneHasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TimezoneHasPrefix(b.query, v)
	return b
}

// WhereTimezoneHasSuffix adds a WHERE timezone LIKE ? condition
func (b *OrganizationQueryBuilder) WhereTimezoneHasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TimezoneHasSuffix(b.query, v)
	return b
}

// WhereTaxIDEQ adds a WHERE tax_id = ? condition
func (b *OrganizationQueryBuilder) WhereTaxIDEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TaxIDEQ(b.query, v)
	return b
}

// WhereTaxIDNEQ adds a WHERE tax_id != ? condition
func (b *OrganizationQueryBuilder) WhereTaxIDNEQ(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TaxIDNEQ(b.query, v)
	return b
}

// WhereTaxIDIn adds a WHERE tax_id IN (?) condition
func (b *OrganizationQueryBuilder) WhereTaxIDIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TaxIDIn(b.query, v)
	return b
}

// WhereTaxIDNotIn adds a WHERE tax_id NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereTaxIDNotIn(v []string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TaxIDNotIn(b.query, v)
	return b
}

// WhereTaxIDContains adds a WHERE tax_id LIKE ? condition
func (b *OrganizationQueryBuilder) WhereTaxIDContains(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TaxIDContains(b.query, v)
	return b
}

// WhereTaxIDHasPrefix adds a WHERE tax_id LIKE ? condition
func (b *OrganizationQueryBuilder) WhereTaxIDHasPrefix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TaxIDHasPrefix(b.query, v)
	return b
}

// WhereTaxIDHasSuffix adds a WHERE tax_id LIKE ? condition
func (b *OrganizationQueryBuilder) WhereTaxIDHasSuffix(v string) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.TaxIDHasSuffix(b.query, v)
	return b
}

// WhereMetadataEQ adds a WHERE metadata = ? condition
func (b *OrganizationQueryBuilder) WhereMetadataEQ(v *Metadata) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.MetadataEQ(b.query, v)
	return b
}

// WhereMetadataNEQ adds a WHERE metadata != ? condition
func (b *OrganizationQueryBuilder) WhereMetadataNEQ(v *Metadata) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.MetadataNEQ(b.query, v)
	return b
}

// WhereMetadataIn adds a WHERE metadata IN (?) condition
func (b *OrganizationQueryBuilder) WhereMetadataIn(v []*Metadata) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.MetadataIn(b.query, v)
	return b
}

// WhereMetadataNotIn adds a WHERE metadata NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereMetadataNotIn(v []*Metadata) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.MetadataNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *OrganizationQueryBuilder) WhereVersionEQ(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *OrganizationQueryBuilder) WhereVersionNEQ(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *OrganizationQueryBuilder) WhereVersionGT(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *OrganizationQueryBuilder) WhereVersionGTE(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *OrganizationQueryBuilder) WhereVersionLT(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *OrganizationQueryBuilder) WhereVersionLTE(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *OrganizationQueryBuilder) WhereVersionIn(v []int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereVersionNotIn(v []int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *OrganizationQueryBuilder) WhereCreatedAtEQ(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *OrganizationQueryBuilder) WhereCreatedAtNEQ(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *OrganizationQueryBuilder) WhereCreatedAtGT(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *OrganizationQueryBuilder) WhereCreatedAtGTE(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *OrganizationQueryBuilder) WhereCreatedAtLT(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *OrganizationQueryBuilder) WhereCreatedAtLTE(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *OrganizationQueryBuilder) WhereCreatedAtIn(v []int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereCreatedAtNotIn(v []int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *OrganizationQueryBuilder) WhereUpdatedAtEQ(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *OrganizationQueryBuilder) WhereUpdatedAtNEQ(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *OrganizationQueryBuilder) WhereUpdatedAtGT(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *OrganizationQueryBuilder) WhereUpdatedAtGTE(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *OrganizationQueryBuilder) WhereUpdatedAtLT(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *OrganizationQueryBuilder) WhereUpdatedAtLTE(v int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *OrganizationQueryBuilder) WhereUpdatedAtIn(v []int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *OrganizationQueryBuilder) WhereUpdatedAtNotIn(v []int64) *OrganizationQueryBuilder {
	b.query = OrganizationQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *OrganizationQueryBuilder) WhereGroup(sep string, fn func(*OrganizationQueryBuilder) *OrganizationQueryBuilder) *OrganizationQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &OrganizationQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *OrganizationQueryBuilder) Where(query string, args ...interface{}) *OrganizationQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *OrganizationQueryBuilder) OrderBy(column string, desc ...bool) *OrganizationQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(OrganizationQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *OrganizationQueryBuilder) Limit(n int) *OrganizationQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *OrganizationQueryBuilder) Offset(n int) *OrganizationQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *OrganizationQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *OrganizationQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *OrganizationQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *OrganizationQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *OrganizationQueryBuilder) All(ctx context.Context) ([]*Organization, error) {
	var entities []*Organization
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *OrganizationQueryBuilder) AllWithCount(ctx context.Context) ([]*Organization, int, error) {
	var entities []*Organization
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *OrganizationQueryBuilder) One(ctx context.Context) (*Organization, error) {
	entity := new(Organization)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *OrganizationQueryBuilder) First(ctx context.Context) (*Organization, error) {
	entity := new(Organization)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// OrganizationBuild creates a chainable query builder
func OrganizationBuild(db bun.IDB) *OrganizationQueryBuilder {
	return NewOrganizationQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *OrganizationQueryBuilder) LoadBusinessUnit() *OrganizationQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadState loads the State relationship
func (b *OrganizationQueryBuilder) LoadState() *OrganizationQueryBuilder {
	b.query = b.query.Relation("State")
	return b
}

// LoadDocumentQualityConfig loads the DocumentQualityConfig relationship
func (b *OrganizationQueryBuilder) LoadDocumentQualityConfig() *OrganizationQueryBuilder {
	b.query = b.query.Relation("DocumentQualityConfig")
	return b
}

// LoadAllRelations loads all relationships for Organization
func (b *OrganizationQueryBuilder) LoadAllRelations() *OrganizationQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadState()
	b.LoadDocumentQualityConfig()
	return b
}
