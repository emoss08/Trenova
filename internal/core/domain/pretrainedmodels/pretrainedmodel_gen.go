// Code generated by gen-trenova. DO NOT EDIT.

package pretrainedmodels

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// pretrainedModelFieldConfig provides field configuration for PretrainedModel
type pretrainedModelFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// PretrainedModelQuery provides type-safe query helpers and constants
var PretrainedModelQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID              string
		Name            string
		Version         string
		Type            string
		Description     string
		Status          string
		Path            string
		IsDefault       string
		IsActive        string
		TrainedAt       string
		TrainingMetrics string
		CreatedAt       string
		UpdatedAt       string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TypeEQ               func(q *bun.SelectQuery, v ModelType) *bun.SelectQuery
		TypeNEQ              func(q *bun.SelectQuery, v ModelType) *bun.SelectQuery
		TypeIn               func(q *bun.SelectQuery, v []ModelType) *bun.SelectQuery
		TypeNotIn            func(q *bun.SelectQuery, v []ModelType) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ             func(q *bun.SelectQuery, v ModelStatus) *bun.SelectQuery
		StatusNEQ            func(q *bun.SelectQuery, v ModelStatus) *bun.SelectQuery
		StatusIn             func(q *bun.SelectQuery, v []ModelStatus) *bun.SelectQuery
		StatusNotIn          func(q *bun.SelectQuery, v []ModelStatus) *bun.SelectQuery
		PathEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PathNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PathGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsDefaultEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsDefaultNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsActiveEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveIn           func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsActiveNotIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrainedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		TrainedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		TrainedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainingMetricsEQ    func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		TrainingMetricsNEQ   func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		TrainingMetricsIn    func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		TrainingMetricsNotIn func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version string) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]pretrainedModelFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "pretrained_models",
	Alias:    "pm",
	IDPrefix: "pm_",

	// Field names
	Field: struct {
		ID              string
		Name            string
		Version         string
		Type            string
		Description     string
		Status          string
		Path            string
		IsDefault       string
		IsActive        string
		TrainedAt       string
		TrainingMetrics string
		CreatedAt       string
		UpdatedAt       string
	}{
		ID:              "id",
		Name:            "name",
		Version:         "version",
		Type:            "type",
		Description:     "description",
		Status:          "status",
		Path:            "path",
		IsDefault:       "is_default",
		IsActive:        "is_active",
		TrainedAt:       "trained_at",
		TrainingMetrics: "training_metrics",
		CreatedAt:       "created_at",
		UpdatedAt:       "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "pm." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "pm." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TypeEQ               func(q *bun.SelectQuery, v ModelType) *bun.SelectQuery
		TypeNEQ              func(q *bun.SelectQuery, v ModelType) *bun.SelectQuery
		TypeIn               func(q *bun.SelectQuery, v []ModelType) *bun.SelectQuery
		TypeNotIn            func(q *bun.SelectQuery, v []ModelType) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ             func(q *bun.SelectQuery, v ModelStatus) *bun.SelectQuery
		StatusNEQ            func(q *bun.SelectQuery, v ModelStatus) *bun.SelectQuery
		StatusIn             func(q *bun.SelectQuery, v []ModelStatus) *bun.SelectQuery
		StatusNotIn          func(q *bun.SelectQuery, v []ModelStatus) *bun.SelectQuery
		PathEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PathNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PathGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PathHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsDefaultEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsDefaultNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsActiveEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveIn           func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsActiveNotIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrainedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		TrainedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		TrainedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		TrainingMetricsEQ    func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		TrainingMetricsNEQ   func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		TrainingMetricsIn    func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		TrainingMetricsNotIn func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.id"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pm.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pm.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pm.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pm.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.name"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pm.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pm.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pm.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pm.version"), v)
		},
		VersionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.version"), "%"+v+"%")
		},
		VersionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.version"), v+"%")
		},
		VersionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.version"), "%"+v)
		},
		TypeEQ: func(q *bun.SelectQuery, v ModelType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.type"), v)
		},
		TypeNEQ: func(q *bun.SelectQuery, v ModelType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.type"), v)
		},
		TypeIn: func(q *bun.SelectQuery, v []ModelType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.type"), bun.In(v))
		},
		TypeNotIn: func(q *bun.SelectQuery, v []ModelType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.type"), bun.In(v))
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pm.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pm.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pm.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pm.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.description"), "%"+v)
		},
		StatusEQ: func(q *bun.SelectQuery, v ModelStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v ModelStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []ModelStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []ModelStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.status"), bun.In(v))
		},
		PathEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.path"), v)
		},
		PathNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.path"), v)
		},
		PathIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.path"), bun.In(v))
		},
		PathNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.path"), bun.In(v))
		},
		PathGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pm.path"), v)
		},
		PathGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pm.path"), v)
		},
		PathLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pm.path"), v)
		},
		PathLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pm.path"), v)
		},
		PathContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.path"), "%"+v+"%")
		},
		PathHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.path"), v+"%")
		},
		PathHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pm.path"), "%"+v)
		},
		IsDefaultEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.is_default"), v)
		},
		IsDefaultNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.is_default"), v)
		},
		IsDefaultIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.is_default"), bun.In(v))
		},
		IsDefaultNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.is_default"), bun.In(v))
		},
		IsActiveEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.is_active"), v)
		},
		IsActiveNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.is_active"), v)
		},
		IsActiveIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.is_active"), bun.In(v))
		},
		IsActiveNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.is_active"), bun.In(v))
		},
		TrainedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.trained_at"), v)
		},
		TrainedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.trained_at"), v)
		},
		TrainedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.trained_at"), bun.In(v))
		},
		TrainedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.trained_at"), bun.In(v))
		},
		TrainedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pm.trained_at"), v)
		},
		TrainedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pm.trained_at"), v)
		},
		TrainedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pm.trained_at"), v)
		},
		TrainedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pm.trained_at"), v)
		},
		TrainingMetricsEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.training_metrics"), v)
		},
		TrainingMetricsNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.training_metrics"), v)
		},
		TrainingMetricsIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.training_metrics"), bun.In(v))
		},
		TrainingMetricsNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.training_metrics"), bun.In(v))
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pm.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pm.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pm.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pm.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pm.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pm.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pm.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pm.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pm.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pm.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pm.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pm.updated_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version string) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version string) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("pm.id"), id).
				Where("? = ?", bun.Ident("pm.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "pm." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"pm.status ASC",
				"pm.name ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "pm.status DESC"
			}
			return "pm.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "pm.created_at DESC"
			}
			return "pm.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "pm.updated_at DESC"
			}
			return "pm.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]pretrainedModelFieldConfig {
		return map[string]pretrainedModelFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pm.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "pm.name",
				Sortable:   true,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "pm.version",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "pm.type",
				Sortable:   false,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "pm.description",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "pm.status",
				Sortable:   false,
				Filterable: true,
			},
			"path": {
				Name:       "path",
				Column:     "pm.path",
				Sortable:   false,
				Filterable: true,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "pm.is_default",
				Sortable:   false,
				Filterable: false,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "pm.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"trained_at": {
				Name:       "trained_at",
				Column:     "pm.trained_at",
				Sortable:   true,
				Filterable: true,
			},
			"training_metrics": {
				Name:       "training_metrics",
				Column:     "pm.training_metrics",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]pretrainedModelFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pm.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "pm.name",
				Sortable:   true,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "pm.version",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "pm.type",
				Sortable:   false,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "pm.description",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "pm.status",
				Sortable:   false,
				Filterable: true,
			},
			"path": {
				Name:       "path",
				Column:     "pm.path",
				Sortable:   false,
				Filterable: true,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "pm.is_default",
				Sortable:   false,
				Filterable: false,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "pm.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"trained_at": {
				Name:       "trained_at",
				Column:     "pm.trained_at",
				Sortable:   true,
				Filterable: true,
			},
			"training_metrics": {
				Name:       "training_metrics",
				Column:     "pm.training_metrics",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]pretrainedModelFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pm.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "pm.name",
				Sortable:   true,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "pm.version",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "pm.type",
				Sortable:   false,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "pm.description",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "pm.status",
				Sortable:   false,
				Filterable: true,
			},
			"path": {
				Name:       "path",
				Column:     "pm.path",
				Sortable:   false,
				Filterable: true,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "pm.is_default",
				Sortable:   false,
				Filterable: false,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "pm.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"trained_at": {
				Name:       "trained_at",
				Column:     "pm.trained_at",
				Sortable:   true,
				Filterable: true,
			},
			"training_metrics": {
				Name:       "training_metrics",
				Column:     "pm.training_metrics",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// PretrainedModelQueryBuilder provides a fluent interface for building queries
type PretrainedModelQueryBuilder struct {
	query *bun.SelectQuery
}

// NewPretrainedModelQuery creates a new query builder
func NewPretrainedModelQuery(db bun.IDB) *PretrainedModelQueryBuilder {
	return &PretrainedModelQueryBuilder{
		query: db.NewSelect().Model((*PretrainedModel)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func PretrainedModelFromQuery(q *bun.SelectQuery) *PretrainedModelQueryBuilder {
	return &PretrainedModelQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *PretrainedModelQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *PretrainedModelQueryBuilder) Model(model interface{}) *PretrainedModelQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *PretrainedModelQueryBuilder) WhereIDEQ(v pulid.ID) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *PretrainedModelQueryBuilder) WhereIDNEQ(v pulid.ID) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereIDIn(v []pulid.ID) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereIDNotIn(v []pulid.ID) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *PretrainedModelQueryBuilder) WhereNameEQ(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *PretrainedModelQueryBuilder) WhereNameNEQ(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereNameIn(v []string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereNameNotIn(v []string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *PretrainedModelQueryBuilder) WhereNameContains(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *PretrainedModelQueryBuilder) WhereNameHasPrefix(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *PretrainedModelQueryBuilder) WhereNameHasSuffix(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *PretrainedModelQueryBuilder) WhereVersionEQ(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *PretrainedModelQueryBuilder) WhereVersionNEQ(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereVersionIn(v []string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereVersionNotIn(v []string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereVersionContains adds a WHERE version LIKE ? condition
func (b *PretrainedModelQueryBuilder) WhereVersionContains(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.VersionContains(b.query, v)
	return b
}

// WhereVersionHasPrefix adds a WHERE version LIKE ? condition
func (b *PretrainedModelQueryBuilder) WhereVersionHasPrefix(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.VersionHasPrefix(b.query, v)
	return b
}

// WhereVersionHasSuffix adds a WHERE version LIKE ? condition
func (b *PretrainedModelQueryBuilder) WhereVersionHasSuffix(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.VersionHasSuffix(b.query, v)
	return b
}

// WhereTypeEQ adds a WHERE type = ? condition
func (b *PretrainedModelQueryBuilder) WhereTypeEQ(v ModelType) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TypeEQ(b.query, v)
	return b
}

// WhereTypeNEQ adds a WHERE type != ? condition
func (b *PretrainedModelQueryBuilder) WhereTypeNEQ(v ModelType) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TypeNEQ(b.query, v)
	return b
}

// WhereTypeIn adds a WHERE type IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereTypeIn(v []ModelType) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TypeIn(b.query, v)
	return b
}

// WhereTypeNotIn adds a WHERE type NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereTypeNotIn(v []ModelType) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TypeNotIn(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *PretrainedModelQueryBuilder) WhereDescriptionEQ(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *PretrainedModelQueryBuilder) WhereDescriptionNEQ(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereDescriptionIn(v []string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereDescriptionNotIn(v []string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *PretrainedModelQueryBuilder) WhereDescriptionContains(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *PretrainedModelQueryBuilder) WhereDescriptionHasPrefix(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *PretrainedModelQueryBuilder) WhereDescriptionHasSuffix(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *PretrainedModelQueryBuilder) WhereStatusEQ(v ModelStatus) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *PretrainedModelQueryBuilder) WhereStatusNEQ(v ModelStatus) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereStatusIn(v []ModelStatus) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereStatusNotIn(v []ModelStatus) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WherePathEQ adds a WHERE path = ? condition
func (b *PretrainedModelQueryBuilder) WherePathEQ(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.PathEQ(b.query, v)
	return b
}

// WherePathNEQ adds a WHERE path != ? condition
func (b *PretrainedModelQueryBuilder) WherePathNEQ(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.PathNEQ(b.query, v)
	return b
}

// WherePathIn adds a WHERE path IN (?) condition
func (b *PretrainedModelQueryBuilder) WherePathIn(v []string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.PathIn(b.query, v)
	return b
}

// WherePathNotIn adds a WHERE path NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WherePathNotIn(v []string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.PathNotIn(b.query, v)
	return b
}

// WherePathContains adds a WHERE path LIKE ? condition
func (b *PretrainedModelQueryBuilder) WherePathContains(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.PathContains(b.query, v)
	return b
}

// WherePathHasPrefix adds a WHERE path LIKE ? condition
func (b *PretrainedModelQueryBuilder) WherePathHasPrefix(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.PathHasPrefix(b.query, v)
	return b
}

// WherePathHasSuffix adds a WHERE path LIKE ? condition
func (b *PretrainedModelQueryBuilder) WherePathHasSuffix(v string) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.PathHasSuffix(b.query, v)
	return b
}

// WhereIsDefaultEQ adds a WHERE is_default = ? condition
func (b *PretrainedModelQueryBuilder) WhereIsDefaultEQ(v bool) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IsDefaultEQ(b.query, v)
	return b
}

// WhereIsDefaultNEQ adds a WHERE is_default != ? condition
func (b *PretrainedModelQueryBuilder) WhereIsDefaultNEQ(v bool) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IsDefaultNEQ(b.query, v)
	return b
}

// WhereIsDefaultIn adds a WHERE is_default IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereIsDefaultIn(v []bool) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IsDefaultIn(b.query, v)
	return b
}

// WhereIsDefaultNotIn adds a WHERE is_default NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereIsDefaultNotIn(v []bool) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IsDefaultNotIn(b.query, v)
	return b
}

// WhereIsActiveEQ adds a WHERE is_active = ? condition
func (b *PretrainedModelQueryBuilder) WhereIsActiveEQ(v bool) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IsActiveEQ(b.query, v)
	return b
}

// WhereIsActiveNEQ adds a WHERE is_active != ? condition
func (b *PretrainedModelQueryBuilder) WhereIsActiveNEQ(v bool) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IsActiveNEQ(b.query, v)
	return b
}

// WhereIsActiveIn adds a WHERE is_active IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereIsActiveIn(v []bool) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IsActiveIn(b.query, v)
	return b
}

// WhereIsActiveNotIn adds a WHERE is_active NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereIsActiveNotIn(v []bool) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.IsActiveNotIn(b.query, v)
	return b
}

// WhereTrainedAtEQ adds a WHERE trained_at = ? condition
func (b *PretrainedModelQueryBuilder) WhereTrainedAtEQ(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainedAtEQ(b.query, v)
	return b
}

// WhereTrainedAtNEQ adds a WHERE trained_at != ? condition
func (b *PretrainedModelQueryBuilder) WhereTrainedAtNEQ(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainedAtNEQ(b.query, v)
	return b
}

// WhereTrainedAtGT adds a WHERE trained_at > ? condition
func (b *PretrainedModelQueryBuilder) WhereTrainedAtGT(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainedAtGT(b.query, v)
	return b
}

// WhereTrainedAtGTE adds a WHERE trained_at >= ? condition
func (b *PretrainedModelQueryBuilder) WhereTrainedAtGTE(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainedAtGTE(b.query, v)
	return b
}

// WhereTrainedAtLT adds a WHERE trained_at < ? condition
func (b *PretrainedModelQueryBuilder) WhereTrainedAtLT(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainedAtLT(b.query, v)
	return b
}

// WhereTrainedAtLTE adds a WHERE trained_at <= ? condition
func (b *PretrainedModelQueryBuilder) WhereTrainedAtLTE(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainedAtLTE(b.query, v)
	return b
}

// WhereTrainedAtIn adds a WHERE trained_at IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereTrainedAtIn(v []int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainedAtIn(b.query, v)
	return b
}

// WhereTrainedAtNotIn adds a WHERE trained_at NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereTrainedAtNotIn(v []int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainedAtNotIn(b.query, v)
	return b
}

// WhereTrainingMetricsEQ adds a WHERE training_metrics = ? condition
func (b *PretrainedModelQueryBuilder) WhereTrainingMetricsEQ(v map[string]any) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainingMetricsEQ(b.query, v)
	return b
}

// WhereTrainingMetricsNEQ adds a WHERE training_metrics != ? condition
func (b *PretrainedModelQueryBuilder) WhereTrainingMetricsNEQ(v map[string]any) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainingMetricsNEQ(b.query, v)
	return b
}

// WhereTrainingMetricsIn adds a WHERE training_metrics IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereTrainingMetricsIn(v []map[string]any) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainingMetricsIn(b.query, v)
	return b
}

// WhereTrainingMetricsNotIn adds a WHERE training_metrics NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereTrainingMetricsNotIn(v []map[string]any) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.TrainingMetricsNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *PretrainedModelQueryBuilder) WhereCreatedAtEQ(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *PretrainedModelQueryBuilder) WhereCreatedAtNEQ(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *PretrainedModelQueryBuilder) WhereCreatedAtGT(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *PretrainedModelQueryBuilder) WhereCreatedAtGTE(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *PretrainedModelQueryBuilder) WhereCreatedAtLT(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *PretrainedModelQueryBuilder) WhereCreatedAtLTE(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereCreatedAtIn(v []int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereCreatedAtNotIn(v []int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *PretrainedModelQueryBuilder) WhereUpdatedAtEQ(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *PretrainedModelQueryBuilder) WhereUpdatedAtNEQ(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *PretrainedModelQueryBuilder) WhereUpdatedAtGT(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *PretrainedModelQueryBuilder) WhereUpdatedAtGTE(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *PretrainedModelQueryBuilder) WhereUpdatedAtLT(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *PretrainedModelQueryBuilder) WhereUpdatedAtLTE(v int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereUpdatedAtIn(v []int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *PretrainedModelQueryBuilder) WhereUpdatedAtNotIn(v []int64) *PretrainedModelQueryBuilder {
	b.query = PretrainedModelQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *PretrainedModelQueryBuilder) WhereGroup(sep string, fn func(*PretrainedModelQueryBuilder) *PretrainedModelQueryBuilder) *PretrainedModelQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &PretrainedModelQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *PretrainedModelQueryBuilder) Where(query string, args ...interface{}) *PretrainedModelQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *PretrainedModelQueryBuilder) OrderBy(column string, desc ...bool) *PretrainedModelQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(PretrainedModelQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *PretrainedModelQueryBuilder) Limit(n int) *PretrainedModelQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *PretrainedModelQueryBuilder) Offset(n int) *PretrainedModelQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *PretrainedModelQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *PretrainedModelQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *PretrainedModelQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *PretrainedModelQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *PretrainedModelQueryBuilder) All(ctx context.Context) ([]*PretrainedModel, error) {
	var entities []*PretrainedModel
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *PretrainedModelQueryBuilder) AllWithCount(ctx context.Context) ([]*PretrainedModel, int, error) {
	var entities []*PretrainedModel
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *PretrainedModelQueryBuilder) One(ctx context.Context) (*PretrainedModel, error) {
	entity := new(PretrainedModel)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *PretrainedModelQueryBuilder) First(ctx context.Context) (*PretrainedModel, error) {
	entity := new(PretrainedModel)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// PretrainedModelBuild creates a chainable query builder
func PretrainedModelBuild(db bun.IDB) *PretrainedModelQueryBuilder {
	return NewPretrainedModelQuery(db)
}

// Relationship loading methods
