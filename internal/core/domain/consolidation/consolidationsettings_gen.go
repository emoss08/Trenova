// Code generated by gen-trenova. DO NOT EDIT.

package consolidation

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// consolidationSettingsFieldConfig provides field configuration for ConsolidationSettings
type consolidationSettingsFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ConsolidationSettingsQuery provides type-safe query helpers and constants
var ConsolidationSettingsQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                   string
		BusinessUnitID       string
		OrganizationID       string
		MaxPickupDistance    string
		MaxDeliveryDistance  string
		MaxRouteDetour       string
		MaxTimeWindowGap     string
		MinTimeBuffer        string
		MaxShipmentsPerGroup string
		Version              string
		CreatedAt            string
		UpdatedAt            string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		MaxPickupDistanceEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceNEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxPickupDistanceNotIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxPickupDistanceGT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceGTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceLT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceLTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceEQ     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceNEQ    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxDeliveryDistanceNotIn  func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxDeliveryDistanceGT     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceGTE    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceLT     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceLTE    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourEQ          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourNEQ         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourIn          func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxRouteDetourNotIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxRouteDetourGT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourGTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourLT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourLTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxTimeWindowGapEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapNEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MaxTimeWindowGapNotIn     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MaxTimeWindowGapGT        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapGTE       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapLT        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapLTE       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MinTimeBufferNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MinTimeBufferGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxShipmentsPerGroupEQ    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupNEQ   func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupIn    func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxShipmentsPerGroupNotIn func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxShipmentsPerGroupGT    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupGTE   func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupLT    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupLTE   func(q *bun.SelectQuery, v int) *bun.SelectQuery
		VersionEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]consolidationSettingsFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "consolidation_settings",
	Alias:    "cs",
	IDPrefix: "cs_",

	// Field names
	Field: struct {
		ID                   string
		BusinessUnitID       string
		OrganizationID       string
		MaxPickupDistance    string
		MaxDeliveryDistance  string
		MaxRouteDetour       string
		MaxTimeWindowGap     string
		MinTimeBuffer        string
		MaxShipmentsPerGroup string
		Version              string
		CreatedAt            string
		UpdatedAt            string
	}{
		ID:                   "id",
		BusinessUnitID:       "business_unit_id",
		OrganizationID:       "organization_id",
		MaxPickupDistance:    "max_pickup_distance",
		MaxDeliveryDistance:  "max_delivery_distance",
		MaxRouteDetour:       "max_route_detour",
		MaxTimeWindowGap:     "max_time_window_gap",
		MinTimeBuffer:        "min_time_buffer",
		MaxShipmentsPerGroup: "max_shipments_per_group",
		Version:              "version",
		CreatedAt:            "created_at",
		UpdatedAt:            "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "cs." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "cs." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		MaxPickupDistanceEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceNEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxPickupDistanceNotIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxPickupDistanceGT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceGTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceLT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxPickupDistanceLTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceEQ     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceNEQ    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxDeliveryDistanceNotIn  func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxDeliveryDistanceGT     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceGTE    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceLT     func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxDeliveryDistanceLTE    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourEQ          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourNEQ         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourIn          func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxRouteDetourNotIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		MaxRouteDetourGT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourGTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourLT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxRouteDetourLTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		MaxTimeWindowGapEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapNEQ       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MaxTimeWindowGapNotIn     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MaxTimeWindowGapGT        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapGTE       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapLT        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxTimeWindowGapLTE       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MinTimeBufferNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MinTimeBufferGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinTimeBufferLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MaxShipmentsPerGroupEQ    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupNEQ   func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupIn    func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxShipmentsPerGroupNotIn func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxShipmentsPerGroupGT    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupGTE   func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupLT    func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxShipmentsPerGroupLTE   func(q *bun.SelectQuery, v int) *bun.SelectQuery
		VersionEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                    func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.organization_id"), v)
		},
		MaxPickupDistanceEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.max_pickup_distance"), v)
		},
		MaxPickupDistanceNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.max_pickup_distance"), v)
		},
		MaxPickupDistanceIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.max_pickup_distance"), bun.In(v))
		},
		MaxPickupDistanceNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.max_pickup_distance"), bun.In(v))
		},
		MaxPickupDistanceGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.max_pickup_distance"), v)
		},
		MaxPickupDistanceGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.max_pickup_distance"), v)
		},
		MaxPickupDistanceLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.max_pickup_distance"), v)
		},
		MaxPickupDistanceLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.max_pickup_distance"), v)
		},
		MaxDeliveryDistanceEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.max_delivery_distance"), v)
		},
		MaxDeliveryDistanceNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.max_delivery_distance"), v)
		},
		MaxDeliveryDistanceIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.max_delivery_distance"), bun.In(v))
		},
		MaxDeliveryDistanceNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.max_delivery_distance"), bun.In(v))
		},
		MaxDeliveryDistanceGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.max_delivery_distance"), v)
		},
		MaxDeliveryDistanceGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.max_delivery_distance"), v)
		},
		MaxDeliveryDistanceLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.max_delivery_distance"), v)
		},
		MaxDeliveryDistanceLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.max_delivery_distance"), v)
		},
		MaxRouteDetourEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.max_route_detour"), v)
		},
		MaxRouteDetourNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.max_route_detour"), v)
		},
		MaxRouteDetourIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.max_route_detour"), bun.In(v))
		},
		MaxRouteDetourNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.max_route_detour"), bun.In(v))
		},
		MaxRouteDetourGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.max_route_detour"), v)
		},
		MaxRouteDetourGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.max_route_detour"), v)
		},
		MaxRouteDetourLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.max_route_detour"), v)
		},
		MaxRouteDetourLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.max_route_detour"), v)
		},
		MaxTimeWindowGapEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.max_time_window_gap"), v)
		},
		MaxTimeWindowGapNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.max_time_window_gap"), v)
		},
		MaxTimeWindowGapIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.max_time_window_gap"), bun.In(v))
		},
		MaxTimeWindowGapNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.max_time_window_gap"), bun.In(v))
		},
		MaxTimeWindowGapGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.max_time_window_gap"), v)
		},
		MaxTimeWindowGapGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.max_time_window_gap"), v)
		},
		MaxTimeWindowGapLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.max_time_window_gap"), v)
		},
		MaxTimeWindowGapLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.max_time_window_gap"), v)
		},
		MinTimeBufferEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.min_time_buffer"), v)
		},
		MinTimeBufferNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.min_time_buffer"), v)
		},
		MinTimeBufferIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.min_time_buffer"), bun.In(v))
		},
		MinTimeBufferNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.min_time_buffer"), bun.In(v))
		},
		MinTimeBufferGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.min_time_buffer"), v)
		},
		MinTimeBufferGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.min_time_buffer"), v)
		},
		MinTimeBufferLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.min_time_buffer"), v)
		},
		MinTimeBufferLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.min_time_buffer"), v)
		},
		MaxShipmentsPerGroupEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.max_shipments_per_group"), v)
		},
		MaxShipmentsPerGroupNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.max_shipments_per_group"), v)
		},
		MaxShipmentsPerGroupIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.max_shipments_per_group"), bun.In(v))
		},
		MaxShipmentsPerGroupNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.max_shipments_per_group"), bun.In(v))
		},
		MaxShipmentsPerGroupGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.max_shipments_per_group"), v)
		},
		MaxShipmentsPerGroupGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.max_shipments_per_group"), v)
		},
		MaxShipmentsPerGroupLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.max_shipments_per_group"), v)
		},
		MaxShipmentsPerGroupLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.max_shipments_per_group"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("cs.organization_id"), orgID).
				Where("? = ?", bun.Ident("cs.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("cs.id"), id).
				Where("? = ?", bun.Ident("cs.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "cs." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"cs.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "cs.created_at DESC"
			}
			return "cs.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "cs.updated_at DESC"
			}
			return "cs.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]consolidationSettingsFieldConfig {
		return map[string]consolidationSettingsFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cs.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cs.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cs.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"max_pickup_distance": {
				Name:       "max_pickup_distance",
				Column:     "cs.max_pickup_distance",
				Sortable:   false,
				Filterable: false,
			},
			"max_delivery_distance": {
				Name:       "max_delivery_distance",
				Column:     "cs.max_delivery_distance",
				Sortable:   false,
				Filterable: false,
			},
			"max_route_detour": {
				Name:       "max_route_detour",
				Column:     "cs.max_route_detour",
				Sortable:   false,
				Filterable: false,
			},
			"max_time_window_gap": {
				Name:       "max_time_window_gap",
				Column:     "cs.max_time_window_gap",
				Sortable:   false,
				Filterable: false,
			},
			"min_time_buffer": {
				Name:       "min_time_buffer",
				Column:     "cs.min_time_buffer",
				Sortable:   false,
				Filterable: false,
			},
			"max_shipments_per_group": {
				Name:       "max_shipments_per_group",
				Column:     "cs.max_shipments_per_group",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cs.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cs.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cs.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]consolidationSettingsFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cs.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cs.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cs.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"max_pickup_distance": {
				Name:       "max_pickup_distance",
				Column:     "cs.max_pickup_distance",
				Sortable:   false,
				Filterable: false,
			},
			"max_delivery_distance": {
				Name:       "max_delivery_distance",
				Column:     "cs.max_delivery_distance",
				Sortable:   false,
				Filterable: false,
			},
			"max_route_detour": {
				Name:       "max_route_detour",
				Column:     "cs.max_route_detour",
				Sortable:   false,
				Filterable: false,
			},
			"max_time_window_gap": {
				Name:       "max_time_window_gap",
				Column:     "cs.max_time_window_gap",
				Sortable:   false,
				Filterable: false,
			},
			"min_time_buffer": {
				Name:       "min_time_buffer",
				Column:     "cs.min_time_buffer",
				Sortable:   false,
				Filterable: false,
			},
			"max_shipments_per_group": {
				Name:       "max_shipments_per_group",
				Column:     "cs.max_shipments_per_group",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cs.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cs.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cs.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]consolidationSettingsFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cs.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cs.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cs.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"max_pickup_distance": {
				Name:       "max_pickup_distance",
				Column:     "cs.max_pickup_distance",
				Sortable:   false,
				Filterable: false,
			},
			"max_delivery_distance": {
				Name:       "max_delivery_distance",
				Column:     "cs.max_delivery_distance",
				Sortable:   false,
				Filterable: false,
			},
			"max_route_detour": {
				Name:       "max_route_detour",
				Column:     "cs.max_route_detour",
				Sortable:   false,
				Filterable: false,
			},
			"max_time_window_gap": {
				Name:       "max_time_window_gap",
				Column:     "cs.max_time_window_gap",
				Sortable:   false,
				Filterable: false,
			},
			"min_time_buffer": {
				Name:       "min_time_buffer",
				Column:     "cs.min_time_buffer",
				Sortable:   false,
				Filterable: false,
			},
			"max_shipments_per_group": {
				Name:       "max_shipments_per_group",
				Column:     "cs.max_shipments_per_group",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cs.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cs.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cs.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// ConsolidationSettingsQueryBuilder provides a fluent interface for building queries
type ConsolidationSettingsQueryBuilder struct {
	query *bun.SelectQuery
}

// NewConsolidationSettingsQuery creates a new query builder
func NewConsolidationSettingsQuery(db bun.IDB) *ConsolidationSettingsQueryBuilder {
	return &ConsolidationSettingsQueryBuilder{
		query: db.NewSelect().Model((*ConsolidationSettings)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ConsolidationSettingsFromQuery(q *bun.SelectQuery) *ConsolidationSettingsQueryBuilder {
	return &ConsolidationSettingsQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ConsolidationSettingsQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ConsolidationSettingsQueryBuilder) Model(model interface{}) *ConsolidationSettingsQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereIDEQ(v pulid.ID) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereIDNEQ(v pulid.ID) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereMaxPickupDistanceEQ adds a WHERE max_pickup_distance = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxPickupDistanceEQ(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxPickupDistanceEQ(b.query, v)
	return b
}

// WhereMaxPickupDistanceNEQ adds a WHERE max_pickup_distance != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxPickupDistanceNEQ(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxPickupDistanceNEQ(b.query, v)
	return b
}

// WhereMaxPickupDistanceGT adds a WHERE max_pickup_distance > ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxPickupDistanceGT(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxPickupDistanceGT(b.query, v)
	return b
}

// WhereMaxPickupDistanceGTE adds a WHERE max_pickup_distance >= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxPickupDistanceGTE(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxPickupDistanceGTE(b.query, v)
	return b
}

// WhereMaxPickupDistanceLT adds a WHERE max_pickup_distance < ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxPickupDistanceLT(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxPickupDistanceLT(b.query, v)
	return b
}

// WhereMaxPickupDistanceLTE adds a WHERE max_pickup_distance <= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxPickupDistanceLTE(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxPickupDistanceLTE(b.query, v)
	return b
}

// WhereMaxPickupDistanceIn adds a WHERE max_pickup_distance IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxPickupDistanceIn(v []float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxPickupDistanceIn(b.query, v)
	return b
}

// WhereMaxPickupDistanceNotIn adds a WHERE max_pickup_distance NOT IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxPickupDistanceNotIn(v []float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxPickupDistanceNotIn(b.query, v)
	return b
}

// WhereMaxDeliveryDistanceEQ adds a WHERE max_delivery_distance = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxDeliveryDistanceEQ(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxDeliveryDistanceEQ(b.query, v)
	return b
}

// WhereMaxDeliveryDistanceNEQ adds a WHERE max_delivery_distance != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxDeliveryDistanceNEQ(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxDeliveryDistanceNEQ(b.query, v)
	return b
}

// WhereMaxDeliveryDistanceGT adds a WHERE max_delivery_distance > ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxDeliveryDistanceGT(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxDeliveryDistanceGT(b.query, v)
	return b
}

// WhereMaxDeliveryDistanceGTE adds a WHERE max_delivery_distance >= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxDeliveryDistanceGTE(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxDeliveryDistanceGTE(b.query, v)
	return b
}

// WhereMaxDeliveryDistanceLT adds a WHERE max_delivery_distance < ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxDeliveryDistanceLT(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxDeliveryDistanceLT(b.query, v)
	return b
}

// WhereMaxDeliveryDistanceLTE adds a WHERE max_delivery_distance <= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxDeliveryDistanceLTE(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxDeliveryDistanceLTE(b.query, v)
	return b
}

// WhereMaxDeliveryDistanceIn adds a WHERE max_delivery_distance IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxDeliveryDistanceIn(v []float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxDeliveryDistanceIn(b.query, v)
	return b
}

// WhereMaxDeliveryDistanceNotIn adds a WHERE max_delivery_distance NOT IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxDeliveryDistanceNotIn(v []float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxDeliveryDistanceNotIn(b.query, v)
	return b
}

// WhereMaxRouteDetourEQ adds a WHERE max_route_detour = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxRouteDetourEQ(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxRouteDetourEQ(b.query, v)
	return b
}

// WhereMaxRouteDetourNEQ adds a WHERE max_route_detour != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxRouteDetourNEQ(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxRouteDetourNEQ(b.query, v)
	return b
}

// WhereMaxRouteDetourGT adds a WHERE max_route_detour > ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxRouteDetourGT(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxRouteDetourGT(b.query, v)
	return b
}

// WhereMaxRouteDetourGTE adds a WHERE max_route_detour >= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxRouteDetourGTE(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxRouteDetourGTE(b.query, v)
	return b
}

// WhereMaxRouteDetourLT adds a WHERE max_route_detour < ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxRouteDetourLT(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxRouteDetourLT(b.query, v)
	return b
}

// WhereMaxRouteDetourLTE adds a WHERE max_route_detour <= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxRouteDetourLTE(v float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxRouteDetourLTE(b.query, v)
	return b
}

// WhereMaxRouteDetourIn adds a WHERE max_route_detour IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxRouteDetourIn(v []float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxRouteDetourIn(b.query, v)
	return b
}

// WhereMaxRouteDetourNotIn adds a WHERE max_route_detour NOT IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxRouteDetourNotIn(v []float64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxRouteDetourNotIn(b.query, v)
	return b
}

// WhereMaxTimeWindowGapEQ adds a WHERE max_time_window_gap = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxTimeWindowGapEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxTimeWindowGapEQ(b.query, v)
	return b
}

// WhereMaxTimeWindowGapNEQ adds a WHERE max_time_window_gap != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxTimeWindowGapNEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxTimeWindowGapNEQ(b.query, v)
	return b
}

// WhereMaxTimeWindowGapGT adds a WHERE max_time_window_gap > ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxTimeWindowGapGT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxTimeWindowGapGT(b.query, v)
	return b
}

// WhereMaxTimeWindowGapGTE adds a WHERE max_time_window_gap >= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxTimeWindowGapGTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxTimeWindowGapGTE(b.query, v)
	return b
}

// WhereMaxTimeWindowGapLT adds a WHERE max_time_window_gap < ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxTimeWindowGapLT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxTimeWindowGapLT(b.query, v)
	return b
}

// WhereMaxTimeWindowGapLTE adds a WHERE max_time_window_gap <= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxTimeWindowGapLTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxTimeWindowGapLTE(b.query, v)
	return b
}

// WhereMaxTimeWindowGapIn adds a WHERE max_time_window_gap IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxTimeWindowGapIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxTimeWindowGapIn(b.query, v)
	return b
}

// WhereMaxTimeWindowGapNotIn adds a WHERE max_time_window_gap NOT IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxTimeWindowGapNotIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxTimeWindowGapNotIn(b.query, v)
	return b
}

// WhereMinTimeBufferEQ adds a WHERE min_time_buffer = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMinTimeBufferEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MinTimeBufferEQ(b.query, v)
	return b
}

// WhereMinTimeBufferNEQ adds a WHERE min_time_buffer != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMinTimeBufferNEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MinTimeBufferNEQ(b.query, v)
	return b
}

// WhereMinTimeBufferGT adds a WHERE min_time_buffer > ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMinTimeBufferGT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MinTimeBufferGT(b.query, v)
	return b
}

// WhereMinTimeBufferGTE adds a WHERE min_time_buffer >= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMinTimeBufferGTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MinTimeBufferGTE(b.query, v)
	return b
}

// WhereMinTimeBufferLT adds a WHERE min_time_buffer < ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMinTimeBufferLT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MinTimeBufferLT(b.query, v)
	return b
}

// WhereMinTimeBufferLTE adds a WHERE min_time_buffer <= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMinTimeBufferLTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MinTimeBufferLTE(b.query, v)
	return b
}

// WhereMinTimeBufferIn adds a WHERE min_time_buffer IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMinTimeBufferIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MinTimeBufferIn(b.query, v)
	return b
}

// WhereMinTimeBufferNotIn adds a WHERE min_time_buffer NOT IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMinTimeBufferNotIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MinTimeBufferNotIn(b.query, v)
	return b
}

// WhereMaxShipmentsPerGroupEQ adds a WHERE max_shipments_per_group = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxShipmentsPerGroupEQ(v int) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxShipmentsPerGroupEQ(b.query, v)
	return b
}

// WhereMaxShipmentsPerGroupNEQ adds a WHERE max_shipments_per_group != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxShipmentsPerGroupNEQ(v int) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxShipmentsPerGroupNEQ(b.query, v)
	return b
}

// WhereMaxShipmentsPerGroupGT adds a WHERE max_shipments_per_group > ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxShipmentsPerGroupGT(v int) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxShipmentsPerGroupGT(b.query, v)
	return b
}

// WhereMaxShipmentsPerGroupGTE adds a WHERE max_shipments_per_group >= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxShipmentsPerGroupGTE(v int) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxShipmentsPerGroupGTE(b.query, v)
	return b
}

// WhereMaxShipmentsPerGroupLT adds a WHERE max_shipments_per_group < ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxShipmentsPerGroupLT(v int) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxShipmentsPerGroupLT(b.query, v)
	return b
}

// WhereMaxShipmentsPerGroupLTE adds a WHERE max_shipments_per_group <= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxShipmentsPerGroupLTE(v int) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxShipmentsPerGroupLTE(b.query, v)
	return b
}

// WhereMaxShipmentsPerGroupIn adds a WHERE max_shipments_per_group IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxShipmentsPerGroupIn(v []int) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxShipmentsPerGroupIn(b.query, v)
	return b
}

// WhereMaxShipmentsPerGroupNotIn adds a WHERE max_shipments_per_group NOT IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereMaxShipmentsPerGroupNotIn(v []int) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.MaxShipmentsPerGroupNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereVersionEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereVersionNEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereVersionGT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereVersionGTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereVersionLT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereVersionLTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereVersionIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereVersionNotIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereCreatedAtEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereCreatedAtNEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereCreatedAtGT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereCreatedAtGTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereCreatedAtLT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereCreatedAtLTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereCreatedAtIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereCreatedAtNotIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereUpdatedAtEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereUpdatedAtNEQ(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereUpdatedAtGT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereUpdatedAtGTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereUpdatedAtLT(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ConsolidationSettingsQueryBuilder) WhereUpdatedAtLTE(v int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereUpdatedAtIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ConsolidationSettingsQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ConsolidationSettingsQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ConsolidationSettingsQueryBuilder {
	b.query = ConsolidationSettingsQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ConsolidationSettingsQueryBuilder) WhereGroup(sep string, fn func(*ConsolidationSettingsQueryBuilder) *ConsolidationSettingsQueryBuilder) *ConsolidationSettingsQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ConsolidationSettingsQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ConsolidationSettingsQueryBuilder) Where(query string, args ...interface{}) *ConsolidationSettingsQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ConsolidationSettingsQueryBuilder) OrderBy(column string, desc ...bool) *ConsolidationSettingsQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ConsolidationSettingsQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ConsolidationSettingsQueryBuilder) Limit(n int) *ConsolidationSettingsQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ConsolidationSettingsQueryBuilder) Offset(n int) *ConsolidationSettingsQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ConsolidationSettingsQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ConsolidationSettingsQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ConsolidationSettingsQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ConsolidationSettingsQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ConsolidationSettingsQueryBuilder) All(ctx context.Context) ([]*ConsolidationSettings, error) {
	var entities []*ConsolidationSettings
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ConsolidationSettingsQueryBuilder) AllWithCount(ctx context.Context) ([]*ConsolidationSettings, int, error) {
	var entities []*ConsolidationSettings
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ConsolidationSettingsQueryBuilder) One(ctx context.Context) (*ConsolidationSettings, error) {
	entity := new(ConsolidationSettings)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ConsolidationSettingsQueryBuilder) First(ctx context.Context) (*ConsolidationSettings, error) {
	entity := new(ConsolidationSettings)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ConsolidationSettingsBuild creates a chainable query builder
func ConsolidationSettingsBuild(db bun.IDB) *ConsolidationSettingsQueryBuilder {
	return NewConsolidationSettingsQuery(db)
}
