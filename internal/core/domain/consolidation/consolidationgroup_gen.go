// Code generated by gen-trenova. DO NOT EDIT.

package consolidation

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// consolidationGroupFieldConfig provides field configuration for ConsolidationGroup
type consolidationGroupFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ConsolidationGroupQuery provides type-safe query helpers and constants
var ConsolidationGroupQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                  string
		BusinessUnitID      string
		OrganizationID      string
		ConsolidationNumber string
		Status              string
		CancelReason        string
		CanceledByID        string
		CanceledAt          string
		Version             string
		CreatedAt           string
		UpdatedAt           string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ConsolidationNumberEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ConsolidationNumberNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ConsolidationNumberGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ                     func(q *bun.SelectQuery, v GroupStatus) *bun.SelectQuery
		StatusNEQ                    func(q *bun.SelectQuery, v GroupStatus) *bun.SelectQuery
		StatusIn                     func(q *bun.SelectQuery, v []GroupStatus) *bun.SelectQuery
		StatusNotIn                  func(q *bun.SelectQuery, v []GroupStatus) *bun.SelectQuery
		CancelReasonEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CanceledByIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtEQ                 func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtNEQ                func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtIn                 func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtNotIn              func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]consolidationGroupFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		Shipments    string
		BusinessUnit string
		Organization string
		CanceledBy   string
	}
}{
	// Table and alias constants
	Table:    "consolidation_groups",
	Alias:    "cg",
	IDPrefix: "cg_",

	// Field names
	Field: struct {
		ID                  string
		BusinessUnitID      string
		OrganizationID      string
		ConsolidationNumber string
		Status              string
		CancelReason        string
		CanceledByID        string
		CanceledAt          string
		Version             string
		CreatedAt           string
		UpdatedAt           string
	}{
		ID:                  "id",
		BusinessUnitID:      "business_unit_id",
		OrganizationID:      "organization_id",
		ConsolidationNumber: "consolidation_number",
		Status:              "status",
		CancelReason:        "cancel_reason",
		CanceledByID:        "canceled_by_id",
		CanceledAt:          "canceled_at",
		Version:             "version",
		CreatedAt:           "created_at",
		UpdatedAt:           "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "cg." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "cg." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ConsolidationNumberEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ConsolidationNumberNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ConsolidationNumberGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ConsolidationNumberHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ                     func(q *bun.SelectQuery, v GroupStatus) *bun.SelectQuery
		StatusNEQ                    func(q *bun.SelectQuery, v GroupStatus) *bun.SelectQuery
		StatusIn                     func(q *bun.SelectQuery, v []GroupStatus) *bun.SelectQuery
		StatusNotIn                  func(q *bun.SelectQuery, v []GroupStatus) *bun.SelectQuery
		CancelReasonEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CancelReasonGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CancelReasonHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CanceledByIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CanceledByIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CanceledByIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledByIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtEQ                 func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtNEQ                func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		CanceledAtIn                 func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtNotIn              func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		CanceledAtIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		CanceledAtIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                       func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.organization_id"), bun.In(v))
		},
		ConsolidationNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.consolidation_number"), v)
		},
		ConsolidationNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.consolidation_number"), v)
		},
		ConsolidationNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.consolidation_number"), bun.In(v))
		},
		ConsolidationNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.consolidation_number"), bun.In(v))
		},
		ConsolidationNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cg.consolidation_number"), v)
		},
		ConsolidationNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cg.consolidation_number"), v)
		},
		ConsolidationNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cg.consolidation_number"), v)
		},
		ConsolidationNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cg.consolidation_number"), v)
		},
		ConsolidationNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cg.consolidation_number"), "%"+v+"%")
		},
		ConsolidationNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cg.consolidation_number"), v+"%")
		},
		ConsolidationNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cg.consolidation_number"), "%"+v)
		},
		StatusEQ: func(q *bun.SelectQuery, v GroupStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v GroupStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []GroupStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []GroupStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.status"), bun.In(v))
		},
		CancelReasonEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.cancel_reason"), v)
		},
		CancelReasonNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.cancel_reason"), v)
		},
		CancelReasonIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.cancel_reason"), bun.In(v))
		},
		CancelReasonNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.cancel_reason"), bun.In(v))
		},
		CancelReasonGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cg.cancel_reason"), v)
		},
		CancelReasonGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cg.cancel_reason"), v)
		},
		CancelReasonLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cg.cancel_reason"), v)
		},
		CancelReasonLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cg.cancel_reason"), v)
		},
		CancelReasonContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cg.cancel_reason"), "%"+v+"%")
		},
		CancelReasonHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cg.cancel_reason"), v+"%")
		},
		CancelReasonHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("cg.cancel_reason"), "%"+v)
		},
		CanceledByIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.canceled_by_id"), v)
		},
		CanceledByIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.canceled_by_id"), v)
		},
		CanceledByIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.canceled_by_id"), bun.In(v))
		},
		CanceledByIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.canceled_by_id"), bun.In(v))
		},
		CanceledByIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("cg.canceled_by_id"))
		},
		CanceledByIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("cg.canceled_by_id"))
		},
		CanceledAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.canceled_at"), v)
		},
		CanceledAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.canceled_at"), v)
		},
		CanceledAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.canceled_at"), bun.In(v))
		},
		CanceledAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.canceled_at"), bun.In(v))
		},
		CanceledAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("cg.canceled_at"))
		},
		CanceledAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("cg.canceled_at"))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cg.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cg.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cg.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cg.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cg.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cg.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cg.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cg.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cg.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cg.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cg.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cg.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cg.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cg.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cg.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cg.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("cg.organization_id"), orgID).
				Where("? = ?", bun.Ident("cg.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("cg.id"), id).
				Where("? = ?", bun.Ident("cg.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "cg." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"cg.status ASC",
				"cg.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "cg.status DESC"
			}
			return "cg.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "cg.created_at DESC"
			}
			return "cg.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "cg.updated_at DESC"
			}
			return "cg.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]consolidationGroupFieldConfig {
		return map[string]consolidationGroupFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cg.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cg.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cg.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"consolidation_number": {
				Name:       "consolidation_number",
				Column:     "cg.consolidation_number",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "cg.status",
				Sortable:   false,
				Filterable: true,
			},
			"cancel_reason": {
				Name:       "cancel_reason",
				Column:     "cg.cancel_reason",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_by_id": {
				Name:       "canceled_by_id",
				Column:     "cg.canceled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_at": {
				Name:       "canceled_at",
				Column:     "cg.canceled_at",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cg.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cg.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cg.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]consolidationGroupFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cg.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cg.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cg.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"consolidation_number": {
				Name:       "consolidation_number",
				Column:     "cg.consolidation_number",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "cg.status",
				Sortable:   false,
				Filterable: true,
			},
			"cancel_reason": {
				Name:       "cancel_reason",
				Column:     "cg.cancel_reason",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_by_id": {
				Name:       "canceled_by_id",
				Column:     "cg.canceled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_at": {
				Name:       "canceled_at",
				Column:     "cg.canceled_at",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cg.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cg.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cg.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]consolidationGroupFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cg.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cg.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cg.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"consolidation_number": {
				Name:       "consolidation_number",
				Column:     "cg.consolidation_number",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "cg.status",
				Sortable:   false,
				Filterable: true,
			},
			"cancel_reason": {
				Name:       "cancel_reason",
				Column:     "cg.cancel_reason",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_by_id": {
				Name:       "canceled_by_id",
				Column:     "cg.canceled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"canceled_at": {
				Name:       "canceled_at",
				Column:     "cg.canceled_at",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cg.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cg.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cg.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		Shipments    string
		BusinessUnit string
		Organization string
		CanceledBy   string
	}{
		Shipments:    "Shipments",
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		CanceledBy:   "CanceledBy",
	},
}

// ConsolidationGroupQueryBuilder provides a fluent interface for building queries
type ConsolidationGroupQueryBuilder struct {
	query *bun.SelectQuery
}

// NewConsolidationGroupQuery creates a new query builder
func NewConsolidationGroupQuery(db bun.IDB) *ConsolidationGroupQueryBuilder {
	return &ConsolidationGroupQueryBuilder{
		query: db.NewSelect().Model((*ConsolidationGroup)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ConsolidationGroupFromQuery(q *bun.SelectQuery) *ConsolidationGroupQueryBuilder {
	return &ConsolidationGroupQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ConsolidationGroupQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ConsolidationGroupQueryBuilder) Model(model interface{}) *ConsolidationGroupQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereIDEQ(v pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereIDNEQ(v pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereIDIn(v []pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereIDNotIn(v []pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereConsolidationNumberEQ adds a WHERE consolidation_number = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereConsolidationNumberEQ(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.ConsolidationNumberEQ(b.query, v)
	return b
}

// WhereConsolidationNumberNEQ adds a WHERE consolidation_number != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereConsolidationNumberNEQ(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.ConsolidationNumberNEQ(b.query, v)
	return b
}

// WhereConsolidationNumberIn adds a WHERE consolidation_number IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereConsolidationNumberIn(v []string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.ConsolidationNumberIn(b.query, v)
	return b
}

// WhereConsolidationNumberNotIn adds a WHERE consolidation_number NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereConsolidationNumberNotIn(v []string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.ConsolidationNumberNotIn(b.query, v)
	return b
}

// WhereConsolidationNumberContains adds a WHERE consolidation_number LIKE ? condition
func (b *ConsolidationGroupQueryBuilder) WhereConsolidationNumberContains(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.ConsolidationNumberContains(b.query, v)
	return b
}

// WhereConsolidationNumberHasPrefix adds a WHERE consolidation_number LIKE ? condition
func (b *ConsolidationGroupQueryBuilder) WhereConsolidationNumberHasPrefix(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.ConsolidationNumberHasPrefix(b.query, v)
	return b
}

// WhereConsolidationNumberHasSuffix adds a WHERE consolidation_number LIKE ? condition
func (b *ConsolidationGroupQueryBuilder) WhereConsolidationNumberHasSuffix(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.ConsolidationNumberHasSuffix(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereStatusEQ(v GroupStatus) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereStatusNEQ(v GroupStatus) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereStatusIn(v []GroupStatus) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereStatusNotIn(v []GroupStatus) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereCancelReasonEQ adds a WHERE cancel_reason = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCancelReasonEQ(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CancelReasonEQ(b.query, v)
	return b
}

// WhereCancelReasonNEQ adds a WHERE cancel_reason != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCancelReasonNEQ(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CancelReasonNEQ(b.query, v)
	return b
}

// WhereCancelReasonIn adds a WHERE cancel_reason IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereCancelReasonIn(v []string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CancelReasonIn(b.query, v)
	return b
}

// WhereCancelReasonNotIn adds a WHERE cancel_reason NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereCancelReasonNotIn(v []string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CancelReasonNotIn(b.query, v)
	return b
}

// WhereCancelReasonContains adds a WHERE cancel_reason LIKE ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCancelReasonContains(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CancelReasonContains(b.query, v)
	return b
}

// WhereCancelReasonHasPrefix adds a WHERE cancel_reason LIKE ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCancelReasonHasPrefix(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CancelReasonHasPrefix(b.query, v)
	return b
}

// WhereCancelReasonHasSuffix adds a WHERE cancel_reason LIKE ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCancelReasonHasSuffix(v string) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CancelReasonHasSuffix(b.query, v)
	return b
}

// WhereCanceledByIDEQ adds a WHERE canceled_by_id = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCanceledByIDEQ(v *pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CanceledByIDEQ(b.query, v)
	return b
}

// WhereCanceledByIDNEQ adds a WHERE canceled_by_id != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCanceledByIDNEQ(v *pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CanceledByIDNEQ(b.query, v)
	return b
}

// WhereCanceledByIDIn adds a WHERE canceled_by_id IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereCanceledByIDIn(v []*pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CanceledByIDIn(b.query, v)
	return b
}

// WhereCanceledByIDNotIn adds a WHERE canceled_by_id NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereCanceledByIDNotIn(v []*pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CanceledByIDNotIn(b.query, v)
	return b
}

// WhereCanceledAtEQ adds a WHERE canceled_at = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCanceledAtEQ(v *int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CanceledAtEQ(b.query, v)
	return b
}

// WhereCanceledAtNEQ adds a WHERE canceled_at != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCanceledAtNEQ(v *int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CanceledAtNEQ(b.query, v)
	return b
}

// WhereCanceledAtIn adds a WHERE canceled_at IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereCanceledAtIn(v []*int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CanceledAtIn(b.query, v)
	return b
}

// WhereCanceledAtNotIn adds a WHERE canceled_at NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereCanceledAtNotIn(v []*int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CanceledAtNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereVersionEQ(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereVersionNEQ(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ConsolidationGroupQueryBuilder) WhereVersionGT(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ConsolidationGroupQueryBuilder) WhereVersionGTE(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ConsolidationGroupQueryBuilder) WhereVersionLT(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ConsolidationGroupQueryBuilder) WhereVersionLTE(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereVersionIn(v []int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereVersionNotIn(v []int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCreatedAtEQ(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCreatedAtNEQ(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCreatedAtGT(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCreatedAtGTE(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCreatedAtLT(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ConsolidationGroupQueryBuilder) WhereCreatedAtLTE(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereCreatedAtIn(v []int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereCreatedAtNotIn(v []int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ConsolidationGroupQueryBuilder) WhereUpdatedAtEQ(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ConsolidationGroupQueryBuilder) WhereUpdatedAtNEQ(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ConsolidationGroupQueryBuilder) WhereUpdatedAtGT(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ConsolidationGroupQueryBuilder) WhereUpdatedAtGTE(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ConsolidationGroupQueryBuilder) WhereUpdatedAtLT(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ConsolidationGroupQueryBuilder) WhereUpdatedAtLTE(v int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereUpdatedAtIn(v []int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ConsolidationGroupQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ConsolidationGroupQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ConsolidationGroupQueryBuilder {
	b.query = ConsolidationGroupQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ConsolidationGroupQueryBuilder) WhereGroup(sep string, fn func(*ConsolidationGroupQueryBuilder) *ConsolidationGroupQueryBuilder) *ConsolidationGroupQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ConsolidationGroupQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ConsolidationGroupQueryBuilder) Where(query string, args ...interface{}) *ConsolidationGroupQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ConsolidationGroupQueryBuilder) OrderBy(column string, desc ...bool) *ConsolidationGroupQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ConsolidationGroupQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ConsolidationGroupQueryBuilder) Limit(n int) *ConsolidationGroupQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ConsolidationGroupQueryBuilder) Offset(n int) *ConsolidationGroupQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ConsolidationGroupQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ConsolidationGroupQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ConsolidationGroupQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ConsolidationGroupQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ConsolidationGroupQueryBuilder) All(ctx context.Context) ([]*ConsolidationGroup, error) {
	var entities []*ConsolidationGroup
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ConsolidationGroupQueryBuilder) AllWithCount(ctx context.Context) ([]*ConsolidationGroup, int, error) {
	var entities []*ConsolidationGroup
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ConsolidationGroupQueryBuilder) One(ctx context.Context) (*ConsolidationGroup, error) {
	entity := new(ConsolidationGroup)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ConsolidationGroupQueryBuilder) First(ctx context.Context) (*ConsolidationGroup, error) {
	entity := new(ConsolidationGroup)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ConsolidationGroupBuild creates a chainable query builder
func ConsolidationGroupBuild(db bun.IDB) *ConsolidationGroupQueryBuilder {
	return NewConsolidationGroupQuery(db)
}

// Relationship loading methods

// LoadShipments loads the Shipments relationship
func (b *ConsolidationGroupQueryBuilder) LoadShipments(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ConsolidationGroupQueryBuilder {
	if len(opts) > 0 {
		b.query = b.query.Relation("Shipments", func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		})
	} else {
		b.query = b.query.Relation("Shipments")
	}
	return b
}

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *ConsolidationGroupQueryBuilder) LoadBusinessUnit() *ConsolidationGroupQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *ConsolidationGroupQueryBuilder) LoadOrganization() *ConsolidationGroupQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadCanceledBy loads the CanceledBy relationship
func (b *ConsolidationGroupQueryBuilder) LoadCanceledBy() *ConsolidationGroupQueryBuilder {
	b.query = b.query.Relation("CanceledBy")
	return b
}

// LoadAllRelations loads all relationships for ConsolidationGroup
func (b *ConsolidationGroupQueryBuilder) LoadAllRelations() *ConsolidationGroupQueryBuilder {
	b.LoadShipments()
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadCanceledBy()
	return b
}
