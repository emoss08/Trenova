// Code generated by gen-trenova. DO NOT EDIT.

package pagefavorite

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// pageFavoriteFieldConfig provides field configuration for PageFavorite
type pageFavoriteFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// PageFavoriteQuery provides type-safe query helpers and constants
var PageFavoriteQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		UserID         string
		PageURL        string
		PageTitle      string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PageURLEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PageURLNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PageURLGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PageTitleNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PageTitleGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]pageFavoriteFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
		User         string
	}
}{
	// Table and alias constants
	Table:    "page_favorites",
	Alias:    "pf",
	IDPrefix: "pf_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		UserID         string
		PageURL        string
		PageTitle      string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		UserID:         "user_id",
		PageURL:        "page_url",
		PageTitle:      "page_title",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "pf." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "pf." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PageURLEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PageURLNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PageURLGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageURLHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PageTitleNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PageTitleGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PageTitleHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant              func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pf.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pf.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pf.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pf.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pf.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pf.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pf.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pf.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pf.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pf.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pf.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pf.organization_id"), bun.In(v))
		},
		UserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pf.user_id"), v)
		},
		UserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pf.user_id"), v)
		},
		UserIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pf.user_id"), bun.In(v))
		},
		UserIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pf.user_id"), bun.In(v))
		},
		PageURLEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pf.page_url"), v)
		},
		PageURLNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pf.page_url"), v)
		},
		PageURLIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pf.page_url"), bun.In(v))
		},
		PageURLNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pf.page_url"), bun.In(v))
		},
		PageURLGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pf.page_url"), v)
		},
		PageURLGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pf.page_url"), v)
		},
		PageURLLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pf.page_url"), v)
		},
		PageURLLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pf.page_url"), v)
		},
		PageURLContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pf.page_url"), "%"+v+"%")
		},
		PageURLHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pf.page_url"), v+"%")
		},
		PageURLHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pf.page_url"), "%"+v)
		},
		PageTitleEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pf.page_title"), v)
		},
		PageTitleNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pf.page_title"), v)
		},
		PageTitleIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pf.page_title"), bun.In(v))
		},
		PageTitleNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pf.page_title"), bun.In(v))
		},
		PageTitleGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pf.page_title"), v)
		},
		PageTitleGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pf.page_title"), v)
		},
		PageTitleLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pf.page_title"), v)
		},
		PageTitleLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pf.page_title"), v)
		},
		PageTitleContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pf.page_title"), "%"+v+"%")
		},
		PageTitleHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pf.page_title"), v+"%")
		},
		PageTitleHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pf.page_title"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pf.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pf.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pf.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pf.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pf.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pf.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pf.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pf.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pf.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pf.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pf.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pf.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pf.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pf.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pf.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pf.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pf.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pf.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pf.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pf.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pf.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pf.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pf.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pf.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("pf.organization_id"), orgID).
				Where("? = ?", bun.Ident("pf.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("pf.id"), id).
				Where("? = ?", bun.Ident("pf.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "pf." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"pf.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "pf.created_at DESC"
			}
			return "pf.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "pf.updated_at DESC"
			}
			return "pf.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]pageFavoriteFieldConfig {
		return map[string]pageFavoriteFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pf.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pf.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pf.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "pf.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"page_url": {
				Name:       "page_url",
				Column:     "pf.page_url",
				Sortable:   false,
				Filterable: true,
			},
			"page_title": {
				Name:       "page_title",
				Column:     "pf.page_title",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "pf.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pf.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pf.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]pageFavoriteFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pf.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pf.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pf.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "pf.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"page_url": {
				Name:       "page_url",
				Column:     "pf.page_url",
				Sortable:   false,
				Filterable: true,
			},
			"page_title": {
				Name:       "page_title",
				Column:     "pf.page_title",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "pf.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pf.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pf.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]pageFavoriteFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pf.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pf.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pf.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "pf.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"page_url": {
				Name:       "page_url",
				Column:     "pf.page_url",
				Sortable:   false,
				Filterable: true,
			},
			"page_title": {
				Name:       "page_title",
				Column:     "pf.page_title",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "pf.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pf.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pf.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
		User         string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		User:         "User",
	},
}

// PageFavoriteQueryBuilder provides a fluent interface for building queries
type PageFavoriteQueryBuilder struct {
	query *bun.SelectQuery
}

// NewPageFavoriteQuery creates a new query builder
func NewPageFavoriteQuery(db bun.IDB) *PageFavoriteQueryBuilder {
	return &PageFavoriteQueryBuilder{
		query: db.NewSelect().Model((*PageFavorite)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func PageFavoriteFromQuery(q *bun.SelectQuery) *PageFavoriteQueryBuilder {
	return &PageFavoriteQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *PageFavoriteQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *PageFavoriteQueryBuilder) Model(model interface{}) *PageFavoriteQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *PageFavoriteQueryBuilder) WhereIDEQ(v pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *PageFavoriteQueryBuilder) WhereIDNEQ(v pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereIDIn(v []pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereIDNotIn(v []pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *PageFavoriteQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *PageFavoriteQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *PageFavoriteQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *PageFavoriteQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereUserIDEQ adds a WHERE user_id = ? condition
func (b *PageFavoriteQueryBuilder) WhereUserIDEQ(v pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UserIDEQ(b.query, v)
	return b
}

// WhereUserIDNEQ adds a WHERE user_id != ? condition
func (b *PageFavoriteQueryBuilder) WhereUserIDNEQ(v pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UserIDNEQ(b.query, v)
	return b
}

// WhereUserIDIn adds a WHERE user_id IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereUserIDIn(v []pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UserIDIn(b.query, v)
	return b
}

// WhereUserIDNotIn adds a WHERE user_id NOT IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereUserIDNotIn(v []pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UserIDNotIn(b.query, v)
	return b
}

// WherePageURLEQ adds a WHERE page_url = ? condition
func (b *PageFavoriteQueryBuilder) WherePageURLEQ(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageURLEQ(b.query, v)
	return b
}

// WherePageURLNEQ adds a WHERE page_url != ? condition
func (b *PageFavoriteQueryBuilder) WherePageURLNEQ(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageURLNEQ(b.query, v)
	return b
}

// WherePageURLIn adds a WHERE page_url IN (?) condition
func (b *PageFavoriteQueryBuilder) WherePageURLIn(v []string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageURLIn(b.query, v)
	return b
}

// WherePageURLNotIn adds a WHERE page_url NOT IN (?) condition
func (b *PageFavoriteQueryBuilder) WherePageURLNotIn(v []string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageURLNotIn(b.query, v)
	return b
}

// WherePageURLContains adds a WHERE page_url LIKE ? condition
func (b *PageFavoriteQueryBuilder) WherePageURLContains(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageURLContains(b.query, v)
	return b
}

// WherePageURLHasPrefix adds a WHERE page_url LIKE ? condition
func (b *PageFavoriteQueryBuilder) WherePageURLHasPrefix(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageURLHasPrefix(b.query, v)
	return b
}

// WherePageURLHasSuffix adds a WHERE page_url LIKE ? condition
func (b *PageFavoriteQueryBuilder) WherePageURLHasSuffix(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageURLHasSuffix(b.query, v)
	return b
}

// WherePageTitleEQ adds a WHERE page_title = ? condition
func (b *PageFavoriteQueryBuilder) WherePageTitleEQ(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageTitleEQ(b.query, v)
	return b
}

// WherePageTitleNEQ adds a WHERE page_title != ? condition
func (b *PageFavoriteQueryBuilder) WherePageTitleNEQ(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageTitleNEQ(b.query, v)
	return b
}

// WherePageTitleIn adds a WHERE page_title IN (?) condition
func (b *PageFavoriteQueryBuilder) WherePageTitleIn(v []string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageTitleIn(b.query, v)
	return b
}

// WherePageTitleNotIn adds a WHERE page_title NOT IN (?) condition
func (b *PageFavoriteQueryBuilder) WherePageTitleNotIn(v []string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageTitleNotIn(b.query, v)
	return b
}

// WherePageTitleContains adds a WHERE page_title LIKE ? condition
func (b *PageFavoriteQueryBuilder) WherePageTitleContains(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageTitleContains(b.query, v)
	return b
}

// WherePageTitleHasPrefix adds a WHERE page_title LIKE ? condition
func (b *PageFavoriteQueryBuilder) WherePageTitleHasPrefix(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageTitleHasPrefix(b.query, v)
	return b
}

// WherePageTitleHasSuffix adds a WHERE page_title LIKE ? condition
func (b *PageFavoriteQueryBuilder) WherePageTitleHasSuffix(v string) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.PageTitleHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *PageFavoriteQueryBuilder) WhereVersionEQ(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *PageFavoriteQueryBuilder) WhereVersionNEQ(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *PageFavoriteQueryBuilder) WhereVersionGT(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *PageFavoriteQueryBuilder) WhereVersionGTE(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *PageFavoriteQueryBuilder) WhereVersionLT(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *PageFavoriteQueryBuilder) WhereVersionLTE(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereVersionIn(v []int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereVersionNotIn(v []int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *PageFavoriteQueryBuilder) WhereCreatedAtEQ(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *PageFavoriteQueryBuilder) WhereCreatedAtNEQ(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *PageFavoriteQueryBuilder) WhereCreatedAtGT(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *PageFavoriteQueryBuilder) WhereCreatedAtGTE(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *PageFavoriteQueryBuilder) WhereCreatedAtLT(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *PageFavoriteQueryBuilder) WhereCreatedAtLTE(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereCreatedAtIn(v []int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereCreatedAtNotIn(v []int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *PageFavoriteQueryBuilder) WhereUpdatedAtEQ(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *PageFavoriteQueryBuilder) WhereUpdatedAtNEQ(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *PageFavoriteQueryBuilder) WhereUpdatedAtGT(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *PageFavoriteQueryBuilder) WhereUpdatedAtGTE(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *PageFavoriteQueryBuilder) WhereUpdatedAtLT(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *PageFavoriteQueryBuilder) WhereUpdatedAtLTE(v int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereUpdatedAtIn(v []int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *PageFavoriteQueryBuilder) WhereUpdatedAtNotIn(v []int64) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *PageFavoriteQueryBuilder) WhereTenant(orgID, buID pulid.ID) *PageFavoriteQueryBuilder {
	b.query = PageFavoriteQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *PageFavoriteQueryBuilder) WhereGroup(sep string, fn func(*PageFavoriteQueryBuilder) *PageFavoriteQueryBuilder) *PageFavoriteQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &PageFavoriteQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *PageFavoriteQueryBuilder) Where(query string, args ...interface{}) *PageFavoriteQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *PageFavoriteQueryBuilder) OrderBy(column string, desc ...bool) *PageFavoriteQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(PageFavoriteQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *PageFavoriteQueryBuilder) Limit(n int) *PageFavoriteQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *PageFavoriteQueryBuilder) Offset(n int) *PageFavoriteQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *PageFavoriteQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *PageFavoriteQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *PageFavoriteQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *PageFavoriteQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *PageFavoriteQueryBuilder) All(ctx context.Context) ([]*PageFavorite, error) {
	var entities []*PageFavorite
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *PageFavoriteQueryBuilder) AllWithCount(ctx context.Context) ([]*PageFavorite, int, error) {
	var entities []*PageFavorite
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *PageFavoriteQueryBuilder) One(ctx context.Context) (*PageFavorite, error) {
	entity := new(PageFavorite)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *PageFavoriteQueryBuilder) First(ctx context.Context) (*PageFavorite, error) {
	entity := new(PageFavorite)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// PageFavoriteBuild creates a chainable query builder
func PageFavoriteBuild(db bun.IDB) *PageFavoriteQueryBuilder {
	return NewPageFavoriteQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *PageFavoriteQueryBuilder) LoadBusinessUnit() *PageFavoriteQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *PageFavoriteQueryBuilder) LoadOrganization() *PageFavoriteQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadUser loads the User relationship
func (b *PageFavoriteQueryBuilder) LoadUser() *PageFavoriteQueryBuilder {
	b.query = b.query.Relation("User")
	return b
}

// LoadAllRelations loads all relationships for PageFavorite
func (b *PageFavoriteQueryBuilder) LoadAllRelations() *PageFavoriteQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadUser()
	return b
}
