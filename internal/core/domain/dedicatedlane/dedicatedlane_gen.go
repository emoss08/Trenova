// Code generated by gen-trenova. DO NOT EDIT.

package dedicatedlane

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// dedicatedLaneFieldConfig provides field configuration for DedicatedLane
type dedicatedLaneFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// DedicatedLaneQuery provides type-safe query helpers and constants
var DedicatedLaneQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                    string
		BusinessUnitID        string
		OrganizationID        string
		Name                  string
		Status                string
		CustomerID            string
		OriginLocationID      string
		DestinationLocationID string
		ServiceTypeID         string
		ShipmentTypeID        string
		PrimaryWorkerID       string
		SecondaryWorkerID     string
		TrailerTypeID         string
		TractorTypeID         string
		AutoAssign            string
		Version               string
		CreatedAt             string
		UpdatedAt             string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ                   func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                  func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                   func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CustomerIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OriginLocationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OriginLocationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OriginLocationIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OriginLocationIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DestinationLocationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DestinationLocationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DestinationLocationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DestinationLocationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ServiceTypeIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ServiceTypeIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentTypeIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentTypeIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNotIn       func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		PrimaryWorkerIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDEQ            func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDNEQ           func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDNotIn         func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDEQ            func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDNEQ           func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDNotIn         func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		AutoAssignEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoAssignNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoAssignIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoAssignNotIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]dedicatedLaneFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit        string
		Organization        string
		ShipmentType        string
		ServiceType         string
		Customer            string
		TractorType         string
		TrailerType         string
		OriginLocation      string
		DestinationLocation string
		PrimaryWorker       string
		SecondaryWorker     string
	}
}{
	// Table and alias constants
	Table:    "dedicated_lanes",
	Alias:    "dl",
	IDPrefix: "dl_",

	// Field names
	Field: struct {
		ID                    string
		BusinessUnitID        string
		OrganizationID        string
		Name                  string
		Status                string
		CustomerID            string
		OriginLocationID      string
		DestinationLocationID string
		ServiceTypeID         string
		ShipmentTypeID        string
		PrimaryWorkerID       string
		SecondaryWorkerID     string
		TrailerTypeID         string
		TractorTypeID         string
		AutoAssign            string
		Version               string
		CreatedAt             string
		UpdatedAt             string
	}{
		ID:                    "id",
		BusinessUnitID:        "business_unit_id",
		OrganizationID:        "organization_id",
		Name:                  "name",
		Status:                "status",
		CustomerID:            "customer_id",
		OriginLocationID:      "origin_location_id",
		DestinationLocationID: "destination_location_id",
		ServiceTypeID:         "service_type_id",
		ShipmentTypeID:        "shipment_type_id",
		PrimaryWorkerID:       "primary_worker_id",
		SecondaryWorkerID:     "secondary_worker_id",
		TrailerTypeID:         "trailer_type_id",
		TractorTypeID:         "tractor_type_id",
		AutoAssign:            "auto_assign",
		Version:               "version",
		CreatedAt:             "created_at",
		UpdatedAt:             "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "dl." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "dl." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StatusEQ                   func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                  func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                   func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn                func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		CustomerIDEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDNotIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OriginLocationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OriginLocationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OriginLocationIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OriginLocationIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DestinationLocationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DestinationLocationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DestinationLocationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DestinationLocationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ServiceTypeIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ServiceTypeIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentTypeIDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentTypeIDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNotIn       func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		PrimaryWorkerIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDEQ            func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDNEQ           func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDNotIn         func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDEQ            func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDNEQ           func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDNotIn         func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		AutoAssignEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoAssignNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AutoAssignIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AutoAssignNotIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                     func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.organization_id"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dl.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dl.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dl.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dl.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dl.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dl.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dl.name"), "%"+v)
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.status"), bun.In(v))
		},
		CustomerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.customer_id"), v)
		},
		CustomerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.customer_id"), v)
		},
		CustomerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.customer_id"), bun.In(v))
		},
		CustomerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.customer_id"), bun.In(v))
		},
		OriginLocationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.origin_location_id"), v)
		},
		OriginLocationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.origin_location_id"), v)
		},
		OriginLocationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.origin_location_id"), bun.In(v))
		},
		OriginLocationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.origin_location_id"), bun.In(v))
		},
		DestinationLocationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.destination_location_id"), v)
		},
		DestinationLocationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.destination_location_id"), v)
		},
		DestinationLocationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.destination_location_id"), bun.In(v))
		},
		DestinationLocationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.destination_location_id"), bun.In(v))
		},
		ServiceTypeIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.service_type_id"), v)
		},
		ServiceTypeIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.service_type_id"), v)
		},
		ServiceTypeIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.service_type_id"), bun.In(v))
		},
		ServiceTypeIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.service_type_id"), bun.In(v))
		},
		ShipmentTypeIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.shipment_type_id"), v)
		},
		ShipmentTypeIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.shipment_type_id"), v)
		},
		ShipmentTypeIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.shipment_type_id"), bun.In(v))
		},
		ShipmentTypeIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.shipment_type_id"), bun.In(v))
		},
		PrimaryWorkerIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.primary_worker_id"), v)
		},
		PrimaryWorkerIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.primary_worker_id"), v)
		},
		PrimaryWorkerIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.primary_worker_id"), bun.In(v))
		},
		PrimaryWorkerIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.primary_worker_id"), bun.In(v))
		},
		PrimaryWorkerIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dl.primary_worker_id"))
		},
		PrimaryWorkerIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dl.primary_worker_id"))
		},
		SecondaryWorkerIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.secondary_worker_id"), v)
		},
		SecondaryWorkerIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.secondary_worker_id"), v)
		},
		SecondaryWorkerIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.secondary_worker_id"), bun.In(v))
		},
		SecondaryWorkerIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.secondary_worker_id"), bun.In(v))
		},
		SecondaryWorkerIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dl.secondary_worker_id"))
		},
		SecondaryWorkerIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dl.secondary_worker_id"))
		},
		TrailerTypeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.trailer_type_id"), v)
		},
		TrailerTypeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.trailer_type_id"), v)
		},
		TrailerTypeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.trailer_type_id"), bun.In(v))
		},
		TrailerTypeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.trailer_type_id"), bun.In(v))
		},
		TrailerTypeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dl.trailer_type_id"))
		},
		TrailerTypeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dl.trailer_type_id"))
		},
		TractorTypeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.tractor_type_id"), v)
		},
		TractorTypeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.tractor_type_id"), v)
		},
		TractorTypeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.tractor_type_id"), bun.In(v))
		},
		TractorTypeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.tractor_type_id"), bun.In(v))
		},
		TractorTypeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dl.tractor_type_id"))
		},
		TractorTypeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dl.tractor_type_id"))
		},
		AutoAssignEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.auto_assign"), v)
		},
		AutoAssignNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.auto_assign"), v)
		},
		AutoAssignIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.auto_assign"), bun.In(v))
		},
		AutoAssignNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.auto_assign"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dl.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dl.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dl.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dl.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dl.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dl.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dl.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dl.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dl.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dl.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dl.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dl.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dl.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dl.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dl.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dl.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("dl.organization_id"), orgID).
				Where("? = ?", bun.Ident("dl.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("dl.id"), id).
				Where("? = ?", bun.Ident("dl.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "dl." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"dl.status ASC",
				"dl.name ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "dl.status DESC"
			}
			return "dl.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "dl.created_at DESC"
			}
			return "dl.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "dl.updated_at DESC"
			}
			return "dl.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]dedicatedLaneFieldConfig {
		return map[string]dedicatedLaneFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dl.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dl.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dl.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "dl.name",
				Sortable:   true,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "dl.status",
				Sortable:   true,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "dl.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"origin_location_id": {
				Name:       "origin_location_id",
				Column:     "dl.origin_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"destination_location_id": {
				Name:       "destination_location_id",
				Column:     "dl.destination_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"service_type_id": {
				Name:       "service_type_id",
				Column:     "dl.service_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_type_id": {
				Name:       "shipment_type_id",
				Column:     "dl.shipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"primary_worker_id": {
				Name:       "primary_worker_id",
				Column:     "dl.primary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"secondary_worker_id": {
				Name:       "secondary_worker_id",
				Column:     "dl.secondary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_type_id": {
				Name:       "trailer_type_id",
				Column:     "dl.trailer_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_type_id": {
				Name:       "tractor_type_id",
				Column:     "dl.tractor_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"auto_assign": {
				Name:       "auto_assign",
				Column:     "dl.auto_assign",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dl.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dl.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dl.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]dedicatedLaneFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dl.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dl.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dl.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "dl.name",
				Sortable:   true,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "dl.status",
				Sortable:   true,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "dl.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"origin_location_id": {
				Name:       "origin_location_id",
				Column:     "dl.origin_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"destination_location_id": {
				Name:       "destination_location_id",
				Column:     "dl.destination_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"service_type_id": {
				Name:       "service_type_id",
				Column:     "dl.service_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_type_id": {
				Name:       "shipment_type_id",
				Column:     "dl.shipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"primary_worker_id": {
				Name:       "primary_worker_id",
				Column:     "dl.primary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"secondary_worker_id": {
				Name:       "secondary_worker_id",
				Column:     "dl.secondary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_type_id": {
				Name:       "trailer_type_id",
				Column:     "dl.trailer_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_type_id": {
				Name:       "tractor_type_id",
				Column:     "dl.tractor_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"auto_assign": {
				Name:       "auto_assign",
				Column:     "dl.auto_assign",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dl.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dl.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dl.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]dedicatedLaneFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dl.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dl.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dl.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "dl.name",
				Sortable:   true,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "dl.status",
				Sortable:   true,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "dl.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"origin_location_id": {
				Name:       "origin_location_id",
				Column:     "dl.origin_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"destination_location_id": {
				Name:       "destination_location_id",
				Column:     "dl.destination_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"service_type_id": {
				Name:       "service_type_id",
				Column:     "dl.service_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_type_id": {
				Name:       "shipment_type_id",
				Column:     "dl.shipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"primary_worker_id": {
				Name:       "primary_worker_id",
				Column:     "dl.primary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"secondary_worker_id": {
				Name:       "secondary_worker_id",
				Column:     "dl.secondary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_type_id": {
				Name:       "trailer_type_id",
				Column:     "dl.trailer_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_type_id": {
				Name:       "tractor_type_id",
				Column:     "dl.tractor_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"auto_assign": {
				Name:       "auto_assign",
				Column:     "dl.auto_assign",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dl.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dl.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dl.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit        string
		Organization        string
		ShipmentType        string
		ServiceType         string
		Customer            string
		TractorType         string
		TrailerType         string
		OriginLocation      string
		DestinationLocation string
		PrimaryWorker       string
		SecondaryWorker     string
	}{
		BusinessUnit:        "BusinessUnit",
		Organization:        "Organization",
		ShipmentType:        "ShipmentType",
		ServiceType:         "ServiceType",
		Customer:            "Customer",
		TractorType:         "TractorType",
		TrailerType:         "TrailerType",
		OriginLocation:      "OriginLocation",
		DestinationLocation: "DestinationLocation",
		PrimaryWorker:       "PrimaryWorker",
		SecondaryWorker:     "SecondaryWorker",
	},
}

// DedicatedLaneQueryBuilder provides a fluent interface for building queries
type DedicatedLaneQueryBuilder struct {
	query *bun.SelectQuery
}

// NewDedicatedLaneQuery creates a new query builder
func NewDedicatedLaneQuery(db bun.IDB) *DedicatedLaneQueryBuilder {
	return &DedicatedLaneQueryBuilder{
		query: db.NewSelect().Model((*DedicatedLane)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func DedicatedLaneFromQuery(q *bun.SelectQuery) *DedicatedLaneQueryBuilder {
	return &DedicatedLaneQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *DedicatedLaneQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *DedicatedLaneQueryBuilder) Model(model interface{}) *DedicatedLaneQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereIDEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereIDNEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereIDIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereIDNotIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *DedicatedLaneQueryBuilder) WhereNameEQ(v string) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *DedicatedLaneQueryBuilder) WhereNameNEQ(v string) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereNameIn(v []string) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereNameNotIn(v []string) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *DedicatedLaneQueryBuilder) WhereNameContains(v string) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *DedicatedLaneQueryBuilder) WhereNameHasPrefix(v string) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *DedicatedLaneQueryBuilder) WhereNameHasSuffix(v string) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *DedicatedLaneQueryBuilder) WhereStatusEQ(v domain.Status) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *DedicatedLaneQueryBuilder) WhereStatusNEQ(v domain.Status) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereStatusIn(v []domain.Status) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereStatusNotIn(v []domain.Status) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereCustomerIDEQ adds a WHERE customer_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereCustomerIDEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CustomerIDEQ(b.query, v)
	return b
}

// WhereCustomerIDNEQ adds a WHERE customer_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereCustomerIDNEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CustomerIDNEQ(b.query, v)
	return b
}

// WhereCustomerIDIn adds a WHERE customer_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereCustomerIDIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CustomerIDIn(b.query, v)
	return b
}

// WhereCustomerIDNotIn adds a WHERE customer_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereCustomerIDNotIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CustomerIDNotIn(b.query, v)
	return b
}

// WhereOriginLocationIDEQ adds a WHERE origin_location_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereOriginLocationIDEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.OriginLocationIDEQ(b.query, v)
	return b
}

// WhereOriginLocationIDNEQ adds a WHERE origin_location_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereOriginLocationIDNEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.OriginLocationIDNEQ(b.query, v)
	return b
}

// WhereOriginLocationIDIn adds a WHERE origin_location_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereOriginLocationIDIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.OriginLocationIDIn(b.query, v)
	return b
}

// WhereOriginLocationIDNotIn adds a WHERE origin_location_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereOriginLocationIDNotIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.OriginLocationIDNotIn(b.query, v)
	return b
}

// WhereDestinationLocationIDEQ adds a WHERE destination_location_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereDestinationLocationIDEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.DestinationLocationIDEQ(b.query, v)
	return b
}

// WhereDestinationLocationIDNEQ adds a WHERE destination_location_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereDestinationLocationIDNEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.DestinationLocationIDNEQ(b.query, v)
	return b
}

// WhereDestinationLocationIDIn adds a WHERE destination_location_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereDestinationLocationIDIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.DestinationLocationIDIn(b.query, v)
	return b
}

// WhereDestinationLocationIDNotIn adds a WHERE destination_location_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereDestinationLocationIDNotIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.DestinationLocationIDNotIn(b.query, v)
	return b
}

// WhereServiceTypeIDEQ adds a WHERE service_type_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereServiceTypeIDEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.ServiceTypeIDEQ(b.query, v)
	return b
}

// WhereServiceTypeIDNEQ adds a WHERE service_type_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereServiceTypeIDNEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.ServiceTypeIDNEQ(b.query, v)
	return b
}

// WhereServiceTypeIDIn adds a WHERE service_type_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereServiceTypeIDIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.ServiceTypeIDIn(b.query, v)
	return b
}

// WhereServiceTypeIDNotIn adds a WHERE service_type_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereServiceTypeIDNotIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.ServiceTypeIDNotIn(b.query, v)
	return b
}

// WhereShipmentTypeIDEQ adds a WHERE shipment_type_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereShipmentTypeIDEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.ShipmentTypeIDEQ(b.query, v)
	return b
}

// WhereShipmentTypeIDNEQ adds a WHERE shipment_type_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereShipmentTypeIDNEQ(v pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.ShipmentTypeIDNEQ(b.query, v)
	return b
}

// WhereShipmentTypeIDIn adds a WHERE shipment_type_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereShipmentTypeIDIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.ShipmentTypeIDIn(b.query, v)
	return b
}

// WhereShipmentTypeIDNotIn adds a WHERE shipment_type_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereShipmentTypeIDNotIn(v []pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.ShipmentTypeIDNotIn(b.query, v)
	return b
}

// WherePrimaryWorkerIDEQ adds a WHERE primary_worker_id = ? condition
func (b *DedicatedLaneQueryBuilder) WherePrimaryWorkerIDEQ(v *pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.PrimaryWorkerIDEQ(b.query, v)
	return b
}

// WherePrimaryWorkerIDNEQ adds a WHERE primary_worker_id != ? condition
func (b *DedicatedLaneQueryBuilder) WherePrimaryWorkerIDNEQ(v *pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.PrimaryWorkerIDNEQ(b.query, v)
	return b
}

// WherePrimaryWorkerIDIn adds a WHERE primary_worker_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WherePrimaryWorkerIDIn(v []*pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.PrimaryWorkerIDIn(b.query, v)
	return b
}

// WherePrimaryWorkerIDNotIn adds a WHERE primary_worker_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WherePrimaryWorkerIDNotIn(v []*pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.PrimaryWorkerIDNotIn(b.query, v)
	return b
}

// WhereSecondaryWorkerIDEQ adds a WHERE secondary_worker_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereSecondaryWorkerIDEQ(v *pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.SecondaryWorkerIDEQ(b.query, v)
	return b
}

// WhereSecondaryWorkerIDNEQ adds a WHERE secondary_worker_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereSecondaryWorkerIDNEQ(v *pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.SecondaryWorkerIDNEQ(b.query, v)
	return b
}

// WhereSecondaryWorkerIDIn adds a WHERE secondary_worker_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereSecondaryWorkerIDIn(v []*pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.SecondaryWorkerIDIn(b.query, v)
	return b
}

// WhereSecondaryWorkerIDNotIn adds a WHERE secondary_worker_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereSecondaryWorkerIDNotIn(v []*pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.SecondaryWorkerIDNotIn(b.query, v)
	return b
}

// WhereTrailerTypeIDEQ adds a WHERE trailer_type_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereTrailerTypeIDEQ(v *pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.TrailerTypeIDEQ(b.query, v)
	return b
}

// WhereTrailerTypeIDNEQ adds a WHERE trailer_type_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereTrailerTypeIDNEQ(v *pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.TrailerTypeIDNEQ(b.query, v)
	return b
}

// WhereTrailerTypeIDIn adds a WHERE trailer_type_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereTrailerTypeIDIn(v []*pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.TrailerTypeIDIn(b.query, v)
	return b
}

// WhereTrailerTypeIDNotIn adds a WHERE trailer_type_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereTrailerTypeIDNotIn(v []*pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.TrailerTypeIDNotIn(b.query, v)
	return b
}

// WhereTractorTypeIDEQ adds a WHERE tractor_type_id = ? condition
func (b *DedicatedLaneQueryBuilder) WhereTractorTypeIDEQ(v *pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.TractorTypeIDEQ(b.query, v)
	return b
}

// WhereTractorTypeIDNEQ adds a WHERE tractor_type_id != ? condition
func (b *DedicatedLaneQueryBuilder) WhereTractorTypeIDNEQ(v *pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.TractorTypeIDNEQ(b.query, v)
	return b
}

// WhereTractorTypeIDIn adds a WHERE tractor_type_id IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereTractorTypeIDIn(v []*pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.TractorTypeIDIn(b.query, v)
	return b
}

// WhereTractorTypeIDNotIn adds a WHERE tractor_type_id NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereTractorTypeIDNotIn(v []*pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.TractorTypeIDNotIn(b.query, v)
	return b
}

// WhereAutoAssignEQ adds a WHERE auto_assign = ? condition
func (b *DedicatedLaneQueryBuilder) WhereAutoAssignEQ(v bool) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.AutoAssignEQ(b.query, v)
	return b
}

// WhereAutoAssignNEQ adds a WHERE auto_assign != ? condition
func (b *DedicatedLaneQueryBuilder) WhereAutoAssignNEQ(v bool) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.AutoAssignNEQ(b.query, v)
	return b
}

// WhereAutoAssignIn adds a WHERE auto_assign IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereAutoAssignIn(v []bool) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.AutoAssignIn(b.query, v)
	return b
}

// WhereAutoAssignNotIn adds a WHERE auto_assign NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereAutoAssignNotIn(v []bool) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.AutoAssignNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *DedicatedLaneQueryBuilder) WhereVersionEQ(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *DedicatedLaneQueryBuilder) WhereVersionNEQ(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *DedicatedLaneQueryBuilder) WhereVersionGT(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *DedicatedLaneQueryBuilder) WhereVersionGTE(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *DedicatedLaneQueryBuilder) WhereVersionLT(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *DedicatedLaneQueryBuilder) WhereVersionLTE(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereVersionIn(v []int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereVersionNotIn(v []int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *DedicatedLaneQueryBuilder) WhereCreatedAtEQ(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *DedicatedLaneQueryBuilder) WhereCreatedAtNEQ(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *DedicatedLaneQueryBuilder) WhereCreatedAtGT(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *DedicatedLaneQueryBuilder) WhereCreatedAtGTE(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *DedicatedLaneQueryBuilder) WhereCreatedAtLT(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *DedicatedLaneQueryBuilder) WhereCreatedAtLTE(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereCreatedAtIn(v []int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereCreatedAtNotIn(v []int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *DedicatedLaneQueryBuilder) WhereUpdatedAtEQ(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *DedicatedLaneQueryBuilder) WhereUpdatedAtNEQ(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *DedicatedLaneQueryBuilder) WhereUpdatedAtGT(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *DedicatedLaneQueryBuilder) WhereUpdatedAtGTE(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *DedicatedLaneQueryBuilder) WhereUpdatedAtLT(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *DedicatedLaneQueryBuilder) WhereUpdatedAtLTE(v int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereUpdatedAtIn(v []int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *DedicatedLaneQueryBuilder) WhereUpdatedAtNotIn(v []int64) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *DedicatedLaneQueryBuilder) WhereTenant(orgID, buID pulid.ID) *DedicatedLaneQueryBuilder {
	b.query = DedicatedLaneQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *DedicatedLaneQueryBuilder) WhereGroup(sep string, fn func(*DedicatedLaneQueryBuilder) *DedicatedLaneQueryBuilder) *DedicatedLaneQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &DedicatedLaneQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *DedicatedLaneQueryBuilder) Where(query string, args ...interface{}) *DedicatedLaneQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *DedicatedLaneQueryBuilder) OrderBy(column string, desc ...bool) *DedicatedLaneQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(DedicatedLaneQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *DedicatedLaneQueryBuilder) Limit(n int) *DedicatedLaneQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *DedicatedLaneQueryBuilder) Offset(n int) *DedicatedLaneQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *DedicatedLaneQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *DedicatedLaneQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *DedicatedLaneQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *DedicatedLaneQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *DedicatedLaneQueryBuilder) All(ctx context.Context) ([]*DedicatedLane, error) {
	var entities []*DedicatedLane
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *DedicatedLaneQueryBuilder) AllWithCount(ctx context.Context) ([]*DedicatedLane, int, error) {
	var entities []*DedicatedLane
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *DedicatedLaneQueryBuilder) One(ctx context.Context) (*DedicatedLane, error) {
	entity := new(DedicatedLane)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *DedicatedLaneQueryBuilder) First(ctx context.Context) (*DedicatedLane, error) {
	entity := new(DedicatedLane)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// DedicatedLaneBuild creates a chainable query builder
func DedicatedLaneBuild(db bun.IDB) *DedicatedLaneQueryBuilder {
	return NewDedicatedLaneQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *DedicatedLaneQueryBuilder) LoadBusinessUnit() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *DedicatedLaneQueryBuilder) LoadOrganization() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadShipmentType loads the ShipmentType relationship
func (b *DedicatedLaneQueryBuilder) LoadShipmentType() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("ShipmentType")
	return b
}

// LoadServiceType loads the ServiceType relationship
func (b *DedicatedLaneQueryBuilder) LoadServiceType() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("ServiceType")
	return b
}

// LoadCustomer loads the Customer relationship
func (b *DedicatedLaneQueryBuilder) LoadCustomer() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("Customer")
	return b
}

// LoadTractorType loads the TractorType relationship
func (b *DedicatedLaneQueryBuilder) LoadTractorType() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("TractorType")
	return b
}

// LoadTrailerType loads the TrailerType relationship
func (b *DedicatedLaneQueryBuilder) LoadTrailerType() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("TrailerType")
	return b
}

// LoadOriginLocation loads the OriginLocation relationship
func (b *DedicatedLaneQueryBuilder) LoadOriginLocation() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("OriginLocation")
	return b
}

// LoadDestinationLocation loads the DestinationLocation relationship
func (b *DedicatedLaneQueryBuilder) LoadDestinationLocation() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("DestinationLocation")
	return b
}

// LoadPrimaryWorker loads the PrimaryWorker relationship
func (b *DedicatedLaneQueryBuilder) LoadPrimaryWorker() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("PrimaryWorker")
	return b
}

// LoadSecondaryWorker loads the SecondaryWorker relationship
func (b *DedicatedLaneQueryBuilder) LoadSecondaryWorker() *DedicatedLaneQueryBuilder {
	b.query = b.query.Relation("SecondaryWorker")
	return b
}

// LoadAllRelations loads all relationships for DedicatedLane
func (b *DedicatedLaneQueryBuilder) LoadAllRelations() *DedicatedLaneQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadShipmentType()
	b.LoadServiceType()
	b.LoadCustomer()
	b.LoadTractorType()
	b.LoadTrailerType()
	b.LoadOriginLocation()
	b.LoadDestinationLocation()
	b.LoadPrimaryWorker()
	b.LoadSecondaryWorker()
	return b
}

// DedicatedLaneRelationChain provides a fluent API for building nested relationship chains
type DedicatedLaneRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewDedicatedLaneRelationChain creates a new relation chain builder
func NewDedicatedLaneRelationChain() *DedicatedLaneRelationChain {
	return &DedicatedLaneRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *DedicatedLaneRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *DedicatedLaneRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *DedicatedLaneRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *DedicatedLaneRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *DedicatedLaneQueryBuilder) WithBusinessUnit() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *DedicatedLaneQueryBuilder) WithOrganization() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithShipmentType creates a relation chain starting with ShipmentType
func (b *DedicatedLaneQueryBuilder) WithShipmentType() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("ShipmentType")
	return chain
}

// WithServiceType creates a relation chain starting with ServiceType
func (b *DedicatedLaneQueryBuilder) WithServiceType() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("ServiceType")
	return chain
}

// WithCustomer creates a relation chain starting with Customer
func (b *DedicatedLaneQueryBuilder) WithCustomer() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("Customer")
	return chain
}

// WithTractorType creates a relation chain starting with TractorType
func (b *DedicatedLaneQueryBuilder) WithTractorType() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("TractorType")
	return chain
}

// WithTrailerType creates a relation chain starting with TrailerType
func (b *DedicatedLaneQueryBuilder) WithTrailerType() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("TrailerType")
	return chain
}

// WithOriginLocation creates a relation chain starting with OriginLocation
func (b *DedicatedLaneQueryBuilder) WithOriginLocation() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("OriginLocation")
	return chain
}

// WithDestinationLocation creates a relation chain starting with DestinationLocation
func (b *DedicatedLaneQueryBuilder) WithDestinationLocation() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("DestinationLocation")
	return chain
}

// WithPrimaryWorker creates a relation chain starting with PrimaryWorker
func (b *DedicatedLaneQueryBuilder) WithPrimaryWorker() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("PrimaryWorker")
	return chain
}

// WithSecondaryWorker creates a relation chain starting with SecondaryWorker
func (b *DedicatedLaneQueryBuilder) WithSecondaryWorker() *DedicatedLaneRelationChainBuilder {
	chain := &DedicatedLaneRelationChainBuilder{
		parent: b,
		chain:  NewDedicatedLaneRelationChain(),
	}
	chain.chain.Add("SecondaryWorker")
	return chain
}

// DedicatedLaneRelationChainBuilder provides fluent API for building nested relations
type DedicatedLaneRelationChainBuilder struct {
	parent *DedicatedLaneQueryBuilder
	chain  *DedicatedLaneRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *DedicatedLaneRelationChainBuilder) Load() *DedicatedLaneQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *DedicatedLaneRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *DedicatedLaneRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *DedicatedLaneRelationChainBuilder) OrderBy(order string) *DedicatedLaneRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *DedicatedLaneRelationChainBuilder) Where(condition string, args ...interface{}) *DedicatedLaneRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
