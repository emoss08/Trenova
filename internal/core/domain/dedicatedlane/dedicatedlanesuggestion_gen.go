// Code generated by gen-trenova. DO NOT EDIT.

package dedicatedlane

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/shopspring/decimal"
	"github.com/uptrace/bun"
)

// dedicatedLaneSuggestionFieldConfig provides field configuration for DedicatedLaneSuggestion
type dedicatedLaneSuggestionFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// DedicatedLaneSuggestionQuery provides type-safe query helpers and constants
var DedicatedLaneSuggestionQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                     string
		BusinessUnitID         string
		OrganizationID         string
		Status                 string
		CustomerID             string
		OriginLocationID       string
		DestinationLocationID  string
		ServiceTypeID          string
		ShipmentTypeID         string
		TrailerTypeID          string
		TractorTypeID          string
		CreatedDedicatedLaneID string
		ProcessedByID          string
		AverageFreightCharge   string
		TotalFreightValue      string
		ProcessedAt            string
		ConfidenceScore        string
		SuggestedName          string
		PatternDetails         string
		LastShipmentDate       string
		FrequencyCount         string
		FirstShipmentDate      string
		ExpiresAt              string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                        func(q *bun.SelectQuery, v SuggestionStatus) *bun.SelectQuery
		StatusNEQ                       func(q *bun.SelectQuery, v SuggestionStatus) *bun.SelectQuery
		StatusIn                        func(q *bun.SelectQuery, v []SuggestionStatus) *bun.SelectQuery
		StatusNotIn                     func(q *bun.SelectQuery, v []SuggestionStatus) *bun.SelectQuery
		CustomerIDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDNotIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OriginLocationIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OriginLocationIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OriginLocationIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OriginLocationIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DestinationLocationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DestinationLocationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DestinationLocationIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DestinationLocationIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDEQ                 func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ServiceTypeIDNEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ServiceTypeIDIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ServiceTypeIDNotIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ServiceTypeIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceTypeIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		ShipmentTypeIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ShipmentTypeIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ShipmentTypeIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		ShipmentTypeIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDEQ                 func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDNEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDNotIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDEQ                 func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDNEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDNotIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		CreatedDedicatedLaneIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CreatedDedicatedLaneIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CreatedDedicatedLaneIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CreatedDedicatedLaneIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CreatedDedicatedLaneIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		CreatedDedicatedLaneIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		ProcessedByIDEQ                 func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ProcessedByIDNEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ProcessedByIDIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ProcessedByIDNotIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ProcessedByIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		ProcessedByIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		AverageFreightChargeEQ          func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery
		AverageFreightChargeNEQ         func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery
		AverageFreightChargeIn          func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery
		AverageFreightChargeNotIn       func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery
		AverageFreightChargeIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		AverageFreightChargeIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		TotalFreightValueEQ             func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery
		TotalFreightValueNEQ            func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery
		TotalFreightValueIn             func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery
		TotalFreightValueNotIn          func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery
		TotalFreightValueIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		TotalFreightValueIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		ProcessedAtEQ                   func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ProcessedAtNEQ                  func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ProcessedAtIn                   func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ProcessedAtNotIn                func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ProcessedAtIsNull               func(q *bun.SelectQuery) *bun.SelectQuery
		ProcessedAtIsNotNull            func(q *bun.SelectQuery) *bun.SelectQuery
		ConfidenceScoreEQ               func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreNEQ              func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreIn               func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreNotIn            func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreGT               func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreGTE              func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreLT               func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreLTE              func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		SuggestedNameEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SuggestedNameNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SuggestedNameGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PatternDetailsEQ                func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		PatternDetailsNEQ               func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		PatternDetailsIn                func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		PatternDetailsNotIn             func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		LastShipmentDateEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastShipmentDateNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastShipmentDateGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FrequencyCountNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FrequencyCountGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FirstShipmentDateNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FirstShipmentDateGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		ExpiresAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		ExpiresAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]dedicatedLaneSuggestionFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit         string
		Organization         string
		Customer             string
		OriginLocation       string
		DestinationLocation  string
		ServiceType          string
		ShipmentType         string
		TractorType          string
		TrailerType          string
		ProcessedBy          string
		CreatedDedicatedLane string
	}
}{
	// Table and alias constants
	Table:    "dedicated_lane_suggestions",
	Alias:    "dls",
	IDPrefix: "dls_",

	// Field names
	Field: struct {
		ID                     string
		BusinessUnitID         string
		OrganizationID         string
		Status                 string
		CustomerID             string
		OriginLocationID       string
		DestinationLocationID  string
		ServiceTypeID          string
		ShipmentTypeID         string
		TrailerTypeID          string
		TractorTypeID          string
		CreatedDedicatedLaneID string
		ProcessedByID          string
		AverageFreightCharge   string
		TotalFreightValue      string
		ProcessedAt            string
		ConfidenceScore        string
		SuggestedName          string
		PatternDetails         string
		LastShipmentDate       string
		FrequencyCount         string
		FirstShipmentDate      string
		ExpiresAt              string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}{
		ID:                     "id",
		BusinessUnitID:         "business_unit_id",
		OrganizationID:         "organization_id",
		Status:                 "status",
		CustomerID:             "customer_id",
		OriginLocationID:       "origin_location_id",
		DestinationLocationID:  "destination_location_id",
		ServiceTypeID:          "service_type_id",
		ShipmentTypeID:         "shipment_type_id",
		TrailerTypeID:          "trailer_type_id",
		TractorTypeID:          "tractor_type_id",
		CreatedDedicatedLaneID: "created_dedicated_lane_id",
		ProcessedByID:          "processed_by_id",
		AverageFreightCharge:   "average_freight_charge",
		TotalFreightValue:      "total_freight_value",
		ProcessedAt:            "processed_at",
		ConfidenceScore:        "confidence_score",
		SuggestedName:          "suggested_name",
		PatternDetails:         "pattern_details",
		LastShipmentDate:       "last_shipment_date",
		FrequencyCount:         "frequency_count",
		FirstShipmentDate:      "first_shipment_date",
		ExpiresAt:              "expires_at",
		Version:                "version",
		CreatedAt:              "created_at",
		UpdatedAt:              "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "dls." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "dls." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ                        func(q *bun.SelectQuery, v SuggestionStatus) *bun.SelectQuery
		StatusNEQ                       func(q *bun.SelectQuery, v SuggestionStatus) *bun.SelectQuery
		StatusIn                        func(q *bun.SelectQuery, v []SuggestionStatus) *bun.SelectQuery
		StatusNotIn                     func(q *bun.SelectQuery, v []SuggestionStatus) *bun.SelectQuery
		CustomerIDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		CustomerIDIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CustomerIDNotIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OriginLocationIDEQ              func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OriginLocationIDNEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OriginLocationIDIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OriginLocationIDNotIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DestinationLocationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DestinationLocationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		DestinationLocationIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DestinationLocationIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ServiceTypeIDEQ                 func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ServiceTypeIDNEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ServiceTypeIDIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ServiceTypeIDNotIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ServiceTypeIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		ServiceTypeIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		ShipmentTypeIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ShipmentTypeIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ShipmentTypeIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ShipmentTypeIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		ShipmentTypeIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDEQ                 func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDNEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TrailerTypeIDIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDNotIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TrailerTypeIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		TrailerTypeIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDEQ                 func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDNEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TractorTypeIDIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDNotIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TractorTypeIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		TractorTypeIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		CreatedDedicatedLaneIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CreatedDedicatedLaneIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		CreatedDedicatedLaneIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CreatedDedicatedLaneIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		CreatedDedicatedLaneIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		CreatedDedicatedLaneIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		ProcessedByIDEQ                 func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ProcessedByIDNEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ProcessedByIDIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ProcessedByIDNotIn              func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ProcessedByIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		ProcessedByIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		AverageFreightChargeEQ          func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery
		AverageFreightChargeNEQ         func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery
		AverageFreightChargeIn          func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery
		AverageFreightChargeNotIn       func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery
		AverageFreightChargeIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		AverageFreightChargeIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		TotalFreightValueEQ             func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery
		TotalFreightValueNEQ            func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery
		TotalFreightValueIn             func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery
		TotalFreightValueNotIn          func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery
		TotalFreightValueIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		TotalFreightValueIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		ProcessedAtEQ                   func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ProcessedAtNEQ                  func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ProcessedAtIn                   func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ProcessedAtNotIn                func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ProcessedAtIsNull               func(q *bun.SelectQuery) *bun.SelectQuery
		ProcessedAtIsNotNull            func(q *bun.SelectQuery) *bun.SelectQuery
		ConfidenceScoreEQ               func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreNEQ              func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreIn               func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreNotIn            func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreGT               func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreGTE              func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreLT               func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		ConfidenceScoreLTE              func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		SuggestedNameEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SuggestedNameNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SuggestedNameGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SuggestedNameHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PatternDetailsEQ                func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		PatternDetailsNEQ               func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		PatternDetailsIn                func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		PatternDetailsNotIn             func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		LastShipmentDateEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastShipmentDateNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		LastShipmentDateGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		LastShipmentDateLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FrequencyCountNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FrequencyCountGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FrequencyCountLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FirstShipmentDateNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		FirstShipmentDateGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		FirstShipmentDateLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		ExpiresAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		ExpiresAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                       func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                          func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.organization_id"), bun.In(v))
		},
		StatusEQ: func(q *bun.SelectQuery, v SuggestionStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v SuggestionStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []SuggestionStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []SuggestionStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.status"), bun.In(v))
		},
		CustomerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.customer_id"), v)
		},
		CustomerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.customer_id"), v)
		},
		CustomerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.customer_id"), bun.In(v))
		},
		CustomerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.customer_id"), bun.In(v))
		},
		OriginLocationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.origin_location_id"), v)
		},
		OriginLocationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.origin_location_id"), v)
		},
		OriginLocationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.origin_location_id"), bun.In(v))
		},
		OriginLocationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.origin_location_id"), bun.In(v))
		},
		DestinationLocationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.destination_location_id"), v)
		},
		DestinationLocationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.destination_location_id"), v)
		},
		DestinationLocationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.destination_location_id"), bun.In(v))
		},
		DestinationLocationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.destination_location_id"), bun.In(v))
		},
		ServiceTypeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.service_type_id"), v)
		},
		ServiceTypeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.service_type_id"), v)
		},
		ServiceTypeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.service_type_id"), bun.In(v))
		},
		ServiceTypeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.service_type_id"), bun.In(v))
		},
		ServiceTypeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dls.service_type_id"))
		},
		ServiceTypeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dls.service_type_id"))
		},
		ShipmentTypeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.shipment_type_id"), v)
		},
		ShipmentTypeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.shipment_type_id"), v)
		},
		ShipmentTypeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.shipment_type_id"), bun.In(v))
		},
		ShipmentTypeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.shipment_type_id"), bun.In(v))
		},
		ShipmentTypeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dls.shipment_type_id"))
		},
		ShipmentTypeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dls.shipment_type_id"))
		},
		TrailerTypeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.trailer_type_id"), v)
		},
		TrailerTypeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.trailer_type_id"), v)
		},
		TrailerTypeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.trailer_type_id"), bun.In(v))
		},
		TrailerTypeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.trailer_type_id"), bun.In(v))
		},
		TrailerTypeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dls.trailer_type_id"))
		},
		TrailerTypeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dls.trailer_type_id"))
		},
		TractorTypeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.tractor_type_id"), v)
		},
		TractorTypeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.tractor_type_id"), v)
		},
		TractorTypeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.tractor_type_id"), bun.In(v))
		},
		TractorTypeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.tractor_type_id"), bun.In(v))
		},
		TractorTypeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dls.tractor_type_id"))
		},
		TractorTypeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dls.tractor_type_id"))
		},
		CreatedDedicatedLaneIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.created_dedicated_lane_id"), v)
		},
		CreatedDedicatedLaneIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.created_dedicated_lane_id"), v)
		},
		CreatedDedicatedLaneIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.created_dedicated_lane_id"), bun.In(v))
		},
		CreatedDedicatedLaneIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.created_dedicated_lane_id"), bun.In(v))
		},
		CreatedDedicatedLaneIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dls.created_dedicated_lane_id"))
		},
		CreatedDedicatedLaneIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dls.created_dedicated_lane_id"))
		},
		ProcessedByIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.processed_by_id"), v)
		},
		ProcessedByIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.processed_by_id"), v)
		},
		ProcessedByIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.processed_by_id"), bun.In(v))
		},
		ProcessedByIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.processed_by_id"), bun.In(v))
		},
		ProcessedByIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dls.processed_by_id"))
		},
		ProcessedByIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dls.processed_by_id"))
		},
		AverageFreightChargeEQ: func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.average_freight_charge"), v)
		},
		AverageFreightChargeNEQ: func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.average_freight_charge"), v)
		},
		AverageFreightChargeIn: func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.average_freight_charge"), bun.In(v))
		},
		AverageFreightChargeNotIn: func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.average_freight_charge"), bun.In(v))
		},
		AverageFreightChargeIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dls.average_freight_charge"))
		},
		AverageFreightChargeIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dls.average_freight_charge"))
		},
		TotalFreightValueEQ: func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.total_freight_value"), v)
		},
		TotalFreightValueNEQ: func(q *bun.SelectQuery, v *decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.total_freight_value"), v)
		},
		TotalFreightValueIn: func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.total_freight_value"), bun.In(v))
		},
		TotalFreightValueNotIn: func(q *bun.SelectQuery, v []*decimal.NullDecimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.total_freight_value"), bun.In(v))
		},
		TotalFreightValueIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dls.total_freight_value"))
		},
		TotalFreightValueIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dls.total_freight_value"))
		},
		ProcessedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.processed_at"), v)
		},
		ProcessedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.processed_at"), v)
		},
		ProcessedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.processed_at"), bun.In(v))
		},
		ProcessedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.processed_at"), bun.In(v))
		},
		ProcessedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dls.processed_at"))
		},
		ProcessedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dls.processed_at"))
		},
		ConfidenceScoreEQ: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.confidence_score"), v)
		},
		ConfidenceScoreNEQ: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.confidence_score"), v)
		},
		ConfidenceScoreIn: func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.confidence_score"), bun.In(v))
		},
		ConfidenceScoreNotIn: func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.confidence_score"), bun.In(v))
		},
		ConfidenceScoreGT: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dls.confidence_score"), v)
		},
		ConfidenceScoreGTE: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dls.confidence_score"), v)
		},
		ConfidenceScoreLT: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dls.confidence_score"), v)
		},
		ConfidenceScoreLTE: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dls.confidence_score"), v)
		},
		SuggestedNameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.suggested_name"), v)
		},
		SuggestedNameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.suggested_name"), v)
		},
		SuggestedNameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.suggested_name"), bun.In(v))
		},
		SuggestedNameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.suggested_name"), bun.In(v))
		},
		SuggestedNameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dls.suggested_name"), v)
		},
		SuggestedNameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dls.suggested_name"), v)
		},
		SuggestedNameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dls.suggested_name"), v)
		},
		SuggestedNameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dls.suggested_name"), v)
		},
		SuggestedNameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dls.suggested_name"), "%"+v+"%")
		},
		SuggestedNameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dls.suggested_name"), v+"%")
		},
		SuggestedNameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dls.suggested_name"), "%"+v)
		},
		PatternDetailsEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.pattern_details"), v)
		},
		PatternDetailsNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.pattern_details"), v)
		},
		PatternDetailsIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.pattern_details"), bun.In(v))
		},
		PatternDetailsNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.pattern_details"), bun.In(v))
		},
		LastShipmentDateEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.last_shipment_date"), v)
		},
		LastShipmentDateNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.last_shipment_date"), v)
		},
		LastShipmentDateIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.last_shipment_date"), bun.In(v))
		},
		LastShipmentDateNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.last_shipment_date"), bun.In(v))
		},
		LastShipmentDateGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dls.last_shipment_date"), v)
		},
		LastShipmentDateGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dls.last_shipment_date"), v)
		},
		LastShipmentDateLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dls.last_shipment_date"), v)
		},
		LastShipmentDateLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dls.last_shipment_date"), v)
		},
		FrequencyCountEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.frequency_count"), v)
		},
		FrequencyCountNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.frequency_count"), v)
		},
		FrequencyCountIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.frequency_count"), bun.In(v))
		},
		FrequencyCountNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.frequency_count"), bun.In(v))
		},
		FrequencyCountGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dls.frequency_count"), v)
		},
		FrequencyCountGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dls.frequency_count"), v)
		},
		FrequencyCountLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dls.frequency_count"), v)
		},
		FrequencyCountLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dls.frequency_count"), v)
		},
		FirstShipmentDateEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.first_shipment_date"), v)
		},
		FirstShipmentDateNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.first_shipment_date"), v)
		},
		FirstShipmentDateIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.first_shipment_date"), bun.In(v))
		},
		FirstShipmentDateNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.first_shipment_date"), bun.In(v))
		},
		FirstShipmentDateGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dls.first_shipment_date"), v)
		},
		FirstShipmentDateGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dls.first_shipment_date"), v)
		},
		FirstShipmentDateLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dls.first_shipment_date"), v)
		},
		FirstShipmentDateLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dls.first_shipment_date"), v)
		},
		ExpiresAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.expires_at"), v)
		},
		ExpiresAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.expires_at"), v)
		},
		ExpiresAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.expires_at"), bun.In(v))
		},
		ExpiresAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.expires_at"), bun.In(v))
		},
		ExpiresAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dls.expires_at"), v)
		},
		ExpiresAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dls.expires_at"), v)
		},
		ExpiresAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dls.expires_at"), v)
		},
		ExpiresAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dls.expires_at"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dls.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dls.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dls.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dls.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dls.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dls.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dls.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dls.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dls.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dls.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dls.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dls.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dls.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dls.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dls.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dls.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("dls.organization_id"), orgID).
				Where("? = ?", bun.Ident("dls.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("dls.id"), id).
				Where("? = ?", bun.Ident("dls.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "dls." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"dls.status ASC",
				"dls.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "dls.status DESC"
			}
			return "dls.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "dls.created_at DESC"
			}
			return "dls.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "dls.updated_at DESC"
			}
			return "dls.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]dedicatedLaneSuggestionFieldConfig {
		return map[string]dedicatedLaneSuggestionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dls.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dls.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dls.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "dls.status",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "dls.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"origin_location_id": {
				Name:       "origin_location_id",
				Column:     "dls.origin_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"destination_location_id": {
				Name:       "destination_location_id",
				Column:     "dls.destination_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"service_type_id": {
				Name:       "service_type_id",
				Column:     "dls.service_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_type_id": {
				Name:       "shipment_type_id",
				Column:     "dls.shipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_type_id": {
				Name:       "trailer_type_id",
				Column:     "dls.trailer_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_type_id": {
				Name:       "tractor_type_id",
				Column:     "dls.tractor_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"created_dedicated_lane_id": {
				Name:       "created_dedicated_lane_id",
				Column:     "dls.created_dedicated_lane_id",
				Sortable:   false,
				Filterable: true,
			},
			"processed_by_id": {
				Name:       "processed_by_id",
				Column:     "dls.processed_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"average_freight_charge": {
				Name:       "average_freight_charge",
				Column:     "dls.average_freight_charge",
				Sortable:   false,
				Filterable: false,
			},
			"total_freight_value": {
				Name:       "total_freight_value",
				Column:     "dls.total_freight_value",
				Sortable:   false,
				Filterable: false,
			},
			"processed_at": {
				Name:       "processed_at",
				Column:     "dls.processed_at",
				Sortable:   false,
				Filterable: false,
			},
			"confidence_score": {
				Name:       "confidence_score",
				Column:     "dls.confidence_score",
				Sortable:   false,
				Filterable: false,
			},
			"suggested_name": {
				Name:       "suggested_name",
				Column:     "dls.suggested_name",
				Sortable:   false,
				Filterable: true,
			},
			"pattern_details": {
				Name:       "pattern_details",
				Column:     "dls.pattern_details",
				Sortable:   false,
				Filterable: false,
			},
			"last_shipment_date": {
				Name:       "last_shipment_date",
				Column:     "dls.last_shipment_date",
				Sortable:   false,
				Filterable: false,
			},
			"frequency_count": {
				Name:       "frequency_count",
				Column:     "dls.frequency_count",
				Sortable:   false,
				Filterable: false,
			},
			"first_shipment_date": {
				Name:       "first_shipment_date",
				Column:     "dls.first_shipment_date",
				Sortable:   false,
				Filterable: false,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "dls.expires_at",
				Sortable:   true,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "dls.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dls.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dls.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]dedicatedLaneSuggestionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dls.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dls.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dls.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "dls.status",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "dls.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"origin_location_id": {
				Name:       "origin_location_id",
				Column:     "dls.origin_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"destination_location_id": {
				Name:       "destination_location_id",
				Column:     "dls.destination_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"service_type_id": {
				Name:       "service_type_id",
				Column:     "dls.service_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_type_id": {
				Name:       "shipment_type_id",
				Column:     "dls.shipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_type_id": {
				Name:       "trailer_type_id",
				Column:     "dls.trailer_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_type_id": {
				Name:       "tractor_type_id",
				Column:     "dls.tractor_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"created_dedicated_lane_id": {
				Name:       "created_dedicated_lane_id",
				Column:     "dls.created_dedicated_lane_id",
				Sortable:   false,
				Filterable: true,
			},
			"processed_by_id": {
				Name:       "processed_by_id",
				Column:     "dls.processed_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"average_freight_charge": {
				Name:       "average_freight_charge",
				Column:     "dls.average_freight_charge",
				Sortable:   false,
				Filterable: false,
			},
			"total_freight_value": {
				Name:       "total_freight_value",
				Column:     "dls.total_freight_value",
				Sortable:   false,
				Filterable: false,
			},
			"processed_at": {
				Name:       "processed_at",
				Column:     "dls.processed_at",
				Sortable:   false,
				Filterable: false,
			},
			"confidence_score": {
				Name:       "confidence_score",
				Column:     "dls.confidence_score",
				Sortable:   false,
				Filterable: false,
			},
			"suggested_name": {
				Name:       "suggested_name",
				Column:     "dls.suggested_name",
				Sortable:   false,
				Filterable: true,
			},
			"pattern_details": {
				Name:       "pattern_details",
				Column:     "dls.pattern_details",
				Sortable:   false,
				Filterable: false,
			},
			"last_shipment_date": {
				Name:       "last_shipment_date",
				Column:     "dls.last_shipment_date",
				Sortable:   false,
				Filterable: false,
			},
			"frequency_count": {
				Name:       "frequency_count",
				Column:     "dls.frequency_count",
				Sortable:   false,
				Filterable: false,
			},
			"first_shipment_date": {
				Name:       "first_shipment_date",
				Column:     "dls.first_shipment_date",
				Sortable:   false,
				Filterable: false,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "dls.expires_at",
				Sortable:   true,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "dls.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dls.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dls.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]dedicatedLaneSuggestionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dls.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dls.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dls.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "dls.status",
				Sortable:   false,
				Filterable: true,
			},
			"customer_id": {
				Name:       "customer_id",
				Column:     "dls.customer_id",
				Sortable:   false,
				Filterable: true,
			},
			"origin_location_id": {
				Name:       "origin_location_id",
				Column:     "dls.origin_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"destination_location_id": {
				Name:       "destination_location_id",
				Column:     "dls.destination_location_id",
				Sortable:   false,
				Filterable: true,
			},
			"service_type_id": {
				Name:       "service_type_id",
				Column:     "dls.service_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_type_id": {
				Name:       "shipment_type_id",
				Column:     "dls.shipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"trailer_type_id": {
				Name:       "trailer_type_id",
				Column:     "dls.trailer_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"tractor_type_id": {
				Name:       "tractor_type_id",
				Column:     "dls.tractor_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"created_dedicated_lane_id": {
				Name:       "created_dedicated_lane_id",
				Column:     "dls.created_dedicated_lane_id",
				Sortable:   false,
				Filterable: true,
			},
			"processed_by_id": {
				Name:       "processed_by_id",
				Column:     "dls.processed_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"average_freight_charge": {
				Name:       "average_freight_charge",
				Column:     "dls.average_freight_charge",
				Sortable:   false,
				Filterable: false,
			},
			"total_freight_value": {
				Name:       "total_freight_value",
				Column:     "dls.total_freight_value",
				Sortable:   false,
				Filterable: false,
			},
			"processed_at": {
				Name:       "processed_at",
				Column:     "dls.processed_at",
				Sortable:   false,
				Filterable: false,
			},
			"confidence_score": {
				Name:       "confidence_score",
				Column:     "dls.confidence_score",
				Sortable:   false,
				Filterable: false,
			},
			"suggested_name": {
				Name:       "suggested_name",
				Column:     "dls.suggested_name",
				Sortable:   false,
				Filterable: true,
			},
			"pattern_details": {
				Name:       "pattern_details",
				Column:     "dls.pattern_details",
				Sortable:   false,
				Filterable: false,
			},
			"last_shipment_date": {
				Name:       "last_shipment_date",
				Column:     "dls.last_shipment_date",
				Sortable:   false,
				Filterable: false,
			},
			"frequency_count": {
				Name:       "frequency_count",
				Column:     "dls.frequency_count",
				Sortable:   false,
				Filterable: false,
			},
			"first_shipment_date": {
				Name:       "first_shipment_date",
				Column:     "dls.first_shipment_date",
				Sortable:   false,
				Filterable: false,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "dls.expires_at",
				Sortable:   true,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "dls.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dls.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dls.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit         string
		Organization         string
		Customer             string
		OriginLocation       string
		DestinationLocation  string
		ServiceType          string
		ShipmentType         string
		TractorType          string
		TrailerType          string
		ProcessedBy          string
		CreatedDedicatedLane string
	}{
		BusinessUnit:         "BusinessUnit",
		Organization:         "Organization",
		Customer:             "Customer",
		OriginLocation:       "OriginLocation",
		DestinationLocation:  "DestinationLocation",
		ServiceType:          "ServiceType",
		ShipmentType:         "ShipmentType",
		TractorType:          "TractorType",
		TrailerType:          "TrailerType",
		ProcessedBy:          "ProcessedBy",
		CreatedDedicatedLane: "CreatedDedicatedLane",
	},
}

// DedicatedLaneSuggestionQueryBuilder provides a fluent interface for building queries
type DedicatedLaneSuggestionQueryBuilder struct {
	query *bun.SelectQuery
}

// NewDedicatedLaneSuggestionQuery creates a new query builder
func NewDedicatedLaneSuggestionQuery(db bun.IDB) *DedicatedLaneSuggestionQueryBuilder {
	return &DedicatedLaneSuggestionQueryBuilder{
		query: db.NewSelect().Model((*DedicatedLaneSuggestion)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func DedicatedLaneSuggestionFromQuery(q *bun.SelectQuery) *DedicatedLaneSuggestionQueryBuilder {
	return &DedicatedLaneSuggestionQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *DedicatedLaneSuggestionQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *DedicatedLaneSuggestionQueryBuilder) Model(model interface{}) *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereIDEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereIDNEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereIDIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereIDNotIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereStatusEQ(v SuggestionStatus) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereStatusNEQ(v SuggestionStatus) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereStatusIn(v []SuggestionStatus) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereStatusNotIn(v []SuggestionStatus) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereCustomerIDEQ adds a WHERE customer_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCustomerIDEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CustomerIDEQ(b.query, v)
	return b
}

// WhereCustomerIDNEQ adds a WHERE customer_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCustomerIDNEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CustomerIDNEQ(b.query, v)
	return b
}

// WhereCustomerIDIn adds a WHERE customer_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCustomerIDIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CustomerIDIn(b.query, v)
	return b
}

// WhereCustomerIDNotIn adds a WHERE customer_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCustomerIDNotIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CustomerIDNotIn(b.query, v)
	return b
}

// WhereOriginLocationIDEQ adds a WHERE origin_location_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereOriginLocationIDEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.OriginLocationIDEQ(b.query, v)
	return b
}

// WhereOriginLocationIDNEQ adds a WHERE origin_location_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereOriginLocationIDNEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.OriginLocationIDNEQ(b.query, v)
	return b
}

// WhereOriginLocationIDIn adds a WHERE origin_location_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereOriginLocationIDIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.OriginLocationIDIn(b.query, v)
	return b
}

// WhereOriginLocationIDNotIn adds a WHERE origin_location_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereOriginLocationIDNotIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.OriginLocationIDNotIn(b.query, v)
	return b
}

// WhereDestinationLocationIDEQ adds a WHERE destination_location_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereDestinationLocationIDEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.DestinationLocationIDEQ(b.query, v)
	return b
}

// WhereDestinationLocationIDNEQ adds a WHERE destination_location_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereDestinationLocationIDNEQ(v pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.DestinationLocationIDNEQ(b.query, v)
	return b
}

// WhereDestinationLocationIDIn adds a WHERE destination_location_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereDestinationLocationIDIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.DestinationLocationIDIn(b.query, v)
	return b
}

// WhereDestinationLocationIDNotIn adds a WHERE destination_location_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereDestinationLocationIDNotIn(v []pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.DestinationLocationIDNotIn(b.query, v)
	return b
}

// WhereServiceTypeIDEQ adds a WHERE service_type_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereServiceTypeIDEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ServiceTypeIDEQ(b.query, v)
	return b
}

// WhereServiceTypeIDNEQ adds a WHERE service_type_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereServiceTypeIDNEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ServiceTypeIDNEQ(b.query, v)
	return b
}

// WhereServiceTypeIDIn adds a WHERE service_type_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereServiceTypeIDIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ServiceTypeIDIn(b.query, v)
	return b
}

// WhereServiceTypeIDNotIn adds a WHERE service_type_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereServiceTypeIDNotIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ServiceTypeIDNotIn(b.query, v)
	return b
}

// WhereShipmentTypeIDEQ adds a WHERE shipment_type_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereShipmentTypeIDEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ShipmentTypeIDEQ(b.query, v)
	return b
}

// WhereShipmentTypeIDNEQ adds a WHERE shipment_type_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereShipmentTypeIDNEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ShipmentTypeIDNEQ(b.query, v)
	return b
}

// WhereShipmentTypeIDIn adds a WHERE shipment_type_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereShipmentTypeIDIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ShipmentTypeIDIn(b.query, v)
	return b
}

// WhereShipmentTypeIDNotIn adds a WHERE shipment_type_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereShipmentTypeIDNotIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ShipmentTypeIDNotIn(b.query, v)
	return b
}

// WhereTrailerTypeIDEQ adds a WHERE trailer_type_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTrailerTypeIDEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TrailerTypeIDEQ(b.query, v)
	return b
}

// WhereTrailerTypeIDNEQ adds a WHERE trailer_type_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTrailerTypeIDNEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TrailerTypeIDNEQ(b.query, v)
	return b
}

// WhereTrailerTypeIDIn adds a WHERE trailer_type_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTrailerTypeIDIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TrailerTypeIDIn(b.query, v)
	return b
}

// WhereTrailerTypeIDNotIn adds a WHERE trailer_type_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTrailerTypeIDNotIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TrailerTypeIDNotIn(b.query, v)
	return b
}

// WhereTractorTypeIDEQ adds a WHERE tractor_type_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTractorTypeIDEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TractorTypeIDEQ(b.query, v)
	return b
}

// WhereTractorTypeIDNEQ adds a WHERE tractor_type_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTractorTypeIDNEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TractorTypeIDNEQ(b.query, v)
	return b
}

// WhereTractorTypeIDIn adds a WHERE tractor_type_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTractorTypeIDIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TractorTypeIDIn(b.query, v)
	return b
}

// WhereTractorTypeIDNotIn adds a WHERE tractor_type_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTractorTypeIDNotIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TractorTypeIDNotIn(b.query, v)
	return b
}

// WhereCreatedDedicatedLaneIDEQ adds a WHERE created_dedicated_lane_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedDedicatedLaneIDEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedDedicatedLaneIDEQ(b.query, v)
	return b
}

// WhereCreatedDedicatedLaneIDNEQ adds a WHERE created_dedicated_lane_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedDedicatedLaneIDNEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedDedicatedLaneIDNEQ(b.query, v)
	return b
}

// WhereCreatedDedicatedLaneIDIn adds a WHERE created_dedicated_lane_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedDedicatedLaneIDIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedDedicatedLaneIDIn(b.query, v)
	return b
}

// WhereCreatedDedicatedLaneIDNotIn adds a WHERE created_dedicated_lane_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedDedicatedLaneIDNotIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedDedicatedLaneIDNotIn(b.query, v)
	return b
}

// WhereProcessedByIDEQ adds a WHERE processed_by_id = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereProcessedByIDEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ProcessedByIDEQ(b.query, v)
	return b
}

// WhereProcessedByIDNEQ adds a WHERE processed_by_id != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereProcessedByIDNEQ(v *pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ProcessedByIDNEQ(b.query, v)
	return b
}

// WhereProcessedByIDIn adds a WHERE processed_by_id IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereProcessedByIDIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ProcessedByIDIn(b.query, v)
	return b
}

// WhereProcessedByIDNotIn adds a WHERE processed_by_id NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereProcessedByIDNotIn(v []*pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ProcessedByIDNotIn(b.query, v)
	return b
}

// WhereAverageFreightChargeEQ adds a WHERE average_freight_charge = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereAverageFreightChargeEQ(v *decimal.NullDecimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.AverageFreightChargeEQ(b.query, v)
	return b
}

// WhereAverageFreightChargeNEQ adds a WHERE average_freight_charge != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereAverageFreightChargeNEQ(v *decimal.NullDecimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.AverageFreightChargeNEQ(b.query, v)
	return b
}

// WhereAverageFreightChargeIn adds a WHERE average_freight_charge IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereAverageFreightChargeIn(v []*decimal.NullDecimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.AverageFreightChargeIn(b.query, v)
	return b
}

// WhereAverageFreightChargeNotIn adds a WHERE average_freight_charge NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereAverageFreightChargeNotIn(v []*decimal.NullDecimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.AverageFreightChargeNotIn(b.query, v)
	return b
}

// WhereTotalFreightValueEQ adds a WHERE total_freight_value = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTotalFreightValueEQ(v *decimal.NullDecimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TotalFreightValueEQ(b.query, v)
	return b
}

// WhereTotalFreightValueNEQ adds a WHERE total_freight_value != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTotalFreightValueNEQ(v *decimal.NullDecimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TotalFreightValueNEQ(b.query, v)
	return b
}

// WhereTotalFreightValueIn adds a WHERE total_freight_value IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTotalFreightValueIn(v []*decimal.NullDecimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TotalFreightValueIn(b.query, v)
	return b
}

// WhereTotalFreightValueNotIn adds a WHERE total_freight_value NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTotalFreightValueNotIn(v []*decimal.NullDecimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.TotalFreightValueNotIn(b.query, v)
	return b
}

// WhereProcessedAtEQ adds a WHERE processed_at = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereProcessedAtEQ(v *int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ProcessedAtEQ(b.query, v)
	return b
}

// WhereProcessedAtNEQ adds a WHERE processed_at != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereProcessedAtNEQ(v *int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ProcessedAtNEQ(b.query, v)
	return b
}

// WhereProcessedAtIn adds a WHERE processed_at IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereProcessedAtIn(v []*int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ProcessedAtIn(b.query, v)
	return b
}

// WhereProcessedAtNotIn adds a WHERE processed_at NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereProcessedAtNotIn(v []*int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ProcessedAtNotIn(b.query, v)
	return b
}

// WhereConfidenceScoreEQ adds a WHERE confidence_score = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereConfidenceScoreEQ(v decimal.Decimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ConfidenceScoreEQ(b.query, v)
	return b
}

// WhereConfidenceScoreNEQ adds a WHERE confidence_score != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereConfidenceScoreNEQ(v decimal.Decimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ConfidenceScoreNEQ(b.query, v)
	return b
}

// WhereConfidenceScoreGT adds a WHERE confidence_score > ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereConfidenceScoreGT(v decimal.Decimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ConfidenceScoreGT(b.query, v)
	return b
}

// WhereConfidenceScoreGTE adds a WHERE confidence_score >= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereConfidenceScoreGTE(v decimal.Decimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ConfidenceScoreGTE(b.query, v)
	return b
}

// WhereConfidenceScoreLT adds a WHERE confidence_score < ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereConfidenceScoreLT(v decimal.Decimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ConfidenceScoreLT(b.query, v)
	return b
}

// WhereConfidenceScoreLTE adds a WHERE confidence_score <= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereConfidenceScoreLTE(v decimal.Decimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ConfidenceScoreLTE(b.query, v)
	return b
}

// WhereConfidenceScoreIn adds a WHERE confidence_score IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereConfidenceScoreIn(v []decimal.Decimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ConfidenceScoreIn(b.query, v)
	return b
}

// WhereConfidenceScoreNotIn adds a WHERE confidence_score NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereConfidenceScoreNotIn(v []decimal.Decimal) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ConfidenceScoreNotIn(b.query, v)
	return b
}

// WhereSuggestedNameEQ adds a WHERE suggested_name = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereSuggestedNameEQ(v string) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.SuggestedNameEQ(b.query, v)
	return b
}

// WhereSuggestedNameNEQ adds a WHERE suggested_name != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereSuggestedNameNEQ(v string) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.SuggestedNameNEQ(b.query, v)
	return b
}

// WhereSuggestedNameIn adds a WHERE suggested_name IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereSuggestedNameIn(v []string) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.SuggestedNameIn(b.query, v)
	return b
}

// WhereSuggestedNameNotIn adds a WHERE suggested_name NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereSuggestedNameNotIn(v []string) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.SuggestedNameNotIn(b.query, v)
	return b
}

// WhereSuggestedNameContains adds a WHERE suggested_name LIKE ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereSuggestedNameContains(v string) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.SuggestedNameContains(b.query, v)
	return b
}

// WhereSuggestedNameHasPrefix adds a WHERE suggested_name LIKE ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereSuggestedNameHasPrefix(v string) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.SuggestedNameHasPrefix(b.query, v)
	return b
}

// WhereSuggestedNameHasSuffix adds a WHERE suggested_name LIKE ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereSuggestedNameHasSuffix(v string) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.SuggestedNameHasSuffix(b.query, v)
	return b
}

// WherePatternDetailsEQ adds a WHERE pattern_details = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WherePatternDetailsEQ(v map[string]any) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.PatternDetailsEQ(b.query, v)
	return b
}

// WherePatternDetailsNEQ adds a WHERE pattern_details != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WherePatternDetailsNEQ(v map[string]any) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.PatternDetailsNEQ(b.query, v)
	return b
}

// WherePatternDetailsIn adds a WHERE pattern_details IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WherePatternDetailsIn(v []map[string]any) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.PatternDetailsIn(b.query, v)
	return b
}

// WherePatternDetailsNotIn adds a WHERE pattern_details NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WherePatternDetailsNotIn(v []map[string]any) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.PatternDetailsNotIn(b.query, v)
	return b
}

// WhereLastShipmentDateEQ adds a WHERE last_shipment_date = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereLastShipmentDateEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.LastShipmentDateEQ(b.query, v)
	return b
}

// WhereLastShipmentDateNEQ adds a WHERE last_shipment_date != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereLastShipmentDateNEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.LastShipmentDateNEQ(b.query, v)
	return b
}

// WhereLastShipmentDateGT adds a WHERE last_shipment_date > ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereLastShipmentDateGT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.LastShipmentDateGT(b.query, v)
	return b
}

// WhereLastShipmentDateGTE adds a WHERE last_shipment_date >= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereLastShipmentDateGTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.LastShipmentDateGTE(b.query, v)
	return b
}

// WhereLastShipmentDateLT adds a WHERE last_shipment_date < ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereLastShipmentDateLT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.LastShipmentDateLT(b.query, v)
	return b
}

// WhereLastShipmentDateLTE adds a WHERE last_shipment_date <= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereLastShipmentDateLTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.LastShipmentDateLTE(b.query, v)
	return b
}

// WhereLastShipmentDateIn adds a WHERE last_shipment_date IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereLastShipmentDateIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.LastShipmentDateIn(b.query, v)
	return b
}

// WhereLastShipmentDateNotIn adds a WHERE last_shipment_date NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereLastShipmentDateNotIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.LastShipmentDateNotIn(b.query, v)
	return b
}

// WhereFrequencyCountEQ adds a WHERE frequency_count = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFrequencyCountEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FrequencyCountEQ(b.query, v)
	return b
}

// WhereFrequencyCountNEQ adds a WHERE frequency_count != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFrequencyCountNEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FrequencyCountNEQ(b.query, v)
	return b
}

// WhereFrequencyCountGT adds a WHERE frequency_count > ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFrequencyCountGT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FrequencyCountGT(b.query, v)
	return b
}

// WhereFrequencyCountGTE adds a WHERE frequency_count >= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFrequencyCountGTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FrequencyCountGTE(b.query, v)
	return b
}

// WhereFrequencyCountLT adds a WHERE frequency_count < ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFrequencyCountLT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FrequencyCountLT(b.query, v)
	return b
}

// WhereFrequencyCountLTE adds a WHERE frequency_count <= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFrequencyCountLTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FrequencyCountLTE(b.query, v)
	return b
}

// WhereFrequencyCountIn adds a WHERE frequency_count IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFrequencyCountIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FrequencyCountIn(b.query, v)
	return b
}

// WhereFrequencyCountNotIn adds a WHERE frequency_count NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFrequencyCountNotIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FrequencyCountNotIn(b.query, v)
	return b
}

// WhereFirstShipmentDateEQ adds a WHERE first_shipment_date = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFirstShipmentDateEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FirstShipmentDateEQ(b.query, v)
	return b
}

// WhereFirstShipmentDateNEQ adds a WHERE first_shipment_date != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFirstShipmentDateNEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FirstShipmentDateNEQ(b.query, v)
	return b
}

// WhereFirstShipmentDateGT adds a WHERE first_shipment_date > ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFirstShipmentDateGT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FirstShipmentDateGT(b.query, v)
	return b
}

// WhereFirstShipmentDateGTE adds a WHERE first_shipment_date >= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFirstShipmentDateGTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FirstShipmentDateGTE(b.query, v)
	return b
}

// WhereFirstShipmentDateLT adds a WHERE first_shipment_date < ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFirstShipmentDateLT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FirstShipmentDateLT(b.query, v)
	return b
}

// WhereFirstShipmentDateLTE adds a WHERE first_shipment_date <= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFirstShipmentDateLTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FirstShipmentDateLTE(b.query, v)
	return b
}

// WhereFirstShipmentDateIn adds a WHERE first_shipment_date IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFirstShipmentDateIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FirstShipmentDateIn(b.query, v)
	return b
}

// WhereFirstShipmentDateNotIn adds a WHERE first_shipment_date NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereFirstShipmentDateNotIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.FirstShipmentDateNotIn(b.query, v)
	return b
}

// WhereExpiresAtEQ adds a WHERE expires_at = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereExpiresAtEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ExpiresAtEQ(b.query, v)
	return b
}

// WhereExpiresAtNEQ adds a WHERE expires_at != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereExpiresAtNEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ExpiresAtNEQ(b.query, v)
	return b
}

// WhereExpiresAtGT adds a WHERE expires_at > ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereExpiresAtGT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ExpiresAtGT(b.query, v)
	return b
}

// WhereExpiresAtGTE adds a WHERE expires_at >= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereExpiresAtGTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ExpiresAtGTE(b.query, v)
	return b
}

// WhereExpiresAtLT adds a WHERE expires_at < ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereExpiresAtLT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ExpiresAtLT(b.query, v)
	return b
}

// WhereExpiresAtLTE adds a WHERE expires_at <= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereExpiresAtLTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ExpiresAtLTE(b.query, v)
	return b
}

// WhereExpiresAtIn adds a WHERE expires_at IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereExpiresAtIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ExpiresAtIn(b.query, v)
	return b
}

// WhereExpiresAtNotIn adds a WHERE expires_at NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereExpiresAtNotIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.ExpiresAtNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereVersionEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereVersionNEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereVersionGT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereVersionGTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereVersionLT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereVersionLTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereVersionIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereVersionNotIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedAtEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedAtNEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedAtGT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedAtGTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedAtLT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedAtLTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedAtIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereCreatedAtNotIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereUpdatedAtEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereUpdatedAtNEQ(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereUpdatedAtGT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereUpdatedAtGTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereUpdatedAtLT(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereUpdatedAtLTE(v int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereUpdatedAtIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *DedicatedLaneSuggestionQueryBuilder) WhereUpdatedAtNotIn(v []int64) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *DedicatedLaneSuggestionQueryBuilder) WhereTenant(orgID, buID pulid.ID) *DedicatedLaneSuggestionQueryBuilder {
	b.query = DedicatedLaneSuggestionQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *DedicatedLaneSuggestionQueryBuilder) WhereGroup(sep string, fn func(*DedicatedLaneSuggestionQueryBuilder) *DedicatedLaneSuggestionQueryBuilder) *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &DedicatedLaneSuggestionQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *DedicatedLaneSuggestionQueryBuilder) Where(query string, args ...interface{}) *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *DedicatedLaneSuggestionQueryBuilder) OrderBy(column string, desc ...bool) *DedicatedLaneSuggestionQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(DedicatedLaneSuggestionQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *DedicatedLaneSuggestionQueryBuilder) Limit(n int) *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *DedicatedLaneSuggestionQueryBuilder) Offset(n int) *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *DedicatedLaneSuggestionQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *DedicatedLaneSuggestionQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *DedicatedLaneSuggestionQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *DedicatedLaneSuggestionQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *DedicatedLaneSuggestionQueryBuilder) All(ctx context.Context) ([]*DedicatedLaneSuggestion, error) {
	var entities []*DedicatedLaneSuggestion
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *DedicatedLaneSuggestionQueryBuilder) AllWithCount(ctx context.Context) ([]*DedicatedLaneSuggestion, int, error) {
	var entities []*DedicatedLaneSuggestion
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *DedicatedLaneSuggestionQueryBuilder) One(ctx context.Context) (*DedicatedLaneSuggestion, error) {
	entity := new(DedicatedLaneSuggestion)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *DedicatedLaneSuggestionQueryBuilder) First(ctx context.Context) (*DedicatedLaneSuggestion, error) {
	entity := new(DedicatedLaneSuggestion)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// DedicatedLaneSuggestionBuild creates a chainable query builder
func DedicatedLaneSuggestionBuild(db bun.IDB) *DedicatedLaneSuggestionQueryBuilder {
	return NewDedicatedLaneSuggestionQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadBusinessUnit() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadOrganization() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadCustomer loads the Customer relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadCustomer() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("Customer")
	return b
}

// LoadOriginLocation loads the OriginLocation relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadOriginLocation() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("OriginLocation")
	return b
}

// LoadDestinationLocation loads the DestinationLocation relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadDestinationLocation() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("DestinationLocation")
	return b
}

// LoadServiceType loads the ServiceType relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadServiceType() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("ServiceType")
	return b
}

// LoadShipmentType loads the ShipmentType relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadShipmentType() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("ShipmentType")
	return b
}

// LoadTractorType loads the TractorType relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadTractorType() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("TractorType")
	return b
}

// LoadTrailerType loads the TrailerType relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadTrailerType() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("TrailerType")
	return b
}

// LoadProcessedBy loads the ProcessedBy relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadProcessedBy() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("ProcessedBy")
	return b
}

// LoadCreatedDedicatedLane loads the CreatedDedicatedLane relationship
func (b *DedicatedLaneSuggestionQueryBuilder) LoadCreatedDedicatedLane() *DedicatedLaneSuggestionQueryBuilder {
	b.query = b.query.Relation("CreatedDedicatedLane")
	return b
}

// LoadAllRelations loads all relationships for DedicatedLaneSuggestion
func (b *DedicatedLaneSuggestionQueryBuilder) LoadAllRelations() *DedicatedLaneSuggestionQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadCustomer()
	b.LoadOriginLocation()
	b.LoadDestinationLocation()
	b.LoadServiceType()
	b.LoadShipmentType()
	b.LoadTractorType()
	b.LoadTrailerType()
	b.LoadProcessedBy()
	b.LoadCreatedDedicatedLane()
	return b
}
