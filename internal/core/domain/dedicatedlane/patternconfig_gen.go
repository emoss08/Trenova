// Code generated by gen-trenova. DO NOT EDIT.

package dedicatedlane

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/shopspring/decimal"
	"github.com/uptrace/bun"
)

// patternConfigFieldConfig provides field configuration for PatternConfig
type patternConfigFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// PatternConfigQuery provides type-safe query helpers and constants
var PatternConfigQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                    string
		BusinessUnitID        string
		OrganizationID        string
		Enabled               string
		MinFrequency          string
		AnalysisWindowDays    string
		MinConfidenceScore    string
		SuggestionTTLDays     string
		RequireExactMatch     string
		WeightRecentShipments string
		Version               string
		CreatedAt             string
		UpdatedAt             string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EnabledEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnabledNEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		MinFrequencyEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MinFrequencyNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MinFrequencyGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysEQ     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysNEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysIn     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		AnalysisWindowDaysNotIn  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		AnalysisWindowDaysGT     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysGTE    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysLT     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysLTE    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinConfidenceScoreEQ     func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreNEQ    func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreIn     func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreNotIn  func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreGT     func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreGTE    func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreLT     func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreLTE    func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		SuggestionTTLDaysEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysNEQ     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		SuggestionTTLDaysNotIn   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		SuggestionTTLDaysGT      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysGTE     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysLT      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysLTE     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RequireExactMatchEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RequireExactMatchNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		WeightRecentShipmentsEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		WeightRecentShipmentsNEQ func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]patternConfigFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "pattern_configs",
	Alias:    "pc",
	IDPrefix: "pc_",

	// Field names
	Field: struct {
		ID                    string
		BusinessUnitID        string
		OrganizationID        string
		Enabled               string
		MinFrequency          string
		AnalysisWindowDays    string
		MinConfidenceScore    string
		SuggestionTTLDays     string
		RequireExactMatch     string
		WeightRecentShipments string
		Version               string
		CreatedAt             string
		UpdatedAt             string
	}{
		ID:                    "id",
		BusinessUnitID:        "business_unit_id",
		OrganizationID:        "organization_id",
		Enabled:               "enabled",
		MinFrequency:          "min_frequency",
		AnalysisWindowDays:    "analysis_window_days",
		MinConfidenceScore:    "min_confidence_score",
		SuggestionTTLDays:     "suggestion_ttl_days",
		RequireExactMatch:     "require_exact_match",
		WeightRecentShipments: "weight_recent_shipments",
		Version:               "version",
		CreatedAt:             "created_at",
		UpdatedAt:             "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "pc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "pc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EnabledEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnabledNEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		MinFrequencyEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MinFrequencyNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		MinFrequencyGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinFrequencyLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysEQ     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysNEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysIn     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		AnalysisWindowDaysNotIn  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		AnalysisWindowDaysGT     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysGTE    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysLT     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		AnalysisWindowDaysLTE    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		MinConfidenceScoreEQ     func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreNEQ    func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreIn     func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreNotIn  func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreGT     func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreGTE    func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreLT     func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		MinConfidenceScoreLTE    func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		SuggestionTTLDaysEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysNEQ     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		SuggestionTTLDaysNotIn   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		SuggestionTTLDaysGT      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysGTE     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysLT      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SuggestionTTLDaysLTE     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RequireExactMatchEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		RequireExactMatchNEQ     func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		WeightRecentShipmentsEQ  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		WeightRecentShipmentsNEQ func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                   func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.organization_id"), v)
		},
		EnabledEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.enabled"), v)
		},
		EnabledNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.enabled"), v)
		},
		MinFrequencyEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.min_frequency"), v)
		},
		MinFrequencyNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.min_frequency"), v)
		},
		MinFrequencyIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pc.min_frequency"), bun.In(v))
		},
		MinFrequencyNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pc.min_frequency"), bun.In(v))
		},
		MinFrequencyGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pc.min_frequency"), v)
		},
		MinFrequencyGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pc.min_frequency"), v)
		},
		MinFrequencyLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pc.min_frequency"), v)
		},
		MinFrequencyLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pc.min_frequency"), v)
		},
		AnalysisWindowDaysEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.analysis_window_days"), v)
		},
		AnalysisWindowDaysNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.analysis_window_days"), v)
		},
		AnalysisWindowDaysIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pc.analysis_window_days"), bun.In(v))
		},
		AnalysisWindowDaysNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pc.analysis_window_days"), bun.In(v))
		},
		AnalysisWindowDaysGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pc.analysis_window_days"), v)
		},
		AnalysisWindowDaysGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pc.analysis_window_days"), v)
		},
		AnalysisWindowDaysLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pc.analysis_window_days"), v)
		},
		AnalysisWindowDaysLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pc.analysis_window_days"), v)
		},
		MinConfidenceScoreEQ: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.min_confidence_score"), v)
		},
		MinConfidenceScoreNEQ: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.min_confidence_score"), v)
		},
		MinConfidenceScoreIn: func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pc.min_confidence_score"), bun.In(v))
		},
		MinConfidenceScoreNotIn: func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pc.min_confidence_score"), bun.In(v))
		},
		MinConfidenceScoreGT: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pc.min_confidence_score"), v)
		},
		MinConfidenceScoreGTE: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pc.min_confidence_score"), v)
		},
		MinConfidenceScoreLT: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pc.min_confidence_score"), v)
		},
		MinConfidenceScoreLTE: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pc.min_confidence_score"), v)
		},
		SuggestionTTLDaysEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.suggestion_ttl_days"), v)
		},
		SuggestionTTLDaysNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.suggestion_ttl_days"), v)
		},
		SuggestionTTLDaysIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pc.suggestion_ttl_days"), bun.In(v))
		},
		SuggestionTTLDaysNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pc.suggestion_ttl_days"), bun.In(v))
		},
		SuggestionTTLDaysGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pc.suggestion_ttl_days"), v)
		},
		SuggestionTTLDaysGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pc.suggestion_ttl_days"), v)
		},
		SuggestionTTLDaysLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pc.suggestion_ttl_days"), v)
		},
		SuggestionTTLDaysLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pc.suggestion_ttl_days"), v)
		},
		RequireExactMatchEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.require_exact_match"), v)
		},
		RequireExactMatchNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.require_exact_match"), v)
		},
		WeightRecentShipmentsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.weight_recent_shipments"), v)
		},
		WeightRecentShipmentsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.weight_recent_shipments"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pc.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("pc.organization_id"), orgID).
				Where("? = ?", bun.Ident("pc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("pc.id"), id).
				Where("? = ?", bun.Ident("pc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "pc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"pc.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "pc.created_at DESC"
			}
			return "pc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "pc.updated_at DESC"
			}
			return "pc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]patternConfigFieldConfig {
		return map[string]patternConfigFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"enabled": {
				Name:       "enabled",
				Column:     "pc.enabled",
				Sortable:   false,
				Filterable: false,
			},
			"min_frequency": {
				Name:       "min_frequency",
				Column:     "pc.min_frequency",
				Sortable:   false,
				Filterable: false,
			},
			"analysis_window_days": {
				Name:       "analysis_window_days",
				Column:     "pc.analysis_window_days",
				Sortable:   false,
				Filterable: false,
			},
			"min_confidence_score": {
				Name:       "min_confidence_score",
				Column:     "pc.min_confidence_score",
				Sortable:   false,
				Filterable: false,
			},
			"suggestion_ttl_days": {
				Name:       "suggestion_ttl_days",
				Column:     "pc.suggestion_ttl_days",
				Sortable:   false,
				Filterable: false,
			},
			"require_exact_match": {
				Name:       "require_exact_match",
				Column:     "pc.require_exact_match",
				Sortable:   false,
				Filterable: false,
			},
			"weight_recent_shipments": {
				Name:       "weight_recent_shipments",
				Column:     "pc.weight_recent_shipments",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "pc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]patternConfigFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"enabled": {
				Name:       "enabled",
				Column:     "pc.enabled",
				Sortable:   false,
				Filterable: false,
			},
			"min_frequency": {
				Name:       "min_frequency",
				Column:     "pc.min_frequency",
				Sortable:   false,
				Filterable: false,
			},
			"analysis_window_days": {
				Name:       "analysis_window_days",
				Column:     "pc.analysis_window_days",
				Sortable:   false,
				Filterable: false,
			},
			"min_confidence_score": {
				Name:       "min_confidence_score",
				Column:     "pc.min_confidence_score",
				Sortable:   false,
				Filterable: false,
			},
			"suggestion_ttl_days": {
				Name:       "suggestion_ttl_days",
				Column:     "pc.suggestion_ttl_days",
				Sortable:   false,
				Filterable: false,
			},
			"require_exact_match": {
				Name:       "require_exact_match",
				Column:     "pc.require_exact_match",
				Sortable:   false,
				Filterable: false,
			},
			"weight_recent_shipments": {
				Name:       "weight_recent_shipments",
				Column:     "pc.weight_recent_shipments",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "pc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]patternConfigFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"enabled": {
				Name:       "enabled",
				Column:     "pc.enabled",
				Sortable:   false,
				Filterable: false,
			},
			"min_frequency": {
				Name:       "min_frequency",
				Column:     "pc.min_frequency",
				Sortable:   false,
				Filterable: false,
			},
			"analysis_window_days": {
				Name:       "analysis_window_days",
				Column:     "pc.analysis_window_days",
				Sortable:   false,
				Filterable: false,
			},
			"min_confidence_score": {
				Name:       "min_confidence_score",
				Column:     "pc.min_confidence_score",
				Sortable:   false,
				Filterable: false,
			},
			"suggestion_ttl_days": {
				Name:       "suggestion_ttl_days",
				Column:     "pc.suggestion_ttl_days",
				Sortable:   false,
				Filterable: false,
			},
			"require_exact_match": {
				Name:       "require_exact_match",
				Column:     "pc.require_exact_match",
				Sortable:   false,
				Filterable: false,
			},
			"weight_recent_shipments": {
				Name:       "weight_recent_shipments",
				Column:     "pc.weight_recent_shipments",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "pc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// PatternConfigQueryBuilder provides a fluent interface for building queries
type PatternConfigQueryBuilder struct {
	query *bun.SelectQuery
}

// NewPatternConfigQuery creates a new query builder
func NewPatternConfigQuery(db bun.IDB) *PatternConfigQueryBuilder {
	return &PatternConfigQueryBuilder{
		query: db.NewSelect().Model((*PatternConfig)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func PatternConfigFromQuery(q *bun.SelectQuery) *PatternConfigQueryBuilder {
	return &PatternConfigQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *PatternConfigQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *PatternConfigQueryBuilder) Model(model interface{}) *PatternConfigQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *PatternConfigQueryBuilder) WhereIDEQ(v pulid.ID) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *PatternConfigQueryBuilder) WhereIDNEQ(v pulid.ID) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *PatternConfigQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *PatternConfigQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *PatternConfigQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *PatternConfigQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereEnabledEQ adds a WHERE enabled = ? condition
func (b *PatternConfigQueryBuilder) WhereEnabledEQ(v bool) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.EnabledEQ(b.query, v)
	return b
}

// WhereEnabledNEQ adds a WHERE enabled != ? condition
func (b *PatternConfigQueryBuilder) WhereEnabledNEQ(v bool) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.EnabledNEQ(b.query, v)
	return b
}

// WhereMinFrequencyEQ adds a WHERE min_frequency = ? condition
func (b *PatternConfigQueryBuilder) WhereMinFrequencyEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinFrequencyEQ(b.query, v)
	return b
}

// WhereMinFrequencyNEQ adds a WHERE min_frequency != ? condition
func (b *PatternConfigQueryBuilder) WhereMinFrequencyNEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinFrequencyNEQ(b.query, v)
	return b
}

// WhereMinFrequencyGT adds a WHERE min_frequency > ? condition
func (b *PatternConfigQueryBuilder) WhereMinFrequencyGT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinFrequencyGT(b.query, v)
	return b
}

// WhereMinFrequencyGTE adds a WHERE min_frequency >= ? condition
func (b *PatternConfigQueryBuilder) WhereMinFrequencyGTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinFrequencyGTE(b.query, v)
	return b
}

// WhereMinFrequencyLT adds a WHERE min_frequency < ? condition
func (b *PatternConfigQueryBuilder) WhereMinFrequencyLT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinFrequencyLT(b.query, v)
	return b
}

// WhereMinFrequencyLTE adds a WHERE min_frequency <= ? condition
func (b *PatternConfigQueryBuilder) WhereMinFrequencyLTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinFrequencyLTE(b.query, v)
	return b
}

// WhereMinFrequencyIn adds a WHERE min_frequency IN (?) condition
func (b *PatternConfigQueryBuilder) WhereMinFrequencyIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinFrequencyIn(b.query, v)
	return b
}

// WhereMinFrequencyNotIn adds a WHERE min_frequency NOT IN (?) condition
func (b *PatternConfigQueryBuilder) WhereMinFrequencyNotIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinFrequencyNotIn(b.query, v)
	return b
}

// WhereAnalysisWindowDaysEQ adds a WHERE analysis_window_days = ? condition
func (b *PatternConfigQueryBuilder) WhereAnalysisWindowDaysEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.AnalysisWindowDaysEQ(b.query, v)
	return b
}

// WhereAnalysisWindowDaysNEQ adds a WHERE analysis_window_days != ? condition
func (b *PatternConfigQueryBuilder) WhereAnalysisWindowDaysNEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.AnalysisWindowDaysNEQ(b.query, v)
	return b
}

// WhereAnalysisWindowDaysGT adds a WHERE analysis_window_days > ? condition
func (b *PatternConfigQueryBuilder) WhereAnalysisWindowDaysGT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.AnalysisWindowDaysGT(b.query, v)
	return b
}

// WhereAnalysisWindowDaysGTE adds a WHERE analysis_window_days >= ? condition
func (b *PatternConfigQueryBuilder) WhereAnalysisWindowDaysGTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.AnalysisWindowDaysGTE(b.query, v)
	return b
}

// WhereAnalysisWindowDaysLT adds a WHERE analysis_window_days < ? condition
func (b *PatternConfigQueryBuilder) WhereAnalysisWindowDaysLT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.AnalysisWindowDaysLT(b.query, v)
	return b
}

// WhereAnalysisWindowDaysLTE adds a WHERE analysis_window_days <= ? condition
func (b *PatternConfigQueryBuilder) WhereAnalysisWindowDaysLTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.AnalysisWindowDaysLTE(b.query, v)
	return b
}

// WhereAnalysisWindowDaysIn adds a WHERE analysis_window_days IN (?) condition
func (b *PatternConfigQueryBuilder) WhereAnalysisWindowDaysIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.AnalysisWindowDaysIn(b.query, v)
	return b
}

// WhereAnalysisWindowDaysNotIn adds a WHERE analysis_window_days NOT IN (?) condition
func (b *PatternConfigQueryBuilder) WhereAnalysisWindowDaysNotIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.AnalysisWindowDaysNotIn(b.query, v)
	return b
}

// WhereMinConfidenceScoreEQ adds a WHERE min_confidence_score = ? condition
func (b *PatternConfigQueryBuilder) WhereMinConfidenceScoreEQ(v decimal.Decimal) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinConfidenceScoreEQ(b.query, v)
	return b
}

// WhereMinConfidenceScoreNEQ adds a WHERE min_confidence_score != ? condition
func (b *PatternConfigQueryBuilder) WhereMinConfidenceScoreNEQ(v decimal.Decimal) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinConfidenceScoreNEQ(b.query, v)
	return b
}

// WhereMinConfidenceScoreGT adds a WHERE min_confidence_score > ? condition
func (b *PatternConfigQueryBuilder) WhereMinConfidenceScoreGT(v decimal.Decimal) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinConfidenceScoreGT(b.query, v)
	return b
}

// WhereMinConfidenceScoreGTE adds a WHERE min_confidence_score >= ? condition
func (b *PatternConfigQueryBuilder) WhereMinConfidenceScoreGTE(v decimal.Decimal) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinConfidenceScoreGTE(b.query, v)
	return b
}

// WhereMinConfidenceScoreLT adds a WHERE min_confidence_score < ? condition
func (b *PatternConfigQueryBuilder) WhereMinConfidenceScoreLT(v decimal.Decimal) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinConfidenceScoreLT(b.query, v)
	return b
}

// WhereMinConfidenceScoreLTE adds a WHERE min_confidence_score <= ? condition
func (b *PatternConfigQueryBuilder) WhereMinConfidenceScoreLTE(v decimal.Decimal) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinConfidenceScoreLTE(b.query, v)
	return b
}

// WhereMinConfidenceScoreIn adds a WHERE min_confidence_score IN (?) condition
func (b *PatternConfigQueryBuilder) WhereMinConfidenceScoreIn(v []decimal.Decimal) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinConfidenceScoreIn(b.query, v)
	return b
}

// WhereMinConfidenceScoreNotIn adds a WHERE min_confidence_score NOT IN (?) condition
func (b *PatternConfigQueryBuilder) WhereMinConfidenceScoreNotIn(v []decimal.Decimal) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.MinConfidenceScoreNotIn(b.query, v)
	return b
}

// WhereSuggestionTTLDaysEQ adds a WHERE suggestion_ttl_days = ? condition
func (b *PatternConfigQueryBuilder) WhereSuggestionTTLDaysEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.SuggestionTTLDaysEQ(b.query, v)
	return b
}

// WhereSuggestionTTLDaysNEQ adds a WHERE suggestion_ttl_days != ? condition
func (b *PatternConfigQueryBuilder) WhereSuggestionTTLDaysNEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.SuggestionTTLDaysNEQ(b.query, v)
	return b
}

// WhereSuggestionTTLDaysGT adds a WHERE suggestion_ttl_days > ? condition
func (b *PatternConfigQueryBuilder) WhereSuggestionTTLDaysGT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.SuggestionTTLDaysGT(b.query, v)
	return b
}

// WhereSuggestionTTLDaysGTE adds a WHERE suggestion_ttl_days >= ? condition
func (b *PatternConfigQueryBuilder) WhereSuggestionTTLDaysGTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.SuggestionTTLDaysGTE(b.query, v)
	return b
}

// WhereSuggestionTTLDaysLT adds a WHERE suggestion_ttl_days < ? condition
func (b *PatternConfigQueryBuilder) WhereSuggestionTTLDaysLT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.SuggestionTTLDaysLT(b.query, v)
	return b
}

// WhereSuggestionTTLDaysLTE adds a WHERE suggestion_ttl_days <= ? condition
func (b *PatternConfigQueryBuilder) WhereSuggestionTTLDaysLTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.SuggestionTTLDaysLTE(b.query, v)
	return b
}

// WhereSuggestionTTLDaysIn adds a WHERE suggestion_ttl_days IN (?) condition
func (b *PatternConfigQueryBuilder) WhereSuggestionTTLDaysIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.SuggestionTTLDaysIn(b.query, v)
	return b
}

// WhereSuggestionTTLDaysNotIn adds a WHERE suggestion_ttl_days NOT IN (?) condition
func (b *PatternConfigQueryBuilder) WhereSuggestionTTLDaysNotIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.SuggestionTTLDaysNotIn(b.query, v)
	return b
}

// WhereRequireExactMatchEQ adds a WHERE require_exact_match = ? condition
func (b *PatternConfigQueryBuilder) WhereRequireExactMatchEQ(v bool) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.RequireExactMatchEQ(b.query, v)
	return b
}

// WhereRequireExactMatchNEQ adds a WHERE require_exact_match != ? condition
func (b *PatternConfigQueryBuilder) WhereRequireExactMatchNEQ(v bool) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.RequireExactMatchNEQ(b.query, v)
	return b
}

// WhereWeightRecentShipmentsEQ adds a WHERE weight_recent_shipments = ? condition
func (b *PatternConfigQueryBuilder) WhereWeightRecentShipmentsEQ(v bool) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.WeightRecentShipmentsEQ(b.query, v)
	return b
}

// WhereWeightRecentShipmentsNEQ adds a WHERE weight_recent_shipments != ? condition
func (b *PatternConfigQueryBuilder) WhereWeightRecentShipmentsNEQ(v bool) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.WeightRecentShipmentsNEQ(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *PatternConfigQueryBuilder) WhereVersionEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *PatternConfigQueryBuilder) WhereVersionNEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *PatternConfigQueryBuilder) WhereVersionGT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *PatternConfigQueryBuilder) WhereVersionGTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *PatternConfigQueryBuilder) WhereVersionLT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *PatternConfigQueryBuilder) WhereVersionLTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *PatternConfigQueryBuilder) WhereVersionIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *PatternConfigQueryBuilder) WhereVersionNotIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *PatternConfigQueryBuilder) WhereCreatedAtEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *PatternConfigQueryBuilder) WhereCreatedAtNEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *PatternConfigQueryBuilder) WhereCreatedAtGT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *PatternConfigQueryBuilder) WhereCreatedAtGTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *PatternConfigQueryBuilder) WhereCreatedAtLT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *PatternConfigQueryBuilder) WhereCreatedAtLTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *PatternConfigQueryBuilder) WhereCreatedAtIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *PatternConfigQueryBuilder) WhereCreatedAtNotIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *PatternConfigQueryBuilder) WhereUpdatedAtEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *PatternConfigQueryBuilder) WhereUpdatedAtNEQ(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *PatternConfigQueryBuilder) WhereUpdatedAtGT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *PatternConfigQueryBuilder) WhereUpdatedAtGTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *PatternConfigQueryBuilder) WhereUpdatedAtLT(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *PatternConfigQueryBuilder) WhereUpdatedAtLTE(v int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *PatternConfigQueryBuilder) WhereUpdatedAtIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *PatternConfigQueryBuilder) WhereUpdatedAtNotIn(v []int64) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *PatternConfigQueryBuilder) WhereTenant(orgID, buID pulid.ID) *PatternConfigQueryBuilder {
	b.query = PatternConfigQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *PatternConfigQueryBuilder) WhereGroup(sep string, fn func(*PatternConfigQueryBuilder) *PatternConfigQueryBuilder) *PatternConfigQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &PatternConfigQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *PatternConfigQueryBuilder) Where(query string, args ...interface{}) *PatternConfigQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *PatternConfigQueryBuilder) OrderBy(column string, desc ...bool) *PatternConfigQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(PatternConfigQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *PatternConfigQueryBuilder) Limit(n int) *PatternConfigQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *PatternConfigQueryBuilder) Offset(n int) *PatternConfigQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *PatternConfigQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *PatternConfigQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *PatternConfigQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *PatternConfigQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *PatternConfigQueryBuilder) All(ctx context.Context) ([]*PatternConfig, error) {
	var entities []*PatternConfig
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *PatternConfigQueryBuilder) AllWithCount(ctx context.Context) ([]*PatternConfig, int, error) {
	var entities []*PatternConfig
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *PatternConfigQueryBuilder) One(ctx context.Context) (*PatternConfig, error) {
	entity := new(PatternConfig)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *PatternConfigQueryBuilder) First(ctx context.Context) (*PatternConfig, error) {
	entity := new(PatternConfig)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// PatternConfigBuild creates a chainable query builder
func PatternConfigBuild(db bun.IDB) *PatternConfigQueryBuilder {
	return NewPatternConfigQuery(db)
}
