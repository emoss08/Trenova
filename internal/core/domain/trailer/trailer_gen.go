// Code generated by gen-trenova. DO NOT EDIT.

package trailer

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// trailerFieldConfig provides field configuration for Trailer
type trailerFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// TrailerQuery provides type-safe query helpers and constants
var TrailerQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                      string
		BusinessUnitID          string
		OrganizationID          string
		EquipmentTypeID         string
		EquipmentManufacturerID string
		FleetCodeID             string
		RegistrationStateID     string
		Status                  string
		Code                    string
		Model                   string
		Make                    string
		LicensePlateNumber      string
		Vin                     string
		RegistrationNumber      string
		SearchVector            string
		Rank                    string
		Year                    string
		MaxLoadWeight           string
		LastInspectionDate      string
		RegistrationExpiry      string
		Version                 string
		CreatedAt               string
		UpdatedAt               string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentTypeIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentTypeIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentTypeIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentTypeIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		FleetCodeIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		FleetCodeIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationStateIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		RegistrationStateIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		RegistrationStateIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		RegistrationStateIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		RegistrationStateIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationStateIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                     func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery
		StatusNEQ                    func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery
		StatusIn                     func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery
		StatusNotIn                  func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery
		CodeEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ModelNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ModelGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MakeNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MakeGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicensePlateNumberNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicensePlateNumberGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VinNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VinGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegistrationNumberNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegistrationNumberGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		YearEQ                       func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		YearNEQ                      func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		YearIn                       func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		YearNotIn                    func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		YearIsNull                   func(q *bun.SelectQuery) *bun.SelectQuery
		YearIsNotNull                func(q *bun.SelectQuery) *bun.SelectQuery
		MaxLoadWeightEQ              func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		MaxLoadWeightNEQ             func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		MaxLoadWeightIn              func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		MaxLoadWeightNotIn           func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		MaxLoadWeightIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		MaxLoadWeightIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		LastInspectionDateEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		LastInspectionDateNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		LastInspectionDateIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		LastInspectionDateNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		LastInspectionDateIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		LastInspectionDateIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationExpiryEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RegistrationExpiryNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RegistrationExpiryIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RegistrationExpiryNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RegistrationExpiryIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationExpiryIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]trailerFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit          string
		Organization          string
		EquipmentType         string
		EquipmentManufacturer string
		RegistrationState     string
		FleetCode             string
	}
}{
	// Table and alias constants
	Table:    "trailers",
	Alias:    "tr",
	IDPrefix: "tr_",

	// Field names
	Field: struct {
		ID                      string
		BusinessUnitID          string
		OrganizationID          string
		EquipmentTypeID         string
		EquipmentManufacturerID string
		FleetCodeID             string
		RegistrationStateID     string
		Status                  string
		Code                    string
		Model                   string
		Make                    string
		LicensePlateNumber      string
		Vin                     string
		RegistrationNumber      string
		SearchVector            string
		Rank                    string
		Year                    string
		MaxLoadWeight           string
		LastInspectionDate      string
		RegistrationExpiry      string
		Version                 string
		CreatedAt               string
		UpdatedAt               string
	}{
		ID:                      "id",
		BusinessUnitID:          "business_unit_id",
		OrganizationID:          "organization_id",
		EquipmentTypeID:         "equipment_type_id",
		EquipmentManufacturerID: "equipment_manufacturer_id",
		FleetCodeID:             "fleet_code_id",
		RegistrationStateID:     "registration_state_id",
		Status:                  "status",
		Code:                    "code",
		Model:                   "model",
		Make:                    "make",
		LicensePlateNumber:      "license_plate_number",
		Vin:                     "vin",
		RegistrationNumber:      "registration_number",
		SearchVector:            "search_vector",
		Rank:                    "rank",
		Year:                    "year",
		MaxLoadWeight:           "max_load_weight",
		LastInspectionDate:      "last_inspection_date",
		RegistrationExpiry:      "registration_expiry",
		Version:                 "version",
		CreatedAt:               "created_at",
		UpdatedAt:               "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "tr." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "tr." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentTypeIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentTypeIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentTypeIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentTypeIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		FleetCodeIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		FleetCodeIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationStateIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		RegistrationStateIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		RegistrationStateIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		RegistrationStateIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		RegistrationStateIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationStateIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                     func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery
		StatusNEQ                    func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery
		StatusIn                     func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery
		StatusNotIn                  func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery
		CodeEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ModelNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ModelGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MakeNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MakeGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicensePlateNumberNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicensePlateNumberGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VinNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VinGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegistrationNumberNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegistrationNumberGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		YearEQ                       func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		YearNEQ                      func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		YearIn                       func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		YearNotIn                    func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		YearIsNull                   func(q *bun.SelectQuery) *bun.SelectQuery
		YearIsNotNull                func(q *bun.SelectQuery) *bun.SelectQuery
		MaxLoadWeightEQ              func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		MaxLoadWeightNEQ             func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		MaxLoadWeightIn              func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		MaxLoadWeightNotIn           func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		MaxLoadWeightIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		MaxLoadWeightIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		LastInspectionDateEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		LastInspectionDateNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		LastInspectionDateIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		LastInspectionDateNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		LastInspectionDateIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		LastInspectionDateIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationExpiryEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RegistrationExpiryNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RegistrationExpiryIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RegistrationExpiryNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RegistrationExpiryIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationExpiryIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                       func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.organization_id"), bun.In(v))
		},
		EquipmentTypeIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.equipment_type_id"), v)
		},
		EquipmentTypeIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.equipment_type_id"), v)
		},
		EquipmentTypeIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.equipment_type_id"), bun.In(v))
		},
		EquipmentTypeIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.equipment_type_id"), bun.In(v))
		},
		EquipmentManufacturerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.equipment_manufacturer_id"), v)
		},
		EquipmentManufacturerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.equipment_manufacturer_id"), v)
		},
		EquipmentManufacturerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.equipment_manufacturer_id"), bun.In(v))
		},
		EquipmentManufacturerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.equipment_manufacturer_id"), bun.In(v))
		},
		FleetCodeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.fleet_code_id"), v)
		},
		FleetCodeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.fleet_code_id"), v)
		},
		FleetCodeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.fleet_code_id"), bun.In(v))
		},
		FleetCodeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.fleet_code_id"), bun.In(v))
		},
		FleetCodeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.fleet_code_id"))
		},
		FleetCodeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.fleet_code_id"))
		},
		RegistrationStateIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.registration_state_id"), v)
		},
		RegistrationStateIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.registration_state_id"), v)
		},
		RegistrationStateIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.registration_state_id"), bun.In(v))
		},
		RegistrationStateIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.registration_state_id"), bun.In(v))
		},
		RegistrationStateIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.registration_state_id"))
		},
		RegistrationStateIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.registration_state_id"))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.status"), bun.In(v))
		},
		CodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.code"), v)
		},
		CodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.code"), v)
		},
		CodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.code"), bun.In(v))
		},
		CodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.code"), bun.In(v))
		},
		CodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.code"), v)
		},
		CodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.code"), v)
		},
		CodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.code"), v)
		},
		CodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.code"), v)
		},
		CodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.code"), "%"+v+"%")
		},
		CodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.code"), v+"%")
		},
		CodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.code"), "%"+v)
		},
		ModelEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.model"), v)
		},
		ModelNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.model"), v)
		},
		ModelIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.model"), bun.In(v))
		},
		ModelNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.model"), bun.In(v))
		},
		ModelGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.model"), v)
		},
		ModelGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.model"), v)
		},
		ModelLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.model"), v)
		},
		ModelLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.model"), v)
		},
		ModelContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.model"), "%"+v+"%")
		},
		ModelHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.model"), v+"%")
		},
		ModelHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.model"), "%"+v)
		},
		MakeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.make"), v)
		},
		MakeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.make"), v)
		},
		MakeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.make"), bun.In(v))
		},
		MakeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.make"), bun.In(v))
		},
		MakeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.make"), v)
		},
		MakeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.make"), v)
		},
		MakeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.make"), v)
		},
		MakeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.make"), v)
		},
		MakeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.make"), "%"+v+"%")
		},
		MakeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.make"), v+"%")
		},
		MakeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.make"), "%"+v)
		},
		LicensePlateNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.license_plate_number"), bun.In(v))
		},
		LicensePlateNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.license_plate_number"), bun.In(v))
		},
		LicensePlateNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.license_plate_number"), "%"+v+"%")
		},
		LicensePlateNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.license_plate_number"), v+"%")
		},
		LicensePlateNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.license_plate_number"), "%"+v)
		},
		VinEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.vin"), v)
		},
		VinNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.vin"), v)
		},
		VinIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.vin"), bun.In(v))
		},
		VinNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.vin"), bun.In(v))
		},
		VinGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.vin"), v)
		},
		VinGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.vin"), v)
		},
		VinLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.vin"), v)
		},
		VinLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.vin"), v)
		},
		VinContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.vin"), "%"+v+"%")
		},
		VinHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.vin"), v+"%")
		},
		VinHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.vin"), "%"+v)
		},
		RegistrationNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.registration_number"), bun.In(v))
		},
		RegistrationNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.registration_number"), bun.In(v))
		},
		RegistrationNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.registration_number"), "%"+v+"%")
		},
		RegistrationNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.registration_number"), v+"%")
		},
		RegistrationNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.registration_number"), "%"+v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.rank"), "%"+v)
		},
		YearEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.year"), v)
		},
		YearNEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.year"), v)
		},
		YearIn: func(q *bun.SelectQuery, v []*int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.year"), bun.In(v))
		},
		YearNotIn: func(q *bun.SelectQuery, v []*int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.year"), bun.In(v))
		},
		YearIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.year"))
		},
		YearIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.year"))
		},
		MaxLoadWeightEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.max_load_weight"), v)
		},
		MaxLoadWeightNEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.max_load_weight"), v)
		},
		MaxLoadWeightIn: func(q *bun.SelectQuery, v []*int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.max_load_weight"), bun.In(v))
		},
		MaxLoadWeightNotIn: func(q *bun.SelectQuery, v []*int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.max_load_weight"), bun.In(v))
		},
		MaxLoadWeightIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.max_load_weight"))
		},
		MaxLoadWeightIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.max_load_weight"))
		},
		LastInspectionDateEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.last_inspection_date"), v)
		},
		LastInspectionDateNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.last_inspection_date"), v)
		},
		LastInspectionDateIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.last_inspection_date"), bun.In(v))
		},
		LastInspectionDateNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.last_inspection_date"), bun.In(v))
		},
		LastInspectionDateIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.last_inspection_date"))
		},
		LastInspectionDateIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.last_inspection_date"))
		},
		RegistrationExpiryEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.registration_expiry"), v)
		},
		RegistrationExpiryNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.registration_expiry"), v)
		},
		RegistrationExpiryIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.registration_expiry"), bun.In(v))
		},
		RegistrationExpiryNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.registration_expiry"), bun.In(v))
		},
		RegistrationExpiryIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.registration_expiry"))
		},
		RegistrationExpiryIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.registration_expiry"))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("tr.organization_id"), orgID).
				Where("? = ?", bun.Ident("tr.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("tr.id"), id).
				Where("? = ?", bun.Ident("tr.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "tr." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"tr.status ASC",
				"tr.code ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "tr.status DESC"
			}
			return "tr.status ASC"
		},
		Code: func(desc bool) string {
			if desc {
				return "tr.code DESC"
			}
			return "tr.code ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "tr.created_at DESC"
			}
			return "tr.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "tr.updated_at DESC"
			}
			return "tr.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]trailerFieldConfig {
		return map[string]trailerFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_type_id": {
				Name:       "equipment_type_id",
				Column:     "tr.equipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_manufacturer_id": {
				Name:       "equipment_manufacturer_id",
				Column:     "tr.equipment_manufacturer_id",
				Sortable:   false,
				Filterable: true,
			},
			"fleet_code_id": {
				Name:       "fleet_code_id",
				Column:     "tr.fleet_code_id",
				Sortable:   false,
				Filterable: true,
			},
			"registration_state_id": {
				Name:       "registration_state_id",
				Column:     "tr.registration_state_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "tr.status",
				Sortable:   false,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "tr.code",
				Sortable:   true,
				Filterable: true,
			},
			"model": {
				Name:       "model",
				Column:     "tr.model",
				Sortable:   false,
				Filterable: true,
			},
			"make": {
				Name:       "make",
				Column:     "tr.make",
				Sortable:   false,
				Filterable: true,
			},
			"license_plate_number": {
				Name:       "license_plate_number",
				Column:     "tr.license_plate_number",
				Sortable:   false,
				Filterable: true,
			},
			"vin": {
				Name:       "vin",
				Column:     "tr.vin",
				Sortable:   false,
				Filterable: false,
			},
			"registration_number": {
				Name:       "registration_number",
				Column:     "tr.registration_number",
				Sortable:   false,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "tr.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "tr.rank",
				Sortable:   false,
				Filterable: true,
			},
			"year": {
				Name:       "year",
				Column:     "tr.year",
				Sortable:   false,
				Filterable: false,
			},
			"max_load_weight": {
				Name:       "max_load_weight",
				Column:     "tr.max_load_weight",
				Sortable:   false,
				Filterable: false,
			},
			"last_inspection_date": {
				Name:       "last_inspection_date",
				Column:     "tr.last_inspection_date",
				Sortable:   false,
				Filterable: false,
			},
			"registration_expiry": {
				Name:       "registration_expiry",
				Column:     "tr.registration_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "tr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "tr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]trailerFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_type_id": {
				Name:       "equipment_type_id",
				Column:     "tr.equipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_manufacturer_id": {
				Name:       "equipment_manufacturer_id",
				Column:     "tr.equipment_manufacturer_id",
				Sortable:   false,
				Filterable: true,
			},
			"fleet_code_id": {
				Name:       "fleet_code_id",
				Column:     "tr.fleet_code_id",
				Sortable:   false,
				Filterable: true,
			},
			"registration_state_id": {
				Name:       "registration_state_id",
				Column:     "tr.registration_state_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "tr.status",
				Sortable:   false,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "tr.code",
				Sortable:   true,
				Filterable: true,
			},
			"model": {
				Name:       "model",
				Column:     "tr.model",
				Sortable:   false,
				Filterable: true,
			},
			"make": {
				Name:       "make",
				Column:     "tr.make",
				Sortable:   false,
				Filterable: true,
			},
			"license_plate_number": {
				Name:       "license_plate_number",
				Column:     "tr.license_plate_number",
				Sortable:   false,
				Filterable: true,
			},
			"vin": {
				Name:       "vin",
				Column:     "tr.vin",
				Sortable:   false,
				Filterable: false,
			},
			"registration_number": {
				Name:       "registration_number",
				Column:     "tr.registration_number",
				Sortable:   false,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "tr.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "tr.rank",
				Sortable:   false,
				Filterable: true,
			},
			"year": {
				Name:       "year",
				Column:     "tr.year",
				Sortable:   false,
				Filterable: false,
			},
			"max_load_weight": {
				Name:       "max_load_weight",
				Column:     "tr.max_load_weight",
				Sortable:   false,
				Filterable: false,
			},
			"last_inspection_date": {
				Name:       "last_inspection_date",
				Column:     "tr.last_inspection_date",
				Sortable:   false,
				Filterable: false,
			},
			"registration_expiry": {
				Name:       "registration_expiry",
				Column:     "tr.registration_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "tr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "tr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]trailerFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_type_id": {
				Name:       "equipment_type_id",
				Column:     "tr.equipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_manufacturer_id": {
				Name:       "equipment_manufacturer_id",
				Column:     "tr.equipment_manufacturer_id",
				Sortable:   false,
				Filterable: true,
			},
			"fleet_code_id": {
				Name:       "fleet_code_id",
				Column:     "tr.fleet_code_id",
				Sortable:   false,
				Filterable: true,
			},
			"registration_state_id": {
				Name:       "registration_state_id",
				Column:     "tr.registration_state_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "tr.status",
				Sortable:   false,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "tr.code",
				Sortable:   true,
				Filterable: true,
			},
			"model": {
				Name:       "model",
				Column:     "tr.model",
				Sortable:   false,
				Filterable: true,
			},
			"make": {
				Name:       "make",
				Column:     "tr.make",
				Sortable:   false,
				Filterable: true,
			},
			"license_plate_number": {
				Name:       "license_plate_number",
				Column:     "tr.license_plate_number",
				Sortable:   false,
				Filterable: true,
			},
			"vin": {
				Name:       "vin",
				Column:     "tr.vin",
				Sortable:   false,
				Filterable: false,
			},
			"registration_number": {
				Name:       "registration_number",
				Column:     "tr.registration_number",
				Sortable:   false,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "tr.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "tr.rank",
				Sortable:   false,
				Filterable: true,
			},
			"year": {
				Name:       "year",
				Column:     "tr.year",
				Sortable:   false,
				Filterable: false,
			},
			"max_load_weight": {
				Name:       "max_load_weight",
				Column:     "tr.max_load_weight",
				Sortable:   false,
				Filterable: false,
			},
			"last_inspection_date": {
				Name:       "last_inspection_date",
				Column:     "tr.last_inspection_date",
				Sortable:   false,
				Filterable: false,
			},
			"registration_expiry": {
				Name:       "registration_expiry",
				Column:     "tr.registration_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "tr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "tr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit          string
		Organization          string
		EquipmentType         string
		EquipmentManufacturer string
		RegistrationState     string
		FleetCode             string
	}{
		BusinessUnit:          "BusinessUnit",
		Organization:          "Organization",
		EquipmentType:         "EquipmentType",
		EquipmentManufacturer: "EquipmentManufacturer",
		RegistrationState:     "RegistrationState",
		FleetCode:             "FleetCode",
	},
}

// TrailerQueryBuilder provides a fluent interface for building queries
type TrailerQueryBuilder struct {
	query *bun.SelectQuery
}

// NewTrailerQuery creates a new query builder
func NewTrailerQuery(db bun.IDB) *TrailerQueryBuilder {
	return &TrailerQueryBuilder{
		query: db.NewSelect().Model((*Trailer)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func TrailerFromQuery(q *bun.SelectQuery) *TrailerQueryBuilder {
	return &TrailerQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *TrailerQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *TrailerQueryBuilder) Model(model interface{}) *TrailerQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *TrailerQueryBuilder) WhereIDEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *TrailerQueryBuilder) WhereIDNEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *TrailerQueryBuilder) WhereIDIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereIDNotIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *TrailerQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *TrailerQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *TrailerQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *TrailerQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *TrailerQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *TrailerQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereEquipmentTypeIDEQ adds a WHERE equipment_type_id = ? condition
func (b *TrailerQueryBuilder) WhereEquipmentTypeIDEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.EquipmentTypeIDEQ(b.query, v)
	return b
}

// WhereEquipmentTypeIDNEQ adds a WHERE equipment_type_id != ? condition
func (b *TrailerQueryBuilder) WhereEquipmentTypeIDNEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.EquipmentTypeIDNEQ(b.query, v)
	return b
}

// WhereEquipmentTypeIDIn adds a WHERE equipment_type_id IN (?) condition
func (b *TrailerQueryBuilder) WhereEquipmentTypeIDIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.EquipmentTypeIDIn(b.query, v)
	return b
}

// WhereEquipmentTypeIDNotIn adds a WHERE equipment_type_id NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereEquipmentTypeIDNotIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.EquipmentTypeIDNotIn(b.query, v)
	return b
}

// WhereEquipmentManufacturerIDEQ adds a WHERE equipment_manufacturer_id = ? condition
func (b *TrailerQueryBuilder) WhereEquipmentManufacturerIDEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.EquipmentManufacturerIDEQ(b.query, v)
	return b
}

// WhereEquipmentManufacturerIDNEQ adds a WHERE equipment_manufacturer_id != ? condition
func (b *TrailerQueryBuilder) WhereEquipmentManufacturerIDNEQ(v pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.EquipmentManufacturerIDNEQ(b.query, v)
	return b
}

// WhereEquipmentManufacturerIDIn adds a WHERE equipment_manufacturer_id IN (?) condition
func (b *TrailerQueryBuilder) WhereEquipmentManufacturerIDIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.EquipmentManufacturerIDIn(b.query, v)
	return b
}

// WhereEquipmentManufacturerIDNotIn adds a WHERE equipment_manufacturer_id NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereEquipmentManufacturerIDNotIn(v []pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.EquipmentManufacturerIDNotIn(b.query, v)
	return b
}

// WhereFleetCodeIDEQ adds a WHERE fleet_code_id = ? condition
func (b *TrailerQueryBuilder) WhereFleetCodeIDEQ(v *pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.FleetCodeIDEQ(b.query, v)
	return b
}

// WhereFleetCodeIDNEQ adds a WHERE fleet_code_id != ? condition
func (b *TrailerQueryBuilder) WhereFleetCodeIDNEQ(v *pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.FleetCodeIDNEQ(b.query, v)
	return b
}

// WhereFleetCodeIDIn adds a WHERE fleet_code_id IN (?) condition
func (b *TrailerQueryBuilder) WhereFleetCodeIDIn(v []*pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.FleetCodeIDIn(b.query, v)
	return b
}

// WhereFleetCodeIDNotIn adds a WHERE fleet_code_id NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereFleetCodeIDNotIn(v []*pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.FleetCodeIDNotIn(b.query, v)
	return b
}

// WhereRegistrationStateIDEQ adds a WHERE registration_state_id = ? condition
func (b *TrailerQueryBuilder) WhereRegistrationStateIDEQ(v *pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationStateIDEQ(b.query, v)
	return b
}

// WhereRegistrationStateIDNEQ adds a WHERE registration_state_id != ? condition
func (b *TrailerQueryBuilder) WhereRegistrationStateIDNEQ(v *pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationStateIDNEQ(b.query, v)
	return b
}

// WhereRegistrationStateIDIn adds a WHERE registration_state_id IN (?) condition
func (b *TrailerQueryBuilder) WhereRegistrationStateIDIn(v []*pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationStateIDIn(b.query, v)
	return b
}

// WhereRegistrationStateIDNotIn adds a WHERE registration_state_id NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereRegistrationStateIDNotIn(v []*pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationStateIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *TrailerQueryBuilder) WhereStatusEQ(v domain.EquipmentStatus) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *TrailerQueryBuilder) WhereStatusNEQ(v domain.EquipmentStatus) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *TrailerQueryBuilder) WhereStatusIn(v []domain.EquipmentStatus) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereStatusNotIn(v []domain.EquipmentStatus) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereCodeEQ adds a WHERE code = ? condition
func (b *TrailerQueryBuilder) WhereCodeEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CodeEQ(b.query, v)
	return b
}

// WhereCodeNEQ adds a WHERE code != ? condition
func (b *TrailerQueryBuilder) WhereCodeNEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CodeNEQ(b.query, v)
	return b
}

// WhereCodeIn adds a WHERE code IN (?) condition
func (b *TrailerQueryBuilder) WhereCodeIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CodeIn(b.query, v)
	return b
}

// WhereCodeNotIn adds a WHERE code NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereCodeNotIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CodeNotIn(b.query, v)
	return b
}

// WhereCodeContains adds a WHERE code LIKE ? condition
func (b *TrailerQueryBuilder) WhereCodeContains(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CodeContains(b.query, v)
	return b
}

// WhereCodeHasPrefix adds a WHERE code LIKE ? condition
func (b *TrailerQueryBuilder) WhereCodeHasPrefix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CodeHasPrefix(b.query, v)
	return b
}

// WhereCodeHasSuffix adds a WHERE code LIKE ? condition
func (b *TrailerQueryBuilder) WhereCodeHasSuffix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CodeHasSuffix(b.query, v)
	return b
}

// WhereModelEQ adds a WHERE model = ? condition
func (b *TrailerQueryBuilder) WhereModelEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.ModelEQ(b.query, v)
	return b
}

// WhereModelNEQ adds a WHERE model != ? condition
func (b *TrailerQueryBuilder) WhereModelNEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.ModelNEQ(b.query, v)
	return b
}

// WhereModelIn adds a WHERE model IN (?) condition
func (b *TrailerQueryBuilder) WhereModelIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.ModelIn(b.query, v)
	return b
}

// WhereModelNotIn adds a WHERE model NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereModelNotIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.ModelNotIn(b.query, v)
	return b
}

// WhereModelContains adds a WHERE model LIKE ? condition
func (b *TrailerQueryBuilder) WhereModelContains(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.ModelContains(b.query, v)
	return b
}

// WhereModelHasPrefix adds a WHERE model LIKE ? condition
func (b *TrailerQueryBuilder) WhereModelHasPrefix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.ModelHasPrefix(b.query, v)
	return b
}

// WhereModelHasSuffix adds a WHERE model LIKE ? condition
func (b *TrailerQueryBuilder) WhereModelHasSuffix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.ModelHasSuffix(b.query, v)
	return b
}

// WhereMakeEQ adds a WHERE make = ? condition
func (b *TrailerQueryBuilder) WhereMakeEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MakeEQ(b.query, v)
	return b
}

// WhereMakeNEQ adds a WHERE make != ? condition
func (b *TrailerQueryBuilder) WhereMakeNEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MakeNEQ(b.query, v)
	return b
}

// WhereMakeIn adds a WHERE make IN (?) condition
func (b *TrailerQueryBuilder) WhereMakeIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MakeIn(b.query, v)
	return b
}

// WhereMakeNotIn adds a WHERE make NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereMakeNotIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MakeNotIn(b.query, v)
	return b
}

// WhereMakeContains adds a WHERE make LIKE ? condition
func (b *TrailerQueryBuilder) WhereMakeContains(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MakeContains(b.query, v)
	return b
}

// WhereMakeHasPrefix adds a WHERE make LIKE ? condition
func (b *TrailerQueryBuilder) WhereMakeHasPrefix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MakeHasPrefix(b.query, v)
	return b
}

// WhereMakeHasSuffix adds a WHERE make LIKE ? condition
func (b *TrailerQueryBuilder) WhereMakeHasSuffix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MakeHasSuffix(b.query, v)
	return b
}

// WhereLicensePlateNumberEQ adds a WHERE license_plate_number = ? condition
func (b *TrailerQueryBuilder) WhereLicensePlateNumberEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LicensePlateNumberEQ(b.query, v)
	return b
}

// WhereLicensePlateNumberNEQ adds a WHERE license_plate_number != ? condition
func (b *TrailerQueryBuilder) WhereLicensePlateNumberNEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LicensePlateNumberNEQ(b.query, v)
	return b
}

// WhereLicensePlateNumberIn adds a WHERE license_plate_number IN (?) condition
func (b *TrailerQueryBuilder) WhereLicensePlateNumberIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LicensePlateNumberIn(b.query, v)
	return b
}

// WhereLicensePlateNumberNotIn adds a WHERE license_plate_number NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereLicensePlateNumberNotIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LicensePlateNumberNotIn(b.query, v)
	return b
}

// WhereLicensePlateNumberContains adds a WHERE license_plate_number LIKE ? condition
func (b *TrailerQueryBuilder) WhereLicensePlateNumberContains(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LicensePlateNumberContains(b.query, v)
	return b
}

// WhereLicensePlateNumberHasPrefix adds a WHERE license_plate_number LIKE ? condition
func (b *TrailerQueryBuilder) WhereLicensePlateNumberHasPrefix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LicensePlateNumberHasPrefix(b.query, v)
	return b
}

// WhereLicensePlateNumberHasSuffix adds a WHERE license_plate_number LIKE ? condition
func (b *TrailerQueryBuilder) WhereLicensePlateNumberHasSuffix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LicensePlateNumberHasSuffix(b.query, v)
	return b
}

// WhereVinEQ adds a WHERE vin = ? condition
func (b *TrailerQueryBuilder) WhereVinEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VinEQ(b.query, v)
	return b
}

// WhereVinNEQ adds a WHERE vin != ? condition
func (b *TrailerQueryBuilder) WhereVinNEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VinNEQ(b.query, v)
	return b
}

// WhereVinIn adds a WHERE vin IN (?) condition
func (b *TrailerQueryBuilder) WhereVinIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VinIn(b.query, v)
	return b
}

// WhereVinNotIn adds a WHERE vin NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereVinNotIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VinNotIn(b.query, v)
	return b
}

// WhereVinContains adds a WHERE vin LIKE ? condition
func (b *TrailerQueryBuilder) WhereVinContains(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VinContains(b.query, v)
	return b
}

// WhereVinHasPrefix adds a WHERE vin LIKE ? condition
func (b *TrailerQueryBuilder) WhereVinHasPrefix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VinHasPrefix(b.query, v)
	return b
}

// WhereVinHasSuffix adds a WHERE vin LIKE ? condition
func (b *TrailerQueryBuilder) WhereVinHasSuffix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VinHasSuffix(b.query, v)
	return b
}

// WhereRegistrationNumberEQ adds a WHERE registration_number = ? condition
func (b *TrailerQueryBuilder) WhereRegistrationNumberEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationNumberEQ(b.query, v)
	return b
}

// WhereRegistrationNumberNEQ adds a WHERE registration_number != ? condition
func (b *TrailerQueryBuilder) WhereRegistrationNumberNEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationNumberNEQ(b.query, v)
	return b
}

// WhereRegistrationNumberIn adds a WHERE registration_number IN (?) condition
func (b *TrailerQueryBuilder) WhereRegistrationNumberIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationNumberIn(b.query, v)
	return b
}

// WhereRegistrationNumberNotIn adds a WHERE registration_number NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereRegistrationNumberNotIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationNumberNotIn(b.query, v)
	return b
}

// WhereRegistrationNumberContains adds a WHERE registration_number LIKE ? condition
func (b *TrailerQueryBuilder) WhereRegistrationNumberContains(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationNumberContains(b.query, v)
	return b
}

// WhereRegistrationNumberHasPrefix adds a WHERE registration_number LIKE ? condition
func (b *TrailerQueryBuilder) WhereRegistrationNumberHasPrefix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationNumberHasPrefix(b.query, v)
	return b
}

// WhereRegistrationNumberHasSuffix adds a WHERE registration_number LIKE ? condition
func (b *TrailerQueryBuilder) WhereRegistrationNumberHasSuffix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationNumberHasSuffix(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *TrailerQueryBuilder) WhereSearchVectorEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *TrailerQueryBuilder) WhereSearchVectorNEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *TrailerQueryBuilder) WhereSearchVectorIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereSearchVectorNotIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *TrailerQueryBuilder) WhereSearchVectorContains(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *TrailerQueryBuilder) WhereSearchVectorHasPrefix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *TrailerQueryBuilder) WhereSearchVectorHasSuffix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *TrailerQueryBuilder) WhereRankEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *TrailerQueryBuilder) WhereRankNEQ(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *TrailerQueryBuilder) WhereRankIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereRankNotIn(v []string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *TrailerQueryBuilder) WhereRankContains(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *TrailerQueryBuilder) WhereRankHasPrefix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *TrailerQueryBuilder) WhereRankHasSuffix(v string) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// WhereYearEQ adds a WHERE year = ? condition
func (b *TrailerQueryBuilder) WhereYearEQ(v *int) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.YearEQ(b.query, v)
	return b
}

// WhereYearNEQ adds a WHERE year != ? condition
func (b *TrailerQueryBuilder) WhereYearNEQ(v *int) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.YearNEQ(b.query, v)
	return b
}

// WhereYearIn adds a WHERE year IN (?) condition
func (b *TrailerQueryBuilder) WhereYearIn(v []*int) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.YearIn(b.query, v)
	return b
}

// WhereYearNotIn adds a WHERE year NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereYearNotIn(v []*int) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.YearNotIn(b.query, v)
	return b
}

// WhereMaxLoadWeightEQ adds a WHERE max_load_weight = ? condition
func (b *TrailerQueryBuilder) WhereMaxLoadWeightEQ(v *int) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MaxLoadWeightEQ(b.query, v)
	return b
}

// WhereMaxLoadWeightNEQ adds a WHERE max_load_weight != ? condition
func (b *TrailerQueryBuilder) WhereMaxLoadWeightNEQ(v *int) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MaxLoadWeightNEQ(b.query, v)
	return b
}

// WhereMaxLoadWeightIn adds a WHERE max_load_weight IN (?) condition
func (b *TrailerQueryBuilder) WhereMaxLoadWeightIn(v []*int) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MaxLoadWeightIn(b.query, v)
	return b
}

// WhereMaxLoadWeightNotIn adds a WHERE max_load_weight NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereMaxLoadWeightNotIn(v []*int) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.MaxLoadWeightNotIn(b.query, v)
	return b
}

// WhereLastInspectionDateEQ adds a WHERE last_inspection_date = ? condition
func (b *TrailerQueryBuilder) WhereLastInspectionDateEQ(v *int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LastInspectionDateEQ(b.query, v)
	return b
}

// WhereLastInspectionDateNEQ adds a WHERE last_inspection_date != ? condition
func (b *TrailerQueryBuilder) WhereLastInspectionDateNEQ(v *int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LastInspectionDateNEQ(b.query, v)
	return b
}

// WhereLastInspectionDateIn adds a WHERE last_inspection_date IN (?) condition
func (b *TrailerQueryBuilder) WhereLastInspectionDateIn(v []*int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LastInspectionDateIn(b.query, v)
	return b
}

// WhereLastInspectionDateNotIn adds a WHERE last_inspection_date NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereLastInspectionDateNotIn(v []*int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.LastInspectionDateNotIn(b.query, v)
	return b
}

// WhereRegistrationExpiryEQ adds a WHERE registration_expiry = ? condition
func (b *TrailerQueryBuilder) WhereRegistrationExpiryEQ(v *int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationExpiryEQ(b.query, v)
	return b
}

// WhereRegistrationExpiryNEQ adds a WHERE registration_expiry != ? condition
func (b *TrailerQueryBuilder) WhereRegistrationExpiryNEQ(v *int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationExpiryNEQ(b.query, v)
	return b
}

// WhereRegistrationExpiryIn adds a WHERE registration_expiry IN (?) condition
func (b *TrailerQueryBuilder) WhereRegistrationExpiryIn(v []*int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationExpiryIn(b.query, v)
	return b
}

// WhereRegistrationExpiryNotIn adds a WHERE registration_expiry NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereRegistrationExpiryNotIn(v []*int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.RegistrationExpiryNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *TrailerQueryBuilder) WhereVersionEQ(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *TrailerQueryBuilder) WhereVersionNEQ(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *TrailerQueryBuilder) WhereVersionGT(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *TrailerQueryBuilder) WhereVersionGTE(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *TrailerQueryBuilder) WhereVersionLT(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *TrailerQueryBuilder) WhereVersionLTE(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *TrailerQueryBuilder) WhereVersionIn(v []int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereVersionNotIn(v []int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *TrailerQueryBuilder) WhereCreatedAtEQ(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *TrailerQueryBuilder) WhereCreatedAtNEQ(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *TrailerQueryBuilder) WhereCreatedAtGT(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *TrailerQueryBuilder) WhereCreatedAtGTE(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *TrailerQueryBuilder) WhereCreatedAtLT(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *TrailerQueryBuilder) WhereCreatedAtLTE(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *TrailerQueryBuilder) WhereCreatedAtIn(v []int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereCreatedAtNotIn(v []int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *TrailerQueryBuilder) WhereUpdatedAtEQ(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *TrailerQueryBuilder) WhereUpdatedAtNEQ(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *TrailerQueryBuilder) WhereUpdatedAtGT(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *TrailerQueryBuilder) WhereUpdatedAtGTE(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *TrailerQueryBuilder) WhereUpdatedAtLT(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *TrailerQueryBuilder) WhereUpdatedAtLTE(v int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *TrailerQueryBuilder) WhereUpdatedAtIn(v []int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *TrailerQueryBuilder) WhereUpdatedAtNotIn(v []int64) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *TrailerQueryBuilder) WhereTenant(orgID, buID pulid.ID) *TrailerQueryBuilder {
	b.query = TrailerQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *TrailerQueryBuilder) WhereGroup(sep string, fn func(*TrailerQueryBuilder) *TrailerQueryBuilder) *TrailerQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &TrailerQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *TrailerQueryBuilder) Where(query string, args ...interface{}) *TrailerQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *TrailerQueryBuilder) OrderBy(column string, desc ...bool) *TrailerQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(TrailerQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *TrailerQueryBuilder) Limit(n int) *TrailerQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *TrailerQueryBuilder) Offset(n int) *TrailerQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *TrailerQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *TrailerQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *TrailerQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *TrailerQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *TrailerQueryBuilder) All(ctx context.Context) ([]*Trailer, error) {
	var entities []*Trailer
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *TrailerQueryBuilder) AllWithCount(ctx context.Context) ([]*Trailer, int, error) {
	var entities []*Trailer
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *TrailerQueryBuilder) One(ctx context.Context) (*Trailer, error) {
	entity := new(Trailer)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *TrailerQueryBuilder) First(ctx context.Context) (*Trailer, error) {
	entity := new(Trailer)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// TrailerBuild creates a chainable query builder
func TrailerBuild(db bun.IDB) *TrailerQueryBuilder {
	return NewTrailerQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *TrailerQueryBuilder) LoadBusinessUnit() *TrailerQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *TrailerQueryBuilder) LoadOrganization() *TrailerQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadEquipmentType loads the EquipmentType relationship
func (b *TrailerQueryBuilder) LoadEquipmentType() *TrailerQueryBuilder {
	b.query = b.query.Relation("EquipmentType")
	return b
}

// LoadEquipmentManufacturer loads the EquipmentManufacturer relationship
func (b *TrailerQueryBuilder) LoadEquipmentManufacturer() *TrailerQueryBuilder {
	b.query = b.query.Relation("EquipmentManufacturer")
	return b
}

// LoadRegistrationState loads the RegistrationState relationship
func (b *TrailerQueryBuilder) LoadRegistrationState() *TrailerQueryBuilder {
	b.query = b.query.Relation("RegistrationState")
	return b
}

// LoadFleetCode loads the FleetCode relationship
func (b *TrailerQueryBuilder) LoadFleetCode() *TrailerQueryBuilder {
	b.query = b.query.Relation("FleetCode")
	return b
}

// LoadAllRelations loads all relationships for Trailer
func (b *TrailerQueryBuilder) LoadAllRelations() *TrailerQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadEquipmentType()
	b.LoadEquipmentManufacturer()
	b.LoadRegistrationState()
	b.LoadFleetCode()
	return b
}
