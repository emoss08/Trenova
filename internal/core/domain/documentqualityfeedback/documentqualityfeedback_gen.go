// Code generated by gen-trenova. DO NOT EDIT.

package documentqualityfeedback

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// documentQualityFeedbackFieldConfig provides field configuration for DocumentQualityFeedback
type documentQualityFeedbackFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// DocumentQualityFeedbackQuery provides type-safe query helpers and constants
var DocumentQualityFeedbackQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID              string
		OrganizationID  string
		BusinessUnitID  string
		UserID          string
		DocumentURL     string
		FeedbackType    string
		Comment         string
		QualityScore    string
		ConfidenceScore string
		Sharpness       string
		TextDensity     string
		UsedForTraining string
		TrainedAt       string
		WordCount       string
		Version         string
		CreatedAt       string
		UpdatedAt       string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DocumentURLEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DocumentURLNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DocumentURLGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FeedbackTypeEQ       func(q *bun.SelectQuery, v FeedbackType) *bun.SelectQuery
		FeedbackTypeNEQ      func(q *bun.SelectQuery, v FeedbackType) *bun.SelectQuery
		FeedbackTypeIn       func(q *bun.SelectQuery, v []FeedbackType) *bun.SelectQuery
		FeedbackTypeNotIn    func(q *bun.SelectQuery, v []FeedbackType) *bun.SelectQuery
		CommentEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QualityScoreEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreNEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		QualityScoreNotIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		QualityScoreGT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreGTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreLT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreLTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreEQ    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreNEQ   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		ConfidenceScoreNotIn func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		ConfidenceScoreGT    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreGTE   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreLT    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreLTE   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessEQ          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessNEQ         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessIn          func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		SharpnessNotIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		SharpnessGT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessGTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessLT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessLTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityNEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityIn        func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		TextDensityNotIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		TextDensityGT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityGTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityLT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityLTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		UsedForTrainingEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		UsedForTrainingNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		UsedForTrainingIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		UsedForTrainingNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrainedAtEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		TrainedAtNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		TrainedAtIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		TrainedAtNotIn       func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		TrainedAtIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		TrainedAtIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		WordCountEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		WordCountNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		WordCountGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]documentQualityFeedbackFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		Organization string
		BusinessUnit string
		User         string
	}
}{
	// Table and alias constants
	Table:    "document_quality_feedback",
	Alias:    "dqf",
	IDPrefix: "dqf_",

	// Field names
	Field: struct {
		ID              string
		OrganizationID  string
		BusinessUnitID  string
		UserID          string
		DocumentURL     string
		FeedbackType    string
		Comment         string
		QualityScore    string
		ConfidenceScore string
		Sharpness       string
		TextDensity     string
		UsedForTraining string
		TrainedAt       string
		WordCount       string
		Version         string
		CreatedAt       string
		UpdatedAt       string
	}{
		ID:              "id",
		OrganizationID:  "organization_id",
		BusinessUnitID:  "business_unit_id",
		UserID:          "user_id",
		DocumentURL:     "document_url",
		FeedbackType:    "feedback_type",
		Comment:         "comment",
		QualityScore:    "quality_score",
		ConfidenceScore: "confidence_score",
		Sharpness:       "sharpness",
		TextDensity:     "text_density",
		UsedForTraining: "used_for_training",
		TrainedAt:       "trained_at",
		WordCount:       "word_count",
		Version:         "version",
		CreatedAt:       "created_at",
		UpdatedAt:       "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "dqf." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "dqf." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DocumentURLEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DocumentURLNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DocumentURLGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DocumentURLHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FeedbackTypeEQ       func(q *bun.SelectQuery, v FeedbackType) *bun.SelectQuery
		FeedbackTypeNEQ      func(q *bun.SelectQuery, v FeedbackType) *bun.SelectQuery
		FeedbackTypeIn       func(q *bun.SelectQuery, v []FeedbackType) *bun.SelectQuery
		FeedbackTypeNotIn    func(q *bun.SelectQuery, v []FeedbackType) *bun.SelectQuery
		CommentEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QualityScoreEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreNEQ      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		QualityScoreNotIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		QualityScoreGT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreGTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreLT       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		QualityScoreLTE      func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreEQ    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreNEQ   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreIn    func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		ConfidenceScoreNotIn func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		ConfidenceScoreGT    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreGTE   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreLT    func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		ConfidenceScoreLTE   func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessEQ          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessNEQ         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessIn          func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		SharpnessNotIn       func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		SharpnessGT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessGTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessLT          func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		SharpnessLTE         func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityEQ        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityNEQ       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityIn        func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		TextDensityNotIn     func(q *bun.SelectQuery, v []float64) *bun.SelectQuery
		TextDensityGT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityGTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityLT        func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		TextDensityLTE       func(q *bun.SelectQuery, v float64) *bun.SelectQuery
		UsedForTrainingEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		UsedForTrainingNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		UsedForTrainingIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		UsedForTrainingNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		TrainedAtEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		TrainedAtNEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		TrainedAtIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		TrainedAtNotIn       func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		TrainedAtIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		TrainedAtIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		WordCountEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		WordCountNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		WordCountGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		WordCountLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant               func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.organization_id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.business_unit_id"), bun.In(v))
		},
		UserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.user_id"), v)
		},
		UserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.user_id"), v)
		},
		UserIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.user_id"), bun.In(v))
		},
		UserIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.user_id"), bun.In(v))
		},
		DocumentURLEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.document_url"), v)
		},
		DocumentURLNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.document_url"), v)
		},
		DocumentURLIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.document_url"), bun.In(v))
		},
		DocumentURLNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.document_url"), bun.In(v))
		},
		DocumentURLGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.document_url"), v)
		},
		DocumentURLGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.document_url"), v)
		},
		DocumentURLLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.document_url"), v)
		},
		DocumentURLLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.document_url"), v)
		},
		DocumentURLContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dqf.document_url"), "%"+v+"%")
		},
		DocumentURLHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dqf.document_url"), v+"%")
		},
		DocumentURLHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dqf.document_url"), "%"+v)
		},
		FeedbackTypeEQ: func(q *bun.SelectQuery, v FeedbackType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.feedback_type"), v)
		},
		FeedbackTypeNEQ: func(q *bun.SelectQuery, v FeedbackType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.feedback_type"), v)
		},
		FeedbackTypeIn: func(q *bun.SelectQuery, v []FeedbackType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.feedback_type"), bun.In(v))
		},
		FeedbackTypeNotIn: func(q *bun.SelectQuery, v []FeedbackType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.feedback_type"), bun.In(v))
		},
		CommentEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.comment"), v)
		},
		CommentNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.comment"), v)
		},
		CommentIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.comment"), bun.In(v))
		},
		CommentNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.comment"), bun.In(v))
		},
		CommentGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.comment"), v)
		},
		CommentGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.comment"), v)
		},
		CommentLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.comment"), v)
		},
		CommentLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.comment"), v)
		},
		CommentContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dqf.comment"), "%"+v+"%")
		},
		CommentHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dqf.comment"), v+"%")
		},
		CommentHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("dqf.comment"), "%"+v)
		},
		QualityScoreEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.quality_score"), v)
		},
		QualityScoreNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.quality_score"), v)
		},
		QualityScoreIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.quality_score"), bun.In(v))
		},
		QualityScoreNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.quality_score"), bun.In(v))
		},
		QualityScoreGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.quality_score"), v)
		},
		QualityScoreGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.quality_score"), v)
		},
		QualityScoreLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.quality_score"), v)
		},
		QualityScoreLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.quality_score"), v)
		},
		ConfidenceScoreEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.confidence_score"), v)
		},
		ConfidenceScoreNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.confidence_score"), v)
		},
		ConfidenceScoreIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.confidence_score"), bun.In(v))
		},
		ConfidenceScoreNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.confidence_score"), bun.In(v))
		},
		ConfidenceScoreGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.confidence_score"), v)
		},
		ConfidenceScoreGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.confidence_score"), v)
		},
		ConfidenceScoreLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.confidence_score"), v)
		},
		ConfidenceScoreLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.confidence_score"), v)
		},
		SharpnessEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.sharpness"), v)
		},
		SharpnessNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.sharpness"), v)
		},
		SharpnessIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.sharpness"), bun.In(v))
		},
		SharpnessNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.sharpness"), bun.In(v))
		},
		SharpnessGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.sharpness"), v)
		},
		SharpnessGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.sharpness"), v)
		},
		SharpnessLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.sharpness"), v)
		},
		SharpnessLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.sharpness"), v)
		},
		TextDensityEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.text_density"), v)
		},
		TextDensityNEQ: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.text_density"), v)
		},
		TextDensityIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.text_density"), bun.In(v))
		},
		TextDensityNotIn: func(q *bun.SelectQuery, v []float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.text_density"), bun.In(v))
		},
		TextDensityGT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.text_density"), v)
		},
		TextDensityGTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.text_density"), v)
		},
		TextDensityLT: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.text_density"), v)
		},
		TextDensityLTE: func(q *bun.SelectQuery, v float64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.text_density"), v)
		},
		UsedForTrainingEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.used_for_training"), v)
		},
		UsedForTrainingNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.used_for_training"), v)
		},
		UsedForTrainingIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.used_for_training"), bun.In(v))
		},
		UsedForTrainingNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.used_for_training"), bun.In(v))
		},
		TrainedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.trained_at"), v)
		},
		TrainedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.trained_at"), v)
		},
		TrainedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.trained_at"), bun.In(v))
		},
		TrainedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.trained_at"), bun.In(v))
		},
		TrainedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("dqf.trained_at"))
		},
		TrainedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("dqf.trained_at"))
		},
		WordCountEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.word_count"), v)
		},
		WordCountNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.word_count"), v)
		},
		WordCountIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.word_count"), bun.In(v))
		},
		WordCountNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.word_count"), bun.In(v))
		},
		WordCountGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.word_count"), v)
		},
		WordCountGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.word_count"), v)
		},
		WordCountLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.word_count"), v)
		},
		WordCountLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.word_count"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("dqf.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("dqf.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("dqf.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("dqf.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("dqf.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("dqf.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("dqf.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("dqf.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("dqf.organization_id"), orgID).
				Where("? = ?", bun.Ident("dqf.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("dqf.id"), id).
				Where("? = ?", bun.Ident("dqf.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "dqf." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"dqf.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "dqf.created_at DESC"
			}
			return "dqf.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "dqf.updated_at DESC"
			}
			return "dqf.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]documentQualityFeedbackFieldConfig {
		return map[string]documentQualityFeedbackFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dqf.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dqf.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dqf.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "dqf.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"document_url": {
				Name:       "document_url",
				Column:     "dqf.document_url",
				Sortable:   false,
				Filterable: false,
			},
			"feedback_type": {
				Name:       "feedback_type",
				Column:     "dqf.feedback_type",
				Sortable:   false,
				Filterable: false,
			},
			"comment": {
				Name:       "comment",
				Column:     "dqf.comment",
				Sortable:   false,
				Filterable: false,
			},
			"quality_score": {
				Name:       "quality_score",
				Column:     "dqf.quality_score",
				Sortable:   false,
				Filterable: false,
			},
			"confidence_score": {
				Name:       "confidence_score",
				Column:     "dqf.confidence_score",
				Sortable:   false,
				Filterable: false,
			},
			"sharpness": {
				Name:       "sharpness",
				Column:     "dqf.sharpness",
				Sortable:   false,
				Filterable: false,
			},
			"text_density": {
				Name:       "text_density",
				Column:     "dqf.text_density",
				Sortable:   false,
				Filterable: false,
			},
			"used_for_training": {
				Name:       "used_for_training",
				Column:     "dqf.used_for_training",
				Sortable:   false,
				Filterable: false,
			},
			"trained_at": {
				Name:       "trained_at",
				Column:     "dqf.trained_at",
				Sortable:   false,
				Filterable: false,
			},
			"word_count": {
				Name:       "word_count",
				Column:     "dqf.word_count",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dqf.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dqf.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dqf.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]documentQualityFeedbackFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dqf.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dqf.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dqf.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "dqf.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"document_url": {
				Name:       "document_url",
				Column:     "dqf.document_url",
				Sortable:   false,
				Filterable: false,
			},
			"feedback_type": {
				Name:       "feedback_type",
				Column:     "dqf.feedback_type",
				Sortable:   false,
				Filterable: false,
			},
			"comment": {
				Name:       "comment",
				Column:     "dqf.comment",
				Sortable:   false,
				Filterable: false,
			},
			"quality_score": {
				Name:       "quality_score",
				Column:     "dqf.quality_score",
				Sortable:   false,
				Filterable: false,
			},
			"confidence_score": {
				Name:       "confidence_score",
				Column:     "dqf.confidence_score",
				Sortable:   false,
				Filterable: false,
			},
			"sharpness": {
				Name:       "sharpness",
				Column:     "dqf.sharpness",
				Sortable:   false,
				Filterable: false,
			},
			"text_density": {
				Name:       "text_density",
				Column:     "dqf.text_density",
				Sortable:   false,
				Filterable: false,
			},
			"used_for_training": {
				Name:       "used_for_training",
				Column:     "dqf.used_for_training",
				Sortable:   false,
				Filterable: false,
			},
			"trained_at": {
				Name:       "trained_at",
				Column:     "dqf.trained_at",
				Sortable:   false,
				Filterable: false,
			},
			"word_count": {
				Name:       "word_count",
				Column:     "dqf.word_count",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dqf.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dqf.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dqf.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]documentQualityFeedbackFieldConfig{
			"id": {
				Name:       "id",
				Column:     "dqf.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "dqf.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "dqf.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "dqf.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"document_url": {
				Name:       "document_url",
				Column:     "dqf.document_url",
				Sortable:   false,
				Filterable: false,
			},
			"feedback_type": {
				Name:       "feedback_type",
				Column:     "dqf.feedback_type",
				Sortable:   false,
				Filterable: false,
			},
			"comment": {
				Name:       "comment",
				Column:     "dqf.comment",
				Sortable:   false,
				Filterable: false,
			},
			"quality_score": {
				Name:       "quality_score",
				Column:     "dqf.quality_score",
				Sortable:   false,
				Filterable: false,
			},
			"confidence_score": {
				Name:       "confidence_score",
				Column:     "dqf.confidence_score",
				Sortable:   false,
				Filterable: false,
			},
			"sharpness": {
				Name:       "sharpness",
				Column:     "dqf.sharpness",
				Sortable:   false,
				Filterable: false,
			},
			"text_density": {
				Name:       "text_density",
				Column:     "dqf.text_density",
				Sortable:   false,
				Filterable: false,
			},
			"used_for_training": {
				Name:       "used_for_training",
				Column:     "dqf.used_for_training",
				Sortable:   false,
				Filterable: false,
			},
			"trained_at": {
				Name:       "trained_at",
				Column:     "dqf.trained_at",
				Sortable:   false,
				Filterable: false,
			},
			"word_count": {
				Name:       "word_count",
				Column:     "dqf.word_count",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "dqf.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "dqf.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "dqf.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		Organization string
		BusinessUnit string
		User         string
	}{
		Organization: "Organization",
		BusinessUnit: "BusinessUnit",
		User:         "User",
	},
}

// DocumentQualityFeedbackQueryBuilder provides a fluent interface for building queries
type DocumentQualityFeedbackQueryBuilder struct {
	query *bun.SelectQuery
}

// NewDocumentQualityFeedbackQuery creates a new query builder
func NewDocumentQualityFeedbackQuery(db bun.IDB) *DocumentQualityFeedbackQueryBuilder {
	return &DocumentQualityFeedbackQueryBuilder{
		query: db.NewSelect().Model((*DocumentQualityFeedback)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func DocumentQualityFeedbackFromQuery(q *bun.SelectQuery) *DocumentQualityFeedbackQueryBuilder {
	return &DocumentQualityFeedbackQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *DocumentQualityFeedbackQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *DocumentQualityFeedbackQueryBuilder) Model(model interface{}) *DocumentQualityFeedbackQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereIDEQ(v pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereIDNEQ(v pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereIDIn(v []pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereIDNotIn(v []pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereUserIDEQ adds a WHERE user_id = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUserIDEQ(v pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UserIDEQ(b.query, v)
	return b
}

// WhereUserIDNEQ adds a WHERE user_id != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUserIDNEQ(v pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UserIDNEQ(b.query, v)
	return b
}

// WhereUserIDIn adds a WHERE user_id IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUserIDIn(v []pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UserIDIn(b.query, v)
	return b
}

// WhereUserIDNotIn adds a WHERE user_id NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUserIDNotIn(v []pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UserIDNotIn(b.query, v)
	return b
}

// WhereDocumentURLEQ adds a WHERE document_url = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereDocumentURLEQ(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.DocumentURLEQ(b.query, v)
	return b
}

// WhereDocumentURLNEQ adds a WHERE document_url != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereDocumentURLNEQ(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.DocumentURLNEQ(b.query, v)
	return b
}

// WhereDocumentURLIn adds a WHERE document_url IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereDocumentURLIn(v []string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.DocumentURLIn(b.query, v)
	return b
}

// WhereDocumentURLNotIn adds a WHERE document_url NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereDocumentURLNotIn(v []string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.DocumentURLNotIn(b.query, v)
	return b
}

// WhereDocumentURLContains adds a WHERE document_url LIKE ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereDocumentURLContains(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.DocumentURLContains(b.query, v)
	return b
}

// WhereDocumentURLHasPrefix adds a WHERE document_url LIKE ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereDocumentURLHasPrefix(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.DocumentURLHasPrefix(b.query, v)
	return b
}

// WhereDocumentURLHasSuffix adds a WHERE document_url LIKE ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereDocumentURLHasSuffix(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.DocumentURLHasSuffix(b.query, v)
	return b
}

// WhereFeedbackTypeEQ adds a WHERE feedback_type = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereFeedbackTypeEQ(v FeedbackType) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.FeedbackTypeEQ(b.query, v)
	return b
}

// WhereFeedbackTypeNEQ adds a WHERE feedback_type != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereFeedbackTypeNEQ(v FeedbackType) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.FeedbackTypeNEQ(b.query, v)
	return b
}

// WhereFeedbackTypeIn adds a WHERE feedback_type IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereFeedbackTypeIn(v []FeedbackType) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.FeedbackTypeIn(b.query, v)
	return b
}

// WhereFeedbackTypeNotIn adds a WHERE feedback_type NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereFeedbackTypeNotIn(v []FeedbackType) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.FeedbackTypeNotIn(b.query, v)
	return b
}

// WhereCommentEQ adds a WHERE comment = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCommentEQ(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CommentEQ(b.query, v)
	return b
}

// WhereCommentNEQ adds a WHERE comment != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCommentNEQ(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CommentNEQ(b.query, v)
	return b
}

// WhereCommentIn adds a WHERE comment IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCommentIn(v []string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CommentIn(b.query, v)
	return b
}

// WhereCommentNotIn adds a WHERE comment NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCommentNotIn(v []string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CommentNotIn(b.query, v)
	return b
}

// WhereCommentContains adds a WHERE comment LIKE ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCommentContains(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CommentContains(b.query, v)
	return b
}

// WhereCommentHasPrefix adds a WHERE comment LIKE ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCommentHasPrefix(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CommentHasPrefix(b.query, v)
	return b
}

// WhereCommentHasSuffix adds a WHERE comment LIKE ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCommentHasSuffix(v string) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CommentHasSuffix(b.query, v)
	return b
}

// WhereQualityScoreEQ adds a WHERE quality_score = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereQualityScoreEQ(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.QualityScoreEQ(b.query, v)
	return b
}

// WhereQualityScoreNEQ adds a WHERE quality_score != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereQualityScoreNEQ(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.QualityScoreNEQ(b.query, v)
	return b
}

// WhereQualityScoreGT adds a WHERE quality_score > ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereQualityScoreGT(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.QualityScoreGT(b.query, v)
	return b
}

// WhereQualityScoreGTE adds a WHERE quality_score >= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereQualityScoreGTE(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.QualityScoreGTE(b.query, v)
	return b
}

// WhereQualityScoreLT adds a WHERE quality_score < ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereQualityScoreLT(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.QualityScoreLT(b.query, v)
	return b
}

// WhereQualityScoreLTE adds a WHERE quality_score <= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereQualityScoreLTE(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.QualityScoreLTE(b.query, v)
	return b
}

// WhereQualityScoreIn adds a WHERE quality_score IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereQualityScoreIn(v []float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.QualityScoreIn(b.query, v)
	return b
}

// WhereQualityScoreNotIn adds a WHERE quality_score NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereQualityScoreNotIn(v []float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.QualityScoreNotIn(b.query, v)
	return b
}

// WhereConfidenceScoreEQ adds a WHERE confidence_score = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereConfidenceScoreEQ(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.ConfidenceScoreEQ(b.query, v)
	return b
}

// WhereConfidenceScoreNEQ adds a WHERE confidence_score != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereConfidenceScoreNEQ(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.ConfidenceScoreNEQ(b.query, v)
	return b
}

// WhereConfidenceScoreGT adds a WHERE confidence_score > ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereConfidenceScoreGT(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.ConfidenceScoreGT(b.query, v)
	return b
}

// WhereConfidenceScoreGTE adds a WHERE confidence_score >= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereConfidenceScoreGTE(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.ConfidenceScoreGTE(b.query, v)
	return b
}

// WhereConfidenceScoreLT adds a WHERE confidence_score < ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereConfidenceScoreLT(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.ConfidenceScoreLT(b.query, v)
	return b
}

// WhereConfidenceScoreLTE adds a WHERE confidence_score <= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereConfidenceScoreLTE(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.ConfidenceScoreLTE(b.query, v)
	return b
}

// WhereConfidenceScoreIn adds a WHERE confidence_score IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereConfidenceScoreIn(v []float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.ConfidenceScoreIn(b.query, v)
	return b
}

// WhereConfidenceScoreNotIn adds a WHERE confidence_score NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereConfidenceScoreNotIn(v []float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.ConfidenceScoreNotIn(b.query, v)
	return b
}

// WhereSharpnessEQ adds a WHERE sharpness = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereSharpnessEQ(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.SharpnessEQ(b.query, v)
	return b
}

// WhereSharpnessNEQ adds a WHERE sharpness != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereSharpnessNEQ(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.SharpnessNEQ(b.query, v)
	return b
}

// WhereSharpnessGT adds a WHERE sharpness > ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereSharpnessGT(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.SharpnessGT(b.query, v)
	return b
}

// WhereSharpnessGTE adds a WHERE sharpness >= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereSharpnessGTE(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.SharpnessGTE(b.query, v)
	return b
}

// WhereSharpnessLT adds a WHERE sharpness < ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereSharpnessLT(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.SharpnessLT(b.query, v)
	return b
}

// WhereSharpnessLTE adds a WHERE sharpness <= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereSharpnessLTE(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.SharpnessLTE(b.query, v)
	return b
}

// WhereSharpnessIn adds a WHERE sharpness IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereSharpnessIn(v []float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.SharpnessIn(b.query, v)
	return b
}

// WhereSharpnessNotIn adds a WHERE sharpness NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereSharpnessNotIn(v []float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.SharpnessNotIn(b.query, v)
	return b
}

// WhereTextDensityEQ adds a WHERE text_density = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTextDensityEQ(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TextDensityEQ(b.query, v)
	return b
}

// WhereTextDensityNEQ adds a WHERE text_density != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTextDensityNEQ(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TextDensityNEQ(b.query, v)
	return b
}

// WhereTextDensityGT adds a WHERE text_density > ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTextDensityGT(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TextDensityGT(b.query, v)
	return b
}

// WhereTextDensityGTE adds a WHERE text_density >= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTextDensityGTE(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TextDensityGTE(b.query, v)
	return b
}

// WhereTextDensityLT adds a WHERE text_density < ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTextDensityLT(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TextDensityLT(b.query, v)
	return b
}

// WhereTextDensityLTE adds a WHERE text_density <= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTextDensityLTE(v float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TextDensityLTE(b.query, v)
	return b
}

// WhereTextDensityIn adds a WHERE text_density IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTextDensityIn(v []float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TextDensityIn(b.query, v)
	return b
}

// WhereTextDensityNotIn adds a WHERE text_density NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTextDensityNotIn(v []float64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TextDensityNotIn(b.query, v)
	return b
}

// WhereUsedForTrainingEQ adds a WHERE used_for_training = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUsedForTrainingEQ(v bool) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UsedForTrainingEQ(b.query, v)
	return b
}

// WhereUsedForTrainingNEQ adds a WHERE used_for_training != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUsedForTrainingNEQ(v bool) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UsedForTrainingNEQ(b.query, v)
	return b
}

// WhereUsedForTrainingIn adds a WHERE used_for_training IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUsedForTrainingIn(v []bool) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UsedForTrainingIn(b.query, v)
	return b
}

// WhereUsedForTrainingNotIn adds a WHERE used_for_training NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUsedForTrainingNotIn(v []bool) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UsedForTrainingNotIn(b.query, v)
	return b
}

// WhereTrainedAtEQ adds a WHERE trained_at = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTrainedAtEQ(v *int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TrainedAtEQ(b.query, v)
	return b
}

// WhereTrainedAtNEQ adds a WHERE trained_at != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTrainedAtNEQ(v *int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TrainedAtNEQ(b.query, v)
	return b
}

// WhereTrainedAtIn adds a WHERE trained_at IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTrainedAtIn(v []*int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TrainedAtIn(b.query, v)
	return b
}

// WhereTrainedAtNotIn adds a WHERE trained_at NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereTrainedAtNotIn(v []*int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.TrainedAtNotIn(b.query, v)
	return b
}

// WhereWordCountEQ adds a WHERE word_count = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereWordCountEQ(v int) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.WordCountEQ(b.query, v)
	return b
}

// WhereWordCountNEQ adds a WHERE word_count != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereWordCountNEQ(v int) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.WordCountNEQ(b.query, v)
	return b
}

// WhereWordCountGT adds a WHERE word_count > ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereWordCountGT(v int) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.WordCountGT(b.query, v)
	return b
}

// WhereWordCountGTE adds a WHERE word_count >= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereWordCountGTE(v int) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.WordCountGTE(b.query, v)
	return b
}

// WhereWordCountLT adds a WHERE word_count < ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereWordCountLT(v int) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.WordCountLT(b.query, v)
	return b
}

// WhereWordCountLTE adds a WHERE word_count <= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereWordCountLTE(v int) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.WordCountLTE(b.query, v)
	return b
}

// WhereWordCountIn adds a WHERE word_count IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereWordCountIn(v []int) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.WordCountIn(b.query, v)
	return b
}

// WhereWordCountNotIn adds a WHERE word_count NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereWordCountNotIn(v []int) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.WordCountNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereVersionEQ(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereVersionNEQ(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereVersionGT(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereVersionGTE(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereVersionLT(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereVersionLTE(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereVersionIn(v []int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereVersionNotIn(v []int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCreatedAtEQ(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCreatedAtNEQ(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCreatedAtGT(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCreatedAtGTE(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCreatedAtLT(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCreatedAtLTE(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCreatedAtIn(v []int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereCreatedAtNotIn(v []int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUpdatedAtEQ(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUpdatedAtNEQ(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUpdatedAtGT(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUpdatedAtGTE(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUpdatedAtLT(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUpdatedAtLTE(v int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUpdatedAtIn(v []int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *DocumentQualityFeedbackQueryBuilder) WhereUpdatedAtNotIn(v []int64) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *DocumentQualityFeedbackQueryBuilder) WhereTenant(orgID, buID pulid.ID) *DocumentQualityFeedbackQueryBuilder {
	b.query = DocumentQualityFeedbackQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *DocumentQualityFeedbackQueryBuilder) WhereGroup(sep string, fn func(*DocumentQualityFeedbackQueryBuilder) *DocumentQualityFeedbackQueryBuilder) *DocumentQualityFeedbackQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &DocumentQualityFeedbackQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *DocumentQualityFeedbackQueryBuilder) Where(query string, args ...interface{}) *DocumentQualityFeedbackQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *DocumentQualityFeedbackQueryBuilder) OrderBy(column string, desc ...bool) *DocumentQualityFeedbackQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(DocumentQualityFeedbackQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *DocumentQualityFeedbackQueryBuilder) Limit(n int) *DocumentQualityFeedbackQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *DocumentQualityFeedbackQueryBuilder) Offset(n int) *DocumentQualityFeedbackQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *DocumentQualityFeedbackQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *DocumentQualityFeedbackQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *DocumentQualityFeedbackQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *DocumentQualityFeedbackQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *DocumentQualityFeedbackQueryBuilder) All(ctx context.Context) ([]*DocumentQualityFeedback, error) {
	var entities []*DocumentQualityFeedback
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *DocumentQualityFeedbackQueryBuilder) AllWithCount(ctx context.Context) ([]*DocumentQualityFeedback, int, error) {
	var entities []*DocumentQualityFeedback
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *DocumentQualityFeedbackQueryBuilder) One(ctx context.Context) (*DocumentQualityFeedback, error) {
	entity := new(DocumentQualityFeedback)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *DocumentQualityFeedbackQueryBuilder) First(ctx context.Context) (*DocumentQualityFeedback, error) {
	entity := new(DocumentQualityFeedback)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// DocumentQualityFeedbackBuild creates a chainable query builder
func DocumentQualityFeedbackBuild(db bun.IDB) *DocumentQualityFeedbackQueryBuilder {
	return NewDocumentQualityFeedbackQuery(db)
}

// Relationship loading methods

// LoadOrganization loads the Organization relationship
func (b *DocumentQualityFeedbackQueryBuilder) LoadOrganization() *DocumentQualityFeedbackQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *DocumentQualityFeedbackQueryBuilder) LoadBusinessUnit() *DocumentQualityFeedbackQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadUser loads the User relationship
func (b *DocumentQualityFeedbackQueryBuilder) LoadUser() *DocumentQualityFeedbackQueryBuilder {
	b.query = b.query.Relation("User")
	return b
}

// LoadAllRelations loads all relationships for DocumentQualityFeedback
func (b *DocumentQualityFeedbackQueryBuilder) LoadAllRelations() *DocumentQualityFeedbackQueryBuilder {
	b.LoadOrganization()
	b.LoadBusinessUnit()
	b.LoadUser()
	return b
}
