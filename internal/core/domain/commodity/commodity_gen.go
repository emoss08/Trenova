// Code generated by gen-trenova. DO NOT EDIT.

package commodity

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// commodityFieldConfig provides field configuration for Commodity
type commodityFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// CommodityQuery provides type-safe query helpers and constants
var CommodityQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                  string
		BusinessUnitID      string
		OrganizationID      string
		HazardousMaterialID string
		MinTemperature      string
		MaxTemperature      string
		WeightPerUnit       string
		LinearFeetPerUnit   string
		Status              string
		FreightClass        string
		DOTClassification   string
		Name                string
		Description         string
		SearchVector        string
		Rank                string
		Stackable           string
		Fragile             string
		Version             string
		CreatedAt           string
		UpdatedAt           string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		HazardousMaterialIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazardousMaterialIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazardousMaterialIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		HazardousMaterialIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		MinTemperatureEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		MinTemperatureNEQ            func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		MinTemperatureIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		MinTemperatureIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		MaxTemperatureEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		MaxTemperatureNEQ            func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		MaxTemperatureIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		MaxTemperatureIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		WeightPerUnitEQ              func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		WeightPerUnitNEQ             func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		WeightPerUnitIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		WeightPerUnitIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		LinearFeetPerUnitEQ          func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LinearFeetPerUnitNEQ         func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LinearFeetPerUnitIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		LinearFeetPerUnitIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                     func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                    func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		FreightClassEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FreightClassNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FreightClassGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DOTClassificationNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DOTClassificationGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StackableEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		StackableNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		FragileEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		FragileNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]commodityFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "commodities",
	Alias:    "com",
	IDPrefix: "com_",

	// Field names
	Field: struct {
		ID                  string
		BusinessUnitID      string
		OrganizationID      string
		HazardousMaterialID string
		MinTemperature      string
		MaxTemperature      string
		WeightPerUnit       string
		LinearFeetPerUnit   string
		Status              string
		FreightClass        string
		DOTClassification   string
		Name                string
		Description         string
		SearchVector        string
		Rank                string
		Stackable           string
		Fragile             string
		Version             string
		CreatedAt           string
		UpdatedAt           string
	}{
		ID:                  "id",
		BusinessUnitID:      "business_unit_id",
		OrganizationID:      "organization_id",
		HazardousMaterialID: "hazardous_material_id",
		MinTemperature:      "min_temperature",
		MaxTemperature:      "max_temperature",
		WeightPerUnit:       "weight_per_unit",
		LinearFeetPerUnit:   "linear_feet_per_unit",
		Status:              "status",
		FreightClass:        "freight_class",
		DOTClassification:   "dot_classification",
		Name:                "name",
		Description:         "description",
		SearchVector:        "search_vector",
		Rank:                "rank",
		Stackable:           "stackable",
		Fragile:             "fragile",
		Version:             "version",
		CreatedAt:           "created_at",
		UpdatedAt:           "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "com." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "com." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		HazardousMaterialIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazardousMaterialIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazardousMaterialIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		HazardousMaterialIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		MinTemperatureEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		MinTemperatureNEQ            func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		MinTemperatureIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		MinTemperatureIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		MaxTemperatureEQ             func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		MaxTemperatureNEQ            func(q *bun.SelectQuery, v *int16) *bun.SelectQuery
		MaxTemperatureIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		MaxTemperatureIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		WeightPerUnitEQ              func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		WeightPerUnitNEQ             func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		WeightPerUnitIsNull          func(q *bun.SelectQuery) *bun.SelectQuery
		WeightPerUnitIsNotNull       func(q *bun.SelectQuery) *bun.SelectQuery
		LinearFeetPerUnitEQ          func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LinearFeetPerUnitNEQ         func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		LinearFeetPerUnitIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		LinearFeetPerUnitIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                     func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                    func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		FreightClassEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FreightClassNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		FreightClassGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FreightClassHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DOTClassificationNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DOTClassificationGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DOTClassificationHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		StackableEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		StackableNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		FragileEQ                    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		FragileNEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                       func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.organization_id"), v)
		},
		HazardousMaterialIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.hazardous_material_id"), v)
		},
		HazardousMaterialIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.hazardous_material_id"), v)
		},
		HazardousMaterialIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("com.hazardous_material_id"))
		},
		HazardousMaterialIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("com.hazardous_material_id"))
		},
		MinTemperatureEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.min_temperature"), v)
		},
		MinTemperatureNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.min_temperature"), v)
		},
		MinTemperatureIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("com.min_temperature"))
		},
		MinTemperatureIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("com.min_temperature"))
		},
		MaxTemperatureEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.max_temperature"), v)
		},
		MaxTemperatureNEQ: func(q *bun.SelectQuery, v *int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.max_temperature"), v)
		},
		MaxTemperatureIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("com.max_temperature"))
		},
		MaxTemperatureIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("com.max_temperature"))
		},
		WeightPerUnitEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.weight_per_unit"), v)
		},
		WeightPerUnitNEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.weight_per_unit"), v)
		},
		WeightPerUnitIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("com.weight_per_unit"))
		},
		WeightPerUnitIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("com.weight_per_unit"))
		},
		LinearFeetPerUnitEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.linear_feet_per_unit"), v)
		},
		LinearFeetPerUnitNEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.linear_feet_per_unit"), v)
		},
		LinearFeetPerUnitIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("com.linear_feet_per_unit"))
		},
		LinearFeetPerUnitIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("com.linear_feet_per_unit"))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.status"), v)
		},
		FreightClassEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.freight_class"), v)
		},
		FreightClassNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.freight_class"), v)
		},
		FreightClassIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("com.freight_class"), bun.In(v))
		},
		FreightClassNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("com.freight_class"), bun.In(v))
		},
		FreightClassGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("com.freight_class"), v)
		},
		FreightClassGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("com.freight_class"), v)
		},
		FreightClassLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("com.freight_class"), v)
		},
		FreightClassLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("com.freight_class"), v)
		},
		FreightClassContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.freight_class"), "%"+v+"%")
		},
		FreightClassHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.freight_class"), v+"%")
		},
		FreightClassHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.freight_class"), "%"+v)
		},
		DOTClassificationEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.dot_classification"), v)
		},
		DOTClassificationNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.dot_classification"), v)
		},
		DOTClassificationIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("com.dot_classification"), bun.In(v))
		},
		DOTClassificationNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("com.dot_classification"), bun.In(v))
		},
		DOTClassificationGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("com.dot_classification"), v)
		},
		DOTClassificationGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("com.dot_classification"), v)
		},
		DOTClassificationLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("com.dot_classification"), v)
		},
		DOTClassificationLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("com.dot_classification"), v)
		},
		DOTClassificationContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.dot_classification"), "%"+v+"%")
		},
		DOTClassificationHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.dot_classification"), v+"%")
		},
		DOTClassificationHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.dot_classification"), "%"+v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("com.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("com.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("com.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("com.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("com.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("com.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("com.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("com.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("com.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("com.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("com.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("com.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.description"), "%"+v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("com.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("com.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("com.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("com.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("com.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("com.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("com.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("com.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("com.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("com.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("com.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("com.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("com.rank"), "%"+v)
		},
		StackableEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.stackable"), v)
		},
		StackableNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.stackable"), v)
		},
		FragileEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.fragile"), v)
		},
		FragileNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.fragile"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("com.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("com.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("com.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("com.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("com.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("com.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("com.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("com.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("com.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("com.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("com.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("com.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("com.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("com.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("com.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("com.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("com.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("com.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("com.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("com.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("com.organization_id"), orgID).
				Where("? = ?", bun.Ident("com.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("com.id"), id).
				Where("? = ?", bun.Ident("com.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "com." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"com.status ASC",
				"com.name ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "com.status DESC"
			}
			return "com.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "com.created_at DESC"
			}
			return "com.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "com.updated_at DESC"
			}
			return "com.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]commodityFieldConfig {
		return map[string]commodityFieldConfig{
			"id": {
				Name:       "id",
				Column:     "com.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "com.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "com.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"hazardous_material_id": {
				Name:       "hazardous_material_id",
				Column:     "com.hazardous_material_id",
				Sortable:   false,
				Filterable: true,
			},
			"min_temperature": {
				Name:       "min_temperature",
				Column:     "com.min_temperature",
				Sortable:   false,
				Filterable: false,
			},
			"max_temperature": {
				Name:       "max_temperature",
				Column:     "com.max_temperature",
				Sortable:   false,
				Filterable: false,
			},
			"weight_per_unit": {
				Name:       "weight_per_unit",
				Column:     "com.weight_per_unit",
				Sortable:   false,
				Filterable: false,
			},
			"linear_feet_per_unit": {
				Name:       "linear_feet_per_unit",
				Column:     "com.linear_feet_per_unit",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "com.status",
				Sortable:   true,
				Filterable: true,
			},
			"freight_class": {
				Name:       "freight_class",
				Column:     "com.freight_class",
				Sortable:   false,
				Filterable: true,
			},
			"dot_classification": {
				Name:       "dot_classification",
				Column:     "com.dot_classification",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "com.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "com.description",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "com.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "com.rank",
				Sortable:   false,
				Filterable: true,
			},
			"stackable": {
				Name:       "stackable",
				Column:     "com.stackable",
				Sortable:   false,
				Filterable: false,
			},
			"fragile": {
				Name:       "fragile",
				Column:     "com.fragile",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "com.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "com.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "com.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]commodityFieldConfig{
			"id": {
				Name:       "id",
				Column:     "com.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "com.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "com.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"hazardous_material_id": {
				Name:       "hazardous_material_id",
				Column:     "com.hazardous_material_id",
				Sortable:   false,
				Filterable: true,
			},
			"min_temperature": {
				Name:       "min_temperature",
				Column:     "com.min_temperature",
				Sortable:   false,
				Filterable: false,
			},
			"max_temperature": {
				Name:       "max_temperature",
				Column:     "com.max_temperature",
				Sortable:   false,
				Filterable: false,
			},
			"weight_per_unit": {
				Name:       "weight_per_unit",
				Column:     "com.weight_per_unit",
				Sortable:   false,
				Filterable: false,
			},
			"linear_feet_per_unit": {
				Name:       "linear_feet_per_unit",
				Column:     "com.linear_feet_per_unit",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "com.status",
				Sortable:   true,
				Filterable: true,
			},
			"freight_class": {
				Name:       "freight_class",
				Column:     "com.freight_class",
				Sortable:   false,
				Filterable: true,
			},
			"dot_classification": {
				Name:       "dot_classification",
				Column:     "com.dot_classification",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "com.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "com.description",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "com.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "com.rank",
				Sortable:   false,
				Filterable: true,
			},
			"stackable": {
				Name:       "stackable",
				Column:     "com.stackable",
				Sortable:   false,
				Filterable: false,
			},
			"fragile": {
				Name:       "fragile",
				Column:     "com.fragile",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "com.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "com.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "com.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]commodityFieldConfig{
			"id": {
				Name:       "id",
				Column:     "com.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "com.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "com.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"hazardous_material_id": {
				Name:       "hazardous_material_id",
				Column:     "com.hazardous_material_id",
				Sortable:   false,
				Filterable: true,
			},
			"min_temperature": {
				Name:       "min_temperature",
				Column:     "com.min_temperature",
				Sortable:   false,
				Filterable: false,
			},
			"max_temperature": {
				Name:       "max_temperature",
				Column:     "com.max_temperature",
				Sortable:   false,
				Filterable: false,
			},
			"weight_per_unit": {
				Name:       "weight_per_unit",
				Column:     "com.weight_per_unit",
				Sortable:   false,
				Filterable: false,
			},
			"linear_feet_per_unit": {
				Name:       "linear_feet_per_unit",
				Column:     "com.linear_feet_per_unit",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "com.status",
				Sortable:   true,
				Filterable: true,
			},
			"freight_class": {
				Name:       "freight_class",
				Column:     "com.freight_class",
				Sortable:   false,
				Filterable: true,
			},
			"dot_classification": {
				Name:       "dot_classification",
				Column:     "com.dot_classification",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "com.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "com.description",
				Sortable:   false,
				Filterable: false,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "com.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "com.rank",
				Sortable:   false,
				Filterable: true,
			},
			"stackable": {
				Name:       "stackable",
				Column:     "com.stackable",
				Sortable:   false,
				Filterable: false,
			},
			"fragile": {
				Name:       "fragile",
				Column:     "com.fragile",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "com.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "com.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "com.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// CommodityQueryBuilder provides a fluent interface for building queries
type CommodityQueryBuilder struct {
	query *bun.SelectQuery
}

// NewCommodityQuery creates a new query builder
func NewCommodityQuery(db bun.IDB) *CommodityQueryBuilder {
	return &CommodityQueryBuilder{
		query: db.NewSelect().Model((*Commodity)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func CommodityFromQuery(q *bun.SelectQuery) *CommodityQueryBuilder {
	return &CommodityQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *CommodityQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *CommodityQueryBuilder) Model(model interface{}) *CommodityQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *CommodityQueryBuilder) WhereIDEQ(v pulid.ID) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *CommodityQueryBuilder) WhereIDNEQ(v pulid.ID) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *CommodityQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *CommodityQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *CommodityQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *CommodityQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereHazardousMaterialIDEQ adds a WHERE hazardous_material_id = ? condition
func (b *CommodityQueryBuilder) WhereHazardousMaterialIDEQ(v *pulid.ID) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.HazardousMaterialIDEQ(b.query, v)
	return b
}

// WhereHazardousMaterialIDNEQ adds a WHERE hazardous_material_id != ? condition
func (b *CommodityQueryBuilder) WhereHazardousMaterialIDNEQ(v *pulid.ID) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.HazardousMaterialIDNEQ(b.query, v)
	return b
}

// WhereMinTemperatureEQ adds a WHERE min_temperature = ? condition
func (b *CommodityQueryBuilder) WhereMinTemperatureEQ(v *int16) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.MinTemperatureEQ(b.query, v)
	return b
}

// WhereMinTemperatureNEQ adds a WHERE min_temperature != ? condition
func (b *CommodityQueryBuilder) WhereMinTemperatureNEQ(v *int16) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.MinTemperatureNEQ(b.query, v)
	return b
}

// WhereMaxTemperatureEQ adds a WHERE max_temperature = ? condition
func (b *CommodityQueryBuilder) WhereMaxTemperatureEQ(v *int16) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.MaxTemperatureEQ(b.query, v)
	return b
}

// WhereMaxTemperatureNEQ adds a WHERE max_temperature != ? condition
func (b *CommodityQueryBuilder) WhereMaxTemperatureNEQ(v *int16) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.MaxTemperatureNEQ(b.query, v)
	return b
}

// WhereWeightPerUnitEQ adds a WHERE weight_per_unit = ? condition
func (b *CommodityQueryBuilder) WhereWeightPerUnitEQ(v *float64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.WeightPerUnitEQ(b.query, v)
	return b
}

// WhereWeightPerUnitNEQ adds a WHERE weight_per_unit != ? condition
func (b *CommodityQueryBuilder) WhereWeightPerUnitNEQ(v *float64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.WeightPerUnitNEQ(b.query, v)
	return b
}

// WhereLinearFeetPerUnitEQ adds a WHERE linear_feet_per_unit = ? condition
func (b *CommodityQueryBuilder) WhereLinearFeetPerUnitEQ(v *float64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.LinearFeetPerUnitEQ(b.query, v)
	return b
}

// WhereLinearFeetPerUnitNEQ adds a WHERE linear_feet_per_unit != ? condition
func (b *CommodityQueryBuilder) WhereLinearFeetPerUnitNEQ(v *float64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.LinearFeetPerUnitNEQ(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *CommodityQueryBuilder) WhereStatusEQ(v domain.Status) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *CommodityQueryBuilder) WhereStatusNEQ(v domain.Status) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereFreightClassEQ adds a WHERE freight_class = ? condition
func (b *CommodityQueryBuilder) WhereFreightClassEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.FreightClassEQ(b.query, v)
	return b
}

// WhereFreightClassNEQ adds a WHERE freight_class != ? condition
func (b *CommodityQueryBuilder) WhereFreightClassNEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.FreightClassNEQ(b.query, v)
	return b
}

// WhereFreightClassIn adds a WHERE freight_class IN (?) condition
func (b *CommodityQueryBuilder) WhereFreightClassIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.FreightClassIn(b.query, v)
	return b
}

// WhereFreightClassNotIn adds a WHERE freight_class NOT IN (?) condition
func (b *CommodityQueryBuilder) WhereFreightClassNotIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.FreightClassNotIn(b.query, v)
	return b
}

// WhereFreightClassContains adds a WHERE freight_class LIKE ? condition
func (b *CommodityQueryBuilder) WhereFreightClassContains(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.FreightClassContains(b.query, v)
	return b
}

// WhereFreightClassHasPrefix adds a WHERE freight_class LIKE ? condition
func (b *CommodityQueryBuilder) WhereFreightClassHasPrefix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.FreightClassHasPrefix(b.query, v)
	return b
}

// WhereFreightClassHasSuffix adds a WHERE freight_class LIKE ? condition
func (b *CommodityQueryBuilder) WhereFreightClassHasSuffix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.FreightClassHasSuffix(b.query, v)
	return b
}

// WhereDOTClassificationEQ adds a WHERE dot_classification = ? condition
func (b *CommodityQueryBuilder) WhereDOTClassificationEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DOTClassificationEQ(b.query, v)
	return b
}

// WhereDOTClassificationNEQ adds a WHERE dot_classification != ? condition
func (b *CommodityQueryBuilder) WhereDOTClassificationNEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DOTClassificationNEQ(b.query, v)
	return b
}

// WhereDOTClassificationIn adds a WHERE dot_classification IN (?) condition
func (b *CommodityQueryBuilder) WhereDOTClassificationIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DOTClassificationIn(b.query, v)
	return b
}

// WhereDOTClassificationNotIn adds a WHERE dot_classification NOT IN (?) condition
func (b *CommodityQueryBuilder) WhereDOTClassificationNotIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DOTClassificationNotIn(b.query, v)
	return b
}

// WhereDOTClassificationContains adds a WHERE dot_classification LIKE ? condition
func (b *CommodityQueryBuilder) WhereDOTClassificationContains(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DOTClassificationContains(b.query, v)
	return b
}

// WhereDOTClassificationHasPrefix adds a WHERE dot_classification LIKE ? condition
func (b *CommodityQueryBuilder) WhereDOTClassificationHasPrefix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DOTClassificationHasPrefix(b.query, v)
	return b
}

// WhereDOTClassificationHasSuffix adds a WHERE dot_classification LIKE ? condition
func (b *CommodityQueryBuilder) WhereDOTClassificationHasSuffix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DOTClassificationHasSuffix(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *CommodityQueryBuilder) WhereNameEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *CommodityQueryBuilder) WhereNameNEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *CommodityQueryBuilder) WhereNameIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *CommodityQueryBuilder) WhereNameNotIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *CommodityQueryBuilder) WhereNameContains(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *CommodityQueryBuilder) WhereNameHasPrefix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *CommodityQueryBuilder) WhereNameHasSuffix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *CommodityQueryBuilder) WhereDescriptionEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *CommodityQueryBuilder) WhereDescriptionNEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *CommodityQueryBuilder) WhereDescriptionIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *CommodityQueryBuilder) WhereDescriptionNotIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *CommodityQueryBuilder) WhereDescriptionContains(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *CommodityQueryBuilder) WhereDescriptionHasPrefix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *CommodityQueryBuilder) WhereDescriptionHasSuffix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *CommodityQueryBuilder) WhereSearchVectorEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *CommodityQueryBuilder) WhereSearchVectorNEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *CommodityQueryBuilder) WhereSearchVectorIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *CommodityQueryBuilder) WhereSearchVectorNotIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *CommodityQueryBuilder) WhereSearchVectorContains(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *CommodityQueryBuilder) WhereSearchVectorHasPrefix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *CommodityQueryBuilder) WhereSearchVectorHasSuffix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *CommodityQueryBuilder) WhereRankEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *CommodityQueryBuilder) WhereRankNEQ(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *CommodityQueryBuilder) WhereRankIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *CommodityQueryBuilder) WhereRankNotIn(v []string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *CommodityQueryBuilder) WhereRankContains(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *CommodityQueryBuilder) WhereRankHasPrefix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *CommodityQueryBuilder) WhereRankHasSuffix(v string) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// WhereStackableEQ adds a WHERE stackable = ? condition
func (b *CommodityQueryBuilder) WhereStackableEQ(v bool) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.StackableEQ(b.query, v)
	return b
}

// WhereStackableNEQ adds a WHERE stackable != ? condition
func (b *CommodityQueryBuilder) WhereStackableNEQ(v bool) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.StackableNEQ(b.query, v)
	return b
}

// WhereFragileEQ adds a WHERE fragile = ? condition
func (b *CommodityQueryBuilder) WhereFragileEQ(v bool) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.FragileEQ(b.query, v)
	return b
}

// WhereFragileNEQ adds a WHERE fragile != ? condition
func (b *CommodityQueryBuilder) WhereFragileNEQ(v bool) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.FragileNEQ(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *CommodityQueryBuilder) WhereVersionEQ(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *CommodityQueryBuilder) WhereVersionNEQ(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *CommodityQueryBuilder) WhereVersionGT(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *CommodityQueryBuilder) WhereVersionGTE(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *CommodityQueryBuilder) WhereVersionLT(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *CommodityQueryBuilder) WhereVersionLTE(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *CommodityQueryBuilder) WhereVersionIn(v []int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *CommodityQueryBuilder) WhereVersionNotIn(v []int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *CommodityQueryBuilder) WhereCreatedAtEQ(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *CommodityQueryBuilder) WhereCreatedAtNEQ(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *CommodityQueryBuilder) WhereCreatedAtGT(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *CommodityQueryBuilder) WhereCreatedAtGTE(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *CommodityQueryBuilder) WhereCreatedAtLT(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *CommodityQueryBuilder) WhereCreatedAtLTE(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *CommodityQueryBuilder) WhereCreatedAtIn(v []int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *CommodityQueryBuilder) WhereCreatedAtNotIn(v []int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *CommodityQueryBuilder) WhereUpdatedAtEQ(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *CommodityQueryBuilder) WhereUpdatedAtNEQ(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *CommodityQueryBuilder) WhereUpdatedAtGT(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *CommodityQueryBuilder) WhereUpdatedAtGTE(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *CommodityQueryBuilder) WhereUpdatedAtLT(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *CommodityQueryBuilder) WhereUpdatedAtLTE(v int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *CommodityQueryBuilder) WhereUpdatedAtIn(v []int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *CommodityQueryBuilder) WhereUpdatedAtNotIn(v []int64) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *CommodityQueryBuilder) WhereTenant(orgID, buID pulid.ID) *CommodityQueryBuilder {
	b.query = CommodityQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *CommodityQueryBuilder) WhereGroup(sep string, fn func(*CommodityQueryBuilder) *CommodityQueryBuilder) *CommodityQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &CommodityQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *CommodityQueryBuilder) Where(query string, args ...interface{}) *CommodityQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *CommodityQueryBuilder) OrderBy(column string, desc ...bool) *CommodityQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(CommodityQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *CommodityQueryBuilder) Limit(n int) *CommodityQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *CommodityQueryBuilder) Offset(n int) *CommodityQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *CommodityQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *CommodityQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *CommodityQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *CommodityQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *CommodityQueryBuilder) All(ctx context.Context) ([]*Commodity, error) {
	var entities []*Commodity
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *CommodityQueryBuilder) AllWithCount(ctx context.Context) ([]*Commodity, int, error) {
	var entities []*Commodity
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *CommodityQueryBuilder) One(ctx context.Context) (*Commodity, error) {
	entity := new(Commodity)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *CommodityQueryBuilder) First(ctx context.Context) (*Commodity, error) {
	entity := new(Commodity)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// CommodityBuild creates a chainable query builder
func CommodityBuild(db bun.IDB) *CommodityQueryBuilder {
	return NewCommodityQuery(db)
}
