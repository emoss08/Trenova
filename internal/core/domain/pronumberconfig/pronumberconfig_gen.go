/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package pronumberconfig

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// proNumberConfigFieldConfig provides field configuration for ProNumberConfig
type proNumberConfigFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ProNumberConfigQuery provides type-safe query helpers and constants
var ProNumberConfigQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                      string
		BusinessUnitID          string
		OrganizationID          string
		Prefix                  string
		IncludeYear             string
		YearDigits              string
		IncludeMonth            string
		SequenceDigits          string
		IncludeLocationCode     string
		LocationCode            string
		IncludeRandomDigits     string
		RandomDigitsCount       string
		IncludeCheckDigit       string
		IncludeBusinessUnitCode string
		BusinessUnitCode        string
		UseSeparators           string
		SeparatorChar           string
		IncludeWeekNumber       string
		IncludeDay              string
		AllowCustomFormat       string
		CustomFormat            string
		IsActive                string
		Version                 string
		CreatedAt               string
		UpdatedAt               string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrefixEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixNEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrefixNotIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrefixGT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixGTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixLT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixLTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixContains               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixHasPrefix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixHasSuffix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IncludeYearEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeYearNEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeYearIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeYearNotIn             func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		YearDigitsEQ                 func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsNEQ                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsIn                 func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		YearDigitsNotIn              func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		YearDigitsGT                 func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsGTE                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsLT                 func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsLTE                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		IncludeMonthEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeMonthNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeMonthIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeMonthNotIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		SequenceDigitsEQ             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsNEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsIn             func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceDigitsNotIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceDigitsGT             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsGTE            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsLT             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsLTE            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		IncludeLocationCodeEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeLocationCodeNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeLocationCodeIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeLocationCodeNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		LocationCodeEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LocationCodeNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LocationCodeGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IncludeRandomDigitsEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeRandomDigitsNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeRandomDigitsIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeRandomDigitsNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RandomDigitsCountEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RandomDigitsCountNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RandomDigitsCountGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		IncludeCheckDigitEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeCheckDigitNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeCheckDigitIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeCheckDigitNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeBusinessUnitCodeEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeBusinessUnitCodeNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeBusinessUnitCodeIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeBusinessUnitCodeNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		BusinessUnitCodeEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BusinessUnitCodeNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BusinessUnitCodeGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UseSeparatorsEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		UseSeparatorsNEQ             func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		UseSeparatorsIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		UseSeparatorsNotIn           func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		SeparatorCharEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SeparatorCharNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SeparatorCharGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IncludeWeekNumberEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeWeekNumberNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeWeekNumberIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeWeekNumberNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeDayEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeDayNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeDayIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeDayNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowCustomFormatEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowCustomFormatNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowCustomFormatIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowCustomFormatNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CustomFormatEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CustomFormatNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CustomFormatGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsActiveEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsActiveNotIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]proNumberConfigFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
	}
}{
	// Table and alias constants
	Table:    "pro_number_configs",
	Alias:    "pnc",
	IDPrefix: "pnc_",

	// Field names
	Field: struct {
		ID                      string
		BusinessUnitID          string
		OrganizationID          string
		Prefix                  string
		IncludeYear             string
		YearDigits              string
		IncludeMonth            string
		SequenceDigits          string
		IncludeLocationCode     string
		LocationCode            string
		IncludeRandomDigits     string
		RandomDigitsCount       string
		IncludeCheckDigit       string
		IncludeBusinessUnitCode string
		BusinessUnitCode        string
		UseSeparators           string
		SeparatorChar           string
		IncludeWeekNumber       string
		IncludeDay              string
		AllowCustomFormat       string
		CustomFormat            string
		IsActive                string
		Version                 string
		CreatedAt               string
		UpdatedAt               string
	}{
		ID:                      "id",
		BusinessUnitID:          "business_unit_id",
		OrganizationID:          "organization_id",
		Prefix:                  "prefix",
		IncludeYear:             "include_year",
		YearDigits:              "year_digits",
		IncludeMonth:            "include_month",
		SequenceDigits:          "sequence_digits",
		IncludeLocationCode:     "include_location_code",
		LocationCode:            "location_code",
		IncludeRandomDigits:     "include_random_digits",
		RandomDigitsCount:       "random_digits_count",
		IncludeCheckDigit:       "include_check_digit",
		IncludeBusinessUnitCode: "include_business_unit_code",
		BusinessUnitCode:        "business_unit_code",
		UseSeparators:           "use_separators",
		SeparatorChar:           "separator_char",
		IncludeWeekNumber:       "include_week_number",
		IncludeDay:              "include_day",
		AllowCustomFormat:       "allow_custom_format",
		CustomFormat:            "custom_format",
		IsActive:                "is_active",
		Version:                 "version",
		CreatedAt:               "created_at",
		UpdatedAt:               "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "pnc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "pnc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrefixEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixNEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrefixNotIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrefixGT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixGTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixLT                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixLTE                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixContains               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixHasPrefix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrefixHasSuffix              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IncludeYearEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeYearNEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeYearIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeYearNotIn             func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		YearDigitsEQ                 func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsNEQ                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsIn                 func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		YearDigitsNotIn              func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		YearDigitsGT                 func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsGTE                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsLT                 func(q *bun.SelectQuery, v int) *bun.SelectQuery
		YearDigitsLTE                func(q *bun.SelectQuery, v int) *bun.SelectQuery
		IncludeMonthEQ               func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeMonthNEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeMonthIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeMonthNotIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		SequenceDigitsEQ             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsNEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsIn             func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceDigitsNotIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceDigitsGT             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsGTE            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsLT             func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceDigitsLTE            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		IncludeLocationCodeEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeLocationCodeNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeLocationCodeIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeLocationCodeNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		LocationCodeEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LocationCodeNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LocationCodeGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocationCodeHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IncludeRandomDigitsEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeRandomDigitsNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeRandomDigitsIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeRandomDigitsNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		RandomDigitsCountEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RandomDigitsCountNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RandomDigitsCountGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RandomDigitsCountLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		IncludeCheckDigitEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeCheckDigitNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeCheckDigitIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeCheckDigitNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeBusinessUnitCodeEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeBusinessUnitCodeNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeBusinessUnitCodeIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeBusinessUnitCodeNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		BusinessUnitCodeEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BusinessUnitCodeNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BusinessUnitCodeGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BusinessUnitCodeHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		UseSeparatorsEQ              func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		UseSeparatorsNEQ             func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		UseSeparatorsIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		UseSeparatorsNotIn           func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		SeparatorCharEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SeparatorCharNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SeparatorCharGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SeparatorCharHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IncludeWeekNumberEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeWeekNumberNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeWeekNumberIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeWeekNumberNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeDayEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeDayNEQ                func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IncludeDayIn                 func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IncludeDayNotIn              func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowCustomFormatEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowCustomFormatNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		AllowCustomFormatIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		AllowCustomFormatNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CustomFormatEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CustomFormatNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CustomFormatGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CustomFormatHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsActiveEQ                   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveIn                   func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsActiveNotIn                func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                       func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.organization_id"), bun.In(v))
		},
		PrefixEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.prefix"), v)
		},
		PrefixNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.prefix"), v)
		},
		PrefixIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.prefix"), bun.In(v))
		},
		PrefixNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.prefix"), bun.In(v))
		},
		PrefixGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.prefix"), v)
		},
		PrefixGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.prefix"), v)
		},
		PrefixLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.prefix"), v)
		},
		PrefixLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.prefix"), v)
		},
		PrefixContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.prefix"), "%"+v+"%")
		},
		PrefixHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.prefix"), v+"%")
		},
		PrefixHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.prefix"), "%"+v)
		},
		IncludeYearEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.include_year"), v)
		},
		IncludeYearNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.include_year"), v)
		},
		IncludeYearIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.include_year"), bun.In(v))
		},
		IncludeYearNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.include_year"), bun.In(v))
		},
		YearDigitsEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.year_digits"), v)
		},
		YearDigitsNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.year_digits"), v)
		},
		YearDigitsIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.year_digits"), bun.In(v))
		},
		YearDigitsNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.year_digits"), bun.In(v))
		},
		YearDigitsGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.year_digits"), v)
		},
		YearDigitsGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.year_digits"), v)
		},
		YearDigitsLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.year_digits"), v)
		},
		YearDigitsLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.year_digits"), v)
		},
		IncludeMonthEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.include_month"), v)
		},
		IncludeMonthNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.include_month"), v)
		},
		IncludeMonthIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.include_month"), bun.In(v))
		},
		IncludeMonthNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.include_month"), bun.In(v))
		},
		SequenceDigitsEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.sequence_digits"), v)
		},
		SequenceDigitsNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.sequence_digits"), v)
		},
		SequenceDigitsIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.sequence_digits"), bun.In(v))
		},
		SequenceDigitsNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.sequence_digits"), bun.In(v))
		},
		SequenceDigitsGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.sequence_digits"), v)
		},
		SequenceDigitsGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.sequence_digits"), v)
		},
		SequenceDigitsLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.sequence_digits"), v)
		},
		SequenceDigitsLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.sequence_digits"), v)
		},
		IncludeLocationCodeEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.include_location_code"), v)
		},
		IncludeLocationCodeNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.include_location_code"), v)
		},
		IncludeLocationCodeIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.include_location_code"), bun.In(v))
		},
		IncludeLocationCodeNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.include_location_code"), bun.In(v))
		},
		LocationCodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.location_code"), v)
		},
		LocationCodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.location_code"), v)
		},
		LocationCodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.location_code"), bun.In(v))
		},
		LocationCodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.location_code"), bun.In(v))
		},
		LocationCodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.location_code"), v)
		},
		LocationCodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.location_code"), v)
		},
		LocationCodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.location_code"), v)
		},
		LocationCodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.location_code"), v)
		},
		LocationCodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.location_code"), "%"+v+"%")
		},
		LocationCodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.location_code"), v+"%")
		},
		LocationCodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.location_code"), "%"+v)
		},
		IncludeRandomDigitsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.include_random_digits"), v)
		},
		IncludeRandomDigitsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.include_random_digits"), v)
		},
		IncludeRandomDigitsIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.include_random_digits"), bun.In(v))
		},
		IncludeRandomDigitsNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.include_random_digits"), bun.In(v))
		},
		RandomDigitsCountEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.random_digits_count"), v)
		},
		RandomDigitsCountNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.random_digits_count"), v)
		},
		RandomDigitsCountIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.random_digits_count"), bun.In(v))
		},
		RandomDigitsCountNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.random_digits_count"), bun.In(v))
		},
		RandomDigitsCountGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.random_digits_count"), v)
		},
		RandomDigitsCountGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.random_digits_count"), v)
		},
		RandomDigitsCountLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.random_digits_count"), v)
		},
		RandomDigitsCountLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.random_digits_count"), v)
		},
		IncludeCheckDigitEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.include_check_digit"), v)
		},
		IncludeCheckDigitNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.include_check_digit"), v)
		},
		IncludeCheckDigitIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.include_check_digit"), bun.In(v))
		},
		IncludeCheckDigitNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.include_check_digit"), bun.In(v))
		},
		IncludeBusinessUnitCodeEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.include_business_unit_code"), v)
		},
		IncludeBusinessUnitCodeNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.include_business_unit_code"), v)
		},
		IncludeBusinessUnitCodeIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.include_business_unit_code"), bun.In(v))
		},
		IncludeBusinessUnitCodeNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.include_business_unit_code"), bun.In(v))
		},
		BusinessUnitCodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.business_unit_code"), v)
		},
		BusinessUnitCodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.business_unit_code"), v)
		},
		BusinessUnitCodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.business_unit_code"), bun.In(v))
		},
		BusinessUnitCodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.business_unit_code"), bun.In(v))
		},
		BusinessUnitCodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.business_unit_code"), v)
		},
		BusinessUnitCodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.business_unit_code"), v)
		},
		BusinessUnitCodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.business_unit_code"), v)
		},
		BusinessUnitCodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.business_unit_code"), v)
		},
		BusinessUnitCodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.business_unit_code"), "%"+v+"%")
		},
		BusinessUnitCodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.business_unit_code"), v+"%")
		},
		BusinessUnitCodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.business_unit_code"), "%"+v)
		},
		UseSeparatorsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.use_separators"), v)
		},
		UseSeparatorsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.use_separators"), v)
		},
		UseSeparatorsIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.use_separators"), bun.In(v))
		},
		UseSeparatorsNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.use_separators"), bun.In(v))
		},
		SeparatorCharEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.separator_char"), v)
		},
		SeparatorCharNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.separator_char"), v)
		},
		SeparatorCharIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.separator_char"), bun.In(v))
		},
		SeparatorCharNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.separator_char"), bun.In(v))
		},
		SeparatorCharGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.separator_char"), v)
		},
		SeparatorCharGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.separator_char"), v)
		},
		SeparatorCharLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.separator_char"), v)
		},
		SeparatorCharLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.separator_char"), v)
		},
		SeparatorCharContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.separator_char"), "%"+v+"%")
		},
		SeparatorCharHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.separator_char"), v+"%")
		},
		SeparatorCharHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.separator_char"), "%"+v)
		},
		IncludeWeekNumberEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.include_week_number"), v)
		},
		IncludeWeekNumberNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.include_week_number"), v)
		},
		IncludeWeekNumberIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.include_week_number"), bun.In(v))
		},
		IncludeWeekNumberNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.include_week_number"), bun.In(v))
		},
		IncludeDayEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.include_day"), v)
		},
		IncludeDayNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.include_day"), v)
		},
		IncludeDayIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.include_day"), bun.In(v))
		},
		IncludeDayNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.include_day"), bun.In(v))
		},
		AllowCustomFormatEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.allow_custom_format"), v)
		},
		AllowCustomFormatNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.allow_custom_format"), v)
		},
		AllowCustomFormatIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.allow_custom_format"), bun.In(v))
		},
		AllowCustomFormatNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.allow_custom_format"), bun.In(v))
		},
		CustomFormatEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.custom_format"), v)
		},
		CustomFormatNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.custom_format"), v)
		},
		CustomFormatIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.custom_format"), bun.In(v))
		},
		CustomFormatNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.custom_format"), bun.In(v))
		},
		CustomFormatGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.custom_format"), v)
		},
		CustomFormatGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.custom_format"), v)
		},
		CustomFormatLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.custom_format"), v)
		},
		CustomFormatLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.custom_format"), v)
		},
		CustomFormatContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.custom_format"), "%"+v+"%")
		},
		CustomFormatHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.custom_format"), v+"%")
		},
		CustomFormatHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pnc.custom_format"), "%"+v)
		},
		IsActiveEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.is_active"), v)
		},
		IsActiveNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.is_active"), v)
		},
		IsActiveIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.is_active"), bun.In(v))
		},
		IsActiveNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.is_active"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pnc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pnc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pnc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pnc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pnc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pnc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pnc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pnc.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("pnc.organization_id"), orgID).
				Where("? = ?", bun.Ident("pnc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("pnc.id"), id).
				Where("? = ?", bun.Ident("pnc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "pnc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"pnc.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "pnc.created_at DESC"
			}
			return "pnc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "pnc.updated_at DESC"
			}
			return "pnc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]proNumberConfigFieldConfig {
		return map[string]proNumberConfigFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pnc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pnc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pnc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"prefix": {
				Name:       "prefix",
				Column:     "pnc.prefix",
				Sortable:   false,
				Filterable: true,
			},
			"include_year": {
				Name:       "include_year",
				Column:     "pnc.include_year",
				Sortable:   false,
				Filterable: false,
			},
			"year_digits": {
				Name:       "year_digits",
				Column:     "pnc.year_digits",
				Sortable:   false,
				Filterable: false,
			},
			"include_month": {
				Name:       "include_month",
				Column:     "pnc.include_month",
				Sortable:   false,
				Filterable: false,
			},
			"sequence_digits": {
				Name:       "sequence_digits",
				Column:     "pnc.sequence_digits",
				Sortable:   false,
				Filterable: false,
			},
			"include_location_code": {
				Name:       "include_location_code",
				Column:     "pnc.include_location_code",
				Sortable:   false,
				Filterable: false,
			},
			"location_code": {
				Name:       "location_code",
				Column:     "pnc.location_code",
				Sortable:   false,
				Filterable: true,
			},
			"include_random_digits": {
				Name:       "include_random_digits",
				Column:     "pnc.include_random_digits",
				Sortable:   false,
				Filterable: false,
			},
			"random_digits_count": {
				Name:       "random_digits_count",
				Column:     "pnc.random_digits_count",
				Sortable:   false,
				Filterable: false,
			},
			"include_check_digit": {
				Name:       "include_check_digit",
				Column:     "pnc.include_check_digit",
				Sortable:   false,
				Filterable: false,
			},
			"include_business_unit_code": {
				Name:       "include_business_unit_code",
				Column:     "pnc.include_business_unit_code",
				Sortable:   false,
				Filterable: false,
			},
			"business_unit_code": {
				Name:       "business_unit_code",
				Column:     "pnc.business_unit_code",
				Sortable:   false,
				Filterable: true,
			},
			"use_separators": {
				Name:       "use_separators",
				Column:     "pnc.use_separators",
				Sortable:   false,
				Filterable: false,
			},
			"separator_char": {
				Name:       "separator_char",
				Column:     "pnc.separator_char",
				Sortable:   false,
				Filterable: true,
			},
			"include_week_number": {
				Name:       "include_week_number",
				Column:     "pnc.include_week_number",
				Sortable:   false,
				Filterable: false,
			},
			"include_day": {
				Name:       "include_day",
				Column:     "pnc.include_day",
				Sortable:   false,
				Filterable: false,
			},
			"allow_custom_format": {
				Name:       "allow_custom_format",
				Column:     "pnc.allow_custom_format",
				Sortable:   false,
				Filterable: false,
			},
			"custom_format": {
				Name:       "custom_format",
				Column:     "pnc.custom_format",
				Sortable:   false,
				Filterable: true,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "pnc.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "pnc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pnc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pnc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]proNumberConfigFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pnc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pnc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pnc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"prefix": {
				Name:       "prefix",
				Column:     "pnc.prefix",
				Sortable:   false,
				Filterable: true,
			},
			"include_year": {
				Name:       "include_year",
				Column:     "pnc.include_year",
				Sortable:   false,
				Filterable: false,
			},
			"year_digits": {
				Name:       "year_digits",
				Column:     "pnc.year_digits",
				Sortable:   false,
				Filterable: false,
			},
			"include_month": {
				Name:       "include_month",
				Column:     "pnc.include_month",
				Sortable:   false,
				Filterable: false,
			},
			"sequence_digits": {
				Name:       "sequence_digits",
				Column:     "pnc.sequence_digits",
				Sortable:   false,
				Filterable: false,
			},
			"include_location_code": {
				Name:       "include_location_code",
				Column:     "pnc.include_location_code",
				Sortable:   false,
				Filterable: false,
			},
			"location_code": {
				Name:       "location_code",
				Column:     "pnc.location_code",
				Sortable:   false,
				Filterable: true,
			},
			"include_random_digits": {
				Name:       "include_random_digits",
				Column:     "pnc.include_random_digits",
				Sortable:   false,
				Filterable: false,
			},
			"random_digits_count": {
				Name:       "random_digits_count",
				Column:     "pnc.random_digits_count",
				Sortable:   false,
				Filterable: false,
			},
			"include_check_digit": {
				Name:       "include_check_digit",
				Column:     "pnc.include_check_digit",
				Sortable:   false,
				Filterable: false,
			},
			"include_business_unit_code": {
				Name:       "include_business_unit_code",
				Column:     "pnc.include_business_unit_code",
				Sortable:   false,
				Filterable: false,
			},
			"business_unit_code": {
				Name:       "business_unit_code",
				Column:     "pnc.business_unit_code",
				Sortable:   false,
				Filterable: true,
			},
			"use_separators": {
				Name:       "use_separators",
				Column:     "pnc.use_separators",
				Sortable:   false,
				Filterable: false,
			},
			"separator_char": {
				Name:       "separator_char",
				Column:     "pnc.separator_char",
				Sortable:   false,
				Filterable: true,
			},
			"include_week_number": {
				Name:       "include_week_number",
				Column:     "pnc.include_week_number",
				Sortable:   false,
				Filterable: false,
			},
			"include_day": {
				Name:       "include_day",
				Column:     "pnc.include_day",
				Sortable:   false,
				Filterable: false,
			},
			"allow_custom_format": {
				Name:       "allow_custom_format",
				Column:     "pnc.allow_custom_format",
				Sortable:   false,
				Filterable: false,
			},
			"custom_format": {
				Name:       "custom_format",
				Column:     "pnc.custom_format",
				Sortable:   false,
				Filterable: true,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "pnc.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "pnc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pnc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pnc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]proNumberConfigFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pnc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pnc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pnc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"prefix": {
				Name:       "prefix",
				Column:     "pnc.prefix",
				Sortable:   false,
				Filterable: true,
			},
			"include_year": {
				Name:       "include_year",
				Column:     "pnc.include_year",
				Sortable:   false,
				Filterable: false,
			},
			"year_digits": {
				Name:       "year_digits",
				Column:     "pnc.year_digits",
				Sortable:   false,
				Filterable: false,
			},
			"include_month": {
				Name:       "include_month",
				Column:     "pnc.include_month",
				Sortable:   false,
				Filterable: false,
			},
			"sequence_digits": {
				Name:       "sequence_digits",
				Column:     "pnc.sequence_digits",
				Sortable:   false,
				Filterable: false,
			},
			"include_location_code": {
				Name:       "include_location_code",
				Column:     "pnc.include_location_code",
				Sortable:   false,
				Filterable: false,
			},
			"location_code": {
				Name:       "location_code",
				Column:     "pnc.location_code",
				Sortable:   false,
				Filterable: true,
			},
			"include_random_digits": {
				Name:       "include_random_digits",
				Column:     "pnc.include_random_digits",
				Sortable:   false,
				Filterable: false,
			},
			"random_digits_count": {
				Name:       "random_digits_count",
				Column:     "pnc.random_digits_count",
				Sortable:   false,
				Filterable: false,
			},
			"include_check_digit": {
				Name:       "include_check_digit",
				Column:     "pnc.include_check_digit",
				Sortable:   false,
				Filterable: false,
			},
			"include_business_unit_code": {
				Name:       "include_business_unit_code",
				Column:     "pnc.include_business_unit_code",
				Sortable:   false,
				Filterable: false,
			},
			"business_unit_code": {
				Name:       "business_unit_code",
				Column:     "pnc.business_unit_code",
				Sortable:   false,
				Filterable: true,
			},
			"use_separators": {
				Name:       "use_separators",
				Column:     "pnc.use_separators",
				Sortable:   false,
				Filterable: false,
			},
			"separator_char": {
				Name:       "separator_char",
				Column:     "pnc.separator_char",
				Sortable:   false,
				Filterable: true,
			},
			"include_week_number": {
				Name:       "include_week_number",
				Column:     "pnc.include_week_number",
				Sortable:   false,
				Filterable: false,
			},
			"include_day": {
				Name:       "include_day",
				Column:     "pnc.include_day",
				Sortable:   false,
				Filterable: false,
			},
			"allow_custom_format": {
				Name:       "allow_custom_format",
				Column:     "pnc.allow_custom_format",
				Sortable:   false,
				Filterable: false,
			},
			"custom_format": {
				Name:       "custom_format",
				Column:     "pnc.custom_format",
				Sortable:   false,
				Filterable: true,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "pnc.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "pnc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pnc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pnc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
	},
}

// ProNumberConfigQueryBuilder provides a fluent interface for building queries
type ProNumberConfigQueryBuilder struct {
	query *bun.SelectQuery
}

// NewProNumberConfigQuery creates a new query builder
func NewProNumberConfigQuery(db bun.IDB) *ProNumberConfigQueryBuilder {
	return &ProNumberConfigQueryBuilder{
		query: db.NewSelect().Model((*ProNumberConfig)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ProNumberConfigFromQuery(q *bun.SelectQuery) *ProNumberConfigQueryBuilder {
	return &ProNumberConfigQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ProNumberConfigQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ProNumberConfigQueryBuilder) Model(model interface{}) *ProNumberConfigQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIDEQ(v pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIDNEQ(v pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIDIn(v []pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIDNotIn(v []pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ProNumberConfigQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ProNumberConfigQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WherePrefixEQ adds a WHERE prefix = ? condition
func (b *ProNumberConfigQueryBuilder) WherePrefixEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.PrefixEQ(b.query, v)
	return b
}

// WherePrefixNEQ adds a WHERE prefix != ? condition
func (b *ProNumberConfigQueryBuilder) WherePrefixNEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.PrefixNEQ(b.query, v)
	return b
}

// WherePrefixIn adds a WHERE prefix IN (?) condition
func (b *ProNumberConfigQueryBuilder) WherePrefixIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.PrefixIn(b.query, v)
	return b
}

// WherePrefixNotIn adds a WHERE prefix NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WherePrefixNotIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.PrefixNotIn(b.query, v)
	return b
}

// WherePrefixContains adds a WHERE prefix LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WherePrefixContains(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.PrefixContains(b.query, v)
	return b
}

// WherePrefixHasPrefix adds a WHERE prefix LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WherePrefixHasPrefix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.PrefixHasPrefix(b.query, v)
	return b
}

// WherePrefixHasSuffix adds a WHERE prefix LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WherePrefixHasSuffix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.PrefixHasSuffix(b.query, v)
	return b
}

// WhereIncludeYearEQ adds a WHERE include_year = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeYearEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeYearEQ(b.query, v)
	return b
}

// WhereIncludeYearNEQ adds a WHERE include_year != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeYearNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeYearNEQ(b.query, v)
	return b
}

// WhereIncludeYearIn adds a WHERE include_year IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeYearIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeYearIn(b.query, v)
	return b
}

// WhereIncludeYearNotIn adds a WHERE include_year NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeYearNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeYearNotIn(b.query, v)
	return b
}

// WhereYearDigitsEQ adds a WHERE year_digits = ? condition
func (b *ProNumberConfigQueryBuilder) WhereYearDigitsEQ(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.YearDigitsEQ(b.query, v)
	return b
}

// WhereYearDigitsNEQ adds a WHERE year_digits != ? condition
func (b *ProNumberConfigQueryBuilder) WhereYearDigitsNEQ(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.YearDigitsNEQ(b.query, v)
	return b
}

// WhereYearDigitsGT adds a WHERE year_digits > ? condition
func (b *ProNumberConfigQueryBuilder) WhereYearDigitsGT(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.YearDigitsGT(b.query, v)
	return b
}

// WhereYearDigitsGTE adds a WHERE year_digits >= ? condition
func (b *ProNumberConfigQueryBuilder) WhereYearDigitsGTE(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.YearDigitsGTE(b.query, v)
	return b
}

// WhereYearDigitsLT adds a WHERE year_digits < ? condition
func (b *ProNumberConfigQueryBuilder) WhereYearDigitsLT(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.YearDigitsLT(b.query, v)
	return b
}

// WhereYearDigitsLTE adds a WHERE year_digits <= ? condition
func (b *ProNumberConfigQueryBuilder) WhereYearDigitsLTE(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.YearDigitsLTE(b.query, v)
	return b
}

// WhereYearDigitsIn adds a WHERE year_digits IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereYearDigitsIn(v []int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.YearDigitsIn(b.query, v)
	return b
}

// WhereYearDigitsNotIn adds a WHERE year_digits NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereYearDigitsNotIn(v []int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.YearDigitsNotIn(b.query, v)
	return b
}

// WhereIncludeMonthEQ adds a WHERE include_month = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeMonthEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeMonthEQ(b.query, v)
	return b
}

// WhereIncludeMonthNEQ adds a WHERE include_month != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeMonthNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeMonthNEQ(b.query, v)
	return b
}

// WhereIncludeMonthIn adds a WHERE include_month IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeMonthIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeMonthIn(b.query, v)
	return b
}

// WhereIncludeMonthNotIn adds a WHERE include_month NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeMonthNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeMonthNotIn(b.query, v)
	return b
}

// WhereSequenceDigitsEQ adds a WHERE sequence_digits = ? condition
func (b *ProNumberConfigQueryBuilder) WhereSequenceDigitsEQ(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SequenceDigitsEQ(b.query, v)
	return b
}

// WhereSequenceDigitsNEQ adds a WHERE sequence_digits != ? condition
func (b *ProNumberConfigQueryBuilder) WhereSequenceDigitsNEQ(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SequenceDigitsNEQ(b.query, v)
	return b
}

// WhereSequenceDigitsGT adds a WHERE sequence_digits > ? condition
func (b *ProNumberConfigQueryBuilder) WhereSequenceDigitsGT(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SequenceDigitsGT(b.query, v)
	return b
}

// WhereSequenceDigitsGTE adds a WHERE sequence_digits >= ? condition
func (b *ProNumberConfigQueryBuilder) WhereSequenceDigitsGTE(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SequenceDigitsGTE(b.query, v)
	return b
}

// WhereSequenceDigitsLT adds a WHERE sequence_digits < ? condition
func (b *ProNumberConfigQueryBuilder) WhereSequenceDigitsLT(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SequenceDigitsLT(b.query, v)
	return b
}

// WhereSequenceDigitsLTE adds a WHERE sequence_digits <= ? condition
func (b *ProNumberConfigQueryBuilder) WhereSequenceDigitsLTE(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SequenceDigitsLTE(b.query, v)
	return b
}

// WhereSequenceDigitsIn adds a WHERE sequence_digits IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereSequenceDigitsIn(v []int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SequenceDigitsIn(b.query, v)
	return b
}

// WhereSequenceDigitsNotIn adds a WHERE sequence_digits NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereSequenceDigitsNotIn(v []int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SequenceDigitsNotIn(b.query, v)
	return b
}

// WhereIncludeLocationCodeEQ adds a WHERE include_location_code = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeLocationCodeEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeLocationCodeEQ(b.query, v)
	return b
}

// WhereIncludeLocationCodeNEQ adds a WHERE include_location_code != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeLocationCodeNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeLocationCodeNEQ(b.query, v)
	return b
}

// WhereIncludeLocationCodeIn adds a WHERE include_location_code IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeLocationCodeIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeLocationCodeIn(b.query, v)
	return b
}

// WhereIncludeLocationCodeNotIn adds a WHERE include_location_code NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeLocationCodeNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeLocationCodeNotIn(b.query, v)
	return b
}

// WhereLocationCodeEQ adds a WHERE location_code = ? condition
func (b *ProNumberConfigQueryBuilder) WhereLocationCodeEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.LocationCodeEQ(b.query, v)
	return b
}

// WhereLocationCodeNEQ adds a WHERE location_code != ? condition
func (b *ProNumberConfigQueryBuilder) WhereLocationCodeNEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.LocationCodeNEQ(b.query, v)
	return b
}

// WhereLocationCodeIn adds a WHERE location_code IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereLocationCodeIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.LocationCodeIn(b.query, v)
	return b
}

// WhereLocationCodeNotIn adds a WHERE location_code NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereLocationCodeNotIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.LocationCodeNotIn(b.query, v)
	return b
}

// WhereLocationCodeContains adds a WHERE location_code LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereLocationCodeContains(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.LocationCodeContains(b.query, v)
	return b
}

// WhereLocationCodeHasPrefix adds a WHERE location_code LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereLocationCodeHasPrefix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.LocationCodeHasPrefix(b.query, v)
	return b
}

// WhereLocationCodeHasSuffix adds a WHERE location_code LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereLocationCodeHasSuffix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.LocationCodeHasSuffix(b.query, v)
	return b
}

// WhereIncludeRandomDigitsEQ adds a WHERE include_random_digits = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeRandomDigitsEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeRandomDigitsEQ(b.query, v)
	return b
}

// WhereIncludeRandomDigitsNEQ adds a WHERE include_random_digits != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeRandomDigitsNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeRandomDigitsNEQ(b.query, v)
	return b
}

// WhereIncludeRandomDigitsIn adds a WHERE include_random_digits IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeRandomDigitsIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeRandomDigitsIn(b.query, v)
	return b
}

// WhereIncludeRandomDigitsNotIn adds a WHERE include_random_digits NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeRandomDigitsNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeRandomDigitsNotIn(b.query, v)
	return b
}

// WhereRandomDigitsCountEQ adds a WHERE random_digits_count = ? condition
func (b *ProNumberConfigQueryBuilder) WhereRandomDigitsCountEQ(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.RandomDigitsCountEQ(b.query, v)
	return b
}

// WhereRandomDigitsCountNEQ adds a WHERE random_digits_count != ? condition
func (b *ProNumberConfigQueryBuilder) WhereRandomDigitsCountNEQ(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.RandomDigitsCountNEQ(b.query, v)
	return b
}

// WhereRandomDigitsCountGT adds a WHERE random_digits_count > ? condition
func (b *ProNumberConfigQueryBuilder) WhereRandomDigitsCountGT(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.RandomDigitsCountGT(b.query, v)
	return b
}

// WhereRandomDigitsCountGTE adds a WHERE random_digits_count >= ? condition
func (b *ProNumberConfigQueryBuilder) WhereRandomDigitsCountGTE(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.RandomDigitsCountGTE(b.query, v)
	return b
}

// WhereRandomDigitsCountLT adds a WHERE random_digits_count < ? condition
func (b *ProNumberConfigQueryBuilder) WhereRandomDigitsCountLT(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.RandomDigitsCountLT(b.query, v)
	return b
}

// WhereRandomDigitsCountLTE adds a WHERE random_digits_count <= ? condition
func (b *ProNumberConfigQueryBuilder) WhereRandomDigitsCountLTE(v int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.RandomDigitsCountLTE(b.query, v)
	return b
}

// WhereRandomDigitsCountIn adds a WHERE random_digits_count IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereRandomDigitsCountIn(v []int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.RandomDigitsCountIn(b.query, v)
	return b
}

// WhereRandomDigitsCountNotIn adds a WHERE random_digits_count NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereRandomDigitsCountNotIn(v []int) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.RandomDigitsCountNotIn(b.query, v)
	return b
}

// WhereIncludeCheckDigitEQ adds a WHERE include_check_digit = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeCheckDigitEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeCheckDigitEQ(b.query, v)
	return b
}

// WhereIncludeCheckDigitNEQ adds a WHERE include_check_digit != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeCheckDigitNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeCheckDigitNEQ(b.query, v)
	return b
}

// WhereIncludeCheckDigitIn adds a WHERE include_check_digit IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeCheckDigitIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeCheckDigitIn(b.query, v)
	return b
}

// WhereIncludeCheckDigitNotIn adds a WHERE include_check_digit NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeCheckDigitNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeCheckDigitNotIn(b.query, v)
	return b
}

// WhereIncludeBusinessUnitCodeEQ adds a WHERE include_business_unit_code = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeBusinessUnitCodeEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeBusinessUnitCodeEQ(b.query, v)
	return b
}

// WhereIncludeBusinessUnitCodeNEQ adds a WHERE include_business_unit_code != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeBusinessUnitCodeNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeBusinessUnitCodeNEQ(b.query, v)
	return b
}

// WhereIncludeBusinessUnitCodeIn adds a WHERE include_business_unit_code IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeBusinessUnitCodeIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeBusinessUnitCodeIn(b.query, v)
	return b
}

// WhereIncludeBusinessUnitCodeNotIn adds a WHERE include_business_unit_code NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeBusinessUnitCodeNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeBusinessUnitCodeNotIn(b.query, v)
	return b
}

// WhereBusinessUnitCodeEQ adds a WHERE business_unit_code = ? condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitCodeEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitCodeEQ(b.query, v)
	return b
}

// WhereBusinessUnitCodeNEQ adds a WHERE business_unit_code != ? condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitCodeNEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitCodeNEQ(b.query, v)
	return b
}

// WhereBusinessUnitCodeIn adds a WHERE business_unit_code IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitCodeIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitCodeIn(b.query, v)
	return b
}

// WhereBusinessUnitCodeNotIn adds a WHERE business_unit_code NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitCodeNotIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitCodeNotIn(b.query, v)
	return b
}

// WhereBusinessUnitCodeContains adds a WHERE business_unit_code LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitCodeContains(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitCodeContains(b.query, v)
	return b
}

// WhereBusinessUnitCodeHasPrefix adds a WHERE business_unit_code LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitCodeHasPrefix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitCodeHasPrefix(b.query, v)
	return b
}

// WhereBusinessUnitCodeHasSuffix adds a WHERE business_unit_code LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereBusinessUnitCodeHasSuffix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.BusinessUnitCodeHasSuffix(b.query, v)
	return b
}

// WhereUseSeparatorsEQ adds a WHERE use_separators = ? condition
func (b *ProNumberConfigQueryBuilder) WhereUseSeparatorsEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UseSeparatorsEQ(b.query, v)
	return b
}

// WhereUseSeparatorsNEQ adds a WHERE use_separators != ? condition
func (b *ProNumberConfigQueryBuilder) WhereUseSeparatorsNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UseSeparatorsNEQ(b.query, v)
	return b
}

// WhereUseSeparatorsIn adds a WHERE use_separators IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereUseSeparatorsIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UseSeparatorsIn(b.query, v)
	return b
}

// WhereUseSeparatorsNotIn adds a WHERE use_separators NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereUseSeparatorsNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UseSeparatorsNotIn(b.query, v)
	return b
}

// WhereSeparatorCharEQ adds a WHERE separator_char = ? condition
func (b *ProNumberConfigQueryBuilder) WhereSeparatorCharEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SeparatorCharEQ(b.query, v)
	return b
}

// WhereSeparatorCharNEQ adds a WHERE separator_char != ? condition
func (b *ProNumberConfigQueryBuilder) WhereSeparatorCharNEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SeparatorCharNEQ(b.query, v)
	return b
}

// WhereSeparatorCharIn adds a WHERE separator_char IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereSeparatorCharIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SeparatorCharIn(b.query, v)
	return b
}

// WhereSeparatorCharNotIn adds a WHERE separator_char NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereSeparatorCharNotIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SeparatorCharNotIn(b.query, v)
	return b
}

// WhereSeparatorCharContains adds a WHERE separator_char LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereSeparatorCharContains(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SeparatorCharContains(b.query, v)
	return b
}

// WhereSeparatorCharHasPrefix adds a WHERE separator_char LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereSeparatorCharHasPrefix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SeparatorCharHasPrefix(b.query, v)
	return b
}

// WhereSeparatorCharHasSuffix adds a WHERE separator_char LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereSeparatorCharHasSuffix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.SeparatorCharHasSuffix(b.query, v)
	return b
}

// WhereIncludeWeekNumberEQ adds a WHERE include_week_number = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeWeekNumberEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeWeekNumberEQ(b.query, v)
	return b
}

// WhereIncludeWeekNumberNEQ adds a WHERE include_week_number != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeWeekNumberNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeWeekNumberNEQ(b.query, v)
	return b
}

// WhereIncludeWeekNumberIn adds a WHERE include_week_number IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeWeekNumberIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeWeekNumberIn(b.query, v)
	return b
}

// WhereIncludeWeekNumberNotIn adds a WHERE include_week_number NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeWeekNumberNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeWeekNumberNotIn(b.query, v)
	return b
}

// WhereIncludeDayEQ adds a WHERE include_day = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeDayEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeDayEQ(b.query, v)
	return b
}

// WhereIncludeDayNEQ adds a WHERE include_day != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeDayNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeDayNEQ(b.query, v)
	return b
}

// WhereIncludeDayIn adds a WHERE include_day IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeDayIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeDayIn(b.query, v)
	return b
}

// WhereIncludeDayNotIn adds a WHERE include_day NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIncludeDayNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IncludeDayNotIn(b.query, v)
	return b
}

// WhereAllowCustomFormatEQ adds a WHERE allow_custom_format = ? condition
func (b *ProNumberConfigQueryBuilder) WhereAllowCustomFormatEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.AllowCustomFormatEQ(b.query, v)
	return b
}

// WhereAllowCustomFormatNEQ adds a WHERE allow_custom_format != ? condition
func (b *ProNumberConfigQueryBuilder) WhereAllowCustomFormatNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.AllowCustomFormatNEQ(b.query, v)
	return b
}

// WhereAllowCustomFormatIn adds a WHERE allow_custom_format IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereAllowCustomFormatIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.AllowCustomFormatIn(b.query, v)
	return b
}

// WhereAllowCustomFormatNotIn adds a WHERE allow_custom_format NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereAllowCustomFormatNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.AllowCustomFormatNotIn(b.query, v)
	return b
}

// WhereCustomFormatEQ adds a WHERE custom_format = ? condition
func (b *ProNumberConfigQueryBuilder) WhereCustomFormatEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CustomFormatEQ(b.query, v)
	return b
}

// WhereCustomFormatNEQ adds a WHERE custom_format != ? condition
func (b *ProNumberConfigQueryBuilder) WhereCustomFormatNEQ(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CustomFormatNEQ(b.query, v)
	return b
}

// WhereCustomFormatIn adds a WHERE custom_format IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereCustomFormatIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CustomFormatIn(b.query, v)
	return b
}

// WhereCustomFormatNotIn adds a WHERE custom_format NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereCustomFormatNotIn(v []string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CustomFormatNotIn(b.query, v)
	return b
}

// WhereCustomFormatContains adds a WHERE custom_format LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereCustomFormatContains(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CustomFormatContains(b.query, v)
	return b
}

// WhereCustomFormatHasPrefix adds a WHERE custom_format LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereCustomFormatHasPrefix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CustomFormatHasPrefix(b.query, v)
	return b
}

// WhereCustomFormatHasSuffix adds a WHERE custom_format LIKE ? condition
func (b *ProNumberConfigQueryBuilder) WhereCustomFormatHasSuffix(v string) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CustomFormatHasSuffix(b.query, v)
	return b
}

// WhereIsActiveEQ adds a WHERE is_active = ? condition
func (b *ProNumberConfigQueryBuilder) WhereIsActiveEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IsActiveEQ(b.query, v)
	return b
}

// WhereIsActiveNEQ adds a WHERE is_active != ? condition
func (b *ProNumberConfigQueryBuilder) WhereIsActiveNEQ(v bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IsActiveNEQ(b.query, v)
	return b
}

// WhereIsActiveIn adds a WHERE is_active IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIsActiveIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IsActiveIn(b.query, v)
	return b
}

// WhereIsActiveNotIn adds a WHERE is_active NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereIsActiveNotIn(v []bool) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.IsActiveNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ProNumberConfigQueryBuilder) WhereVersionEQ(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ProNumberConfigQueryBuilder) WhereVersionNEQ(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ProNumberConfigQueryBuilder) WhereVersionGT(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ProNumberConfigQueryBuilder) WhereVersionGTE(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ProNumberConfigQueryBuilder) WhereVersionLT(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ProNumberConfigQueryBuilder) WhereVersionLTE(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereVersionIn(v []int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereVersionNotIn(v []int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ProNumberConfigQueryBuilder) WhereCreatedAtEQ(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ProNumberConfigQueryBuilder) WhereCreatedAtNEQ(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ProNumberConfigQueryBuilder) WhereCreatedAtGT(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ProNumberConfigQueryBuilder) WhereCreatedAtGTE(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ProNumberConfigQueryBuilder) WhereCreatedAtLT(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ProNumberConfigQueryBuilder) WhereCreatedAtLTE(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereCreatedAtIn(v []int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereCreatedAtNotIn(v []int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ProNumberConfigQueryBuilder) WhereUpdatedAtEQ(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ProNumberConfigQueryBuilder) WhereUpdatedAtNEQ(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ProNumberConfigQueryBuilder) WhereUpdatedAtGT(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ProNumberConfigQueryBuilder) WhereUpdatedAtGTE(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ProNumberConfigQueryBuilder) WhereUpdatedAtLT(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ProNumberConfigQueryBuilder) WhereUpdatedAtLTE(v int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereUpdatedAtIn(v []int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ProNumberConfigQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ProNumberConfigQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ProNumberConfigQueryBuilder {
	b.query = ProNumberConfigQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ProNumberConfigQueryBuilder) WhereGroup(sep string, fn func(*ProNumberConfigQueryBuilder) *ProNumberConfigQueryBuilder) *ProNumberConfigQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ProNumberConfigQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ProNumberConfigQueryBuilder) Where(query string, args ...interface{}) *ProNumberConfigQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ProNumberConfigQueryBuilder) OrderBy(column string, desc ...bool) *ProNumberConfigQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ProNumberConfigQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ProNumberConfigQueryBuilder) Limit(n int) *ProNumberConfigQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ProNumberConfigQueryBuilder) Offset(n int) *ProNumberConfigQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ProNumberConfigQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ProNumberConfigQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ProNumberConfigQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ProNumberConfigQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ProNumberConfigQueryBuilder) All(ctx context.Context) ([]*ProNumberConfig, error) {
	var entities []*ProNumberConfig
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ProNumberConfigQueryBuilder) AllWithCount(ctx context.Context) ([]*ProNumberConfig, int, error) {
	var entities []*ProNumberConfig
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ProNumberConfigQueryBuilder) One(ctx context.Context) (*ProNumberConfig, error) {
	entity := new(ProNumberConfig)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ProNumberConfigQueryBuilder) First(ctx context.Context) (*ProNumberConfig, error) {
	entity := new(ProNumberConfig)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ProNumberConfigBuild creates a chainable query builder
func ProNumberConfigBuild(db bun.IDB) *ProNumberConfigQueryBuilder {
	return NewProNumberConfigQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *ProNumberConfigQueryBuilder) LoadBusinessUnit() *ProNumberConfigQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *ProNumberConfigQueryBuilder) LoadOrganization() *ProNumberConfigQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for ProNumberConfig
func (b *ProNumberConfigQueryBuilder) LoadAllRelations() *ProNumberConfigQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	return b
}
