/*
 * Copyright 2023-2025 Eric Moss
 * Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
 * Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md */

// Code generated by gen-trenova. DO NOT EDIT.

package permissiongrant

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain/permission"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// grantFieldConfig provides field configuration for Grant
type grantFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// GrantQuery provides type-safe query helpers and constants
var GrantQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		OrganizationID string
		BusinessUnitID string
		UserID         string
		PermissionID   string
		GrantedBy      string
		RevokedBy      string
		Status         string
		ExpiresAt      string
		RevokedAt      string
		CreatedAt      string
		Reason         string
		FieldOverrides string
		Conditions     string
		ResourceID     string
		AuditTrail     string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PermissionIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PermissionIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PermissionIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PermissionIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		GrantedByEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		GrantedByNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		GrantedByIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		GrantedByNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RevokedByEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		RevokedByNEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		RevokedByIn         func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		RevokedByNotIn      func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		RevokedByIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RevokedByIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ            func(q *bun.SelectQuery, v permission.Status) *bun.SelectQuery
		StatusNEQ           func(q *bun.SelectQuery, v permission.Status) *bun.SelectQuery
		StatusIn            func(q *bun.SelectQuery, v []permission.Status) *bun.SelectQuery
		StatusNotIn         func(q *bun.SelectQuery, v []permission.Status) *bun.SelectQuery
		ExpiresAtEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		ExpiresAtIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		RevokedAtEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RevokedAtNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RevokedAtIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RevokedAtNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RevokedAtIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RevokedAtIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ReasonEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReasonNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReasonGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FieldOverridesEQ    func(q *bun.SelectQuery, v []*permission.FieldPermission) *bun.SelectQuery
		FieldOverridesNEQ   func(q *bun.SelectQuery, v []*permission.FieldPermission) *bun.SelectQuery
		FieldOverridesIn    func(q *bun.SelectQuery, v [][]*permission.FieldPermission) *bun.SelectQuery
		FieldOverridesNotIn func(q *bun.SelectQuery, v [][]*permission.FieldPermission) *bun.SelectQuery
		ConditionsEQ        func(q *bun.SelectQuery, v []*permission.Condition) *bun.SelectQuery
		ConditionsNEQ       func(q *bun.SelectQuery, v []*permission.Condition) *bun.SelectQuery
		ConditionsIn        func(q *bun.SelectQuery, v [][]*permission.Condition) *bun.SelectQuery
		ConditionsNotIn     func(q *bun.SelectQuery, v [][]*permission.Condition) *bun.SelectQuery
		ResourceIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ResourceIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ResourceIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ResourceIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ResourceIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ResourceIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		AuditTrailEQ        func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		AuditTrailNEQ       func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		AuditTrailIn        func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		AuditTrailNotIn     func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]grantFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		User       string
		Permission string
		Grantor    string
		Revoker    string
	}
}{
	// Table and alias constants
	Table:    "permission_grants",
	Alias:    "pg",
	IDPrefix: "pg_",

	// Field names
	Field: struct {
		ID             string
		OrganizationID string
		BusinessUnitID string
		UserID         string
		PermissionID   string
		GrantedBy      string
		RevokedBy      string
		Status         string
		ExpiresAt      string
		RevokedAt      string
		CreatedAt      string
		Reason         string
		FieldOverrides string
		Conditions     string
		ResourceID     string
		AuditTrail     string
	}{
		ID:             "id",
		OrganizationID: "organization_id",
		BusinessUnitID: "business_unit_id",
		UserID:         "user_id",
		PermissionID:   "permission_id",
		GrantedBy:      "granted_by",
		RevokedBy:      "revoked_by",
		Status:         "status",
		ExpiresAt:      "expires_at",
		RevokedAt:      "revoked_at",
		CreatedAt:      "created_at",
		Reason:         "reason",
		FieldOverrides: "field_overrides",
		Conditions:     "conditions",
		ResourceID:     "resource_id",
		AuditTrail:     "audit_trail",
	},

	// Column helpers
	Column: func(field string) string {
		return "pg." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "pg." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PermissionIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PermissionIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PermissionIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PermissionIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		GrantedByEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		GrantedByNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		GrantedByIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		GrantedByNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RevokedByEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		RevokedByNEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		RevokedByIn         func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		RevokedByNotIn      func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		RevokedByIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RevokedByIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ            func(q *bun.SelectQuery, v permission.Status) *bun.SelectQuery
		StatusNEQ           func(q *bun.SelectQuery, v permission.Status) *bun.SelectQuery
		StatusIn            func(q *bun.SelectQuery, v []permission.Status) *bun.SelectQuery
		StatusNotIn         func(q *bun.SelectQuery, v []permission.Status) *bun.SelectQuery
		ExpiresAtEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		ExpiresAtIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		RevokedAtEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RevokedAtNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RevokedAtIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RevokedAtNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RevokedAtIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RevokedAtIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ReasonEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReasonNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReasonGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReasonHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		FieldOverridesEQ    func(q *bun.SelectQuery, v []*permission.FieldPermission) *bun.SelectQuery
		FieldOverridesNEQ   func(q *bun.SelectQuery, v []*permission.FieldPermission) *bun.SelectQuery
		FieldOverridesIn    func(q *bun.SelectQuery, v [][]*permission.FieldPermission) *bun.SelectQuery
		FieldOverridesNotIn func(q *bun.SelectQuery, v [][]*permission.FieldPermission) *bun.SelectQuery
		ConditionsEQ        func(q *bun.SelectQuery, v []*permission.Condition) *bun.SelectQuery
		ConditionsNEQ       func(q *bun.SelectQuery, v []*permission.Condition) *bun.SelectQuery
		ConditionsIn        func(q *bun.SelectQuery, v [][]*permission.Condition) *bun.SelectQuery
		ConditionsNotIn     func(q *bun.SelectQuery, v [][]*permission.Condition) *bun.SelectQuery
		ResourceIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ResourceIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ResourceIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ResourceIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ResourceIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ResourceIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		AuditTrailEQ        func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		AuditTrailNEQ       func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		AuditTrailIn        func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		AuditTrailNotIn     func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		Tenant              func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.organization_id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.business_unit_id"), bun.In(v))
		},
		UserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.user_id"), v)
		},
		UserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.user_id"), v)
		},
		UserIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.user_id"), bun.In(v))
		},
		UserIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.user_id"), bun.In(v))
		},
		PermissionIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.permission_id"), v)
		},
		PermissionIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.permission_id"), v)
		},
		PermissionIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.permission_id"), bun.In(v))
		},
		PermissionIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.permission_id"), bun.In(v))
		},
		GrantedByEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.granted_by"), v)
		},
		GrantedByNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.granted_by"), v)
		},
		GrantedByIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.granted_by"), bun.In(v))
		},
		GrantedByNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.granted_by"), bun.In(v))
		},
		RevokedByEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.revoked_by"), v)
		},
		RevokedByNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.revoked_by"), v)
		},
		RevokedByIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.revoked_by"), bun.In(v))
		},
		RevokedByNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.revoked_by"), bun.In(v))
		},
		RevokedByIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("pg.revoked_by"))
		},
		RevokedByIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("pg.revoked_by"))
		},
		StatusEQ: func(q *bun.SelectQuery, v permission.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v permission.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []permission.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []permission.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.status"), bun.In(v))
		},
		ExpiresAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.expires_at"), v)
		},
		ExpiresAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.expires_at"), v)
		},
		ExpiresAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.expires_at"), bun.In(v))
		},
		ExpiresAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.expires_at"), bun.In(v))
		},
		ExpiresAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("pg.expires_at"))
		},
		ExpiresAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("pg.expires_at"))
		},
		RevokedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.revoked_at"), v)
		},
		RevokedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.revoked_at"), v)
		},
		RevokedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.revoked_at"), bun.In(v))
		},
		RevokedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.revoked_at"), bun.In(v))
		},
		RevokedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("pg.revoked_at"))
		},
		RevokedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("pg.revoked_at"))
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pg.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pg.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pg.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pg.created_at"), v)
		},
		ReasonEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.reason"), v)
		},
		ReasonNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.reason"), v)
		},
		ReasonIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.reason"), bun.In(v))
		},
		ReasonNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.reason"), bun.In(v))
		},
		ReasonGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pg.reason"), v)
		},
		ReasonGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pg.reason"), v)
		},
		ReasonLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pg.reason"), v)
		},
		ReasonLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pg.reason"), v)
		},
		ReasonContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pg.reason"), "%"+v+"%")
		},
		ReasonHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pg.reason"), v+"%")
		},
		ReasonHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pg.reason"), "%"+v)
		},
		FieldOverridesEQ: func(q *bun.SelectQuery, v []*permission.FieldPermission) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.field_overrides"), v)
		},
		FieldOverridesNEQ: func(q *bun.SelectQuery, v []*permission.FieldPermission) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.field_overrides"), v)
		},
		FieldOverridesIn: func(q *bun.SelectQuery, v [][]*permission.FieldPermission) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.field_overrides"), bun.In(v))
		},
		FieldOverridesNotIn: func(q *bun.SelectQuery, v [][]*permission.FieldPermission) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.field_overrides"), bun.In(v))
		},
		ConditionsEQ: func(q *bun.SelectQuery, v []*permission.Condition) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.conditions"), v)
		},
		ConditionsNEQ: func(q *bun.SelectQuery, v []*permission.Condition) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.conditions"), v)
		},
		ConditionsIn: func(q *bun.SelectQuery, v [][]*permission.Condition) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.conditions"), bun.In(v))
		},
		ConditionsNotIn: func(q *bun.SelectQuery, v [][]*permission.Condition) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.conditions"), bun.In(v))
		},
		ResourceIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.resource_id"), v)
		},
		ResourceIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.resource_id"), v)
		},
		ResourceIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.resource_id"), bun.In(v))
		},
		ResourceIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.resource_id"), bun.In(v))
		},
		ResourceIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("pg.resource_id"))
		},
		ResourceIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("pg.resource_id"))
		},
		AuditTrailEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pg.audit_trail"), v)
		},
		AuditTrailNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pg.audit_trail"), v)
		},
		AuditTrailIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pg.audit_trail"), bun.In(v))
		},
		AuditTrailNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pg.audit_trail"), bun.In(v))
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("pg.organization_id"), orgID).
				Where("? = ?", bun.Ident("pg.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "pg." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"pg.status ASC",
				"pg.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "pg.status DESC"
			}
			return "pg.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "pg.created_at DESC"
			}
			return "pg.created_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]grantFieldConfig {
		return map[string]grantFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pg.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pg.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pg.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "pg.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"permission_id": {
				Name:       "permission_id",
				Column:     "pg.permission_id",
				Sortable:   false,
				Filterable: true,
			},
			"granted_by": {
				Name:       "granted_by",
				Column:     "pg.granted_by",
				Sortable:   false,
				Filterable: false,
			},
			"revoked_by": {
				Name:       "revoked_by",
				Column:     "pg.revoked_by",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "pg.status",
				Sortable:   false,
				Filterable: true,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "pg.expires_at",
				Sortable:   false,
				Filterable: false,
			},
			"revoked_at": {
				Name:       "revoked_at",
				Column:     "pg.revoked_at",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pg.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"reason": {
				Name:       "reason",
				Column:     "pg.reason",
				Sortable:   false,
				Filterable: false,
			},
			"field_overrides": {
				Name:       "field_overrides",
				Column:     "pg.field_overrides",
				Sortable:   false,
				Filterable: false,
			},
			"conditions": {
				Name:       "conditions",
				Column:     "pg.conditions",
				Sortable:   false,
				Filterable: false,
			},
			"resource_id": {
				Name:       "resource_id",
				Column:     "pg.resource_id",
				Sortable:   false,
				Filterable: true,
			},
			"audit_trail": {
				Name:       "audit_trail",
				Column:     "pg.audit_trail",
				Sortable:   false,
				Filterable: false,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]grantFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pg.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pg.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pg.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "pg.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"permission_id": {
				Name:       "permission_id",
				Column:     "pg.permission_id",
				Sortable:   false,
				Filterable: true,
			},
			"granted_by": {
				Name:       "granted_by",
				Column:     "pg.granted_by",
				Sortable:   false,
				Filterable: false,
			},
			"revoked_by": {
				Name:       "revoked_by",
				Column:     "pg.revoked_by",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "pg.status",
				Sortable:   false,
				Filterable: true,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "pg.expires_at",
				Sortable:   false,
				Filterable: false,
			},
			"revoked_at": {
				Name:       "revoked_at",
				Column:     "pg.revoked_at",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pg.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"reason": {
				Name:       "reason",
				Column:     "pg.reason",
				Sortable:   false,
				Filterable: false,
			},
			"field_overrides": {
				Name:       "field_overrides",
				Column:     "pg.field_overrides",
				Sortable:   false,
				Filterable: false,
			},
			"conditions": {
				Name:       "conditions",
				Column:     "pg.conditions",
				Sortable:   false,
				Filterable: false,
			},
			"resource_id": {
				Name:       "resource_id",
				Column:     "pg.resource_id",
				Sortable:   false,
				Filterable: true,
			},
			"audit_trail": {
				Name:       "audit_trail",
				Column:     "pg.audit_trail",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]grantFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pg.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pg.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pg.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "pg.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"permission_id": {
				Name:       "permission_id",
				Column:     "pg.permission_id",
				Sortable:   false,
				Filterable: true,
			},
			"granted_by": {
				Name:       "granted_by",
				Column:     "pg.granted_by",
				Sortable:   false,
				Filterable: false,
			},
			"revoked_by": {
				Name:       "revoked_by",
				Column:     "pg.revoked_by",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "pg.status",
				Sortable:   false,
				Filterable: true,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "pg.expires_at",
				Sortable:   false,
				Filterable: false,
			},
			"revoked_at": {
				Name:       "revoked_at",
				Column:     "pg.revoked_at",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pg.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"reason": {
				Name:       "reason",
				Column:     "pg.reason",
				Sortable:   false,
				Filterable: false,
			},
			"field_overrides": {
				Name:       "field_overrides",
				Column:     "pg.field_overrides",
				Sortable:   false,
				Filterable: false,
			},
			"conditions": {
				Name:       "conditions",
				Column:     "pg.conditions",
				Sortable:   false,
				Filterable: false,
			},
			"resource_id": {
				Name:       "resource_id",
				Column:     "pg.resource_id",
				Sortable:   false,
				Filterable: true,
			},
			"audit_trail": {
				Name:       "audit_trail",
				Column:     "pg.audit_trail",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		User       string
		Permission string
		Grantor    string
		Revoker    string
	}{
		User:       "User",
		Permission: "Permission",
		Grantor:    "Grantor",
		Revoker:    "Revoker",
	},
}

// GrantQueryBuilder provides a fluent interface for building queries
type GrantQueryBuilder struct {
	query *bun.SelectQuery
}

// NewGrantQuery creates a new query builder
func NewGrantQuery(db bun.IDB) *GrantQueryBuilder {
	return &GrantQueryBuilder{
		query: db.NewSelect().Model((*Grant)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func GrantFromQuery(q *bun.SelectQuery) *GrantQueryBuilder {
	return &GrantQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *GrantQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *GrantQueryBuilder) Model(model interface{}) *GrantQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *GrantQueryBuilder) WhereIDEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *GrantQueryBuilder) WhereIDNEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *GrantQueryBuilder) WhereIDIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *GrantQueryBuilder) WhereIDNotIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *GrantQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *GrantQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *GrantQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *GrantQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *GrantQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *GrantQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *GrantQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *GrantQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereUserIDEQ adds a WHERE user_id = ? condition
func (b *GrantQueryBuilder) WhereUserIDEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.UserIDEQ(b.query, v)
	return b
}

// WhereUserIDNEQ adds a WHERE user_id != ? condition
func (b *GrantQueryBuilder) WhereUserIDNEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.UserIDNEQ(b.query, v)
	return b
}

// WhereUserIDIn adds a WHERE user_id IN (?) condition
func (b *GrantQueryBuilder) WhereUserIDIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.UserIDIn(b.query, v)
	return b
}

// WhereUserIDNotIn adds a WHERE user_id NOT IN (?) condition
func (b *GrantQueryBuilder) WhereUserIDNotIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.UserIDNotIn(b.query, v)
	return b
}

// WherePermissionIDEQ adds a WHERE permission_id = ? condition
func (b *GrantQueryBuilder) WherePermissionIDEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.PermissionIDEQ(b.query, v)
	return b
}

// WherePermissionIDNEQ adds a WHERE permission_id != ? condition
func (b *GrantQueryBuilder) WherePermissionIDNEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.PermissionIDNEQ(b.query, v)
	return b
}

// WherePermissionIDIn adds a WHERE permission_id IN (?) condition
func (b *GrantQueryBuilder) WherePermissionIDIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.PermissionIDIn(b.query, v)
	return b
}

// WherePermissionIDNotIn adds a WHERE permission_id NOT IN (?) condition
func (b *GrantQueryBuilder) WherePermissionIDNotIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.PermissionIDNotIn(b.query, v)
	return b
}

// WhereGrantedByEQ adds a WHERE granted_by = ? condition
func (b *GrantQueryBuilder) WhereGrantedByEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.GrantedByEQ(b.query, v)
	return b
}

// WhereGrantedByNEQ adds a WHERE granted_by != ? condition
func (b *GrantQueryBuilder) WhereGrantedByNEQ(v pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.GrantedByNEQ(b.query, v)
	return b
}

// WhereGrantedByIn adds a WHERE granted_by IN (?) condition
func (b *GrantQueryBuilder) WhereGrantedByIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.GrantedByIn(b.query, v)
	return b
}

// WhereGrantedByNotIn adds a WHERE granted_by NOT IN (?) condition
func (b *GrantQueryBuilder) WhereGrantedByNotIn(v []pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.GrantedByNotIn(b.query, v)
	return b
}

// WhereRevokedByEQ adds a WHERE revoked_by = ? condition
func (b *GrantQueryBuilder) WhereRevokedByEQ(v *pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.RevokedByEQ(b.query, v)
	return b
}

// WhereRevokedByNEQ adds a WHERE revoked_by != ? condition
func (b *GrantQueryBuilder) WhereRevokedByNEQ(v *pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.RevokedByNEQ(b.query, v)
	return b
}

// WhereRevokedByIn adds a WHERE revoked_by IN (?) condition
func (b *GrantQueryBuilder) WhereRevokedByIn(v []*pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.RevokedByIn(b.query, v)
	return b
}

// WhereRevokedByNotIn adds a WHERE revoked_by NOT IN (?) condition
func (b *GrantQueryBuilder) WhereRevokedByNotIn(v []*pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.RevokedByNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *GrantQueryBuilder) WhereStatusEQ(v permission.Status) *GrantQueryBuilder {
	b.query = GrantQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *GrantQueryBuilder) WhereStatusNEQ(v permission.Status) *GrantQueryBuilder {
	b.query = GrantQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *GrantQueryBuilder) WhereStatusIn(v []permission.Status) *GrantQueryBuilder {
	b.query = GrantQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *GrantQueryBuilder) WhereStatusNotIn(v []permission.Status) *GrantQueryBuilder {
	b.query = GrantQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereExpiresAtEQ adds a WHERE expires_at = ? condition
func (b *GrantQueryBuilder) WhereExpiresAtEQ(v *int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ExpiresAtEQ(b.query, v)
	return b
}

// WhereExpiresAtNEQ adds a WHERE expires_at != ? condition
func (b *GrantQueryBuilder) WhereExpiresAtNEQ(v *int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ExpiresAtNEQ(b.query, v)
	return b
}

// WhereExpiresAtIn adds a WHERE expires_at IN (?) condition
func (b *GrantQueryBuilder) WhereExpiresAtIn(v []*int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ExpiresAtIn(b.query, v)
	return b
}

// WhereExpiresAtNotIn adds a WHERE expires_at NOT IN (?) condition
func (b *GrantQueryBuilder) WhereExpiresAtNotIn(v []*int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ExpiresAtNotIn(b.query, v)
	return b
}

// WhereRevokedAtEQ adds a WHERE revoked_at = ? condition
func (b *GrantQueryBuilder) WhereRevokedAtEQ(v *int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.RevokedAtEQ(b.query, v)
	return b
}

// WhereRevokedAtNEQ adds a WHERE revoked_at != ? condition
func (b *GrantQueryBuilder) WhereRevokedAtNEQ(v *int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.RevokedAtNEQ(b.query, v)
	return b
}

// WhereRevokedAtIn adds a WHERE revoked_at IN (?) condition
func (b *GrantQueryBuilder) WhereRevokedAtIn(v []*int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.RevokedAtIn(b.query, v)
	return b
}

// WhereRevokedAtNotIn adds a WHERE revoked_at NOT IN (?) condition
func (b *GrantQueryBuilder) WhereRevokedAtNotIn(v []*int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.RevokedAtNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *GrantQueryBuilder) WhereCreatedAtEQ(v int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *GrantQueryBuilder) WhereCreatedAtNEQ(v int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *GrantQueryBuilder) WhereCreatedAtGT(v int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *GrantQueryBuilder) WhereCreatedAtGTE(v int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *GrantQueryBuilder) WhereCreatedAtLT(v int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *GrantQueryBuilder) WhereCreatedAtLTE(v int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *GrantQueryBuilder) WhereCreatedAtIn(v []int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *GrantQueryBuilder) WhereCreatedAtNotIn(v []int64) *GrantQueryBuilder {
	b.query = GrantQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereReasonEQ adds a WHERE reason = ? condition
func (b *GrantQueryBuilder) WhereReasonEQ(v string) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ReasonEQ(b.query, v)
	return b
}

// WhereReasonNEQ adds a WHERE reason != ? condition
func (b *GrantQueryBuilder) WhereReasonNEQ(v string) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ReasonNEQ(b.query, v)
	return b
}

// WhereReasonIn adds a WHERE reason IN (?) condition
func (b *GrantQueryBuilder) WhereReasonIn(v []string) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ReasonIn(b.query, v)
	return b
}

// WhereReasonNotIn adds a WHERE reason NOT IN (?) condition
func (b *GrantQueryBuilder) WhereReasonNotIn(v []string) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ReasonNotIn(b.query, v)
	return b
}

// WhereReasonContains adds a WHERE reason LIKE ? condition
func (b *GrantQueryBuilder) WhereReasonContains(v string) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ReasonContains(b.query, v)
	return b
}

// WhereReasonHasPrefix adds a WHERE reason LIKE ? condition
func (b *GrantQueryBuilder) WhereReasonHasPrefix(v string) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ReasonHasPrefix(b.query, v)
	return b
}

// WhereReasonHasSuffix adds a WHERE reason LIKE ? condition
func (b *GrantQueryBuilder) WhereReasonHasSuffix(v string) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ReasonHasSuffix(b.query, v)
	return b
}

// WhereFieldOverridesEQ adds a WHERE field_overrides = ? condition
func (b *GrantQueryBuilder) WhereFieldOverridesEQ(v []*permission.FieldPermission) *GrantQueryBuilder {
	b.query = GrantQuery.Where.FieldOverridesEQ(b.query, v)
	return b
}

// WhereFieldOverridesNEQ adds a WHERE field_overrides != ? condition
func (b *GrantQueryBuilder) WhereFieldOverridesNEQ(v []*permission.FieldPermission) *GrantQueryBuilder {
	b.query = GrantQuery.Where.FieldOverridesNEQ(b.query, v)
	return b
}

// WhereFieldOverridesIn adds a WHERE field_overrides IN (?) condition
func (b *GrantQueryBuilder) WhereFieldOverridesIn(v [][]*permission.FieldPermission) *GrantQueryBuilder {
	b.query = GrantQuery.Where.FieldOverridesIn(b.query, v)
	return b
}

// WhereFieldOverridesNotIn adds a WHERE field_overrides NOT IN (?) condition
func (b *GrantQueryBuilder) WhereFieldOverridesNotIn(v [][]*permission.FieldPermission) *GrantQueryBuilder {
	b.query = GrantQuery.Where.FieldOverridesNotIn(b.query, v)
	return b
}

// WhereConditionsEQ adds a WHERE conditions = ? condition
func (b *GrantQueryBuilder) WhereConditionsEQ(v []*permission.Condition) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ConditionsEQ(b.query, v)
	return b
}

// WhereConditionsNEQ adds a WHERE conditions != ? condition
func (b *GrantQueryBuilder) WhereConditionsNEQ(v []*permission.Condition) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ConditionsNEQ(b.query, v)
	return b
}

// WhereConditionsIn adds a WHERE conditions IN (?) condition
func (b *GrantQueryBuilder) WhereConditionsIn(v [][]*permission.Condition) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ConditionsIn(b.query, v)
	return b
}

// WhereConditionsNotIn adds a WHERE conditions NOT IN (?) condition
func (b *GrantQueryBuilder) WhereConditionsNotIn(v [][]*permission.Condition) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ConditionsNotIn(b.query, v)
	return b
}

// WhereResourceIDEQ adds a WHERE resource_id = ? condition
func (b *GrantQueryBuilder) WhereResourceIDEQ(v *pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ResourceIDEQ(b.query, v)
	return b
}

// WhereResourceIDNEQ adds a WHERE resource_id != ? condition
func (b *GrantQueryBuilder) WhereResourceIDNEQ(v *pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ResourceIDNEQ(b.query, v)
	return b
}

// WhereResourceIDIn adds a WHERE resource_id IN (?) condition
func (b *GrantQueryBuilder) WhereResourceIDIn(v []*pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ResourceIDIn(b.query, v)
	return b
}

// WhereResourceIDNotIn adds a WHERE resource_id NOT IN (?) condition
func (b *GrantQueryBuilder) WhereResourceIDNotIn(v []*pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.ResourceIDNotIn(b.query, v)
	return b
}

// WhereAuditTrailEQ adds a WHERE audit_trail = ? condition
func (b *GrantQueryBuilder) WhereAuditTrailEQ(v map[string]any) *GrantQueryBuilder {
	b.query = GrantQuery.Where.AuditTrailEQ(b.query, v)
	return b
}

// WhereAuditTrailNEQ adds a WHERE audit_trail != ? condition
func (b *GrantQueryBuilder) WhereAuditTrailNEQ(v map[string]any) *GrantQueryBuilder {
	b.query = GrantQuery.Where.AuditTrailNEQ(b.query, v)
	return b
}

// WhereAuditTrailIn adds a WHERE audit_trail IN (?) condition
func (b *GrantQueryBuilder) WhereAuditTrailIn(v []map[string]any) *GrantQueryBuilder {
	b.query = GrantQuery.Where.AuditTrailIn(b.query, v)
	return b
}

// WhereAuditTrailNotIn adds a WHERE audit_trail NOT IN (?) condition
func (b *GrantQueryBuilder) WhereAuditTrailNotIn(v []map[string]any) *GrantQueryBuilder {
	b.query = GrantQuery.Where.AuditTrailNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *GrantQueryBuilder) WhereTenant(orgID, buID pulid.ID) *GrantQueryBuilder {
	b.query = GrantQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *GrantQueryBuilder) WhereGroup(sep string, fn func(*GrantQueryBuilder) *GrantQueryBuilder) *GrantQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &GrantQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *GrantQueryBuilder) Where(query string, args ...interface{}) *GrantQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *GrantQueryBuilder) OrderBy(column string, desc ...bool) *GrantQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(GrantQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *GrantQueryBuilder) Limit(n int) *GrantQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *GrantQueryBuilder) Offset(n int) *GrantQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *GrantQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *GrantQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *GrantQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *GrantQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *GrantQueryBuilder) All(ctx context.Context) ([]*Grant, error) {
	var entities []*Grant
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *GrantQueryBuilder) AllWithCount(ctx context.Context) ([]*Grant, int, error) {
	var entities []*Grant
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *GrantQueryBuilder) One(ctx context.Context) (*Grant, error) {
	entity := new(Grant)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *GrantQueryBuilder) First(ctx context.Context) (*Grant, error) {
	entity := new(Grant)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// GrantBuild creates a chainable query builder
func GrantBuild(db bun.IDB) *GrantQueryBuilder {
	return NewGrantQuery(db)
}

// Relationship loading methods

// LoadUser loads the User relationship
func (b *GrantQueryBuilder) LoadUser() *GrantQueryBuilder {
	b.query = b.query.Relation("User")
	return b
}

// LoadPermission loads the Permission relationship
func (b *GrantQueryBuilder) LoadPermission() *GrantQueryBuilder {
	b.query = b.query.Relation("Permission")
	return b
}

// LoadGrantor loads the Grantor relationship
func (b *GrantQueryBuilder) LoadGrantor() *GrantQueryBuilder {
	b.query = b.query.Relation("Grantor")
	return b
}

// LoadRevoker loads the Revoker relationship
func (b *GrantQueryBuilder) LoadRevoker() *GrantQueryBuilder {
	b.query = b.query.Relation("Revoker")
	return b
}

// LoadAllRelations loads all relationships for Grant
func (b *GrantQueryBuilder) LoadAllRelations() *GrantQueryBuilder {
	b.LoadUser()
	b.LoadPermission()
	b.LoadGrantor()
	b.LoadRevoker()
	return b
}
