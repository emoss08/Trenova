// Code generated by gen-trenova. DO NOT EDIT.

package permission

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// templateFieldConfig provides field configuration for Template
type templateFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// TemplateQuery provides type-safe query helpers and constants
var TemplateQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID            string
		Name          string
		Description   string
		Permissions   string
		FieldSettings string
		IsSystem      string
		CreatedAt     string
		UpdatedAt     string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PermissionsEQ        func(q *bun.SelectQuery, v []Permission) *bun.SelectQuery
		PermissionsNEQ       func(q *bun.SelectQuery, v []Permission) *bun.SelectQuery
		PermissionsIn        func(q *bun.SelectQuery, v [][]Permission) *bun.SelectQuery
		PermissionsNotIn     func(q *bun.SelectQuery, v [][]Permission) *bun.SelectQuery
		FieldSettingsEQ      func(q *bun.SelectQuery, v []FieldPermission) *bun.SelectQuery
		FieldSettingsNEQ     func(q *bun.SelectQuery, v []FieldPermission) *bun.SelectQuery
		FieldSettingsIn      func(q *bun.SelectQuery, v [][]FieldPermission) *bun.SelectQuery
		FieldSettingsNotIn   func(q *bun.SelectQuery, v [][]FieldPermission) *bun.SelectQuery
		IsSystemEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemIn           func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsSystemNotIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]templateFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "permission_templates",
	Alias:    "pt",
	IDPrefix: "pt_",

	// Field names
	Field: struct {
		ID            string
		Name          string
		Description   string
		Permissions   string
		FieldSettings string
		IsSystem      string
		CreatedAt     string
		UpdatedAt     string
	}{
		ID:            "id",
		Name:          "name",
		Description:   "description",
		Permissions:   "permissions",
		FieldSettings: "field_settings",
		IsSystem:      "is_system",
		CreatedAt:     "created_at",
		UpdatedAt:     "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "pt." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "pt." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PermissionsEQ        func(q *bun.SelectQuery, v []Permission) *bun.SelectQuery
		PermissionsNEQ       func(q *bun.SelectQuery, v []Permission) *bun.SelectQuery
		PermissionsIn        func(q *bun.SelectQuery, v [][]Permission) *bun.SelectQuery
		PermissionsNotIn     func(q *bun.SelectQuery, v [][]Permission) *bun.SelectQuery
		FieldSettingsEQ      func(q *bun.SelectQuery, v []FieldPermission) *bun.SelectQuery
		FieldSettingsNEQ     func(q *bun.SelectQuery, v []FieldPermission) *bun.SelectQuery
		FieldSettingsIn      func(q *bun.SelectQuery, v [][]FieldPermission) *bun.SelectQuery
		FieldSettingsNotIn   func(q *bun.SelectQuery, v [][]FieldPermission) *bun.SelectQuery
		IsSystemEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemIn           func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsSystemNotIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pt.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pt.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pt.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pt.id"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pt.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pt.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pt.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pt.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pt.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pt.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pt.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pt.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pt.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pt.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pt.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pt.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pt.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pt.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pt.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pt.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pt.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pt.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pt.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pt.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pt.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pt.description"), "%"+v)
		},
		PermissionsEQ: func(q *bun.SelectQuery, v []Permission) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pt.permissions"), v)
		},
		PermissionsNEQ: func(q *bun.SelectQuery, v []Permission) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pt.permissions"), v)
		},
		PermissionsIn: func(q *bun.SelectQuery, v [][]Permission) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pt.permissions"), bun.In(v))
		},
		PermissionsNotIn: func(q *bun.SelectQuery, v [][]Permission) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pt.permissions"), bun.In(v))
		},
		FieldSettingsEQ: func(q *bun.SelectQuery, v []FieldPermission) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pt.field_settings"), v)
		},
		FieldSettingsNEQ: func(q *bun.SelectQuery, v []FieldPermission) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pt.field_settings"), v)
		},
		FieldSettingsIn: func(q *bun.SelectQuery, v [][]FieldPermission) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pt.field_settings"), bun.In(v))
		},
		FieldSettingsNotIn: func(q *bun.SelectQuery, v [][]FieldPermission) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pt.field_settings"), bun.In(v))
		},
		IsSystemEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pt.is_system"), v)
		},
		IsSystemNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pt.is_system"), v)
		},
		IsSystemIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pt.is_system"), bun.In(v))
		},
		IsSystemNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pt.is_system"), bun.In(v))
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pt.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pt.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pt.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pt.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pt.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pt.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pt.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pt.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pt.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pt.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pt.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pt.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pt.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pt.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pt.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pt.updated_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "pt." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"pt.name ASC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "pt.created_at DESC"
			}
			return "pt.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "pt.updated_at DESC"
			}
			return "pt.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]templateFieldConfig {
		return map[string]templateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pt.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "pt.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "pt.description",
				Sortable:   false,
				Filterable: false,
			},
			"permissions": {
				Name:       "permissions",
				Column:     "pt.permissions",
				Sortable:   false,
				Filterable: false,
			},
			"field_settings": {
				Name:       "field_settings",
				Column:     "pt.field_settings",
				Sortable:   false,
				Filterable: false,
			},
			"is_system": {
				Name:       "is_system",
				Column:     "pt.is_system",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pt.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pt.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]templateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pt.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "pt.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "pt.description",
				Sortable:   false,
				Filterable: false,
			},
			"permissions": {
				Name:       "permissions",
				Column:     "pt.permissions",
				Sortable:   false,
				Filterable: false,
			},
			"field_settings": {
				Name:       "field_settings",
				Column:     "pt.field_settings",
				Sortable:   false,
				Filterable: false,
			},
			"is_system": {
				Name:       "is_system",
				Column:     "pt.is_system",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pt.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pt.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]templateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pt.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "pt.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "pt.description",
				Sortable:   false,
				Filterable: false,
			},
			"permissions": {
				Name:       "permissions",
				Column:     "pt.permissions",
				Sortable:   false,
				Filterable: false,
			},
			"field_settings": {
				Name:       "field_settings",
				Column:     "pt.field_settings",
				Sortable:   false,
				Filterable: false,
			},
			"is_system": {
				Name:       "is_system",
				Column:     "pt.is_system",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pt.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pt.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// TemplateQueryBuilder provides a fluent interface for building queries
type TemplateQueryBuilder struct {
	query *bun.SelectQuery
}

// NewTemplateQuery creates a new query builder
func NewTemplateQuery(db bun.IDB) *TemplateQueryBuilder {
	return &TemplateQueryBuilder{
		query: db.NewSelect().Model((*Template)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func TemplateFromQuery(q *bun.SelectQuery) *TemplateQueryBuilder {
	return &TemplateQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *TemplateQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *TemplateQueryBuilder) Model(model interface{}) *TemplateQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *TemplateQueryBuilder) WhereIDEQ(v pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *TemplateQueryBuilder) WhereIDNEQ(v pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *TemplateQueryBuilder) WhereIDIn(v []pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereIDNotIn(v []pulid.ID) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *TemplateQueryBuilder) WhereNameEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *TemplateQueryBuilder) WhereNameNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *TemplateQueryBuilder) WhereNameIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereNameNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *TemplateQueryBuilder) WhereNameContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *TemplateQueryBuilder) WhereNameHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *TemplateQueryBuilder) WhereNameHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *TemplateQueryBuilder) WhereDescriptionEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *TemplateQueryBuilder) WhereDescriptionNEQ(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *TemplateQueryBuilder) WhereDescriptionIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereDescriptionNotIn(v []string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *TemplateQueryBuilder) WhereDescriptionContains(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *TemplateQueryBuilder) WhereDescriptionHasPrefix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *TemplateQueryBuilder) WhereDescriptionHasSuffix(v string) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WherePermissionsEQ adds a WHERE permissions = ? condition
func (b *TemplateQueryBuilder) WherePermissionsEQ(v []Permission) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.PermissionsEQ(b.query, v)
	return b
}

// WherePermissionsNEQ adds a WHERE permissions != ? condition
func (b *TemplateQueryBuilder) WherePermissionsNEQ(v []Permission) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.PermissionsNEQ(b.query, v)
	return b
}

// WherePermissionsIn adds a WHERE permissions IN (?) condition
func (b *TemplateQueryBuilder) WherePermissionsIn(v [][]Permission) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.PermissionsIn(b.query, v)
	return b
}

// WherePermissionsNotIn adds a WHERE permissions NOT IN (?) condition
func (b *TemplateQueryBuilder) WherePermissionsNotIn(v [][]Permission) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.PermissionsNotIn(b.query, v)
	return b
}

// WhereFieldSettingsEQ adds a WHERE field_settings = ? condition
func (b *TemplateQueryBuilder) WhereFieldSettingsEQ(v []FieldPermission) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.FieldSettingsEQ(b.query, v)
	return b
}

// WhereFieldSettingsNEQ adds a WHERE field_settings != ? condition
func (b *TemplateQueryBuilder) WhereFieldSettingsNEQ(v []FieldPermission) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.FieldSettingsNEQ(b.query, v)
	return b
}

// WhereFieldSettingsIn adds a WHERE field_settings IN (?) condition
func (b *TemplateQueryBuilder) WhereFieldSettingsIn(v [][]FieldPermission) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.FieldSettingsIn(b.query, v)
	return b
}

// WhereFieldSettingsNotIn adds a WHERE field_settings NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereFieldSettingsNotIn(v [][]FieldPermission) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.FieldSettingsNotIn(b.query, v)
	return b
}

// WhereIsSystemEQ adds a WHERE is_system = ? condition
func (b *TemplateQueryBuilder) WhereIsSystemEQ(v bool) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IsSystemEQ(b.query, v)
	return b
}

// WhereIsSystemNEQ adds a WHERE is_system != ? condition
func (b *TemplateQueryBuilder) WhereIsSystemNEQ(v bool) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IsSystemNEQ(b.query, v)
	return b
}

// WhereIsSystemIn adds a WHERE is_system IN (?) condition
func (b *TemplateQueryBuilder) WhereIsSystemIn(v []bool) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IsSystemIn(b.query, v)
	return b
}

// WhereIsSystemNotIn adds a WHERE is_system NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereIsSystemNotIn(v []bool) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.IsSystemNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtNEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtGT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtGTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtLT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *TemplateQueryBuilder) WhereCreatedAtLTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *TemplateQueryBuilder) WhereCreatedAtIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereCreatedAtNotIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtNEQ(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtGT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtGTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtLT(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *TemplateQueryBuilder) WhereUpdatedAtLTE(v int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *TemplateQueryBuilder) WhereUpdatedAtIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *TemplateQueryBuilder) WhereUpdatedAtNotIn(v []int64) *TemplateQueryBuilder {
	b.query = TemplateQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *TemplateQueryBuilder) WhereGroup(sep string, fn func(*TemplateQueryBuilder) *TemplateQueryBuilder) *TemplateQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &TemplateQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *TemplateQueryBuilder) Where(query string, args ...interface{}) *TemplateQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *TemplateQueryBuilder) OrderBy(column string, desc ...bool) *TemplateQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(TemplateQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *TemplateQueryBuilder) Limit(n int) *TemplateQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *TemplateQueryBuilder) Offset(n int) *TemplateQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *TemplateQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *TemplateQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *TemplateQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *TemplateQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *TemplateQueryBuilder) All(ctx context.Context) ([]*Template, error) {
	var entities []*Template
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *TemplateQueryBuilder) AllWithCount(ctx context.Context) ([]*Template, int, error) {
	var entities []*Template
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *TemplateQueryBuilder) One(ctx context.Context) (*Template, error) {
	entity := new(Template)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *TemplateQueryBuilder) First(ctx context.Context) (*Template, error) {
	entity := new(Template)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// TemplateBuild creates a chainable query builder
func TemplateBuild(db bun.IDB) *TemplateQueryBuilder {
	return NewTemplateQuery(db)
}

// Relationship loading methods

// TemplateRelationChain provides a fluent API for building nested relationship chains
type TemplateRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewTemplateRelationChain creates a new relation chain builder
func NewTemplateRelationChain() *TemplateRelationChain {
	return &TemplateRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *TemplateRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *TemplateRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *TemplateRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *TemplateRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// TemplateRelationChainBuilder provides fluent API for building nested relations
type TemplateRelationChainBuilder struct {
	parent *TemplateQueryBuilder
	chain  *TemplateRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *TemplateRelationChainBuilder) Load() *TemplateQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *TemplateRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *TemplateRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *TemplateRelationChainBuilder) OrderBy(order string) *TemplateRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *TemplateRelationChainBuilder) Where(condition string, args ...interface{}) *TemplateRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
