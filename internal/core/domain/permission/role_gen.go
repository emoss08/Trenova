// Code generated by gen-trenova. DO NOT EDIT.

package permission

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// roleFieldConfig provides field configuration for Role
type roleFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// RoleQuery provides type-safe query helpers and constants
var RoleQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		Name           string
		Description    string
		RoleType       string
		IsSystem       string
		Priority       string
		Status         string
		ExpiresAt      string
		CreatedAt      string
		UpdatedAt      string
		BusinessUnitID string
		OrganizationID string
		ParentRoleID   string
		Metadata       string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RoleTypeEQ            func(q *bun.SelectQuery, v RoleType) *bun.SelectQuery
		RoleTypeNEQ           func(q *bun.SelectQuery, v RoleType) *bun.SelectQuery
		RoleTypeIn            func(q *bun.SelectQuery, v []RoleType) *bun.SelectQuery
		RoleTypeNotIn         func(q *bun.SelectQuery, v []RoleType) *bun.SelectQuery
		IsSystemEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsSystemNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		PriorityEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		PriorityNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		PriorityGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		StatusEQ              func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ             func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn              func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn           func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		ExpiresAtEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtNEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtIn           func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtNotIn        func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ExpiresAtIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ParentRoleIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ParentRoleIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ParentRoleIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ParentRoleIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ParentRoleIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ParentRoleIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		MetadataEQ            func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ           func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn            func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn         func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]roleFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		ParentRole string
		ChildRoles string
	}
}{
	// Table and alias constants
	Table:    "roles",
	Alias:    "r",
	IDPrefix: "r_",

	// Field names
	Field: struct {
		ID             string
		Name           string
		Description    string
		RoleType       string
		IsSystem       string
		Priority       string
		Status         string
		ExpiresAt      string
		CreatedAt      string
		UpdatedAt      string
		BusinessUnitID string
		OrganizationID string
		ParentRoleID   string
		Metadata       string
	}{
		ID:             "id",
		Name:           "name",
		Description:    "description",
		RoleType:       "role_type",
		IsSystem:       "is_system",
		Priority:       "priority",
		Status:         "status",
		ExpiresAt:      "expires_at",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		ParentRoleID:   "parent_role_id",
		Metadata:       "metadata",
	},

	// Column helpers
	Column: func(field string) string {
		return "r." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "r." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RoleTypeEQ            func(q *bun.SelectQuery, v RoleType) *bun.SelectQuery
		RoleTypeNEQ           func(q *bun.SelectQuery, v RoleType) *bun.SelectQuery
		RoleTypeIn            func(q *bun.SelectQuery, v []RoleType) *bun.SelectQuery
		RoleTypeNotIn         func(q *bun.SelectQuery, v []RoleType) *bun.SelectQuery
		IsSystemEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsSystemNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		PriorityEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		PriorityNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		PriorityGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		PriorityLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		StatusEQ              func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ             func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn              func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn           func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		ExpiresAtEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtNEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtIn           func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtNotIn        func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		ExpiresAtIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		BusinessUnitIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ParentRoleIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ParentRoleIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ParentRoleIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ParentRoleIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ParentRoleIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ParentRoleIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		MetadataEQ            func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ           func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn            func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn         func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		Tenant                func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.id"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("r.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("r.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("r.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("r.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("r.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("r.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("r.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("r.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("r.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("r.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("r.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("r.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("r.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("r.description"), "%"+v)
		},
		RoleTypeEQ: func(q *bun.SelectQuery, v RoleType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.role_type"), v)
		},
		RoleTypeNEQ: func(q *bun.SelectQuery, v RoleType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.role_type"), v)
		},
		RoleTypeIn: func(q *bun.SelectQuery, v []RoleType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.role_type"), bun.In(v))
		},
		RoleTypeNotIn: func(q *bun.SelectQuery, v []RoleType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.role_type"), bun.In(v))
		},
		IsSystemEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.is_system"), v)
		},
		IsSystemNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.is_system"), v)
		},
		IsSystemIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.is_system"), bun.In(v))
		},
		IsSystemNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.is_system"), bun.In(v))
		},
		PriorityEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.priority"), v)
		},
		PriorityNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.priority"), v)
		},
		PriorityIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.priority"), bun.In(v))
		},
		PriorityNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.priority"), bun.In(v))
		},
		PriorityGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("r.priority"), v)
		},
		PriorityGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("r.priority"), v)
		},
		PriorityLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("r.priority"), v)
		},
		PriorityLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("r.priority"), v)
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.status"), bun.In(v))
		},
		ExpiresAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.expires_at"), v)
		},
		ExpiresAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.expires_at"), v)
		},
		ExpiresAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.expires_at"), bun.In(v))
		},
		ExpiresAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.expires_at"), bun.In(v))
		},
		ExpiresAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("r.expires_at"))
		},
		ExpiresAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("r.expires_at"))
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("r.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("r.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("r.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("r.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("r.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("r.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("r.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("r.updated_at"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.organization_id"), bun.In(v))
		},
		ParentRoleIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.parent_role_id"), v)
		},
		ParentRoleIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.parent_role_id"), v)
		},
		ParentRoleIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.parent_role_id"), bun.In(v))
		},
		ParentRoleIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.parent_role_id"), bun.In(v))
		},
		ParentRoleIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("r.parent_role_id"))
		},
		ParentRoleIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("r.parent_role_id"))
		},
		MetadataEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("r.metadata"), v)
		},
		MetadataNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("r.metadata"), v)
		},
		MetadataIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("r.metadata"), bun.In(v))
		},
		MetadataNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("r.metadata"), bun.In(v))
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("r.organization_id"), orgID).
				Where("? = ?", bun.Ident("r.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
	}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "r." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"r.status ASC",
				"r.name ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "r.status DESC"
			}
			return "r.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "r.created_at DESC"
			}
			return "r.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "r.updated_at DESC"
			}
			return "r.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]roleFieldConfig {
		return map[string]roleFieldConfig{
			"id": {
				Name:       "id",
				Column:     "r.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "r.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "r.description",
				Sortable:   false,
				Filterable: false,
			},
			"role_type": {
				Name:       "role_type",
				Column:     "r.role_type",
				Sortable:   false,
				Filterable: false,
			},
			"is_system": {
				Name:       "is_system",
				Column:     "r.is_system",
				Sortable:   false,
				Filterable: false,
			},
			"priority": {
				Name:       "priority",
				Column:     "r.priority",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "r.status",
				Sortable:   true,
				Filterable: true,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "r.expires_at",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "r.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "r.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "r.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "r.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"parent_role_id": {
				Name:       "parent_role_id",
				Column:     "r.parent_role_id",
				Sortable:   false,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "r.metadata",
				Sortable:   false,
				Filterable: false,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]roleFieldConfig{
			"id": {
				Name:       "id",
				Column:     "r.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "r.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "r.description",
				Sortable:   false,
				Filterable: false,
			},
			"role_type": {
				Name:       "role_type",
				Column:     "r.role_type",
				Sortable:   false,
				Filterable: false,
			},
			"is_system": {
				Name:       "is_system",
				Column:     "r.is_system",
				Sortable:   false,
				Filterable: false,
			},
			"priority": {
				Name:       "priority",
				Column:     "r.priority",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "r.status",
				Sortable:   true,
				Filterable: true,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "r.expires_at",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "r.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "r.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "r.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "r.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"parent_role_id": {
				Name:       "parent_role_id",
				Column:     "r.parent_role_id",
				Sortable:   false,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "r.metadata",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]roleFieldConfig{
			"id": {
				Name:       "id",
				Column:     "r.id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "r.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "r.description",
				Sortable:   false,
				Filterable: false,
			},
			"role_type": {
				Name:       "role_type",
				Column:     "r.role_type",
				Sortable:   false,
				Filterable: false,
			},
			"is_system": {
				Name:       "is_system",
				Column:     "r.is_system",
				Sortable:   false,
				Filterable: false,
			},
			"priority": {
				Name:       "priority",
				Column:     "r.priority",
				Sortable:   false,
				Filterable: false,
			},
			"status": {
				Name:       "status",
				Column:     "r.status",
				Sortable:   true,
				Filterable: true,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "r.expires_at",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "r.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "r.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "r.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "r.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"parent_role_id": {
				Name:       "parent_role_id",
				Column:     "r.parent_role_id",
				Sortable:   false,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "r.metadata",
				Sortable:   false,
				Filterable: false,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		ParentRole string
		ChildRoles string
	}{
		ParentRole: "ParentRole",
		ChildRoles: "ChildRoles",
	},
}

// RoleQueryBuilder provides a fluent interface for building queries
type RoleQueryBuilder struct {
	query *bun.SelectQuery
}

// NewRoleQuery creates a new query builder
func NewRoleQuery(db bun.IDB) *RoleQueryBuilder {
	return &RoleQueryBuilder{
		query: db.NewSelect().Model((*Role)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func RoleFromQuery(q *bun.SelectQuery) *RoleQueryBuilder {
	return &RoleQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *RoleQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *RoleQueryBuilder) Model(model interface{}) *RoleQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *RoleQueryBuilder) WhereIDEQ(v pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *RoleQueryBuilder) WhereIDNEQ(v pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *RoleQueryBuilder) WhereIDIn(v []pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *RoleQueryBuilder) WhereIDNotIn(v []pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *RoleQueryBuilder) WhereNameEQ(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *RoleQueryBuilder) WhereNameNEQ(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *RoleQueryBuilder) WhereNameIn(v []string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *RoleQueryBuilder) WhereNameNotIn(v []string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *RoleQueryBuilder) WhereNameContains(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *RoleQueryBuilder) WhereNameHasPrefix(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *RoleQueryBuilder) WhereNameHasSuffix(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *RoleQueryBuilder) WhereDescriptionEQ(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *RoleQueryBuilder) WhereDescriptionNEQ(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *RoleQueryBuilder) WhereDescriptionIn(v []string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *RoleQueryBuilder) WhereDescriptionNotIn(v []string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *RoleQueryBuilder) WhereDescriptionContains(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *RoleQueryBuilder) WhereDescriptionHasPrefix(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *RoleQueryBuilder) WhereDescriptionHasSuffix(v string) *RoleQueryBuilder {
	b.query = RoleQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereRoleTypeEQ adds a WHERE role_type = ? condition
func (b *RoleQueryBuilder) WhereRoleTypeEQ(v RoleType) *RoleQueryBuilder {
	b.query = RoleQuery.Where.RoleTypeEQ(b.query, v)
	return b
}

// WhereRoleTypeNEQ adds a WHERE role_type != ? condition
func (b *RoleQueryBuilder) WhereRoleTypeNEQ(v RoleType) *RoleQueryBuilder {
	b.query = RoleQuery.Where.RoleTypeNEQ(b.query, v)
	return b
}

// WhereRoleTypeIn adds a WHERE role_type IN (?) condition
func (b *RoleQueryBuilder) WhereRoleTypeIn(v []RoleType) *RoleQueryBuilder {
	b.query = RoleQuery.Where.RoleTypeIn(b.query, v)
	return b
}

// WhereRoleTypeNotIn adds a WHERE role_type NOT IN (?) condition
func (b *RoleQueryBuilder) WhereRoleTypeNotIn(v []RoleType) *RoleQueryBuilder {
	b.query = RoleQuery.Where.RoleTypeNotIn(b.query, v)
	return b
}

// WhereIsSystemEQ adds a WHERE is_system = ? condition
func (b *RoleQueryBuilder) WhereIsSystemEQ(v bool) *RoleQueryBuilder {
	b.query = RoleQuery.Where.IsSystemEQ(b.query, v)
	return b
}

// WhereIsSystemNEQ adds a WHERE is_system != ? condition
func (b *RoleQueryBuilder) WhereIsSystemNEQ(v bool) *RoleQueryBuilder {
	b.query = RoleQuery.Where.IsSystemNEQ(b.query, v)
	return b
}

// WhereIsSystemIn adds a WHERE is_system IN (?) condition
func (b *RoleQueryBuilder) WhereIsSystemIn(v []bool) *RoleQueryBuilder {
	b.query = RoleQuery.Where.IsSystemIn(b.query, v)
	return b
}

// WhereIsSystemNotIn adds a WHERE is_system NOT IN (?) condition
func (b *RoleQueryBuilder) WhereIsSystemNotIn(v []bool) *RoleQueryBuilder {
	b.query = RoleQuery.Where.IsSystemNotIn(b.query, v)
	return b
}

// WherePriorityEQ adds a WHERE priority = ? condition
func (b *RoleQueryBuilder) WherePriorityEQ(v int) *RoleQueryBuilder {
	b.query = RoleQuery.Where.PriorityEQ(b.query, v)
	return b
}

// WherePriorityNEQ adds a WHERE priority != ? condition
func (b *RoleQueryBuilder) WherePriorityNEQ(v int) *RoleQueryBuilder {
	b.query = RoleQuery.Where.PriorityNEQ(b.query, v)
	return b
}

// WherePriorityGT adds a WHERE priority > ? condition
func (b *RoleQueryBuilder) WherePriorityGT(v int) *RoleQueryBuilder {
	b.query = RoleQuery.Where.PriorityGT(b.query, v)
	return b
}

// WherePriorityGTE adds a WHERE priority >= ? condition
func (b *RoleQueryBuilder) WherePriorityGTE(v int) *RoleQueryBuilder {
	b.query = RoleQuery.Where.PriorityGTE(b.query, v)
	return b
}

// WherePriorityLT adds a WHERE priority < ? condition
func (b *RoleQueryBuilder) WherePriorityLT(v int) *RoleQueryBuilder {
	b.query = RoleQuery.Where.PriorityLT(b.query, v)
	return b
}

// WherePriorityLTE adds a WHERE priority <= ? condition
func (b *RoleQueryBuilder) WherePriorityLTE(v int) *RoleQueryBuilder {
	b.query = RoleQuery.Where.PriorityLTE(b.query, v)
	return b
}

// WherePriorityIn adds a WHERE priority IN (?) condition
func (b *RoleQueryBuilder) WherePriorityIn(v []int) *RoleQueryBuilder {
	b.query = RoleQuery.Where.PriorityIn(b.query, v)
	return b
}

// WherePriorityNotIn adds a WHERE priority NOT IN (?) condition
func (b *RoleQueryBuilder) WherePriorityNotIn(v []int) *RoleQueryBuilder {
	b.query = RoleQuery.Where.PriorityNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *RoleQueryBuilder) WhereStatusEQ(v domain.Status) *RoleQueryBuilder {
	b.query = RoleQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *RoleQueryBuilder) WhereStatusNEQ(v domain.Status) *RoleQueryBuilder {
	b.query = RoleQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *RoleQueryBuilder) WhereStatusIn(v []domain.Status) *RoleQueryBuilder {
	b.query = RoleQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *RoleQueryBuilder) WhereStatusNotIn(v []domain.Status) *RoleQueryBuilder {
	b.query = RoleQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereExpiresAtEQ adds a WHERE expires_at = ? condition
func (b *RoleQueryBuilder) WhereExpiresAtEQ(v *int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.ExpiresAtEQ(b.query, v)
	return b
}

// WhereExpiresAtNEQ adds a WHERE expires_at != ? condition
func (b *RoleQueryBuilder) WhereExpiresAtNEQ(v *int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.ExpiresAtNEQ(b.query, v)
	return b
}

// WhereExpiresAtIn adds a WHERE expires_at IN (?) condition
func (b *RoleQueryBuilder) WhereExpiresAtIn(v []*int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.ExpiresAtIn(b.query, v)
	return b
}

// WhereExpiresAtNotIn adds a WHERE expires_at NOT IN (?) condition
func (b *RoleQueryBuilder) WhereExpiresAtNotIn(v []*int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.ExpiresAtNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *RoleQueryBuilder) WhereCreatedAtEQ(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *RoleQueryBuilder) WhereCreatedAtNEQ(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *RoleQueryBuilder) WhereCreatedAtGT(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *RoleQueryBuilder) WhereCreatedAtGTE(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *RoleQueryBuilder) WhereCreatedAtLT(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *RoleQueryBuilder) WhereCreatedAtLTE(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *RoleQueryBuilder) WhereCreatedAtIn(v []int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *RoleQueryBuilder) WhereCreatedAtNotIn(v []int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *RoleQueryBuilder) WhereUpdatedAtEQ(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *RoleQueryBuilder) WhereUpdatedAtNEQ(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *RoleQueryBuilder) WhereUpdatedAtGT(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *RoleQueryBuilder) WhereUpdatedAtGTE(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *RoleQueryBuilder) WhereUpdatedAtLT(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *RoleQueryBuilder) WhereUpdatedAtLTE(v int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *RoleQueryBuilder) WhereUpdatedAtIn(v []int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *RoleQueryBuilder) WhereUpdatedAtNotIn(v []int64) *RoleQueryBuilder {
	b.query = RoleQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *RoleQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *RoleQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *RoleQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *RoleQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *RoleQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *RoleQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *RoleQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *RoleQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereParentRoleIDEQ adds a WHERE parent_role_id = ? condition
func (b *RoleQueryBuilder) WhereParentRoleIDEQ(v *pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.ParentRoleIDEQ(b.query, v)
	return b
}

// WhereParentRoleIDNEQ adds a WHERE parent_role_id != ? condition
func (b *RoleQueryBuilder) WhereParentRoleIDNEQ(v *pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.ParentRoleIDNEQ(b.query, v)
	return b
}

// WhereParentRoleIDIn adds a WHERE parent_role_id IN (?) condition
func (b *RoleQueryBuilder) WhereParentRoleIDIn(v []*pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.ParentRoleIDIn(b.query, v)
	return b
}

// WhereParentRoleIDNotIn adds a WHERE parent_role_id NOT IN (?) condition
func (b *RoleQueryBuilder) WhereParentRoleIDNotIn(v []*pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.ParentRoleIDNotIn(b.query, v)
	return b
}

// WhereMetadataEQ adds a WHERE metadata = ? condition
func (b *RoleQueryBuilder) WhereMetadataEQ(v map[string]any) *RoleQueryBuilder {
	b.query = RoleQuery.Where.MetadataEQ(b.query, v)
	return b
}

// WhereMetadataNEQ adds a WHERE metadata != ? condition
func (b *RoleQueryBuilder) WhereMetadataNEQ(v map[string]any) *RoleQueryBuilder {
	b.query = RoleQuery.Where.MetadataNEQ(b.query, v)
	return b
}

// WhereMetadataIn adds a WHERE metadata IN (?) condition
func (b *RoleQueryBuilder) WhereMetadataIn(v []map[string]any) *RoleQueryBuilder {
	b.query = RoleQuery.Where.MetadataIn(b.query, v)
	return b
}

// WhereMetadataNotIn adds a WHERE metadata NOT IN (?) condition
func (b *RoleQueryBuilder) WhereMetadataNotIn(v []map[string]any) *RoleQueryBuilder {
	b.query = RoleQuery.Where.MetadataNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *RoleQueryBuilder) WhereTenant(orgID, buID pulid.ID) *RoleQueryBuilder {
	b.query = RoleQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *RoleQueryBuilder) WhereGroup(sep string, fn func(*RoleQueryBuilder) *RoleQueryBuilder) *RoleQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &RoleQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *RoleQueryBuilder) Where(query string, args ...interface{}) *RoleQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *RoleQueryBuilder) OrderBy(column string, desc ...bool) *RoleQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(RoleQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *RoleQueryBuilder) Limit(n int) *RoleQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *RoleQueryBuilder) Offset(n int) *RoleQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *RoleQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *RoleQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *RoleQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *RoleQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *RoleQueryBuilder) All(ctx context.Context) ([]*Role, error) {
	var entities []*Role
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *RoleQueryBuilder) AllWithCount(ctx context.Context) ([]*Role, int, error) {
	var entities []*Role
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *RoleQueryBuilder) One(ctx context.Context) (*Role, error) {
	entity := new(Role)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *RoleQueryBuilder) First(ctx context.Context) (*Role, error) {
	entity := new(Role)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// RoleBuild creates a chainable query builder
func RoleBuild(db bun.IDB) *RoleQueryBuilder {
	return NewRoleQuery(db)
}

// Relationship loading methods

// LoadParentRole loads the ParentRole relationship
func (b *RoleQueryBuilder) LoadParentRole() *RoleQueryBuilder {
	b.query = b.query.Relation("ParentRole")
	return b
}

// LoadChildRoles loads the ChildRoles relationship
func (b *RoleQueryBuilder) LoadChildRoles(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *RoleQueryBuilder {
	if len(opts) > 0 {
		b.query = b.query.Relation("ChildRoles", func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		})
	} else {
		b.query = b.query.Relation("ChildRoles")
	}
	return b
}

// LoadAllRelations loads all relationships for Role
func (b *RoleQueryBuilder) LoadAllRelations() *RoleQueryBuilder {
	b.LoadParentRole()
	b.LoadChildRoles()
	return b
}
