// Code generated by gen-trenova. DO NOT EDIT.

package pcmilerconfiguration

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// pCMilerConfigurationFieldConfig provides field configuration for PCMilerConfiguration
type pCMilerConfigurationFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// PCMilerConfigurationQuery provides type-safe query helpers and constants
var PCMilerConfigurationQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		APIKey         string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		APIKeyEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		APIKeyNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		APIKeyGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]pCMilerConfigurationFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
	}
}{
	// Table and alias constants
	Table:    "pcmiler_configurations",
	Alias:    "pcm",
	IDPrefix: "pcm_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		APIKey         string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		APIKey:         "api_key",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "pcm." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "pcm." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		APIKeyEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		APIKeyNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		APIKeyGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		APIKeyHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant              func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pcm.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pcm.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pcm.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pcm.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pcm.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pcm.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pcm.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pcm.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pcm.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pcm.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pcm.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pcm.organization_id"), bun.In(v))
		},
		APIKeyEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pcm.api_key"), v)
		},
		APIKeyNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pcm.api_key"), v)
		},
		APIKeyIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pcm.api_key"), bun.In(v))
		},
		APIKeyNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pcm.api_key"), bun.In(v))
		},
		APIKeyGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pcm.api_key"), v)
		},
		APIKeyGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pcm.api_key"), v)
		},
		APIKeyLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pcm.api_key"), v)
		},
		APIKeyLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pcm.api_key"), v)
		},
		APIKeyContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pcm.api_key"), "%"+v+"%")
		},
		APIKeyHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pcm.api_key"), v+"%")
		},
		APIKeyHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("pcm.api_key"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pcm.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pcm.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pcm.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pcm.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pcm.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pcm.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pcm.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pcm.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pcm.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pcm.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pcm.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pcm.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pcm.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pcm.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pcm.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pcm.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("pcm.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("pcm.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("pcm.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("pcm.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("pcm.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("pcm.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("pcm.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("pcm.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("pcm.organization_id"), orgID).
				Where("? = ?", bun.Ident("pcm.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("pcm.id"), id).
				Where("? = ?", bun.Ident("pcm.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "pcm." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"pcm.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "pcm.created_at DESC"
			}
			return "pcm.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "pcm.updated_at DESC"
			}
			return "pcm.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]pCMilerConfigurationFieldConfig {
		return map[string]pCMilerConfigurationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pcm.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pcm.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pcm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"api_key": {
				Name:       "api_key",
				Column:     "pcm.api_key",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "pcm.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pcm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pcm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]pCMilerConfigurationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pcm.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pcm.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pcm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"api_key": {
				Name:       "api_key",
				Column:     "pcm.api_key",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "pcm.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pcm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pcm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]pCMilerConfigurationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "pcm.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "pcm.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "pcm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"api_key": {
				Name:       "api_key",
				Column:     "pcm.api_key",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "pcm.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "pcm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "pcm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
	},
}

// PCMilerConfigurationQueryBuilder provides a fluent interface for building queries
type PCMilerConfigurationQueryBuilder struct {
	query *bun.SelectQuery
}

// NewPCMilerConfigurationQuery creates a new query builder
func NewPCMilerConfigurationQuery(db bun.IDB) *PCMilerConfigurationQueryBuilder {
	return &PCMilerConfigurationQueryBuilder{
		query: db.NewSelect().Model((*PCMilerConfiguration)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func PCMilerConfigurationFromQuery(q *bun.SelectQuery) *PCMilerConfigurationQueryBuilder {
	return &PCMilerConfigurationQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *PCMilerConfigurationQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *PCMilerConfigurationQueryBuilder) Model(model interface{}) *PCMilerConfigurationQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereIDEQ(v pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereIDNEQ(v pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereIDIn(v []pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereIDNotIn(v []pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereAPIKeyEQ adds a WHERE api_key = ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereAPIKeyEQ(v string) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.APIKeyEQ(b.query, v)
	return b
}

// WhereAPIKeyNEQ adds a WHERE api_key != ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereAPIKeyNEQ(v string) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.APIKeyNEQ(b.query, v)
	return b
}

// WhereAPIKeyIn adds a WHERE api_key IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereAPIKeyIn(v []string) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.APIKeyIn(b.query, v)
	return b
}

// WhereAPIKeyNotIn adds a WHERE api_key NOT IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereAPIKeyNotIn(v []string) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.APIKeyNotIn(b.query, v)
	return b
}

// WhereAPIKeyContains adds a WHERE api_key LIKE ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereAPIKeyContains(v string) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.APIKeyContains(b.query, v)
	return b
}

// WhereAPIKeyHasPrefix adds a WHERE api_key LIKE ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereAPIKeyHasPrefix(v string) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.APIKeyHasPrefix(b.query, v)
	return b
}

// WhereAPIKeyHasSuffix adds a WHERE api_key LIKE ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereAPIKeyHasSuffix(v string) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.APIKeyHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereVersionEQ(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereVersionNEQ(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereVersionGT(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereVersionGTE(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereVersionLT(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereVersionLTE(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereVersionIn(v []int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereVersionNotIn(v []int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereCreatedAtEQ(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereCreatedAtNEQ(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereCreatedAtGT(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereCreatedAtGTE(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereCreatedAtLT(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereCreatedAtLTE(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereCreatedAtIn(v []int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereCreatedAtNotIn(v []int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereUpdatedAtEQ(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereUpdatedAtNEQ(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereUpdatedAtGT(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereUpdatedAtGTE(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereUpdatedAtLT(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *PCMilerConfigurationQueryBuilder) WhereUpdatedAtLTE(v int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereUpdatedAtIn(v []int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *PCMilerConfigurationQueryBuilder) WhereUpdatedAtNotIn(v []int64) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *PCMilerConfigurationQueryBuilder) WhereTenant(orgID, buID pulid.ID) *PCMilerConfigurationQueryBuilder {
	b.query = PCMilerConfigurationQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *PCMilerConfigurationQueryBuilder) WhereGroup(sep string, fn func(*PCMilerConfigurationQueryBuilder) *PCMilerConfigurationQueryBuilder) *PCMilerConfigurationQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &PCMilerConfigurationQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *PCMilerConfigurationQueryBuilder) Where(query string, args ...interface{}) *PCMilerConfigurationQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *PCMilerConfigurationQueryBuilder) OrderBy(column string, desc ...bool) *PCMilerConfigurationQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(PCMilerConfigurationQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *PCMilerConfigurationQueryBuilder) Limit(n int) *PCMilerConfigurationQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *PCMilerConfigurationQueryBuilder) Offset(n int) *PCMilerConfigurationQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *PCMilerConfigurationQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *PCMilerConfigurationQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *PCMilerConfigurationQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *PCMilerConfigurationQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *PCMilerConfigurationQueryBuilder) All(ctx context.Context) ([]*PCMilerConfiguration, error) {
	var entities []*PCMilerConfiguration
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *PCMilerConfigurationQueryBuilder) AllWithCount(ctx context.Context) ([]*PCMilerConfiguration, int, error) {
	var entities []*PCMilerConfiguration
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *PCMilerConfigurationQueryBuilder) One(ctx context.Context) (*PCMilerConfiguration, error) {
	entity := new(PCMilerConfiguration)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *PCMilerConfigurationQueryBuilder) First(ctx context.Context) (*PCMilerConfiguration, error) {
	entity := new(PCMilerConfiguration)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// PCMilerConfigurationBuild creates a chainable query builder
func PCMilerConfigurationBuild(db bun.IDB) *PCMilerConfigurationQueryBuilder {
	return NewPCMilerConfigurationQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *PCMilerConfigurationQueryBuilder) LoadBusinessUnit() *PCMilerConfigurationQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *PCMilerConfigurationQueryBuilder) LoadOrganization() *PCMilerConfigurationQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadAllRelations loads all relationships for PCMilerConfiguration
func (b *PCMilerConfigurationQueryBuilder) LoadAllRelations() *PCMilerConfigurationQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	return b
}
