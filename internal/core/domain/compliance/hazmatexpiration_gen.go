// Code generated by gen-trenova. DO NOT EDIT.

package compliance

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// hazmatExpirationFieldConfig provides field configuration for HazmatExpiration
type hazmatExpirationFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// HazmatExpirationQuery provides type-safe query helpers and constants
var HazmatExpirationQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID        string
		StateID   string
		Years     string
		Version   string
		CreatedAt string
		UpdatedAt string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		YearsEQ        func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsNEQ       func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsIn        func(q *bun.SelectQuery, v []int8) *bun.SelectQuery
		YearsNotIn     func(q *bun.SelectQuery, v []int8) *bun.SelectQuery
		YearsGT        func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsGTE       func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsLT        func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsLTE       func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		VersionEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]hazmatExpirationFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		State string
	}
}{
	// Table and alias constants
	Table:    "hazmat_expirations",
	Alias:    "he",
	IDPrefix: "he_",

	// Field names
	Field: struct {
		ID        string
		StateID   string
		Years     string
		Version   string
		CreatedAt string
		UpdatedAt string
	}{
		ID:        "id",
		StateID:   "state_id",
		Years:     "years",
		Version:   "version",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "he." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "he." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		YearsEQ        func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsNEQ       func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsIn        func(q *bun.SelectQuery, v []int8) *bun.SelectQuery
		YearsNotIn     func(q *bun.SelectQuery, v []int8) *bun.SelectQuery
		YearsGT        func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsGTE       func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsLT        func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		YearsLTE       func(q *bun.SelectQuery, v int8) *bun.SelectQuery
		VersionEQ      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT      func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("he.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("he.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("he.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("he.id"), bun.In(v))
		},
		StateIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("he.state_id"), v)
		},
		StateIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("he.state_id"), v)
		},
		StateIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("he.state_id"), bun.In(v))
		},
		StateIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("he.state_id"), bun.In(v))
		},
		YearsEQ: func(q *bun.SelectQuery, v int8) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("he.years"), v)
		},
		YearsNEQ: func(q *bun.SelectQuery, v int8) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("he.years"), v)
		},
		YearsIn: func(q *bun.SelectQuery, v []int8) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("he.years"), bun.In(v))
		},
		YearsNotIn: func(q *bun.SelectQuery, v []int8) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("he.years"), bun.In(v))
		},
		YearsGT: func(q *bun.SelectQuery, v int8) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("he.years"), v)
		},
		YearsGTE: func(q *bun.SelectQuery, v int8) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("he.years"), v)
		},
		YearsLT: func(q *bun.SelectQuery, v int8) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("he.years"), v)
		},
		YearsLTE: func(q *bun.SelectQuery, v int8) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("he.years"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("he.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("he.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("he.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("he.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("he.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("he.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("he.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("he.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("he.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("he.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("he.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("he.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("he.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("he.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("he.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("he.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("he.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("he.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("he.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("he.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("he.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("he.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("he.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("he.updated_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("he.id"), id).
				Where("? = ?", bun.Ident("he.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "he." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"he.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "he.created_at DESC"
			}
			return "he.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "he.updated_at DESC"
			}
			return "he.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]hazmatExpirationFieldConfig {
		return map[string]hazmatExpirationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "he.id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "he.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"years": {
				Name:       "years",
				Column:     "he.years",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "he.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "he.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "he.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]hazmatExpirationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "he.id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "he.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"years": {
				Name:       "years",
				Column:     "he.years",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "he.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "he.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "he.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]hazmatExpirationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "he.id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "he.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"years": {
				Name:       "years",
				Column:     "he.years",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "he.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "he.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "he.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		State string
	}{
		State: "State",
	},
}

// HazmatExpirationQueryBuilder provides a fluent interface for building queries
type HazmatExpirationQueryBuilder struct {
	query *bun.SelectQuery
}

// NewHazmatExpirationQuery creates a new query builder
func NewHazmatExpirationQuery(db bun.IDB) *HazmatExpirationQueryBuilder {
	return &HazmatExpirationQueryBuilder{
		query: db.NewSelect().Model((*HazmatExpiration)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func HazmatExpirationFromQuery(q *bun.SelectQuery) *HazmatExpirationQueryBuilder {
	return &HazmatExpirationQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *HazmatExpirationQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *HazmatExpirationQueryBuilder) Model(model interface{}) *HazmatExpirationQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *HazmatExpirationQueryBuilder) WhereIDEQ(v pulid.ID) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *HazmatExpirationQueryBuilder) WhereIDNEQ(v pulid.ID) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereIDIn(v []pulid.ID) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereIDNotIn(v []pulid.ID) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereStateIDEQ adds a WHERE state_id = ? condition
func (b *HazmatExpirationQueryBuilder) WhereStateIDEQ(v pulid.ID) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.StateIDEQ(b.query, v)
	return b
}

// WhereStateIDNEQ adds a WHERE state_id != ? condition
func (b *HazmatExpirationQueryBuilder) WhereStateIDNEQ(v pulid.ID) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.StateIDNEQ(b.query, v)
	return b
}

// WhereStateIDIn adds a WHERE state_id IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereStateIDIn(v []pulid.ID) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.StateIDIn(b.query, v)
	return b
}

// WhereStateIDNotIn adds a WHERE state_id NOT IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereStateIDNotIn(v []pulid.ID) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.StateIDNotIn(b.query, v)
	return b
}

// WhereYearsEQ adds a WHERE years = ? condition
func (b *HazmatExpirationQueryBuilder) WhereYearsEQ(v int8) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.YearsEQ(b.query, v)
	return b
}

// WhereYearsNEQ adds a WHERE years != ? condition
func (b *HazmatExpirationQueryBuilder) WhereYearsNEQ(v int8) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.YearsNEQ(b.query, v)
	return b
}

// WhereYearsGT adds a WHERE years > ? condition
func (b *HazmatExpirationQueryBuilder) WhereYearsGT(v int8) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.YearsGT(b.query, v)
	return b
}

// WhereYearsGTE adds a WHERE years >= ? condition
func (b *HazmatExpirationQueryBuilder) WhereYearsGTE(v int8) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.YearsGTE(b.query, v)
	return b
}

// WhereYearsLT adds a WHERE years < ? condition
func (b *HazmatExpirationQueryBuilder) WhereYearsLT(v int8) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.YearsLT(b.query, v)
	return b
}

// WhereYearsLTE adds a WHERE years <= ? condition
func (b *HazmatExpirationQueryBuilder) WhereYearsLTE(v int8) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.YearsLTE(b.query, v)
	return b
}

// WhereYearsIn adds a WHERE years IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereYearsIn(v []int8) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.YearsIn(b.query, v)
	return b
}

// WhereYearsNotIn adds a WHERE years NOT IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereYearsNotIn(v []int8) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.YearsNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *HazmatExpirationQueryBuilder) WhereVersionEQ(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *HazmatExpirationQueryBuilder) WhereVersionNEQ(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *HazmatExpirationQueryBuilder) WhereVersionGT(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *HazmatExpirationQueryBuilder) WhereVersionGTE(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *HazmatExpirationQueryBuilder) WhereVersionLT(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *HazmatExpirationQueryBuilder) WhereVersionLTE(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereVersionIn(v []int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereVersionNotIn(v []int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *HazmatExpirationQueryBuilder) WhereCreatedAtEQ(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *HazmatExpirationQueryBuilder) WhereCreatedAtNEQ(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *HazmatExpirationQueryBuilder) WhereCreatedAtGT(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *HazmatExpirationQueryBuilder) WhereCreatedAtGTE(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *HazmatExpirationQueryBuilder) WhereCreatedAtLT(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *HazmatExpirationQueryBuilder) WhereCreatedAtLTE(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereCreatedAtIn(v []int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereCreatedAtNotIn(v []int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *HazmatExpirationQueryBuilder) WhereUpdatedAtEQ(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *HazmatExpirationQueryBuilder) WhereUpdatedAtNEQ(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *HazmatExpirationQueryBuilder) WhereUpdatedAtGT(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *HazmatExpirationQueryBuilder) WhereUpdatedAtGTE(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *HazmatExpirationQueryBuilder) WhereUpdatedAtLT(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *HazmatExpirationQueryBuilder) WhereUpdatedAtLTE(v int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereUpdatedAtIn(v []int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *HazmatExpirationQueryBuilder) WhereUpdatedAtNotIn(v []int64) *HazmatExpirationQueryBuilder {
	b.query = HazmatExpirationQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *HazmatExpirationQueryBuilder) WhereGroup(sep string, fn func(*HazmatExpirationQueryBuilder) *HazmatExpirationQueryBuilder) *HazmatExpirationQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &HazmatExpirationQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *HazmatExpirationQueryBuilder) Where(query string, args ...interface{}) *HazmatExpirationQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *HazmatExpirationQueryBuilder) OrderBy(column string, desc ...bool) *HazmatExpirationQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(HazmatExpirationQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *HazmatExpirationQueryBuilder) Limit(n int) *HazmatExpirationQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *HazmatExpirationQueryBuilder) Offset(n int) *HazmatExpirationQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *HazmatExpirationQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *HazmatExpirationQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *HazmatExpirationQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *HazmatExpirationQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *HazmatExpirationQueryBuilder) All(ctx context.Context) ([]*HazmatExpiration, error) {
	var entities []*HazmatExpiration
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *HazmatExpirationQueryBuilder) AllWithCount(ctx context.Context) ([]*HazmatExpiration, int, error) {
	var entities []*HazmatExpiration
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *HazmatExpirationQueryBuilder) One(ctx context.Context) (*HazmatExpiration, error) {
	entity := new(HazmatExpiration)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *HazmatExpirationQueryBuilder) First(ctx context.Context) (*HazmatExpiration, error) {
	entity := new(HazmatExpiration)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// HazmatExpirationBuild creates a chainable query builder
func HazmatExpirationBuild(db bun.IDB) *HazmatExpirationQueryBuilder {
	return NewHazmatExpirationQuery(db)
}

// Relationship loading methods

// LoadState loads the State relationship
func (b *HazmatExpirationQueryBuilder) LoadState() *HazmatExpirationQueryBuilder {
	b.query = b.query.Relation("State")
	return b
}

// LoadAllRelations loads all relationships for HazmatExpiration
func (b *HazmatExpirationQueryBuilder) LoadAllRelations() *HazmatExpirationQueryBuilder {
	b.LoadState()
	return b
}

// HazmatExpirationRelationChain provides a fluent API for building nested relationship chains
type HazmatExpirationRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewHazmatExpirationRelationChain creates a new relation chain builder
func NewHazmatExpirationRelationChain() *HazmatExpirationRelationChain {
	return &HazmatExpirationRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *HazmatExpirationRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *HazmatExpirationRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *HazmatExpirationRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *HazmatExpirationRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithState creates a relation chain starting with State
func (b *HazmatExpirationQueryBuilder) WithState() *HazmatExpirationRelationChainBuilder {
	chain := &HazmatExpirationRelationChainBuilder{
		parent: b,
		chain:  NewHazmatExpirationRelationChain(),
	}
	chain.chain.Add("State")
	return chain
}

// HazmatExpirationRelationChainBuilder provides fluent API for building nested relations
type HazmatExpirationRelationChainBuilder struct {
	parent *HazmatExpirationQueryBuilder
	chain  *HazmatExpirationRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *HazmatExpirationRelationChainBuilder) Load() *HazmatExpirationQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *HazmatExpirationRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *HazmatExpirationRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *HazmatExpirationRelationChainBuilder) OrderBy(order string) *HazmatExpirationRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *HazmatExpirationRelationChainBuilder) Where(condition string, args ...interface{}) *HazmatExpirationRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
