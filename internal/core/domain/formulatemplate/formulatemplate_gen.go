// Code generated by gen-trenova. DO NOT EDIT.

package formulatemplate

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// formulaTemplateFieldConfig provides field configuration for FormulaTemplate
type formulaTemplateFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// FormulaTemplateQuery provides type-safe query helpers and constants
var FormulaTemplateQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		Name           string
		Description    string
		Category       string
		Expression     string
		Variables      string
		Parameters     string
		Tags           string
		Examples       string
		Requirements   string
		MinRate        string
		MaxRate        string
		OutputUnit     string
		IsActive       string
		IsDefault      string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryEQ           func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		CategoryNEQ          func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		ExpressionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExpressionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExpressionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VariablesEQ          func(q *bun.SelectQuery, v []TemplateVariable) *bun.SelectQuery
		VariablesNEQ         func(q *bun.SelectQuery, v []TemplateVariable) *bun.SelectQuery
		ParametersEQ         func(q *bun.SelectQuery, v []TemplateParameter) *bun.SelectQuery
		ParametersNEQ        func(q *bun.SelectQuery, v []TemplateParameter) *bun.SelectQuery
		TagsEQ               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsNEQ              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExamplesEQ           func(q *bun.SelectQuery, v []TemplateExample) *bun.SelectQuery
		ExamplesNEQ          func(q *bun.SelectQuery, v []TemplateExample) *bun.SelectQuery
		RequirementsEQ       func(q *bun.SelectQuery, v []TemplateRequirement) *bun.SelectQuery
		RequirementsNEQ      func(q *bun.SelectQuery, v []TemplateRequirement) *bun.SelectQuery
		MinRateEQ            func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MinRateNEQ           func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MinRateIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		MinRateIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		MaxRateEQ            func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MaxRateNEQ           func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MaxRateIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		MaxRateIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		OutputUnitEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OutputUnitNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OutputUnitGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsActiveEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]formulaTemplateFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "formula_templates",
	Alias:    "ft",
	IDPrefix: "ft_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		Name           string
		Description    string
		Category       string
		Expression     string
		Variables      string
		Parameters     string
		Tags           string
		Examples       string
		Requirements   string
		MinRate        string
		MaxRate        string
		OutputUnit     string
		IsActive       string
		IsDefault      string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		Name:           "name",
		Description:    "description",
		Category:       "category",
		Expression:     "expression",
		Variables:      "variables",
		Parameters:     "parameters",
		Tags:           "tags",
		Examples:       "examples",
		Requirements:   "requirements",
		MinRate:        "min_rate",
		MaxRate:        "max_rate",
		OutputUnit:     "output_unit",
		IsActive:       "is_active",
		IsDefault:      "is_default",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "ft." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "ft." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CategoryEQ           func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		CategoryNEQ          func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		ExpressionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExpressionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExpressionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExpressionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VariablesEQ          func(q *bun.SelectQuery, v []TemplateVariable) *bun.SelectQuery
		VariablesNEQ         func(q *bun.SelectQuery, v []TemplateVariable) *bun.SelectQuery
		ParametersEQ         func(q *bun.SelectQuery, v []TemplateParameter) *bun.SelectQuery
		ParametersNEQ        func(q *bun.SelectQuery, v []TemplateParameter) *bun.SelectQuery
		TagsEQ               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsNEQ              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExamplesEQ           func(q *bun.SelectQuery, v []TemplateExample) *bun.SelectQuery
		ExamplesNEQ          func(q *bun.SelectQuery, v []TemplateExample) *bun.SelectQuery
		RequirementsEQ       func(q *bun.SelectQuery, v []TemplateRequirement) *bun.SelectQuery
		RequirementsNEQ      func(q *bun.SelectQuery, v []TemplateRequirement) *bun.SelectQuery
		MinRateEQ            func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MinRateNEQ           func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MinRateIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		MinRateIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		MaxRateEQ            func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MaxRateNEQ           func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MaxRateIsNull        func(q *bun.SelectQuery) *bun.SelectQuery
		MaxRateIsNotNull     func(q *bun.SelectQuery) *bun.SelectQuery
		OutputUnitEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OutputUnitNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		OutputUnitGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		OutputUnitHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsActiveEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant               func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.id"), v)
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.business_unit_id"), v)
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.organization_id"), v)
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ft.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ft.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ft.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ft.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ft.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ft.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ft.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ft.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ft.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ft.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ft.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ft.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.description"), "%"+v)
		},
		CategoryEQ: func(q *bun.SelectQuery, v Category) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.category"), v)
		},
		CategoryNEQ: func(q *bun.SelectQuery, v Category) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.category"), v)
		},
		ExpressionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.expression"), v)
		},
		ExpressionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.expression"), v)
		},
		ExpressionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ft.expression"), bun.In(v))
		},
		ExpressionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ft.expression"), bun.In(v))
		},
		ExpressionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ft.expression"), v)
		},
		ExpressionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ft.expression"), v)
		},
		ExpressionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ft.expression"), v)
		},
		ExpressionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ft.expression"), v)
		},
		ExpressionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.expression"), "%"+v+"%")
		},
		ExpressionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.expression"), v+"%")
		},
		ExpressionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.expression"), "%"+v)
		},
		VariablesEQ: func(q *bun.SelectQuery, v []TemplateVariable) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.variables"), v)
		},
		VariablesNEQ: func(q *bun.SelectQuery, v []TemplateVariable) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.variables"), v)
		},
		ParametersEQ: func(q *bun.SelectQuery, v []TemplateParameter) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.parameters"), v)
		},
		ParametersNEQ: func(q *bun.SelectQuery, v []TemplateParameter) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.parameters"), v)
		},
		TagsEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.tags"), v)
		},
		TagsNEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.tags"), v)
		},
		ExamplesEQ: func(q *bun.SelectQuery, v []TemplateExample) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.examples"), v)
		},
		ExamplesNEQ: func(q *bun.SelectQuery, v []TemplateExample) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.examples"), v)
		},
		RequirementsEQ: func(q *bun.SelectQuery, v []TemplateRequirement) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.requirements"), v)
		},
		RequirementsNEQ: func(q *bun.SelectQuery, v []TemplateRequirement) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.requirements"), v)
		},
		MinRateEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.min_rate"), v)
		},
		MinRateNEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.min_rate"), v)
		},
		MinRateIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("ft.min_rate"))
		},
		MinRateIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("ft.min_rate"))
		},
		MaxRateEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.max_rate"), v)
		},
		MaxRateNEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.max_rate"), v)
		},
		MaxRateIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("ft.max_rate"))
		},
		MaxRateIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("ft.max_rate"))
		},
		OutputUnitEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.output_unit"), v)
		},
		OutputUnitNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.output_unit"), v)
		},
		OutputUnitIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ft.output_unit"), bun.In(v))
		},
		OutputUnitNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ft.output_unit"), bun.In(v))
		},
		OutputUnitGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ft.output_unit"), v)
		},
		OutputUnitGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ft.output_unit"), v)
		},
		OutputUnitLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ft.output_unit"), v)
		},
		OutputUnitLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ft.output_unit"), v)
		},
		OutputUnitContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.output_unit"), "%"+v+"%")
		},
		OutputUnitHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.output_unit"), v+"%")
		},
		OutputUnitHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("ft.output_unit"), "%"+v)
		},
		IsActiveEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.is_active"), v)
		},
		IsActiveNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.is_active"), v)
		},
		IsDefaultEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.is_default"), v)
		},
		IsDefaultNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.is_default"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ft.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ft.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ft.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ft.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ft.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ft.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ft.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ft.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ft.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ft.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ft.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ft.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ft.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ft.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ft.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ft.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ft.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ft.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ft.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ft.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("ft.organization_id"), orgID).
				Where("? = ?", bun.Ident("ft.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("ft.id"), id).
				Where("? = ?", bun.Ident("ft.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "ft." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"ft.name ASC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "ft.created_at DESC"
			}
			return "ft.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "ft.updated_at DESC"
			}
			return "ft.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]formulaTemplateFieldConfig {
		return map[string]formulaTemplateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ft.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ft.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ft.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "ft.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "ft.description",
				Sortable:   false,
				Filterable: false,
			},
			"category": {
				Name:       "category",
				Column:     "ft.category",
				Sortable:   false,
				Filterable: false,
			},
			"expression": {
				Name:       "expression",
				Column:     "ft.expression",
				Sortable:   false,
				Filterable: false,
			},
			"variables": {
				Name:       "variables",
				Column:     "ft.variables",
				Sortable:   false,
				Filterable: false,
			},
			"parameters": {
				Name:       "parameters",
				Column:     "ft.parameters",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "ft.tags",
				Sortable:   false,
				Filterable: false,
			},
			"examples": {
				Name:       "examples",
				Column:     "ft.examples",
				Sortable:   false,
				Filterable: false,
			},
			"requirements": {
				Name:       "requirements",
				Column:     "ft.requirements",
				Sortable:   false,
				Filterable: false,
			},
			"min_rate": {
				Name:       "min_rate",
				Column:     "ft.min_rate",
				Sortable:   false,
				Filterable: false,
			},
			"max_rate": {
				Name:       "max_rate",
				Column:     "ft.max_rate",
				Sortable:   false,
				Filterable: false,
			},
			"output_unit": {
				Name:       "output_unit",
				Column:     "ft.output_unit",
				Sortable:   false,
				Filterable: true,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "ft.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "ft.is_default",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "ft.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ft.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ft.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]formulaTemplateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ft.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ft.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ft.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "ft.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "ft.description",
				Sortable:   false,
				Filterable: false,
			},
			"category": {
				Name:       "category",
				Column:     "ft.category",
				Sortable:   false,
				Filterable: false,
			},
			"expression": {
				Name:       "expression",
				Column:     "ft.expression",
				Sortable:   false,
				Filterable: false,
			},
			"variables": {
				Name:       "variables",
				Column:     "ft.variables",
				Sortable:   false,
				Filterable: false,
			},
			"parameters": {
				Name:       "parameters",
				Column:     "ft.parameters",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "ft.tags",
				Sortable:   false,
				Filterable: false,
			},
			"examples": {
				Name:       "examples",
				Column:     "ft.examples",
				Sortable:   false,
				Filterable: false,
			},
			"requirements": {
				Name:       "requirements",
				Column:     "ft.requirements",
				Sortable:   false,
				Filterable: false,
			},
			"min_rate": {
				Name:       "min_rate",
				Column:     "ft.min_rate",
				Sortable:   false,
				Filterable: false,
			},
			"max_rate": {
				Name:       "max_rate",
				Column:     "ft.max_rate",
				Sortable:   false,
				Filterable: false,
			},
			"output_unit": {
				Name:       "output_unit",
				Column:     "ft.output_unit",
				Sortable:   false,
				Filterable: true,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "ft.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "ft.is_default",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "ft.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ft.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ft.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]formulaTemplateFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ft.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ft.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ft.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "ft.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "ft.description",
				Sortable:   false,
				Filterable: false,
			},
			"category": {
				Name:       "category",
				Column:     "ft.category",
				Sortable:   false,
				Filterable: false,
			},
			"expression": {
				Name:       "expression",
				Column:     "ft.expression",
				Sortable:   false,
				Filterable: false,
			},
			"variables": {
				Name:       "variables",
				Column:     "ft.variables",
				Sortable:   false,
				Filterable: false,
			},
			"parameters": {
				Name:       "parameters",
				Column:     "ft.parameters",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "ft.tags",
				Sortable:   false,
				Filterable: false,
			},
			"examples": {
				Name:       "examples",
				Column:     "ft.examples",
				Sortable:   false,
				Filterable: false,
			},
			"requirements": {
				Name:       "requirements",
				Column:     "ft.requirements",
				Sortable:   false,
				Filterable: false,
			},
			"min_rate": {
				Name:       "min_rate",
				Column:     "ft.min_rate",
				Sortable:   false,
				Filterable: false,
			},
			"max_rate": {
				Name:       "max_rate",
				Column:     "ft.max_rate",
				Sortable:   false,
				Filterable: false,
			},
			"output_unit": {
				Name:       "output_unit",
				Column:     "ft.output_unit",
				Sortable:   false,
				Filterable: true,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "ft.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "ft.is_default",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "ft.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ft.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ft.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// FormulaTemplateQueryBuilder provides a fluent interface for building queries
type FormulaTemplateQueryBuilder struct {
	query *bun.SelectQuery
}

// NewFormulaTemplateQuery creates a new query builder
func NewFormulaTemplateQuery(db bun.IDB) *FormulaTemplateQueryBuilder {
	return &FormulaTemplateQueryBuilder{
		query: db.NewSelect().Model((*FormulaTemplate)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func FormulaTemplateFromQuery(q *bun.SelectQuery) *FormulaTemplateQueryBuilder {
	return &FormulaTemplateQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *FormulaTemplateQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *FormulaTemplateQueryBuilder) Model(model interface{}) *FormulaTemplateQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *FormulaTemplateQueryBuilder) WhereIDEQ(v pulid.ID) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *FormulaTemplateQueryBuilder) WhereIDNEQ(v pulid.ID) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *FormulaTemplateQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *FormulaTemplateQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *FormulaTemplateQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *FormulaTemplateQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *FormulaTemplateQueryBuilder) WhereNameEQ(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *FormulaTemplateQueryBuilder) WhereNameNEQ(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereNameIn(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereNameNotIn(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereNameContains(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereNameHasPrefix(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereNameHasSuffix(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *FormulaTemplateQueryBuilder) WhereDescriptionEQ(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *FormulaTemplateQueryBuilder) WhereDescriptionNEQ(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereDescriptionIn(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereDescriptionNotIn(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereDescriptionContains(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereDescriptionHasPrefix(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereDescriptionHasSuffix(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereCategoryEQ adds a WHERE category = ? condition
func (b *FormulaTemplateQueryBuilder) WhereCategoryEQ(v Category) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CategoryEQ(b.query, v)
	return b
}

// WhereCategoryNEQ adds a WHERE category != ? condition
func (b *FormulaTemplateQueryBuilder) WhereCategoryNEQ(v Category) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CategoryNEQ(b.query, v)
	return b
}

// WhereExpressionEQ adds a WHERE expression = ? condition
func (b *FormulaTemplateQueryBuilder) WhereExpressionEQ(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ExpressionEQ(b.query, v)
	return b
}

// WhereExpressionNEQ adds a WHERE expression != ? condition
func (b *FormulaTemplateQueryBuilder) WhereExpressionNEQ(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ExpressionNEQ(b.query, v)
	return b
}

// WhereExpressionIn adds a WHERE expression IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereExpressionIn(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ExpressionIn(b.query, v)
	return b
}

// WhereExpressionNotIn adds a WHERE expression NOT IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereExpressionNotIn(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ExpressionNotIn(b.query, v)
	return b
}

// WhereExpressionContains adds a WHERE expression LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereExpressionContains(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ExpressionContains(b.query, v)
	return b
}

// WhereExpressionHasPrefix adds a WHERE expression LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereExpressionHasPrefix(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ExpressionHasPrefix(b.query, v)
	return b
}

// WhereExpressionHasSuffix adds a WHERE expression LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereExpressionHasSuffix(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ExpressionHasSuffix(b.query, v)
	return b
}

// WhereVariablesEQ adds a WHERE variables = ? condition
func (b *FormulaTemplateQueryBuilder) WhereVariablesEQ(v []TemplateVariable) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VariablesEQ(b.query, v)
	return b
}

// WhereVariablesNEQ adds a WHERE variables != ? condition
func (b *FormulaTemplateQueryBuilder) WhereVariablesNEQ(v []TemplateVariable) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VariablesNEQ(b.query, v)
	return b
}

// WhereParametersEQ adds a WHERE parameters = ? condition
func (b *FormulaTemplateQueryBuilder) WhereParametersEQ(v []TemplateParameter) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ParametersEQ(b.query, v)
	return b
}

// WhereParametersNEQ adds a WHERE parameters != ? condition
func (b *FormulaTemplateQueryBuilder) WhereParametersNEQ(v []TemplateParameter) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ParametersNEQ(b.query, v)
	return b
}

// WhereTagsEQ adds a WHERE tags = ? condition
func (b *FormulaTemplateQueryBuilder) WhereTagsEQ(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.TagsEQ(b.query, v)
	return b
}

// WhereTagsNEQ adds a WHERE tags != ? condition
func (b *FormulaTemplateQueryBuilder) WhereTagsNEQ(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.TagsNEQ(b.query, v)
	return b
}

// WhereExamplesEQ adds a WHERE examples = ? condition
func (b *FormulaTemplateQueryBuilder) WhereExamplesEQ(v []TemplateExample) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ExamplesEQ(b.query, v)
	return b
}

// WhereExamplesNEQ adds a WHERE examples != ? condition
func (b *FormulaTemplateQueryBuilder) WhereExamplesNEQ(v []TemplateExample) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.ExamplesNEQ(b.query, v)
	return b
}

// WhereRequirementsEQ adds a WHERE requirements = ? condition
func (b *FormulaTemplateQueryBuilder) WhereRequirementsEQ(v []TemplateRequirement) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.RequirementsEQ(b.query, v)
	return b
}

// WhereRequirementsNEQ adds a WHERE requirements != ? condition
func (b *FormulaTemplateQueryBuilder) WhereRequirementsNEQ(v []TemplateRequirement) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.RequirementsNEQ(b.query, v)
	return b
}

// WhereMinRateEQ adds a WHERE min_rate = ? condition
func (b *FormulaTemplateQueryBuilder) WhereMinRateEQ(v *float64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.MinRateEQ(b.query, v)
	return b
}

// WhereMinRateNEQ adds a WHERE min_rate != ? condition
func (b *FormulaTemplateQueryBuilder) WhereMinRateNEQ(v *float64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.MinRateNEQ(b.query, v)
	return b
}

// WhereMaxRateEQ adds a WHERE max_rate = ? condition
func (b *FormulaTemplateQueryBuilder) WhereMaxRateEQ(v *float64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.MaxRateEQ(b.query, v)
	return b
}

// WhereMaxRateNEQ adds a WHERE max_rate != ? condition
func (b *FormulaTemplateQueryBuilder) WhereMaxRateNEQ(v *float64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.MaxRateNEQ(b.query, v)
	return b
}

// WhereOutputUnitEQ adds a WHERE output_unit = ? condition
func (b *FormulaTemplateQueryBuilder) WhereOutputUnitEQ(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.OutputUnitEQ(b.query, v)
	return b
}

// WhereOutputUnitNEQ adds a WHERE output_unit != ? condition
func (b *FormulaTemplateQueryBuilder) WhereOutputUnitNEQ(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.OutputUnitNEQ(b.query, v)
	return b
}

// WhereOutputUnitIn adds a WHERE output_unit IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereOutputUnitIn(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.OutputUnitIn(b.query, v)
	return b
}

// WhereOutputUnitNotIn adds a WHERE output_unit NOT IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereOutputUnitNotIn(v []string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.OutputUnitNotIn(b.query, v)
	return b
}

// WhereOutputUnitContains adds a WHERE output_unit LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereOutputUnitContains(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.OutputUnitContains(b.query, v)
	return b
}

// WhereOutputUnitHasPrefix adds a WHERE output_unit LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereOutputUnitHasPrefix(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.OutputUnitHasPrefix(b.query, v)
	return b
}

// WhereOutputUnitHasSuffix adds a WHERE output_unit LIKE ? condition
func (b *FormulaTemplateQueryBuilder) WhereOutputUnitHasSuffix(v string) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.OutputUnitHasSuffix(b.query, v)
	return b
}

// WhereIsActiveEQ adds a WHERE is_active = ? condition
func (b *FormulaTemplateQueryBuilder) WhereIsActiveEQ(v bool) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.IsActiveEQ(b.query, v)
	return b
}

// WhereIsActiveNEQ adds a WHERE is_active != ? condition
func (b *FormulaTemplateQueryBuilder) WhereIsActiveNEQ(v bool) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.IsActiveNEQ(b.query, v)
	return b
}

// WhereIsDefaultEQ adds a WHERE is_default = ? condition
func (b *FormulaTemplateQueryBuilder) WhereIsDefaultEQ(v bool) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.IsDefaultEQ(b.query, v)
	return b
}

// WhereIsDefaultNEQ adds a WHERE is_default != ? condition
func (b *FormulaTemplateQueryBuilder) WhereIsDefaultNEQ(v bool) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.IsDefaultNEQ(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *FormulaTemplateQueryBuilder) WhereVersionEQ(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *FormulaTemplateQueryBuilder) WhereVersionNEQ(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *FormulaTemplateQueryBuilder) WhereVersionGT(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *FormulaTemplateQueryBuilder) WhereVersionGTE(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *FormulaTemplateQueryBuilder) WhereVersionLT(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *FormulaTemplateQueryBuilder) WhereVersionLTE(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereVersionIn(v []int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereVersionNotIn(v []int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *FormulaTemplateQueryBuilder) WhereCreatedAtEQ(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *FormulaTemplateQueryBuilder) WhereCreatedAtNEQ(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *FormulaTemplateQueryBuilder) WhereCreatedAtGT(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *FormulaTemplateQueryBuilder) WhereCreatedAtGTE(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *FormulaTemplateQueryBuilder) WhereCreatedAtLT(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *FormulaTemplateQueryBuilder) WhereCreatedAtLTE(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereCreatedAtIn(v []int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereCreatedAtNotIn(v []int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *FormulaTemplateQueryBuilder) WhereUpdatedAtEQ(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *FormulaTemplateQueryBuilder) WhereUpdatedAtNEQ(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *FormulaTemplateQueryBuilder) WhereUpdatedAtGT(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *FormulaTemplateQueryBuilder) WhereUpdatedAtGTE(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *FormulaTemplateQueryBuilder) WhereUpdatedAtLT(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *FormulaTemplateQueryBuilder) WhereUpdatedAtLTE(v int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereUpdatedAtIn(v []int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *FormulaTemplateQueryBuilder) WhereUpdatedAtNotIn(v []int64) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *FormulaTemplateQueryBuilder) WhereTenant(orgID, buID pulid.ID) *FormulaTemplateQueryBuilder {
	b.query = FormulaTemplateQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *FormulaTemplateQueryBuilder) WhereGroup(sep string, fn func(*FormulaTemplateQueryBuilder) *FormulaTemplateQueryBuilder) *FormulaTemplateQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &FormulaTemplateQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *FormulaTemplateQueryBuilder) Where(query string, args ...interface{}) *FormulaTemplateQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *FormulaTemplateQueryBuilder) OrderBy(column string, desc ...bool) *FormulaTemplateQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(FormulaTemplateQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *FormulaTemplateQueryBuilder) Limit(n int) *FormulaTemplateQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *FormulaTemplateQueryBuilder) Offset(n int) *FormulaTemplateQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *FormulaTemplateQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *FormulaTemplateQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *FormulaTemplateQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *FormulaTemplateQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *FormulaTemplateQueryBuilder) All(ctx context.Context) ([]*FormulaTemplate, error) {
	var entities []*FormulaTemplate
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *FormulaTemplateQueryBuilder) AllWithCount(ctx context.Context) ([]*FormulaTemplate, int, error) {
	var entities []*FormulaTemplate
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *FormulaTemplateQueryBuilder) One(ctx context.Context) (*FormulaTemplate, error) {
	entity := new(FormulaTemplate)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *FormulaTemplateQueryBuilder) First(ctx context.Context) (*FormulaTemplate, error) {
	entity := new(FormulaTemplate)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// FormulaTemplateBuild creates a chainable query builder
func FormulaTemplateBuild(db bun.IDB) *FormulaTemplateQueryBuilder {
	return NewFormulaTemplateQuery(db)
}
