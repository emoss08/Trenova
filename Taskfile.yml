# # Copyright 2023-2025 Eric Moss
# # Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
# # Full license: https://github.com/emoss08/trenova/blob/main/LICENSE.md

version: "3"

tasks:
  run:
    desc: Run the application
    cmd: go run ./cmd/api/main.go serve
  reset:
    desc: Reset the database, Redis
    cmds:
      - task: db-reset
      - task: redis-flushall
      - task: db-init
      - task: db-migrate
      - task: db-seed
  format:
    desc: Format the code
    cmds:
      - task: fmt
      - task: fmt-lines
  check:
    desc: Check the code
    cmds:
      - task: critic
      - task: security
  swag:
    desc: Generate Swagger documentation
    cmds:
      - task: swag-fmt
      - task: swag-init
  lint:
    desc: Lint the code
    cmds:
      - task: ci-lint
      - task: modernize
  test:
    desc: Run tests
    cmd: go test ./... -v
  test-pretty:
    desc: Run tests with tparse
    cmd: |
      if ! command -v tparse &> /dev/null
      then
        echo "tparse could not be found, installing..."
        go install github.com/mfridman/tparse@latest
      fi
      set -o pipefail && go test ./... -json | tparse -all
    silent: true
  update-go-deps:
    cmd: go get -u ./... && go mod tidy
    desc: Update Go dependencies
  generate:
    desc: Generate code for all entities with go:generate directives
    cmd: go generate ./...
  gen:
    desc: Alias for generate
    deps: [generate]
  gen-all:
    desc: Generate code for all domain entities (scans domain folder)
    cmd: go run ./cmd/gen-trenova -domain-path=./internal/core/domain
  gen-all-separate:
    desc: Generate code for all domain entities in separate directory
    cmd: go run ./cmd/gen-trenova -domain-path=./internal/core/domain -output-dir=./internal/generated/domain
  fix:
    cmd: goimports -w ./.. && go mod tidy
    desc: Fix the code with goimports
  ci-lint:
    cmd: golangci-lint run --timeout 5m
    desc: Run the linter with golangci-lint
  modernize:
    cmd: go run golang.org/x/tools/gopls/internal/analysis/modernize/cmd/modernize@latest -test ./...
    desc: Modernize the code with go modernize
  fmt:
    cmd: go fmt ./...
    desc: Format the code with go fmt
  fmt-lines:
    cmd: golines ./.. -w 
    desc: Format the code with golines
  format-sql:
    cmd: |
      if ! command -v pg_format &> /dev/null
      then
        echo "pg_format could not be found, please install pgFormatter..."
        echo "Visit https://github.com/darold/pgFormatter for installation instructions"
        exit 1
      fi
      find internal/infrastructure/database/postgres/migrations/ -name "*.sql" -type f -exec pg_format -i {} \;
    desc: Format all SQL files in the migrations directory using pgFormatter
  critic:
    cmd: |
      if ! command -v gocritic &> /dev/null
      then
        echo "gocritic could not be found, installing..."
        go install github.com/go-critic/go-critic/cmd/gocritic@latest
      fi
      gocritic check -enableAll -disable=sloppyReassign ./...
    desc: Check for code quality issues
  security:
    cmd: gosec ./...
    desc: Check for security vulnerabilities
  deadcode:
    cmd: deadcode ./...
    desc: Check for unused code
  tidy:
    cmd: go mod tidy
    desc: Tidy the Go modules
  db-reset:
    cmd: go run cmd/db/main.go db reset
    desc: Reset the database
  db-init:
    cmd: go run cmd/db/main.go db init
    desc: Initialize the database
  db-migrate:
    cmd: go run cmd/db/main.go db migrate
    desc: Run database migrations
  db-seed:
    cmd: go run cmd/db/main.go db seed
    desc: Seed the database with initial data
  redis-flushall:
    cmd: go run cmd/db/main.go redis flushall
    desc: Flush all Redis data
  kafka-reset:
    cmd: bash scripts/kafka/reset-kafka.sh
    desc: Reset Kafka completely - stops services, removes data volumes, and restarts with clean state
  kafka-setup:
    cmd: bash scripts/kafka/setup-debezium-connector.sh
    desc: Setup Debezium connector for Kafka
  add-license:
    cmd: addlicense -c "Eric Moss" -f short-license.txt -ignore "**/.idea/**" -ignore "**/.vscode/**" -ignore "**/node_modules/**" -ignore "**/dist/**" -ignore "**/build/**" -ignore "**/*.min.js" .
    desc: Add license to the code