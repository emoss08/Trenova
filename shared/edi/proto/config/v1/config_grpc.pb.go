// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: config/v1/config.proto

package configpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EDIConfigService_GetPartnerConfig_FullMethodName   = "/edi.config.v1.EDIConfigService/GetPartnerConfig"
	EDIConfigService_ListPartnerConfigs_FullMethodName = "/edi.config.v1.EDIConfigService/ListPartnerConfigs"
)

// EDIConfigServiceClient is the client API for EDIConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EDIConfigServiceClient interface {
	GetPartnerConfig(ctx context.Context, in *GetPartnerConfigRequest, opts ...grpc.CallOption) (*GetPartnerConfigResponse, error)
	ListPartnerConfigs(ctx context.Context, in *ListPartnerConfigsRequest, opts ...grpc.CallOption) (*ListPartnerConfigsResponse, error)
}

type eDIConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEDIConfigServiceClient(cc grpc.ClientConnInterface) EDIConfigServiceClient {
	return &eDIConfigServiceClient{cc}
}

func (c *eDIConfigServiceClient) GetPartnerConfig(ctx context.Context, in *GetPartnerConfigRequest, opts ...grpc.CallOption) (*GetPartnerConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartnerConfigResponse)
	err := c.cc.Invoke(ctx, EDIConfigService_GetPartnerConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eDIConfigServiceClient) ListPartnerConfigs(ctx context.Context, in *ListPartnerConfigsRequest, opts ...grpc.CallOption) (*ListPartnerConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartnerConfigsResponse)
	err := c.cc.Invoke(ctx, EDIConfigService_ListPartnerConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EDIConfigServiceServer is the server API for EDIConfigService service.
// All implementations must embed UnimplementedEDIConfigServiceServer
// for forward compatibility.
type EDIConfigServiceServer interface {
	GetPartnerConfig(context.Context, *GetPartnerConfigRequest) (*GetPartnerConfigResponse, error)
	ListPartnerConfigs(context.Context, *ListPartnerConfigsRequest) (*ListPartnerConfigsResponse, error)
	mustEmbedUnimplementedEDIConfigServiceServer()
}

// UnimplementedEDIConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEDIConfigServiceServer struct{}

func (UnimplementedEDIConfigServiceServer) GetPartnerConfig(context.Context, *GetPartnerConfigRequest) (*GetPartnerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerConfig not implemented")
}
func (UnimplementedEDIConfigServiceServer) ListPartnerConfigs(context.Context, *ListPartnerConfigsRequest) (*ListPartnerConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartnerConfigs not implemented")
}
func (UnimplementedEDIConfigServiceServer) mustEmbedUnimplementedEDIConfigServiceServer() {}
func (UnimplementedEDIConfigServiceServer) testEmbeddedByValue()                          {}

// UnsafeEDIConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EDIConfigServiceServer will
// result in compilation errors.
type UnsafeEDIConfigServiceServer interface {
	mustEmbedUnimplementedEDIConfigServiceServer()
}

func RegisterEDIConfigServiceServer(s grpc.ServiceRegistrar, srv EDIConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedEDIConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EDIConfigService_ServiceDesc, srv)
}

func _EDIConfigService_GetPartnerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EDIConfigServiceServer).GetPartnerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EDIConfigService_GetPartnerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EDIConfigServiceServer).GetPartnerConfig(ctx, req.(*GetPartnerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EDIConfigService_ListPartnerConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartnerConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EDIConfigServiceServer).ListPartnerConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EDIConfigService_ListPartnerConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EDIConfigServiceServer).ListPartnerConfigs(ctx, req.(*ListPartnerConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EDIConfigService_ServiceDesc is the grpc.ServiceDesc for EDIConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EDIConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edi.config.v1.EDIConfigService",
	HandlerType: (*EDIConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPartnerConfig",
			Handler:    _EDIConfigService_GetPartnerConfig_Handler,
		},
		{
			MethodName: "ListPartnerConfigs",
			Handler:    _EDIConfigService_ListPartnerConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/v1/config.proto",
}
