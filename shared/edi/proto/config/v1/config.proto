syntax = "proto3";

package edi.config.v1;

option go_package = "github.com/emoss08/trenova/shared/edi/proto/config/v1;configpb";

// Strictness indicates validation strictness: "strict" or "lenient".
enum Strictness {
  STRICTNESS_UNSPECIFIED = 0;
  STRICT = 1;   // "strict"
  LENIENT = 2;  // "lenient"
}

message DelimiterConfig {
  string element = 1;
  string component = 2;
  string segment = 3;
  string repetition = 4;
}

message ValidationConfig {
  Strictness strictness = 1; // default STRICT if unset
  optional bool enforce_se_count = 2;
  optional bool require_pickup_and_delivery = 3;
  optional bool require_b2_ship_id = 4;
  optional bool require_n1_sh = 5;
  optional bool require_n1_st = 6;
}

// Map-like structures whose values are repeated strings must be represented
// as explicit repeated entries in proto3.
message StringList {
  repeated string values = 1;
}

message ReferencesEntry {
  string key = 1;
  StringList list = 2;
}

message PartyRolesEntry {
  string role = 1;
  repeated string n1_codes = 2; // e.g., ["SH", "SF"]
}

message PartnerConfig {
  // Identity (optional for transport; service may add IDs in responses)
  string name = 1;
  string schema = 2; // JSON schema path or identifier

  DelimiterConfig delimiters = 3;
  ValidationConfig validation = 4;

  // Mapping options
  repeated ReferencesEntry references = 10;          // DTO ref key -> list of L11 qualifiers
  repeated PartyRolesEntry party_roles = 11;         // role -> ordered N1 codes
  map<string, string> stop_type_map = 12;            // S5 type -> normalized type
  repeated string shipment_id_quals = 13;            // ordered L11 qualifiers
  string shipment_id_mode = 14;                      // ref_first|b2_first|ref_only|b2_only
  string carrier_scac_fallback = 15;
  bool include_raw_l11 = 16;
  repeated string raw_l11_filter = 17;
  map<string, string> equipment_type_map = 18;
  bool include_segments = 19;
  bool emit_iso_datetime = 20;
  string timezone = 21;                              // IANA TZ name
  repeated string service_level_quals = 22;
  map<string, string> service_level_map = 23;
  repeated string accessorial_quals = 24;
  map<string, string> accessorial_map = 25;
}

message GetPartnerConfigRequest {
  // One of these can be used to locate a config; server decides precedence.
  string id = 1;
  string business_unit_id = 2;
  string organization_id = 3;
  string name = 4; // profile name within BU/Org
}

message GetPartnerConfigResponse {
  // Echo IDs to disambiguate responses.
  string id = 1;
  string business_unit_id = 2;
  string organization_id = 3;

  PartnerConfig config = 10;
}

message ListPartnerConfigsRequest {
  string business_unit_id = 1;
  string organization_id = 2;
  int32 page_size = 3;
  string page_token = 4;
}

message ListPartnerConfigsResponse {
  repeated GetPartnerConfigResponse items = 1;
  string next_page_token = 2;
}

service EDIConfigService {
  rpc GetPartnerConfig(GetPartnerConfigRequest) returns (GetPartnerConfigResponse);
  rpc ListPartnerConfigs(ListPartnerConfigsRequest) returns (ListPartnerConfigsResponse);
}

