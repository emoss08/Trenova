x-build-args: &build-args
  DOCKER_BUILDKIT: 1
  GO_VERSION: 1.23
  ALPINE_VERSION: latest

# name: trenova-prod
services:
  trenova-db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_DB: ${DB_NAME:-postgres}
      POSTGRES_MULTIPLE_EXTENSIONS: "pg_stat_statements,pg_buffercache"
      POSTGRES_INITDB_ARGS: "--data-checksums"
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements,pg_buffercache"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "max_replication_slots=5" # Increased for replication
      - "-c"
      - "max_connections=200" # Doubled
      - "-c"
      - "shared_buffers=4GB" # Increased for better performance
      - "-c"
      - "effective_cache_size=12GB" # Increased for better performance
      - "-c"
      - "maintenance_work_mem=1GB" # Increased for maintenance operations
      - "-c"
      - "work_mem=16MB" # Increased for complex queries
      - "-c"
      - "max_parallel_workers=8" # Added for parallel query execution
      - "-c"
      - "max_parallel_workers_per_gather=4" # Added for parallel query execution
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "min_wal_size=2GB" # Increased for write-heavy workload
      - "-c"
      - "max_wal_size=8GB" # Increased for write-heavy workload
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 16G
          cpus: "4"
        reservations:
          memory: 8G
    # networks:
    #   - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-postgres}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Allow time for initial startup

  trenova-search:
    image: getmeili/meilisearch:v1.11.3
    ports:
      - "7700:7700"
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-masterKey}
      - MEILI_NO_ANALYTICS=${MEILI_NO_ANALYTICS:-true}
      - MEILI_DB_PATH=${MEILI_DB_PATH:-/data.ms}
      - MEILI_ENV=${MEILI_ENV:-development}
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - app-network
    volumes:
      - meilisearch_data:/data.ms
    healthcheck:
      test: set -o pipefail;curl -fsS http://localhost:7700/health | grep -q '{"status":"available"}'
      retries: 3
      timeout: 5s

  trenova-redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: redis-server --maxmemory 768mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  trenova-minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000 # API
      - 9001:9001 # Console
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  trenova-api:
    image: ${REGISTRY:-localhost}/trenova-api:${TAG:-latest} # Adjust for your registry
    expose:
      - "3001"
    deploy:
      mode: replicated
      replicas: 3
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 2G
          cpus: "2"
        reservations:
          memory: 1G
    environment:
      - APP_ENV=production
      - GOMAXPROCS=2
      - GO_MAX_THREADS=100
    depends_on:
      - trenova-haproxy
      - trenova-caddy
      - trenova-db
      - trenova-redis
      - trenova-search
      - trenova-minio
    networks:
      - app-network
    # restart: unless-stopped

  trenova-client:
    image: ${REGISTRY:-localhost}/trenova-client:${TAG:-latest} # Adjust for your registry
    expose:
      - "5173"
    networks:
      - app-network
    depends_on:
      - trenova-api
    environment:
      - VITE_API_URL=/api/v1
    # restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: "1"
        reservations:
          memory: 512M

  trenova-haproxy:
    image: haproxy:latest
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - app-network

  trenova-caddy:
    image: ${REGISTRY:-localhost}/trenova-caddy:${TAG:-latest} # Adjust for your registry
    expose:
      - "80"
      - "443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./logs/caddy:/var/log/caddy
    environment:
      - ACME_AGREE=true
    networks:
      - app-network
    depends_on:
      - trenova-api
      - trenova-haproxy
    # restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: "1"
        reservations:
          memory: 256M

volumes:
  pg_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/fast-disk/postgresql"
  redis_data:
    driver: local
  minio_data:
    driver: local
  meilisearch_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  app-network:
    driver: overlay
    attachable: true
