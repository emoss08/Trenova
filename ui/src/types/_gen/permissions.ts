// Code generated by 'trenova codegen types'. DO NOT EDIT.

import { usePermissions } from "@/hooks/use-permission";

/**
 * Permission Registry Metadata
 * Auto-generated from Go permission definitions
 *
 * Note: This file does NOT generate TypeScript types for entities.
 * Use Zod schemas (e.g., hazardous-material-schema.ts) for type generation.
 * This file only contains permission metadata and hooks.
 */

// ============================================================================
// Permission Operations
// ============================================================================

export const PermissionOperations = {
  CREATE: 1, // Create
  READ: 2, // Read
  UPDATE: 4, // Update
  DELETE: 8, // Delete
  EXPORT: 16, // Export
  IMPORT: 32, // Import
  APPROVE: 64, // Approve
  REJECT: 128, // Reject
  ASSIGN: 16384, // Assign
  DUPLICATE: 32768, // Duplicate
} as const;

export type PermissionOperation =
  (typeof PermissionOperations)[keyof typeof PermissionOperations];

// ============================================================================
// Resource Metadata
// ============================================================================

/**
 * Permission metadata for AccessorialCharge
 */
export const AccessorialChargeMetadata = {
  resourceName: "accessorial_charge",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new accessorial charges to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View accessorial charge information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify accessorial charge details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove accessorial charges",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export accessorial charges data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import accessorial charges from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for AuditEntry
 */
export const AuditEntryMetadata = {
  resourceName: "audit_entry",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new audit entries to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View audit entry information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify audit entry details",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export audit entries data for operational reporting",
    },
  ],
  compositeOperations: {
    manage: 23,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for BillingControl
 */
export const BillingControlMetadata = {
  resourceName: "billing_control",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new billing control to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View billing control information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify billing control details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove billing control",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export billing control data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import billing control from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for Commodity
 */
export const CommodityMetadata = {
  resourceName: "commodity",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new commodities to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View commodity information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify commodity details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description:
        "Remove commodities (requires approval due to safety regulations)",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export commodities data for compliance reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import commodities from UN database or other sources",
    },
  ],
  compositeOperations: {
    compliance: 18,
    manage: 63,
    read_only: 2,
    safety_officer: 23,
  },
} as const;

/**
 * Permission metadata for Customer
 */
export const CustomerMetadata = {
  resourceName: "customer",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new customers to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View customer information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify customer details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove customers",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export customers data for sales reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import customers from other systems",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
    sales: 18,
  },
} as const;

/**
 * Permission metadata for DataRetention
 */
export const DataRetentionMetadata = {
  resourceName: "data_retention",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new data retention to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View data retention information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify data retention details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove data retention",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export data retention data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import data retention from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for DedicatedLane
 */
export const DedicatedLaneMetadata = {
  resourceName: "dedicated_lane",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new dedicated lanes to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View dedicated lane information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify dedicated lane details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove dedicated lanes",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export dedicated lanes data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import dedicated lanes from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for DedicatedLaneSuggestion
 */
export const DedicatedLaneSuggestionMetadata = {
  resourceName: "dedicated_lane_suggestion",
  operations: [
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View dedicated lane suggestions information",
    },
    {
      code: 64,
      name: "approve",
      displayName: "Approve",
      description: "Approve dedicated lane suggestion",
    },
    {
      code: 128,
      name: "reject",
      displayName: "Reject",
      description: "Reject dedicated lane suggestion",
    },
  ],
  compositeOperations: {
    manage: 194,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for DispatchControl
 */
export const DispatchControlMetadata = {
  resourceName: "dispatch_control",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new dispatch control to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View dispatch control information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify dispatch control details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove dispatch control",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export dispatch control data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import dispatch control from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for DistanceOverride
 */
export const DistanceOverrideMetadata = {
  resourceName: "distance_override",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new distance overrides to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View distance override information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify distance override details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove distance overrides",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export distance overrides data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import distance overrides from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for DocumentType
 */
export const DocumentTypeMetadata = {
  resourceName: "document_type",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new document types to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View document type information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify document type details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove document types",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export document types data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import document types from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for EmailProfile
 */
export const EmailProfileMetadata = {
  resourceName: "email_profile",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new email profiles to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View email profile information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify email profile details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove email profiles",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export email profiles data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import email profiles from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for EquipmentManufacturer
 */
export const EquipmentManufacturerMetadata = {
  resourceName: "equipment_manufacturer",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new equipment manufacturers to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View equipment manufacturer information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify equipment manufacturer details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove equipment manufacturers",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description:
        "Export equipment manufacturers data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import equipment manufacturers from other sources",
    },
  ],
  compositeOperations: {
    equipment_manager: 55,
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for EquipmentType
 */
export const EquipmentTypeMetadata = {
  resourceName: "equipment_type",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new equipment types to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View equipment type information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify equipment type details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove equipment types",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export equipment types data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import equipment types from other sources",
    },
  ],
  compositeOperations: {
    equipment_manager: 55,
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for FleetCode
 */
export const FleetCodeMetadata = {
  resourceName: "fleet_code",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new fleet codes to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View fleet code information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify fleet code details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove fleet codes (requires approval)",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export fleet codes data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import fleet codes from other sources",
    },
  ],
  compositeOperations: {
    fleet_manager: 55,
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for HazardousMaterial
 */
export const HazardousMaterialMetadata = {
  resourceName: "hazardous_material",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new hazardous materials to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View hazardous material information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify hazardous material details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description:
        "Remove hazardous materials (requires approval due to safety regulations)",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export hazardous materials data for compliance reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description:
        "Import hazardous materials from UN database or other sources",
    },
  ],
  compositeOperations: {
    compliance: 18,
    manage: 63,
    read_only: 2,
    safety_officer: 23,
  },
} as const;

/**
 * Permission metadata for HazmatSegregationRule
 */
export const HazmatSegregationRuleMetadata = {
  resourceName: "hazmat_segregation_rule",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new hazmat segregation rules to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View hazmat segregation rule information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify hazmat segregation rule details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description:
        "Remove hazmat segregation rules (requires approval due to safety regulations)",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description:
        "Export hazmat segregation rules data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import hazmat segregation rules from other sources",
    },
  ],
  compositeOperations: {
    compliance: 18,
    manage: 63,
    read_only: 2,
    safety_officer: 23,
  },
} as const;

/**
 * Permission metadata for HoldReason
 */
export const HoldReasonMetadata = {
  resourceName: "hold_reason",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new hold reasons to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View hold reason information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify hold reason details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove hold reasons",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export hold reasons data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import hold reasons from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for Location
 */
export const LocationMetadata = {
  resourceName: "location",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new locations to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View location information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify location details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove locations",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export locations data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import locations from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for LocationCategory
 */
export const LocationCategoryMetadata = {
  resourceName: "location_category",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new location categories to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View location category information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify location category details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove location categories",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export location categories data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import location categories from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for Organization
 */
export const OrganizationMetadata = {
  resourceName: "organization",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new organization to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View organization information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify organization details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove organization",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export organization data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import organization from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for PatternConfig
 */
export const PatternConfigMetadata = {
  resourceName: "pattern_config",
  operations: [
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View pattern config information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify pattern config details",
    },
  ],
  compositeOperations: {
    manage: 6,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for ServiceType
 */
export const ServiceTypeMetadata = {
  resourceName: "service_type",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new service types to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View service type information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify service type details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove service types",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export service types data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import service types from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for Shipment
 */
export const ShipmentMetadata = {
  resourceName: "shipment",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new shipments to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View shipment information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify shipment details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove shipments",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export shipments data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import shipments from other sources",
    },
    {
      code: 16384,
      name: "assign",
      displayName: "Assign",
      description: "Assign shipments to users",
    },
    {
      code: 32768,
      name: "duplicate",
      displayName: "Duplicate",
      description: "Duplicate shipments",
    },
  ],
  compositeOperations: {
    manage: 49215,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for ShipmentComment
 */
export const ShipmentCommentMetadata = {
  resourceName: "shipment_comment",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new shipment comments to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View shipment comment information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify shipment comment details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove shipment comments",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export shipment comments data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import shipment comments from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for ShipmentControl
 */
export const ShipmentControlMetadata = {
  resourceName: "shipment_control",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new shipment control to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View shipment control information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify shipment control details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove shipment control",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export shipment control data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import shipment control from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for ShipmentType
 */
export const ShipmentTypeMetadata = {
  resourceName: "shipment_type",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new shipment types to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View shipment type information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify shipment type details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove shipment types",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export shipment types data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import shipment types from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for Tractor
 */
export const TractorMetadata = {
  resourceName: "tractor",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new tractors to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View tractor information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify tractor details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove tractors",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export tractors data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import tractors from other sources",
    },
  ],
  compositeOperations: {
    equipment_manager: 55,
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for Trailer
 */
export const TrailerMetadata = {
  resourceName: "trailer",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new trailers to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View trailer information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify trailer details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove trailers",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export trailers data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import trailers from other sources",
    },
  ],
  compositeOperations: {
    equipment_manager: 55,
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for User
 */
export const UserMetadata = {
  resourceName: "user",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new user to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View user information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify user details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove user",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export user data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import user from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for Variable
 */
export const VariableMetadata = {
  resourceName: "variable",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new variables to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View variable information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify variable details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove variables",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export variables data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import variables from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for VariableFormat
 */
export const VariableFormatMetadata = {
  resourceName: "variable_format",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new variable formats to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View variable format information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify variable format details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove variable formats",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export variable formats data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import variable formats from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for Worker
 */
export const WorkerMetadata = {
  resourceName: "worker",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new workers to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View worker information",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify worker details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove workers",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export workers data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import workers from other sources",
    },
  ],
  compositeOperations: {
    manage: 63,
    read_only: 2,
  },
} as const;

/**
 * Permission metadata for WorkerPto
 */
export const WorkerPtoMetadata = {
  resourceName: "worker_pto",
  operations: [
    {
      code: 1,
      name: "create",
      displayName: "Create",
      description: "Add new worker PTOs to the database",
    },
    {
      code: 2,
      name: "read",
      displayName: "Read",
      description: "View worker PTO information",
    },
    {
      code: 64,
      name: "approve",
      displayName: "Approve",
      description: "Approve worker PTOs",
    },
    {
      code: 128,
      name: "reject",
      displayName: "Reject",
      description: "Reject worker PTOs",
    },
    {
      code: 4,
      name: "update",
      displayName: "Update",
      description: "Modify worker PTO details",
    },
    {
      code: 8,
      name: "delete",
      displayName: "Delete",
      description: "Remove worker PTOs",
    },
    {
      code: 16,
      name: "export",
      displayName: "Export",
      description: "Export worker PTOs data for operational reporting",
    },
    {
      code: 32,
      name: "import",
      displayName: "Import",
      description: "Import worker PTOs from other sources",
    },
  ],
  compositeOperations: {
    manage: 255,
    read_only: 2,
  },
} as const;

// ============================================================================
// Permission Hooks (React)
// ============================================================================

/**
 * React hook for AccessorialCharge permissions
 * @example
 * const perms = useAccessorialChargePermissions();
 * if (perms.canCreate) { ... }
 */
export const useAccessorialChargePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("accessorial_charge", "create"),
    canRead: can("accessorial_charge", "read"),
    canUpdate: can("accessorial_charge", "update"),
    canDelete: can("accessorial_charge", "delete"),
    canExport: can("accessorial_charge", "export"),
    canImport: can("accessorial_charge", "import"),
    hasManage: can("accessorial_charge", "manage"),
    hasReadOnly: can("accessorial_charge", "read_only"),
  };
};

/**
 * React hook for AuditEntry permissions
 * @example
 * const perms = useAuditEntryPermissions();
 * if (perms.canCreate) { ... }
 */
export const useAuditEntryPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("audit_entry", "create"),
    canRead: can("audit_entry", "read"),
    canUpdate: can("audit_entry", "update"),
    canExport: can("audit_entry", "export"),
    hasManage: can("audit_entry", "manage"),
    hasReadOnly: can("audit_entry", "read_only"),
  };
};

/**
 * React hook for BillingControl permissions
 * @example
 * const perms = useBillingControlPermissions();
 * if (perms.canCreate) { ... }
 */
export const useBillingControlPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("billing_control", "create"),
    canRead: can("billing_control", "read"),
    canUpdate: can("billing_control", "update"),
    canDelete: can("billing_control", "delete"),
    canExport: can("billing_control", "export"),
    canImport: can("billing_control", "import"),
    hasManage: can("billing_control", "manage"),
    hasReadOnly: can("billing_control", "read_only"),
  };
};

/**
 * React hook for Commodity permissions
 * @example
 * const perms = useCommodityPermissions();
 * if (perms.canCreate) { ... }
 */
export const useCommodityPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("commodity", "create"),
    canRead: can("commodity", "read"),
    canUpdate: can("commodity", "update"),
    canDelete: can("commodity", "delete"),
    canExport: can("commodity", "export"),
    canImport: can("commodity", "import"),
    hasCompliance: can("commodity", "compliance"),
    hasManage: can("commodity", "manage"),
    hasReadOnly: can("commodity", "read_only"),
    hasSafetyOfficer: can("commodity", "safety_officer"),
  };
};

/**
 * React hook for Customer permissions
 * @example
 * const perms = useCustomerPermissions();
 * if (perms.canCreate) { ... }
 */
export const useCustomerPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("customer", "create"),
    canRead: can("customer", "read"),
    canUpdate: can("customer", "update"),
    canDelete: can("customer", "delete"),
    canExport: can("customer", "export"),
    canImport: can("customer", "import"),
    hasManage: can("customer", "manage"),
    hasReadOnly: can("customer", "read_only"),
    hasSales: can("customer", "sales"),
  };
};

/**
 * React hook for DataRetention permissions
 * @example
 * const perms = useDataRetentionPermissions();
 * if (perms.canCreate) { ... }
 */
export const useDataRetentionPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("data_retention", "create"),
    canRead: can("data_retention", "read"),
    canUpdate: can("data_retention", "update"),
    canDelete: can("data_retention", "delete"),
    canExport: can("data_retention", "export"),
    canImport: can("data_retention", "import"),
    hasManage: can("data_retention", "manage"),
    hasReadOnly: can("data_retention", "read_only"),
  };
};

/**
 * React hook for DedicatedLane permissions
 * @example
 * const perms = useDedicatedLanePermissions();
 * if (perms.canCreate) { ... }
 */
export const useDedicatedLanePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("dedicated_lane", "create"),
    canRead: can("dedicated_lane", "read"),
    canUpdate: can("dedicated_lane", "update"),
    canDelete: can("dedicated_lane", "delete"),
    canExport: can("dedicated_lane", "export"),
    canImport: can("dedicated_lane", "import"),
    hasManage: can("dedicated_lane", "manage"),
    hasReadOnly: can("dedicated_lane", "read_only"),
  };
};

/**
 * React hook for DedicatedLaneSuggestion permissions
 * @example
 * const perms = useDedicatedLaneSuggestionPermissions();
 * if (perms.canCreate) { ... }
 */
export const useDedicatedLaneSuggestionPermissions = () => {
  const { can } = usePermissions();

  return {
    canRead: can("dedicated_lane_suggestion", "read"),
    canApprove: can("dedicated_lane_suggestion", "approve"),
    canReject: can("dedicated_lane_suggestion", "reject"),
    hasManage: can("dedicated_lane_suggestion", "manage"),
    hasReadOnly: can("dedicated_lane_suggestion", "read_only"),
  };
};

/**
 * React hook for DispatchControl permissions
 * @example
 * const perms = useDispatchControlPermissions();
 * if (perms.canCreate) { ... }
 */
export const useDispatchControlPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("dispatch_control", "create"),
    canRead: can("dispatch_control", "read"),
    canUpdate: can("dispatch_control", "update"),
    canDelete: can("dispatch_control", "delete"),
    canExport: can("dispatch_control", "export"),
    canImport: can("dispatch_control", "import"),
    hasManage: can("dispatch_control", "manage"),
    hasReadOnly: can("dispatch_control", "read_only"),
  };
};

/**
 * React hook for DistanceOverride permissions
 * @example
 * const perms = useDistanceOverridePermissions();
 * if (perms.canCreate) { ... }
 */
export const useDistanceOverridePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("distance_override", "create"),
    canRead: can("distance_override", "read"),
    canUpdate: can("distance_override", "update"),
    canDelete: can("distance_override", "delete"),
    canExport: can("distance_override", "export"),
    canImport: can("distance_override", "import"),
    hasManage: can("distance_override", "manage"),
    hasReadOnly: can("distance_override", "read_only"),
  };
};

/**
 * React hook for DocumentType permissions
 * @example
 * const perms = useDocumentTypePermissions();
 * if (perms.canCreate) { ... }
 */
export const useDocumentTypePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("document_type", "create"),
    canRead: can("document_type", "read"),
    canUpdate: can("document_type", "update"),
    canDelete: can("document_type", "delete"),
    canExport: can("document_type", "export"),
    canImport: can("document_type", "import"),
    hasManage: can("document_type", "manage"),
    hasReadOnly: can("document_type", "read_only"),
  };
};

/**
 * React hook for EmailProfile permissions
 * @example
 * const perms = useEmailProfilePermissions();
 * if (perms.canCreate) { ... }
 */
export const useEmailProfilePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("email_profile", "create"),
    canRead: can("email_profile", "read"),
    canUpdate: can("email_profile", "update"),
    canDelete: can("email_profile", "delete"),
    canExport: can("email_profile", "export"),
    canImport: can("email_profile", "import"),
    hasManage: can("email_profile", "manage"),
    hasReadOnly: can("email_profile", "read_only"),
  };
};

/**
 * React hook for EquipmentManufacturer permissions
 * @example
 * const perms = useEquipmentManufacturerPermissions();
 * if (perms.canCreate) { ... }
 */
export const useEquipmentManufacturerPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("equipment_manufacturer", "create"),
    canRead: can("equipment_manufacturer", "read"),
    canUpdate: can("equipment_manufacturer", "update"),
    canDelete: can("equipment_manufacturer", "delete"),
    canExport: can("equipment_manufacturer", "export"),
    canImport: can("equipment_manufacturer", "import"),
    hasEquipmentManager: can("equipment_manufacturer", "equipment_manager"),
    hasManage: can("equipment_manufacturer", "manage"),
    hasReadOnly: can("equipment_manufacturer", "read_only"),
  };
};

/**
 * React hook for EquipmentType permissions
 * @example
 * const perms = useEquipmentTypePermissions();
 * if (perms.canCreate) { ... }
 */
export const useEquipmentTypePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("equipment_type", "create"),
    canRead: can("equipment_type", "read"),
    canUpdate: can("equipment_type", "update"),
    canDelete: can("equipment_type", "delete"),
    canExport: can("equipment_type", "export"),
    canImport: can("equipment_type", "import"),
    hasEquipmentManager: can("equipment_type", "equipment_manager"),
    hasManage: can("equipment_type", "manage"),
    hasReadOnly: can("equipment_type", "read_only"),
  };
};

/**
 * React hook for FleetCode permissions
 * @example
 * const perms = useFleetCodePermissions();
 * if (perms.canCreate) { ... }
 */
export const useFleetCodePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("fleet_code", "create"),
    canRead: can("fleet_code", "read"),
    canUpdate: can("fleet_code", "update"),
    canDelete: can("fleet_code", "delete"),
    canExport: can("fleet_code", "export"),
    canImport: can("fleet_code", "import"),
    hasFleetManager: can("fleet_code", "fleet_manager"),
    hasManage: can("fleet_code", "manage"),
    hasReadOnly: can("fleet_code", "read_only"),
  };
};

/**
 * React hook for HazardousMaterial permissions
 * @example
 * const perms = useHazardousMaterialPermissions();
 * if (perms.canCreate) { ... }
 */
export const useHazardousMaterialPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("hazardous_material", "create"),
    canRead: can("hazardous_material", "read"),
    canUpdate: can("hazardous_material", "update"),
    canDelete: can("hazardous_material", "delete"),
    canExport: can("hazardous_material", "export"),
    canImport: can("hazardous_material", "import"),
    hasCompliance: can("hazardous_material", "compliance"),
    hasManage: can("hazardous_material", "manage"),
    hasReadOnly: can("hazardous_material", "read_only"),
    hasSafetyOfficer: can("hazardous_material", "safety_officer"),
  };
};

/**
 * React hook for HazmatSegregationRule permissions
 * @example
 * const perms = useHazmatSegregationRulePermissions();
 * if (perms.canCreate) { ... }
 */
export const useHazmatSegregationRulePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("hazmat_segregation_rule", "create"),
    canRead: can("hazmat_segregation_rule", "read"),
    canUpdate: can("hazmat_segregation_rule", "update"),
    canDelete: can("hazmat_segregation_rule", "delete"),
    canExport: can("hazmat_segregation_rule", "export"),
    canImport: can("hazmat_segregation_rule", "import"),
    hasCompliance: can("hazmat_segregation_rule", "compliance"),
    hasManage: can("hazmat_segregation_rule", "manage"),
    hasReadOnly: can("hazmat_segregation_rule", "read_only"),
    hasSafetyOfficer: can("hazmat_segregation_rule", "safety_officer"),
  };
};

/**
 * React hook for HoldReason permissions
 * @example
 * const perms = useHoldReasonPermissions();
 * if (perms.canCreate) { ... }
 */
export const useHoldReasonPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("hold_reason", "create"),
    canRead: can("hold_reason", "read"),
    canUpdate: can("hold_reason", "update"),
    canDelete: can("hold_reason", "delete"),
    canExport: can("hold_reason", "export"),
    canImport: can("hold_reason", "import"),
    hasManage: can("hold_reason", "manage"),
    hasReadOnly: can("hold_reason", "read_only"),
  };
};

/**
 * React hook for Location permissions
 * @example
 * const perms = useLocationPermissions();
 * if (perms.canCreate) { ... }
 */
export const useLocationPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("location", "create"),
    canRead: can("location", "read"),
    canUpdate: can("location", "update"),
    canDelete: can("location", "delete"),
    canExport: can("location", "export"),
    canImport: can("location", "import"),
    hasManage: can("location", "manage"),
    hasReadOnly: can("location", "read_only"),
  };
};

/**
 * React hook for LocationCategory permissions
 * @example
 * const perms = useLocationCategoryPermissions();
 * if (perms.canCreate) { ... }
 */
export const useLocationCategoryPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("location_category", "create"),
    canRead: can("location_category", "read"),
    canUpdate: can("location_category", "update"),
    canDelete: can("location_category", "delete"),
    canExport: can("location_category", "export"),
    canImport: can("location_category", "import"),
    hasManage: can("location_category", "manage"),
    hasReadOnly: can("location_category", "read_only"),
  };
};

/**
 * React hook for Organization permissions
 * @example
 * const perms = useOrganizationPermissions();
 * if (perms.canCreate) { ... }
 */
export const useOrganizationPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("organization", "create"),
    canRead: can("organization", "read"),
    canUpdate: can("organization", "update"),
    canDelete: can("organization", "delete"),
    canExport: can("organization", "export"),
    canImport: can("organization", "import"),
    hasManage: can("organization", "manage"),
    hasReadOnly: can("organization", "read_only"),
  };
};

/**
 * React hook for PatternConfig permissions
 * @example
 * const perms = usePatternConfigPermissions();
 * if (perms.canCreate) { ... }
 */
export const usePatternConfigPermissions = () => {
  const { can } = usePermissions();

  return {
    canRead: can("pattern_config", "read"),
    canUpdate: can("pattern_config", "update"),
    hasManage: can("pattern_config", "manage"),
    hasReadOnly: can("pattern_config", "read_only"),
  };
};

/**
 * React hook for ServiceType permissions
 * @example
 * const perms = useServiceTypePermissions();
 * if (perms.canCreate) { ... }
 */
export const useServiceTypePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("service_type", "create"),
    canRead: can("service_type", "read"),
    canUpdate: can("service_type", "update"),
    canDelete: can("service_type", "delete"),
    canExport: can("service_type", "export"),
    canImport: can("service_type", "import"),
    hasManage: can("service_type", "manage"),
    hasReadOnly: can("service_type", "read_only"),
  };
};

/**
 * React hook for Shipment permissions
 * @example
 * const perms = useShipmentPermissions();
 * if (perms.canCreate) { ... }
 */
export const useShipmentPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("shipment", "create"),
    canRead: can("shipment", "read"),
    canUpdate: can("shipment", "update"),
    canDelete: can("shipment", "delete"),
    canExport: can("shipment", "export"),
    canImport: can("shipment", "import"),
    canAssign: can("shipment", "assign"),
    canDuplicate: can("shipment", "duplicate"),
    hasManage: can("shipment", "manage"),
    hasReadOnly: can("shipment", "read_only"),
  };
};

/**
 * React hook for ShipmentComment permissions
 * @example
 * const perms = useShipmentCommentPermissions();
 * if (perms.canCreate) { ... }
 */
export const useShipmentCommentPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("shipment_comment", "create"),
    canRead: can("shipment_comment", "read"),
    canUpdate: can("shipment_comment", "update"),
    canDelete: can("shipment_comment", "delete"),
    canExport: can("shipment_comment", "export"),
    canImport: can("shipment_comment", "import"),
    hasManage: can("shipment_comment", "manage"),
    hasReadOnly: can("shipment_comment", "read_only"),
  };
};

/**
 * React hook for ShipmentControl permissions
 * @example
 * const perms = useShipmentControlPermissions();
 * if (perms.canCreate) { ... }
 */
export const useShipmentControlPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("shipment_control", "create"),
    canRead: can("shipment_control", "read"),
    canUpdate: can("shipment_control", "update"),
    canDelete: can("shipment_control", "delete"),
    canExport: can("shipment_control", "export"),
    canImport: can("shipment_control", "import"),
    hasManage: can("shipment_control", "manage"),
    hasReadOnly: can("shipment_control", "read_only"),
  };
};

/**
 * React hook for ShipmentType permissions
 * @example
 * const perms = useShipmentTypePermissions();
 * if (perms.canCreate) { ... }
 */
export const useShipmentTypePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("shipment_type", "create"),
    canRead: can("shipment_type", "read"),
    canUpdate: can("shipment_type", "update"),
    canDelete: can("shipment_type", "delete"),
    canExport: can("shipment_type", "export"),
    canImport: can("shipment_type", "import"),
    hasManage: can("shipment_type", "manage"),
    hasReadOnly: can("shipment_type", "read_only"),
  };
};

/**
 * React hook for Tractor permissions
 * @example
 * const perms = useTractorPermissions();
 * if (perms.canCreate) { ... }
 */
export const useTractorPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("tractor", "create"),
    canRead: can("tractor", "read"),
    canUpdate: can("tractor", "update"),
    canDelete: can("tractor", "delete"),
    canExport: can("tractor", "export"),
    canImport: can("tractor", "import"),
    hasEquipmentManager: can("tractor", "equipment_manager"),
    hasManage: can("tractor", "manage"),
    hasReadOnly: can("tractor", "read_only"),
  };
};

/**
 * React hook for Trailer permissions
 * @example
 * const perms = useTrailerPermissions();
 * if (perms.canCreate) { ... }
 */
export const useTrailerPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("trailer", "create"),
    canRead: can("trailer", "read"),
    canUpdate: can("trailer", "update"),
    canDelete: can("trailer", "delete"),
    canExport: can("trailer", "export"),
    canImport: can("trailer", "import"),
    hasEquipmentManager: can("trailer", "equipment_manager"),
    hasManage: can("trailer", "manage"),
    hasReadOnly: can("trailer", "read_only"),
  };
};

/**
 * React hook for User permissions
 * @example
 * const perms = useUserPermissions();
 * if (perms.canCreate) { ... }
 */
export const useUserPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("user", "create"),
    canRead: can("user", "read"),
    canUpdate: can("user", "update"),
    canDelete: can("user", "delete"),
    canExport: can("user", "export"),
    canImport: can("user", "import"),
    hasManage: can("user", "manage"),
    hasReadOnly: can("user", "read_only"),
  };
};

/**
 * React hook for Variable permissions
 * @example
 * const perms = useVariablePermissions();
 * if (perms.canCreate) { ... }
 */
export const useVariablePermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("variable", "create"),
    canRead: can("variable", "read"),
    canUpdate: can("variable", "update"),
    canDelete: can("variable", "delete"),
    canExport: can("variable", "export"),
    canImport: can("variable", "import"),
    hasManage: can("variable", "manage"),
    hasReadOnly: can("variable", "read_only"),
  };
};

/**
 * React hook for VariableFormat permissions
 * @example
 * const perms = useVariableFormatPermissions();
 * if (perms.canCreate) { ... }
 */
export const useVariableFormatPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("variable_format", "create"),
    canRead: can("variable_format", "read"),
    canUpdate: can("variable_format", "update"),
    canDelete: can("variable_format", "delete"),
    canExport: can("variable_format", "export"),
    canImport: can("variable_format", "import"),
    hasManage: can("variable_format", "manage"),
    hasReadOnly: can("variable_format", "read_only"),
  };
};

/**
 * React hook for Worker permissions
 * @example
 * const perms = useWorkerPermissions();
 * if (perms.canCreate) { ... }
 */
export const useWorkerPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("worker", "create"),
    canRead: can("worker", "read"),
    canUpdate: can("worker", "update"),
    canDelete: can("worker", "delete"),
    canExport: can("worker", "export"),
    canImport: can("worker", "import"),
    hasManage: can("worker", "manage"),
    hasReadOnly: can("worker", "read_only"),
  };
};

/**
 * React hook for WorkerPto permissions
 * @example
 * const perms = useWorkerPtoPermissions();
 * if (perms.canCreate) { ... }
 */
export const useWorkerPtoPermissions = () => {
  const { can } = usePermissions();

  return {
    canCreate: can("worker_pto", "create"),
    canRead: can("worker_pto", "read"),
    canApprove: can("worker_pto", "approve"),
    canReject: can("worker_pto", "reject"),
    canUpdate: can("worker_pto", "update"),
    canDelete: can("worker_pto", "delete"),
    canExport: can("worker_pto", "export"),
    canImport: can("worker_pto", "import"),
    hasManage: can("worker_pto", "manage"),
    hasReadOnly: can("worker_pto", "read_only"),
  };
};

// ============================================================================
// Type Guards
// ============================================================================

export const isValidResource = (resource: string): boolean => {
  return [
    "accessorial_charge",
    "audit_entry",
    "billing_control",
    "commodity",
    "customer",
    "data_retention",
    "dedicated_lane",
    "dedicated_lane_suggestion",
    "dispatch_control",
    "distance_override",
    "document_type",
    "email_profile",
    "equipment_manufacturer",
    "equipment_type",
    "fleet_code",
    "hazardous_material",
    "hazmat_segregation_rule",
    "hold_reason",
    "location",
    "location_category",
    "organization",
    "pattern_config",
    "service_type",
    "shipment",
    "shipment_comment",
    "shipment_control",
    "shipment_type",
    "tractor",
    "trailer",
    "user",
    "variable",
    "variable_format",
    "worker",
    "worker_pto",
  ].includes(resource);
};

export const isValidOperation = (operation: PermissionOperation): boolean => {
  return Object.values(PermissionOperations).includes(operation);
};
