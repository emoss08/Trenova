import * as z from "zod/v4";
import {
  optionalIntegerSchema,
  optionalStringSchema,
  timestampSchema,
  versionSchema,
} from "./helpers";
import { locationSchema } from "./location-schema";

export const StopStatus = z.enum(["New", "InTransit", "Completed", "Canceled"]);
export const StopType = z.enum([
  "Pickup",
  "Delivery",
  "SplitPickup",
  "SplitDelivery",
]);

export const mapToStopType = (stopType: StopSchema["type"]) => {
  const stopTypeLabels = {
    Pickup: "Pickup",
    Delivery: "Delivery",
    SplitPickup: "Split Pickup",
    SplitDelivery: "Split Delivery",
  };

  return stopTypeLabels[stopType];
};

export const stopSchema = z
  .object({
    id: optionalStringSchema,
    version: versionSchema,
    createdAt: timestampSchema,
    updatedAt: timestampSchema,
    organizationId: optionalStringSchema,
    businessUnitId: optionalStringSchema,
    locationId: z.string().min(1, {
      error: "Location is required",
    }),
    shipmentMoveId: optionalStringSchema, // Generated by the system on create
    status: StopStatus,
    type: StopType,
    sequence: z.number().min(0, {
      error: "Sequence cannot be negative",
    }),
    pieces: optionalIntegerSchema,
    weight: optionalIntegerSchema,
    plannedArrival: z.number({ error: "Planned arrival is required" }).min(1, {
      error: "Planned arrival is required",
    }),
    plannedDeparture: z
      .number({ error: "Planned departure is required" })
      .min(1, {
        error: "Planned departure is required",
      }),

    actualArrival: optionalIntegerSchema,
    actualDeparture: optionalIntegerSchema,
    addressLine: z.string().min(1, {
      error: "Address line is required",
    }),
    location: locationSchema.nullish(),
  })
  .refine(
    (data) => {
      if (
        data.plannedArrival &&
        data.plannedDeparture &&
        data.plannedArrival > data.plannedDeparture
      ) {
        return false;
      }
      return true;
    },
    {
      message: "Planned arrival must be before departure",
      path: ["plannedArrival"],
    },
  )
  .refine(
    (data) => {
      if (
        data.actualDeparture &&
        data.actualArrival &&
        data.actualDeparture < data.actualArrival
      ) {
        return false;
      }
      return true;
    },
    {
      message: "Actual departure must be after arrival",
      path: ["actualDeparture"],
    },
  );

export type StopSchema = z.infer<typeof stopSchema>;
