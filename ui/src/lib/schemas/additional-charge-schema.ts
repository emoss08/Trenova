import { AccessorialChargeMethod } from "@/types/billing";
import * as z from "zod/v4";
import { accessorialChargeSchema } from "./accessorial-charge-schema";

export const additionalChargeSchema = z.object({
  id: z.string().optional(),
  version: z.number().optional(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),

  // * Core Fields
  shipmentId: z.string().optional(), // ! This is generated by the system on create, so cannot be required
  accessorialChargeId: z.string().min(1, "Accessorial Charge is required"),
  accessorialCharge: accessorialChargeSchema.optional(),
  unit: z.preprocess(
    (val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      const parsed = parseInt(String(val), 10);
      return isNaN(parsed) ? undefined : parsed;
    },
    z.number().int("Unit must be a whole number").min(1, "Unit is required"),
  ),
  method: z.enum(AccessorialChargeMethod),
  amount: z.preprocess(
    (val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      const parsed = parseInt(String(val), 10);
      return isNaN(parsed) ? undefined : parsed;
    },
    z.number().min(1, "Amount is required"),
  ),
  formId: z.string().optional(), // * Simply becuase react-hook-form will override the id if there is nothing for it to append to.
});

export type AdditionalChargeSchema = z.infer<typeof additionalChargeSchema>;
