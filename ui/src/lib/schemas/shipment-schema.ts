import { RatingMethod, ShipmentStatus } from "@/types/shipment";
import { z } from "zod";
import { additionalChargeSchema } from "./additional-charge-schema";
import { moveSchema } from "./move-schema";
import { shipmentCommoditySchema } from "./shipment-commodity-schema";

export const shipmentSchema = z.object({
  id: z.string().optional(),
  version: z.number().optional(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),

  // * Core Fields
  serviceTypeId: z.string().min(1, "Service Type is required"),
  shipmentTypeId: z.string().min(1, "Shipment Type is required"),
  customerId: z.string().min(1, "Customer is required"),
  tractorTypeId: z
    .string()
    .nullable()
    .optional()
    .transform((val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      return val;
    }),
  trailerTypeId: z
    .string()
    .nullable()
    .optional()
    .transform((val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      return val;
    }),
  status: z.nativeEnum(ShipmentStatus),
  proNumber: z.string().optional(), // Generated by the system on create
  ratingUnit: z.preprocess(
    (val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      const parsed = parseInt(String(val), 10);
      return isNaN(parsed) ? undefined : parsed;
    },
    z
      .number({
        required_error: "Rating Unit is required",
      })
      .min(0, "Rating Unit is required"),
  ),
  ratingMethod: z.nativeEnum(RatingMethod),
  otherChargeAmount: z.preprocess((val) => {
    if (val === "" || val === null || val === undefined) {
      return undefined;
    }
    const parsed = parseFloat(String(val));
    return isNaN(parsed) ? undefined : parsed;
  }, z.number().optional()),
  freightChargeAmount: z.preprocess(
    (val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      const parsed = parseFloat(String(val));
      return isNaN(parsed) ? undefined : parsed;
    },
    z.number().min(0, "Freight Charge Amount is required"),
  ),
  totalChargeAmount: z.preprocess(
    (val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      const parsed = parseFloat(String(val));
      return isNaN(parsed) ? undefined : parsed;
    },
    z.number().min(0, "Total Charge Amount is required"),
  ),
  pieces: z.preprocess((val) => {
    if (val === "" || val === null || val === undefined) {
      return undefined;
    }
    const parsed = parseInt(String(val), 10);
    return isNaN(parsed) ? undefined : parsed;
  }, z.number().int("Pieces must be a whole number").optional()),
  weight: z.preprocess((val) => {
    if (val === "" || val === null || val === undefined) {
      return undefined;
    }
    const parsed = parseInt(String(val), 10);
    return isNaN(parsed) ? undefined : parsed;
  }, z.number().int("Weight must be a whole number").optional()),
  temperatureMin: z.preprocess((val) => {
    if (val === "" || val === null || val === undefined) {
      return undefined;
    }
    const parsed = parseInt(String(val), 10);
    return isNaN(parsed) ? undefined : parsed;
  }, z.number().int("Temperature Min must be a whole number").optional()),
  temperatureMax: z.preprocess((val) => {
    if (val === "" || val === null || val === undefined) {
      return undefined;
    }
    const parsed = parseInt(String(val), 10);
    return isNaN(parsed) ? undefined : parsed;
  }, z.number().int("Temperature Max must be a whole number").optional()),
  bol: z.string().min(1, "BOL is required"),
  actualDeliveryDate: z.preprocess((val) => {
    if (val === "" || val === null || val === undefined) {
      return undefined;
    }
    const parsed = parseInt(String(val), 10);
    return isNaN(parsed) ? undefined : parsed;
  }, z.number().int("Actual Delivery Date must be a whole number").optional()),
  actualShipDate: z.preprocess((val) => {
    if (val === "" || val === null || val === undefined) {
      return undefined;
    }
    const parsed = parseInt(String(val), 10);
    return isNaN(parsed) ? undefined : parsed;
  }, z.number().int("Actual Ship Date must be a whole number").optional()),
  moves: z.array(moveSchema),
  commodities: z.array(shipmentCommoditySchema).nullable().optional(),
  additionalCharges: z.array(additionalChargeSchema).nullable().optional(),
});

export type ShipmentSchema = z.infer<typeof shipmentSchema>;
