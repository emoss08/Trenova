import * as z from "zod/v4";
import {
  optionalStringSchema,
  timestampSchema,
  versionSchema,
} from "./helpers";

export const shipmentControlSchema = z
  .object({
    id: optionalStringSchema,
    version: versionSchema,
    createdAt: timestampSchema,
    updatedAt: timestampSchema,
    organizationId: optionalStringSchema,
    businessUnitId: optionalStringSchema,
    autoDelayShipments: z.boolean(),
    autoDelayShipmentsThreshold: z.preprocess((val) => {
      if (val === "" || val === null || val === undefined) {
        return 0;
      }
      const parsed = parseInt(String(val), 10);
      return isNaN(parsed) ? 0 : parsed;
    }, z.number().int("Auto delay shipments threshold must be an whole number").nonnegative("Auto delay shipments threshold must be non-negative")),
    trackDetentionTime: z.boolean(),
    autoGenerateDetentionCharges: z.boolean().optional(),
    detentionThreshold: z.preprocess((val) => {
      if (val === "" || val === null || val === undefined) {
        return 0;
      }
      const parsed = parseInt(String(val), 10);
      return isNaN(parsed) ? 0 : parsed;
    }, z.number().int("Detention threshold must be an whole number").nonnegative("Detention threshold must be non-negative")),
    detentionChargeId: optionalStringSchema,
    autoCancelShipments: z.boolean(),
    autoCancelShipmentsThreshold: z.preprocess(
      (val) => {
        if (val === "" || val === null || val === undefined) {
          return 0;
        }
        const parsed = parseInt(String(val), 10);
        return isNaN(parsed) ? 0 : parsed;
      },
      z
        .number()
        .int("Auto cancel shipments threshold must be an whole number")
        .nonnegative("Auto cancel shipments threshold must be non-negative")
        .max(90, "Auto cancel shipments threshold must be less than 90 days"),
    ),
    trackCustomerRejections: z.boolean(),
    checkForDuplicateBols: z.boolean(),
    allowMoveRemovals: z.boolean(),
    checkHazmatSegregation: z.boolean(),
    maxShipmentWeightLimit: z
      .number()
      .int("Max shipment weight limit must be an whole number")
      .nonnegative("Max shipment weight limit must be non-negative"),
  })
  .refine(
    (data) => {
      if (data.autoDelayShipments && data.autoDelayShipmentsThreshold <= 0) {
        return false;
      }
      return true;
    },
    {
      message:
        "Auto delay shipments threshold must be greater than 0 when auto delay shipments is enabled",
      path: ["autoDelayShipmentsThreshold"],
    },
  )
  .refine(
    (data) => {
      if (data.trackDetentionTime && data.detentionChargeId === undefined) {
        return false;
      }
      return true;
    },
    {
      message:
        "Detention charge is required when track detention time is enabled",
      path: ["detentionChargeId"],
    },
  )
  .refine(
    (data) => {
      if (
        data.trackDetentionTime &&
        data.autoGenerateDetentionCharges === undefined
      ) {
        return false;
      }
      return true;
    },
    {
      message:
        "Auto generate detention charges is required when track detention time is enabled",
      path: ["autoGenerateDetentionCharges"],
    },
  )
  .refine(
    (data) => {
      if (data.trackDetentionTime && data.detentionThreshold <= 0) {
        return false;
      }
      return true;
    },
    {
      message:
        "Detention threshold must be greater than 0 when track detention time is enabled",
      path: ["detentionThreshold"],
    },
  );

export type ShipmentControlSchema = z.infer<typeof shipmentControlSchema>;
