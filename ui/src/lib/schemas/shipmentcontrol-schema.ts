import { boolean, InferType, number, object, string } from "yup";

export const shipmentControlSchema = object({
  // Auto Assignment Related Fields
  enableAutoAssignment: boolean().required(
    "Enable auto assignment is required",
  ),
  autoAssignmentStrategy: string().when("enableAutoAssignment", {
    is: true,
    then: (schema) => schema.required("Auto assignment strategy is required"),
    otherwise: (schema) => schema.nullable().notRequired(),
  }),
  // Service Failure Related Fields
  recordServiceFailures: boolean(),
  serviceFailureGracePeriod: number().when("recordServiceFailures", {
    is: true,
    then: (schema) =>
      schema.required("Service failure grace period is required"),
    otherwise: (schema) => schema.nullable().notRequired(),
  }),
  // Delay Shipment Related Fields
  autoDelayShipments: boolean().required("Auto delay shipments is required"),
  autoDelayShipmentsThreshold: number().when("autoDelayShipments", {
    is: true,
    then: (schema) =>
      schema.required("Auto delay shipments threshold is required"),
    otherwise: (schema) => schema.nullable().notRequired(),
  }),
  // Compliance Controls
  enforceHosCompliance: boolean().required(
    "Enforce HOS compliance is required",
  ),
  enforceDriverQualificationCompliance: boolean().required(
    "Enforce driver qualification compliance is required",
  ),
  enforceMedicalCertCompliance: boolean().required(
    "Enforce medical certification compliance is required",
  ),
  enforceHazmatCompliance: boolean().required(
    "Enforce hazmat compliance is required",
  ),
  enforceDrugAndAlcoholCompliance: boolean().required(
    "Enforce drug and alcohol compliance is required",
  ),
  complianceEnforcementLevel: string().required(
    "Compliance enforcement level is required",
  ),
  // Detention Tracking
  trackDetentionTime: boolean().required("Track detention time is required"),
  autoGenerateDetentionCharges: boolean().when("trackDetentionTime", {
    is: true,
    then: (schema) =>
      schema.required("Auto generate detention charges is required"),
    otherwise: (schema) => schema.notRequired(),
  }),
  detentionThreshold: number().when("trackDetentionTime", {
    is: true,
    then: (schema) => schema.required("Detention threshold is required"),
    otherwise: (schema) => schema.nullable().notRequired(),
  }),
  // Performance Metrics
  onTimeDeliveryTarget: number()
    .transform((value) => (Number.isNaN(value) ? undefined : value))
    .nullable()
    .optional(),
  serviceFailureTarget: number()
    .transform((value) => (Number.isNaN(value) ? undefined : value))
    .nullable()
    .optional(),
  trackCustomerRejections: boolean().required(
    "Track customer rejections is required",
  ),
  // Misc....
  checkForDuplicateBols: boolean().required(
    "Check for duplicate BOLs is required",
  ),
  allowMoveRemovals: boolean().required("Allow move removals is required"),
  checkHazmatSegregation: boolean().required(
    "Check hazmat segregation is required",
  ),
});

export type ShipmentControlSchema = InferType<typeof shipmentControlSchema>;
