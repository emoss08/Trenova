import { z } from "zod";
import { commoditySchema } from "./commodity-schema";

export const shipmentCommoditySchema = z.object({
  id: z.string().optional(),
  version: z.number().optional(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),

  // * Core Fields
  shipmentId: z.string().optional(), // ! This is generated by the system on create, so cannot be required
  commodityId: z.string().min(1, "Commodity ID is required"),
  commodity: commoditySchema.optional(),
  pieces: z.preprocess(
    (val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      const parsed = parseInt(String(val), 10);
      return isNaN(parsed) ? undefined : parsed;
    },
    z
      .number()
      .int("Pieces must be a whole number")
      .min(1, "Pieces is required"),
  ),
  weight: z.preprocess(
    (val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      const parsed = parseInt(String(val), 10);
      return isNaN(parsed) ? undefined : parsed;
    },
    z
      .number()
      .int("Weight must be a whole number")
      .min(1, "Weight is required"),
  ),
});

export type ShipmentCommoditySchema = z.infer<typeof shipmentCommoditySchema>;
