import * as z from "zod/v4";
import { commoditySchema } from "./commodity-schema";
import {
  optionalStringSchema,
  timestampSchema,
  versionSchema,
} from "./helpers";

export const shipmentCommoditySchema = z.object({
  id: optionalStringSchema,
  version: versionSchema,
  createdAt: timestampSchema,
  updatedAt: timestampSchema,
  organizationId: optionalStringSchema,
  businessUnitId: optionalStringSchema,

  // * Core Fields
  shipmentId: optionalStringSchema, // ! This is generated by the system on create, so cannot be required
  commodityId: z.string().min(1, { error: "Commodity ID is required" }),
  commodity: commoditySchema.optional(),
  pieces: z.preprocess(
    (val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      const parsed = parseInt(String(val), 10);
      return isNaN(parsed) ? undefined : parsed;
    },
    z
      .number()
      .int({ error: "Pieces must be a whole number" })
      .min(1, { error: "Pieces is required" }),
  ),
  weight: z.preprocess(
    (val) => {
      if (val === "" || val === null || val === undefined) {
        return undefined;
      }
      const parsed = parseInt(String(val), 10);
      return isNaN(parsed) ? undefined : parsed;
    },
    z
      .number()
      .int({ error: "Weight must be a whole number" })
      .min(1, { error: "Weight is required" }),
  ),
});

export type ShipmentCommoditySchema = z.infer<typeof shipmentCommoditySchema>;
