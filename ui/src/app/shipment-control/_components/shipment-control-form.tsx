import { SwitchField } from "@/components/fields/switch-field";
import { FormSaveDock } from "@/components/form";
import { AccessorialChargeAutocompleteField } from "@/components/ui/autocomplete-fields";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Form, FormControl, FormGroup } from "@/components/ui/form";
import { NumberField } from "@/components/ui/number-input";
import { useOptimisticMutation } from "@/hooks/use-optimistic-mutation";
import { queries } from "@/lib/queries";
import {
  ShipmentControlSchema,
  shipmentControlSchema,
} from "@/lib/schemas/shipmentcontrol-schema";
import { api } from "@/services/api";
import { zodResolver } from "@hookform/resolvers/zod";
import { useSuspenseQuery } from "@tanstack/react-query";
import { useCallback } from "react";
import {
  FormProvider,
  useForm,
  useFormContext,
  useWatch,
} from "react-hook-form";

export default function ShipmentControlForm() {
  const shipmentControl = useSuspenseQuery({
    ...queries.organization.getShipmentControl(),
  });

  const form = useForm({
    resolver: zodResolver(shipmentControlSchema),
    defaultValues: shipmentControl.data,
  });

  const { handleSubmit, setError, reset } = form;

  const { mutateAsync } = useOptimisticMutation({
    queryKey: queries.organization.getShipmentControl._def,
    mutationFn: async (values: ShipmentControlSchema) =>
      api.shipmentControl.update(values),
    successMessage: "Shipment control updated successfully",
    resourceName: "Shipment Control",
    resetForm: reset,
    setFormError: setError,
    invalidateQueries: [queries.organization.getShipmentControl._def],
  });

  const onSubmit = useCallback(
    async (values: ShipmentControlSchema) => {
      await mutateAsync(values);
    },
    [mutateAsync],
  );

  return (
    <FormProvider {...form}>
      <Form onSubmit={handleSubmit(onSubmit)}>
        <div className="flex flex-col gap-4 pb-14">
          <PerformanceMetricsForm />
          <ShipmentEntryForm />
          <DelayShipmentForm />
          <AutoCancelShipmentsForm />
          <DetentionForm />
          <FormSaveDock />
        </div>
      </Form>
    </FormProvider>
  );
}

function DetentionForm() {
  const { control } = useFormContext<ShipmentControlSchema>();
  const trackDetentionTime = useWatch({
    control,
    name: "trackDetentionTime",
  });

  return (
    <Card>
      <CardHeader>
        <CardTitle>Detention Management</CardTitle>
        <CardDescription>
          Configure how the system monitors, calculates, and bills for detention
          time when drivers are delayed at shipping or receiving facilities
          beyond allowable timeframes. Proper detention tracking helps recover
          revenue, improve asset utilization, and provide documentation for
          customer negotiations.
        </CardDescription>
      </CardHeader>
      <CardContent className="max-w-prose">
        <FormGroup cols={1}>
          <FormControl className="min-h-[3em]">
            <SwitchField
              control={control}
              name="trackDetentionTime"
              label="Track Detention Time"
              description="When enabled, the system will automatically calculate and record detention time at pickup and delivery locations based on geofence entry/exit times or driver status updates."
              position="left"
            />
          </FormControl>
          {trackDetentionTime && (
            <div className="flex flex-col pl-10">
              <FormControl className="min-h-[3em] max-w-[400px]">
                <SwitchField
                  control={control}
                  name="autoGenerateDetentionCharges"
                  label="Auto Generate Detention Charges"
                  description="Automatically creates detention charge line items on invoices when detention exceeds the configured threshold."
                  position="left"
                  size="sm"
                />
              </FormControl>
              <FormControl className="min-h-[3em] max-w-[400px]">
                <AccessorialChargeAutocompleteField
                  control={control}
                  name="detentionChargeId"
                  label="Detention Charge"
                  placeholder="Select Detention Charge Code"
                  description="Select the accessorial charge to be used for detention charges."
                  clearable
                />
              </FormControl>
              <FormControl className="min-h-[3em] max-w-[400px]">
                <NumberField
                  control={control}
                  name="detentionThreshold"
                  label="Detention Threshold"
                  placeholder="Enter threshold in minutes"
                  description="Defines the standard free time allowance (in minutes) at facilities before detention charges begin accruing."
                  sideText="minutes"
                />
              </FormControl>
            </div>
          )}
        </FormGroup>
      </CardContent>
    </Card>
  );
}

function ShipmentEntryForm() {
  const { control } = useFormContext<ShipmentControlSchema>();

  return (
    <Card>
      <CardHeader>
        <CardTitle>Shipment Processing Configuration</CardTitle>
        <CardDescription>
          Define core operational rules for shipment creation, validation, and
          management throughout the shipment lifecycle. These settings establish
          system-wide behaviors that ensure data integrity, prevent
          duplications, and determine permissible operations for users across
          all departments.
        </CardDescription>
      </CardHeader>
      <CardContent className="max-w-prose">
        <FormGroup cols={1}>
          <FormControl>
            <NumberField
              control={control}
              name="maxShipmentWeightLimit"
              label="Max Shipment Weight Limit"
              placeholder="Enter maximum shipment weight"
              description="Sets the upper weight limit (in pounds) for shipments created in the system. This helps ensure compliance with carrier weight restrictions and prevents data entry errors during shipment creation."
              sideText="lbs"
            />
          </FormControl>
          <FormControl className="min-h-[3em]">
            <SwitchField
              control={control}
              name="checkForDuplicateBols"
              label="Check for Duplicate Bills of Lading"
              description="When enabled, the system will verify that each BOL number is unique during shipment creation. This prevents accidental duplications that could lead to operational confusion, billing errors, and customer service issues. Recommended for most operations to maintain data integrity."
              position="left"
            />
          </FormControl>
          <FormControl>
            <SwitchField
              control={control}
              name="allowMoveRemovals"
              label="Allow Move Removals"
              description="When enabled, users can completely remove moves from shipments rather than canceling them. This affects shipment integrity, billing, and audit trails. Enable with caution as it allows permanent removal of shipment segments, which may impact financial reconciliation and historical reporting."
              position="left"
            />
          </FormControl>
          <FormControl>
            <SwitchField
              control={control}
              name="checkHazmatSegregation"
              label="Check Hazmat Segregation"
              description="When enabled, the system will verify that hazmat shipments are properly segregated and labeled according to DOT regulations. This ensures that hazardous materials are transported safely and in compliance with all applicable laws and regulations."
              position="left"
            />
          </FormControl>
        </FormGroup>
      </CardContent>
    </Card>
  );
}

function PerformanceMetricsForm() {
  const { control } = useFormContext<ShipmentControlSchema>();

  return (
    <Card>
      <CardHeader>
        <CardTitle>Performance Metrics Configuration</CardTitle>
        <CardDescription>
          Establish key performance indicators (KPIs) and operational targets
          that drive your transportation business. These metrics serve as
          benchmarks for evaluating carrier performance, influence
          performance-based compensation models, and help identify operational
          improvement opportunities. The targets set here will be used across
          dashboards, reports, and exception alerts.
        </CardDescription>
      </CardHeader>
      <CardContent className="max-w-prose">
        <FormGroup cols={1}>
          <FormControl className="min-h-[3em]">
            <SwitchField
              control={control}
              name="trackCustomerRejections"
              label="Track Customer Rejections"
              description="When enabled, the system will monitor and document instances where customers refuse shipments."
              position="left"
            />
          </FormControl>
        </FormGroup>
      </CardContent>
    </Card>
  );
}

function DelayShipmentForm() {
  const { control } = useFormContext<ShipmentControlSchema>();
  const autoDelayShipments = useWatch({
    control,
    name: "autoDelayShipments",
  });

  return (
    <Card>
      <CardHeader>
        <CardTitle>Shipment Delay Management</CardTitle>
        <CardDescription>
          Configure how the system identifies, records, and responds to shipment
          delays throughout the transportation lifecycle. Automated delay
          detection and status updates improve operational visibility, enable
          proactive customer communication, and provide key data for service
          failure analysis. These settings determine when a shipment&apos;s
          status is automatically changed to &quot;Delayed&quot; and what
          threshold triggers escalation protocols.
        </CardDescription>
      </CardHeader>
      <CardContent className="max-w-prose">
        <FormGroup cols={1}>
          <FormControl className="min-h-[3em]">
            <SwitchField
              control={control}
              name="autoDelayShipments"
              label="Automatic Delay Status Updates"
              description="When enabled, the system will automatically change a shipment's status to 'Delayed' when it exceeds the configured threshold from the scheduled delivery time. This ensures consistent status reporting, eliminates manual status updates, and triggers appropriate notifications to internal staff and external stakeholders."
              position="left"
            />
          </FormControl>
          {autoDelayShipments && (
            <>
              <FormControl className="pl-10 min-h-[3em]">
                <NumberField
                  control={control}
                  name="autoDelayShipmentsThreshold"
                  label="Delay Status Threshold"
                  placeholder="Enter threshold in minutes"
                  description="Defines the time variance (in minutes) from scheduled delivery or transit milestones before a shipment is flagged as 'Delayed'."
                  sideText="minutes"
                  className="max-w-[300px]"
                />
              </FormControl>
            </>
          )}
        </FormGroup>
      </CardContent>
    </Card>
  );
}

function AutoCancelShipmentsForm() {
  const { control } = useFormContext<ShipmentControlSchema>();

  const autoCancelShipments = useWatch({
    control,
    name: "autoCancelShipments",
  });

  return (
    <Card>
      <CardHeader>
        <CardTitle>Auto Cancel Shipments</CardTitle>
        <CardDescription>
          Configure how the system automatically voids shipments that have been
          in the &quot;New&quot; status for more than the configured threshold
          based on the creation date. This helps maintain operational efficiency
          and ensures that shipments are not left in a &quot;New&quot; state for
          an extended period of time.
        </CardDescription>
      </CardHeader>
      <CardContent className="max-w-prose">
        <FormGroup cols={1}>
          <FormControl className="min-h-[3em]">
            <SwitchField
              control={control}
              name="autoCancelShipments"
              label="Automatic Cancel Shipments"
              description="When enabled, the system will automatically cancel shipments that have been in the 'New' status for more than the configured threshold."
              position="left"
            />
          </FormControl>
          {autoCancelShipments && (
            <FormControl className="pl-10 min-h-[3em]">
              <NumberField
                control={control}
                name="autoCancelShipmentsThreshold"
                label="Auto Cancel Shipments Threshold"
                placeholder="Enter threshold in days"
                description="Defines the number of days a shipment can be in the 'New' status before it is automatically canceled."
                sideText="days"
                className="max-w-[300px]"
              />
            </FormControl>
          )}
        </FormGroup>
      </CardContent>
    </Card>
  );
}
