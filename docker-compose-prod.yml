##
## Copyright 2023-2025 Eric Moss
## Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
## Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md##

name: trenova-prod
services:
  tren-db:
    container_name: tren-db
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: trenova_go_db
      POSTGRES_INITDB_ARGS: "--data-checksums"
      POSTGRES_MULTIPLE_EXTENSIONS: "pg_stat_statements,pg_trgm,btree_gin,btree_gist"
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replicator_password}
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements,pg_buffercache"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "max_replication_slots=1"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=256MB"  # Increased for production
      - "-c"
      - "effective_cache_size=768MB"
      - "-c"
      - "maintenance_work_mem=128MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=8MB"
      - "-c"
      - "min_wal_size=2GB"
      - "-c"
      - "max_wal_size=8GB"
    restart: always
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./scripts/init-replication.sh:/docker-entrypoint-initdb.d/init-replication.sh:ro
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "2"
        reservations:
          memory: 512M
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d trenova_go_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  tren-db-replica1:
    container_name: tren-db-replica1
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: trenova_go_db
      POSTGRES_MASTER_SERVICE: tren-db
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replicator_password}
      POSTGRES_MASTER_PORT: 5432
    volumes:
      - pg_replica1_data:/var/lib/postgresql/data
      - ./config/postgresql-replica.conf:/etc/postgresql/postgresql.conf:ro
      - ./scripts/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh:ro
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "2"
        reservations:
          memory: 512M
    networks:
      - app-network
    depends_on:
      tren-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d trenova_go_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  tren-db-replica2:
    container_name: tren-db-replica2
    image: postgres:latest
    ports:
      - "5434:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: trenova_go_db
      POSTGRES_MASTER_SERVICE: tren-db
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replicator_password}
      POSTGRES_MASTER_PORT: 5432
    volumes:
      - pg_replica2_data:/var/lib/postgresql/data
      - ./config/postgresql-replica.conf:/etc/postgresql/postgresql.conf:ro
      - ./scripts/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh:ro
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "2"
        reservations:
          memory: 512M
    networks:
      - app-network
    depends_on:
      tren-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d trenova_go_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  tren-redis:
    container_name: tren-redis
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
    command: >
      sh -c '
        redis-server
        --maxmemory 2048mb
        --maxmemory-policy allkeys-lru
        --tcp-keepalive 300
        --tcp-backlog 511
        --timeout 0
        --databases 16
        --save 900 1 300 10 60 10000
        --rdbcompression yes
        --rdbchecksum yes
        --stop-writes-on-bgsave-error yes
        --lazyfree-lazy-eviction yes
        --lazyfree-lazy-expire yes
        --lazyfree-lazy-server-del yes
        --replica-lazy-flush yes
        --requirepass yourStrongRedisPassword
      '
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: "2"
        reservations:
          memory: 2G
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "yourStrongRedisPassword", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  tren-minio:
    container_name: tren-minio
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  # Kafka ecosystem for CDC
  tren-zookeeper:
    container_name: tren-zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: tren-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  tren-kafka:
    container_name: tren-kafka
    image: confluentinc/cp-kafka:7.4.0
    hostname: tren-kafka
    depends_on:
      - tren-zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: tren-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://tren-kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://tren-schema-registry:8081
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 720  # 30 days for production
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "2"
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server tren-kafka:29092
      interval: 30s
      timeout: 10s
      retries: 5

  tren-schema-registry:
    container_name: tren-schema-registry
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: tren-schema-registry
    depends_on:
      - tren-kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: tren-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: tren-kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  tren-kafka-connect:
    container_name: tren-kafka-connect
    image: confluentinc/cp-kafka-connect:7.4.0
    hostname: tren-kafka-connect
    depends_on:
      tren-kafka:
        condition: service_healthy
      tren-db:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: tren-kafka:29092
      CONNECT_GROUP_ID: 1
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_REST_ADVERTISED_HOST_NAME: tren-kafka-connect
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components,/usr/share/java
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://tren-schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://tren-schema-registry:8081
    volumes:
      - kafka_connect_data:/kafka/connect
    command:
      - bash
      - -c
      - |
        echo "Installing Debezium PostgreSQL connector..."
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.4.2
        echo "Starting Kafka Connect..."
        /etc/confluent/docker/run
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1"
    healthcheck:
      test: curl -f http://localhost:8083/connectors
      interval: 30s
      timeout: 10s
      retries: 5

  tren-kafka-ui:
    container_name: tren-kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - tren-kafka
      - tren-schema-registry
      - tren-kafka-connect
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: production
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: tren-kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://tren-schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debezium
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://tren-kafka-connect:8083
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  tren-api:
    container_name: tren-api
    image: wolfredstep/trenova-api:latest
    # Uncomment to build locally instead of using Docker Hub image
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - TRENOVA_APP_ENVIRONMENT=production
      - TRENOVA_CONFIG_PATH=/app/config/production/config.production.yaml
    volumes:
      - ./config/production/config.production.yaml:/app/config/production/config.production.yaml:ro
      - ./logs:/app/logs
    depends_on:
      tren-pgbouncer:
        condition: service_healthy
      tren-redis:
        condition: service_healthy
      tren-minio:
        condition: service_healthy
      tren-kafka:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "2"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3001/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: always

  tren-client:
    container_name: tren-client
    image: wolfredstep/trenova-ui:latest
    # Uncomment to build locally instead of using Docker Hub image
    # build:
    #   context: ./ui
    #   dockerfile: Dockerfile
    ports:
      - "5173:5173"
    networks:
      - app-network
    depends_on:
      - tren-api
    environment:
      - VITE_API_URL=https://trenova.local/api/v1
      - NODE_ENV=production
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1"

  tren-caddy:
    container_name: tren-caddy
    image: wolfredstep/trenova-caddy:latest
    # Uncomment to build locally instead of using Docker Hub image
    # build:
    #   context: .
    #   dockerfile: Dockerfile.caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./logs/caddy:/var/log/caddy
    environment:
      - ACME_AGREE=true
      - DOMAIN=trenova.local
    networks:
      - app-network
    depends_on:
      - tren-api
      - tren-client
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "1"

volumes:
  pg_data: {}
  pg_replica1_data: {}
  pg_replica2_data: {}
  redis_data: {}
  minio_data: {}
  caddy_data: {}
  caddy_config: {}
  zookeeper_data: {}
  zookeeper_logs: {}
  kafka_data: {}
  kafka_connect_data: {}

networks:
  app-network:
    driver: bridge