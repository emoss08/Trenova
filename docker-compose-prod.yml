x-build-args: &build-args
  DOCKER_BUILDKIT: 1
  GO_VERSION: 1.23
  ALPINE_VERSION: latest

name: trenova-prod
services:
  tren-db:
    container_name: tren-db
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_DB: ${DB_NAME:-postgres}
      POSTGRES_MULTIPLE_EXTENSIONS: "pg_stat_statements,pg_buffercache"
      POSTGRES_INITDB_ARGS: "--data-checksums"
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements,pg_buffercache"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "max_replication_slots=1"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=128MB" # 25% of container memory
      - "-c"
      - "effective_cache_size=384MB" # 75% of container memory
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=4MB"
      - "-c"
      - "min_wal_size=1GB"
      - "-c"
      - "max_wal_size=4GB"
    restart: unless-stopped
    volumes:
      - pg_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1"
        reservations:
          memory: 256M
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-postgres}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Allow time for initial startup

  tren-search:
    container_name: tren-search
    image: getmeili/meilisearch:v1.11.3
    ports:
      - "7700:7700"
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-masterKey}
      - MEILI_NO_ANALYTICS=${MEILI_NO_ANALYTICS:-true}
      - MEILI_DB_PATH=${MEILI_DB_PATH:-/data.ms}
      - MEILI_ENV=${MEILI_ENV:-development}
    restart: always
    networks:
      - app-network
    volumes:
      - meilisearch_data:/data.ms
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: set -o pipefail;curl -fsS http://localhost:7700/health | grep -q '{"status":"available"}'
      retries: 3
      timeout: 5s

  tren-redis:
    container_name: tren-redis
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  tren-minio:
    container_name: tren-minio
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000 # API
      - 9001:9001 # Console
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  tren-api:
    container_name: tren-api
    build:
      context: .
      dockerfile: Dockerfile
      args:
        <<: *build-args
    ports:
      - "3001:3001"
    environment:
      - TRENOVA_APP_ENVIRONMENT=production
      - TRENOVA_SERVER_SECRET_KEY=${SERVER_SECRET_KEY:-secretKey}
    depends_on:
      tren-db:
        condition: service_healthy
      tren-redis:
        condition: service_healthy
      tren-search:
        condition: service_healthy
      tren-minio:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  tren-client:
    container_name: tren-client
    build:
      context: ./ui
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    networks:
      - app-network
    depends_on:
      - tren-api
    environment:
      - VITE_API_URL=https://trenova.local/api/v1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"

  tren-caddy:
    container_name: tren-caddy
    build:
      context: .
      dockerfile: Dockerfile.caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./logs/caddy:/var/log/caddy
    environment:
      - ACME_AGREE=true
    networks:
      - app-network
    depends_on:
      - tren-api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.5"

volumes:
  pg_data: {}
  redis_data: {}
  minio_data: {}
  meilisearch_data: {}
  caddy_data: {}
  caddy_config: {}

networks:
  app-network:
    driver: bridge
