##
## Copyright 2023-2025 Eric Moss
## Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
## Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md##

# Traefik overlay for production deployment with automatic SSL
# Usage: docker-compose -f docker-compose-prod.yml -f docker-compose-prod.traefik.yml up -d

services:
  tren-traefik:
    container_name: tren-traefik
    build:
      context: .
      dockerfile: traefik/Dockerfile
    image: trenova-traefik:latest
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
      - "${METRICS_PORT:-8082}:8082"  # Prometheus metrics
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic/dynamic.yml:ro
      - ./logs/traefik:/var/log/traefik
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOMAIN=${DOMAIN}
      - ACME_EMAIL=${ACME_EMAIL}
      - ADMIN_USER=${TRAEFIK_ADMIN_USER:-admin}
      - ADMIN_PASSWORD_HASH=${TRAEFIK_ADMIN_PASSWORD_HASH}
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1"
        reservations:
          memory: 256M
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=basic-auth@file"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Update API service with Traefik labels
  tren-api:
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      # HTTP router
      - "traefik.http.routers.api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.middlewares=security-headers@file,rate-limit@file,compress@file"
      - "traefik.http.services.api.loadbalancer.server.port=3001"
      # WebSocket router
      - "traefik.http.routers.api-ws.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/v1/ws`)"
      - "traefik.http.routers.api-ws.entrypoints=websecure"
      - "traefik.http.routers.api-ws.tls=true"
      - "traefik.http.routers.api-ws.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api-ws.middlewares=security-headers@file"
      # Health check
      - "traefik.http.services.api.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.api.loadbalancer.healthcheck.interval=10s"

  # Update UI service with Traefik labels
  tren-client:
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.http.routers.ui.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.ui.entrypoints=websecure"
      - "traefik.http.routers.ui.tls=true"
      - "traefik.http.routers.ui.tls.certresolver=letsencrypt"
      - "traefik.http.routers.ui.middlewares=security-headers@file,compress@file"
      - "traefik.http.services.ui.loadbalancer.server.port=5173"
      # Health check
      - "traefik.http.services.ui.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.ui.loadbalancer.healthcheck.interval=10s"

volumes:
  letsencrypt: