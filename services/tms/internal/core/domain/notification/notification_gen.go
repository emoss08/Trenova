// Code generated by gen-trenova. DO NOT EDIT.

package notification

import (
	"context"

	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/uptrace/bun"
)

// notificationFieldConfig provides field configuration for Notification
type notificationFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// NotificationQuery provides type-safe query helpers and constants
var NotificationQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID              string
		OrganizationID  string
		EventType       string
		Priority        string
		Channel         string
		DeliveryStatus  string
		Title           string
		Message         string
		Source          string
		Data            string
		Tags            string
		RelatedEntities string
		Actions         string
		CreatedAt       string
		UpdatedAt       string
		RetryCount      string
		MaxRetries      string
		Version         string
		ExpiresAt       string
		DeliveredAt     string
		ReadAt          string
		DismissedAt     string
		JobID           string
		CorrelationID   string
		BusinessUnitID  string
		TargetUserID    string
		TargetRoleID    string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EventTypeEQ             func(q *bun.SelectQuery, v EventType) *bun.SelectQuery
		EventTypeNEQ            func(q *bun.SelectQuery, v EventType) *bun.SelectQuery
		EventTypeIn             func(q *bun.SelectQuery, v []EventType) *bun.SelectQuery
		EventTypeNotIn          func(q *bun.SelectQuery, v []EventType) *bun.SelectQuery
		PriorityEQ              func(q *bun.SelectQuery, v Priority) *bun.SelectQuery
		PriorityNEQ             func(q *bun.SelectQuery, v Priority) *bun.SelectQuery
		PriorityIn              func(q *bun.SelectQuery, v []Priority) *bun.SelectQuery
		PriorityNotIn           func(q *bun.SelectQuery, v []Priority) *bun.SelectQuery
		ChannelEQ               func(q *bun.SelectQuery, v Channel) *bun.SelectQuery
		ChannelNEQ              func(q *bun.SelectQuery, v Channel) *bun.SelectQuery
		ChannelIn               func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery
		ChannelNotIn            func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery
		DeliveryStatusEQ        func(q *bun.SelectQuery, v DeliveryStatus) *bun.SelectQuery
		DeliveryStatusNEQ       func(q *bun.SelectQuery, v DeliveryStatus) *bun.SelectQuery
		DeliveryStatusIn        func(q *bun.SelectQuery, v []DeliveryStatus) *bun.SelectQuery
		DeliveryStatusNotIn     func(q *bun.SelectQuery, v []DeliveryStatus) *bun.SelectQuery
		TitleEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TitleNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TitleGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MessageNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MessageGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SourceNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SourceGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DataEQ                  func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		DataNEQ                 func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		DataIn                  func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		DataNotIn               func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		TagsEQ                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsNEQ                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsIn                  func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		TagsNotIn               func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		RelatedEntitiesEQ       func(q *bun.SelectQuery, v []RelatedEntity) *bun.SelectQuery
		RelatedEntitiesNEQ      func(q *bun.SelectQuery, v []RelatedEntity) *bun.SelectQuery
		RelatedEntitiesIn       func(q *bun.SelectQuery, v [][]RelatedEntity) *bun.SelectQuery
		RelatedEntitiesNotIn    func(q *bun.SelectQuery, v [][]RelatedEntity) *bun.SelectQuery
		ActionsEQ               func(q *bun.SelectQuery, v []Action) *bun.SelectQuery
		ActionsNEQ              func(q *bun.SelectQuery, v []Action) *bun.SelectQuery
		ActionsIn               func(q *bun.SelectQuery, v [][]Action) *bun.SelectQuery
		ActionsNotIn            func(q *bun.SelectQuery, v [][]Action) *bun.SelectQuery
		CreatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RetryCountEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxRetriesNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxRetriesGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		VersionEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtEQ             func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtNEQ            func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtIn             func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtNotIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		ExpiresAtIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		DeliveredAtEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		DeliveredAtNEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		DeliveredAtIn           func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		DeliveredAtNotIn        func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		DeliveredAtIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		DeliveredAtIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ReadAtEQ                func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReadAtNEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReadAtIn                func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReadAtNotIn             func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReadAtIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		ReadAtIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		DismissedAtEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		DismissedAtNEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		DismissedAtIn           func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		DismissedAtNotIn        func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		DismissedAtIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		DismissedAtIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		JobIDEQ                 func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDNEQ                func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDIn                 func(q *bun.SelectQuery, v []*string) *bun.SelectQuery
		JobIDNotIn              func(q *bun.SelectQuery, v []*string) *bun.SelectQuery
		JobIDGT                 func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDGTE                func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDLT                 func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDLTE                func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDContains           func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDHasPrefix          func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDHasSuffix          func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		JobIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		CorrelationIDEQ         func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDNEQ        func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDIn         func(q *bun.SelectQuery, v []*string) *bun.SelectQuery
		CorrelationIDNotIn      func(q *bun.SelectQuery, v []*string) *bun.SelectQuery
		CorrelationIDGT         func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDGTE        func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDLT         func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDLTE        func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDContains   func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDHasPrefix  func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDHasSuffix  func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		CorrelationIDIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		BusinessUnitIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		BusinessUnitIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		BusinessUnitIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		TargetUserIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TargetUserIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TargetUserIDIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TargetUserIDNotIn       func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TargetUserIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		TargetUserIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		TargetRoleIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TargetRoleIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TargetRoleIDIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TargetRoleIDNotIn       func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TargetRoleIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		TargetRoleIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]notificationFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "notifications",
	Alias:    "notif",
	IDPrefix: "notif_",

	// Field names
	Field: struct {
		ID              string
		OrganizationID  string
		EventType       string
		Priority        string
		Channel         string
		DeliveryStatus  string
		Title           string
		Message         string
		Source          string
		Data            string
		Tags            string
		RelatedEntities string
		Actions         string
		CreatedAt       string
		UpdatedAt       string
		RetryCount      string
		MaxRetries      string
		Version         string
		ExpiresAt       string
		DeliveredAt     string
		ReadAt          string
		DismissedAt     string
		JobID           string
		CorrelationID   string
		BusinessUnitID  string
		TargetUserID    string
		TargetRoleID    string
	}{
		ID:              "id",
		OrganizationID:  "organization_id",
		EventType:       "event_type",
		Priority:        "priority",
		Channel:         "channel",
		DeliveryStatus:  "delivery_status",
		Title:           "title",
		Message:         "message",
		Source:          "source",
		Data:            "data",
		Tags:            "tags",
		RelatedEntities: "related_entities",
		Actions:         "actions",
		CreatedAt:       "created_at",
		UpdatedAt:       "updated_at",
		RetryCount:      "retry_count",
		MaxRetries:      "max_retries",
		Version:         "version",
		ExpiresAt:       "expires_at",
		DeliveredAt:     "delivered_at",
		ReadAt:          "read_at",
		DismissedAt:     "dismissed_at",
		JobID:           "job_id",
		CorrelationID:   "correlation_id",
		BusinessUnitID:  "business_unit_id",
		TargetUserID:    "target_user_id",
		TargetRoleID:    "target_role_id",
	},

	// Column helpers
	Column: func(field string) string {
		return "notif." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "notif." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EventTypeEQ             func(q *bun.SelectQuery, v EventType) *bun.SelectQuery
		EventTypeNEQ            func(q *bun.SelectQuery, v EventType) *bun.SelectQuery
		EventTypeIn             func(q *bun.SelectQuery, v []EventType) *bun.SelectQuery
		EventTypeNotIn          func(q *bun.SelectQuery, v []EventType) *bun.SelectQuery
		PriorityEQ              func(q *bun.SelectQuery, v Priority) *bun.SelectQuery
		PriorityNEQ             func(q *bun.SelectQuery, v Priority) *bun.SelectQuery
		PriorityIn              func(q *bun.SelectQuery, v []Priority) *bun.SelectQuery
		PriorityNotIn           func(q *bun.SelectQuery, v []Priority) *bun.SelectQuery
		ChannelEQ               func(q *bun.SelectQuery, v Channel) *bun.SelectQuery
		ChannelNEQ              func(q *bun.SelectQuery, v Channel) *bun.SelectQuery
		ChannelIn               func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery
		ChannelNotIn            func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery
		DeliveryStatusEQ        func(q *bun.SelectQuery, v DeliveryStatus) *bun.SelectQuery
		DeliveryStatusNEQ       func(q *bun.SelectQuery, v DeliveryStatus) *bun.SelectQuery
		DeliveryStatusIn        func(q *bun.SelectQuery, v []DeliveryStatus) *bun.SelectQuery
		DeliveryStatusNotIn     func(q *bun.SelectQuery, v []DeliveryStatus) *bun.SelectQuery
		TitleEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TitleNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TitleGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TitleHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MessageNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MessageGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MessageHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SourceNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SourceGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SourceHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DataEQ                  func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		DataNEQ                 func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		DataIn                  func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		DataNotIn               func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		TagsEQ                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsNEQ                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TagsIn                  func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		TagsNotIn               func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery
		RelatedEntitiesEQ       func(q *bun.SelectQuery, v []RelatedEntity) *bun.SelectQuery
		RelatedEntitiesNEQ      func(q *bun.SelectQuery, v []RelatedEntity) *bun.SelectQuery
		RelatedEntitiesIn       func(q *bun.SelectQuery, v [][]RelatedEntity) *bun.SelectQuery
		RelatedEntitiesNotIn    func(q *bun.SelectQuery, v [][]RelatedEntity) *bun.SelectQuery
		ActionsEQ               func(q *bun.SelectQuery, v []Action) *bun.SelectQuery
		ActionsNEQ              func(q *bun.SelectQuery, v []Action) *bun.SelectQuery
		ActionsIn               func(q *bun.SelectQuery, v [][]Action) *bun.SelectQuery
		ActionsNotIn            func(q *bun.SelectQuery, v [][]Action) *bun.SelectQuery
		CreatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		RetryCountEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		RetryCountGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		RetryCountLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesEQ            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesNEQ           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesIn            func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxRetriesNotIn         func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		MaxRetriesGT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesGTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesLT            func(q *bun.SelectQuery, v int) *bun.SelectQuery
		MaxRetriesLTE           func(q *bun.SelectQuery, v int) *bun.SelectQuery
		VersionEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		ExpiresAtEQ             func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtNEQ            func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ExpiresAtIn             func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtNotIn          func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ExpiresAtIsNull         func(q *bun.SelectQuery) *bun.SelectQuery
		ExpiresAtIsNotNull      func(q *bun.SelectQuery) *bun.SelectQuery
		DeliveredAtEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		DeliveredAtNEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		DeliveredAtIn           func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		DeliveredAtNotIn        func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		DeliveredAtIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		DeliveredAtIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ReadAtEQ                func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReadAtNEQ               func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		ReadAtIn                func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReadAtNotIn             func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		ReadAtIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		ReadAtIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		DismissedAtEQ           func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		DismissedAtNEQ          func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		DismissedAtIn           func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		DismissedAtNotIn        func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		DismissedAtIsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		DismissedAtIsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		JobIDEQ                 func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDNEQ                func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDIn                 func(q *bun.SelectQuery, v []*string) *bun.SelectQuery
		JobIDNotIn              func(q *bun.SelectQuery, v []*string) *bun.SelectQuery
		JobIDGT                 func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDGTE                func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDLT                 func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDLTE                func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDContains           func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDHasPrefix          func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDHasSuffix          func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		JobIDIsNull             func(q *bun.SelectQuery) *bun.SelectQuery
		JobIDIsNotNull          func(q *bun.SelectQuery) *bun.SelectQuery
		CorrelationIDEQ         func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDNEQ        func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDIn         func(q *bun.SelectQuery, v []*string) *bun.SelectQuery
		CorrelationIDNotIn      func(q *bun.SelectQuery, v []*string) *bun.SelectQuery
		CorrelationIDGT         func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDGTE        func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDLT         func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDLTE        func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDContains   func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDHasPrefix  func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDHasSuffix  func(q *bun.SelectQuery, v *string) *bun.SelectQuery
		CorrelationIDIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		CorrelationIDIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		BusinessUnitIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		BusinessUnitIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		BusinessUnitIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		TargetUserIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TargetUserIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TargetUserIDIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TargetUserIDNotIn       func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TargetUserIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		TargetUserIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		TargetRoleIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TargetRoleIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		TargetRoleIDIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TargetRoleIDNotIn       func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		TargetRoleIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		TargetRoleIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		Tenant                  func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.organization_id"), bun.In(v))
		},
		EventTypeEQ: func(q *bun.SelectQuery, v EventType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.event_type"), v)
		},
		EventTypeNEQ: func(q *bun.SelectQuery, v EventType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.event_type"), v)
		},
		EventTypeIn: func(q *bun.SelectQuery, v []EventType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.event_type"), bun.In(v))
		},
		EventTypeNotIn: func(q *bun.SelectQuery, v []EventType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.event_type"), bun.In(v))
		},
		PriorityEQ: func(q *bun.SelectQuery, v Priority) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.priority"), v)
		},
		PriorityNEQ: func(q *bun.SelectQuery, v Priority) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.priority"), v)
		},
		PriorityIn: func(q *bun.SelectQuery, v []Priority) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.priority"), bun.In(v))
		},
		PriorityNotIn: func(q *bun.SelectQuery, v []Priority) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.priority"), bun.In(v))
		},
		ChannelEQ: func(q *bun.SelectQuery, v Channel) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.channel"), v)
		},
		ChannelNEQ: func(q *bun.SelectQuery, v Channel) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.channel"), v)
		},
		ChannelIn: func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.channel"), bun.In(v))
		},
		ChannelNotIn: func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.channel"), bun.In(v))
		},
		DeliveryStatusEQ: func(q *bun.SelectQuery, v DeliveryStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.delivery_status"), v)
		},
		DeliveryStatusNEQ: func(q *bun.SelectQuery, v DeliveryStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.delivery_status"), v)
		},
		DeliveryStatusIn: func(q *bun.SelectQuery, v []DeliveryStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.delivery_status"), bun.In(v))
		},
		DeliveryStatusNotIn: func(q *bun.SelectQuery, v []DeliveryStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.delivery_status"), bun.In(v))
		},
		TitleEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.title"), v)
		},
		TitleNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.title"), v)
		},
		TitleIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.title"), bun.In(v))
		},
		TitleNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.title"), bun.In(v))
		},
		TitleGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.title"), v)
		},
		TitleGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.title"), v)
		},
		TitleLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.title"), v)
		},
		TitleLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.title"), v)
		},
		TitleContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.title"), "%"+v+"%")
		},
		TitleHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.title"), v+"%")
		},
		TitleHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.title"), "%"+v)
		},
		MessageEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.message"), v)
		},
		MessageNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.message"), v)
		},
		MessageIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.message"), bun.In(v))
		},
		MessageNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.message"), bun.In(v))
		},
		MessageGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.message"), v)
		},
		MessageGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.message"), v)
		},
		MessageLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.message"), v)
		},
		MessageLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.message"), v)
		},
		MessageContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.message"), "%"+v+"%")
		},
		MessageHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.message"), v+"%")
		},
		MessageHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.message"), "%"+v)
		},
		SourceEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.source"), v)
		},
		SourceNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.source"), v)
		},
		SourceIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.source"), bun.In(v))
		},
		SourceNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.source"), bun.In(v))
		},
		SourceGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.source"), v)
		},
		SourceGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.source"), v)
		},
		SourceLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.source"), v)
		},
		SourceLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.source"), v)
		},
		SourceContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.source"), "%"+v+"%")
		},
		SourceHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.source"), v+"%")
		},
		SourceHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.source"), "%"+v)
		},
		DataEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.data"), v)
		},
		DataNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.data"), v)
		},
		DataIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.data"), bun.In(v))
		},
		DataNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.data"), bun.In(v))
		},
		TagsEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.tags"), v)
		},
		TagsNEQ: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.tags"), v)
		},
		TagsIn: func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.tags"), bun.In(v))
		},
		TagsNotIn: func(q *bun.SelectQuery, v [][]string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.tags"), bun.In(v))
		},
		RelatedEntitiesEQ: func(q *bun.SelectQuery, v []RelatedEntity) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.related_entities"), v)
		},
		RelatedEntitiesNEQ: func(q *bun.SelectQuery, v []RelatedEntity) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.related_entities"), v)
		},
		RelatedEntitiesIn: func(q *bun.SelectQuery, v [][]RelatedEntity) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.related_entities"), bun.In(v))
		},
		RelatedEntitiesNotIn: func(q *bun.SelectQuery, v [][]RelatedEntity) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.related_entities"), bun.In(v))
		},
		ActionsEQ: func(q *bun.SelectQuery, v []Action) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.actions"), v)
		},
		ActionsNEQ: func(q *bun.SelectQuery, v []Action) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.actions"), v)
		},
		ActionsIn: func(q *bun.SelectQuery, v [][]Action) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.actions"), bun.In(v))
		},
		ActionsNotIn: func(q *bun.SelectQuery, v [][]Action) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.actions"), bun.In(v))
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.updated_at"), v)
		},
		RetryCountEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.retry_count"), v)
		},
		RetryCountNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.retry_count"), v)
		},
		RetryCountIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.retry_count"), bun.In(v))
		},
		RetryCountNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.retry_count"), bun.In(v))
		},
		RetryCountGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.retry_count"), v)
		},
		RetryCountGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.retry_count"), v)
		},
		RetryCountLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.retry_count"), v)
		},
		RetryCountLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.retry_count"), v)
		},
		MaxRetriesEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.max_retries"), v)
		},
		MaxRetriesNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.max_retries"), v)
		},
		MaxRetriesIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.max_retries"), bun.In(v))
		},
		MaxRetriesNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.max_retries"), bun.In(v))
		},
		MaxRetriesGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.max_retries"), v)
		},
		MaxRetriesGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.max_retries"), v)
		},
		MaxRetriesLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.max_retries"), v)
		},
		MaxRetriesLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.max_retries"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.version"), v)
		},
		ExpiresAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.expires_at"), v)
		},
		ExpiresAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.expires_at"), v)
		},
		ExpiresAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.expires_at"), bun.In(v))
		},
		ExpiresAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.expires_at"), bun.In(v))
		},
		ExpiresAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("notif.expires_at"))
		},
		ExpiresAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("notif.expires_at"))
		},
		DeliveredAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.delivered_at"), v)
		},
		DeliveredAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.delivered_at"), v)
		},
		DeliveredAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.delivered_at"), bun.In(v))
		},
		DeliveredAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.delivered_at"), bun.In(v))
		},
		DeliveredAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("notif.delivered_at"))
		},
		DeliveredAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("notif.delivered_at"))
		},
		ReadAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.read_at"), v)
		},
		ReadAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.read_at"), v)
		},
		ReadAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.read_at"), bun.In(v))
		},
		ReadAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.read_at"), bun.In(v))
		},
		ReadAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("notif.read_at"))
		},
		ReadAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("notif.read_at"))
		},
		DismissedAtEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.dismissed_at"), v)
		},
		DismissedAtNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.dismissed_at"), v)
		},
		DismissedAtIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.dismissed_at"), bun.In(v))
		},
		DismissedAtNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.dismissed_at"), bun.In(v))
		},
		DismissedAtIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("notif.dismissed_at"))
		},
		DismissedAtIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("notif.dismissed_at"))
		},
		JobIDEQ: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.job_id"), v)
		},
		JobIDNEQ: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.job_id"), v)
		},
		JobIDIn: func(q *bun.SelectQuery, v []*string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.job_id"), bun.In(v))
		},
		JobIDNotIn: func(q *bun.SelectQuery, v []*string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.job_id"), bun.In(v))
		},
		JobIDGT: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.job_id"), v)
		},
		JobIDGTE: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.job_id"), v)
		},
		JobIDLT: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.job_id"), v)
		},
		JobIDLTE: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.job_id"), v)
		},
		JobIDContains: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.job_id"), "%"+*v+"%")
		},
		JobIDHasPrefix: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.job_id"), *v+"%")
		},
		JobIDHasSuffix: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.job_id"), "%"+*v)
		},
		JobIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("notif.job_id"))
		},
		JobIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("notif.job_id"))
		},
		CorrelationIDEQ: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.correlation_id"), v)
		},
		CorrelationIDNEQ: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.correlation_id"), v)
		},
		CorrelationIDIn: func(q *bun.SelectQuery, v []*string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.correlation_id"), bun.In(v))
		},
		CorrelationIDNotIn: func(q *bun.SelectQuery, v []*string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.correlation_id"), bun.In(v))
		},
		CorrelationIDGT: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("notif.correlation_id"), v)
		},
		CorrelationIDGTE: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("notif.correlation_id"), v)
		},
		CorrelationIDLT: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("notif.correlation_id"), v)
		},
		CorrelationIDLTE: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("notif.correlation_id"), v)
		},
		CorrelationIDContains: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.correlation_id"), "%"+*v+"%")
		},
		CorrelationIDHasPrefix: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.correlation_id"), *v+"%")
		},
		CorrelationIDHasSuffix: func(q *bun.SelectQuery, v *string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("notif.correlation_id"), "%"+*v)
		},
		CorrelationIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("notif.correlation_id"))
		},
		CorrelationIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("notif.correlation_id"))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("notif.business_unit_id"))
		},
		BusinessUnitIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("notif.business_unit_id"))
		},
		TargetUserIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.target_user_id"), v)
		},
		TargetUserIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.target_user_id"), v)
		},
		TargetUserIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.target_user_id"), bun.In(v))
		},
		TargetUserIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.target_user_id"), bun.In(v))
		},
		TargetUserIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("notif.target_user_id"))
		},
		TargetUserIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("notif.target_user_id"))
		},
		TargetRoleIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("notif.target_role_id"), v)
		},
		TargetRoleIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("notif.target_role_id"), v)
		},
		TargetRoleIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("notif.target_role_id"), bun.In(v))
		},
		TargetRoleIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("notif.target_role_id"), bun.In(v))
		},
		TargetRoleIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("notif.target_role_id"))
		},
		TargetRoleIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("notif.target_role_id"))
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("notif.organization_id"), orgID).
				Where("? = ?", bun.Ident("notif.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("notif.id"), id).
				Where("? = ?", bun.Ident("notif.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "notif." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"notif.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "notif.created_at DESC"
			}
			return "notif.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "notif.updated_at DESC"
			}
			return "notif.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]notificationFieldConfig {
		return map[string]notificationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "notif.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "notif.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"event_type": {
				Name:       "event_type",
				Column:     "notif.event_type",
				Sortable:   false,
				Filterable: false,
			},
			"priority": {
				Name:       "priority",
				Column:     "notif.priority",
				Sortable:   false,
				Filterable: false,
			},
			"channel": {
				Name:       "channel",
				Column:     "notif.channel",
				Sortable:   false,
				Filterable: false,
			},
			"delivery_status": {
				Name:       "delivery_status",
				Column:     "notif.delivery_status",
				Sortable:   false,
				Filterable: false,
			},
			"title": {
				Name:       "title",
				Column:     "notif.title",
				Sortable:   false,
				Filterable: true,
			},
			"message": {
				Name:       "message",
				Column:     "notif.message",
				Sortable:   false,
				Filterable: false,
			},
			"source": {
				Name:       "source",
				Column:     "notif.source",
				Sortable:   false,
				Filterable: true,
			},
			"data": {
				Name:       "data",
				Column:     "notif.data",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "notif.tags",
				Sortable:   false,
				Filterable: false,
			},
			"related_entities": {
				Name:       "related_entities",
				Column:     "notif.related_entities",
				Sortable:   false,
				Filterable: false,
			},
			"actions": {
				Name:       "actions",
				Column:     "notif.actions",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "notif.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "notif.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"retry_count": {
				Name:       "retry_count",
				Column:     "notif.retry_count",
				Sortable:   false,
				Filterable: false,
			},
			"max_retries": {
				Name:       "max_retries",
				Column:     "notif.max_retries",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "notif.version",
				Sortable:   false,
				Filterable: false,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "notif.expires_at",
				Sortable:   false,
				Filterable: false,
			},
			"delivered_at": {
				Name:       "delivered_at",
				Column:     "notif.delivered_at",
				Sortable:   false,
				Filterable: false,
			},
			"read_at": {
				Name:       "read_at",
				Column:     "notif.read_at",
				Sortable:   false,
				Filterable: false,
			},
			"dismissed_at": {
				Name:       "dismissed_at",
				Column:     "notif.dismissed_at",
				Sortable:   false,
				Filterable: false,
			},
			"job_id": {
				Name:       "job_id",
				Column:     "notif.job_id",
				Sortable:   false,
				Filterable: true,
			},
			"correlation_id": {
				Name:       "correlation_id",
				Column:     "notif.correlation_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "notif.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"target_user_id": {
				Name:       "target_user_id",
				Column:     "notif.target_user_id",
				Sortable:   false,
				Filterable: true,
			},
			"target_role_id": {
				Name:       "target_role_id",
				Column:     "notif.target_role_id",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]notificationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "notif.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "notif.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"event_type": {
				Name:       "event_type",
				Column:     "notif.event_type",
				Sortable:   false,
				Filterable: false,
			},
			"priority": {
				Name:       "priority",
				Column:     "notif.priority",
				Sortable:   false,
				Filterable: false,
			},
			"channel": {
				Name:       "channel",
				Column:     "notif.channel",
				Sortable:   false,
				Filterable: false,
			},
			"delivery_status": {
				Name:       "delivery_status",
				Column:     "notif.delivery_status",
				Sortable:   false,
				Filterable: false,
			},
			"title": {
				Name:       "title",
				Column:     "notif.title",
				Sortable:   false,
				Filterable: true,
			},
			"message": {
				Name:       "message",
				Column:     "notif.message",
				Sortable:   false,
				Filterable: false,
			},
			"source": {
				Name:       "source",
				Column:     "notif.source",
				Sortable:   false,
				Filterable: true,
			},
			"data": {
				Name:       "data",
				Column:     "notif.data",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "notif.tags",
				Sortable:   false,
				Filterable: false,
			},
			"related_entities": {
				Name:       "related_entities",
				Column:     "notif.related_entities",
				Sortable:   false,
				Filterable: false,
			},
			"actions": {
				Name:       "actions",
				Column:     "notif.actions",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "notif.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "notif.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"retry_count": {
				Name:       "retry_count",
				Column:     "notif.retry_count",
				Sortable:   false,
				Filterable: false,
			},
			"max_retries": {
				Name:       "max_retries",
				Column:     "notif.max_retries",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "notif.version",
				Sortable:   false,
				Filterable: false,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "notif.expires_at",
				Sortable:   false,
				Filterable: false,
			},
			"delivered_at": {
				Name:       "delivered_at",
				Column:     "notif.delivered_at",
				Sortable:   false,
				Filterable: false,
			},
			"read_at": {
				Name:       "read_at",
				Column:     "notif.read_at",
				Sortable:   false,
				Filterable: false,
			},
			"dismissed_at": {
				Name:       "dismissed_at",
				Column:     "notif.dismissed_at",
				Sortable:   false,
				Filterable: false,
			},
			"job_id": {
				Name:       "job_id",
				Column:     "notif.job_id",
				Sortable:   false,
				Filterable: true,
			},
			"correlation_id": {
				Name:       "correlation_id",
				Column:     "notif.correlation_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "notif.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"target_user_id": {
				Name:       "target_user_id",
				Column:     "notif.target_user_id",
				Sortable:   false,
				Filterable: true,
			},
			"target_role_id": {
				Name:       "target_role_id",
				Column:     "notif.target_role_id",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]notificationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "notif.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "notif.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"event_type": {
				Name:       "event_type",
				Column:     "notif.event_type",
				Sortable:   false,
				Filterable: false,
			},
			"priority": {
				Name:       "priority",
				Column:     "notif.priority",
				Sortable:   false,
				Filterable: false,
			},
			"channel": {
				Name:       "channel",
				Column:     "notif.channel",
				Sortable:   false,
				Filterable: false,
			},
			"delivery_status": {
				Name:       "delivery_status",
				Column:     "notif.delivery_status",
				Sortable:   false,
				Filterable: false,
			},
			"title": {
				Name:       "title",
				Column:     "notif.title",
				Sortable:   false,
				Filterable: true,
			},
			"message": {
				Name:       "message",
				Column:     "notif.message",
				Sortable:   false,
				Filterable: false,
			},
			"source": {
				Name:       "source",
				Column:     "notif.source",
				Sortable:   false,
				Filterable: true,
			},
			"data": {
				Name:       "data",
				Column:     "notif.data",
				Sortable:   false,
				Filterable: false,
			},
			"tags": {
				Name:       "tags",
				Column:     "notif.tags",
				Sortable:   false,
				Filterable: false,
			},
			"related_entities": {
				Name:       "related_entities",
				Column:     "notif.related_entities",
				Sortable:   false,
				Filterable: false,
			},
			"actions": {
				Name:       "actions",
				Column:     "notif.actions",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "notif.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "notif.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"retry_count": {
				Name:       "retry_count",
				Column:     "notif.retry_count",
				Sortable:   false,
				Filterable: false,
			},
			"max_retries": {
				Name:       "max_retries",
				Column:     "notif.max_retries",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "notif.version",
				Sortable:   false,
				Filterable: false,
			},
			"expires_at": {
				Name:       "expires_at",
				Column:     "notif.expires_at",
				Sortable:   false,
				Filterable: false,
			},
			"delivered_at": {
				Name:       "delivered_at",
				Column:     "notif.delivered_at",
				Sortable:   false,
				Filterable: false,
			},
			"read_at": {
				Name:       "read_at",
				Column:     "notif.read_at",
				Sortable:   false,
				Filterable: false,
			},
			"dismissed_at": {
				Name:       "dismissed_at",
				Column:     "notif.dismissed_at",
				Sortable:   false,
				Filterable: false,
			},
			"job_id": {
				Name:       "job_id",
				Column:     "notif.job_id",
				Sortable:   false,
				Filterable: true,
			},
			"correlation_id": {
				Name:       "correlation_id",
				Column:     "notif.correlation_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "notif.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"target_user_id": {
				Name:       "target_user_id",
				Column:     "notif.target_user_id",
				Sortable:   false,
				Filterable: true,
			},
			"target_role_id": {
				Name:       "target_role_id",
				Column:     "notif.target_role_id",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// NotificationQueryBuilder provides a fluent interface for building queries
type NotificationQueryBuilder struct {
	query *bun.SelectQuery
}

// NewNotificationQuery creates a new query builder
func NewNotificationQuery(db bun.IDB) *NotificationQueryBuilder {
	return &NotificationQueryBuilder{
		query: db.NewSelect().Model((*Notification)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func NotificationFromQuery(q *bun.SelectQuery) *NotificationQueryBuilder {
	return &NotificationQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *NotificationQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *NotificationQueryBuilder) Model(model interface{}) *NotificationQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *NotificationQueryBuilder) WhereIDEQ(v pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *NotificationQueryBuilder) WhereIDNEQ(v pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *NotificationQueryBuilder) WhereIDIn(v []pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereIDNotIn(v []pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *NotificationQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *NotificationQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *NotificationQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereEventTypeEQ adds a WHERE event_type = ? condition
func (b *NotificationQueryBuilder) WhereEventTypeEQ(v EventType) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.EventTypeEQ(b.query, v)
	return b
}

// WhereEventTypeNEQ adds a WHERE event_type != ? condition
func (b *NotificationQueryBuilder) WhereEventTypeNEQ(v EventType) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.EventTypeNEQ(b.query, v)
	return b
}

// WhereEventTypeIn adds a WHERE event_type IN (?) condition
func (b *NotificationQueryBuilder) WhereEventTypeIn(v []EventType) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.EventTypeIn(b.query, v)
	return b
}

// WhereEventTypeNotIn adds a WHERE event_type NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereEventTypeNotIn(v []EventType) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.EventTypeNotIn(b.query, v)
	return b
}

// WherePriorityEQ adds a WHERE priority = ? condition
func (b *NotificationQueryBuilder) WherePriorityEQ(v Priority) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.PriorityEQ(b.query, v)
	return b
}

// WherePriorityNEQ adds a WHERE priority != ? condition
func (b *NotificationQueryBuilder) WherePriorityNEQ(v Priority) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.PriorityNEQ(b.query, v)
	return b
}

// WherePriorityIn adds a WHERE priority IN (?) condition
func (b *NotificationQueryBuilder) WherePriorityIn(v []Priority) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.PriorityIn(b.query, v)
	return b
}

// WherePriorityNotIn adds a WHERE priority NOT IN (?) condition
func (b *NotificationQueryBuilder) WherePriorityNotIn(v []Priority) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.PriorityNotIn(b.query, v)
	return b
}

// WhereChannelEQ adds a WHERE channel = ? condition
func (b *NotificationQueryBuilder) WhereChannelEQ(v Channel) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ChannelEQ(b.query, v)
	return b
}

// WhereChannelNEQ adds a WHERE channel != ? condition
func (b *NotificationQueryBuilder) WhereChannelNEQ(v Channel) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ChannelNEQ(b.query, v)
	return b
}

// WhereChannelIn adds a WHERE channel IN (?) condition
func (b *NotificationQueryBuilder) WhereChannelIn(v []Channel) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ChannelIn(b.query, v)
	return b
}

// WhereChannelNotIn adds a WHERE channel NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereChannelNotIn(v []Channel) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ChannelNotIn(b.query, v)
	return b
}

// WhereDeliveryStatusEQ adds a WHERE delivery_status = ? condition
func (b *NotificationQueryBuilder) WhereDeliveryStatusEQ(v DeliveryStatus) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DeliveryStatusEQ(b.query, v)
	return b
}

// WhereDeliveryStatusNEQ adds a WHERE delivery_status != ? condition
func (b *NotificationQueryBuilder) WhereDeliveryStatusNEQ(v DeliveryStatus) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DeliveryStatusNEQ(b.query, v)
	return b
}

// WhereDeliveryStatusIn adds a WHERE delivery_status IN (?) condition
func (b *NotificationQueryBuilder) WhereDeliveryStatusIn(v []DeliveryStatus) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DeliveryStatusIn(b.query, v)
	return b
}

// WhereDeliveryStatusNotIn adds a WHERE delivery_status NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereDeliveryStatusNotIn(v []DeliveryStatus) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DeliveryStatusNotIn(b.query, v)
	return b
}

// WhereTitleEQ adds a WHERE title = ? condition
func (b *NotificationQueryBuilder) WhereTitleEQ(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TitleEQ(b.query, v)
	return b
}

// WhereTitleNEQ adds a WHERE title != ? condition
func (b *NotificationQueryBuilder) WhereTitleNEQ(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TitleNEQ(b.query, v)
	return b
}

// WhereTitleIn adds a WHERE title IN (?) condition
func (b *NotificationQueryBuilder) WhereTitleIn(v []string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TitleIn(b.query, v)
	return b
}

// WhereTitleNotIn adds a WHERE title NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereTitleNotIn(v []string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TitleNotIn(b.query, v)
	return b
}

// WhereTitleContains adds a WHERE title LIKE ? condition
func (b *NotificationQueryBuilder) WhereTitleContains(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TitleContains(b.query, v)
	return b
}

// WhereTitleHasPrefix adds a WHERE title LIKE ? condition
func (b *NotificationQueryBuilder) WhereTitleHasPrefix(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TitleHasPrefix(b.query, v)
	return b
}

// WhereTitleHasSuffix adds a WHERE title LIKE ? condition
func (b *NotificationQueryBuilder) WhereTitleHasSuffix(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TitleHasSuffix(b.query, v)
	return b
}

// WhereMessageEQ adds a WHERE message = ? condition
func (b *NotificationQueryBuilder) WhereMessageEQ(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MessageEQ(b.query, v)
	return b
}

// WhereMessageNEQ adds a WHERE message != ? condition
func (b *NotificationQueryBuilder) WhereMessageNEQ(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MessageNEQ(b.query, v)
	return b
}

// WhereMessageIn adds a WHERE message IN (?) condition
func (b *NotificationQueryBuilder) WhereMessageIn(v []string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MessageIn(b.query, v)
	return b
}

// WhereMessageNotIn adds a WHERE message NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereMessageNotIn(v []string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MessageNotIn(b.query, v)
	return b
}

// WhereMessageContains adds a WHERE message LIKE ? condition
func (b *NotificationQueryBuilder) WhereMessageContains(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MessageContains(b.query, v)
	return b
}

// WhereMessageHasPrefix adds a WHERE message LIKE ? condition
func (b *NotificationQueryBuilder) WhereMessageHasPrefix(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MessageHasPrefix(b.query, v)
	return b
}

// WhereMessageHasSuffix adds a WHERE message LIKE ? condition
func (b *NotificationQueryBuilder) WhereMessageHasSuffix(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MessageHasSuffix(b.query, v)
	return b
}

// WhereSourceEQ adds a WHERE source = ? condition
func (b *NotificationQueryBuilder) WhereSourceEQ(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.SourceEQ(b.query, v)
	return b
}

// WhereSourceNEQ adds a WHERE source != ? condition
func (b *NotificationQueryBuilder) WhereSourceNEQ(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.SourceNEQ(b.query, v)
	return b
}

// WhereSourceIn adds a WHERE source IN (?) condition
func (b *NotificationQueryBuilder) WhereSourceIn(v []string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.SourceIn(b.query, v)
	return b
}

// WhereSourceNotIn adds a WHERE source NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereSourceNotIn(v []string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.SourceNotIn(b.query, v)
	return b
}

// WhereSourceContains adds a WHERE source LIKE ? condition
func (b *NotificationQueryBuilder) WhereSourceContains(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.SourceContains(b.query, v)
	return b
}

// WhereSourceHasPrefix adds a WHERE source LIKE ? condition
func (b *NotificationQueryBuilder) WhereSourceHasPrefix(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.SourceHasPrefix(b.query, v)
	return b
}

// WhereSourceHasSuffix adds a WHERE source LIKE ? condition
func (b *NotificationQueryBuilder) WhereSourceHasSuffix(v string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.SourceHasSuffix(b.query, v)
	return b
}

// WhereDataEQ adds a WHERE data = ? condition
func (b *NotificationQueryBuilder) WhereDataEQ(v map[string]any) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DataEQ(b.query, v)
	return b
}

// WhereDataNEQ adds a WHERE data != ? condition
func (b *NotificationQueryBuilder) WhereDataNEQ(v map[string]any) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DataNEQ(b.query, v)
	return b
}

// WhereDataIn adds a WHERE data IN (?) condition
func (b *NotificationQueryBuilder) WhereDataIn(v []map[string]any) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DataIn(b.query, v)
	return b
}

// WhereDataNotIn adds a WHERE data NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereDataNotIn(v []map[string]any) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DataNotIn(b.query, v)
	return b
}

// WhereTagsEQ adds a WHERE tags = ? condition
func (b *NotificationQueryBuilder) WhereTagsEQ(v []string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TagsEQ(b.query, v)
	return b
}

// WhereTagsNEQ adds a WHERE tags != ? condition
func (b *NotificationQueryBuilder) WhereTagsNEQ(v []string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TagsNEQ(b.query, v)
	return b
}

// WhereTagsIn adds a WHERE tags IN (?) condition
func (b *NotificationQueryBuilder) WhereTagsIn(v [][]string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TagsIn(b.query, v)
	return b
}

// WhereTagsNotIn adds a WHERE tags NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereTagsNotIn(v [][]string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TagsNotIn(b.query, v)
	return b
}

// WhereRelatedEntitiesEQ adds a WHERE related_entities = ? condition
func (b *NotificationQueryBuilder) WhereRelatedEntitiesEQ(v []RelatedEntity) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RelatedEntitiesEQ(b.query, v)
	return b
}

// WhereRelatedEntitiesNEQ adds a WHERE related_entities != ? condition
func (b *NotificationQueryBuilder) WhereRelatedEntitiesNEQ(v []RelatedEntity) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RelatedEntitiesNEQ(b.query, v)
	return b
}

// WhereRelatedEntitiesIn adds a WHERE related_entities IN (?) condition
func (b *NotificationQueryBuilder) WhereRelatedEntitiesIn(v [][]RelatedEntity) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RelatedEntitiesIn(b.query, v)
	return b
}

// WhereRelatedEntitiesNotIn adds a WHERE related_entities NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereRelatedEntitiesNotIn(v [][]RelatedEntity) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RelatedEntitiesNotIn(b.query, v)
	return b
}

// WhereActionsEQ adds a WHERE actions = ? condition
func (b *NotificationQueryBuilder) WhereActionsEQ(v []Action) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ActionsEQ(b.query, v)
	return b
}

// WhereActionsNEQ adds a WHERE actions != ? condition
func (b *NotificationQueryBuilder) WhereActionsNEQ(v []Action) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ActionsNEQ(b.query, v)
	return b
}

// WhereActionsIn adds a WHERE actions IN (?) condition
func (b *NotificationQueryBuilder) WhereActionsIn(v [][]Action) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ActionsIn(b.query, v)
	return b
}

// WhereActionsNotIn adds a WHERE actions NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereActionsNotIn(v [][]Action) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ActionsNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *NotificationQueryBuilder) WhereCreatedAtEQ(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *NotificationQueryBuilder) WhereCreatedAtNEQ(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *NotificationQueryBuilder) WhereCreatedAtGT(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *NotificationQueryBuilder) WhereCreatedAtGTE(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *NotificationQueryBuilder) WhereCreatedAtLT(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *NotificationQueryBuilder) WhereCreatedAtLTE(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *NotificationQueryBuilder) WhereCreatedAtIn(v []int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereCreatedAtNotIn(v []int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *NotificationQueryBuilder) WhereUpdatedAtEQ(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *NotificationQueryBuilder) WhereUpdatedAtNEQ(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *NotificationQueryBuilder) WhereUpdatedAtGT(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *NotificationQueryBuilder) WhereUpdatedAtGTE(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *NotificationQueryBuilder) WhereUpdatedAtLT(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *NotificationQueryBuilder) WhereUpdatedAtLTE(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *NotificationQueryBuilder) WhereUpdatedAtIn(v []int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereUpdatedAtNotIn(v []int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereRetryCountEQ adds a WHERE retry_count = ? condition
func (b *NotificationQueryBuilder) WhereRetryCountEQ(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RetryCountEQ(b.query, v)
	return b
}

// WhereRetryCountNEQ adds a WHERE retry_count != ? condition
func (b *NotificationQueryBuilder) WhereRetryCountNEQ(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RetryCountNEQ(b.query, v)
	return b
}

// WhereRetryCountGT adds a WHERE retry_count > ? condition
func (b *NotificationQueryBuilder) WhereRetryCountGT(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RetryCountGT(b.query, v)
	return b
}

// WhereRetryCountGTE adds a WHERE retry_count >= ? condition
func (b *NotificationQueryBuilder) WhereRetryCountGTE(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RetryCountGTE(b.query, v)
	return b
}

// WhereRetryCountLT adds a WHERE retry_count < ? condition
func (b *NotificationQueryBuilder) WhereRetryCountLT(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RetryCountLT(b.query, v)
	return b
}

// WhereRetryCountLTE adds a WHERE retry_count <= ? condition
func (b *NotificationQueryBuilder) WhereRetryCountLTE(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RetryCountLTE(b.query, v)
	return b
}

// WhereRetryCountIn adds a WHERE retry_count IN (?) condition
func (b *NotificationQueryBuilder) WhereRetryCountIn(v []int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RetryCountIn(b.query, v)
	return b
}

// WhereRetryCountNotIn adds a WHERE retry_count NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereRetryCountNotIn(v []int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.RetryCountNotIn(b.query, v)
	return b
}

// WhereMaxRetriesEQ adds a WHERE max_retries = ? condition
func (b *NotificationQueryBuilder) WhereMaxRetriesEQ(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MaxRetriesEQ(b.query, v)
	return b
}

// WhereMaxRetriesNEQ adds a WHERE max_retries != ? condition
func (b *NotificationQueryBuilder) WhereMaxRetriesNEQ(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MaxRetriesNEQ(b.query, v)
	return b
}

// WhereMaxRetriesGT adds a WHERE max_retries > ? condition
func (b *NotificationQueryBuilder) WhereMaxRetriesGT(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MaxRetriesGT(b.query, v)
	return b
}

// WhereMaxRetriesGTE adds a WHERE max_retries >= ? condition
func (b *NotificationQueryBuilder) WhereMaxRetriesGTE(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MaxRetriesGTE(b.query, v)
	return b
}

// WhereMaxRetriesLT adds a WHERE max_retries < ? condition
func (b *NotificationQueryBuilder) WhereMaxRetriesLT(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MaxRetriesLT(b.query, v)
	return b
}

// WhereMaxRetriesLTE adds a WHERE max_retries <= ? condition
func (b *NotificationQueryBuilder) WhereMaxRetriesLTE(v int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MaxRetriesLTE(b.query, v)
	return b
}

// WhereMaxRetriesIn adds a WHERE max_retries IN (?) condition
func (b *NotificationQueryBuilder) WhereMaxRetriesIn(v []int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MaxRetriesIn(b.query, v)
	return b
}

// WhereMaxRetriesNotIn adds a WHERE max_retries NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereMaxRetriesNotIn(v []int) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.MaxRetriesNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *NotificationQueryBuilder) WhereVersionEQ(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *NotificationQueryBuilder) WhereVersionNEQ(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *NotificationQueryBuilder) WhereVersionGT(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *NotificationQueryBuilder) WhereVersionGTE(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *NotificationQueryBuilder) WhereVersionLT(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *NotificationQueryBuilder) WhereVersionLTE(v int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *NotificationQueryBuilder) WhereVersionIn(v []int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereVersionNotIn(v []int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereExpiresAtEQ adds a WHERE expires_at = ? condition
func (b *NotificationQueryBuilder) WhereExpiresAtEQ(v *int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ExpiresAtEQ(b.query, v)
	return b
}

// WhereExpiresAtNEQ adds a WHERE expires_at != ? condition
func (b *NotificationQueryBuilder) WhereExpiresAtNEQ(v *int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ExpiresAtNEQ(b.query, v)
	return b
}

// WhereExpiresAtIn adds a WHERE expires_at IN (?) condition
func (b *NotificationQueryBuilder) WhereExpiresAtIn(v []*int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ExpiresAtIn(b.query, v)
	return b
}

// WhereExpiresAtNotIn adds a WHERE expires_at NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereExpiresAtNotIn(v []*int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ExpiresAtNotIn(b.query, v)
	return b
}

// WhereDeliveredAtEQ adds a WHERE delivered_at = ? condition
func (b *NotificationQueryBuilder) WhereDeliveredAtEQ(v *int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DeliveredAtEQ(b.query, v)
	return b
}

// WhereDeliveredAtNEQ adds a WHERE delivered_at != ? condition
func (b *NotificationQueryBuilder) WhereDeliveredAtNEQ(v *int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DeliveredAtNEQ(b.query, v)
	return b
}

// WhereDeliveredAtIn adds a WHERE delivered_at IN (?) condition
func (b *NotificationQueryBuilder) WhereDeliveredAtIn(v []*int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DeliveredAtIn(b.query, v)
	return b
}

// WhereDeliveredAtNotIn adds a WHERE delivered_at NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereDeliveredAtNotIn(v []*int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DeliveredAtNotIn(b.query, v)
	return b
}

// WhereReadAtEQ adds a WHERE read_at = ? condition
func (b *NotificationQueryBuilder) WhereReadAtEQ(v *int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ReadAtEQ(b.query, v)
	return b
}

// WhereReadAtNEQ adds a WHERE read_at != ? condition
func (b *NotificationQueryBuilder) WhereReadAtNEQ(v *int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ReadAtNEQ(b.query, v)
	return b
}

// WhereReadAtIn adds a WHERE read_at IN (?) condition
func (b *NotificationQueryBuilder) WhereReadAtIn(v []*int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ReadAtIn(b.query, v)
	return b
}

// WhereReadAtNotIn adds a WHERE read_at NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereReadAtNotIn(v []*int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.ReadAtNotIn(b.query, v)
	return b
}

// WhereDismissedAtEQ adds a WHERE dismissed_at = ? condition
func (b *NotificationQueryBuilder) WhereDismissedAtEQ(v *int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DismissedAtEQ(b.query, v)
	return b
}

// WhereDismissedAtNEQ adds a WHERE dismissed_at != ? condition
func (b *NotificationQueryBuilder) WhereDismissedAtNEQ(v *int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DismissedAtNEQ(b.query, v)
	return b
}

// WhereDismissedAtIn adds a WHERE dismissed_at IN (?) condition
func (b *NotificationQueryBuilder) WhereDismissedAtIn(v []*int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DismissedAtIn(b.query, v)
	return b
}

// WhereDismissedAtNotIn adds a WHERE dismissed_at NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereDismissedAtNotIn(v []*int64) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.DismissedAtNotIn(b.query, v)
	return b
}

// WhereJobIDEQ adds a WHERE job_id = ? condition
func (b *NotificationQueryBuilder) WhereJobIDEQ(v *string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.JobIDEQ(b.query, v)
	return b
}

// WhereJobIDNEQ adds a WHERE job_id != ? condition
func (b *NotificationQueryBuilder) WhereJobIDNEQ(v *string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.JobIDNEQ(b.query, v)
	return b
}

// WhereJobIDIsNull adds a WHERE job_id IS NULL condition
func (b *NotificationQueryBuilder) WhereJobIDIsNull() *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.JobIDIsNull(b.query)
	return b
}

// WhereJobIDIsNotNull adds a WHERE job_id IS NOT NULL condition
func (b *NotificationQueryBuilder) WhereJobIDIsNotNull() *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.JobIDIsNotNull(b.query)
	return b
}

// WhereCorrelationIDEQ adds a WHERE correlation_id = ? condition
func (b *NotificationQueryBuilder) WhereCorrelationIDEQ(v *string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CorrelationIDEQ(b.query, v)
	return b
}

// WhereCorrelationIDNEQ adds a WHERE correlation_id != ? condition
func (b *NotificationQueryBuilder) WhereCorrelationIDNEQ(v *string) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CorrelationIDNEQ(b.query, v)
	return b
}

// WhereCorrelationIDIsNull adds a WHERE correlation_id IS NULL condition
func (b *NotificationQueryBuilder) WhereCorrelationIDIsNull() *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CorrelationIDIsNull(b.query)
	return b
}

// WhereCorrelationIDIsNotNull adds a WHERE correlation_id IS NOT NULL condition
func (b *NotificationQueryBuilder) WhereCorrelationIDIsNotNull() *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.CorrelationIDIsNotNull(b.query)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *NotificationQueryBuilder) WhereBusinessUnitIDEQ(v *pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *NotificationQueryBuilder) WhereBusinessUnitIDNEQ(v *pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *NotificationQueryBuilder) WhereBusinessUnitIDIn(v []*pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereBusinessUnitIDNotIn(v []*pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereTargetUserIDEQ adds a WHERE target_user_id = ? condition
func (b *NotificationQueryBuilder) WhereTargetUserIDEQ(v *pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TargetUserIDEQ(b.query, v)
	return b
}

// WhereTargetUserIDNEQ adds a WHERE target_user_id != ? condition
func (b *NotificationQueryBuilder) WhereTargetUserIDNEQ(v *pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TargetUserIDNEQ(b.query, v)
	return b
}

// WhereTargetUserIDIn adds a WHERE target_user_id IN (?) condition
func (b *NotificationQueryBuilder) WhereTargetUserIDIn(v []*pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TargetUserIDIn(b.query, v)
	return b
}

// WhereTargetUserIDNotIn adds a WHERE target_user_id NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereTargetUserIDNotIn(v []*pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TargetUserIDNotIn(b.query, v)
	return b
}

// WhereTargetRoleIDEQ adds a WHERE target_role_id = ? condition
func (b *NotificationQueryBuilder) WhereTargetRoleIDEQ(v *pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TargetRoleIDEQ(b.query, v)
	return b
}

// WhereTargetRoleIDNEQ adds a WHERE target_role_id != ? condition
func (b *NotificationQueryBuilder) WhereTargetRoleIDNEQ(v *pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TargetRoleIDNEQ(b.query, v)
	return b
}

// WhereTargetRoleIDIn adds a WHERE target_role_id IN (?) condition
func (b *NotificationQueryBuilder) WhereTargetRoleIDIn(v []*pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TargetRoleIDIn(b.query, v)
	return b
}

// WhereTargetRoleIDNotIn adds a WHERE target_role_id NOT IN (?) condition
func (b *NotificationQueryBuilder) WhereTargetRoleIDNotIn(v []*pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.TargetRoleIDNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *NotificationQueryBuilder) WhereTenant(orgID, buID pulid.ID) *NotificationQueryBuilder {
	b.query = NotificationQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *NotificationQueryBuilder) WhereGroup(sep string, fn func(*NotificationQueryBuilder) *NotificationQueryBuilder) *NotificationQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &NotificationQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *NotificationQueryBuilder) Where(query string, args ...interface{}) *NotificationQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *NotificationQueryBuilder) OrderBy(column string, desc ...bool) *NotificationQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(NotificationQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *NotificationQueryBuilder) Limit(n int) *NotificationQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *NotificationQueryBuilder) Offset(n int) *NotificationQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *NotificationQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *NotificationQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *NotificationQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *NotificationQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *NotificationQueryBuilder) All(ctx context.Context) ([]*Notification, error) {
	var entities []*Notification
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *NotificationQueryBuilder) AllWithCount(ctx context.Context) ([]*Notification, int, error) {
	var entities []*Notification
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *NotificationQueryBuilder) One(ctx context.Context) (*Notification, error) {
	entity := new(Notification)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *NotificationQueryBuilder) First(ctx context.Context) (*Notification, error) {
	entity := new(Notification)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// NotificationBuild creates a chainable query builder
func NotificationBuild(db bun.IDB) *NotificationQueryBuilder {
	return NewNotificationQuery(db)
}

// Relationship loading methods

// NotificationRelationChain provides a fluent API for building nested relationship chains
type NotificationRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewNotificationRelationChain creates a new relation chain builder
func NewNotificationRelationChain() *NotificationRelationChain {
	return &NotificationRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *NotificationRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *NotificationRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *NotificationRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *NotificationRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// NotificationRelationChainBuilder provides fluent API for building nested relations
type NotificationRelationChainBuilder struct {
	parent *NotificationQueryBuilder
	chain  *NotificationRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *NotificationRelationChainBuilder) Load() *NotificationQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *NotificationRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *NotificationRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *NotificationRelationChainBuilder) OrderBy(order string) *NotificationRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *NotificationRelationChainBuilder) Where(condition string, args ...interface{}) *NotificationRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
