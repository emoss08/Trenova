// Code generated by gen-trenova. DO NOT EDIT.

package notification

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain/permission"
	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// notificationPreferenceFieldConfig provides field configuration for NotificationPreference
type notificationPreferenceFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// NotificationPreferenceQuery provides type-safe query helpers and constants
var NotificationPreferenceQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                     string
		UserID                 string
		OrganizationID         string
		BusinessUnitID         string
		Resource               string
		UpdateTypes            string
		NotifyOnAllUpdates     string
		NotifyOnlyOwnedRecords string
		ExcludedUserIDs        string
		IncludedRoleIDs        string
		PreferredChannels      string
		QuietHoursEnabled      string
		QuietHoursStart        string
		QuietHoursEnd          string
		Timezone               string
		BatchNotifications     string
		BatchIntervalMinutes   string
		IsActive               string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ResourceEQ                  func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceNEQ                 func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceIn                  func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ResourceNotIn               func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		UpdateTypesEQ               func(q *bun.SelectQuery, v []UpdateType) *bun.SelectQuery
		UpdateTypesNEQ              func(q *bun.SelectQuery, v []UpdateType) *bun.SelectQuery
		UpdateTypesIn               func(q *bun.SelectQuery, v [][]UpdateType) *bun.SelectQuery
		UpdateTypesNotIn            func(q *bun.SelectQuery, v [][]UpdateType) *bun.SelectQuery
		NotifyOnAllUpdatesEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		NotifyOnAllUpdatesNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		NotifyOnAllUpdatesIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		NotifyOnAllUpdatesNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		NotifyOnlyOwnedRecordsEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		NotifyOnlyOwnedRecordsNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		NotifyOnlyOwnedRecordsIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		NotifyOnlyOwnedRecordsNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ExcludedUserIDsEQ           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ExcludedUserIDsNEQ          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ExcludedUserIDsIn           func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		ExcludedUserIDsNotIn        func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		IncludedRoleIDsEQ           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IncludedRoleIDsNEQ          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IncludedRoleIDsIn           func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		IncludedRoleIDsNotIn        func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		PreferredChannelsEQ         func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery
		PreferredChannelsNEQ        func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery
		PreferredChannelsIn         func(q *bun.SelectQuery, v [][]Channel) *bun.SelectQuery
		PreferredChannelsNotIn      func(q *bun.SelectQuery, v [][]Channel) *bun.SelectQuery
		QuietHoursEnabledEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		QuietHoursEnabledNEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		QuietHoursEnabledIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		QuietHoursEnabledNotIn      func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		QuietHoursStartEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		QuietHoursStartNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		QuietHoursStartGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		QuietHoursEndNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		QuietHoursEndGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BatchNotificationsEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		BatchNotificationsNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		BatchNotificationsIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		BatchNotificationsNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		BatchIntervalMinutesEQ      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesNEQ     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesIn      func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		BatchIntervalMinutesNotIn   func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		BatchIntervalMinutesGT      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesGTE     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesLT      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesLTE     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		IsActiveEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveIn                  func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsActiveNotIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]notificationPreferenceFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "notification_preferences",
	Alias:    "np",
	IDPrefix: "np_",

	// Field names
	Field: struct {
		ID                     string
		UserID                 string
		OrganizationID         string
		BusinessUnitID         string
		Resource               string
		UpdateTypes            string
		NotifyOnAllUpdates     string
		NotifyOnlyOwnedRecords string
		ExcludedUserIDs        string
		IncludedRoleIDs        string
		PreferredChannels      string
		QuietHoursEnabled      string
		QuietHoursStart        string
		QuietHoursEnd          string
		Timezone               string
		BatchNotifications     string
		BatchIntervalMinutes   string
		IsActive               string
		Version                string
		CreatedAt              string
		UpdatedAt              string
	}{
		ID:                     "id",
		UserID:                 "user_id",
		OrganizationID:         "organization_id",
		BusinessUnitID:         "business_unit_id",
		Resource:               "resource",
		UpdateTypes:            "update_types",
		NotifyOnAllUpdates:     "notify_on_all_updates",
		NotifyOnlyOwnedRecords: "notify_only_owned_records",
		ExcludedUserIDs:        "excluded_user_ids",
		IncludedRoleIDs:        "included_role_ids",
		PreferredChannels:      "preferred_channels",
		QuietHoursEnabled:      "quiet_hours_enabled",
		QuietHoursStart:        "quiet_hours_start",
		QuietHoursEnd:          "quiet_hours_end",
		Timezone:               "timezone",
		BatchNotifications:     "batch_notifications",
		BatchIntervalMinutes:   "batch_interval_minutes",
		IsActive:               "is_active",
		Version:                "version",
		CreatedAt:              "created_at",
		UpdatedAt:              "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "np." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "np." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ                   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn                    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ResourceEQ                  func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceNEQ                 func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery
		ResourceIn                  func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		ResourceNotIn               func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery
		UpdateTypesEQ               func(q *bun.SelectQuery, v []UpdateType) *bun.SelectQuery
		UpdateTypesNEQ              func(q *bun.SelectQuery, v []UpdateType) *bun.SelectQuery
		UpdateTypesIn               func(q *bun.SelectQuery, v [][]UpdateType) *bun.SelectQuery
		UpdateTypesNotIn            func(q *bun.SelectQuery, v [][]UpdateType) *bun.SelectQuery
		NotifyOnAllUpdatesEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		NotifyOnAllUpdatesNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		NotifyOnAllUpdatesIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		NotifyOnAllUpdatesNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		NotifyOnlyOwnedRecordsEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		NotifyOnlyOwnedRecordsNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		NotifyOnlyOwnedRecordsIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		NotifyOnlyOwnedRecordsNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ExcludedUserIDsEQ           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ExcludedUserIDsNEQ          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ExcludedUserIDsIn           func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		ExcludedUserIDsNotIn        func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		IncludedRoleIDsEQ           func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IncludedRoleIDsNEQ          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IncludedRoleIDsIn           func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		IncludedRoleIDsNotIn        func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		PreferredChannelsEQ         func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery
		PreferredChannelsNEQ        func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery
		PreferredChannelsIn         func(q *bun.SelectQuery, v [][]Channel) *bun.SelectQuery
		PreferredChannelsNotIn      func(q *bun.SelectQuery, v [][]Channel) *bun.SelectQuery
		QuietHoursEnabledEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		QuietHoursEnabledNEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		QuietHoursEnabledIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		QuietHoursEnabledNotIn      func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		QuietHoursStartEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		QuietHoursStartNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		QuietHoursStartGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursStartHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		QuietHoursEndNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		QuietHoursEndGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		QuietHoursEndHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BatchNotificationsEQ        func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		BatchNotificationsNEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		BatchNotificationsIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		BatchNotificationsNotIn     func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		BatchIntervalMinutesEQ      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesNEQ     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesIn      func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		BatchIntervalMinutesNotIn   func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		BatchIntervalMinutesGT      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesGTE     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesLT      func(q *bun.SelectQuery, v int) *bun.SelectQuery
		BatchIntervalMinutesLTE     func(q *bun.SelectQuery, v int) *bun.SelectQuery
		IsActiveEQ                  func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveNEQ                 func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsActiveIn                  func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsActiveNotIn               func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                      func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.id"), bun.In(v))
		},
		UserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.user_id"), v)
		},
		UserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.user_id"), v)
		},
		UserIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.user_id"), bun.In(v))
		},
		UserIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.user_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.organization_id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.business_unit_id"), bun.In(v))
		},
		ResourceEQ: func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.resource"), v)
		},
		ResourceNEQ: func(q *bun.SelectQuery, v permission.Resource) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.resource"), v)
		},
		ResourceIn: func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.resource"), bun.In(v))
		},
		ResourceNotIn: func(q *bun.SelectQuery, v []permission.Resource) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.resource"), bun.In(v))
		},
		UpdateTypesEQ: func(q *bun.SelectQuery, v []UpdateType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.update_types"), v)
		},
		UpdateTypesNEQ: func(q *bun.SelectQuery, v []UpdateType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.update_types"), v)
		},
		UpdateTypesIn: func(q *bun.SelectQuery, v [][]UpdateType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.update_types"), bun.In(v))
		},
		UpdateTypesNotIn: func(q *bun.SelectQuery, v [][]UpdateType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.update_types"), bun.In(v))
		},
		NotifyOnAllUpdatesEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.notify_on_all_updates"), v)
		},
		NotifyOnAllUpdatesNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.notify_on_all_updates"), v)
		},
		NotifyOnAllUpdatesIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.notify_on_all_updates"), bun.In(v))
		},
		NotifyOnAllUpdatesNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.notify_on_all_updates"), bun.In(v))
		},
		NotifyOnlyOwnedRecordsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.notify_only_owned_records"), v)
		},
		NotifyOnlyOwnedRecordsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.notify_only_owned_records"), v)
		},
		NotifyOnlyOwnedRecordsIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.notify_only_owned_records"), bun.In(v))
		},
		NotifyOnlyOwnedRecordsNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.notify_only_owned_records"), bun.In(v))
		},
		ExcludedUserIDsEQ: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.excluded_user_ids"), v)
		},
		ExcludedUserIDsNEQ: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.excluded_user_ids"), v)
		},
		ExcludedUserIDsIn: func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.excluded_user_ids"), bun.In(v))
		},
		ExcludedUserIDsNotIn: func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.excluded_user_ids"), bun.In(v))
		},
		IncludedRoleIDsEQ: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.included_role_ids"), v)
		},
		IncludedRoleIDsNEQ: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.included_role_ids"), v)
		},
		IncludedRoleIDsIn: func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.included_role_ids"), bun.In(v))
		},
		IncludedRoleIDsNotIn: func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.included_role_ids"), bun.In(v))
		},
		PreferredChannelsEQ: func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.preferred_channels"), v)
		},
		PreferredChannelsNEQ: func(q *bun.SelectQuery, v []Channel) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.preferred_channels"), v)
		},
		PreferredChannelsIn: func(q *bun.SelectQuery, v [][]Channel) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.preferred_channels"), bun.In(v))
		},
		PreferredChannelsNotIn: func(q *bun.SelectQuery, v [][]Channel) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.preferred_channels"), bun.In(v))
		},
		QuietHoursEnabledEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.quiet_hours_enabled"), v)
		},
		QuietHoursEnabledNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.quiet_hours_enabled"), v)
		},
		QuietHoursEnabledIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.quiet_hours_enabled"), bun.In(v))
		},
		QuietHoursEnabledNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.quiet_hours_enabled"), bun.In(v))
		},
		QuietHoursStartEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.quiet_hours_start"), v)
		},
		QuietHoursStartNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.quiet_hours_start"), v)
		},
		QuietHoursStartIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.quiet_hours_start"), bun.In(v))
		},
		QuietHoursStartNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.quiet_hours_start"), bun.In(v))
		},
		QuietHoursStartGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("np.quiet_hours_start"), v)
		},
		QuietHoursStartGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("np.quiet_hours_start"), v)
		},
		QuietHoursStartLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("np.quiet_hours_start"), v)
		},
		QuietHoursStartLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("np.quiet_hours_start"), v)
		},
		QuietHoursStartContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("np.quiet_hours_start"), "%"+v+"%")
		},
		QuietHoursStartHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("np.quiet_hours_start"), v+"%")
		},
		QuietHoursStartHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("np.quiet_hours_start"), "%"+v)
		},
		QuietHoursEndEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.quiet_hours_end"), v)
		},
		QuietHoursEndNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.quiet_hours_end"), v)
		},
		QuietHoursEndIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.quiet_hours_end"), bun.In(v))
		},
		QuietHoursEndNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.quiet_hours_end"), bun.In(v))
		},
		QuietHoursEndGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("np.quiet_hours_end"), v)
		},
		QuietHoursEndGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("np.quiet_hours_end"), v)
		},
		QuietHoursEndLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("np.quiet_hours_end"), v)
		},
		QuietHoursEndLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("np.quiet_hours_end"), v)
		},
		QuietHoursEndContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("np.quiet_hours_end"), "%"+v+"%")
		},
		QuietHoursEndHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("np.quiet_hours_end"), v+"%")
		},
		QuietHoursEndHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("np.quiet_hours_end"), "%"+v)
		},
		TimezoneEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.timezone"), v)
		},
		TimezoneNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.timezone"), v)
		},
		TimezoneIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.timezone"), bun.In(v))
		},
		TimezoneNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.timezone"), bun.In(v))
		},
		TimezoneGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("np.timezone"), v)
		},
		TimezoneGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("np.timezone"), v)
		},
		TimezoneLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("np.timezone"), v)
		},
		TimezoneLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("np.timezone"), v)
		},
		TimezoneContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("np.timezone"), "%"+v+"%")
		},
		TimezoneHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("np.timezone"), v+"%")
		},
		TimezoneHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("np.timezone"), "%"+v)
		},
		BatchNotificationsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.batch_notifications"), v)
		},
		BatchNotificationsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.batch_notifications"), v)
		},
		BatchNotificationsIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.batch_notifications"), bun.In(v))
		},
		BatchNotificationsNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.batch_notifications"), bun.In(v))
		},
		BatchIntervalMinutesEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.batch_interval_minutes"), v)
		},
		BatchIntervalMinutesNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.batch_interval_minutes"), v)
		},
		BatchIntervalMinutesIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.batch_interval_minutes"), bun.In(v))
		},
		BatchIntervalMinutesNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.batch_interval_minutes"), bun.In(v))
		},
		BatchIntervalMinutesGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("np.batch_interval_minutes"), v)
		},
		BatchIntervalMinutesGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("np.batch_interval_minutes"), v)
		},
		BatchIntervalMinutesLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("np.batch_interval_minutes"), v)
		},
		BatchIntervalMinutesLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("np.batch_interval_minutes"), v)
		},
		IsActiveEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.is_active"), v)
		},
		IsActiveNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.is_active"), v)
		},
		IsActiveIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.is_active"), bun.In(v))
		},
		IsActiveNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.is_active"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("np.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("np.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("np.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("np.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("np.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("np.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("np.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("np.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("np.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("np.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("np.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("np.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("np.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("np.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("np.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("np.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("np.organization_id"), orgID).
				Where("? = ?", bun.Ident("np.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("np.id"), id).
				Where("? = ?", bun.Ident("np.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "np." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"np.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "np.created_at DESC"
			}
			return "np.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "np.updated_at DESC"
			}
			return "np.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]notificationPreferenceFieldConfig {
		return map[string]notificationPreferenceFieldConfig{
			"id": {
				Name:       "id",
				Column:     "np.id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "np.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "np.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "np.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"resource": {
				Name:       "resource",
				Column:     "np.resource",
				Sortable:   false,
				Filterable: false,
			},
			"update_types": {
				Name:       "update_types",
				Column:     "np.update_types",
				Sortable:   false,
				Filterable: false,
			},
			"notify_on_all_updates": {
				Name:       "notify_on_all_updates",
				Column:     "np.notify_on_all_updates",
				Sortable:   false,
				Filterable: false,
			},
			"notify_only_owned_records": {
				Name:       "notify_only_owned_records",
				Column:     "np.notify_only_owned_records",
				Sortable:   false,
				Filterable: false,
			},
			"excluded_user_ids": {
				Name:       "excluded_user_ids",
				Column:     "np.excluded_user_ids",
				Sortable:   false,
				Filterable: false,
			},
			"included_role_ids": {
				Name:       "included_role_ids",
				Column:     "np.included_role_ids",
				Sortable:   false,
				Filterable: false,
			},
			"preferred_channels": {
				Name:       "preferred_channels",
				Column:     "np.preferred_channels",
				Sortable:   false,
				Filterable: false,
			},
			"quiet_hours_enabled": {
				Name:       "quiet_hours_enabled",
				Column:     "np.quiet_hours_enabled",
				Sortable:   false,
				Filterable: false,
			},
			"quiet_hours_start": {
				Name:       "quiet_hours_start",
				Column:     "np.quiet_hours_start",
				Sortable:   false,
				Filterable: false,
			},
			"quiet_hours_end": {
				Name:       "quiet_hours_end",
				Column:     "np.quiet_hours_end",
				Sortable:   false,
				Filterable: false,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "np.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"batch_notifications": {
				Name:       "batch_notifications",
				Column:     "np.batch_notifications",
				Sortable:   false,
				Filterable: false,
			},
			"batch_interval_minutes": {
				Name:       "batch_interval_minutes",
				Column:     "np.batch_interval_minutes",
				Sortable:   false,
				Filterable: false,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "np.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "np.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "np.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "np.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]notificationPreferenceFieldConfig{
			"id": {
				Name:       "id",
				Column:     "np.id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "np.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "np.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "np.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"resource": {
				Name:       "resource",
				Column:     "np.resource",
				Sortable:   false,
				Filterable: false,
			},
			"update_types": {
				Name:       "update_types",
				Column:     "np.update_types",
				Sortable:   false,
				Filterable: false,
			},
			"notify_on_all_updates": {
				Name:       "notify_on_all_updates",
				Column:     "np.notify_on_all_updates",
				Sortable:   false,
				Filterable: false,
			},
			"notify_only_owned_records": {
				Name:       "notify_only_owned_records",
				Column:     "np.notify_only_owned_records",
				Sortable:   false,
				Filterable: false,
			},
			"excluded_user_ids": {
				Name:       "excluded_user_ids",
				Column:     "np.excluded_user_ids",
				Sortable:   false,
				Filterable: false,
			},
			"included_role_ids": {
				Name:       "included_role_ids",
				Column:     "np.included_role_ids",
				Sortable:   false,
				Filterable: false,
			},
			"preferred_channels": {
				Name:       "preferred_channels",
				Column:     "np.preferred_channels",
				Sortable:   false,
				Filterable: false,
			},
			"quiet_hours_enabled": {
				Name:       "quiet_hours_enabled",
				Column:     "np.quiet_hours_enabled",
				Sortable:   false,
				Filterable: false,
			},
			"quiet_hours_start": {
				Name:       "quiet_hours_start",
				Column:     "np.quiet_hours_start",
				Sortable:   false,
				Filterable: false,
			},
			"quiet_hours_end": {
				Name:       "quiet_hours_end",
				Column:     "np.quiet_hours_end",
				Sortable:   false,
				Filterable: false,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "np.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"batch_notifications": {
				Name:       "batch_notifications",
				Column:     "np.batch_notifications",
				Sortable:   false,
				Filterable: false,
			},
			"batch_interval_minutes": {
				Name:       "batch_interval_minutes",
				Column:     "np.batch_interval_minutes",
				Sortable:   false,
				Filterable: false,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "np.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "np.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "np.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "np.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]notificationPreferenceFieldConfig{
			"id": {
				Name:       "id",
				Column:     "np.id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "np.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "np.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "np.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"resource": {
				Name:       "resource",
				Column:     "np.resource",
				Sortable:   false,
				Filterable: false,
			},
			"update_types": {
				Name:       "update_types",
				Column:     "np.update_types",
				Sortable:   false,
				Filterable: false,
			},
			"notify_on_all_updates": {
				Name:       "notify_on_all_updates",
				Column:     "np.notify_on_all_updates",
				Sortable:   false,
				Filterable: false,
			},
			"notify_only_owned_records": {
				Name:       "notify_only_owned_records",
				Column:     "np.notify_only_owned_records",
				Sortable:   false,
				Filterable: false,
			},
			"excluded_user_ids": {
				Name:       "excluded_user_ids",
				Column:     "np.excluded_user_ids",
				Sortable:   false,
				Filterable: false,
			},
			"included_role_ids": {
				Name:       "included_role_ids",
				Column:     "np.included_role_ids",
				Sortable:   false,
				Filterable: false,
			},
			"preferred_channels": {
				Name:       "preferred_channels",
				Column:     "np.preferred_channels",
				Sortable:   false,
				Filterable: false,
			},
			"quiet_hours_enabled": {
				Name:       "quiet_hours_enabled",
				Column:     "np.quiet_hours_enabled",
				Sortable:   false,
				Filterable: false,
			},
			"quiet_hours_start": {
				Name:       "quiet_hours_start",
				Column:     "np.quiet_hours_start",
				Sortable:   false,
				Filterable: false,
			},
			"quiet_hours_end": {
				Name:       "quiet_hours_end",
				Column:     "np.quiet_hours_end",
				Sortable:   false,
				Filterable: false,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "np.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"batch_notifications": {
				Name:       "batch_notifications",
				Column:     "np.batch_notifications",
				Sortable:   false,
				Filterable: false,
			},
			"batch_interval_minutes": {
				Name:       "batch_interval_minutes",
				Column:     "np.batch_interval_minutes",
				Sortable:   false,
				Filterable: false,
			},
			"is_active": {
				Name:       "is_active",
				Column:     "np.is_active",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "np.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "np.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "np.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// NotificationPreferenceQueryBuilder provides a fluent interface for building queries
type NotificationPreferenceQueryBuilder struct {
	query *bun.SelectQuery
}

// NewNotificationPreferenceQuery creates a new query builder
func NewNotificationPreferenceQuery(db bun.IDB) *NotificationPreferenceQueryBuilder {
	return &NotificationPreferenceQueryBuilder{
		query: db.NewSelect().Model((*NotificationPreference)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func NotificationPreferenceFromQuery(q *bun.SelectQuery) *NotificationPreferenceQueryBuilder {
	return &NotificationPreferenceQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *NotificationPreferenceQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *NotificationPreferenceQueryBuilder) Model(model interface{}) *NotificationPreferenceQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereIDEQ(v pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereIDNEQ(v pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereIDIn(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereIDNotIn(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereUserIDEQ adds a WHERE user_id = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUserIDEQ(v pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UserIDEQ(b.query, v)
	return b
}

// WhereUserIDNEQ adds a WHERE user_id != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUserIDNEQ(v pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UserIDNEQ(b.query, v)
	return b
}

// WhereUserIDIn adds a WHERE user_id IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereUserIDIn(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UserIDIn(b.query, v)
	return b
}

// WhereUserIDNotIn adds a WHERE user_id NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereUserIDNotIn(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UserIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereResourceEQ adds a WHERE resource = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereResourceEQ(v permission.Resource) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.ResourceEQ(b.query, v)
	return b
}

// WhereResourceNEQ adds a WHERE resource != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereResourceNEQ(v permission.Resource) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.ResourceNEQ(b.query, v)
	return b
}

// WhereResourceIn adds a WHERE resource IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereResourceIn(v []permission.Resource) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.ResourceIn(b.query, v)
	return b
}

// WhereResourceNotIn adds a WHERE resource NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereResourceNotIn(v []permission.Resource) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.ResourceNotIn(b.query, v)
	return b
}

// WhereUpdateTypesEQ adds a WHERE update_types = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdateTypesEQ(v []UpdateType) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdateTypesEQ(b.query, v)
	return b
}

// WhereUpdateTypesNEQ adds a WHERE update_types != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdateTypesNEQ(v []UpdateType) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdateTypesNEQ(b.query, v)
	return b
}

// WhereUpdateTypesIn adds a WHERE update_types IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdateTypesIn(v [][]UpdateType) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdateTypesIn(b.query, v)
	return b
}

// WhereUpdateTypesNotIn adds a WHERE update_types NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdateTypesNotIn(v [][]UpdateType) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdateTypesNotIn(b.query, v)
	return b
}

// WhereNotifyOnAllUpdatesEQ adds a WHERE notify_on_all_updates = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereNotifyOnAllUpdatesEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.NotifyOnAllUpdatesEQ(b.query, v)
	return b
}

// WhereNotifyOnAllUpdatesNEQ adds a WHERE notify_on_all_updates != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereNotifyOnAllUpdatesNEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.NotifyOnAllUpdatesNEQ(b.query, v)
	return b
}

// WhereNotifyOnAllUpdatesIn adds a WHERE notify_on_all_updates IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereNotifyOnAllUpdatesIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.NotifyOnAllUpdatesIn(b.query, v)
	return b
}

// WhereNotifyOnAllUpdatesNotIn adds a WHERE notify_on_all_updates NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereNotifyOnAllUpdatesNotIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.NotifyOnAllUpdatesNotIn(b.query, v)
	return b
}

// WhereNotifyOnlyOwnedRecordsEQ adds a WHERE notify_only_owned_records = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereNotifyOnlyOwnedRecordsEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.NotifyOnlyOwnedRecordsEQ(b.query, v)
	return b
}

// WhereNotifyOnlyOwnedRecordsNEQ adds a WHERE notify_only_owned_records != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereNotifyOnlyOwnedRecordsNEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.NotifyOnlyOwnedRecordsNEQ(b.query, v)
	return b
}

// WhereNotifyOnlyOwnedRecordsIn adds a WHERE notify_only_owned_records IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereNotifyOnlyOwnedRecordsIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.NotifyOnlyOwnedRecordsIn(b.query, v)
	return b
}

// WhereNotifyOnlyOwnedRecordsNotIn adds a WHERE notify_only_owned_records NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereNotifyOnlyOwnedRecordsNotIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.NotifyOnlyOwnedRecordsNotIn(b.query, v)
	return b
}

// WhereExcludedUserIDsEQ adds a WHERE excluded_user_ids = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereExcludedUserIDsEQ(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.ExcludedUserIDsEQ(b.query, v)
	return b
}

// WhereExcludedUserIDsNEQ adds a WHERE excluded_user_ids != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereExcludedUserIDsNEQ(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.ExcludedUserIDsNEQ(b.query, v)
	return b
}

// WhereExcludedUserIDsIn adds a WHERE excluded_user_ids IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereExcludedUserIDsIn(v [][]pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.ExcludedUserIDsIn(b.query, v)
	return b
}

// WhereExcludedUserIDsNotIn adds a WHERE excluded_user_ids NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereExcludedUserIDsNotIn(v [][]pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.ExcludedUserIDsNotIn(b.query, v)
	return b
}

// WhereIncludedRoleIDsEQ adds a WHERE included_role_ids = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereIncludedRoleIDsEQ(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IncludedRoleIDsEQ(b.query, v)
	return b
}

// WhereIncludedRoleIDsNEQ adds a WHERE included_role_ids != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereIncludedRoleIDsNEQ(v []pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IncludedRoleIDsNEQ(b.query, v)
	return b
}

// WhereIncludedRoleIDsIn adds a WHERE included_role_ids IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereIncludedRoleIDsIn(v [][]pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IncludedRoleIDsIn(b.query, v)
	return b
}

// WhereIncludedRoleIDsNotIn adds a WHERE included_role_ids NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereIncludedRoleIDsNotIn(v [][]pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IncludedRoleIDsNotIn(b.query, v)
	return b
}

// WherePreferredChannelsEQ adds a WHERE preferred_channels = ? condition
func (b *NotificationPreferenceQueryBuilder) WherePreferredChannelsEQ(v []Channel) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.PreferredChannelsEQ(b.query, v)
	return b
}

// WherePreferredChannelsNEQ adds a WHERE preferred_channels != ? condition
func (b *NotificationPreferenceQueryBuilder) WherePreferredChannelsNEQ(v []Channel) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.PreferredChannelsNEQ(b.query, v)
	return b
}

// WherePreferredChannelsIn adds a WHERE preferred_channels IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WherePreferredChannelsIn(v [][]Channel) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.PreferredChannelsIn(b.query, v)
	return b
}

// WherePreferredChannelsNotIn adds a WHERE preferred_channels NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WherePreferredChannelsNotIn(v [][]Channel) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.PreferredChannelsNotIn(b.query, v)
	return b
}

// WhereQuietHoursEnabledEQ adds a WHERE quiet_hours_enabled = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEnabledEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEnabledEQ(b.query, v)
	return b
}

// WhereQuietHoursEnabledNEQ adds a WHERE quiet_hours_enabled != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEnabledNEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEnabledNEQ(b.query, v)
	return b
}

// WhereQuietHoursEnabledIn adds a WHERE quiet_hours_enabled IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEnabledIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEnabledIn(b.query, v)
	return b
}

// WhereQuietHoursEnabledNotIn adds a WHERE quiet_hours_enabled NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEnabledNotIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEnabledNotIn(b.query, v)
	return b
}

// WhereQuietHoursStartEQ adds a WHERE quiet_hours_start = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursStartEQ(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursStartEQ(b.query, v)
	return b
}

// WhereQuietHoursStartNEQ adds a WHERE quiet_hours_start != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursStartNEQ(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursStartNEQ(b.query, v)
	return b
}

// WhereQuietHoursStartIn adds a WHERE quiet_hours_start IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursStartIn(v []string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursStartIn(b.query, v)
	return b
}

// WhereQuietHoursStartNotIn adds a WHERE quiet_hours_start NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursStartNotIn(v []string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursStartNotIn(b.query, v)
	return b
}

// WhereQuietHoursStartContains adds a WHERE quiet_hours_start LIKE ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursStartContains(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursStartContains(b.query, v)
	return b
}

// WhereQuietHoursStartHasPrefix adds a WHERE quiet_hours_start LIKE ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursStartHasPrefix(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursStartHasPrefix(b.query, v)
	return b
}

// WhereQuietHoursStartHasSuffix adds a WHERE quiet_hours_start LIKE ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursStartHasSuffix(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursStartHasSuffix(b.query, v)
	return b
}

// WhereQuietHoursEndEQ adds a WHERE quiet_hours_end = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEndEQ(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEndEQ(b.query, v)
	return b
}

// WhereQuietHoursEndNEQ adds a WHERE quiet_hours_end != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEndNEQ(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEndNEQ(b.query, v)
	return b
}

// WhereQuietHoursEndIn adds a WHERE quiet_hours_end IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEndIn(v []string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEndIn(b.query, v)
	return b
}

// WhereQuietHoursEndNotIn adds a WHERE quiet_hours_end NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEndNotIn(v []string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEndNotIn(b.query, v)
	return b
}

// WhereQuietHoursEndContains adds a WHERE quiet_hours_end LIKE ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEndContains(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEndContains(b.query, v)
	return b
}

// WhereQuietHoursEndHasPrefix adds a WHERE quiet_hours_end LIKE ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEndHasPrefix(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEndHasPrefix(b.query, v)
	return b
}

// WhereQuietHoursEndHasSuffix adds a WHERE quiet_hours_end LIKE ? condition
func (b *NotificationPreferenceQueryBuilder) WhereQuietHoursEndHasSuffix(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.QuietHoursEndHasSuffix(b.query, v)
	return b
}

// WhereTimezoneEQ adds a WHERE timezone = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereTimezoneEQ(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.TimezoneEQ(b.query, v)
	return b
}

// WhereTimezoneNEQ adds a WHERE timezone != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereTimezoneNEQ(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.TimezoneNEQ(b.query, v)
	return b
}

// WhereTimezoneIn adds a WHERE timezone IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereTimezoneIn(v []string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.TimezoneIn(b.query, v)
	return b
}

// WhereTimezoneNotIn adds a WHERE timezone NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereTimezoneNotIn(v []string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.TimezoneNotIn(b.query, v)
	return b
}

// WhereTimezoneContains adds a WHERE timezone LIKE ? condition
func (b *NotificationPreferenceQueryBuilder) WhereTimezoneContains(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.TimezoneContains(b.query, v)
	return b
}

// WhereTimezoneHasPrefix adds a WHERE timezone LIKE ? condition
func (b *NotificationPreferenceQueryBuilder) WhereTimezoneHasPrefix(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.TimezoneHasPrefix(b.query, v)
	return b
}

// WhereTimezoneHasSuffix adds a WHERE timezone LIKE ? condition
func (b *NotificationPreferenceQueryBuilder) WhereTimezoneHasSuffix(v string) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.TimezoneHasSuffix(b.query, v)
	return b
}

// WhereBatchNotificationsEQ adds a WHERE batch_notifications = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchNotificationsEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchNotificationsEQ(b.query, v)
	return b
}

// WhereBatchNotificationsNEQ adds a WHERE batch_notifications != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchNotificationsNEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchNotificationsNEQ(b.query, v)
	return b
}

// WhereBatchNotificationsIn adds a WHERE batch_notifications IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchNotificationsIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchNotificationsIn(b.query, v)
	return b
}

// WhereBatchNotificationsNotIn adds a WHERE batch_notifications NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchNotificationsNotIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchNotificationsNotIn(b.query, v)
	return b
}

// WhereBatchIntervalMinutesEQ adds a WHERE batch_interval_minutes = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchIntervalMinutesEQ(v int) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchIntervalMinutesEQ(b.query, v)
	return b
}

// WhereBatchIntervalMinutesNEQ adds a WHERE batch_interval_minutes != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchIntervalMinutesNEQ(v int) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchIntervalMinutesNEQ(b.query, v)
	return b
}

// WhereBatchIntervalMinutesGT adds a WHERE batch_interval_minutes > ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchIntervalMinutesGT(v int) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchIntervalMinutesGT(b.query, v)
	return b
}

// WhereBatchIntervalMinutesGTE adds a WHERE batch_interval_minutes >= ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchIntervalMinutesGTE(v int) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchIntervalMinutesGTE(b.query, v)
	return b
}

// WhereBatchIntervalMinutesLT adds a WHERE batch_interval_minutes < ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchIntervalMinutesLT(v int) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchIntervalMinutesLT(b.query, v)
	return b
}

// WhereBatchIntervalMinutesLTE adds a WHERE batch_interval_minutes <= ? condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchIntervalMinutesLTE(v int) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchIntervalMinutesLTE(b.query, v)
	return b
}

// WhereBatchIntervalMinutesIn adds a WHERE batch_interval_minutes IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchIntervalMinutesIn(v []int) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchIntervalMinutesIn(b.query, v)
	return b
}

// WhereBatchIntervalMinutesNotIn adds a WHERE batch_interval_minutes NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereBatchIntervalMinutesNotIn(v []int) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.BatchIntervalMinutesNotIn(b.query, v)
	return b
}

// WhereIsActiveEQ adds a WHERE is_active = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereIsActiveEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IsActiveEQ(b.query, v)
	return b
}

// WhereIsActiveNEQ adds a WHERE is_active != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereIsActiveNEQ(v bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IsActiveNEQ(b.query, v)
	return b
}

// WhereIsActiveIn adds a WHERE is_active IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereIsActiveIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IsActiveIn(b.query, v)
	return b
}

// WhereIsActiveNotIn adds a WHERE is_active NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereIsActiveNotIn(v []bool) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.IsActiveNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereVersionEQ(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereVersionNEQ(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *NotificationPreferenceQueryBuilder) WhereVersionGT(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *NotificationPreferenceQueryBuilder) WhereVersionGTE(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *NotificationPreferenceQueryBuilder) WhereVersionLT(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *NotificationPreferenceQueryBuilder) WhereVersionLTE(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereVersionIn(v []int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereVersionNotIn(v []int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereCreatedAtEQ(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereCreatedAtNEQ(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *NotificationPreferenceQueryBuilder) WhereCreatedAtGT(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *NotificationPreferenceQueryBuilder) WhereCreatedAtGTE(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *NotificationPreferenceQueryBuilder) WhereCreatedAtLT(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *NotificationPreferenceQueryBuilder) WhereCreatedAtLTE(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereCreatedAtIn(v []int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereCreatedAtNotIn(v []int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdatedAtEQ(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdatedAtNEQ(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdatedAtGT(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdatedAtGTE(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdatedAtLT(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdatedAtLTE(v int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdatedAtIn(v []int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *NotificationPreferenceQueryBuilder) WhereUpdatedAtNotIn(v []int64) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *NotificationPreferenceQueryBuilder) WhereTenant(orgID, buID pulid.ID) *NotificationPreferenceQueryBuilder {
	b.query = NotificationPreferenceQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *NotificationPreferenceQueryBuilder) WhereGroup(sep string, fn func(*NotificationPreferenceQueryBuilder) *NotificationPreferenceQueryBuilder) *NotificationPreferenceQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &NotificationPreferenceQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *NotificationPreferenceQueryBuilder) Where(query string, args ...interface{}) *NotificationPreferenceQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *NotificationPreferenceQueryBuilder) OrderBy(column string, desc ...bool) *NotificationPreferenceQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(NotificationPreferenceQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *NotificationPreferenceQueryBuilder) Limit(n int) *NotificationPreferenceQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *NotificationPreferenceQueryBuilder) Offset(n int) *NotificationPreferenceQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *NotificationPreferenceQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *NotificationPreferenceQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *NotificationPreferenceQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *NotificationPreferenceQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *NotificationPreferenceQueryBuilder) All(ctx context.Context) ([]*NotificationPreference, error) {
	var entities []*NotificationPreference
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *NotificationPreferenceQueryBuilder) AllWithCount(ctx context.Context) ([]*NotificationPreference, int, error) {
	var entities []*NotificationPreference
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *NotificationPreferenceQueryBuilder) One(ctx context.Context) (*NotificationPreference, error) {
	entity := new(NotificationPreference)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *NotificationPreferenceQueryBuilder) First(ctx context.Context) (*NotificationPreference, error) {
	entity := new(NotificationPreference)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// NotificationPreferenceBuild creates a chainable query builder
func NotificationPreferenceBuild(db bun.IDB) *NotificationPreferenceQueryBuilder {
	return NewNotificationPreferenceQuery(db)
}

// Relationship loading methods

// NotificationPreferenceRelationChain provides a fluent API for building nested relationship chains
type NotificationPreferenceRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewNotificationPreferenceRelationChain creates a new relation chain builder
func NewNotificationPreferenceRelationChain() *NotificationPreferenceRelationChain {
	return &NotificationPreferenceRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *NotificationPreferenceRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *NotificationPreferenceRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *NotificationPreferenceRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *NotificationPreferenceRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// NotificationPreferenceRelationChainBuilder provides fluent API for building nested relations
type NotificationPreferenceRelationChainBuilder struct {
	parent *NotificationPreferenceQueryBuilder
	chain  *NotificationPreferenceRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *NotificationPreferenceRelationChainBuilder) Load() *NotificationPreferenceQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *NotificationPreferenceRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *NotificationPreferenceRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *NotificationPreferenceRelationChainBuilder) OrderBy(order string) *NotificationPreferenceRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *NotificationPreferenceRelationChainBuilder) Where(condition string, args ...interface{}) *NotificationPreferenceRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
