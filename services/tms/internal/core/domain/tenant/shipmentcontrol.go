package tenant

import (
	"context"
	"errors"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/pkg/errortypes"
	"github.com/emoss08/trenova/pkg/pulid"
	"github.com/emoss08/trenova/pkg/utils"
	"github.com/emoss08/trenova/pkg/validator/framework"
	validation "github.com/go-ozzo/ozzo-validation/v4"
	"github.com/uptrace/bun"
)

var (
	_ bun.BeforeAppendModelHook = (*ShipmentControl)(nil)
	_ domain.Validatable        = (*ShipmentControl)(nil)
	_ framework.TenantedEntity  = (*ShipmentControl)(nil)
)

type ShipmentControl struct {
	bun.BaseModel `bun:"table:shipment_controls,alias:sc" json:"-"`

	ID                           pulid.ID  `json:"id"                           bun:"id,type:VARCHAR(100),pk,notnull"`
	BusinessUnitID               pulid.ID  `json:"businessUnitId"               bun:"business_unit_id,type:VARCHAR(100),pk,notnull"`
	OrganizationID               pulid.ID  `json:"organizationId"               bun:"organization_id,type:VARCHAR(100),pk,notnull"`
	MaxShipmentWeightLimit       int32     `json:"maxShipmentWeightLimit"       bun:"max_shipment_weight_limit,type:INTEGER,notnull,default:80000"`
	AutoDelayShipments           bool      `json:"autoDelayShipments"           bun:"auto_delay_shipments,type:BOOLEAN,notnull,default:true"`
	AutoDelayShipmentsThreshold  *int16    `json:"autoDelayShipmentsThreshold"  bun:"auto_delay_shipments_threshold,type:INTEGER,default:30,nullzero"`                         // In minutes
	DetentionThreshold           *int16    `json:"detentionThreshold"           bun:"detention_threshold,type:INTEGER,default:30,nullzero"`                                    // In minutes
	AutoCancelShipmentsThreshold *int8     `json:"autoCancelShipmentsThreshold" bun:"auto_cancel_shipments_threshold,type:auto_cancel_shipments_threshold,notnull,default:30"` // In days
	AutoCancelShipments          bool      `json:"autoCancelShipments"          bun:"auto_cancel_shipments,type:BOOLEAN,notnull,default:true"`
	TrackDetentionTime           bool      `json:"trackDetentionTime"           bun:"track_detention_time,type:BOOLEAN,notnull,default:true"`
	AutoGenerateDetentionCharges bool      `json:"autoGenerateDetentionCharges" bun:"auto_generate_detention_charges,type:BOOLEAN,notnull,default:true"`
	DetentionChargeID            *pulid.ID `json:"detentionChargeId"            bun:"detention_charge_id,type:VARCHAR(100),nullzero"`
	TrackCustomerRejections      bool      `json:"trackCustomerRejections"      bun:"track_customer_rejections,type:BOOLEAN,notnull,default:false"`
	CheckForDuplicateBOLs        bool      `json:"checkForDuplicateBols"        bun:"check_for_duplicate_bols,type:BOOLEAN,notnull,default:true"`
	AllowMoveRemovals            bool      `json:"allowMoveRemovals"            bun:"allow_move_removals,type:BOOLEAN,notnull,default:true"`
	CheckHazmatSegregation       bool      `json:"checkHazmatSegregation"       bun:"check_hazmat_segregation,type:BOOLEAN,notnull,default:true"`
	Version                      int64     `json:"version"                      bun:"version,type:BIGINT"`
	CreatedAt                    int64     `json:"createdAt"                    bun:"created_at,notnull,default:extract(epoch from current_timestamp)::bigint"`
	UpdatedAt                    int64     `json:"updatedAt"                    bun:"updated_at,notnull,default:extract(epoch from current_timestamp)::bigint"`

	// Relationships
	BusinessUnit *BusinessUnit `json:"businessUnit,omitempty" bun:"rel:belongs-to,join:business_unit_id=id"`
	Organization *Organization `json:"organization,omitempty" bun:"rel:belongs-to,join:organization_id=id"`
}

func (sc *ShipmentControl) Validate(multiErr *errortypes.MultiError) {
	err := validation.ValidateStruct(
		sc,
		validation.Field(&sc.AutoDelayShipmentsThreshold,
			validation.When(sc.AutoDelayShipments,
				validation.Required.Error("Auto delay shipments threshold is required"),
				validation.Min(1).Error("Auto delay shipments threshold must be greater than 0"),
			),
		),
		validation.Field(&sc.AutoGenerateDetentionCharges,
			validation.When(
				sc.TrackDetentionTime,
				validation.Required.Error(
					"Track detention time is required when auto generate detention charges is true",
				),
			),
		),
		validation.Field(&sc.DetentionThreshold,
			validation.When(sc.TrackDetentionTime,
				validation.Required.Error("Detention threshold is required"),
				validation.Min(1).Error("Detention threshold must be greater than 0"),
			),
		),
		validation.Field(&sc.AutoCancelShipmentsThreshold,
			validation.When(sc.AutoCancelShipments,
				validation.Required.Error("Auto cancel shipments threshold is required"),
				validation.Min(1).Error("Auto cancel shipments threshold must be greater than 0"),
			),
		),
		validation.Field(
			&sc.DetentionChargeID,
			validation.When(
				sc.TrackDetentionTime,
				validation.Required.Error(
					"Detention charge is required when track detention time is enabled",
				),
			),
		),
	)
	if err != nil {
		var validationErrs validation.Errors
		if errors.As(err, &validationErrs) {
			errortypes.FromOzzoErrors(validationErrs, multiErr)
		}
	}
}

func (sc *ShipmentControl) GetID() string {
	return sc.ID.String()
}

func (sc *ShipmentControl) GetTableName() string {
	return "shipment_controls"
}

func (sc *ShipmentControl) GetOrganizationID() pulid.ID {
	return sc.OrganizationID
}

func (sc *ShipmentControl) GetBusinessUnitID() pulid.ID {
	return sc.BusinessUnitID
}

func (sc *ShipmentControl) BeforeAppendModel(_ context.Context, query bun.Query) error {
	now := utils.NowUnix()

	switch query.(type) {
	case *bun.InsertQuery:
		if sc.ID.IsNil() {
			sc.ID = pulid.MustNew("sc_")
		}

		sc.CreatedAt = now
	case *bun.UpdateQuery:
		sc.UpdatedAt = now
	}

	return nil
}
