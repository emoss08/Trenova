// Code generated by gen-trenova. DO NOT EDIT.

package integration

import (
	"context"

	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// integrationFieldConfig provides field configuration for Integration
type integrationFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// IntegrationQuery provides type-safe query helpers and constants
var IntegrationQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		EnabledByID    string
		Type           string
		Name           string
		Description    string
		BuiltBy        string
		Enabled        string
		Category       string
		Configuration  string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EnabledByIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		EnabledByIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		EnabledByIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		EnabledByIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		EnabledByIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		EnabledByIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		TypeEQ               func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		TypeNEQ              func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		TypeIn               func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		TypeNotIn            func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BuiltByNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BuiltByGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EnabledEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnabledNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnabledIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnabledNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CategoryEQ           func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		CategoryNEQ          func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		CategoryIn           func(q *bun.SelectQuery, v []Category) *bun.SelectQuery
		CategoryNotIn        func(q *bun.SelectQuery, v []Category) *bun.SelectQuery
		ConfigurationEQ      func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		ConfigurationNEQ     func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		ConfigurationIn      func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		ConfigurationNotIn   func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]integrationFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
		EnabledBy    string
	}
}{
	// Table and alias constants
	Table:    "integrations",
	Alias:    "i",
	IDPrefix: "i_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		EnabledByID    string
		Type           string
		Name           string
		Description    string
		BuiltBy        string
		Enabled        string
		Category       string
		Configuration  string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		EnabledByID:    "enabled_by_id",
		Type:           "type",
		Name:           "name",
		Description:    "description",
		BuiltBy:        "built_by",
		Enabled:        "enabled",
		Category:       "category",
		Configuration:  "configuration",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "i." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "i." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EnabledByIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		EnabledByIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		EnabledByIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		EnabledByIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		EnabledByIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		EnabledByIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		TypeEQ               func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		TypeNEQ              func(q *bun.SelectQuery, v Type) *bun.SelectQuery
		TypeIn               func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		TypeNotIn            func(q *bun.SelectQuery, v []Type) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BuiltByNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		BuiltByGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		BuiltByHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		EnabledEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnabledNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		EnabledIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		EnabledNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		CategoryEQ           func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		CategoryNEQ          func(q *bun.SelectQuery, v Category) *bun.SelectQuery
		CategoryIn           func(q *bun.SelectQuery, v []Category) *bun.SelectQuery
		CategoryNotIn        func(q *bun.SelectQuery, v []Category) *bun.SelectQuery
		ConfigurationEQ      func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		ConfigurationNEQ     func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		ConfigurationIn      func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		ConfigurationNotIn   func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant               func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.organization_id"), bun.In(v))
		},
		EnabledByIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.enabled_by_id"), v)
		},
		EnabledByIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.enabled_by_id"), v)
		},
		EnabledByIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.enabled_by_id"), bun.In(v))
		},
		EnabledByIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.enabled_by_id"), bun.In(v))
		},
		EnabledByIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("i.enabled_by_id"))
		},
		EnabledByIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("i.enabled_by_id"))
		},
		TypeEQ: func(q *bun.SelectQuery, v Type) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.type"), v)
		},
		TypeNEQ: func(q *bun.SelectQuery, v Type) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.type"), v)
		},
		TypeIn: func(q *bun.SelectQuery, v []Type) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.type"), bun.In(v))
		},
		TypeNotIn: func(q *bun.SelectQuery, v []Type) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.type"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("i.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("i.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("i.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("i.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("i.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("i.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("i.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("i.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("i.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("i.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("i.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("i.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("i.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("i.description"), "%"+v)
		},
		BuiltByEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.built_by"), v)
		},
		BuiltByNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.built_by"), v)
		},
		BuiltByIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.built_by"), bun.In(v))
		},
		BuiltByNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.built_by"), bun.In(v))
		},
		BuiltByGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("i.built_by"), v)
		},
		BuiltByGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("i.built_by"), v)
		},
		BuiltByLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("i.built_by"), v)
		},
		BuiltByLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("i.built_by"), v)
		},
		BuiltByContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("i.built_by"), "%"+v+"%")
		},
		BuiltByHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("i.built_by"), v+"%")
		},
		BuiltByHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("i.built_by"), "%"+v)
		},
		EnabledEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.enabled"), v)
		},
		EnabledNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.enabled"), v)
		},
		EnabledIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.enabled"), bun.In(v))
		},
		EnabledNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.enabled"), bun.In(v))
		},
		CategoryEQ: func(q *bun.SelectQuery, v Category) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.category"), v)
		},
		CategoryNEQ: func(q *bun.SelectQuery, v Category) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.category"), v)
		},
		CategoryIn: func(q *bun.SelectQuery, v []Category) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.category"), bun.In(v))
		},
		CategoryNotIn: func(q *bun.SelectQuery, v []Category) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.category"), bun.In(v))
		},
		ConfigurationEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.configuration"), v)
		},
		ConfigurationNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.configuration"), v)
		},
		ConfigurationIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.configuration"), bun.In(v))
		},
		ConfigurationNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.configuration"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("i.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("i.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("i.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("i.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("i.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("i.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("i.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("i.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("i.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("i.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("i.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("i.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("i.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("i.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("i.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("i.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("i.organization_id"), orgID).
				Where("? = ?", bun.Ident("i.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("i.id"), id).
				Where("? = ?", bun.Ident("i.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "i." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"i.name ASC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "i.created_at DESC"
			}
			return "i.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "i.updated_at DESC"
			}
			return "i.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]integrationFieldConfig {
		return map[string]integrationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "i.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "i.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "i.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"enabled_by_id": {
				Name:       "enabled_by_id",
				Column:     "i.enabled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "i.type",
				Sortable:   false,
				Filterable: false,
			},
			"name": {
				Name:       "name",
				Column:     "i.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "i.description",
				Sortable:   false,
				Filterable: false,
			},
			"built_by": {
				Name:       "built_by",
				Column:     "i.built_by",
				Sortable:   false,
				Filterable: true,
			},
			"enabled": {
				Name:       "enabled",
				Column:     "i.enabled",
				Sortable:   false,
				Filterable: false,
			},
			"category": {
				Name:       "category",
				Column:     "i.category",
				Sortable:   false,
				Filterable: false,
			},
			"configuration": {
				Name:       "configuration",
				Column:     "i.configuration",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "i.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "i.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "i.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]integrationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "i.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "i.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "i.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"enabled_by_id": {
				Name:       "enabled_by_id",
				Column:     "i.enabled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "i.type",
				Sortable:   false,
				Filterable: false,
			},
			"name": {
				Name:       "name",
				Column:     "i.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "i.description",
				Sortable:   false,
				Filterable: false,
			},
			"built_by": {
				Name:       "built_by",
				Column:     "i.built_by",
				Sortable:   false,
				Filterable: true,
			},
			"enabled": {
				Name:       "enabled",
				Column:     "i.enabled",
				Sortable:   false,
				Filterable: false,
			},
			"category": {
				Name:       "category",
				Column:     "i.category",
				Sortable:   false,
				Filterable: false,
			},
			"configuration": {
				Name:       "configuration",
				Column:     "i.configuration",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "i.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "i.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "i.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]integrationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "i.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "i.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "i.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"enabled_by_id": {
				Name:       "enabled_by_id",
				Column:     "i.enabled_by_id",
				Sortable:   false,
				Filterable: true,
			},
			"type": {
				Name:       "type",
				Column:     "i.type",
				Sortable:   false,
				Filterable: false,
			},
			"name": {
				Name:       "name",
				Column:     "i.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "i.description",
				Sortable:   false,
				Filterable: false,
			},
			"built_by": {
				Name:       "built_by",
				Column:     "i.built_by",
				Sortable:   false,
				Filterable: true,
			},
			"enabled": {
				Name:       "enabled",
				Column:     "i.enabled",
				Sortable:   false,
				Filterable: false,
			},
			"category": {
				Name:       "category",
				Column:     "i.category",
				Sortable:   false,
				Filterable: false,
			},
			"configuration": {
				Name:       "configuration",
				Column:     "i.configuration",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "i.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "i.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "i.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
		EnabledBy    string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		EnabledBy:    "EnabledBy",
	},
}

// IntegrationQueryBuilder provides a fluent interface for building queries
type IntegrationQueryBuilder struct {
	query *bun.SelectQuery
}

// NewIntegrationQuery creates a new query builder
func NewIntegrationQuery(db bun.IDB) *IntegrationQueryBuilder {
	return &IntegrationQueryBuilder{
		query: db.NewSelect().Model((*Integration)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func IntegrationFromQuery(q *bun.SelectQuery) *IntegrationQueryBuilder {
	return &IntegrationQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *IntegrationQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *IntegrationQueryBuilder) Model(model interface{}) *IntegrationQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *IntegrationQueryBuilder) WhereIDEQ(v pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *IntegrationQueryBuilder) WhereIDNEQ(v pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *IntegrationQueryBuilder) WhereIDIn(v []pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereIDNotIn(v []pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *IntegrationQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *IntegrationQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *IntegrationQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *IntegrationQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *IntegrationQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *IntegrationQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereEnabledByIDEQ adds a WHERE enabled_by_id = ? condition
func (b *IntegrationQueryBuilder) WhereEnabledByIDEQ(v *pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.EnabledByIDEQ(b.query, v)
	return b
}

// WhereEnabledByIDNEQ adds a WHERE enabled_by_id != ? condition
func (b *IntegrationQueryBuilder) WhereEnabledByIDNEQ(v *pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.EnabledByIDNEQ(b.query, v)
	return b
}

// WhereEnabledByIDIn adds a WHERE enabled_by_id IN (?) condition
func (b *IntegrationQueryBuilder) WhereEnabledByIDIn(v []*pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.EnabledByIDIn(b.query, v)
	return b
}

// WhereEnabledByIDNotIn adds a WHERE enabled_by_id NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereEnabledByIDNotIn(v []*pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.EnabledByIDNotIn(b.query, v)
	return b
}

// WhereTypeEQ adds a WHERE type = ? condition
func (b *IntegrationQueryBuilder) WhereTypeEQ(v Type) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.TypeEQ(b.query, v)
	return b
}

// WhereTypeNEQ adds a WHERE type != ? condition
func (b *IntegrationQueryBuilder) WhereTypeNEQ(v Type) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.TypeNEQ(b.query, v)
	return b
}

// WhereTypeIn adds a WHERE type IN (?) condition
func (b *IntegrationQueryBuilder) WhereTypeIn(v []Type) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.TypeIn(b.query, v)
	return b
}

// WhereTypeNotIn adds a WHERE type NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereTypeNotIn(v []Type) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.TypeNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *IntegrationQueryBuilder) WhereNameEQ(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *IntegrationQueryBuilder) WhereNameNEQ(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *IntegrationQueryBuilder) WhereNameIn(v []string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereNameNotIn(v []string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *IntegrationQueryBuilder) WhereNameContains(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *IntegrationQueryBuilder) WhereNameHasPrefix(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *IntegrationQueryBuilder) WhereNameHasSuffix(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *IntegrationQueryBuilder) WhereDescriptionEQ(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *IntegrationQueryBuilder) WhereDescriptionNEQ(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *IntegrationQueryBuilder) WhereDescriptionIn(v []string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereDescriptionNotIn(v []string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *IntegrationQueryBuilder) WhereDescriptionContains(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *IntegrationQueryBuilder) WhereDescriptionHasPrefix(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *IntegrationQueryBuilder) WhereDescriptionHasSuffix(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereBuiltByEQ adds a WHERE built_by = ? condition
func (b *IntegrationQueryBuilder) WhereBuiltByEQ(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BuiltByEQ(b.query, v)
	return b
}

// WhereBuiltByNEQ adds a WHERE built_by != ? condition
func (b *IntegrationQueryBuilder) WhereBuiltByNEQ(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BuiltByNEQ(b.query, v)
	return b
}

// WhereBuiltByIn adds a WHERE built_by IN (?) condition
func (b *IntegrationQueryBuilder) WhereBuiltByIn(v []string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BuiltByIn(b.query, v)
	return b
}

// WhereBuiltByNotIn adds a WHERE built_by NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereBuiltByNotIn(v []string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BuiltByNotIn(b.query, v)
	return b
}

// WhereBuiltByContains adds a WHERE built_by LIKE ? condition
func (b *IntegrationQueryBuilder) WhereBuiltByContains(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BuiltByContains(b.query, v)
	return b
}

// WhereBuiltByHasPrefix adds a WHERE built_by LIKE ? condition
func (b *IntegrationQueryBuilder) WhereBuiltByHasPrefix(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BuiltByHasPrefix(b.query, v)
	return b
}

// WhereBuiltByHasSuffix adds a WHERE built_by LIKE ? condition
func (b *IntegrationQueryBuilder) WhereBuiltByHasSuffix(v string) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.BuiltByHasSuffix(b.query, v)
	return b
}

// WhereEnabledEQ adds a WHERE enabled = ? condition
func (b *IntegrationQueryBuilder) WhereEnabledEQ(v bool) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.EnabledEQ(b.query, v)
	return b
}

// WhereEnabledNEQ adds a WHERE enabled != ? condition
func (b *IntegrationQueryBuilder) WhereEnabledNEQ(v bool) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.EnabledNEQ(b.query, v)
	return b
}

// WhereEnabledIn adds a WHERE enabled IN (?) condition
func (b *IntegrationQueryBuilder) WhereEnabledIn(v []bool) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.EnabledIn(b.query, v)
	return b
}

// WhereEnabledNotIn adds a WHERE enabled NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereEnabledNotIn(v []bool) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.EnabledNotIn(b.query, v)
	return b
}

// WhereCategoryEQ adds a WHERE category = ? condition
func (b *IntegrationQueryBuilder) WhereCategoryEQ(v Category) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CategoryEQ(b.query, v)
	return b
}

// WhereCategoryNEQ adds a WHERE category != ? condition
func (b *IntegrationQueryBuilder) WhereCategoryNEQ(v Category) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CategoryNEQ(b.query, v)
	return b
}

// WhereCategoryIn adds a WHERE category IN (?) condition
func (b *IntegrationQueryBuilder) WhereCategoryIn(v []Category) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CategoryIn(b.query, v)
	return b
}

// WhereCategoryNotIn adds a WHERE category NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereCategoryNotIn(v []Category) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CategoryNotIn(b.query, v)
	return b
}

// WhereConfigurationEQ adds a WHERE configuration = ? condition
func (b *IntegrationQueryBuilder) WhereConfigurationEQ(v map[string]any) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.ConfigurationEQ(b.query, v)
	return b
}

// WhereConfigurationNEQ adds a WHERE configuration != ? condition
func (b *IntegrationQueryBuilder) WhereConfigurationNEQ(v map[string]any) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.ConfigurationNEQ(b.query, v)
	return b
}

// WhereConfigurationIn adds a WHERE configuration IN (?) condition
func (b *IntegrationQueryBuilder) WhereConfigurationIn(v []map[string]any) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.ConfigurationIn(b.query, v)
	return b
}

// WhereConfigurationNotIn adds a WHERE configuration NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereConfigurationNotIn(v []map[string]any) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.ConfigurationNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *IntegrationQueryBuilder) WhereVersionEQ(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *IntegrationQueryBuilder) WhereVersionNEQ(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *IntegrationQueryBuilder) WhereVersionGT(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *IntegrationQueryBuilder) WhereVersionGTE(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *IntegrationQueryBuilder) WhereVersionLT(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *IntegrationQueryBuilder) WhereVersionLTE(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *IntegrationQueryBuilder) WhereVersionIn(v []int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereVersionNotIn(v []int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *IntegrationQueryBuilder) WhereCreatedAtEQ(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *IntegrationQueryBuilder) WhereCreatedAtNEQ(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *IntegrationQueryBuilder) WhereCreatedAtGT(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *IntegrationQueryBuilder) WhereCreatedAtGTE(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *IntegrationQueryBuilder) WhereCreatedAtLT(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *IntegrationQueryBuilder) WhereCreatedAtLTE(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *IntegrationQueryBuilder) WhereCreatedAtIn(v []int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereCreatedAtNotIn(v []int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *IntegrationQueryBuilder) WhereUpdatedAtEQ(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *IntegrationQueryBuilder) WhereUpdatedAtNEQ(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *IntegrationQueryBuilder) WhereUpdatedAtGT(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *IntegrationQueryBuilder) WhereUpdatedAtGTE(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *IntegrationQueryBuilder) WhereUpdatedAtLT(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *IntegrationQueryBuilder) WhereUpdatedAtLTE(v int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *IntegrationQueryBuilder) WhereUpdatedAtIn(v []int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *IntegrationQueryBuilder) WhereUpdatedAtNotIn(v []int64) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *IntegrationQueryBuilder) WhereTenant(orgID, buID pulid.ID) *IntegrationQueryBuilder {
	b.query = IntegrationQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *IntegrationQueryBuilder) WhereGroup(sep string, fn func(*IntegrationQueryBuilder) *IntegrationQueryBuilder) *IntegrationQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &IntegrationQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *IntegrationQueryBuilder) Where(query string, args ...interface{}) *IntegrationQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *IntegrationQueryBuilder) OrderBy(column string, desc ...bool) *IntegrationQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(IntegrationQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *IntegrationQueryBuilder) Limit(n int) *IntegrationQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *IntegrationQueryBuilder) Offset(n int) *IntegrationQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *IntegrationQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *IntegrationQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *IntegrationQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *IntegrationQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *IntegrationQueryBuilder) All(ctx context.Context) ([]*Integration, error) {
	var entities []*Integration
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *IntegrationQueryBuilder) AllWithCount(ctx context.Context) ([]*Integration, int, error) {
	var entities []*Integration
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *IntegrationQueryBuilder) One(ctx context.Context) (*Integration, error) {
	entity := new(Integration)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *IntegrationQueryBuilder) First(ctx context.Context) (*Integration, error) {
	entity := new(Integration)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// IntegrationBuild creates a chainable query builder
func IntegrationBuild(db bun.IDB) *IntegrationQueryBuilder {
	return NewIntegrationQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *IntegrationQueryBuilder) LoadBusinessUnit() *IntegrationQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *IntegrationQueryBuilder) LoadOrganization() *IntegrationQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadEnabledBy loads the EnabledBy relationship
func (b *IntegrationQueryBuilder) LoadEnabledBy() *IntegrationQueryBuilder {
	b.query = b.query.Relation("EnabledBy")
	return b
}

// LoadAllRelations loads all relationships for Integration
func (b *IntegrationQueryBuilder) LoadAllRelations() *IntegrationQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadEnabledBy()
	return b
}

// IntegrationRelationChain provides a fluent API for building nested relationship chains
type IntegrationRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewIntegrationRelationChain creates a new relation chain builder
func NewIntegrationRelationChain() *IntegrationRelationChain {
	return &IntegrationRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *IntegrationRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *IntegrationRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *IntegrationRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *IntegrationRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *IntegrationQueryBuilder) WithBusinessUnit() *IntegrationRelationChainBuilder {
	chain := &IntegrationRelationChainBuilder{
		parent: b,
		chain:  NewIntegrationRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *IntegrationQueryBuilder) WithOrganization() *IntegrationRelationChainBuilder {
	chain := &IntegrationRelationChainBuilder{
		parent: b,
		chain:  NewIntegrationRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithEnabledBy creates a relation chain starting with EnabledBy
func (b *IntegrationQueryBuilder) WithEnabledBy() *IntegrationRelationChainBuilder {
	chain := &IntegrationRelationChainBuilder{
		parent: b,
		chain:  NewIntegrationRelationChain(),
	}
	chain.chain.Add("EnabledBy")
	return chain
}

// IntegrationRelationChainBuilder provides fluent API for building nested relations
type IntegrationRelationChainBuilder struct {
	parent *IntegrationQueryBuilder
	chain  *IntegrationRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *IntegrationRelationChainBuilder) Load() *IntegrationQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *IntegrationRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *IntegrationRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *IntegrationRelationChainBuilder) OrderBy(order string) *IntegrationRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *IntegrationRelationChainBuilder) Where(condition string, args ...interface{}) *IntegrationRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
