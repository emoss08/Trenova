// Code generated by gen-trenova. DO NOT EDIT.

package permission

import (
	"context"

	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// rolePermissionFieldConfig provides field configuration for RolePermission
type rolePermissionFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// RolePermissionQuery provides type-safe query helpers and constants
var RolePermissionQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		BusinessUnitID string
		OrganizationID string
		RoleID         string
		PermissionID   string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RoleIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		RoleIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		RoleIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RoleIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PermissionIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PermissionIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PermissionIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PermissionIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct{}

	// ORDER BY helpers
	OrderBy struct {
		Field   func(field string, desc bool) string
		Default func() []string
	}

	// Field configuration
	FieldConfig  func() map[string]rolePermissionFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		Role       string
		Permission string
	}
}{
	// Table and alias constants
	Table:    "role_permissions",
	Alias:    "rp",
	IDPrefix: "rp_",

	// Field names
	Field: struct {
		BusinessUnitID string
		OrganizationID string
		RoleID         string
		PermissionID   string
	}{
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		RoleID:         "role_id",
		PermissionID:   "permission_id",
	},

	// Column helpers
	Column: func(field string) string {
		return "rp." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "rp." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RoleIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		RoleIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		RoleIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		RoleIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PermissionIDEQ      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PermissionIDNEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PermissionIDIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PermissionIDNotIn   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		Tenant              func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rp.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rp.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rp.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rp.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rp.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rp.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rp.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rp.organization_id"), bun.In(v))
		},
		RoleIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rp.role_id"), v)
		},
		RoleIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rp.role_id"), v)
		},
		RoleIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rp.role_id"), bun.In(v))
		},
		RoleIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rp.role_id"), bun.In(v))
		},
		PermissionIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("rp.permission_id"), v)
		},
		PermissionIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("rp.permission_id"), v)
		},
		PermissionIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("rp.permission_id"), bun.In(v))
		},
		PermissionIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("rp.permission_id"), bun.In(v))
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("rp.organization_id"), orgID).
				Where("? = ?", bun.Ident("rp.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct{}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field   func(field string, desc bool) string
		Default func() []string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "rp." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"rp.created_at DESC",
			}
		},
	},

	// Field configuration
	FieldConfig: func() map[string]rolePermissionFieldConfig {
		return map[string]rolePermissionFieldConfig{
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "rp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "rp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"role_id": {
				Name:       "role_id",
				Column:     "rp.role_id",
				Sortable:   false,
				Filterable: true,
			},
			"permission_id": {
				Name:       "permission_id",
				Column:     "rp.permission_id",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]rolePermissionFieldConfig{
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "rp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "rp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"role_id": {
				Name:       "role_id",
				Column:     "rp.role_id",
				Sortable:   false,
				Filterable: true,
			},
			"permission_id": {
				Name:       "permission_id",
				Column:     "rp.permission_id",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]rolePermissionFieldConfig{
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "rp.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "rp.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"role_id": {
				Name:       "role_id",
				Column:     "rp.role_id",
				Sortable:   false,
				Filterable: true,
			},
			"permission_id": {
				Name:       "permission_id",
				Column:     "rp.permission_id",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		Role       string
		Permission string
	}{
		Role:       "Role",
		Permission: "Permission",
	},
}

// RolePermissionQueryBuilder provides a fluent interface for building queries
type RolePermissionQueryBuilder struct {
	query *bun.SelectQuery
}

// NewRolePermissionQuery creates a new query builder
func NewRolePermissionQuery(db bun.IDB) *RolePermissionQueryBuilder {
	return &RolePermissionQueryBuilder{
		query: db.NewSelect().Model((*RolePermission)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func RolePermissionFromQuery(q *bun.SelectQuery) *RolePermissionQueryBuilder {
	return &RolePermissionQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *RolePermissionQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *RolePermissionQueryBuilder) Model(model interface{}) *RolePermissionQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *RolePermissionQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *RolePermissionQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *RolePermissionQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *RolePermissionQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *RolePermissionQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *RolePermissionQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *RolePermissionQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *RolePermissionQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereRoleIDEQ adds a WHERE role_id = ? condition
func (b *RolePermissionQueryBuilder) WhereRoleIDEQ(v pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.RoleIDEQ(b.query, v)
	return b
}

// WhereRoleIDNEQ adds a WHERE role_id != ? condition
func (b *RolePermissionQueryBuilder) WhereRoleIDNEQ(v pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.RoleIDNEQ(b.query, v)
	return b
}

// WhereRoleIDIn adds a WHERE role_id IN (?) condition
func (b *RolePermissionQueryBuilder) WhereRoleIDIn(v []pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.RoleIDIn(b.query, v)
	return b
}

// WhereRoleIDNotIn adds a WHERE role_id NOT IN (?) condition
func (b *RolePermissionQueryBuilder) WhereRoleIDNotIn(v []pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.RoleIDNotIn(b.query, v)
	return b
}

// WherePermissionIDEQ adds a WHERE permission_id = ? condition
func (b *RolePermissionQueryBuilder) WherePermissionIDEQ(v pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.PermissionIDEQ(b.query, v)
	return b
}

// WherePermissionIDNEQ adds a WHERE permission_id != ? condition
func (b *RolePermissionQueryBuilder) WherePermissionIDNEQ(v pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.PermissionIDNEQ(b.query, v)
	return b
}

// WherePermissionIDIn adds a WHERE permission_id IN (?) condition
func (b *RolePermissionQueryBuilder) WherePermissionIDIn(v []pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.PermissionIDIn(b.query, v)
	return b
}

// WherePermissionIDNotIn adds a WHERE permission_id NOT IN (?) condition
func (b *RolePermissionQueryBuilder) WherePermissionIDNotIn(v []pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.PermissionIDNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *RolePermissionQueryBuilder) WhereTenant(orgID, buID pulid.ID) *RolePermissionQueryBuilder {
	b.query = RolePermissionQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *RolePermissionQueryBuilder) WhereGroup(sep string, fn func(*RolePermissionQueryBuilder) *RolePermissionQueryBuilder) *RolePermissionQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &RolePermissionQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *RolePermissionQueryBuilder) Where(query string, args ...interface{}) *RolePermissionQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *RolePermissionQueryBuilder) OrderBy(column string, desc ...bool) *RolePermissionQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(RolePermissionQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *RolePermissionQueryBuilder) Limit(n int) *RolePermissionQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *RolePermissionQueryBuilder) Offset(n int) *RolePermissionQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *RolePermissionQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *RolePermissionQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *RolePermissionQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *RolePermissionQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *RolePermissionQueryBuilder) All(ctx context.Context) ([]*RolePermission, error) {
	var entities []*RolePermission
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *RolePermissionQueryBuilder) AllWithCount(ctx context.Context) ([]*RolePermission, int, error) {
	var entities []*RolePermission
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *RolePermissionQueryBuilder) One(ctx context.Context) (*RolePermission, error) {
	entity := new(RolePermission)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *RolePermissionQueryBuilder) First(ctx context.Context) (*RolePermission, error) {
	entity := new(RolePermission)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// RolePermissionBuild creates a chainable query builder
func RolePermissionBuild(db bun.IDB) *RolePermissionQueryBuilder {
	return NewRolePermissionQuery(db)
}

// Relationship loading methods

// LoadRole loads the Role relationship
func (b *RolePermissionQueryBuilder) LoadRole() *RolePermissionQueryBuilder {
	b.query = b.query.Relation("Role")
	return b
}

// LoadPermission loads the Permission relationship
func (b *RolePermissionQueryBuilder) LoadPermission() *RolePermissionQueryBuilder {
	b.query = b.query.Relation("Permission")
	return b
}

// LoadAllRelations loads all relationships for RolePermission
func (b *RolePermissionQueryBuilder) LoadAllRelations() *RolePermissionQueryBuilder {
	b.LoadRole()
	b.LoadPermission()
	return b
}

// RolePermissionRelationChain provides a fluent API for building nested relationship chains
type RolePermissionRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewRolePermissionRelationChain creates a new relation chain builder
func NewRolePermissionRelationChain() *RolePermissionRelationChain {
	return &RolePermissionRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *RolePermissionRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *RolePermissionRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *RolePermissionRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *RolePermissionRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithRole creates a relation chain starting with Role
func (b *RolePermissionQueryBuilder) WithRole() *RolePermissionRelationChainBuilder {
	chain := &RolePermissionRelationChainBuilder{
		parent: b,
		chain:  NewRolePermissionRelationChain(),
	}
	chain.chain.Add("Role")
	return chain
}

// WithPermission creates a relation chain starting with Permission
func (b *RolePermissionQueryBuilder) WithPermission() *RolePermissionRelationChainBuilder {
	chain := &RolePermissionRelationChainBuilder{
		parent: b,
		chain:  NewRolePermissionRelationChain(),
	}
	chain.chain.Add("Permission")
	return chain
}

// RolePermissionRelationChainBuilder provides fluent API for building nested relations
type RolePermissionRelationChainBuilder struct {
	parent *RolePermissionQueryBuilder
	chain  *RolePermissionRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *RolePermissionRelationChainBuilder) Load() *RolePermissionQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *RolePermissionRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *RolePermissionRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *RolePermissionRelationChainBuilder) OrderBy(order string) *RolePermissionRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *RolePermissionRelationChainBuilder) Where(condition string, args ...interface{}) *RolePermissionRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
