// Code generated by gen-trenova. DO NOT EDIT.

package permission

import (
	"context"

	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// permissionFieldConfig provides field configuration for Permission
type permissionFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// PermissionQuery provides type-safe query helpers and constants
var PermissionQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID               string
		Resource         string
		Action           string
		Scope            string
		Description      string
		IsSystemLevel    string
		FieldPermissions string
		Conditions       string
		Dependencies     string
		CustomSettings   string
		CreatedAt        string
		UpdatedAt        string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ResourceEQ            func(q *bun.SelectQuery, v Resource) *bun.SelectQuery
		ResourceNEQ           func(q *bun.SelectQuery, v Resource) *bun.SelectQuery
		ResourceIn            func(q *bun.SelectQuery, v []Resource) *bun.SelectQuery
		ResourceNotIn         func(q *bun.SelectQuery, v []Resource) *bun.SelectQuery
		ActionEQ              func(q *bun.SelectQuery, v Action) *bun.SelectQuery
		ActionNEQ             func(q *bun.SelectQuery, v Action) *bun.SelectQuery
		ActionIn              func(q *bun.SelectQuery, v []Action) *bun.SelectQuery
		ActionNotIn           func(q *bun.SelectQuery, v []Action) *bun.SelectQuery
		ScopeEQ               func(q *bun.SelectQuery, v Scope) *bun.SelectQuery
		ScopeNEQ              func(q *bun.SelectQuery, v Scope) *bun.SelectQuery
		ScopeIn               func(q *bun.SelectQuery, v []Scope) *bun.SelectQuery
		ScopeNotIn            func(q *bun.SelectQuery, v []Scope) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsSystemLevelEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemLevelNEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemLevelIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsSystemLevelNotIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		FieldPermissionsEQ    func(q *bun.SelectQuery, v []*FieldPermission) *bun.SelectQuery
		FieldPermissionsNEQ   func(q *bun.SelectQuery, v []*FieldPermission) *bun.SelectQuery
		FieldPermissionsIn    func(q *bun.SelectQuery, v [][]*FieldPermission) *bun.SelectQuery
		FieldPermissionsNotIn func(q *bun.SelectQuery, v [][]*FieldPermission) *bun.SelectQuery
		ConditionsEQ          func(q *bun.SelectQuery, v []*Condition) *bun.SelectQuery
		ConditionsNEQ         func(q *bun.SelectQuery, v []*Condition) *bun.SelectQuery
		ConditionsIn          func(q *bun.SelectQuery, v [][]*Condition) *bun.SelectQuery
		ConditionsNotIn       func(q *bun.SelectQuery, v [][]*Condition) *bun.SelectQuery
		DependenciesEQ        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DependenciesNEQ       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DependenciesIn        func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		DependenciesNotIn     func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		CustomSettingsEQ      func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CustomSettingsNEQ     func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CustomSettingsIn      func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CustomSettingsNotIn   func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct{}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]permissionFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "permissions",
	Alias:    "perm",
	IDPrefix: "perm_",

	// Field names
	Field: struct {
		ID               string
		Resource         string
		Action           string
		Scope            string
		Description      string
		IsSystemLevel    string
		FieldPermissions string
		Conditions       string
		Dependencies     string
		CustomSettings   string
		CreatedAt        string
		UpdatedAt        string
	}{
		ID:               "id",
		Resource:         "resource",
		Action:           "action",
		Scope:            "scope",
		Description:      "description",
		IsSystemLevel:    "is_system_level",
		FieldPermissions: "field_permissions",
		Conditions:       "conditions",
		Dependencies:     "dependencies",
		CustomSettings:   "custom_settings",
		CreatedAt:        "created_at",
		UpdatedAt:        "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "perm." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "perm." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                  func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn               func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ResourceEQ            func(q *bun.SelectQuery, v Resource) *bun.SelectQuery
		ResourceNEQ           func(q *bun.SelectQuery, v Resource) *bun.SelectQuery
		ResourceIn            func(q *bun.SelectQuery, v []Resource) *bun.SelectQuery
		ResourceNotIn         func(q *bun.SelectQuery, v []Resource) *bun.SelectQuery
		ActionEQ              func(q *bun.SelectQuery, v Action) *bun.SelectQuery
		ActionNEQ             func(q *bun.SelectQuery, v Action) *bun.SelectQuery
		ActionIn              func(q *bun.SelectQuery, v []Action) *bun.SelectQuery
		ActionNotIn           func(q *bun.SelectQuery, v []Action) *bun.SelectQuery
		ScopeEQ               func(q *bun.SelectQuery, v Scope) *bun.SelectQuery
		ScopeNEQ              func(q *bun.SelectQuery, v Scope) *bun.SelectQuery
		ScopeIn               func(q *bun.SelectQuery, v []Scope) *bun.SelectQuery
		ScopeNotIn            func(q *bun.SelectQuery, v []Scope) *bun.SelectQuery
		DescriptionEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsSystemLevelEQ       func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemLevelNEQ      func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsSystemLevelIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsSystemLevelNotIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		FieldPermissionsEQ    func(q *bun.SelectQuery, v []*FieldPermission) *bun.SelectQuery
		FieldPermissionsNEQ   func(q *bun.SelectQuery, v []*FieldPermission) *bun.SelectQuery
		FieldPermissionsIn    func(q *bun.SelectQuery, v [][]*FieldPermission) *bun.SelectQuery
		FieldPermissionsNotIn func(q *bun.SelectQuery, v [][]*FieldPermission) *bun.SelectQuery
		ConditionsEQ          func(q *bun.SelectQuery, v []*Condition) *bun.SelectQuery
		ConditionsNEQ         func(q *bun.SelectQuery, v []*Condition) *bun.SelectQuery
		ConditionsIn          func(q *bun.SelectQuery, v [][]*Condition) *bun.SelectQuery
		ConditionsNotIn       func(q *bun.SelectQuery, v [][]*Condition) *bun.SelectQuery
		DependenciesEQ        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DependenciesNEQ       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		DependenciesIn        func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		DependenciesNotIn     func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery
		CustomSettingsEQ      func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CustomSettingsNEQ     func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		CustomSettingsIn      func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CustomSettingsNotIn   func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		CreatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.id"), bun.In(v))
		},
		ResourceEQ: func(q *bun.SelectQuery, v Resource) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.resource"), v)
		},
		ResourceNEQ: func(q *bun.SelectQuery, v Resource) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.resource"), v)
		},
		ResourceIn: func(q *bun.SelectQuery, v []Resource) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.resource"), bun.In(v))
		},
		ResourceNotIn: func(q *bun.SelectQuery, v []Resource) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.resource"), bun.In(v))
		},
		ActionEQ: func(q *bun.SelectQuery, v Action) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.action"), v)
		},
		ActionNEQ: func(q *bun.SelectQuery, v Action) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.action"), v)
		},
		ActionIn: func(q *bun.SelectQuery, v []Action) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.action"), bun.In(v))
		},
		ActionNotIn: func(q *bun.SelectQuery, v []Action) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.action"), bun.In(v))
		},
		ScopeEQ: func(q *bun.SelectQuery, v Scope) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.scope"), v)
		},
		ScopeNEQ: func(q *bun.SelectQuery, v Scope) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.scope"), v)
		},
		ScopeIn: func(q *bun.SelectQuery, v []Scope) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.scope"), bun.In(v))
		},
		ScopeNotIn: func(q *bun.SelectQuery, v []Scope) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.scope"), bun.In(v))
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("perm.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("perm.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("perm.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("perm.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("perm.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("perm.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("perm.description"), "%"+v)
		},
		IsSystemLevelEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.is_system_level"), v)
		},
		IsSystemLevelNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.is_system_level"), v)
		},
		IsSystemLevelIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.is_system_level"), bun.In(v))
		},
		IsSystemLevelNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.is_system_level"), bun.In(v))
		},
		FieldPermissionsEQ: func(q *bun.SelectQuery, v []*FieldPermission) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.field_permissions"), v)
		},
		FieldPermissionsNEQ: func(q *bun.SelectQuery, v []*FieldPermission) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.field_permissions"), v)
		},
		FieldPermissionsIn: func(q *bun.SelectQuery, v [][]*FieldPermission) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.field_permissions"), bun.In(v))
		},
		FieldPermissionsNotIn: func(q *bun.SelectQuery, v [][]*FieldPermission) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.field_permissions"), bun.In(v))
		},
		ConditionsEQ: func(q *bun.SelectQuery, v []*Condition) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.conditions"), v)
		},
		ConditionsNEQ: func(q *bun.SelectQuery, v []*Condition) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.conditions"), v)
		},
		ConditionsIn: func(q *bun.SelectQuery, v [][]*Condition) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.conditions"), bun.In(v))
		},
		ConditionsNotIn: func(q *bun.SelectQuery, v [][]*Condition) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.conditions"), bun.In(v))
		},
		DependenciesEQ: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.dependencies"), v)
		},
		DependenciesNEQ: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.dependencies"), v)
		},
		DependenciesIn: func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.dependencies"), bun.In(v))
		},
		DependenciesNotIn: func(q *bun.SelectQuery, v [][]pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.dependencies"), bun.In(v))
		},
		CustomSettingsEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.custom_settings"), v)
		},
		CustomSettingsNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.custom_settings"), v)
		},
		CustomSettingsIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.custom_settings"), bun.In(v))
		},
		CustomSettingsNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.custom_settings"), bun.In(v))
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("perm.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("perm.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("perm.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("perm.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("perm.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("perm.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("perm.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("perm.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("perm.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("perm.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("perm.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("perm.updated_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct{}{},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "perm." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"perm.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "perm.created_at DESC"
			}
			return "perm.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "perm.updated_at DESC"
			}
			return "perm.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]permissionFieldConfig {
		return map[string]permissionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "perm.id",
				Sortable:   false,
				Filterable: true,
			},
			"resource": {
				Name:       "resource",
				Column:     "perm.resource",
				Sortable:   false,
				Filterable: false,
			},
			"action": {
				Name:       "action",
				Column:     "perm.action",
				Sortable:   false,
				Filterable: false,
			},
			"scope": {
				Name:       "scope",
				Column:     "perm.scope",
				Sortable:   false,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "perm.description",
				Sortable:   false,
				Filterable: false,
			},
			"is_system_level": {
				Name:       "is_system_level",
				Column:     "perm.is_system_level",
				Sortable:   false,
				Filterable: false,
			},
			"field_permissions": {
				Name:       "field_permissions",
				Column:     "perm.field_permissions",
				Sortable:   false,
				Filterable: false,
			},
			"conditions": {
				Name:       "conditions",
				Column:     "perm.conditions",
				Sortable:   false,
				Filterable: false,
			},
			"dependencies": {
				Name:       "dependencies",
				Column:     "perm.dependencies",
				Sortable:   false,
				Filterable: false,
			},
			"custom_settings": {
				Name:       "custom_settings",
				Column:     "perm.custom_settings",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "perm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "perm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]permissionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "perm.id",
				Sortable:   false,
				Filterable: true,
			},
			"resource": {
				Name:       "resource",
				Column:     "perm.resource",
				Sortable:   false,
				Filterable: false,
			},
			"action": {
				Name:       "action",
				Column:     "perm.action",
				Sortable:   false,
				Filterable: false,
			},
			"scope": {
				Name:       "scope",
				Column:     "perm.scope",
				Sortable:   false,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "perm.description",
				Sortable:   false,
				Filterable: false,
			},
			"is_system_level": {
				Name:       "is_system_level",
				Column:     "perm.is_system_level",
				Sortable:   false,
				Filterable: false,
			},
			"field_permissions": {
				Name:       "field_permissions",
				Column:     "perm.field_permissions",
				Sortable:   false,
				Filterable: false,
			},
			"conditions": {
				Name:       "conditions",
				Column:     "perm.conditions",
				Sortable:   false,
				Filterable: false,
			},
			"dependencies": {
				Name:       "dependencies",
				Column:     "perm.dependencies",
				Sortable:   false,
				Filterable: false,
			},
			"custom_settings": {
				Name:       "custom_settings",
				Column:     "perm.custom_settings",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "perm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "perm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]permissionFieldConfig{
			"id": {
				Name:       "id",
				Column:     "perm.id",
				Sortable:   false,
				Filterable: true,
			},
			"resource": {
				Name:       "resource",
				Column:     "perm.resource",
				Sortable:   false,
				Filterable: false,
			},
			"action": {
				Name:       "action",
				Column:     "perm.action",
				Sortable:   false,
				Filterable: false,
			},
			"scope": {
				Name:       "scope",
				Column:     "perm.scope",
				Sortable:   false,
				Filterable: false,
			},
			"description": {
				Name:       "description",
				Column:     "perm.description",
				Sortable:   false,
				Filterable: false,
			},
			"is_system_level": {
				Name:       "is_system_level",
				Column:     "perm.is_system_level",
				Sortable:   false,
				Filterable: false,
			},
			"field_permissions": {
				Name:       "field_permissions",
				Column:     "perm.field_permissions",
				Sortable:   false,
				Filterable: false,
			},
			"conditions": {
				Name:       "conditions",
				Column:     "perm.conditions",
				Sortable:   false,
				Filterable: false,
			},
			"dependencies": {
				Name:       "dependencies",
				Column:     "perm.dependencies",
				Sortable:   false,
				Filterable: false,
			},
			"custom_settings": {
				Name:       "custom_settings",
				Column:     "perm.custom_settings",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "perm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "perm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// PermissionQueryBuilder provides a fluent interface for building queries
type PermissionQueryBuilder struct {
	query *bun.SelectQuery
}

// NewPermissionQuery creates a new query builder
func NewPermissionQuery(db bun.IDB) *PermissionQueryBuilder {
	return &PermissionQueryBuilder{
		query: db.NewSelect().Model((*Permission)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func PermissionFromQuery(q *bun.SelectQuery) *PermissionQueryBuilder {
	return &PermissionQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *PermissionQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *PermissionQueryBuilder) Model(model interface{}) *PermissionQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *PermissionQueryBuilder) WhereIDEQ(v pulid.ID) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *PermissionQueryBuilder) WhereIDNEQ(v pulid.ID) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *PermissionQueryBuilder) WhereIDIn(v []pulid.ID) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereIDNotIn(v []pulid.ID) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereResourceEQ adds a WHERE resource = ? condition
func (b *PermissionQueryBuilder) WhereResourceEQ(v Resource) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ResourceEQ(b.query, v)
	return b
}

// WhereResourceNEQ adds a WHERE resource != ? condition
func (b *PermissionQueryBuilder) WhereResourceNEQ(v Resource) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ResourceNEQ(b.query, v)
	return b
}

// WhereResourceIn adds a WHERE resource IN (?) condition
func (b *PermissionQueryBuilder) WhereResourceIn(v []Resource) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ResourceIn(b.query, v)
	return b
}

// WhereResourceNotIn adds a WHERE resource NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereResourceNotIn(v []Resource) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ResourceNotIn(b.query, v)
	return b
}

// WhereActionEQ adds a WHERE action = ? condition
func (b *PermissionQueryBuilder) WhereActionEQ(v Action) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ActionEQ(b.query, v)
	return b
}

// WhereActionNEQ adds a WHERE action != ? condition
func (b *PermissionQueryBuilder) WhereActionNEQ(v Action) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ActionNEQ(b.query, v)
	return b
}

// WhereActionIn adds a WHERE action IN (?) condition
func (b *PermissionQueryBuilder) WhereActionIn(v []Action) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ActionIn(b.query, v)
	return b
}

// WhereActionNotIn adds a WHERE action NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereActionNotIn(v []Action) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ActionNotIn(b.query, v)
	return b
}

// WhereScopeEQ adds a WHERE scope = ? condition
func (b *PermissionQueryBuilder) WhereScopeEQ(v Scope) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ScopeEQ(b.query, v)
	return b
}

// WhereScopeNEQ adds a WHERE scope != ? condition
func (b *PermissionQueryBuilder) WhereScopeNEQ(v Scope) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ScopeNEQ(b.query, v)
	return b
}

// WhereScopeIn adds a WHERE scope IN (?) condition
func (b *PermissionQueryBuilder) WhereScopeIn(v []Scope) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ScopeIn(b.query, v)
	return b
}

// WhereScopeNotIn adds a WHERE scope NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereScopeNotIn(v []Scope) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ScopeNotIn(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *PermissionQueryBuilder) WhereDescriptionEQ(v string) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *PermissionQueryBuilder) WhereDescriptionNEQ(v string) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *PermissionQueryBuilder) WhereDescriptionIn(v []string) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereDescriptionNotIn(v []string) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *PermissionQueryBuilder) WhereDescriptionContains(v string) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *PermissionQueryBuilder) WhereDescriptionHasPrefix(v string) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *PermissionQueryBuilder) WhereDescriptionHasSuffix(v string) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereIsSystemLevelEQ adds a WHERE is_system_level = ? condition
func (b *PermissionQueryBuilder) WhereIsSystemLevelEQ(v bool) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.IsSystemLevelEQ(b.query, v)
	return b
}

// WhereIsSystemLevelNEQ adds a WHERE is_system_level != ? condition
func (b *PermissionQueryBuilder) WhereIsSystemLevelNEQ(v bool) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.IsSystemLevelNEQ(b.query, v)
	return b
}

// WhereIsSystemLevelIn adds a WHERE is_system_level IN (?) condition
func (b *PermissionQueryBuilder) WhereIsSystemLevelIn(v []bool) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.IsSystemLevelIn(b.query, v)
	return b
}

// WhereIsSystemLevelNotIn adds a WHERE is_system_level NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereIsSystemLevelNotIn(v []bool) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.IsSystemLevelNotIn(b.query, v)
	return b
}

// WhereFieldPermissionsEQ adds a WHERE field_permissions = ? condition
func (b *PermissionQueryBuilder) WhereFieldPermissionsEQ(v []*FieldPermission) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.FieldPermissionsEQ(b.query, v)
	return b
}

// WhereFieldPermissionsNEQ adds a WHERE field_permissions != ? condition
func (b *PermissionQueryBuilder) WhereFieldPermissionsNEQ(v []*FieldPermission) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.FieldPermissionsNEQ(b.query, v)
	return b
}

// WhereFieldPermissionsIn adds a WHERE field_permissions IN (?) condition
func (b *PermissionQueryBuilder) WhereFieldPermissionsIn(v [][]*FieldPermission) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.FieldPermissionsIn(b.query, v)
	return b
}

// WhereFieldPermissionsNotIn adds a WHERE field_permissions NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereFieldPermissionsNotIn(v [][]*FieldPermission) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.FieldPermissionsNotIn(b.query, v)
	return b
}

// WhereConditionsEQ adds a WHERE conditions = ? condition
func (b *PermissionQueryBuilder) WhereConditionsEQ(v []*Condition) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ConditionsEQ(b.query, v)
	return b
}

// WhereConditionsNEQ adds a WHERE conditions != ? condition
func (b *PermissionQueryBuilder) WhereConditionsNEQ(v []*Condition) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ConditionsNEQ(b.query, v)
	return b
}

// WhereConditionsIn adds a WHERE conditions IN (?) condition
func (b *PermissionQueryBuilder) WhereConditionsIn(v [][]*Condition) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ConditionsIn(b.query, v)
	return b
}

// WhereConditionsNotIn adds a WHERE conditions NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereConditionsNotIn(v [][]*Condition) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.ConditionsNotIn(b.query, v)
	return b
}

// WhereDependenciesEQ adds a WHERE dependencies = ? condition
func (b *PermissionQueryBuilder) WhereDependenciesEQ(v []pulid.ID) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DependenciesEQ(b.query, v)
	return b
}

// WhereDependenciesNEQ adds a WHERE dependencies != ? condition
func (b *PermissionQueryBuilder) WhereDependenciesNEQ(v []pulid.ID) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DependenciesNEQ(b.query, v)
	return b
}

// WhereDependenciesIn adds a WHERE dependencies IN (?) condition
func (b *PermissionQueryBuilder) WhereDependenciesIn(v [][]pulid.ID) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DependenciesIn(b.query, v)
	return b
}

// WhereDependenciesNotIn adds a WHERE dependencies NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereDependenciesNotIn(v [][]pulid.ID) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.DependenciesNotIn(b.query, v)
	return b
}

// WhereCustomSettingsEQ adds a WHERE custom_settings = ? condition
func (b *PermissionQueryBuilder) WhereCustomSettingsEQ(v map[string]any) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CustomSettingsEQ(b.query, v)
	return b
}

// WhereCustomSettingsNEQ adds a WHERE custom_settings != ? condition
func (b *PermissionQueryBuilder) WhereCustomSettingsNEQ(v map[string]any) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CustomSettingsNEQ(b.query, v)
	return b
}

// WhereCustomSettingsIn adds a WHERE custom_settings IN (?) condition
func (b *PermissionQueryBuilder) WhereCustomSettingsIn(v []map[string]any) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CustomSettingsIn(b.query, v)
	return b
}

// WhereCustomSettingsNotIn adds a WHERE custom_settings NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereCustomSettingsNotIn(v []map[string]any) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CustomSettingsNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *PermissionQueryBuilder) WhereCreatedAtEQ(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *PermissionQueryBuilder) WhereCreatedAtNEQ(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *PermissionQueryBuilder) WhereCreatedAtGT(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *PermissionQueryBuilder) WhereCreatedAtGTE(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *PermissionQueryBuilder) WhereCreatedAtLT(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *PermissionQueryBuilder) WhereCreatedAtLTE(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *PermissionQueryBuilder) WhereCreatedAtIn(v []int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereCreatedAtNotIn(v []int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *PermissionQueryBuilder) WhereUpdatedAtEQ(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *PermissionQueryBuilder) WhereUpdatedAtNEQ(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *PermissionQueryBuilder) WhereUpdatedAtGT(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *PermissionQueryBuilder) WhereUpdatedAtGTE(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *PermissionQueryBuilder) WhereUpdatedAtLT(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *PermissionQueryBuilder) WhereUpdatedAtLTE(v int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *PermissionQueryBuilder) WhereUpdatedAtIn(v []int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *PermissionQueryBuilder) WhereUpdatedAtNotIn(v []int64) *PermissionQueryBuilder {
	b.query = PermissionQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *PermissionQueryBuilder) WhereGroup(sep string, fn func(*PermissionQueryBuilder) *PermissionQueryBuilder) *PermissionQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &PermissionQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *PermissionQueryBuilder) Where(query string, args ...interface{}) *PermissionQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *PermissionQueryBuilder) OrderBy(column string, desc ...bool) *PermissionQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(PermissionQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *PermissionQueryBuilder) Limit(n int) *PermissionQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *PermissionQueryBuilder) Offset(n int) *PermissionQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *PermissionQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *PermissionQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *PermissionQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *PermissionQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *PermissionQueryBuilder) All(ctx context.Context) ([]*Permission, error) {
	var entities []*Permission
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *PermissionQueryBuilder) AllWithCount(ctx context.Context) ([]*Permission, int, error) {
	var entities []*Permission
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *PermissionQueryBuilder) One(ctx context.Context) (*Permission, error) {
	entity := new(Permission)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *PermissionQueryBuilder) First(ctx context.Context) (*Permission, error) {
	entity := new(Permission)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// PermissionBuild creates a chainable query builder
func PermissionBuild(db bun.IDB) *PermissionQueryBuilder {
	return NewPermissionQuery(db)
}

// Relationship loading methods

// PermissionRelationChain provides a fluent API for building nested relationship chains
type PermissionRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewPermissionRelationChain creates a new relation chain builder
func NewPermissionRelationChain() *PermissionRelationChain {
	return &PermissionRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *PermissionRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *PermissionRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *PermissionRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *PermissionRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// PermissionRelationChainBuilder provides fluent API for building nested relations
type PermissionRelationChainBuilder struct {
	parent *PermissionQueryBuilder
	chain  *PermissionRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *PermissionRelationChainBuilder) Load() *PermissionQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *PermissionRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *PermissionRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *PermissionRelationChainBuilder) OrderBy(order string) *PermissionRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *PermissionRelationChainBuilder) Where(condition string, args ...interface{}) *PermissionRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
