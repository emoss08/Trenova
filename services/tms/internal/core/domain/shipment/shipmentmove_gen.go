// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// shipmentMoveFieldConfig provides field configuration for ShipmentMove
type shipmentMoveFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ShipmentMoveQuery provides type-safe query helpers and constants
var ShipmentMoveQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		ShipmentID     string
		Status         string
		Loaded         string
		Sequence       string
		Distance       string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ            func(q *bun.SelectQuery, v MoveStatus) *bun.SelectQuery
		StatusNEQ           func(q *bun.SelectQuery, v MoveStatus) *bun.SelectQuery
		StatusIn            func(q *bun.SelectQuery, v []MoveStatus) *bun.SelectQuery
		StatusNotIn         func(q *bun.SelectQuery, v []MoveStatus) *bun.SelectQuery
		LoadedEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		LoadedNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		LoadedIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		LoadedNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		SequenceEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		DistanceEQ          func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		DistanceNEQ         func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		DistanceIn          func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		DistanceNotIn       func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		DistanceIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		DistanceIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]shipmentMoveFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
		Shipment     string
		Assignment   string
		Stops        string
	}
}{
	// Table and alias constants
	Table:    "shipment_moves",
	Alias:    "sm",
	IDPrefix: "sm_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		ShipmentID     string
		Status         string
		Loaded         string
		Sequence       string
		Distance       string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		ShipmentID:     "shipment_id",
		Status:         "status",
		Loaded:         "loaded",
		Sequence:       "sequence",
		Distance:       "distance",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "sm." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "sm." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StatusEQ            func(q *bun.SelectQuery, v MoveStatus) *bun.SelectQuery
		StatusNEQ           func(q *bun.SelectQuery, v MoveStatus) *bun.SelectQuery
		StatusIn            func(q *bun.SelectQuery, v []MoveStatus) *bun.SelectQuery
		StatusNotIn         func(q *bun.SelectQuery, v []MoveStatus) *bun.SelectQuery
		LoadedEQ            func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		LoadedNEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		LoadedIn            func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		LoadedNotIn         func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		SequenceEQ          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceNEQ         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceIn          func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceNotIn       func(q *bun.SelectQuery, v []int) *bun.SelectQuery
		SequenceGT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceGTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceLT          func(q *bun.SelectQuery, v int) *bun.SelectQuery
		SequenceLTE         func(q *bun.SelectQuery, v int) *bun.SelectQuery
		DistanceEQ          func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		DistanceNEQ         func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		DistanceIn          func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		DistanceNotIn       func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		DistanceIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		DistanceIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant              func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.organization_id"), bun.In(v))
		},
		ShipmentIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.shipment_id"), v)
		},
		ShipmentIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.shipment_id"), v)
		},
		ShipmentIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.shipment_id"), bun.In(v))
		},
		ShipmentIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.shipment_id"), bun.In(v))
		},
		StatusEQ: func(q *bun.SelectQuery, v MoveStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v MoveStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []MoveStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []MoveStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.status"), bun.In(v))
		},
		LoadedEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.loaded"), v)
		},
		LoadedNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.loaded"), v)
		},
		LoadedIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.loaded"), bun.In(v))
		},
		LoadedNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.loaded"), bun.In(v))
		},
		SequenceEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.sequence"), v)
		},
		SequenceNEQ: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.sequence"), v)
		},
		SequenceIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.sequence"), bun.In(v))
		},
		SequenceNotIn: func(q *bun.SelectQuery, v []int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.sequence"), bun.In(v))
		},
		SequenceGT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sm.sequence"), v)
		},
		SequenceGTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sm.sequence"), v)
		},
		SequenceLT: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sm.sequence"), v)
		},
		SequenceLTE: func(q *bun.SelectQuery, v int) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sm.sequence"), v)
		},
		DistanceEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.distance"), v)
		},
		DistanceNEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.distance"), v)
		},
		DistanceIn: func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.distance"), bun.In(v))
		},
		DistanceNotIn: func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.distance"), bun.In(v))
		},
		DistanceIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("sm.distance"))
		},
		DistanceIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("sm.distance"))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sm.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sm.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sm.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sm.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sm.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sm.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sm.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sm.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sm.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sm.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sm.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sm.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sm.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sm.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sm.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sm.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("sm.organization_id"), orgID).
				Where("? = ?", bun.Ident("sm.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("sm.id"), id).
				Where("? = ?", bun.Ident("sm.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "sm." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"sm.status ASC",
				"sm.created_at DESC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "sm.status DESC"
			}
			return "sm.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "sm.created_at DESC"
			}
			return "sm.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "sm.updated_at DESC"
			}
			return "sm.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]shipmentMoveFieldConfig {
		return map[string]shipmentMoveFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sm.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sm.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "sm.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "sm.status",
				Sortable:   false,
				Filterable: true,
			},
			"loaded": {
				Name:       "loaded",
				Column:     "sm.loaded",
				Sortable:   false,
				Filterable: false,
			},
			"sequence": {
				Name:       "sequence",
				Column:     "sm.sequence",
				Sortable:   false,
				Filterable: false,
			},
			"distance": {
				Name:       "distance",
				Column:     "sm.distance",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sm.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]shipmentMoveFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sm.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sm.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "sm.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "sm.status",
				Sortable:   false,
				Filterable: true,
			},
			"loaded": {
				Name:       "loaded",
				Column:     "sm.loaded",
				Sortable:   false,
				Filterable: false,
			},
			"sequence": {
				Name:       "sequence",
				Column:     "sm.sequence",
				Sortable:   false,
				Filterable: false,
			},
			"distance": {
				Name:       "distance",
				Column:     "sm.distance",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sm.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]shipmentMoveFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sm.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sm.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sm.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "sm.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "sm.status",
				Sortable:   false,
				Filterable: true,
			},
			"loaded": {
				Name:       "loaded",
				Column:     "sm.loaded",
				Sortable:   false,
				Filterable: false,
			},
			"sequence": {
				Name:       "sequence",
				Column:     "sm.sequence",
				Sortable:   false,
				Filterable: false,
			},
			"distance": {
				Name:       "distance",
				Column:     "sm.distance",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sm.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sm.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sm.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
		Shipment     string
		Assignment   string
		Stops        string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		Shipment:     "Shipment",
		Assignment:   "Assignment",
		Stops:        "Stops",
	},
}

// ShipmentMoveQueryBuilder provides a fluent interface for building queries
type ShipmentMoveQueryBuilder struct {
	query *bun.SelectQuery
}

// NewShipmentMoveQuery creates a new query builder
func NewShipmentMoveQuery(db bun.IDB) *ShipmentMoveQueryBuilder {
	return &ShipmentMoveQueryBuilder{
		query: db.NewSelect().Model((*ShipmentMove)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ShipmentMoveFromQuery(q *bun.SelectQuery) *ShipmentMoveQueryBuilder {
	return &ShipmentMoveQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ShipmentMoveQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ShipmentMoveQueryBuilder) Model(model interface{}) *ShipmentMoveQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ShipmentMoveQueryBuilder) WhereIDEQ(v pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ShipmentMoveQueryBuilder) WhereIDNEQ(v pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereIDIn(v []pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereIDNotIn(v []pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ShipmentMoveQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ShipmentMoveQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ShipmentMoveQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ShipmentMoveQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereShipmentIDEQ adds a WHERE shipment_id = ? condition
func (b *ShipmentMoveQueryBuilder) WhereShipmentIDEQ(v pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.ShipmentIDEQ(b.query, v)
	return b
}

// WhereShipmentIDNEQ adds a WHERE shipment_id != ? condition
func (b *ShipmentMoveQueryBuilder) WhereShipmentIDNEQ(v pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.ShipmentIDNEQ(b.query, v)
	return b
}

// WhereShipmentIDIn adds a WHERE shipment_id IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereShipmentIDIn(v []pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.ShipmentIDIn(b.query, v)
	return b
}

// WhereShipmentIDNotIn adds a WHERE shipment_id NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereShipmentIDNotIn(v []pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.ShipmentIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *ShipmentMoveQueryBuilder) WhereStatusEQ(v MoveStatus) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *ShipmentMoveQueryBuilder) WhereStatusNEQ(v MoveStatus) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereStatusIn(v []MoveStatus) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereStatusNotIn(v []MoveStatus) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereLoadedEQ adds a WHERE loaded = ? condition
func (b *ShipmentMoveQueryBuilder) WhereLoadedEQ(v bool) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.LoadedEQ(b.query, v)
	return b
}

// WhereLoadedNEQ adds a WHERE loaded != ? condition
func (b *ShipmentMoveQueryBuilder) WhereLoadedNEQ(v bool) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.LoadedNEQ(b.query, v)
	return b
}

// WhereLoadedIn adds a WHERE loaded IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereLoadedIn(v []bool) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.LoadedIn(b.query, v)
	return b
}

// WhereLoadedNotIn adds a WHERE loaded NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereLoadedNotIn(v []bool) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.LoadedNotIn(b.query, v)
	return b
}

// WhereSequenceEQ adds a WHERE sequence = ? condition
func (b *ShipmentMoveQueryBuilder) WhereSequenceEQ(v int) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.SequenceEQ(b.query, v)
	return b
}

// WhereSequenceNEQ adds a WHERE sequence != ? condition
func (b *ShipmentMoveQueryBuilder) WhereSequenceNEQ(v int) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.SequenceNEQ(b.query, v)
	return b
}

// WhereSequenceGT adds a WHERE sequence > ? condition
func (b *ShipmentMoveQueryBuilder) WhereSequenceGT(v int) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.SequenceGT(b.query, v)
	return b
}

// WhereSequenceGTE adds a WHERE sequence >= ? condition
func (b *ShipmentMoveQueryBuilder) WhereSequenceGTE(v int) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.SequenceGTE(b.query, v)
	return b
}

// WhereSequenceLT adds a WHERE sequence < ? condition
func (b *ShipmentMoveQueryBuilder) WhereSequenceLT(v int) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.SequenceLT(b.query, v)
	return b
}

// WhereSequenceLTE adds a WHERE sequence <= ? condition
func (b *ShipmentMoveQueryBuilder) WhereSequenceLTE(v int) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.SequenceLTE(b.query, v)
	return b
}

// WhereSequenceIn adds a WHERE sequence IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereSequenceIn(v []int) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.SequenceIn(b.query, v)
	return b
}

// WhereSequenceNotIn adds a WHERE sequence NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereSequenceNotIn(v []int) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.SequenceNotIn(b.query, v)
	return b
}

// WhereDistanceEQ adds a WHERE distance = ? condition
func (b *ShipmentMoveQueryBuilder) WhereDistanceEQ(v *float64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.DistanceEQ(b.query, v)
	return b
}

// WhereDistanceNEQ adds a WHERE distance != ? condition
func (b *ShipmentMoveQueryBuilder) WhereDistanceNEQ(v *float64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.DistanceNEQ(b.query, v)
	return b
}

// WhereDistanceIn adds a WHERE distance IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereDistanceIn(v []*float64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.DistanceIn(b.query, v)
	return b
}

// WhereDistanceNotIn adds a WHERE distance NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereDistanceNotIn(v []*float64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.DistanceNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ShipmentMoveQueryBuilder) WhereVersionEQ(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ShipmentMoveQueryBuilder) WhereVersionNEQ(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ShipmentMoveQueryBuilder) WhereVersionGT(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ShipmentMoveQueryBuilder) WhereVersionGTE(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ShipmentMoveQueryBuilder) WhereVersionLT(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ShipmentMoveQueryBuilder) WhereVersionLTE(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereVersionIn(v []int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereVersionNotIn(v []int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ShipmentMoveQueryBuilder) WhereCreatedAtEQ(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ShipmentMoveQueryBuilder) WhereCreatedAtNEQ(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ShipmentMoveQueryBuilder) WhereCreatedAtGT(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ShipmentMoveQueryBuilder) WhereCreatedAtGTE(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ShipmentMoveQueryBuilder) WhereCreatedAtLT(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ShipmentMoveQueryBuilder) WhereCreatedAtLTE(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereCreatedAtIn(v []int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereCreatedAtNotIn(v []int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ShipmentMoveQueryBuilder) WhereUpdatedAtEQ(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ShipmentMoveQueryBuilder) WhereUpdatedAtNEQ(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ShipmentMoveQueryBuilder) WhereUpdatedAtGT(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ShipmentMoveQueryBuilder) WhereUpdatedAtGTE(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ShipmentMoveQueryBuilder) WhereUpdatedAtLT(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ShipmentMoveQueryBuilder) WhereUpdatedAtLTE(v int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereUpdatedAtIn(v []int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ShipmentMoveQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ShipmentMoveQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ShipmentMoveQueryBuilder {
	b.query = ShipmentMoveQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ShipmentMoveQueryBuilder) WhereGroup(sep string, fn func(*ShipmentMoveQueryBuilder) *ShipmentMoveQueryBuilder) *ShipmentMoveQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ShipmentMoveQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ShipmentMoveQueryBuilder) Where(query string, args ...interface{}) *ShipmentMoveQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ShipmentMoveQueryBuilder) OrderBy(column string, desc ...bool) *ShipmentMoveQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ShipmentMoveQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ShipmentMoveQueryBuilder) Limit(n int) *ShipmentMoveQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ShipmentMoveQueryBuilder) Offset(n int) *ShipmentMoveQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ShipmentMoveQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ShipmentMoveQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ShipmentMoveQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ShipmentMoveQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ShipmentMoveQueryBuilder) All(ctx context.Context) ([]*ShipmentMove, error) {
	var entities []*ShipmentMove
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ShipmentMoveQueryBuilder) AllWithCount(ctx context.Context) ([]*ShipmentMove, int, error) {
	var entities []*ShipmentMove
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ShipmentMoveQueryBuilder) One(ctx context.Context) (*ShipmentMove, error) {
	entity := new(ShipmentMove)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ShipmentMoveQueryBuilder) First(ctx context.Context) (*ShipmentMove, error) {
	entity := new(ShipmentMove)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ShipmentMoveBuild creates a chainable query builder
func ShipmentMoveBuild(db bun.IDB) *ShipmentMoveQueryBuilder {
	return NewShipmentMoveQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *ShipmentMoveQueryBuilder) LoadBusinessUnit() *ShipmentMoveQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *ShipmentMoveQueryBuilder) LoadOrganization() *ShipmentMoveQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadShipment loads the Shipment relationship
func (b *ShipmentMoveQueryBuilder) LoadShipment() *ShipmentMoveQueryBuilder {
	b.query = b.query.Relation("Shipment")
	return b
}

// LoadAssignment loads the Assignment relationship
func (b *ShipmentMoveQueryBuilder) LoadAssignment() *ShipmentMoveQueryBuilder {
	b.query = b.query.Relation("Assignment")
	return b
}

// LoadStops loads the Stops relationship
func (b *ShipmentMoveQueryBuilder) LoadStops(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentMoveQueryBuilder {
	if len(opts) > 0 {
		b.query = b.query.Relation("Stops", func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		})
	} else {
		b.query = b.query.Relation("Stops")
	}
	return b
}

// LoadAllRelations loads all relationships for ShipmentMove
func (b *ShipmentMoveQueryBuilder) LoadAllRelations() *ShipmentMoveQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadShipment()
	b.LoadAssignment()
	b.LoadStops()
	return b
}

// ShipmentMoveRelationChain provides a fluent API for building nested relationship chains
type ShipmentMoveRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewShipmentMoveRelationChain creates a new relation chain builder
func NewShipmentMoveRelationChain() *ShipmentMoveRelationChain {
	return &ShipmentMoveRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *ShipmentMoveRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentMoveRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *ShipmentMoveRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *ShipmentMoveRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *ShipmentMoveQueryBuilder) WithBusinessUnit() *ShipmentMoveRelationChainBuilder {
	chain := &ShipmentMoveRelationChainBuilder{
		parent: b,
		chain:  NewShipmentMoveRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *ShipmentMoveQueryBuilder) WithOrganization() *ShipmentMoveRelationChainBuilder {
	chain := &ShipmentMoveRelationChainBuilder{
		parent: b,
		chain:  NewShipmentMoveRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithShipment creates a relation chain starting with Shipment
func (b *ShipmentMoveQueryBuilder) WithShipment() *ShipmentMoveRelationChainBuilder {
	chain := &ShipmentMoveRelationChainBuilder{
		parent: b,
		chain:  NewShipmentMoveRelationChain(),
	}
	chain.chain.Add("Shipment")
	return chain
}

// WithAssignment creates a relation chain starting with Assignment
func (b *ShipmentMoveQueryBuilder) WithAssignment() *ShipmentMoveRelationChainBuilder {
	chain := &ShipmentMoveRelationChainBuilder{
		parent: b,
		chain:  NewShipmentMoveRelationChain(),
	}
	chain.chain.Add("Assignment")
	return chain
}

// WithStops creates a relation chain starting with Stops
func (b *ShipmentMoveQueryBuilder) WithStops(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentMoveRelationChainBuilder {
	chain := &ShipmentMoveRelationChainBuilder{
		parent: b,
		chain:  NewShipmentMoveRelationChain(),
	}
	chain.chain.Add("Stops", opts...)
	return chain
}

// ShipmentMoveRelationChainBuilder provides fluent API for building nested relations
type ShipmentMoveRelationChainBuilder struct {
	parent *ShipmentMoveQueryBuilder
	chain  *ShipmentMoveRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *ShipmentMoveRelationChainBuilder) Load() *ShipmentMoveQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *ShipmentMoveRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentMoveRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *ShipmentMoveRelationChainBuilder) OrderBy(order string) *ShipmentMoveRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *ShipmentMoveRelationChainBuilder) Where(condition string, args ...interface{}) *ShipmentMoveRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
