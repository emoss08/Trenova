// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// shipmentCommentFieldConfig provides field configuration for ShipmentComment
type shipmentCommentFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ShipmentCommentQuery provides type-safe query helpers and constants
var ShipmentCommentQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		ShipmentID     string
		UserID         string
		Comment        string
		IsHighPriority string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CommentEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsHighPriorityEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsHighPriorityNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsHighPriorityIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsHighPriorityNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]shipmentCommentFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		Shipment       string
		BusinessUnit   string
		Organization   string
		User           string
		MentionedUsers string
	}
}{
	// Table and alias constants
	Table:    "shipment_comments",
	Alias:    "sc",
	IDPrefix: "sc_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		ShipmentID     string
		UserID         string
		Comment        string
		IsHighPriority string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		ShipmentID:     "shipment_id",
		UserID:         "user_id",
		Comment:        "comment",
		IsHighPriority: "is_high_priority",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "sc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "sc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ               func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ       func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDIn        func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDNotIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		CommentEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CommentGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CommentHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		IsHighPriorityEQ    func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsHighPriorityNEQ   func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsHighPriorityIn    func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsHighPriorityNotIn func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn        func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn      func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE        func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant              func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.organization_id"), bun.In(v))
		},
		ShipmentIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.shipment_id"), v)
		},
		ShipmentIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.shipment_id"), v)
		},
		ShipmentIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.shipment_id"), bun.In(v))
		},
		ShipmentIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.shipment_id"), bun.In(v))
		},
		UserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.user_id"), v)
		},
		UserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.user_id"), v)
		},
		UserIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.user_id"), bun.In(v))
		},
		UserIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.user_id"), bun.In(v))
		},
		CommentEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.comment"), v)
		},
		CommentNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.comment"), v)
		},
		CommentIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.comment"), bun.In(v))
		},
		CommentNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.comment"), bun.In(v))
		},
		CommentGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.comment"), v)
		},
		CommentGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.comment"), v)
		},
		CommentLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.comment"), v)
		},
		CommentLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.comment"), v)
		},
		CommentContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sc.comment"), "%"+v+"%")
		},
		CommentHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sc.comment"), v+"%")
		},
		CommentHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("sc.comment"), "%"+v)
		},
		IsHighPriorityEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.is_high_priority"), v)
		},
		IsHighPriorityNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.is_high_priority"), v)
		},
		IsHighPriorityIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.is_high_priority"), bun.In(v))
		},
		IsHighPriorityNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.is_high_priority"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("sc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("sc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("sc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("sc.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("sc.organization_id"), orgID).
				Where("? = ?", bun.Ident("sc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("sc.id"), id).
				Where("? = ?", bun.Ident("sc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "sc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"sc.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "sc.created_at DESC"
			}
			return "sc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "sc.updated_at DESC"
			}
			return "sc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]shipmentCommentFieldConfig {
		return map[string]shipmentCommentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "sc.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "sc.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"comment": {
				Name:       "comment",
				Column:     "sc.comment",
				Sortable:   false,
				Filterable: false,
			},
			"is_high_priority": {
				Name:       "is_high_priority",
				Column:     "sc.is_high_priority",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]shipmentCommentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "sc.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "sc.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"comment": {
				Name:       "comment",
				Column:     "sc.comment",
				Sortable:   false,
				Filterable: false,
			},
			"is_high_priority": {
				Name:       "is_high_priority",
				Column:     "sc.is_high_priority",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]shipmentCommentFieldConfig{
			"id": {
				Name:       "id",
				Column:     "sc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "sc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "sc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "sc.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "sc.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"comment": {
				Name:       "comment",
				Column:     "sc.comment",
				Sortable:   false,
				Filterable: false,
			},
			"is_high_priority": {
				Name:       "is_high_priority",
				Column:     "sc.is_high_priority",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "sc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "sc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "sc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		Shipment       string
		BusinessUnit   string
		Organization   string
		User           string
		MentionedUsers string
	}{
		Shipment:       "Shipment",
		BusinessUnit:   "BusinessUnit",
		Organization:   "Organization",
		User:           "User",
		MentionedUsers: "MentionedUsers",
	},
}

// ShipmentCommentQueryBuilder provides a fluent interface for building queries
type ShipmentCommentQueryBuilder struct {
	query *bun.SelectQuery
}

// NewShipmentCommentQuery creates a new query builder
func NewShipmentCommentQuery(db bun.IDB) *ShipmentCommentQueryBuilder {
	return &ShipmentCommentQueryBuilder{
		query: db.NewSelect().Model((*ShipmentComment)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ShipmentCommentFromQuery(q *bun.SelectQuery) *ShipmentCommentQueryBuilder {
	return &ShipmentCommentQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ShipmentCommentQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ShipmentCommentQueryBuilder) Model(model interface{}) *ShipmentCommentQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ShipmentCommentQueryBuilder) WhereIDEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ShipmentCommentQueryBuilder) WhereIDNEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereIDIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereIDNotIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ShipmentCommentQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ShipmentCommentQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ShipmentCommentQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ShipmentCommentQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereShipmentIDEQ adds a WHERE shipment_id = ? condition
func (b *ShipmentCommentQueryBuilder) WhereShipmentIDEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.ShipmentIDEQ(b.query, v)
	return b
}

// WhereShipmentIDNEQ adds a WHERE shipment_id != ? condition
func (b *ShipmentCommentQueryBuilder) WhereShipmentIDNEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.ShipmentIDNEQ(b.query, v)
	return b
}

// WhereShipmentIDIn adds a WHERE shipment_id IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereShipmentIDIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.ShipmentIDIn(b.query, v)
	return b
}

// WhereShipmentIDNotIn adds a WHERE shipment_id NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereShipmentIDNotIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.ShipmentIDNotIn(b.query, v)
	return b
}

// WhereUserIDEQ adds a WHERE user_id = ? condition
func (b *ShipmentCommentQueryBuilder) WhereUserIDEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UserIDEQ(b.query, v)
	return b
}

// WhereUserIDNEQ adds a WHERE user_id != ? condition
func (b *ShipmentCommentQueryBuilder) WhereUserIDNEQ(v pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UserIDNEQ(b.query, v)
	return b
}

// WhereUserIDIn adds a WHERE user_id IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereUserIDIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UserIDIn(b.query, v)
	return b
}

// WhereUserIDNotIn adds a WHERE user_id NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereUserIDNotIn(v []pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UserIDNotIn(b.query, v)
	return b
}

// WhereCommentEQ adds a WHERE comment = ? condition
func (b *ShipmentCommentQueryBuilder) WhereCommentEQ(v string) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CommentEQ(b.query, v)
	return b
}

// WhereCommentNEQ adds a WHERE comment != ? condition
func (b *ShipmentCommentQueryBuilder) WhereCommentNEQ(v string) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CommentNEQ(b.query, v)
	return b
}

// WhereCommentIn adds a WHERE comment IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereCommentIn(v []string) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CommentIn(b.query, v)
	return b
}

// WhereCommentNotIn adds a WHERE comment NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereCommentNotIn(v []string) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CommentNotIn(b.query, v)
	return b
}

// WhereCommentContains adds a WHERE comment LIKE ? condition
func (b *ShipmentCommentQueryBuilder) WhereCommentContains(v string) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CommentContains(b.query, v)
	return b
}

// WhereCommentHasPrefix adds a WHERE comment LIKE ? condition
func (b *ShipmentCommentQueryBuilder) WhereCommentHasPrefix(v string) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CommentHasPrefix(b.query, v)
	return b
}

// WhereCommentHasSuffix adds a WHERE comment LIKE ? condition
func (b *ShipmentCommentQueryBuilder) WhereCommentHasSuffix(v string) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CommentHasSuffix(b.query, v)
	return b
}

// WhereIsHighPriorityEQ adds a WHERE is_high_priority = ? condition
func (b *ShipmentCommentQueryBuilder) WhereIsHighPriorityEQ(v bool) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.IsHighPriorityEQ(b.query, v)
	return b
}

// WhereIsHighPriorityNEQ adds a WHERE is_high_priority != ? condition
func (b *ShipmentCommentQueryBuilder) WhereIsHighPriorityNEQ(v bool) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.IsHighPriorityNEQ(b.query, v)
	return b
}

// WhereIsHighPriorityIn adds a WHERE is_high_priority IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereIsHighPriorityIn(v []bool) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.IsHighPriorityIn(b.query, v)
	return b
}

// WhereIsHighPriorityNotIn adds a WHERE is_high_priority NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereIsHighPriorityNotIn(v []bool) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.IsHighPriorityNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ShipmentCommentQueryBuilder) WhereVersionEQ(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ShipmentCommentQueryBuilder) WhereVersionNEQ(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ShipmentCommentQueryBuilder) WhereVersionGT(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ShipmentCommentQueryBuilder) WhereVersionGTE(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ShipmentCommentQueryBuilder) WhereVersionLT(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ShipmentCommentQueryBuilder) WhereVersionLTE(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereVersionIn(v []int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereVersionNotIn(v []int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ShipmentCommentQueryBuilder) WhereCreatedAtEQ(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ShipmentCommentQueryBuilder) WhereCreatedAtNEQ(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ShipmentCommentQueryBuilder) WhereCreatedAtGT(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ShipmentCommentQueryBuilder) WhereCreatedAtGTE(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ShipmentCommentQueryBuilder) WhereCreatedAtLT(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ShipmentCommentQueryBuilder) WhereCreatedAtLTE(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereCreatedAtIn(v []int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereCreatedAtNotIn(v []int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ShipmentCommentQueryBuilder) WhereUpdatedAtEQ(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ShipmentCommentQueryBuilder) WhereUpdatedAtNEQ(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ShipmentCommentQueryBuilder) WhereUpdatedAtGT(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ShipmentCommentQueryBuilder) WhereUpdatedAtGTE(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ShipmentCommentQueryBuilder) WhereUpdatedAtLT(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ShipmentCommentQueryBuilder) WhereUpdatedAtLTE(v int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereUpdatedAtIn(v []int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ShipmentCommentQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ShipmentCommentQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ShipmentCommentQueryBuilder {
	b.query = ShipmentCommentQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ShipmentCommentQueryBuilder) WhereGroup(sep string, fn func(*ShipmentCommentQueryBuilder) *ShipmentCommentQueryBuilder) *ShipmentCommentQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ShipmentCommentQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ShipmentCommentQueryBuilder) Where(query string, args ...interface{}) *ShipmentCommentQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ShipmentCommentQueryBuilder) OrderBy(column string, desc ...bool) *ShipmentCommentQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ShipmentCommentQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ShipmentCommentQueryBuilder) Limit(n int) *ShipmentCommentQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ShipmentCommentQueryBuilder) Offset(n int) *ShipmentCommentQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ShipmentCommentQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ShipmentCommentQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ShipmentCommentQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ShipmentCommentQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ShipmentCommentQueryBuilder) All(ctx context.Context) ([]*ShipmentComment, error) {
	var entities []*ShipmentComment
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ShipmentCommentQueryBuilder) AllWithCount(ctx context.Context) ([]*ShipmentComment, int, error) {
	var entities []*ShipmentComment
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ShipmentCommentQueryBuilder) One(ctx context.Context) (*ShipmentComment, error) {
	entity := new(ShipmentComment)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ShipmentCommentQueryBuilder) First(ctx context.Context) (*ShipmentComment, error) {
	entity := new(ShipmentComment)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ShipmentCommentBuild creates a chainable query builder
func ShipmentCommentBuild(db bun.IDB) *ShipmentCommentQueryBuilder {
	return NewShipmentCommentQuery(db)
}

// Relationship loading methods

// LoadShipment loads the Shipment relationship
func (b *ShipmentCommentQueryBuilder) LoadShipment() *ShipmentCommentQueryBuilder {
	b.query = b.query.Relation("Shipment")
	return b
}

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *ShipmentCommentQueryBuilder) LoadBusinessUnit() *ShipmentCommentQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *ShipmentCommentQueryBuilder) LoadOrganization() *ShipmentCommentQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadUser loads the User relationship
func (b *ShipmentCommentQueryBuilder) LoadUser() *ShipmentCommentQueryBuilder {
	b.query = b.query.Relation("User")
	return b
}

// LoadMentionedUsers loads the MentionedUsers relationship
func (b *ShipmentCommentQueryBuilder) LoadMentionedUsers(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentCommentQueryBuilder {
	if len(opts) > 0 {
		b.query = b.query.Relation("MentionedUsers", func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		})
	} else {
		b.query = b.query.Relation("MentionedUsers")
	}
	return b
}

// LoadAllRelations loads all relationships for ShipmentComment
func (b *ShipmentCommentQueryBuilder) LoadAllRelations() *ShipmentCommentQueryBuilder {
	b.LoadShipment()
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadUser()
	b.LoadMentionedUsers()
	return b
}

// ShipmentCommentRelationChain provides a fluent API for building nested relationship chains
type ShipmentCommentRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewShipmentCommentRelationChain creates a new relation chain builder
func NewShipmentCommentRelationChain() *ShipmentCommentRelationChain {
	return &ShipmentCommentRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *ShipmentCommentRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentCommentRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *ShipmentCommentRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *ShipmentCommentRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithShipment creates a relation chain starting with Shipment
func (b *ShipmentCommentQueryBuilder) WithShipment() *ShipmentCommentRelationChainBuilder {
	chain := &ShipmentCommentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentCommentRelationChain(),
	}
	chain.chain.Add("Shipment")
	return chain
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *ShipmentCommentQueryBuilder) WithBusinessUnit() *ShipmentCommentRelationChainBuilder {
	chain := &ShipmentCommentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentCommentRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *ShipmentCommentQueryBuilder) WithOrganization() *ShipmentCommentRelationChainBuilder {
	chain := &ShipmentCommentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentCommentRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithUser creates a relation chain starting with User
func (b *ShipmentCommentQueryBuilder) WithUser() *ShipmentCommentRelationChainBuilder {
	chain := &ShipmentCommentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentCommentRelationChain(),
	}
	chain.chain.Add("User")
	return chain
}

// WithMentionedUsers creates a relation chain starting with MentionedUsers
func (b *ShipmentCommentQueryBuilder) WithMentionedUsers(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentCommentRelationChainBuilder {
	chain := &ShipmentCommentRelationChainBuilder{
		parent: b,
		chain:  NewShipmentCommentRelationChain(),
	}
	chain.chain.Add("MentionedUsers", opts...)
	return chain
}

// ShipmentCommentRelationChainBuilder provides fluent API for building nested relations
type ShipmentCommentRelationChainBuilder struct {
	parent *ShipmentCommentQueryBuilder
	chain  *ShipmentCommentRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *ShipmentCommentRelationChainBuilder) Load() *ShipmentCommentQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *ShipmentCommentRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ShipmentCommentRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *ShipmentCommentRelationChainBuilder) OrderBy(order string) *ShipmentCommentRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *ShipmentCommentRelationChainBuilder) Where(condition string, args ...interface{}) *ShipmentCommentRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
