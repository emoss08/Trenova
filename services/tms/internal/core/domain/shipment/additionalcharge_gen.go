// Code generated by gen-trenova. DO NOT EDIT.

package shipment

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain/accessorialcharge"
	"github.com/emoss08/trenova/pkg/types/pulid"
	"github.com/shopspring/decimal"
	"github.com/uptrace/bun"
)

// additionalChargeFieldConfig provides field configuration for AdditionalCharge
type additionalChargeFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// AdditionalChargeQuery provides type-safe query helpers and constants
var AdditionalChargeQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                  string
		BusinessUnitID      string
		OrganizationID      string
		ShipmentID          string
		AccessorialChargeID string
		Method              string
		Amount              string
		Unit                string
		Version             string
		CreatedAt           string
		UpdatedAt           string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		AccessorialChargeIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		AccessorialChargeIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		AccessorialChargeIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		AccessorialChargeIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		MethodEQ                 func(q *bun.SelectQuery, v accessorialcharge.Method) *bun.SelectQuery
		MethodNEQ                func(q *bun.SelectQuery, v accessorialcharge.Method) *bun.SelectQuery
		MethodIn                 func(q *bun.SelectQuery, v []accessorialcharge.Method) *bun.SelectQuery
		MethodNotIn              func(q *bun.SelectQuery, v []accessorialcharge.Method) *bun.SelectQuery
		AmountEQ                 func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountNEQ                func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountIn                 func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		AmountNotIn              func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		AmountGT                 func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountGTE                func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountLT                 func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountLTE                func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		UnitEQ                   func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitNEQ                  func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitIn                   func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		UnitNotIn                func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		UnitGT                   func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitGTE                  func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitLT                   func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitLTE                  func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]additionalChargeFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit      string
		Organization      string
		Shipment          string
		AccessorialCharge string
	}
}{
	// Table and alias constants
	Table:    "additional_charges",
	Alias:    "ac",
	IDPrefix: "ac_",

	// Field names
	Field: struct {
		ID                  string
		BusinessUnitID      string
		OrganizationID      string
		ShipmentID          string
		AccessorialChargeID string
		Method              string
		Amount              string
		Unit                string
		Version             string
		CreatedAt           string
		UpdatedAt           string
	}{
		ID:                  "id",
		BusinessUnitID:      "business_unit_id",
		OrganizationID:      "organization_id",
		ShipmentID:          "shipment_id",
		AccessorialChargeID: "accessorial_charge_id",
		Method:              "method",
		Amount:              "amount",
		Unit:                "unit",
		Version:             "version",
		CreatedAt:           "created_at",
		UpdatedAt:           "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "ac." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "ac." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		ShipmentIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ShipmentIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		AccessorialChargeIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		AccessorialChargeIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		AccessorialChargeIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		AccessorialChargeIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		MethodEQ                 func(q *bun.SelectQuery, v accessorialcharge.Method) *bun.SelectQuery
		MethodNEQ                func(q *bun.SelectQuery, v accessorialcharge.Method) *bun.SelectQuery
		MethodIn                 func(q *bun.SelectQuery, v []accessorialcharge.Method) *bun.SelectQuery
		MethodNotIn              func(q *bun.SelectQuery, v []accessorialcharge.Method) *bun.SelectQuery
		AmountEQ                 func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountNEQ                func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountIn                 func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		AmountNotIn              func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery
		AmountGT                 func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountGTE                func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountLT                 func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		AmountLTE                func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery
		UnitEQ                   func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitNEQ                  func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitIn                   func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		UnitNotIn                func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		UnitGT                   func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitGTE                  func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitLT                   func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		UnitLTE                  func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		VersionEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn             func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn           func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE             func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                   func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.organization_id"), bun.In(v))
		},
		ShipmentIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.shipment_id"), v)
		},
		ShipmentIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.shipment_id"), v)
		},
		ShipmentIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.shipment_id"), bun.In(v))
		},
		ShipmentIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.shipment_id"), bun.In(v))
		},
		AccessorialChargeIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.accessorial_charge_id"), v)
		},
		AccessorialChargeIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.accessorial_charge_id"), v)
		},
		AccessorialChargeIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.accessorial_charge_id"), bun.In(v))
		},
		AccessorialChargeIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.accessorial_charge_id"), bun.In(v))
		},
		MethodEQ: func(q *bun.SelectQuery, v accessorialcharge.Method) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.method"), v)
		},
		MethodNEQ: func(q *bun.SelectQuery, v accessorialcharge.Method) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.method"), v)
		},
		MethodIn: func(q *bun.SelectQuery, v []accessorialcharge.Method) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.method"), bun.In(v))
		},
		MethodNotIn: func(q *bun.SelectQuery, v []accessorialcharge.Method) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.method"), bun.In(v))
		},
		AmountEQ: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.amount"), v)
		},
		AmountNEQ: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.amount"), v)
		},
		AmountIn: func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.amount"), bun.In(v))
		},
		AmountNotIn: func(q *bun.SelectQuery, v []decimal.Decimal) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.amount"), bun.In(v))
		},
		AmountGT: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ac.amount"), v)
		},
		AmountGTE: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ac.amount"), v)
		},
		AmountLT: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ac.amount"), v)
		},
		AmountLTE: func(q *bun.SelectQuery, v decimal.Decimal) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ac.amount"), v)
		},
		UnitEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.unit"), v)
		},
		UnitNEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.unit"), v)
		},
		UnitIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.unit"), bun.In(v))
		},
		UnitNotIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.unit"), bun.In(v))
		},
		UnitGT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ac.unit"), v)
		},
		UnitGTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ac.unit"), v)
		},
		UnitLT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ac.unit"), v)
		},
		UnitLTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ac.unit"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ac.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ac.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ac.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ac.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ac.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ac.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ac.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ac.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("ac.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("ac.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("ac.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("ac.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("ac.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("ac.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("ac.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("ac.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("ac.organization_id"), orgID).
				Where("? = ?", bun.Ident("ac.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("ac.id"), id).
				Where("? = ?", bun.Ident("ac.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "ac." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"ac.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "ac.created_at DESC"
			}
			return "ac.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "ac.updated_at DESC"
			}
			return "ac.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]additionalChargeFieldConfig {
		return map[string]additionalChargeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ac.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ac.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ac.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "ac.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"accessorial_charge_id": {
				Name:       "accessorial_charge_id",
				Column:     "ac.accessorial_charge_id",
				Sortable:   false,
				Filterable: true,
			},
			"method": {
				Name:       "method",
				Column:     "ac.method",
				Sortable:   false,
				Filterable: false,
			},
			"amount": {
				Name:       "amount",
				Column:     "ac.amount",
				Sortable:   false,
				Filterable: false,
			},
			"unit": {
				Name:       "unit",
				Column:     "ac.unit",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "ac.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ac.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ac.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]additionalChargeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ac.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ac.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ac.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "ac.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"accessorial_charge_id": {
				Name:       "accessorial_charge_id",
				Column:     "ac.accessorial_charge_id",
				Sortable:   false,
				Filterable: true,
			},
			"method": {
				Name:       "method",
				Column:     "ac.method",
				Sortable:   false,
				Filterable: false,
			},
			"amount": {
				Name:       "amount",
				Column:     "ac.amount",
				Sortable:   false,
				Filterable: false,
			},
			"unit": {
				Name:       "unit",
				Column:     "ac.unit",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "ac.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ac.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ac.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]additionalChargeFieldConfig{
			"id": {
				Name:       "id",
				Column:     "ac.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "ac.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "ac.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"shipment_id": {
				Name:       "shipment_id",
				Column:     "ac.shipment_id",
				Sortable:   false,
				Filterable: true,
			},
			"accessorial_charge_id": {
				Name:       "accessorial_charge_id",
				Column:     "ac.accessorial_charge_id",
				Sortable:   false,
				Filterable: true,
			},
			"method": {
				Name:       "method",
				Column:     "ac.method",
				Sortable:   false,
				Filterable: false,
			},
			"amount": {
				Name:       "amount",
				Column:     "ac.amount",
				Sortable:   false,
				Filterable: false,
			},
			"unit": {
				Name:       "unit",
				Column:     "ac.unit",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "ac.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "ac.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "ac.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit      string
		Organization      string
		Shipment          string
		AccessorialCharge string
	}{
		BusinessUnit:      "BusinessUnit",
		Organization:      "Organization",
		Shipment:          "Shipment",
		AccessorialCharge: "AccessorialCharge",
	},
}

// AdditionalChargeQueryBuilder provides a fluent interface for building queries
type AdditionalChargeQueryBuilder struct {
	query *bun.SelectQuery
}

// NewAdditionalChargeQuery creates a new query builder
func NewAdditionalChargeQuery(db bun.IDB) *AdditionalChargeQueryBuilder {
	return &AdditionalChargeQueryBuilder{
		query: db.NewSelect().Model((*AdditionalCharge)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func AdditionalChargeFromQuery(q *bun.SelectQuery) *AdditionalChargeQueryBuilder {
	return &AdditionalChargeQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *AdditionalChargeQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *AdditionalChargeQueryBuilder) Model(model interface{}) *AdditionalChargeQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *AdditionalChargeQueryBuilder) WhereIDEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *AdditionalChargeQueryBuilder) WhereIDNEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereIDIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereIDNotIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *AdditionalChargeQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *AdditionalChargeQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *AdditionalChargeQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *AdditionalChargeQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereShipmentIDEQ adds a WHERE shipment_id = ? condition
func (b *AdditionalChargeQueryBuilder) WhereShipmentIDEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.ShipmentIDEQ(b.query, v)
	return b
}

// WhereShipmentIDNEQ adds a WHERE shipment_id != ? condition
func (b *AdditionalChargeQueryBuilder) WhereShipmentIDNEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.ShipmentIDNEQ(b.query, v)
	return b
}

// WhereShipmentIDIn adds a WHERE shipment_id IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereShipmentIDIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.ShipmentIDIn(b.query, v)
	return b
}

// WhereShipmentIDNotIn adds a WHERE shipment_id NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereShipmentIDNotIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.ShipmentIDNotIn(b.query, v)
	return b
}

// WhereAccessorialChargeIDEQ adds a WHERE accessorial_charge_id = ? condition
func (b *AdditionalChargeQueryBuilder) WhereAccessorialChargeIDEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AccessorialChargeIDEQ(b.query, v)
	return b
}

// WhereAccessorialChargeIDNEQ adds a WHERE accessorial_charge_id != ? condition
func (b *AdditionalChargeQueryBuilder) WhereAccessorialChargeIDNEQ(v pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AccessorialChargeIDNEQ(b.query, v)
	return b
}

// WhereAccessorialChargeIDIn adds a WHERE accessorial_charge_id IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereAccessorialChargeIDIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AccessorialChargeIDIn(b.query, v)
	return b
}

// WhereAccessorialChargeIDNotIn adds a WHERE accessorial_charge_id NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereAccessorialChargeIDNotIn(v []pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AccessorialChargeIDNotIn(b.query, v)
	return b
}

// WhereMethodEQ adds a WHERE method = ? condition
func (b *AdditionalChargeQueryBuilder) WhereMethodEQ(v accessorialcharge.Method) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.MethodEQ(b.query, v)
	return b
}

// WhereMethodNEQ adds a WHERE method != ? condition
func (b *AdditionalChargeQueryBuilder) WhereMethodNEQ(v accessorialcharge.Method) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.MethodNEQ(b.query, v)
	return b
}

// WhereMethodIn adds a WHERE method IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereMethodIn(v []accessorialcharge.Method) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.MethodIn(b.query, v)
	return b
}

// WhereMethodNotIn adds a WHERE method NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereMethodNotIn(v []accessorialcharge.Method) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.MethodNotIn(b.query, v)
	return b
}

// WhereAmountEQ adds a WHERE amount = ? condition
func (b *AdditionalChargeQueryBuilder) WhereAmountEQ(v decimal.Decimal) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AmountEQ(b.query, v)
	return b
}

// WhereAmountNEQ adds a WHERE amount != ? condition
func (b *AdditionalChargeQueryBuilder) WhereAmountNEQ(v decimal.Decimal) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AmountNEQ(b.query, v)
	return b
}

// WhereAmountGT adds a WHERE amount > ? condition
func (b *AdditionalChargeQueryBuilder) WhereAmountGT(v decimal.Decimal) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AmountGT(b.query, v)
	return b
}

// WhereAmountGTE adds a WHERE amount >= ? condition
func (b *AdditionalChargeQueryBuilder) WhereAmountGTE(v decimal.Decimal) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AmountGTE(b.query, v)
	return b
}

// WhereAmountLT adds a WHERE amount < ? condition
func (b *AdditionalChargeQueryBuilder) WhereAmountLT(v decimal.Decimal) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AmountLT(b.query, v)
	return b
}

// WhereAmountLTE adds a WHERE amount <= ? condition
func (b *AdditionalChargeQueryBuilder) WhereAmountLTE(v decimal.Decimal) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AmountLTE(b.query, v)
	return b
}

// WhereAmountIn adds a WHERE amount IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereAmountIn(v []decimal.Decimal) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AmountIn(b.query, v)
	return b
}

// WhereAmountNotIn adds a WHERE amount NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereAmountNotIn(v []decimal.Decimal) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.AmountNotIn(b.query, v)
	return b
}

// WhereUnitEQ adds a WHERE unit = ? condition
func (b *AdditionalChargeQueryBuilder) WhereUnitEQ(v int16) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UnitEQ(b.query, v)
	return b
}

// WhereUnitNEQ adds a WHERE unit != ? condition
func (b *AdditionalChargeQueryBuilder) WhereUnitNEQ(v int16) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UnitNEQ(b.query, v)
	return b
}

// WhereUnitGT adds a WHERE unit > ? condition
func (b *AdditionalChargeQueryBuilder) WhereUnitGT(v int16) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UnitGT(b.query, v)
	return b
}

// WhereUnitGTE adds a WHERE unit >= ? condition
func (b *AdditionalChargeQueryBuilder) WhereUnitGTE(v int16) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UnitGTE(b.query, v)
	return b
}

// WhereUnitLT adds a WHERE unit < ? condition
func (b *AdditionalChargeQueryBuilder) WhereUnitLT(v int16) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UnitLT(b.query, v)
	return b
}

// WhereUnitLTE adds a WHERE unit <= ? condition
func (b *AdditionalChargeQueryBuilder) WhereUnitLTE(v int16) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UnitLTE(b.query, v)
	return b
}

// WhereUnitIn adds a WHERE unit IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereUnitIn(v []int16) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UnitIn(b.query, v)
	return b
}

// WhereUnitNotIn adds a WHERE unit NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereUnitNotIn(v []int16) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UnitNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *AdditionalChargeQueryBuilder) WhereVersionEQ(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *AdditionalChargeQueryBuilder) WhereVersionNEQ(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *AdditionalChargeQueryBuilder) WhereVersionGT(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *AdditionalChargeQueryBuilder) WhereVersionGTE(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *AdditionalChargeQueryBuilder) WhereVersionLT(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *AdditionalChargeQueryBuilder) WhereVersionLTE(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereVersionIn(v []int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereVersionNotIn(v []int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *AdditionalChargeQueryBuilder) WhereCreatedAtEQ(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *AdditionalChargeQueryBuilder) WhereCreatedAtNEQ(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *AdditionalChargeQueryBuilder) WhereCreatedAtGT(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *AdditionalChargeQueryBuilder) WhereCreatedAtGTE(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *AdditionalChargeQueryBuilder) WhereCreatedAtLT(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *AdditionalChargeQueryBuilder) WhereCreatedAtLTE(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereCreatedAtIn(v []int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereCreatedAtNotIn(v []int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *AdditionalChargeQueryBuilder) WhereUpdatedAtEQ(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *AdditionalChargeQueryBuilder) WhereUpdatedAtNEQ(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *AdditionalChargeQueryBuilder) WhereUpdatedAtGT(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *AdditionalChargeQueryBuilder) WhereUpdatedAtGTE(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *AdditionalChargeQueryBuilder) WhereUpdatedAtLT(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *AdditionalChargeQueryBuilder) WhereUpdatedAtLTE(v int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereUpdatedAtIn(v []int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *AdditionalChargeQueryBuilder) WhereUpdatedAtNotIn(v []int64) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *AdditionalChargeQueryBuilder) WhereTenant(orgID, buID pulid.ID) *AdditionalChargeQueryBuilder {
	b.query = AdditionalChargeQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *AdditionalChargeQueryBuilder) WhereGroup(sep string, fn func(*AdditionalChargeQueryBuilder) *AdditionalChargeQueryBuilder) *AdditionalChargeQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &AdditionalChargeQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *AdditionalChargeQueryBuilder) Where(query string, args ...interface{}) *AdditionalChargeQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *AdditionalChargeQueryBuilder) OrderBy(column string, desc ...bool) *AdditionalChargeQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(AdditionalChargeQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *AdditionalChargeQueryBuilder) Limit(n int) *AdditionalChargeQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *AdditionalChargeQueryBuilder) Offset(n int) *AdditionalChargeQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *AdditionalChargeQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *AdditionalChargeQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *AdditionalChargeQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *AdditionalChargeQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *AdditionalChargeQueryBuilder) All(ctx context.Context) ([]*AdditionalCharge, error) {
	var entities []*AdditionalCharge
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *AdditionalChargeQueryBuilder) AllWithCount(ctx context.Context) ([]*AdditionalCharge, int, error) {
	var entities []*AdditionalCharge
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *AdditionalChargeQueryBuilder) One(ctx context.Context) (*AdditionalCharge, error) {
	entity := new(AdditionalCharge)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *AdditionalChargeQueryBuilder) First(ctx context.Context) (*AdditionalCharge, error) {
	entity := new(AdditionalCharge)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// AdditionalChargeBuild creates a chainable query builder
func AdditionalChargeBuild(db bun.IDB) *AdditionalChargeQueryBuilder {
	return NewAdditionalChargeQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *AdditionalChargeQueryBuilder) LoadBusinessUnit() *AdditionalChargeQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *AdditionalChargeQueryBuilder) LoadOrganization() *AdditionalChargeQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadShipment loads the Shipment relationship
func (b *AdditionalChargeQueryBuilder) LoadShipment() *AdditionalChargeQueryBuilder {
	b.query = b.query.Relation("Shipment")
	return b
}

// LoadAccessorialCharge loads the AccessorialCharge relationship
func (b *AdditionalChargeQueryBuilder) LoadAccessorialCharge() *AdditionalChargeQueryBuilder {
	b.query = b.query.Relation("AccessorialCharge")
	return b
}

// LoadAllRelations loads all relationships for AdditionalCharge
func (b *AdditionalChargeQueryBuilder) LoadAllRelations() *AdditionalChargeQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadShipment()
	b.LoadAccessorialCharge()
	return b
}

// AdditionalChargeRelationChain provides a fluent API for building nested relationship chains
type AdditionalChargeRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewAdditionalChargeRelationChain creates a new relation chain builder
func NewAdditionalChargeRelationChain() *AdditionalChargeRelationChain {
	return &AdditionalChargeRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *AdditionalChargeRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *AdditionalChargeRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *AdditionalChargeRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *AdditionalChargeRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *AdditionalChargeQueryBuilder) WithBusinessUnit() *AdditionalChargeRelationChainBuilder {
	chain := &AdditionalChargeRelationChainBuilder{
		parent: b,
		chain:  NewAdditionalChargeRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *AdditionalChargeQueryBuilder) WithOrganization() *AdditionalChargeRelationChainBuilder {
	chain := &AdditionalChargeRelationChainBuilder{
		parent: b,
		chain:  NewAdditionalChargeRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithShipment creates a relation chain starting with Shipment
func (b *AdditionalChargeQueryBuilder) WithShipment() *AdditionalChargeRelationChainBuilder {
	chain := &AdditionalChargeRelationChainBuilder{
		parent: b,
		chain:  NewAdditionalChargeRelationChain(),
	}
	chain.chain.Add("Shipment")
	return chain
}

// WithAccessorialCharge creates a relation chain starting with AccessorialCharge
func (b *AdditionalChargeQueryBuilder) WithAccessorialCharge() *AdditionalChargeRelationChainBuilder {
	chain := &AdditionalChargeRelationChainBuilder{
		parent: b,
		chain:  NewAdditionalChargeRelationChain(),
	}
	chain.chain.Add("AccessorialCharge")
	return chain
}

// AdditionalChargeRelationChainBuilder provides fluent API for building nested relations
type AdditionalChargeRelationChainBuilder struct {
	parent *AdditionalChargeQueryBuilder
	chain  *AdditionalChargeRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *AdditionalChargeRelationChainBuilder) Load() *AdditionalChargeQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *AdditionalChargeRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *AdditionalChargeRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *AdditionalChargeRelationChainBuilder) OrderBy(order string) *AdditionalChargeRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *AdditionalChargeRelationChainBuilder) Where(condition string, args ...interface{}) *AdditionalChargeRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
