// Code generated by gen-trenova. DO NOT EDIT.

package hazmatsegregationrule

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/internal/core/domain/hazardousmaterial"
	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// hazmatSegregationRuleFieldConfig provides field configuration for HazmatSegregationRule
type hazmatSegregationRuleFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// HazmatSegregationRuleQuery provides type-safe query helpers and constants
var HazmatSegregationRuleQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID               string
		BusinessUnitID   string
		OrganizationID   string
		HazmatAID        string
		HazmatBID        string
		Status           string
		Name             string
		Description      string
		ClassA           string
		ClassB           string
		SegregationType  string
		MinimumDistance  string
		DistanceUnit     string
		HasExceptions    string
		ExceptionNotes   string
		ReferenceCode    string
		RegulationSource string
		Version          string
		CreatedAt        string
		UpdatedAt        string
		SearchVector     string
		Rank             string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		HazmatAIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazmatAIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazmatAIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		HazmatAIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		HazmatAIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		HazmatAIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		HazmatBIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazmatBIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazmatBIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		HazmatBIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		HazmatBIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		HazmatBIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                  func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                 func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                  func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn               func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		NameEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ClassAEQ                  func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassANEQ                 func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassAIn                  func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassANotIn               func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassBEQ                  func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassBNEQ                 func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassBIn                  func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassBNotIn               func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery
		SegregationTypeEQ         func(q *bun.SelectQuery, v SegregationType) *bun.SelectQuery
		SegregationTypeNEQ        func(q *bun.SelectQuery, v SegregationType) *bun.SelectQuery
		SegregationTypeIn         func(q *bun.SelectQuery, v []SegregationType) *bun.SelectQuery
		SegregationTypeNotIn      func(q *bun.SelectQuery, v []SegregationType) *bun.SelectQuery
		MinimumDistanceEQ         func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MinimumDistanceNEQ        func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MinimumDistanceIn         func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		MinimumDistanceNotIn      func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		MinimumDistanceIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		MinimumDistanceIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		DistanceUnitEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DistanceUnitNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DistanceUnitGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HasExceptionsEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasExceptionsNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasExceptionsIn           func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasExceptionsNotIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ExceptionNotesEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExceptionNotesNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExceptionNotesGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReferenceCodeNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReferenceCodeGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegulationSourceNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegulationSourceGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]hazmatSegregationRuleFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit    string
		Organization    string
		HazmatAMaterial string
		HazmatBMaterial string
	}
}{
	// Table and alias constants
	Table:    "hazmat_segregation_rules",
	Alias:    "hsr",
	IDPrefix: "hsr_",

	// Field names
	Field: struct {
		ID               string
		BusinessUnitID   string
		OrganizationID   string
		HazmatAID        string
		HazmatBID        string
		Status           string
		Name             string
		Description      string
		ClassA           string
		ClassB           string
		SegregationType  string
		MinimumDistance  string
		DistanceUnit     string
		HasExceptions    string
		ExceptionNotes   string
		ReferenceCode    string
		RegulationSource string
		Version          string
		CreatedAt        string
		UpdatedAt        string
		SearchVector     string
		Rank             string
	}{
		ID:               "id",
		BusinessUnitID:   "business_unit_id",
		OrganizationID:   "organization_id",
		HazmatAID:        "hazmat_a_id",
		HazmatBID:        "hazmat_b_id",
		Status:           "status",
		Name:             "name",
		Description:      "description",
		ClassA:           "class_a",
		ClassB:           "class_b",
		SegregationType:  "segregation_type",
		MinimumDistance:  "minimum_distance",
		DistanceUnit:     "distance_unit",
		HasExceptions:    "has_exceptions",
		ExceptionNotes:   "exception_notes",
		ReferenceCode:    "reference_code",
		RegulationSource: "regulation_source",
		Version:          "version",
		CreatedAt:        "created_at",
		UpdatedAt:        "updated_at",
		SearchVector:     "search_vector",
		Rank:             "rank",
	},

	// Column helpers
	Column: func(field string) string {
		return "hsr." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "hsr." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                      func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                   func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		HazmatAIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazmatAIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazmatAIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		HazmatAIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		HazmatAIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		HazmatAIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		HazmatBIDEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazmatBIDNEQ              func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		HazmatBIDIn               func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		HazmatBIDNotIn            func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		HazmatBIDIsNull           func(q *bun.SelectQuery) *bun.SelectQuery
		HazmatBIDIsNotNull        func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                  func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusNEQ                 func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery
		StatusIn                  func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		StatusNotIn               func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery
		NameEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ClassAEQ                  func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassANEQ                 func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassAIn                  func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassANotIn               func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassBEQ                  func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassBNEQ                 func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassBIn                  func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery
		ClassBNotIn               func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery
		SegregationTypeEQ         func(q *bun.SelectQuery, v SegregationType) *bun.SelectQuery
		SegregationTypeNEQ        func(q *bun.SelectQuery, v SegregationType) *bun.SelectQuery
		SegregationTypeIn         func(q *bun.SelectQuery, v []SegregationType) *bun.SelectQuery
		SegregationTypeNotIn      func(q *bun.SelectQuery, v []SegregationType) *bun.SelectQuery
		MinimumDistanceEQ         func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MinimumDistanceNEQ        func(q *bun.SelectQuery, v *float64) *bun.SelectQuery
		MinimumDistanceIn         func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		MinimumDistanceNotIn      func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery
		MinimumDistanceIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		MinimumDistanceIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		DistanceUnitEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DistanceUnitNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DistanceUnitGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DistanceUnitHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		HasExceptionsEQ           func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasExceptionsNEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		HasExceptionsIn           func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		HasExceptionsNotIn        func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		ExceptionNotesEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesNEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesIn          func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExceptionNotesNotIn       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ExceptionNotesGT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesGTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesLT          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesLTE         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesContains    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesHasPrefix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ExceptionNotesHasSuffix   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReferenceCodeNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ReferenceCodeGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ReferenceCodeHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegulationSourceNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegulationSourceGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegulationSourceHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VersionEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn              func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT               func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE              func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		SearchVectorEQ            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		Tenant                    func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.organization_id"), bun.In(v))
		},
		HazmatAIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.hazmat_a_id"), v)
		},
		HazmatAIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.hazmat_a_id"), v)
		},
		HazmatAIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.hazmat_a_id"), bun.In(v))
		},
		HazmatAIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.hazmat_a_id"), bun.In(v))
		},
		HazmatAIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("hsr.hazmat_a_id"))
		},
		HazmatAIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("hsr.hazmat_a_id"))
		},
		HazmatBIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.hazmat_b_id"), v)
		},
		HazmatBIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.hazmat_b_id"), v)
		},
		HazmatBIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.hazmat_b_id"), bun.In(v))
		},
		HazmatBIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.hazmat_b_id"), bun.In(v))
		},
		HazmatBIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("hsr.hazmat_b_id"))
		},
		HazmatBIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("hsr.hazmat_b_id"))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.Status) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.Status) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.status"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.description"), "%"+v)
		},
		ClassAEQ: func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.class_a"), v)
		},
		ClassANEQ: func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.class_a"), v)
		},
		ClassAIn: func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.class_a"), bun.In(v))
		},
		ClassANotIn: func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.class_a"), bun.In(v))
		},
		ClassBEQ: func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.class_b"), v)
		},
		ClassBNEQ: func(q *bun.SelectQuery, v hazardousmaterial.HazardousClass) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.class_b"), v)
		},
		ClassBIn: func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.class_b"), bun.In(v))
		},
		ClassBNotIn: func(q *bun.SelectQuery, v []hazardousmaterial.HazardousClass) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.class_b"), bun.In(v))
		},
		SegregationTypeEQ: func(q *bun.SelectQuery, v SegregationType) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.segregation_type"), v)
		},
		SegregationTypeNEQ: func(q *bun.SelectQuery, v SegregationType) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.segregation_type"), v)
		},
		SegregationTypeIn: func(q *bun.SelectQuery, v []SegregationType) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.segregation_type"), bun.In(v))
		},
		SegregationTypeNotIn: func(q *bun.SelectQuery, v []SegregationType) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.segregation_type"), bun.In(v))
		},
		MinimumDistanceEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.minimum_distance"), v)
		},
		MinimumDistanceNEQ: func(q *bun.SelectQuery, v *float64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.minimum_distance"), v)
		},
		MinimumDistanceIn: func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.minimum_distance"), bun.In(v))
		},
		MinimumDistanceNotIn: func(q *bun.SelectQuery, v []*float64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.minimum_distance"), bun.In(v))
		},
		MinimumDistanceIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("hsr.minimum_distance"))
		},
		MinimumDistanceIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("hsr.minimum_distance"))
		},
		DistanceUnitEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.distance_unit"), v)
		},
		DistanceUnitNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.distance_unit"), v)
		},
		DistanceUnitIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.distance_unit"), bun.In(v))
		},
		DistanceUnitNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.distance_unit"), bun.In(v))
		},
		DistanceUnitGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.distance_unit"), v)
		},
		DistanceUnitGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.distance_unit"), v)
		},
		DistanceUnitLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.distance_unit"), v)
		},
		DistanceUnitLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.distance_unit"), v)
		},
		DistanceUnitContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.distance_unit"), "%"+v+"%")
		},
		DistanceUnitHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.distance_unit"), v+"%")
		},
		DistanceUnitHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.distance_unit"), "%"+v)
		},
		HasExceptionsEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.has_exceptions"), v)
		},
		HasExceptionsNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.has_exceptions"), v)
		},
		HasExceptionsIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.has_exceptions"), bun.In(v))
		},
		HasExceptionsNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.has_exceptions"), bun.In(v))
		},
		ExceptionNotesEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.exception_notes"), v)
		},
		ExceptionNotesNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.exception_notes"), v)
		},
		ExceptionNotesIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.exception_notes"), bun.In(v))
		},
		ExceptionNotesNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.exception_notes"), bun.In(v))
		},
		ExceptionNotesGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.exception_notes"), v)
		},
		ExceptionNotesGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.exception_notes"), v)
		},
		ExceptionNotesLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.exception_notes"), v)
		},
		ExceptionNotesLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.exception_notes"), v)
		},
		ExceptionNotesContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.exception_notes"), "%"+v+"%")
		},
		ExceptionNotesHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.exception_notes"), v+"%")
		},
		ExceptionNotesHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.exception_notes"), "%"+v)
		},
		ReferenceCodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.reference_code"), v)
		},
		ReferenceCodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.reference_code"), v)
		},
		ReferenceCodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.reference_code"), bun.In(v))
		},
		ReferenceCodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.reference_code"), bun.In(v))
		},
		ReferenceCodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.reference_code"), v)
		},
		ReferenceCodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.reference_code"), v)
		},
		ReferenceCodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.reference_code"), v)
		},
		ReferenceCodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.reference_code"), v)
		},
		ReferenceCodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.reference_code"), "%"+v+"%")
		},
		ReferenceCodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.reference_code"), v+"%")
		},
		ReferenceCodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.reference_code"), "%"+v)
		},
		RegulationSourceEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.regulation_source"), v)
		},
		RegulationSourceNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.regulation_source"), v)
		},
		RegulationSourceIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.regulation_source"), bun.In(v))
		},
		RegulationSourceNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.regulation_source"), bun.In(v))
		},
		RegulationSourceGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.regulation_source"), v)
		},
		RegulationSourceGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.regulation_source"), v)
		},
		RegulationSourceLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.regulation_source"), v)
		},
		RegulationSourceLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.regulation_source"), v)
		},
		RegulationSourceContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.regulation_source"), "%"+v+"%")
		},
		RegulationSourceHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.regulation_source"), v+"%")
		},
		RegulationSourceHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.regulation_source"), "%"+v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.updated_at"), v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("hsr.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("hsr.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("hsr.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("hsr.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("hsr.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("hsr.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("hsr.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("hsr.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("hsr.rank"), "%"+v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("hsr.organization_id"), orgID).
				Where("? = ?", bun.Ident("hsr.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("hsr.id"), id).
				Where("? = ?", bun.Ident("hsr.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "hsr." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"hsr.status ASC",
				"hsr.name ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "hsr.status DESC"
			}
			return "hsr.status ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "hsr.created_at DESC"
			}
			return "hsr.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "hsr.updated_at DESC"
			}
			return "hsr.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]hazmatSegregationRuleFieldConfig {
		return map[string]hazmatSegregationRuleFieldConfig{
			"id": {
				Name:       "id",
				Column:     "hsr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "hsr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "hsr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"hazmat_a_id": {
				Name:       "hazmat_a_id",
				Column:     "hsr.hazmat_a_id",
				Sortable:   false,
				Filterable: true,
			},
			"hazmat_b_id": {
				Name:       "hazmat_b_id",
				Column:     "hsr.hazmat_b_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "hsr.status",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "hsr.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "hsr.description",
				Sortable:   false,
				Filterable: false,
			},
			"class_a": {
				Name:       "class_a",
				Column:     "hsr.class_a",
				Sortable:   false,
				Filterable: false,
			},
			"class_b": {
				Name:       "class_b",
				Column:     "hsr.class_b",
				Sortable:   false,
				Filterable: false,
			},
			"segregation_type": {
				Name:       "segregation_type",
				Column:     "hsr.segregation_type",
				Sortable:   false,
				Filterable: false,
			},
			"minimum_distance": {
				Name:       "minimum_distance",
				Column:     "hsr.minimum_distance",
				Sortable:   false,
				Filterable: false,
			},
			"distance_unit": {
				Name:       "distance_unit",
				Column:     "hsr.distance_unit",
				Sortable:   false,
				Filterable: true,
			},
			"has_exceptions": {
				Name:       "has_exceptions",
				Column:     "hsr.has_exceptions",
				Sortable:   false,
				Filterable: false,
			},
			"exception_notes": {
				Name:       "exception_notes",
				Column:     "hsr.exception_notes",
				Sortable:   false,
				Filterable: false,
			},
			"reference_code": {
				Name:       "reference_code",
				Column:     "hsr.reference_code",
				Sortable:   false,
				Filterable: true,
			},
			"regulation_source": {
				Name:       "regulation_source",
				Column:     "hsr.regulation_source",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "hsr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "hsr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "hsr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "hsr.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "hsr.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]hazmatSegregationRuleFieldConfig{
			"id": {
				Name:       "id",
				Column:     "hsr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "hsr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "hsr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"hazmat_a_id": {
				Name:       "hazmat_a_id",
				Column:     "hsr.hazmat_a_id",
				Sortable:   false,
				Filterable: true,
			},
			"hazmat_b_id": {
				Name:       "hazmat_b_id",
				Column:     "hsr.hazmat_b_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "hsr.status",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "hsr.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "hsr.description",
				Sortable:   false,
				Filterable: false,
			},
			"class_a": {
				Name:       "class_a",
				Column:     "hsr.class_a",
				Sortable:   false,
				Filterable: false,
			},
			"class_b": {
				Name:       "class_b",
				Column:     "hsr.class_b",
				Sortable:   false,
				Filterable: false,
			},
			"segregation_type": {
				Name:       "segregation_type",
				Column:     "hsr.segregation_type",
				Sortable:   false,
				Filterable: false,
			},
			"minimum_distance": {
				Name:       "minimum_distance",
				Column:     "hsr.minimum_distance",
				Sortable:   false,
				Filterable: false,
			},
			"distance_unit": {
				Name:       "distance_unit",
				Column:     "hsr.distance_unit",
				Sortable:   false,
				Filterable: true,
			},
			"has_exceptions": {
				Name:       "has_exceptions",
				Column:     "hsr.has_exceptions",
				Sortable:   false,
				Filterable: false,
			},
			"exception_notes": {
				Name:       "exception_notes",
				Column:     "hsr.exception_notes",
				Sortable:   false,
				Filterable: false,
			},
			"reference_code": {
				Name:       "reference_code",
				Column:     "hsr.reference_code",
				Sortable:   false,
				Filterable: true,
			},
			"regulation_source": {
				Name:       "regulation_source",
				Column:     "hsr.regulation_source",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "hsr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "hsr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "hsr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "hsr.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "hsr.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]hazmatSegregationRuleFieldConfig{
			"id": {
				Name:       "id",
				Column:     "hsr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "hsr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "hsr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"hazmat_a_id": {
				Name:       "hazmat_a_id",
				Column:     "hsr.hazmat_a_id",
				Sortable:   false,
				Filterable: true,
			},
			"hazmat_b_id": {
				Name:       "hazmat_b_id",
				Column:     "hsr.hazmat_b_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "hsr.status",
				Sortable:   true,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "hsr.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "hsr.description",
				Sortable:   false,
				Filterable: false,
			},
			"class_a": {
				Name:       "class_a",
				Column:     "hsr.class_a",
				Sortable:   false,
				Filterable: false,
			},
			"class_b": {
				Name:       "class_b",
				Column:     "hsr.class_b",
				Sortable:   false,
				Filterable: false,
			},
			"segregation_type": {
				Name:       "segregation_type",
				Column:     "hsr.segregation_type",
				Sortable:   false,
				Filterable: false,
			},
			"minimum_distance": {
				Name:       "minimum_distance",
				Column:     "hsr.minimum_distance",
				Sortable:   false,
				Filterable: false,
			},
			"distance_unit": {
				Name:       "distance_unit",
				Column:     "hsr.distance_unit",
				Sortable:   false,
				Filterable: true,
			},
			"has_exceptions": {
				Name:       "has_exceptions",
				Column:     "hsr.has_exceptions",
				Sortable:   false,
				Filterable: false,
			},
			"exception_notes": {
				Name:       "exception_notes",
				Column:     "hsr.exception_notes",
				Sortable:   false,
				Filterable: false,
			},
			"reference_code": {
				Name:       "reference_code",
				Column:     "hsr.reference_code",
				Sortable:   false,
				Filterable: true,
			},
			"regulation_source": {
				Name:       "regulation_source",
				Column:     "hsr.regulation_source",
				Sortable:   false,
				Filterable: true,
			},
			"version": {
				Name:       "version",
				Column:     "hsr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "hsr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "hsr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "hsr.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "hsr.rank",
				Sortable:   false,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit    string
		Organization    string
		HazmatAMaterial string
		HazmatBMaterial string
	}{
		BusinessUnit:    "BusinessUnit",
		Organization:    "Organization",
		HazmatAMaterial: "HazmatAMaterial",
		HazmatBMaterial: "HazmatBMaterial",
	},
}

// HazmatSegregationRuleQueryBuilder provides a fluent interface for building queries
type HazmatSegregationRuleQueryBuilder struct {
	query *bun.SelectQuery
}

// NewHazmatSegregationRuleQuery creates a new query builder
func NewHazmatSegregationRuleQuery(db bun.IDB) *HazmatSegregationRuleQueryBuilder {
	return &HazmatSegregationRuleQueryBuilder{
		query: db.NewSelect().Model((*HazmatSegregationRule)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func HazmatSegregationRuleFromQuery(q *bun.SelectQuery) *HazmatSegregationRuleQueryBuilder {
	return &HazmatSegregationRuleQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *HazmatSegregationRuleQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *HazmatSegregationRuleQueryBuilder) Model(model interface{}) *HazmatSegregationRuleQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereIDEQ(v pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereIDNEQ(v pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereIDIn(v []pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereIDNotIn(v []pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereHazmatAIDEQ adds a WHERE hazmat_a_id = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHazmatAIDEQ(v *pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HazmatAIDEQ(b.query, v)
	return b
}

// WhereHazmatAIDNEQ adds a WHERE hazmat_a_id != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHazmatAIDNEQ(v *pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HazmatAIDNEQ(b.query, v)
	return b
}

// WhereHazmatAIDIn adds a WHERE hazmat_a_id IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHazmatAIDIn(v []*pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HazmatAIDIn(b.query, v)
	return b
}

// WhereHazmatAIDNotIn adds a WHERE hazmat_a_id NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHazmatAIDNotIn(v []*pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HazmatAIDNotIn(b.query, v)
	return b
}

// WhereHazmatBIDEQ adds a WHERE hazmat_b_id = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHazmatBIDEQ(v *pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HazmatBIDEQ(b.query, v)
	return b
}

// WhereHazmatBIDNEQ adds a WHERE hazmat_b_id != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHazmatBIDNEQ(v *pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HazmatBIDNEQ(b.query, v)
	return b
}

// WhereHazmatBIDIn adds a WHERE hazmat_b_id IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHazmatBIDIn(v []*pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HazmatBIDIn(b.query, v)
	return b
}

// WhereHazmatBIDNotIn adds a WHERE hazmat_b_id NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHazmatBIDNotIn(v []*pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HazmatBIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereStatusEQ(v domain.Status) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereStatusNEQ(v domain.Status) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereStatusIn(v []domain.Status) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereStatusNotIn(v []domain.Status) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereNameEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereNameNEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereNameIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereNameNotIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereNameContains(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereNameHasPrefix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereNameHasSuffix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDescriptionEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDescriptionNEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDescriptionIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDescriptionNotIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDescriptionContains(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDescriptionHasPrefix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDescriptionHasSuffix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereClassAEQ adds a WHERE class_a = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereClassAEQ(v hazardousmaterial.HazardousClass) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ClassAEQ(b.query, v)
	return b
}

// WhereClassANEQ adds a WHERE class_a != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereClassANEQ(v hazardousmaterial.HazardousClass) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ClassANEQ(b.query, v)
	return b
}

// WhereClassAIn adds a WHERE class_a IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereClassAIn(v []hazardousmaterial.HazardousClass) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ClassAIn(b.query, v)
	return b
}

// WhereClassANotIn adds a WHERE class_a NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereClassANotIn(v []hazardousmaterial.HazardousClass) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ClassANotIn(b.query, v)
	return b
}

// WhereClassBEQ adds a WHERE class_b = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereClassBEQ(v hazardousmaterial.HazardousClass) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ClassBEQ(b.query, v)
	return b
}

// WhereClassBNEQ adds a WHERE class_b != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereClassBNEQ(v hazardousmaterial.HazardousClass) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ClassBNEQ(b.query, v)
	return b
}

// WhereClassBIn adds a WHERE class_b IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereClassBIn(v []hazardousmaterial.HazardousClass) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ClassBIn(b.query, v)
	return b
}

// WhereClassBNotIn adds a WHERE class_b NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereClassBNotIn(v []hazardousmaterial.HazardousClass) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ClassBNotIn(b.query, v)
	return b
}

// WhereSegregationTypeEQ adds a WHERE segregation_type = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSegregationTypeEQ(v SegregationType) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SegregationTypeEQ(b.query, v)
	return b
}

// WhereSegregationTypeNEQ adds a WHERE segregation_type != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSegregationTypeNEQ(v SegregationType) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SegregationTypeNEQ(b.query, v)
	return b
}

// WhereSegregationTypeIn adds a WHERE segregation_type IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSegregationTypeIn(v []SegregationType) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SegregationTypeIn(b.query, v)
	return b
}

// WhereSegregationTypeNotIn adds a WHERE segregation_type NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSegregationTypeNotIn(v []SegregationType) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SegregationTypeNotIn(b.query, v)
	return b
}

// WhereMinimumDistanceEQ adds a WHERE minimum_distance = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereMinimumDistanceEQ(v *float64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.MinimumDistanceEQ(b.query, v)
	return b
}

// WhereMinimumDistanceNEQ adds a WHERE minimum_distance != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereMinimumDistanceNEQ(v *float64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.MinimumDistanceNEQ(b.query, v)
	return b
}

// WhereMinimumDistanceIn adds a WHERE minimum_distance IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereMinimumDistanceIn(v []*float64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.MinimumDistanceIn(b.query, v)
	return b
}

// WhereMinimumDistanceNotIn adds a WHERE minimum_distance NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereMinimumDistanceNotIn(v []*float64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.MinimumDistanceNotIn(b.query, v)
	return b
}

// WhereDistanceUnitEQ adds a WHERE distance_unit = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDistanceUnitEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DistanceUnitEQ(b.query, v)
	return b
}

// WhereDistanceUnitNEQ adds a WHERE distance_unit != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDistanceUnitNEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DistanceUnitNEQ(b.query, v)
	return b
}

// WhereDistanceUnitIn adds a WHERE distance_unit IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDistanceUnitIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DistanceUnitIn(b.query, v)
	return b
}

// WhereDistanceUnitNotIn adds a WHERE distance_unit NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDistanceUnitNotIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DistanceUnitNotIn(b.query, v)
	return b
}

// WhereDistanceUnitContains adds a WHERE distance_unit LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDistanceUnitContains(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DistanceUnitContains(b.query, v)
	return b
}

// WhereDistanceUnitHasPrefix adds a WHERE distance_unit LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDistanceUnitHasPrefix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DistanceUnitHasPrefix(b.query, v)
	return b
}

// WhereDistanceUnitHasSuffix adds a WHERE distance_unit LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereDistanceUnitHasSuffix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.DistanceUnitHasSuffix(b.query, v)
	return b
}

// WhereHasExceptionsEQ adds a WHERE has_exceptions = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHasExceptionsEQ(v bool) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HasExceptionsEQ(b.query, v)
	return b
}

// WhereHasExceptionsNEQ adds a WHERE has_exceptions != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHasExceptionsNEQ(v bool) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HasExceptionsNEQ(b.query, v)
	return b
}

// WhereHasExceptionsIn adds a WHERE has_exceptions IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHasExceptionsIn(v []bool) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HasExceptionsIn(b.query, v)
	return b
}

// WhereHasExceptionsNotIn adds a WHERE has_exceptions NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereHasExceptionsNotIn(v []bool) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.HasExceptionsNotIn(b.query, v)
	return b
}

// WhereExceptionNotesEQ adds a WHERE exception_notes = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereExceptionNotesEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ExceptionNotesEQ(b.query, v)
	return b
}

// WhereExceptionNotesNEQ adds a WHERE exception_notes != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereExceptionNotesNEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ExceptionNotesNEQ(b.query, v)
	return b
}

// WhereExceptionNotesIn adds a WHERE exception_notes IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereExceptionNotesIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ExceptionNotesIn(b.query, v)
	return b
}

// WhereExceptionNotesNotIn adds a WHERE exception_notes NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereExceptionNotesNotIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ExceptionNotesNotIn(b.query, v)
	return b
}

// WhereExceptionNotesContains adds a WHERE exception_notes LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereExceptionNotesContains(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ExceptionNotesContains(b.query, v)
	return b
}

// WhereExceptionNotesHasPrefix adds a WHERE exception_notes LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereExceptionNotesHasPrefix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ExceptionNotesHasPrefix(b.query, v)
	return b
}

// WhereExceptionNotesHasSuffix adds a WHERE exception_notes LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereExceptionNotesHasSuffix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ExceptionNotesHasSuffix(b.query, v)
	return b
}

// WhereReferenceCodeEQ adds a WHERE reference_code = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereReferenceCodeEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ReferenceCodeEQ(b.query, v)
	return b
}

// WhereReferenceCodeNEQ adds a WHERE reference_code != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereReferenceCodeNEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ReferenceCodeNEQ(b.query, v)
	return b
}

// WhereReferenceCodeIn adds a WHERE reference_code IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereReferenceCodeIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ReferenceCodeIn(b.query, v)
	return b
}

// WhereReferenceCodeNotIn adds a WHERE reference_code NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereReferenceCodeNotIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ReferenceCodeNotIn(b.query, v)
	return b
}

// WhereReferenceCodeContains adds a WHERE reference_code LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereReferenceCodeContains(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ReferenceCodeContains(b.query, v)
	return b
}

// WhereReferenceCodeHasPrefix adds a WHERE reference_code LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereReferenceCodeHasPrefix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ReferenceCodeHasPrefix(b.query, v)
	return b
}

// WhereReferenceCodeHasSuffix adds a WHERE reference_code LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereReferenceCodeHasSuffix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.ReferenceCodeHasSuffix(b.query, v)
	return b
}

// WhereRegulationSourceEQ adds a WHERE regulation_source = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRegulationSourceEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RegulationSourceEQ(b.query, v)
	return b
}

// WhereRegulationSourceNEQ adds a WHERE regulation_source != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRegulationSourceNEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RegulationSourceNEQ(b.query, v)
	return b
}

// WhereRegulationSourceIn adds a WHERE regulation_source IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRegulationSourceIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RegulationSourceIn(b.query, v)
	return b
}

// WhereRegulationSourceNotIn adds a WHERE regulation_source NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRegulationSourceNotIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RegulationSourceNotIn(b.query, v)
	return b
}

// WhereRegulationSourceContains adds a WHERE regulation_source LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRegulationSourceContains(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RegulationSourceContains(b.query, v)
	return b
}

// WhereRegulationSourceHasPrefix adds a WHERE regulation_source LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRegulationSourceHasPrefix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RegulationSourceHasPrefix(b.query, v)
	return b
}

// WhereRegulationSourceHasSuffix adds a WHERE regulation_source LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRegulationSourceHasSuffix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RegulationSourceHasSuffix(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereVersionEQ(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereVersionNEQ(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereVersionGT(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereVersionGTE(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereVersionLT(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereVersionLTE(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereVersionIn(v []int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereVersionNotIn(v []int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereCreatedAtEQ(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereCreatedAtNEQ(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereCreatedAtGT(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereCreatedAtGTE(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereCreatedAtLT(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereCreatedAtLTE(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereCreatedAtIn(v []int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereCreatedAtNotIn(v []int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereUpdatedAtEQ(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereUpdatedAtNEQ(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereUpdatedAtGT(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereUpdatedAtGTE(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereUpdatedAtLT(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereUpdatedAtLTE(v int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereUpdatedAtIn(v []int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereUpdatedAtNotIn(v []int64) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSearchVectorEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSearchVectorNEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSearchVectorIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSearchVectorNotIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSearchVectorContains(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSearchVectorHasPrefix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereSearchVectorHasSuffix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRankEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRankNEQ(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRankIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRankNotIn(v []string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRankContains(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRankHasPrefix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *HazmatSegregationRuleQueryBuilder) WhereRankHasSuffix(v string) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *HazmatSegregationRuleQueryBuilder) WhereTenant(orgID, buID pulid.ID) *HazmatSegregationRuleQueryBuilder {
	b.query = HazmatSegregationRuleQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *HazmatSegregationRuleQueryBuilder) WhereGroup(sep string, fn func(*HazmatSegregationRuleQueryBuilder) *HazmatSegregationRuleQueryBuilder) *HazmatSegregationRuleQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &HazmatSegregationRuleQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *HazmatSegregationRuleQueryBuilder) Where(query string, args ...interface{}) *HazmatSegregationRuleQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *HazmatSegregationRuleQueryBuilder) OrderBy(column string, desc ...bool) *HazmatSegregationRuleQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(HazmatSegregationRuleQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *HazmatSegregationRuleQueryBuilder) Limit(n int) *HazmatSegregationRuleQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *HazmatSegregationRuleQueryBuilder) Offset(n int) *HazmatSegregationRuleQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *HazmatSegregationRuleQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *HazmatSegregationRuleQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *HazmatSegregationRuleQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *HazmatSegregationRuleQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *HazmatSegregationRuleQueryBuilder) All(ctx context.Context) ([]*HazmatSegregationRule, error) {
	var entities []*HazmatSegregationRule
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *HazmatSegregationRuleQueryBuilder) AllWithCount(ctx context.Context) ([]*HazmatSegregationRule, int, error) {
	var entities []*HazmatSegregationRule
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *HazmatSegregationRuleQueryBuilder) One(ctx context.Context) (*HazmatSegregationRule, error) {
	entity := new(HazmatSegregationRule)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *HazmatSegregationRuleQueryBuilder) First(ctx context.Context) (*HazmatSegregationRule, error) {
	entity := new(HazmatSegregationRule)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// HazmatSegregationRuleBuild creates a chainable query builder
func HazmatSegregationRuleBuild(db bun.IDB) *HazmatSegregationRuleQueryBuilder {
	return NewHazmatSegregationRuleQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *HazmatSegregationRuleQueryBuilder) LoadBusinessUnit() *HazmatSegregationRuleQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *HazmatSegregationRuleQueryBuilder) LoadOrganization() *HazmatSegregationRuleQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadHazmatAMaterial loads the HazmatAMaterial relationship
func (b *HazmatSegregationRuleQueryBuilder) LoadHazmatAMaterial() *HazmatSegregationRuleQueryBuilder {
	b.query = b.query.Relation("HazmatAMaterial")
	return b
}

// LoadHazmatBMaterial loads the HazmatBMaterial relationship
func (b *HazmatSegregationRuleQueryBuilder) LoadHazmatBMaterial() *HazmatSegregationRuleQueryBuilder {
	b.query = b.query.Relation("HazmatBMaterial")
	return b
}

// LoadAllRelations loads all relationships for HazmatSegregationRule
func (b *HazmatSegregationRuleQueryBuilder) LoadAllRelations() *HazmatSegregationRuleQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadHazmatAMaterial()
	b.LoadHazmatBMaterial()
	return b
}

// HazmatSegregationRuleRelationChain provides a fluent API for building nested relationship chains
type HazmatSegregationRuleRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewHazmatSegregationRuleRelationChain creates a new relation chain builder
func NewHazmatSegregationRuleRelationChain() *HazmatSegregationRuleRelationChain {
	return &HazmatSegregationRuleRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *HazmatSegregationRuleRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *HazmatSegregationRuleRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *HazmatSegregationRuleRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *HazmatSegregationRuleRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *HazmatSegregationRuleQueryBuilder) WithBusinessUnit() *HazmatSegregationRuleRelationChainBuilder {
	chain := &HazmatSegregationRuleRelationChainBuilder{
		parent: b,
		chain:  NewHazmatSegregationRuleRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *HazmatSegregationRuleQueryBuilder) WithOrganization() *HazmatSegregationRuleRelationChainBuilder {
	chain := &HazmatSegregationRuleRelationChainBuilder{
		parent: b,
		chain:  NewHazmatSegregationRuleRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithHazmatAMaterial creates a relation chain starting with HazmatAMaterial
func (b *HazmatSegregationRuleQueryBuilder) WithHazmatAMaterial() *HazmatSegregationRuleRelationChainBuilder {
	chain := &HazmatSegregationRuleRelationChainBuilder{
		parent: b,
		chain:  NewHazmatSegregationRuleRelationChain(),
	}
	chain.chain.Add("HazmatAMaterial")
	return chain
}

// WithHazmatBMaterial creates a relation chain starting with HazmatBMaterial
func (b *HazmatSegregationRuleQueryBuilder) WithHazmatBMaterial() *HazmatSegregationRuleRelationChainBuilder {
	chain := &HazmatSegregationRuleRelationChainBuilder{
		parent: b,
		chain:  NewHazmatSegregationRuleRelationChain(),
	}
	chain.chain.Add("HazmatBMaterial")
	return chain
}

// HazmatSegregationRuleRelationChainBuilder provides fluent API for building nested relations
type HazmatSegregationRuleRelationChainBuilder struct {
	parent *HazmatSegregationRuleQueryBuilder
	chain  *HazmatSegregationRuleRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *HazmatSegregationRuleRelationChainBuilder) Load() *HazmatSegregationRuleQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *HazmatSegregationRuleRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *HazmatSegregationRuleRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *HazmatSegregationRuleRelationChainBuilder) OrderBy(order string) *HazmatSegregationRuleRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *HazmatSegregationRuleRelationChainBuilder) Where(condition string, args ...interface{}) *HazmatSegregationRuleRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
