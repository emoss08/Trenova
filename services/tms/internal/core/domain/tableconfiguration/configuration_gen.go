// Code generated by gen-trenova. DO NOT EDIT.

package tableconfiguration

import (
	"context"

	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// configurationFieldConfig provides field configuration for Configuration
type configurationFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ConfigurationQuery provides type-safe query helpers and constants
var ConfigurationQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		UserID         string
		Name           string
		Description    string
		Resource       string
		TableConfig    string
		Visibility     string
		IsDefault      string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ResourceNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ResourceGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableConfigEQ        func(q *bun.SelectQuery, v TableConfig) *bun.SelectQuery
		TableConfigNEQ       func(q *bun.SelectQuery, v TableConfig) *bun.SelectQuery
		TableConfigIn        func(q *bun.SelectQuery, v []TableConfig) *bun.SelectQuery
		TableConfigNotIn     func(q *bun.SelectQuery, v []TableConfig) *bun.SelectQuery
		VisibilityEQ         func(q *bun.SelectQuery, v Visibility) *bun.SelectQuery
		VisibilityNEQ        func(q *bun.SelectQuery, v Visibility) *bun.SelectQuery
		VisibilityIn         func(q *bun.SelectQuery, v []Visibility) *bun.SelectQuery
		VisibilityNotIn      func(q *bun.SelectQuery, v []Visibility) *bun.SelectQuery
		IsDefaultEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsDefaultNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]configurationFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit string
		Organization string
		Creator      string
		Shares       string
	}
}{
	// Table and alias constants
	Table:    "table_configurations",
	Alias:    "tc",
	IDPrefix: "tc_",

	// Field names
	Field: struct {
		ID             string
		BusinessUnitID string
		OrganizationID string
		UserID         string
		Name           string
		Description    string
		Resource       string
		TableConfig    string
		Visibility     string
		IsDefault      string
		Version        string
		CreatedAt      string
		UpdatedAt      string
	}{
		ID:             "id",
		BusinessUnitID: "business_unit_id",
		OrganizationID: "organization_id",
		UserID:         "user_id",
		Name:           "name",
		Description:    "description",
		Resource:       "resource",
		TableConfig:    "table_config",
		Visibility:     "visibility",
		IsDefault:      "is_default",
		Version:        "version",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "tc." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "tc." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		UserIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		UserIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		NameEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceEQ           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceNEQ          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ResourceNotIn        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ResourceGT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceGTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceLT           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceLTE          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceContains     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceHasPrefix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ResourceHasSuffix    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TableConfigEQ        func(q *bun.SelectQuery, v TableConfig) *bun.SelectQuery
		TableConfigNEQ       func(q *bun.SelectQuery, v TableConfig) *bun.SelectQuery
		TableConfigIn        func(q *bun.SelectQuery, v []TableConfig) *bun.SelectQuery
		TableConfigNotIn     func(q *bun.SelectQuery, v []TableConfig) *bun.SelectQuery
		VisibilityEQ         func(q *bun.SelectQuery, v Visibility) *bun.SelectQuery
		VisibilityNEQ        func(q *bun.SelectQuery, v Visibility) *bun.SelectQuery
		VisibilityIn         func(q *bun.SelectQuery, v []Visibility) *bun.SelectQuery
		VisibilityNotIn      func(q *bun.SelectQuery, v []Visibility) *bun.SelectQuery
		IsDefaultEQ          func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultNEQ         func(q *bun.SelectQuery, v bool) *bun.SelectQuery
		IsDefaultIn          func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		IsDefaultNotIn       func(q *bun.SelectQuery, v []bool) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant               func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.organization_id"), bun.In(v))
		},
		UserIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.user_id"), v)
		},
		UserIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.user_id"), v)
		},
		UserIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.user_id"), bun.In(v))
		},
		UserIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.user_id"), bun.In(v))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tc.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tc.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tc.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tc.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tc.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tc.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tc.name"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tc.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tc.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tc.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tc.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tc.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tc.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tc.description"), "%"+v)
		},
		ResourceEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.resource"), v)
		},
		ResourceNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.resource"), v)
		},
		ResourceIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.resource"), bun.In(v))
		},
		ResourceNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.resource"), bun.In(v))
		},
		ResourceGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tc.resource"), v)
		},
		ResourceGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tc.resource"), v)
		},
		ResourceLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tc.resource"), v)
		},
		ResourceLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tc.resource"), v)
		},
		ResourceContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tc.resource"), "%"+v+"%")
		},
		ResourceHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tc.resource"), v+"%")
		},
		ResourceHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tc.resource"), "%"+v)
		},
		TableConfigEQ: func(q *bun.SelectQuery, v TableConfig) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.table_config"), v)
		},
		TableConfigNEQ: func(q *bun.SelectQuery, v TableConfig) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.table_config"), v)
		},
		TableConfigIn: func(q *bun.SelectQuery, v []TableConfig) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.table_config"), bun.In(v))
		},
		TableConfigNotIn: func(q *bun.SelectQuery, v []TableConfig) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.table_config"), bun.In(v))
		},
		VisibilityEQ: func(q *bun.SelectQuery, v Visibility) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.visibility"), v)
		},
		VisibilityNEQ: func(q *bun.SelectQuery, v Visibility) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.visibility"), v)
		},
		VisibilityIn: func(q *bun.SelectQuery, v []Visibility) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.visibility"), bun.In(v))
		},
		VisibilityNotIn: func(q *bun.SelectQuery, v []Visibility) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.visibility"), bun.In(v))
		},
		IsDefaultEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.is_default"), v)
		},
		IsDefaultNEQ: func(q *bun.SelectQuery, v bool) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.is_default"), v)
		},
		IsDefaultIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.is_default"), bun.In(v))
		},
		IsDefaultNotIn: func(q *bun.SelectQuery, v []bool) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.is_default"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tc.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tc.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tc.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tc.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tc.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tc.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tc.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tc.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tc.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tc.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tc.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tc.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tc.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tc.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tc.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tc.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("tc.organization_id"), orgID).
				Where("? = ?", bun.Ident("tc.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("tc.id"), id).
				Where("? = ?", bun.Ident("tc.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "tc." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"tc.name ASC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "tc.created_at DESC"
			}
			return "tc.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "tc.updated_at DESC"
			}
			return "tc.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]configurationFieldConfig {
		return map[string]configurationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "tc.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "tc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "tc.description",
				Sortable:   false,
				Filterable: false,
			},
			"resource": {
				Name:       "resource",
				Column:     "tc.resource",
				Sortable:   false,
				Filterable: true,
			},
			"table_config": {
				Name:       "table_config",
				Column:     "tc.table_config",
				Sortable:   false,
				Filterable: false,
			},
			"visibility": {
				Name:       "visibility",
				Column:     "tc.visibility",
				Sortable:   false,
				Filterable: false,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "tc.is_default",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "tc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "tc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]configurationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "tc.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "tc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "tc.description",
				Sortable:   false,
				Filterable: false,
			},
			"resource": {
				Name:       "resource",
				Column:     "tc.resource",
				Sortable:   false,
				Filterable: true,
			},
			"table_config": {
				Name:       "table_config",
				Column:     "tc.table_config",
				Sortable:   false,
				Filterable: false,
			},
			"visibility": {
				Name:       "visibility",
				Column:     "tc.visibility",
				Sortable:   false,
				Filterable: false,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "tc.is_default",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "tc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "tc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]configurationFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tc.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tc.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tc.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"user_id": {
				Name:       "user_id",
				Column:     "tc.user_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "tc.name",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "tc.description",
				Sortable:   false,
				Filterable: false,
			},
			"resource": {
				Name:       "resource",
				Column:     "tc.resource",
				Sortable:   false,
				Filterable: true,
			},
			"table_config": {
				Name:       "table_config",
				Column:     "tc.table_config",
				Sortable:   false,
				Filterable: false,
			},
			"visibility": {
				Name:       "visibility",
				Column:     "tc.visibility",
				Sortable:   false,
				Filterable: false,
			},
			"is_default": {
				Name:       "is_default",
				Column:     "tc.is_default",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "tc.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tc.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "tc.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit string
		Organization string
		Creator      string
		Shares       string
	}{
		BusinessUnit: "BusinessUnit",
		Organization: "Organization",
		Creator:      "Creator",
		Shares:       "Shares",
	},
}

// ConfigurationQueryBuilder provides a fluent interface for building queries
type ConfigurationQueryBuilder struct {
	query *bun.SelectQuery
}

// NewConfigurationQuery creates a new query builder
func NewConfigurationQuery(db bun.IDB) *ConfigurationQueryBuilder {
	return &ConfigurationQueryBuilder{
		query: db.NewSelect().Model((*Configuration)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ConfigurationFromQuery(q *bun.SelectQuery) *ConfigurationQueryBuilder {
	return &ConfigurationQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ConfigurationQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ConfigurationQueryBuilder) Model(model interface{}) *ConfigurationQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ConfigurationQueryBuilder) WhereIDEQ(v pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ConfigurationQueryBuilder) WhereIDNEQ(v pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ConfigurationQueryBuilder) WhereIDIn(v []pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereIDNotIn(v []pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ConfigurationQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ConfigurationQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *ConfigurationQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ConfigurationQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ConfigurationQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ConfigurationQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereUserIDEQ adds a WHERE user_id = ? condition
func (b *ConfigurationQueryBuilder) WhereUserIDEQ(v pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UserIDEQ(b.query, v)
	return b
}

// WhereUserIDNEQ adds a WHERE user_id != ? condition
func (b *ConfigurationQueryBuilder) WhereUserIDNEQ(v pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UserIDNEQ(b.query, v)
	return b
}

// WhereUserIDIn adds a WHERE user_id IN (?) condition
func (b *ConfigurationQueryBuilder) WhereUserIDIn(v []pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UserIDIn(b.query, v)
	return b
}

// WhereUserIDNotIn adds a WHERE user_id NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereUserIDNotIn(v []pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UserIDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *ConfigurationQueryBuilder) WhereNameEQ(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *ConfigurationQueryBuilder) WhereNameNEQ(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *ConfigurationQueryBuilder) WhereNameIn(v []string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereNameNotIn(v []string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *ConfigurationQueryBuilder) WhereNameContains(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *ConfigurationQueryBuilder) WhereNameHasPrefix(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *ConfigurationQueryBuilder) WhereNameHasSuffix(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *ConfigurationQueryBuilder) WhereDescriptionEQ(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *ConfigurationQueryBuilder) WhereDescriptionNEQ(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *ConfigurationQueryBuilder) WhereDescriptionIn(v []string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereDescriptionNotIn(v []string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *ConfigurationQueryBuilder) WhereDescriptionContains(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *ConfigurationQueryBuilder) WhereDescriptionHasPrefix(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *ConfigurationQueryBuilder) WhereDescriptionHasSuffix(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WhereResourceEQ adds a WHERE resource = ? condition
func (b *ConfigurationQueryBuilder) WhereResourceEQ(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.ResourceEQ(b.query, v)
	return b
}

// WhereResourceNEQ adds a WHERE resource != ? condition
func (b *ConfigurationQueryBuilder) WhereResourceNEQ(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.ResourceNEQ(b.query, v)
	return b
}

// WhereResourceIn adds a WHERE resource IN (?) condition
func (b *ConfigurationQueryBuilder) WhereResourceIn(v []string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.ResourceIn(b.query, v)
	return b
}

// WhereResourceNotIn adds a WHERE resource NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereResourceNotIn(v []string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.ResourceNotIn(b.query, v)
	return b
}

// WhereResourceContains adds a WHERE resource LIKE ? condition
func (b *ConfigurationQueryBuilder) WhereResourceContains(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.ResourceContains(b.query, v)
	return b
}

// WhereResourceHasPrefix adds a WHERE resource LIKE ? condition
func (b *ConfigurationQueryBuilder) WhereResourceHasPrefix(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.ResourceHasPrefix(b.query, v)
	return b
}

// WhereResourceHasSuffix adds a WHERE resource LIKE ? condition
func (b *ConfigurationQueryBuilder) WhereResourceHasSuffix(v string) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.ResourceHasSuffix(b.query, v)
	return b
}

// WhereTableConfigEQ adds a WHERE table_config = ? condition
func (b *ConfigurationQueryBuilder) WhereTableConfigEQ(v TableConfig) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.TableConfigEQ(b.query, v)
	return b
}

// WhereTableConfigNEQ adds a WHERE table_config != ? condition
func (b *ConfigurationQueryBuilder) WhereTableConfigNEQ(v TableConfig) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.TableConfigNEQ(b.query, v)
	return b
}

// WhereTableConfigIn adds a WHERE table_config IN (?) condition
func (b *ConfigurationQueryBuilder) WhereTableConfigIn(v []TableConfig) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.TableConfigIn(b.query, v)
	return b
}

// WhereTableConfigNotIn adds a WHERE table_config NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereTableConfigNotIn(v []TableConfig) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.TableConfigNotIn(b.query, v)
	return b
}

// WhereVisibilityEQ adds a WHERE visibility = ? condition
func (b *ConfigurationQueryBuilder) WhereVisibilityEQ(v Visibility) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VisibilityEQ(b.query, v)
	return b
}

// WhereVisibilityNEQ adds a WHERE visibility != ? condition
func (b *ConfigurationQueryBuilder) WhereVisibilityNEQ(v Visibility) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VisibilityNEQ(b.query, v)
	return b
}

// WhereVisibilityIn adds a WHERE visibility IN (?) condition
func (b *ConfigurationQueryBuilder) WhereVisibilityIn(v []Visibility) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VisibilityIn(b.query, v)
	return b
}

// WhereVisibilityNotIn adds a WHERE visibility NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereVisibilityNotIn(v []Visibility) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VisibilityNotIn(b.query, v)
	return b
}

// WhereIsDefaultEQ adds a WHERE is_default = ? condition
func (b *ConfigurationQueryBuilder) WhereIsDefaultEQ(v bool) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.IsDefaultEQ(b.query, v)
	return b
}

// WhereIsDefaultNEQ adds a WHERE is_default != ? condition
func (b *ConfigurationQueryBuilder) WhereIsDefaultNEQ(v bool) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.IsDefaultNEQ(b.query, v)
	return b
}

// WhereIsDefaultIn adds a WHERE is_default IN (?) condition
func (b *ConfigurationQueryBuilder) WhereIsDefaultIn(v []bool) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.IsDefaultIn(b.query, v)
	return b
}

// WhereIsDefaultNotIn adds a WHERE is_default NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereIsDefaultNotIn(v []bool) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.IsDefaultNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ConfigurationQueryBuilder) WhereVersionEQ(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ConfigurationQueryBuilder) WhereVersionNEQ(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ConfigurationQueryBuilder) WhereVersionGT(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ConfigurationQueryBuilder) WhereVersionGTE(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ConfigurationQueryBuilder) WhereVersionLT(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ConfigurationQueryBuilder) WhereVersionLTE(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ConfigurationQueryBuilder) WhereVersionIn(v []int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereVersionNotIn(v []int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ConfigurationQueryBuilder) WhereCreatedAtEQ(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ConfigurationQueryBuilder) WhereCreatedAtNEQ(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ConfigurationQueryBuilder) WhereCreatedAtGT(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ConfigurationQueryBuilder) WhereCreatedAtGTE(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ConfigurationQueryBuilder) WhereCreatedAtLT(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ConfigurationQueryBuilder) WhereCreatedAtLTE(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ConfigurationQueryBuilder) WhereCreatedAtIn(v []int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereCreatedAtNotIn(v []int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ConfigurationQueryBuilder) WhereUpdatedAtEQ(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ConfigurationQueryBuilder) WhereUpdatedAtNEQ(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ConfigurationQueryBuilder) WhereUpdatedAtGT(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ConfigurationQueryBuilder) WhereUpdatedAtGTE(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ConfigurationQueryBuilder) WhereUpdatedAtLT(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ConfigurationQueryBuilder) WhereUpdatedAtLTE(v int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ConfigurationQueryBuilder) WhereUpdatedAtIn(v []int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ConfigurationQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ConfigurationQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ConfigurationQueryBuilder {
	b.query = ConfigurationQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ConfigurationQueryBuilder) WhereGroup(sep string, fn func(*ConfigurationQueryBuilder) *ConfigurationQueryBuilder) *ConfigurationQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ConfigurationQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ConfigurationQueryBuilder) Where(query string, args ...interface{}) *ConfigurationQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ConfigurationQueryBuilder) OrderBy(column string, desc ...bool) *ConfigurationQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ConfigurationQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ConfigurationQueryBuilder) Limit(n int) *ConfigurationQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ConfigurationQueryBuilder) Offset(n int) *ConfigurationQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ConfigurationQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ConfigurationQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ConfigurationQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ConfigurationQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ConfigurationQueryBuilder) All(ctx context.Context) ([]*Configuration, error) {
	var entities []*Configuration
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ConfigurationQueryBuilder) AllWithCount(ctx context.Context) ([]*Configuration, int, error) {
	var entities []*Configuration
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ConfigurationQueryBuilder) One(ctx context.Context) (*Configuration, error) {
	entity := new(Configuration)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ConfigurationQueryBuilder) First(ctx context.Context) (*Configuration, error) {
	entity := new(Configuration)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ConfigurationBuild creates a chainable query builder
func ConfigurationBuild(db bun.IDB) *ConfigurationQueryBuilder {
	return NewConfigurationQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *ConfigurationQueryBuilder) LoadBusinessUnit() *ConfigurationQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *ConfigurationQueryBuilder) LoadOrganization() *ConfigurationQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadCreator loads the Creator relationship
func (b *ConfigurationQueryBuilder) LoadCreator() *ConfigurationQueryBuilder {
	b.query = b.query.Relation("Creator")
	return b
}

// LoadShares loads the Shares relationship
func (b *ConfigurationQueryBuilder) LoadShares(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ConfigurationQueryBuilder {
	if len(opts) > 0 {
		b.query = b.query.Relation("Shares", func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		})
	} else {
		b.query = b.query.Relation("Shares")
	}
	return b
}

// LoadAllRelations loads all relationships for Configuration
func (b *ConfigurationQueryBuilder) LoadAllRelations() *ConfigurationQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadCreator()
	b.LoadShares()
	return b
}

// ConfigurationRelationChain provides a fluent API for building nested relationship chains
type ConfigurationRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewConfigurationRelationChain creates a new relation chain builder
func NewConfigurationRelationChain() *ConfigurationRelationChain {
	return &ConfigurationRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *ConfigurationRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ConfigurationRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *ConfigurationRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *ConfigurationRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *ConfigurationQueryBuilder) WithBusinessUnit() *ConfigurationRelationChainBuilder {
	chain := &ConfigurationRelationChainBuilder{
		parent: b,
		chain:  NewConfigurationRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *ConfigurationQueryBuilder) WithOrganization() *ConfigurationRelationChainBuilder {
	chain := &ConfigurationRelationChainBuilder{
		parent: b,
		chain:  NewConfigurationRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithCreator creates a relation chain starting with Creator
func (b *ConfigurationQueryBuilder) WithCreator() *ConfigurationRelationChainBuilder {
	chain := &ConfigurationRelationChainBuilder{
		parent: b,
		chain:  NewConfigurationRelationChain(),
	}
	chain.chain.Add("Creator")
	return chain
}

// WithShares creates a relation chain starting with Shares
func (b *ConfigurationQueryBuilder) WithShares(opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ConfigurationRelationChainBuilder {
	chain := &ConfigurationRelationChainBuilder{
		parent: b,
		chain:  NewConfigurationRelationChain(),
	}
	chain.chain.Add("Shares", opts...)
	return chain
}

// ConfigurationRelationChainBuilder provides fluent API for building nested relations
type ConfigurationRelationChainBuilder struct {
	parent *ConfigurationQueryBuilder
	chain  *ConfigurationRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *ConfigurationRelationChainBuilder) Load() *ConfigurationQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *ConfigurationRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ConfigurationRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *ConfigurationRelationChainBuilder) OrderBy(order string) *ConfigurationRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *ConfigurationRelationChainBuilder) Where(condition string, args ...interface{}) *ConfigurationRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
