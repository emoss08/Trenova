// Code generated by gen-trenova. DO NOT EDIT.

package tractor

import (
	"context"

	"github.com/emoss08/trenova/internal/core/domain"
	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// tractorFieldConfig provides field configuration for Tractor
type tractorFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// TractorQuery provides type-safe query helpers and constants
var TractorQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                      string
		BusinessUnitID          string
		OrganizationID          string
		EquipmentTypeID         string
		PrimaryWorkerID         string
		EquipmentManufacturerID string
		StateID                 string
		FleetCodeID             string
		SecondaryWorkerID       string
		Status                  string
		Code                    string
		Model                   string
		Make                    string
		SearchVector            string
		Rank                    string
		RegistrationNumber      string
		LicensePlateNumber      string
		Vin                     string
		Year                    string
		RegistrationExpiry      string
		Version                 string
		CreatedAt               string
		UpdatedAt               string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentTypeIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentTypeIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentTypeIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentTypeIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ                    func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		StateIDNEQ                   func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		StateIDIn                    func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		StateIDNotIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		StateIDIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		StateIDIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		FleetCodeIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		FleetCodeIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNotIn       func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                     func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery
		StatusNEQ                    func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery
		StatusIn                     func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery
		StatusNotIn                  func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery
		CodeEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ModelNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ModelGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MakeNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MakeGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegistrationNumberNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegistrationNumberGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicensePlateNumberNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicensePlateNumberGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VinNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VinGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		YearEQ                       func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		YearNEQ                      func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		YearIn                       func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		YearNotIn                    func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		YearIsNull                   func(q *bun.SelectQuery) *bun.SelectQuery
		YearIsNotNull                func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationExpiryEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RegistrationExpiryNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RegistrationExpiryIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RegistrationExpiryNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RegistrationExpiryIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationExpiryIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]tractorFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		BusinessUnit          string
		Organization          string
		PrimaryWorker         string
		SecondaryWorker       string
		EquipmentType         string
		EquipmentManufacturer string
		State                 string
		FleetCode             string
	}
}{
	// Table and alias constants
	Table:    "tractors",
	Alias:    "tr",
	IDPrefix: "tr_",

	// Field names
	Field: struct {
		ID                      string
		BusinessUnitID          string
		OrganizationID          string
		EquipmentTypeID         string
		PrimaryWorkerID         string
		EquipmentManufacturerID string
		StateID                 string
		FleetCodeID             string
		SecondaryWorkerID       string
		Status                  string
		Code                    string
		Model                   string
		Make                    string
		SearchVector            string
		Rank                    string
		RegistrationNumber      string
		LicensePlateNumber      string
		Vin                     string
		Year                    string
		RegistrationExpiry      string
		Version                 string
		CreatedAt               string
		UpdatedAt               string
	}{
		ID:                      "id",
		BusinessUnitID:          "business_unit_id",
		OrganizationID:          "organization_id",
		EquipmentTypeID:         "equipment_type_id",
		PrimaryWorkerID:         "primary_worker_id",
		EquipmentManufacturerID: "equipment_manufacturer_id",
		StateID:                 "state_id",
		FleetCodeID:             "fleet_code_id",
		SecondaryWorkerID:       "secondary_worker_id",
		Status:                  "status",
		Code:                    "code",
		Model:                   "model",
		Make:                    "make",
		SearchVector:            "search_vector",
		Rank:                    "rank",
		RegistrationNumber:      "registration_number",
		LicensePlateNumber:      "license_plate_number",
		Vin:                     "vin",
		Year:                    "year",
		RegistrationExpiry:      "registration_expiry",
		Version:                 "version",
		CreatedAt:               "created_at",
		UpdatedAt:               "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "tr." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "tr." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                        func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                      func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ             func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn             func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentTypeIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentTypeIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentTypeIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentTypeIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDEQ            func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNEQ           func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDIn            func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		PrimaryWorkerIDNotIn         func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDNEQ   func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDIn    func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		EquipmentManufacturerIDNotIn func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ                    func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		StateIDNEQ                   func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		StateIDIn                    func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		StateIDNotIn                 func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		StateIDIsNull                func(q *bun.SelectQuery) *bun.SelectQuery
		StateIDIsNotNull             func(q *bun.SelectQuery) *bun.SelectQuery
		FleetCodeIDEQ                func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDNEQ               func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		FleetCodeIDIn                func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDNotIn             func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		FleetCodeIDIsNull            func(q *bun.SelectQuery) *bun.SelectQuery
		FleetCodeIDIsNotNull         func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDEQ          func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNEQ         func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIn          func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDNotIn       func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		SecondaryWorkerIDIsNull      func(q *bun.SelectQuery) *bun.SelectQuery
		SecondaryWorkerIDIsNotNull   func(q *bun.SelectQuery) *bun.SelectQuery
		StatusEQ                     func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery
		StatusNEQ                    func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery
		StatusIn                     func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery
		StatusNotIn                  func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery
		CodeEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ModelNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		ModelGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		ModelHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MakeNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		MakeGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MakeHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorNEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorNotIn            func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		SearchVectorGT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorGTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLT               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorLTE              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorContains         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasPrefix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		SearchVectorHasSuffix        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RankGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RankHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegistrationNumberNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		RegistrationNumberGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		RegistrationNumberHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberEQ         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberNEQ        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberIn         func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicensePlateNumberNotIn      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LicensePlateNumberGT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberGTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberLT         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberLTE        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberContains   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberHasPrefix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LicensePlateNumberHasSuffix  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VinNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		VinGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		VinHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		YearEQ                       func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		YearNEQ                      func(q *bun.SelectQuery, v *int) *bun.SelectQuery
		YearIn                       func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		YearNotIn                    func(q *bun.SelectQuery, v []*int) *bun.SelectQuery
		YearIsNull                   func(q *bun.SelectQuery) *bun.SelectQuery
		YearIsNotNull                func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationExpiryEQ         func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RegistrationExpiryNEQ        func(q *bun.SelectQuery, v *int64) *bun.SelectQuery
		RegistrationExpiryIn         func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RegistrationExpiryNotIn      func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery
		RegistrationExpiryIsNull     func(q *bun.SelectQuery) *bun.SelectQuery
		RegistrationExpiryIsNotNull  func(q *bun.SelectQuery) *bun.SelectQuery
		VersionEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                 func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn               func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                 func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant                       func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.business_unit_id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.organization_id"), bun.In(v))
		},
		EquipmentTypeIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.equipment_type_id"), v)
		},
		EquipmentTypeIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.equipment_type_id"), v)
		},
		EquipmentTypeIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.equipment_type_id"), bun.In(v))
		},
		EquipmentTypeIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.equipment_type_id"), bun.In(v))
		},
		PrimaryWorkerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.primary_worker_id"), v)
		},
		PrimaryWorkerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.primary_worker_id"), v)
		},
		PrimaryWorkerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.primary_worker_id"), bun.In(v))
		},
		PrimaryWorkerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.primary_worker_id"), bun.In(v))
		},
		EquipmentManufacturerIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.equipment_manufacturer_id"), v)
		},
		EquipmentManufacturerIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.equipment_manufacturer_id"), v)
		},
		EquipmentManufacturerIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.equipment_manufacturer_id"), bun.In(v))
		},
		EquipmentManufacturerIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.equipment_manufacturer_id"), bun.In(v))
		},
		StateIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.state_id"), v)
		},
		StateIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.state_id"), v)
		},
		StateIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.state_id"), bun.In(v))
		},
		StateIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.state_id"), bun.In(v))
		},
		StateIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.state_id"))
		},
		StateIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.state_id"))
		},
		FleetCodeIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.fleet_code_id"), v)
		},
		FleetCodeIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.fleet_code_id"), v)
		},
		FleetCodeIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.fleet_code_id"), bun.In(v))
		},
		FleetCodeIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.fleet_code_id"), bun.In(v))
		},
		FleetCodeIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.fleet_code_id"))
		},
		FleetCodeIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.fleet_code_id"))
		},
		SecondaryWorkerIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.secondary_worker_id"), v)
		},
		SecondaryWorkerIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.secondary_worker_id"), v)
		},
		SecondaryWorkerIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.secondary_worker_id"), bun.In(v))
		},
		SecondaryWorkerIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.secondary_worker_id"), bun.In(v))
		},
		SecondaryWorkerIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.secondary_worker_id"))
		},
		SecondaryWorkerIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.secondary_worker_id"))
		},
		StatusEQ: func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.status"), v)
		},
		StatusNEQ: func(q *bun.SelectQuery, v domain.EquipmentStatus) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.status"), v)
		},
		StatusIn: func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.status"), bun.In(v))
		},
		StatusNotIn: func(q *bun.SelectQuery, v []domain.EquipmentStatus) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.status"), bun.In(v))
		},
		CodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.code"), v)
		},
		CodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.code"), v)
		},
		CodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.code"), bun.In(v))
		},
		CodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.code"), bun.In(v))
		},
		CodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.code"), v)
		},
		CodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.code"), v)
		},
		CodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.code"), v)
		},
		CodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.code"), v)
		},
		CodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.code"), "%"+v+"%")
		},
		CodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.code"), v+"%")
		},
		CodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.code"), "%"+v)
		},
		ModelEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.model"), v)
		},
		ModelNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.model"), v)
		},
		ModelIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.model"), bun.In(v))
		},
		ModelNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.model"), bun.In(v))
		},
		ModelGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.model"), v)
		},
		ModelGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.model"), v)
		},
		ModelLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.model"), v)
		},
		ModelLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.model"), v)
		},
		ModelContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.model"), "%"+v+"%")
		},
		ModelHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.model"), v+"%")
		},
		ModelHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.model"), "%"+v)
		},
		MakeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.make"), v)
		},
		MakeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.make"), v)
		},
		MakeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.make"), bun.In(v))
		},
		MakeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.make"), bun.In(v))
		},
		MakeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.make"), v)
		},
		MakeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.make"), v)
		},
		MakeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.make"), v)
		},
		MakeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.make"), v)
		},
		MakeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.make"), "%"+v+"%")
		},
		MakeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.make"), v+"%")
		},
		MakeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.make"), "%"+v)
		},
		SearchVectorEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.search_vector"), bun.In(v))
		},
		SearchVectorNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.search_vector"), bun.In(v))
		},
		SearchVectorGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.search_vector"), v)
		},
		SearchVectorContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.search_vector"), "%"+v+"%")
		},
		SearchVectorHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.search_vector"), v+"%")
		},
		SearchVectorHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.search_vector"), "%"+v)
		},
		RankEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.rank"), v)
		},
		RankNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.rank"), v)
		},
		RankIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.rank"), bun.In(v))
		},
		RankNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.rank"), bun.In(v))
		},
		RankGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.rank"), v)
		},
		RankGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.rank"), v)
		},
		RankLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.rank"), v)
		},
		RankLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.rank"), v)
		},
		RankContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.rank"), "%"+v+"%")
		},
		RankHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.rank"), v+"%")
		},
		RankHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.rank"), "%"+v)
		},
		RegistrationNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.registration_number"), bun.In(v))
		},
		RegistrationNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.registration_number"), bun.In(v))
		},
		RegistrationNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.registration_number"), v)
		},
		RegistrationNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.registration_number"), "%"+v+"%")
		},
		RegistrationNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.registration_number"), v+"%")
		},
		RegistrationNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.registration_number"), "%"+v)
		},
		LicensePlateNumberEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.license_plate_number"), bun.In(v))
		},
		LicensePlateNumberNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.license_plate_number"), bun.In(v))
		},
		LicensePlateNumberGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.license_plate_number"), v)
		},
		LicensePlateNumberContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.license_plate_number"), "%"+v+"%")
		},
		LicensePlateNumberHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.license_plate_number"), v+"%")
		},
		LicensePlateNumberHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.license_plate_number"), "%"+v)
		},
		VinEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.vin"), v)
		},
		VinNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.vin"), v)
		},
		VinIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.vin"), bun.In(v))
		},
		VinNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.vin"), bun.In(v))
		},
		VinGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.vin"), v)
		},
		VinGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.vin"), v)
		},
		VinLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.vin"), v)
		},
		VinLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.vin"), v)
		},
		VinContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.vin"), "%"+v+"%")
		},
		VinHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.vin"), v+"%")
		},
		VinHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("tr.vin"), "%"+v)
		},
		YearEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.year"), v)
		},
		YearNEQ: func(q *bun.SelectQuery, v *int) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.year"), v)
		},
		YearIn: func(q *bun.SelectQuery, v []*int) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.year"), bun.In(v))
		},
		YearNotIn: func(q *bun.SelectQuery, v []*int) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.year"), bun.In(v))
		},
		YearIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.year"))
		},
		YearIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.year"))
		},
		RegistrationExpiryEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.registration_expiry"), v)
		},
		RegistrationExpiryNEQ: func(q *bun.SelectQuery, v *int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.registration_expiry"), v)
		},
		RegistrationExpiryIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.registration_expiry"), bun.In(v))
		},
		RegistrationExpiryNotIn: func(q *bun.SelectQuery, v []*int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.registration_expiry"), bun.In(v))
		},
		RegistrationExpiryIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("tr.registration_expiry"))
		},
		RegistrationExpiryIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("tr.registration_expiry"))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("tr.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("tr.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("tr.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("tr.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("tr.organization_id"), orgID).
				Where("? = ?", bun.Ident("tr.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("tr.id"), id).
				Where("? = ?", bun.Ident("tr.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Status    func(desc bool) string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "tr." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"tr.status ASC",
				"tr.code ASC",
			}
		},
		Status: func(desc bool) string {
			if desc {
				return "tr.status DESC"
			}
			return "tr.status ASC"
		},
		Code: func(desc bool) string {
			if desc {
				return "tr.code DESC"
			}
			return "tr.code ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "tr.created_at DESC"
			}
			return "tr.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "tr.updated_at DESC"
			}
			return "tr.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]tractorFieldConfig {
		return map[string]tractorFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_type_id": {
				Name:       "equipment_type_id",
				Column:     "tr.equipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"primary_worker_id": {
				Name:       "primary_worker_id",
				Column:     "tr.primary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_manufacturer_id": {
				Name:       "equipment_manufacturer_id",
				Column:     "tr.equipment_manufacturer_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "tr.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"fleet_code_id": {
				Name:       "fleet_code_id",
				Column:     "tr.fleet_code_id",
				Sortable:   false,
				Filterable: true,
			},
			"secondary_worker_id": {
				Name:       "secondary_worker_id",
				Column:     "tr.secondary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "tr.status",
				Sortable:   false,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "tr.code",
				Sortable:   true,
				Filterable: true,
			},
			"model": {
				Name:       "model",
				Column:     "tr.model",
				Sortable:   false,
				Filterable: true,
			},
			"make": {
				Name:       "make",
				Column:     "tr.make",
				Sortable:   false,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "tr.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "tr.rank",
				Sortable:   false,
				Filterable: true,
			},
			"registration_number": {
				Name:       "registration_number",
				Column:     "tr.registration_number",
				Sortable:   false,
				Filterable: true,
			},
			"license_plate_number": {
				Name:       "license_plate_number",
				Column:     "tr.license_plate_number",
				Sortable:   false,
				Filterable: true,
			},
			"vin": {
				Name:       "vin",
				Column:     "tr.vin",
				Sortable:   false,
				Filterable: false,
			},
			"year": {
				Name:       "year",
				Column:     "tr.year",
				Sortable:   false,
				Filterable: false,
			},
			"registration_expiry": {
				Name:       "registration_expiry",
				Column:     "tr.registration_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "tr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "tr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]tractorFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_type_id": {
				Name:       "equipment_type_id",
				Column:     "tr.equipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"primary_worker_id": {
				Name:       "primary_worker_id",
				Column:     "tr.primary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_manufacturer_id": {
				Name:       "equipment_manufacturer_id",
				Column:     "tr.equipment_manufacturer_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "tr.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"fleet_code_id": {
				Name:       "fleet_code_id",
				Column:     "tr.fleet_code_id",
				Sortable:   false,
				Filterable: true,
			},
			"secondary_worker_id": {
				Name:       "secondary_worker_id",
				Column:     "tr.secondary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "tr.status",
				Sortable:   false,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "tr.code",
				Sortable:   true,
				Filterable: true,
			},
			"model": {
				Name:       "model",
				Column:     "tr.model",
				Sortable:   false,
				Filterable: true,
			},
			"make": {
				Name:       "make",
				Column:     "tr.make",
				Sortable:   false,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "tr.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "tr.rank",
				Sortable:   false,
				Filterable: true,
			},
			"registration_number": {
				Name:       "registration_number",
				Column:     "tr.registration_number",
				Sortable:   false,
				Filterable: true,
			},
			"license_plate_number": {
				Name:       "license_plate_number",
				Column:     "tr.license_plate_number",
				Sortable:   false,
				Filterable: true,
			},
			"vin": {
				Name:       "vin",
				Column:     "tr.vin",
				Sortable:   false,
				Filterable: false,
			},
			"year": {
				Name:       "year",
				Column:     "tr.year",
				Sortable:   false,
				Filterable: false,
			},
			"registration_expiry": {
				Name:       "registration_expiry",
				Column:     "tr.registration_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "tr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "tr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]tractorFieldConfig{
			"id": {
				Name:       "id",
				Column:     "tr.id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "tr.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "tr.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_type_id": {
				Name:       "equipment_type_id",
				Column:     "tr.equipment_type_id",
				Sortable:   false,
				Filterable: true,
			},
			"primary_worker_id": {
				Name:       "primary_worker_id",
				Column:     "tr.primary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"equipment_manufacturer_id": {
				Name:       "equipment_manufacturer_id",
				Column:     "tr.equipment_manufacturer_id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "tr.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"fleet_code_id": {
				Name:       "fleet_code_id",
				Column:     "tr.fleet_code_id",
				Sortable:   false,
				Filterable: true,
			},
			"secondary_worker_id": {
				Name:       "secondary_worker_id",
				Column:     "tr.secondary_worker_id",
				Sortable:   false,
				Filterable: true,
			},
			"status": {
				Name:       "status",
				Column:     "tr.status",
				Sortable:   false,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "tr.code",
				Sortable:   true,
				Filterable: true,
			},
			"model": {
				Name:       "model",
				Column:     "tr.model",
				Sortable:   false,
				Filterable: true,
			},
			"make": {
				Name:       "make",
				Column:     "tr.make",
				Sortable:   false,
				Filterable: true,
			},
			"search_vector": {
				Name:       "search_vector",
				Column:     "tr.search_vector",
				Sortable:   false,
				Filterable: false,
			},
			"rank": {
				Name:       "rank",
				Column:     "tr.rank",
				Sortable:   false,
				Filterable: true,
			},
			"registration_number": {
				Name:       "registration_number",
				Column:     "tr.registration_number",
				Sortable:   false,
				Filterable: true,
			},
			"license_plate_number": {
				Name:       "license_plate_number",
				Column:     "tr.license_plate_number",
				Sortable:   false,
				Filterable: true,
			},
			"vin": {
				Name:       "vin",
				Column:     "tr.vin",
				Sortable:   false,
				Filterable: false,
			},
			"year": {
				Name:       "year",
				Column:     "tr.year",
				Sortable:   false,
				Filterable: false,
			},
			"registration_expiry": {
				Name:       "registration_expiry",
				Column:     "tr.registration_expiry",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "tr.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "tr.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "tr.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		BusinessUnit          string
		Organization          string
		PrimaryWorker         string
		SecondaryWorker       string
		EquipmentType         string
		EquipmentManufacturer string
		State                 string
		FleetCode             string
	}{
		BusinessUnit:          "BusinessUnit",
		Organization:          "Organization",
		PrimaryWorker:         "PrimaryWorker",
		SecondaryWorker:       "SecondaryWorker",
		EquipmentType:         "EquipmentType",
		EquipmentManufacturer: "EquipmentManufacturer",
		State:                 "State",
		FleetCode:             "FleetCode",
	},
}

// TractorQueryBuilder provides a fluent interface for building queries
type TractorQueryBuilder struct {
	query *bun.SelectQuery
}

// NewTractorQuery creates a new query builder
func NewTractorQuery(db bun.IDB) *TractorQueryBuilder {
	return &TractorQueryBuilder{
		query: db.NewSelect().Model((*Tractor)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func TractorFromQuery(q *bun.SelectQuery) *TractorQueryBuilder {
	return &TractorQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *TractorQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *TractorQueryBuilder) Model(model interface{}) *TractorQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *TractorQueryBuilder) WhereIDEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *TractorQueryBuilder) WhereIDNEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *TractorQueryBuilder) WhereIDIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *TractorQueryBuilder) WhereIDNotIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *TractorQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *TractorQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *TractorQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *TractorQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *TractorQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *TractorQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *TractorQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *TractorQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereEquipmentTypeIDEQ adds a WHERE equipment_type_id = ? condition
func (b *TractorQueryBuilder) WhereEquipmentTypeIDEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.EquipmentTypeIDEQ(b.query, v)
	return b
}

// WhereEquipmentTypeIDNEQ adds a WHERE equipment_type_id != ? condition
func (b *TractorQueryBuilder) WhereEquipmentTypeIDNEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.EquipmentTypeIDNEQ(b.query, v)
	return b
}

// WhereEquipmentTypeIDIn adds a WHERE equipment_type_id IN (?) condition
func (b *TractorQueryBuilder) WhereEquipmentTypeIDIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.EquipmentTypeIDIn(b.query, v)
	return b
}

// WhereEquipmentTypeIDNotIn adds a WHERE equipment_type_id NOT IN (?) condition
func (b *TractorQueryBuilder) WhereEquipmentTypeIDNotIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.EquipmentTypeIDNotIn(b.query, v)
	return b
}

// WherePrimaryWorkerIDEQ adds a WHERE primary_worker_id = ? condition
func (b *TractorQueryBuilder) WherePrimaryWorkerIDEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.PrimaryWorkerIDEQ(b.query, v)
	return b
}

// WherePrimaryWorkerIDNEQ adds a WHERE primary_worker_id != ? condition
func (b *TractorQueryBuilder) WherePrimaryWorkerIDNEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.PrimaryWorkerIDNEQ(b.query, v)
	return b
}

// WherePrimaryWorkerIDIn adds a WHERE primary_worker_id IN (?) condition
func (b *TractorQueryBuilder) WherePrimaryWorkerIDIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.PrimaryWorkerIDIn(b.query, v)
	return b
}

// WherePrimaryWorkerIDNotIn adds a WHERE primary_worker_id NOT IN (?) condition
func (b *TractorQueryBuilder) WherePrimaryWorkerIDNotIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.PrimaryWorkerIDNotIn(b.query, v)
	return b
}

// WhereEquipmentManufacturerIDEQ adds a WHERE equipment_manufacturer_id = ? condition
func (b *TractorQueryBuilder) WhereEquipmentManufacturerIDEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.EquipmentManufacturerIDEQ(b.query, v)
	return b
}

// WhereEquipmentManufacturerIDNEQ adds a WHERE equipment_manufacturer_id != ? condition
func (b *TractorQueryBuilder) WhereEquipmentManufacturerIDNEQ(v pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.EquipmentManufacturerIDNEQ(b.query, v)
	return b
}

// WhereEquipmentManufacturerIDIn adds a WHERE equipment_manufacturer_id IN (?) condition
func (b *TractorQueryBuilder) WhereEquipmentManufacturerIDIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.EquipmentManufacturerIDIn(b.query, v)
	return b
}

// WhereEquipmentManufacturerIDNotIn adds a WHERE equipment_manufacturer_id NOT IN (?) condition
func (b *TractorQueryBuilder) WhereEquipmentManufacturerIDNotIn(v []pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.EquipmentManufacturerIDNotIn(b.query, v)
	return b
}

// WhereStateIDEQ adds a WHERE state_id = ? condition
func (b *TractorQueryBuilder) WhereStateIDEQ(v *pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.StateIDEQ(b.query, v)
	return b
}

// WhereStateIDNEQ adds a WHERE state_id != ? condition
func (b *TractorQueryBuilder) WhereStateIDNEQ(v *pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.StateIDNEQ(b.query, v)
	return b
}

// WhereStateIDIn adds a WHERE state_id IN (?) condition
func (b *TractorQueryBuilder) WhereStateIDIn(v []*pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.StateIDIn(b.query, v)
	return b
}

// WhereStateIDNotIn adds a WHERE state_id NOT IN (?) condition
func (b *TractorQueryBuilder) WhereStateIDNotIn(v []*pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.StateIDNotIn(b.query, v)
	return b
}

// WhereFleetCodeIDEQ adds a WHERE fleet_code_id = ? condition
func (b *TractorQueryBuilder) WhereFleetCodeIDEQ(v *pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.FleetCodeIDEQ(b.query, v)
	return b
}

// WhereFleetCodeIDNEQ adds a WHERE fleet_code_id != ? condition
func (b *TractorQueryBuilder) WhereFleetCodeIDNEQ(v *pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.FleetCodeIDNEQ(b.query, v)
	return b
}

// WhereFleetCodeIDIn adds a WHERE fleet_code_id IN (?) condition
func (b *TractorQueryBuilder) WhereFleetCodeIDIn(v []*pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.FleetCodeIDIn(b.query, v)
	return b
}

// WhereFleetCodeIDNotIn adds a WHERE fleet_code_id NOT IN (?) condition
func (b *TractorQueryBuilder) WhereFleetCodeIDNotIn(v []*pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.FleetCodeIDNotIn(b.query, v)
	return b
}

// WhereSecondaryWorkerIDEQ adds a WHERE secondary_worker_id = ? condition
func (b *TractorQueryBuilder) WhereSecondaryWorkerIDEQ(v *pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SecondaryWorkerIDEQ(b.query, v)
	return b
}

// WhereSecondaryWorkerIDNEQ adds a WHERE secondary_worker_id != ? condition
func (b *TractorQueryBuilder) WhereSecondaryWorkerIDNEQ(v *pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SecondaryWorkerIDNEQ(b.query, v)
	return b
}

// WhereSecondaryWorkerIDIn adds a WHERE secondary_worker_id IN (?) condition
func (b *TractorQueryBuilder) WhereSecondaryWorkerIDIn(v []*pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SecondaryWorkerIDIn(b.query, v)
	return b
}

// WhereSecondaryWorkerIDNotIn adds a WHERE secondary_worker_id NOT IN (?) condition
func (b *TractorQueryBuilder) WhereSecondaryWorkerIDNotIn(v []*pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SecondaryWorkerIDNotIn(b.query, v)
	return b
}

// WhereStatusEQ adds a WHERE status = ? condition
func (b *TractorQueryBuilder) WhereStatusEQ(v domain.EquipmentStatus) *TractorQueryBuilder {
	b.query = TractorQuery.Where.StatusEQ(b.query, v)
	return b
}

// WhereStatusNEQ adds a WHERE status != ? condition
func (b *TractorQueryBuilder) WhereStatusNEQ(v domain.EquipmentStatus) *TractorQueryBuilder {
	b.query = TractorQuery.Where.StatusNEQ(b.query, v)
	return b
}

// WhereStatusIn adds a WHERE status IN (?) condition
func (b *TractorQueryBuilder) WhereStatusIn(v []domain.EquipmentStatus) *TractorQueryBuilder {
	b.query = TractorQuery.Where.StatusIn(b.query, v)
	return b
}

// WhereStatusNotIn adds a WHERE status NOT IN (?) condition
func (b *TractorQueryBuilder) WhereStatusNotIn(v []domain.EquipmentStatus) *TractorQueryBuilder {
	b.query = TractorQuery.Where.StatusNotIn(b.query, v)
	return b
}

// WhereCodeEQ adds a WHERE code = ? condition
func (b *TractorQueryBuilder) WhereCodeEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CodeEQ(b.query, v)
	return b
}

// WhereCodeNEQ adds a WHERE code != ? condition
func (b *TractorQueryBuilder) WhereCodeNEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CodeNEQ(b.query, v)
	return b
}

// WhereCodeIn adds a WHERE code IN (?) condition
func (b *TractorQueryBuilder) WhereCodeIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CodeIn(b.query, v)
	return b
}

// WhereCodeNotIn adds a WHERE code NOT IN (?) condition
func (b *TractorQueryBuilder) WhereCodeNotIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CodeNotIn(b.query, v)
	return b
}

// WhereCodeContains adds a WHERE code LIKE ? condition
func (b *TractorQueryBuilder) WhereCodeContains(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CodeContains(b.query, v)
	return b
}

// WhereCodeHasPrefix adds a WHERE code LIKE ? condition
func (b *TractorQueryBuilder) WhereCodeHasPrefix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CodeHasPrefix(b.query, v)
	return b
}

// WhereCodeHasSuffix adds a WHERE code LIKE ? condition
func (b *TractorQueryBuilder) WhereCodeHasSuffix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CodeHasSuffix(b.query, v)
	return b
}

// WhereModelEQ adds a WHERE model = ? condition
func (b *TractorQueryBuilder) WhereModelEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.ModelEQ(b.query, v)
	return b
}

// WhereModelNEQ adds a WHERE model != ? condition
func (b *TractorQueryBuilder) WhereModelNEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.ModelNEQ(b.query, v)
	return b
}

// WhereModelIn adds a WHERE model IN (?) condition
func (b *TractorQueryBuilder) WhereModelIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.ModelIn(b.query, v)
	return b
}

// WhereModelNotIn adds a WHERE model NOT IN (?) condition
func (b *TractorQueryBuilder) WhereModelNotIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.ModelNotIn(b.query, v)
	return b
}

// WhereModelContains adds a WHERE model LIKE ? condition
func (b *TractorQueryBuilder) WhereModelContains(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.ModelContains(b.query, v)
	return b
}

// WhereModelHasPrefix adds a WHERE model LIKE ? condition
func (b *TractorQueryBuilder) WhereModelHasPrefix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.ModelHasPrefix(b.query, v)
	return b
}

// WhereModelHasSuffix adds a WHERE model LIKE ? condition
func (b *TractorQueryBuilder) WhereModelHasSuffix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.ModelHasSuffix(b.query, v)
	return b
}

// WhereMakeEQ adds a WHERE make = ? condition
func (b *TractorQueryBuilder) WhereMakeEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.MakeEQ(b.query, v)
	return b
}

// WhereMakeNEQ adds a WHERE make != ? condition
func (b *TractorQueryBuilder) WhereMakeNEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.MakeNEQ(b.query, v)
	return b
}

// WhereMakeIn adds a WHERE make IN (?) condition
func (b *TractorQueryBuilder) WhereMakeIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.MakeIn(b.query, v)
	return b
}

// WhereMakeNotIn adds a WHERE make NOT IN (?) condition
func (b *TractorQueryBuilder) WhereMakeNotIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.MakeNotIn(b.query, v)
	return b
}

// WhereMakeContains adds a WHERE make LIKE ? condition
func (b *TractorQueryBuilder) WhereMakeContains(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.MakeContains(b.query, v)
	return b
}

// WhereMakeHasPrefix adds a WHERE make LIKE ? condition
func (b *TractorQueryBuilder) WhereMakeHasPrefix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.MakeHasPrefix(b.query, v)
	return b
}

// WhereMakeHasSuffix adds a WHERE make LIKE ? condition
func (b *TractorQueryBuilder) WhereMakeHasSuffix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.MakeHasSuffix(b.query, v)
	return b
}

// WhereSearchVectorEQ adds a WHERE search_vector = ? condition
func (b *TractorQueryBuilder) WhereSearchVectorEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SearchVectorEQ(b.query, v)
	return b
}

// WhereSearchVectorNEQ adds a WHERE search_vector != ? condition
func (b *TractorQueryBuilder) WhereSearchVectorNEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SearchVectorNEQ(b.query, v)
	return b
}

// WhereSearchVectorIn adds a WHERE search_vector IN (?) condition
func (b *TractorQueryBuilder) WhereSearchVectorIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SearchVectorIn(b.query, v)
	return b
}

// WhereSearchVectorNotIn adds a WHERE search_vector NOT IN (?) condition
func (b *TractorQueryBuilder) WhereSearchVectorNotIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SearchVectorNotIn(b.query, v)
	return b
}

// WhereSearchVectorContains adds a WHERE search_vector LIKE ? condition
func (b *TractorQueryBuilder) WhereSearchVectorContains(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SearchVectorContains(b.query, v)
	return b
}

// WhereSearchVectorHasPrefix adds a WHERE search_vector LIKE ? condition
func (b *TractorQueryBuilder) WhereSearchVectorHasPrefix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SearchVectorHasPrefix(b.query, v)
	return b
}

// WhereSearchVectorHasSuffix adds a WHERE search_vector LIKE ? condition
func (b *TractorQueryBuilder) WhereSearchVectorHasSuffix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.SearchVectorHasSuffix(b.query, v)
	return b
}

// WhereRankEQ adds a WHERE rank = ? condition
func (b *TractorQueryBuilder) WhereRankEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RankEQ(b.query, v)
	return b
}

// WhereRankNEQ adds a WHERE rank != ? condition
func (b *TractorQueryBuilder) WhereRankNEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RankNEQ(b.query, v)
	return b
}

// WhereRankIn adds a WHERE rank IN (?) condition
func (b *TractorQueryBuilder) WhereRankIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RankIn(b.query, v)
	return b
}

// WhereRankNotIn adds a WHERE rank NOT IN (?) condition
func (b *TractorQueryBuilder) WhereRankNotIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RankNotIn(b.query, v)
	return b
}

// WhereRankContains adds a WHERE rank LIKE ? condition
func (b *TractorQueryBuilder) WhereRankContains(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RankContains(b.query, v)
	return b
}

// WhereRankHasPrefix adds a WHERE rank LIKE ? condition
func (b *TractorQueryBuilder) WhereRankHasPrefix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RankHasPrefix(b.query, v)
	return b
}

// WhereRankHasSuffix adds a WHERE rank LIKE ? condition
func (b *TractorQueryBuilder) WhereRankHasSuffix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RankHasSuffix(b.query, v)
	return b
}

// WhereRegistrationNumberEQ adds a WHERE registration_number = ? condition
func (b *TractorQueryBuilder) WhereRegistrationNumberEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationNumberEQ(b.query, v)
	return b
}

// WhereRegistrationNumberNEQ adds a WHERE registration_number != ? condition
func (b *TractorQueryBuilder) WhereRegistrationNumberNEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationNumberNEQ(b.query, v)
	return b
}

// WhereRegistrationNumberIn adds a WHERE registration_number IN (?) condition
func (b *TractorQueryBuilder) WhereRegistrationNumberIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationNumberIn(b.query, v)
	return b
}

// WhereRegistrationNumberNotIn adds a WHERE registration_number NOT IN (?) condition
func (b *TractorQueryBuilder) WhereRegistrationNumberNotIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationNumberNotIn(b.query, v)
	return b
}

// WhereRegistrationNumberContains adds a WHERE registration_number LIKE ? condition
func (b *TractorQueryBuilder) WhereRegistrationNumberContains(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationNumberContains(b.query, v)
	return b
}

// WhereRegistrationNumberHasPrefix adds a WHERE registration_number LIKE ? condition
func (b *TractorQueryBuilder) WhereRegistrationNumberHasPrefix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationNumberHasPrefix(b.query, v)
	return b
}

// WhereRegistrationNumberHasSuffix adds a WHERE registration_number LIKE ? condition
func (b *TractorQueryBuilder) WhereRegistrationNumberHasSuffix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationNumberHasSuffix(b.query, v)
	return b
}

// WhereLicensePlateNumberEQ adds a WHERE license_plate_number = ? condition
func (b *TractorQueryBuilder) WhereLicensePlateNumberEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.LicensePlateNumberEQ(b.query, v)
	return b
}

// WhereLicensePlateNumberNEQ adds a WHERE license_plate_number != ? condition
func (b *TractorQueryBuilder) WhereLicensePlateNumberNEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.LicensePlateNumberNEQ(b.query, v)
	return b
}

// WhereLicensePlateNumberIn adds a WHERE license_plate_number IN (?) condition
func (b *TractorQueryBuilder) WhereLicensePlateNumberIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.LicensePlateNumberIn(b.query, v)
	return b
}

// WhereLicensePlateNumberNotIn adds a WHERE license_plate_number NOT IN (?) condition
func (b *TractorQueryBuilder) WhereLicensePlateNumberNotIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.LicensePlateNumberNotIn(b.query, v)
	return b
}

// WhereLicensePlateNumberContains adds a WHERE license_plate_number LIKE ? condition
func (b *TractorQueryBuilder) WhereLicensePlateNumberContains(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.LicensePlateNumberContains(b.query, v)
	return b
}

// WhereLicensePlateNumberHasPrefix adds a WHERE license_plate_number LIKE ? condition
func (b *TractorQueryBuilder) WhereLicensePlateNumberHasPrefix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.LicensePlateNumberHasPrefix(b.query, v)
	return b
}

// WhereLicensePlateNumberHasSuffix adds a WHERE license_plate_number LIKE ? condition
func (b *TractorQueryBuilder) WhereLicensePlateNumberHasSuffix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.LicensePlateNumberHasSuffix(b.query, v)
	return b
}

// WhereVinEQ adds a WHERE vin = ? condition
func (b *TractorQueryBuilder) WhereVinEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VinEQ(b.query, v)
	return b
}

// WhereVinNEQ adds a WHERE vin != ? condition
func (b *TractorQueryBuilder) WhereVinNEQ(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VinNEQ(b.query, v)
	return b
}

// WhereVinIn adds a WHERE vin IN (?) condition
func (b *TractorQueryBuilder) WhereVinIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VinIn(b.query, v)
	return b
}

// WhereVinNotIn adds a WHERE vin NOT IN (?) condition
func (b *TractorQueryBuilder) WhereVinNotIn(v []string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VinNotIn(b.query, v)
	return b
}

// WhereVinContains adds a WHERE vin LIKE ? condition
func (b *TractorQueryBuilder) WhereVinContains(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VinContains(b.query, v)
	return b
}

// WhereVinHasPrefix adds a WHERE vin LIKE ? condition
func (b *TractorQueryBuilder) WhereVinHasPrefix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VinHasPrefix(b.query, v)
	return b
}

// WhereVinHasSuffix adds a WHERE vin LIKE ? condition
func (b *TractorQueryBuilder) WhereVinHasSuffix(v string) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VinHasSuffix(b.query, v)
	return b
}

// WhereYearEQ adds a WHERE year = ? condition
func (b *TractorQueryBuilder) WhereYearEQ(v *int) *TractorQueryBuilder {
	b.query = TractorQuery.Where.YearEQ(b.query, v)
	return b
}

// WhereYearNEQ adds a WHERE year != ? condition
func (b *TractorQueryBuilder) WhereYearNEQ(v *int) *TractorQueryBuilder {
	b.query = TractorQuery.Where.YearNEQ(b.query, v)
	return b
}

// WhereYearIn adds a WHERE year IN (?) condition
func (b *TractorQueryBuilder) WhereYearIn(v []*int) *TractorQueryBuilder {
	b.query = TractorQuery.Where.YearIn(b.query, v)
	return b
}

// WhereYearNotIn adds a WHERE year NOT IN (?) condition
func (b *TractorQueryBuilder) WhereYearNotIn(v []*int) *TractorQueryBuilder {
	b.query = TractorQuery.Where.YearNotIn(b.query, v)
	return b
}

// WhereRegistrationExpiryEQ adds a WHERE registration_expiry = ? condition
func (b *TractorQueryBuilder) WhereRegistrationExpiryEQ(v *int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationExpiryEQ(b.query, v)
	return b
}

// WhereRegistrationExpiryNEQ adds a WHERE registration_expiry != ? condition
func (b *TractorQueryBuilder) WhereRegistrationExpiryNEQ(v *int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationExpiryNEQ(b.query, v)
	return b
}

// WhereRegistrationExpiryIn adds a WHERE registration_expiry IN (?) condition
func (b *TractorQueryBuilder) WhereRegistrationExpiryIn(v []*int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationExpiryIn(b.query, v)
	return b
}

// WhereRegistrationExpiryNotIn adds a WHERE registration_expiry NOT IN (?) condition
func (b *TractorQueryBuilder) WhereRegistrationExpiryNotIn(v []*int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.RegistrationExpiryNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *TractorQueryBuilder) WhereVersionEQ(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *TractorQueryBuilder) WhereVersionNEQ(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *TractorQueryBuilder) WhereVersionGT(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *TractorQueryBuilder) WhereVersionGTE(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *TractorQueryBuilder) WhereVersionLT(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *TractorQueryBuilder) WhereVersionLTE(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *TractorQueryBuilder) WhereVersionIn(v []int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *TractorQueryBuilder) WhereVersionNotIn(v []int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *TractorQueryBuilder) WhereCreatedAtEQ(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *TractorQueryBuilder) WhereCreatedAtNEQ(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *TractorQueryBuilder) WhereCreatedAtGT(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *TractorQueryBuilder) WhereCreatedAtGTE(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *TractorQueryBuilder) WhereCreatedAtLT(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *TractorQueryBuilder) WhereCreatedAtLTE(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *TractorQueryBuilder) WhereCreatedAtIn(v []int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *TractorQueryBuilder) WhereCreatedAtNotIn(v []int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *TractorQueryBuilder) WhereUpdatedAtEQ(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *TractorQueryBuilder) WhereUpdatedAtNEQ(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *TractorQueryBuilder) WhereUpdatedAtGT(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *TractorQueryBuilder) WhereUpdatedAtGTE(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *TractorQueryBuilder) WhereUpdatedAtLT(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *TractorQueryBuilder) WhereUpdatedAtLTE(v int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *TractorQueryBuilder) WhereUpdatedAtIn(v []int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *TractorQueryBuilder) WhereUpdatedAtNotIn(v []int64) *TractorQueryBuilder {
	b.query = TractorQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *TractorQueryBuilder) WhereTenant(orgID, buID pulid.ID) *TractorQueryBuilder {
	b.query = TractorQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *TractorQueryBuilder) WhereGroup(sep string, fn func(*TractorQueryBuilder) *TractorQueryBuilder) *TractorQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &TractorQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *TractorQueryBuilder) Where(query string, args ...interface{}) *TractorQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *TractorQueryBuilder) OrderBy(column string, desc ...bool) *TractorQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(TractorQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *TractorQueryBuilder) Limit(n int) *TractorQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *TractorQueryBuilder) Offset(n int) *TractorQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *TractorQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *TractorQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *TractorQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *TractorQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *TractorQueryBuilder) All(ctx context.Context) ([]*Tractor, error) {
	var entities []*Tractor
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *TractorQueryBuilder) AllWithCount(ctx context.Context) ([]*Tractor, int, error) {
	var entities []*Tractor
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *TractorQueryBuilder) One(ctx context.Context) (*Tractor, error) {
	entity := new(Tractor)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *TractorQueryBuilder) First(ctx context.Context) (*Tractor, error) {
	entity := new(Tractor)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// TractorBuild creates a chainable query builder
func TractorBuild(db bun.IDB) *TractorQueryBuilder {
	return NewTractorQuery(db)
}

// Relationship loading methods

// LoadBusinessUnit loads the BusinessUnit relationship
func (b *TractorQueryBuilder) LoadBusinessUnit() *TractorQueryBuilder {
	b.query = b.query.Relation("BusinessUnit")
	return b
}

// LoadOrganization loads the Organization relationship
func (b *TractorQueryBuilder) LoadOrganization() *TractorQueryBuilder {
	b.query = b.query.Relation("Organization")
	return b
}

// LoadPrimaryWorker loads the PrimaryWorker relationship
func (b *TractorQueryBuilder) LoadPrimaryWorker() *TractorQueryBuilder {
	b.query = b.query.Relation("PrimaryWorker")
	return b
}

// LoadSecondaryWorker loads the SecondaryWorker relationship
func (b *TractorQueryBuilder) LoadSecondaryWorker() *TractorQueryBuilder {
	b.query = b.query.Relation("SecondaryWorker")
	return b
}

// LoadEquipmentType loads the EquipmentType relationship
func (b *TractorQueryBuilder) LoadEquipmentType() *TractorQueryBuilder {
	b.query = b.query.Relation("EquipmentType")
	return b
}

// LoadEquipmentManufacturer loads the EquipmentManufacturer relationship
func (b *TractorQueryBuilder) LoadEquipmentManufacturer() *TractorQueryBuilder {
	b.query = b.query.Relation("EquipmentManufacturer")
	return b
}

// LoadState loads the State relationship
func (b *TractorQueryBuilder) LoadState() *TractorQueryBuilder {
	b.query = b.query.Relation("State")
	return b
}

// LoadFleetCode loads the FleetCode relationship
func (b *TractorQueryBuilder) LoadFleetCode() *TractorQueryBuilder {
	b.query = b.query.Relation("FleetCode")
	return b
}

// LoadAllRelations loads all relationships for Tractor
func (b *TractorQueryBuilder) LoadAllRelations() *TractorQueryBuilder {
	b.LoadBusinessUnit()
	b.LoadOrganization()
	b.LoadPrimaryWorker()
	b.LoadSecondaryWorker()
	b.LoadEquipmentType()
	b.LoadEquipmentManufacturer()
	b.LoadState()
	b.LoadFleetCode()
	return b
}

// TractorRelationChain provides a fluent API for building nested relationship chains
type TractorRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewTractorRelationChain creates a new relation chain builder
func NewTractorRelationChain() *TractorRelationChain {
	return &TractorRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *TractorRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *TractorRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *TractorRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *TractorRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithBusinessUnit creates a relation chain starting with BusinessUnit
func (b *TractorQueryBuilder) WithBusinessUnit() *TractorRelationChainBuilder {
	chain := &TractorRelationChainBuilder{
		parent: b,
		chain:  NewTractorRelationChain(),
	}
	chain.chain.Add("BusinessUnit")
	return chain
}

// WithOrganization creates a relation chain starting with Organization
func (b *TractorQueryBuilder) WithOrganization() *TractorRelationChainBuilder {
	chain := &TractorRelationChainBuilder{
		parent: b,
		chain:  NewTractorRelationChain(),
	}
	chain.chain.Add("Organization")
	return chain
}

// WithPrimaryWorker creates a relation chain starting with PrimaryWorker
func (b *TractorQueryBuilder) WithPrimaryWorker() *TractorRelationChainBuilder {
	chain := &TractorRelationChainBuilder{
		parent: b,
		chain:  NewTractorRelationChain(),
	}
	chain.chain.Add("PrimaryWorker")
	return chain
}

// WithSecondaryWorker creates a relation chain starting with SecondaryWorker
func (b *TractorQueryBuilder) WithSecondaryWorker() *TractorRelationChainBuilder {
	chain := &TractorRelationChainBuilder{
		parent: b,
		chain:  NewTractorRelationChain(),
	}
	chain.chain.Add("SecondaryWorker")
	return chain
}

// WithEquipmentType creates a relation chain starting with EquipmentType
func (b *TractorQueryBuilder) WithEquipmentType() *TractorRelationChainBuilder {
	chain := &TractorRelationChainBuilder{
		parent: b,
		chain:  NewTractorRelationChain(),
	}
	chain.chain.Add("EquipmentType")
	return chain
}

// WithEquipmentManufacturer creates a relation chain starting with EquipmentManufacturer
func (b *TractorQueryBuilder) WithEquipmentManufacturer() *TractorRelationChainBuilder {
	chain := &TractorRelationChainBuilder{
		parent: b,
		chain:  NewTractorRelationChain(),
	}
	chain.chain.Add("EquipmentManufacturer")
	return chain
}

// WithState creates a relation chain starting with State
func (b *TractorQueryBuilder) WithState() *TractorRelationChainBuilder {
	chain := &TractorRelationChainBuilder{
		parent: b,
		chain:  NewTractorRelationChain(),
	}
	chain.chain.Add("State")
	return chain
}

// WithFleetCode creates a relation chain starting with FleetCode
func (b *TractorQueryBuilder) WithFleetCode() *TractorRelationChainBuilder {
	chain := &TractorRelationChainBuilder{
		parent: b,
		chain:  NewTractorRelationChain(),
	}
	chain.chain.Add("FleetCode")
	return chain
}

// TractorRelationChainBuilder provides fluent API for building nested relations
type TractorRelationChainBuilder struct {
	parent *TractorQueryBuilder
	chain  *TractorRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *TractorRelationChainBuilder) Load() *TractorQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *TractorRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *TractorRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *TractorRelationChainBuilder) OrderBy(order string) *TractorRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *TractorRelationChainBuilder) Where(condition string, args ...interface{}) *TractorRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
