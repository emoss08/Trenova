// Code generated by gen-trenova. DO NOT EDIT.

package consolidation

import (
	"context"

	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// consolidationSequenceFieldConfig provides field configuration for ConsolidationSequence
type consolidationSequenceFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// ConsolidationSequenceQuery provides type-safe query helpers and constants
var ConsolidationSequenceQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID              string
		OrganizationID  string
		BusinessUnitID  string
		Year            string
		Month           string
		CurrentSequence string
		Version         string
		CreatedAt       string
		UpdatedAt       string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		YearEQ               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearNEQ              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearIn               func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		YearNotIn            func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		YearGT               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearGTE              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearLT               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearLTE              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthEQ              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthNEQ             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthIn              func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		MonthNotIn           func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		MonthGT              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthGTE             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthLT              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthLTE             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		CurrentSequenceEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceNEQ   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CurrentSequenceNotIn func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CurrentSequenceGT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceGTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceLT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceLTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
		Tenant func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]consolidationSequenceFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "consolidation_sequences",
	Alias:    "cs",
	IDPrefix: "cs_",

	// Field names
	Field: struct {
		ID              string
		OrganizationID  string
		BusinessUnitID  string
		Year            string
		Month           string
		CurrentSequence string
		Version         string
		CreatedAt       string
		UpdatedAt       string
	}{
		ID:              "id",
		OrganizationID:  "organization_id",
		BusinessUnitID:  "business_unit_id",
		Year:            "year",
		Month:           "month",
		CurrentSequence: "current_sequence",
		Version:         "version",
		CreatedAt:       "created_at",
		UpdatedAt:       "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "cs." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "cs." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                 func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                 func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn              func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		OrganizationIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		OrganizationIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDEQ     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDNEQ    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		BusinessUnitIDIn     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		BusinessUnitIDNotIn  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		YearEQ               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearNEQ              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearIn               func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		YearNotIn            func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		YearGT               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearGTE              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearLT               func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		YearLTE              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthEQ              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthNEQ             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthIn              func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		MonthNotIn           func(q *bun.SelectQuery, v []int16) *bun.SelectQuery
		MonthGT              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthGTE             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthLT              func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		MonthLTE             func(q *bun.SelectQuery, v int16) *bun.SelectQuery
		CurrentSequenceEQ    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceNEQ   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceIn    func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CurrentSequenceNotIn func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CurrentSequenceGT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceGTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceLT    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CurrentSequenceLTE   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionEQ            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn            func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn         func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT            func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE           func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn          func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn       func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT          func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE         func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		Tenant               func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.id"), bun.In(v))
		},
		OrganizationIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.organization_id"), v)
		},
		OrganizationIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.organization_id"), v)
		},
		OrganizationIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.organization_id"), bun.In(v))
		},
		OrganizationIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.organization_id"), bun.In(v))
		},
		BusinessUnitIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.business_unit_id"), v)
		},
		BusinessUnitIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.business_unit_id"), v)
		},
		BusinessUnitIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.business_unit_id"), bun.In(v))
		},
		BusinessUnitIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.business_unit_id"), bun.In(v))
		},
		YearEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.year"), v)
		},
		YearNEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.year"), v)
		},
		YearIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.year"), bun.In(v))
		},
		YearNotIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.year"), bun.In(v))
		},
		YearGT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.year"), v)
		},
		YearGTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.year"), v)
		},
		YearLT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.year"), v)
		},
		YearLTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.year"), v)
		},
		MonthEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.month"), v)
		},
		MonthNEQ: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.month"), v)
		},
		MonthIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.month"), bun.In(v))
		},
		MonthNotIn: func(q *bun.SelectQuery, v []int16) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.month"), bun.In(v))
		},
		MonthGT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.month"), v)
		},
		MonthGTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.month"), v)
		},
		MonthLT: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.month"), v)
		},
		MonthLTE: func(q *bun.SelectQuery, v int16) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.month"), v)
		},
		CurrentSequenceEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.current_sequence"), v)
		},
		CurrentSequenceNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.current_sequence"), v)
		},
		CurrentSequenceIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.current_sequence"), bun.In(v))
		},
		CurrentSequenceNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.current_sequence"), bun.In(v))
		},
		CurrentSequenceGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.current_sequence"), v)
		},
		CurrentSequenceGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.current_sequence"), v)
		},
		CurrentSequenceLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.current_sequence"), v)
		},
		CurrentSequenceLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.current_sequence"), v)
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("cs.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("cs.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("cs.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("cs.updated_at"), v)
		},
		Tenant: func(q *bun.SelectQuery, orgID, buID pulid.ID) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("cs.organization_id"), orgID).
				Where("? = ?", bun.Ident("cs.business_unit_id"), buID)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("cs.id"), id).
				Where("? = ?", bun.Ident("cs.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "cs." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"cs.created_at DESC",
			}
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "cs.created_at DESC"
			}
			return "cs.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "cs.updated_at DESC"
			}
			return "cs.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]consolidationSequenceFieldConfig {
		return map[string]consolidationSequenceFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cs.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cs.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cs.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"year": {
				Name:       "year",
				Column:     "cs.year",
				Sortable:   false,
				Filterable: false,
			},
			"month": {
				Name:       "month",
				Column:     "cs.month",
				Sortable:   false,
				Filterable: false,
			},
			"current_sequence": {
				Name:       "current_sequence",
				Column:     "cs.current_sequence",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cs.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cs.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cs.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]consolidationSequenceFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cs.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cs.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cs.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"year": {
				Name:       "year",
				Column:     "cs.year",
				Sortable:   false,
				Filterable: false,
			},
			"month": {
				Name:       "month",
				Column:     "cs.month",
				Sortable:   false,
				Filterable: false,
			},
			"current_sequence": {
				Name:       "current_sequence",
				Column:     "cs.current_sequence",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cs.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cs.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cs.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]consolidationSequenceFieldConfig{
			"id": {
				Name:       "id",
				Column:     "cs.id",
				Sortable:   false,
				Filterable: true,
			},
			"organization_id": {
				Name:       "organization_id",
				Column:     "cs.organization_id",
				Sortable:   false,
				Filterable: true,
			},
			"business_unit_id": {
				Name:       "business_unit_id",
				Column:     "cs.business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"year": {
				Name:       "year",
				Column:     "cs.year",
				Sortable:   false,
				Filterable: false,
			},
			"month": {
				Name:       "month",
				Column:     "cs.month",
				Sortable:   false,
				Filterable: false,
			},
			"current_sequence": {
				Name:       "current_sequence",
				Column:     "cs.current_sequence",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "cs.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "cs.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "cs.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// ConsolidationSequenceQueryBuilder provides a fluent interface for building queries
type ConsolidationSequenceQueryBuilder struct {
	query *bun.SelectQuery
}

// NewConsolidationSequenceQuery creates a new query builder
func NewConsolidationSequenceQuery(db bun.IDB) *ConsolidationSequenceQueryBuilder {
	return &ConsolidationSequenceQueryBuilder{
		query: db.NewSelect().Model((*ConsolidationSequence)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func ConsolidationSequenceFromQuery(q *bun.SelectQuery) *ConsolidationSequenceQueryBuilder {
	return &ConsolidationSequenceQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *ConsolidationSequenceQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *ConsolidationSequenceQueryBuilder) Model(model interface{}) *ConsolidationSequenceQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereIDEQ(v pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereIDNEQ(v pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereIDIn(v []pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereIDNotIn(v []pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereOrganizationIDEQ adds a WHERE organization_id = ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereOrganizationIDEQ(v pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.OrganizationIDEQ(b.query, v)
	return b
}

// WhereOrganizationIDNEQ adds a WHERE organization_id != ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereOrganizationIDNEQ(v pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.OrganizationIDNEQ(b.query, v)
	return b
}

// WhereOrganizationIDIn adds a WHERE organization_id IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereOrganizationIDIn(v []pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.OrganizationIDIn(b.query, v)
	return b
}

// WhereOrganizationIDNotIn adds a WHERE organization_id NOT IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereOrganizationIDNotIn(v []pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.OrganizationIDNotIn(b.query, v)
	return b
}

// WhereBusinessUnitIDEQ adds a WHERE business_unit_id = ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereBusinessUnitIDEQ(v pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.BusinessUnitIDEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDNEQ adds a WHERE business_unit_id != ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereBusinessUnitIDNEQ(v pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.BusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereBusinessUnitIDIn adds a WHERE business_unit_id IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereBusinessUnitIDIn(v []pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.BusinessUnitIDIn(b.query, v)
	return b
}

// WhereBusinessUnitIDNotIn adds a WHERE business_unit_id NOT IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereBusinessUnitIDNotIn(v []pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.BusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereYearEQ adds a WHERE year = ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereYearEQ(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.YearEQ(b.query, v)
	return b
}

// WhereYearNEQ adds a WHERE year != ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereYearNEQ(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.YearNEQ(b.query, v)
	return b
}

// WhereYearGT adds a WHERE year > ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereYearGT(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.YearGT(b.query, v)
	return b
}

// WhereYearGTE adds a WHERE year >= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereYearGTE(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.YearGTE(b.query, v)
	return b
}

// WhereYearLT adds a WHERE year < ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereYearLT(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.YearLT(b.query, v)
	return b
}

// WhereYearLTE adds a WHERE year <= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereYearLTE(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.YearLTE(b.query, v)
	return b
}

// WhereYearIn adds a WHERE year IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereYearIn(v []int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.YearIn(b.query, v)
	return b
}

// WhereYearNotIn adds a WHERE year NOT IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereYearNotIn(v []int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.YearNotIn(b.query, v)
	return b
}

// WhereMonthEQ adds a WHERE month = ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereMonthEQ(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.MonthEQ(b.query, v)
	return b
}

// WhereMonthNEQ adds a WHERE month != ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereMonthNEQ(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.MonthNEQ(b.query, v)
	return b
}

// WhereMonthGT adds a WHERE month > ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereMonthGT(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.MonthGT(b.query, v)
	return b
}

// WhereMonthGTE adds a WHERE month >= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereMonthGTE(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.MonthGTE(b.query, v)
	return b
}

// WhereMonthLT adds a WHERE month < ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereMonthLT(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.MonthLT(b.query, v)
	return b
}

// WhereMonthLTE adds a WHERE month <= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereMonthLTE(v int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.MonthLTE(b.query, v)
	return b
}

// WhereMonthIn adds a WHERE month IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereMonthIn(v []int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.MonthIn(b.query, v)
	return b
}

// WhereMonthNotIn adds a WHERE month NOT IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereMonthNotIn(v []int16) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.MonthNotIn(b.query, v)
	return b
}

// WhereCurrentSequenceEQ adds a WHERE current_sequence = ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCurrentSequenceEQ(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CurrentSequenceEQ(b.query, v)
	return b
}

// WhereCurrentSequenceNEQ adds a WHERE current_sequence != ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCurrentSequenceNEQ(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CurrentSequenceNEQ(b.query, v)
	return b
}

// WhereCurrentSequenceGT adds a WHERE current_sequence > ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCurrentSequenceGT(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CurrentSequenceGT(b.query, v)
	return b
}

// WhereCurrentSequenceGTE adds a WHERE current_sequence >= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCurrentSequenceGTE(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CurrentSequenceGTE(b.query, v)
	return b
}

// WhereCurrentSequenceLT adds a WHERE current_sequence < ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCurrentSequenceLT(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CurrentSequenceLT(b.query, v)
	return b
}

// WhereCurrentSequenceLTE adds a WHERE current_sequence <= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCurrentSequenceLTE(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CurrentSequenceLTE(b.query, v)
	return b
}

// WhereCurrentSequenceIn adds a WHERE current_sequence IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereCurrentSequenceIn(v []int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CurrentSequenceIn(b.query, v)
	return b
}

// WhereCurrentSequenceNotIn adds a WHERE current_sequence NOT IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereCurrentSequenceNotIn(v []int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CurrentSequenceNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereVersionEQ(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereVersionNEQ(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereVersionGT(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereVersionGTE(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereVersionLT(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereVersionLTE(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereVersionIn(v []int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereVersionNotIn(v []int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCreatedAtEQ(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCreatedAtNEQ(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCreatedAtGT(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCreatedAtGTE(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCreatedAtLT(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereCreatedAtLTE(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereCreatedAtIn(v []int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereCreatedAtNotIn(v []int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereUpdatedAtEQ(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereUpdatedAtNEQ(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereUpdatedAtGT(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereUpdatedAtGTE(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereUpdatedAtLT(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *ConsolidationSequenceQueryBuilder) WhereUpdatedAtLTE(v int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereUpdatedAtIn(v []int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *ConsolidationSequenceQueryBuilder) WhereUpdatedAtNotIn(v []int64) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *ConsolidationSequenceQueryBuilder) WhereTenant(orgID, buID pulid.ID) *ConsolidationSequenceQueryBuilder {
	b.query = ConsolidationSequenceQuery.Where.Tenant(b.query, orgID, buID)
	return b
}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *ConsolidationSequenceQueryBuilder) WhereGroup(sep string, fn func(*ConsolidationSequenceQueryBuilder) *ConsolidationSequenceQueryBuilder) *ConsolidationSequenceQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &ConsolidationSequenceQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *ConsolidationSequenceQueryBuilder) Where(query string, args ...interface{}) *ConsolidationSequenceQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *ConsolidationSequenceQueryBuilder) OrderBy(column string, desc ...bool) *ConsolidationSequenceQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(ConsolidationSequenceQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *ConsolidationSequenceQueryBuilder) Limit(n int) *ConsolidationSequenceQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *ConsolidationSequenceQueryBuilder) Offset(n int) *ConsolidationSequenceQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *ConsolidationSequenceQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *ConsolidationSequenceQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *ConsolidationSequenceQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *ConsolidationSequenceQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *ConsolidationSequenceQueryBuilder) All(ctx context.Context) ([]*ConsolidationSequence, error) {
	var entities []*ConsolidationSequence
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *ConsolidationSequenceQueryBuilder) AllWithCount(ctx context.Context) ([]*ConsolidationSequence, int, error) {
	var entities []*ConsolidationSequence
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *ConsolidationSequenceQueryBuilder) One(ctx context.Context) (*ConsolidationSequence, error) {
	entity := new(ConsolidationSequence)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *ConsolidationSequenceQueryBuilder) First(ctx context.Context) (*ConsolidationSequence, error) {
	entity := new(ConsolidationSequence)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// ConsolidationSequenceBuild creates a chainable query builder
func ConsolidationSequenceBuild(db bun.IDB) *ConsolidationSequenceQueryBuilder {
	return NewConsolidationSequenceQuery(db)
}

// Relationship loading methods

// ConsolidationSequenceRelationChain provides a fluent API for building nested relationship chains
type ConsolidationSequenceRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewConsolidationSequenceRelationChain creates a new relation chain builder
func NewConsolidationSequenceRelationChain() *ConsolidationSequenceRelationChain {
	return &ConsolidationSequenceRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *ConsolidationSequenceRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ConsolidationSequenceRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *ConsolidationSequenceRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *ConsolidationSequenceRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// ConsolidationSequenceRelationChainBuilder provides fluent API for building nested relations
type ConsolidationSequenceRelationChainBuilder struct {
	parent *ConsolidationSequenceQueryBuilder
	chain  *ConsolidationSequenceRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *ConsolidationSequenceRelationChainBuilder) Load() *ConsolidationSequenceQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *ConsolidationSequenceRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *ConsolidationSequenceRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *ConsolidationSequenceRelationChainBuilder) OrderBy(order string) *ConsolidationSequenceRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *ConsolidationSequenceRelationChainBuilder) Where(condition string, args ...interface{}) *ConsolidationSequenceRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
