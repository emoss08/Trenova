// Code generated by gen-trenova. DO NOT EDIT.

package businessunit

import (
	"context"

	"github.com/emoss08/trenova/shared/pulid"
	"github.com/uptrace/bun"
)

// businessUnitFieldConfig provides field configuration for BusinessUnit
type businessUnitFieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// BusinessUnitQuery provides type-safe query helpers and constants
var BusinessUnitQuery = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
		ID                   string
		StateID              string
		ParentBusinessUnitID string
		Name                 string
		Code                 string
		Description          string
		PrimaryContact       string
		PrimaryEmail         string
		PrimaryPhone         string
		AddressLine1         string
		AddressLine2         string
		City                 string
		PostalCode           string
		Timezone             string
		Locale               string
		TaxID                string
		Metadata             string
		Version              string
		CreatedAt            string
		UpdatedAt            string
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
		IDEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ParentBusinessUnitIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		NameEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryContactNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryContactGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryEmailNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryEmailGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryPhoneNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryPhoneGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LocaleNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LocaleGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TaxIDNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TaxIDGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MetadataEQ                    func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ                   func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn                    func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn                 func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		VersionEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery

		// Tenant helpers if both fields exist
	}

	// UPDATE clause helpers
	Update struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}

	// Field configuration
	FieldConfig  func() map[string]businessUnitFieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
	// Relationship helpers
	Relations struct {
		ParentBusinessUnit string
		State              string
	}
}{
	// Table and alias constants
	Table:    "business_units",
	Alias:    "bu",
	IDPrefix: "bu_",

	// Field names
	Field: struct {
		ID                   string
		StateID              string
		ParentBusinessUnitID string
		Name                 string
		Code                 string
		Description          string
		PrimaryContact       string
		PrimaryEmail         string
		PrimaryPhone         string
		AddressLine1         string
		AddressLine2         string
		City                 string
		PostalCode           string
		Timezone             string
		Locale               string
		TaxID                string
		Metadata             string
		Version              string
		CreatedAt            string
		UpdatedAt            string
	}{
		ID:                   "id",
		StateID:              "state_id",
		ParentBusinessUnitID: "parent_business_unit_id",
		Name:                 "name",
		Code:                 "code",
		Description:          "description",
		PrimaryContact:       "primary_contact",
		PrimaryEmail:         "primary_email",
		PrimaryPhone:         "primary_phone",
		AddressLine1:         "address_line1",
		AddressLine2:         "address_line2",
		City:                 "city",
		PostalCode:           "postal_code",
		Timezone:             "timezone",
		Locale:               "locale",
		TaxID:                "tax_id",
		Metadata:             "metadata",
		Version:              "version",
		CreatedAt:            "created_at",
		UpdatedAt:            "updated_at",
	},

	// Column helpers
	Column: func(field string) string {
		return "bu." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "bu." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
		IDEQ                          func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDNEQ                         func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		IDIn                          func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		IDNotIn                       func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDEQ                     func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDNEQ                    func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery
		StateIDIn                     func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		StateIDNotIn                  func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDEQ        func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDNEQ       func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDIn        func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDNotIn     func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery
		ParentBusinessUnitIDIsNull    func(q *bun.SelectQuery) *bun.SelectQuery
		ParentBusinessUnitIDIsNotNull func(q *bun.SelectQuery) *bun.SelectQuery
		NameEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		NameGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		NameHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CodeGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CodeHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionNEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionNotIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		DescriptionGT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionGTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLT                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionLTE                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionContains           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasPrefix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		DescriptionHasSuffix          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactEQ              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactNEQ             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactIn              func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryContactNotIn           func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryContactGT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactGTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactLT              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactLTE             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactContains        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactHasPrefix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryContactHasSuffix       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryEmailNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryEmailGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryEmailHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneEQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneNEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneIn                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryPhoneNotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PrimaryPhoneGT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneGTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneLT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneLTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneContains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneHasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PrimaryPhoneHasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1EQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1NEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1In                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1NotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine1GT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1GTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1LTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1Contains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine1HasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2EQ                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2NEQ               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2In                func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2NotIn             func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		AddressLine2GT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2GTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LT                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2LTE               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2Contains          func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasPrefix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		AddressLine2HasSuffix         func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityEQ                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityNEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityIn                        func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityNotIn                     func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		CityGT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityGTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLT                        func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityLTE                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityContains                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasPrefix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		CityHasSuffix                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeEQ                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeNEQ                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeIn                  func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeNotIn               func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		PostalCodeGT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeGTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLT                  func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeLTE                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeContains            func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasPrefix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		PostalCodeHasSuffix           func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneEQ                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneNEQ                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneNotIn                 func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TimezoneGT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneGTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLT                    func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneLTE                   func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneContains              func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasPrefix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TimezoneHasSuffix             func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleNEQ                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleIn                      func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LocaleNotIn                   func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		LocaleGT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleGTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleLT                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleLTE                     func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleContains                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleHasPrefix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		LocaleHasSuffix               func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDEQ                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDNEQ                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDIn                       func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TaxIDNotIn                    func(q *bun.SelectQuery, v []string) *bun.SelectQuery
		TaxIDGT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDGTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDLT                       func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDLTE                      func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDContains                 func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDHasPrefix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		TaxIDHasSuffix                func(q *bun.SelectQuery, v string) *bun.SelectQuery
		MetadataEQ                    func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataNEQ                   func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery
		MetadataIn                    func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		MetadataNotIn                 func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery
		VersionEQ                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionNEQ                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionIn                     func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionNotIn                  func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		VersionGT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionGTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLT                     func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		VersionLTE                    func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		CreatedAtGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		CreatedAtLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtEQ                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtNEQ                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtIn                   func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtNotIn                func(q *bun.SelectQuery, v []int64) *bun.SelectQuery
		UpdatedAtGT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtGTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLT                   func(q *bun.SelectQuery, v int64) *bun.SelectQuery
		UpdatedAtLTE                  func(q *bun.SelectQuery, v int64) *bun.SelectQuery
	}{
		IDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.id"), v)
		},
		IDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.id"), v)
		},
		IDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.id"), bun.In(v))
		},
		IDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.id"), bun.In(v))
		},
		StateIDEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.state_id"), v)
		},
		StateIDNEQ: func(q *bun.SelectQuery, v pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.state_id"), v)
		},
		StateIDIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.state_id"), bun.In(v))
		},
		StateIDNotIn: func(q *bun.SelectQuery, v []pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.state_id"), bun.In(v))
		},
		ParentBusinessUnitIDEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.parent_business_unit_id"), v)
		},
		ParentBusinessUnitIDNEQ: func(q *bun.SelectQuery, v *pulid.ID) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.parent_business_unit_id"), v)
		},
		ParentBusinessUnitIDIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.parent_business_unit_id"), bun.In(v))
		},
		ParentBusinessUnitIDNotIn: func(q *bun.SelectQuery, v []*pulid.ID) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.parent_business_unit_id"), bun.In(v))
		},
		ParentBusinessUnitIDIsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("bu.parent_business_unit_id"))
		},
		ParentBusinessUnitIDIsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("bu.parent_business_unit_id"))
		},
		NameEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.name"), v)
		},
		NameNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.name"), v)
		},
		NameIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.name"), bun.In(v))
		},
		NameNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.name"), bun.In(v))
		},
		NameGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.name"), v)
		},
		NameGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.name"), v)
		},
		NameLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.name"), v)
		},
		NameLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.name"), v)
		},
		NameContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.name"), "%"+v+"%")
		},
		NameHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.name"), v+"%")
		},
		NameHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.name"), "%"+v)
		},
		CodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.code"), v)
		},
		CodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.code"), v)
		},
		CodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.code"), bun.In(v))
		},
		CodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.code"), bun.In(v))
		},
		CodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.code"), v)
		},
		CodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.code"), v)
		},
		CodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.code"), v)
		},
		CodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.code"), v)
		},
		CodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.code"), "%"+v+"%")
		},
		CodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.code"), v+"%")
		},
		CodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.code"), "%"+v)
		},
		DescriptionEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.description"), v)
		},
		DescriptionNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.description"), v)
		},
		DescriptionIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.description"), bun.In(v))
		},
		DescriptionNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.description"), bun.In(v))
		},
		DescriptionGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.description"), v)
		},
		DescriptionGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.description"), v)
		},
		DescriptionLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.description"), v)
		},
		DescriptionLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.description"), v)
		},
		DescriptionContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.description"), "%"+v+"%")
		},
		DescriptionHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.description"), v+"%")
		},
		DescriptionHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.description"), "%"+v)
		},
		PrimaryContactEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.primary_contact"), v)
		},
		PrimaryContactNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.primary_contact"), v)
		},
		PrimaryContactIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.primary_contact"), bun.In(v))
		},
		PrimaryContactNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.primary_contact"), bun.In(v))
		},
		PrimaryContactGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.primary_contact"), v)
		},
		PrimaryContactGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.primary_contact"), v)
		},
		PrimaryContactLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.primary_contact"), v)
		},
		PrimaryContactLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.primary_contact"), v)
		},
		PrimaryContactContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.primary_contact"), "%"+v+"%")
		},
		PrimaryContactHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.primary_contact"), v+"%")
		},
		PrimaryContactHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.primary_contact"), "%"+v)
		},
		PrimaryEmailEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.primary_email"), v)
		},
		PrimaryEmailNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.primary_email"), v)
		},
		PrimaryEmailIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.primary_email"), bun.In(v))
		},
		PrimaryEmailNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.primary_email"), bun.In(v))
		},
		PrimaryEmailGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.primary_email"), v)
		},
		PrimaryEmailGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.primary_email"), v)
		},
		PrimaryEmailLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.primary_email"), v)
		},
		PrimaryEmailLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.primary_email"), v)
		},
		PrimaryEmailContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.primary_email"), "%"+v+"%")
		},
		PrimaryEmailHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.primary_email"), v+"%")
		},
		PrimaryEmailHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.primary_email"), "%"+v)
		},
		PrimaryPhoneEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.primary_phone"), v)
		},
		PrimaryPhoneNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.primary_phone"), v)
		},
		PrimaryPhoneIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.primary_phone"), bun.In(v))
		},
		PrimaryPhoneNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.primary_phone"), bun.In(v))
		},
		PrimaryPhoneGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.primary_phone"), v)
		},
		PrimaryPhoneGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.primary_phone"), v)
		},
		PrimaryPhoneLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.primary_phone"), v)
		},
		PrimaryPhoneLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.primary_phone"), v)
		},
		PrimaryPhoneContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.primary_phone"), "%"+v+"%")
		},
		PrimaryPhoneHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.primary_phone"), v+"%")
		},
		PrimaryPhoneHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.primary_phone"), "%"+v)
		},
		AddressLine1EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.address_line1"), v)
		},
		AddressLine1NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.address_line1"), v)
		},
		AddressLine1In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.address_line1"), bun.In(v))
		},
		AddressLine1NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.address_line1"), bun.In(v))
		},
		AddressLine1GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.address_line1"), v)
		},
		AddressLine1GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.address_line1"), v)
		},
		AddressLine1LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.address_line1"), v)
		},
		AddressLine1LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.address_line1"), v)
		},
		AddressLine1Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.address_line1"), "%"+v+"%")
		},
		AddressLine1HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.address_line1"), v+"%")
		},
		AddressLine1HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.address_line1"), "%"+v)
		},
		AddressLine2EQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.address_line2"), v)
		},
		AddressLine2NEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.address_line2"), v)
		},
		AddressLine2In: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.address_line2"), bun.In(v))
		},
		AddressLine2NotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.address_line2"), bun.In(v))
		},
		AddressLine2GT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.address_line2"), v)
		},
		AddressLine2GTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.address_line2"), v)
		},
		AddressLine2LT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.address_line2"), v)
		},
		AddressLine2LTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.address_line2"), v)
		},
		AddressLine2Contains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.address_line2"), "%"+v+"%")
		},
		AddressLine2HasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.address_line2"), v+"%")
		},
		AddressLine2HasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.address_line2"), "%"+v)
		},
		CityEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.city"), v)
		},
		CityNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.city"), v)
		},
		CityIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.city"), bun.In(v))
		},
		CityNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.city"), bun.In(v))
		},
		CityGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.city"), v)
		},
		CityGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.city"), v)
		},
		CityLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.city"), v)
		},
		CityLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.city"), v)
		},
		CityContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.city"), "%"+v+"%")
		},
		CityHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.city"), v+"%")
		},
		CityHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.city"), "%"+v)
		},
		PostalCodeEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.postal_code"), v)
		},
		PostalCodeNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.postal_code"), v)
		},
		PostalCodeIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.postal_code"), bun.In(v))
		},
		PostalCodeNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.postal_code"), bun.In(v))
		},
		PostalCodeGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.postal_code"), v)
		},
		PostalCodeGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.postal_code"), v)
		},
		PostalCodeLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.postal_code"), v)
		},
		PostalCodeLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.postal_code"), v)
		},
		PostalCodeContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.postal_code"), "%"+v+"%")
		},
		PostalCodeHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.postal_code"), v+"%")
		},
		PostalCodeHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.postal_code"), "%"+v)
		},
		TimezoneEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.timezone"), v)
		},
		TimezoneNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.timezone"), v)
		},
		TimezoneIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.timezone"), bun.In(v))
		},
		TimezoneNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.timezone"), bun.In(v))
		},
		TimezoneGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.timezone"), v)
		},
		TimezoneGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.timezone"), v)
		},
		TimezoneLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.timezone"), v)
		},
		TimezoneLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.timezone"), v)
		},
		TimezoneContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.timezone"), "%"+v+"%")
		},
		TimezoneHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.timezone"), v+"%")
		},
		TimezoneHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.timezone"), "%"+v)
		},
		LocaleEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.locale"), v)
		},
		LocaleNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.locale"), v)
		},
		LocaleIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.locale"), bun.In(v))
		},
		LocaleNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.locale"), bun.In(v))
		},
		LocaleGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.locale"), v)
		},
		LocaleGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.locale"), v)
		},
		LocaleLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.locale"), v)
		},
		LocaleLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.locale"), v)
		},
		LocaleContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.locale"), "%"+v+"%")
		},
		LocaleHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.locale"), v+"%")
		},
		LocaleHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.locale"), "%"+v)
		},
		TaxIDEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.tax_id"), v)
		},
		TaxIDNEQ: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.tax_id"), v)
		},
		TaxIDIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.tax_id"), bun.In(v))
		},
		TaxIDNotIn: func(q *bun.SelectQuery, v []string) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.tax_id"), bun.In(v))
		},
		TaxIDGT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.tax_id"), v)
		},
		TaxIDGTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.tax_id"), v)
		},
		TaxIDLT: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.tax_id"), v)
		},
		TaxIDLTE: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.tax_id"), v)
		},
		TaxIDContains: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.tax_id"), "%"+v+"%")
		},
		TaxIDHasPrefix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.tax_id"), v+"%")
		},
		TaxIDHasSuffix: func(q *bun.SelectQuery, v string) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("bu.tax_id"), "%"+v)
		},
		MetadataEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.metadata"), v)
		},
		MetadataNEQ: func(q *bun.SelectQuery, v map[string]any) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.metadata"), v)
		},
		MetadataIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.metadata"), bun.In(v))
		},
		MetadataNotIn: func(q *bun.SelectQuery, v []map[string]any) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.metadata"), bun.In(v))
		},
		VersionEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.version"), v)
		},
		VersionNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.version"), v)
		},
		VersionIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.version"), bun.In(v))
		},
		VersionNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.version"), bun.In(v))
		},
		VersionGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.version"), v)
		},
		VersionGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.version"), v)
		},
		VersionLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.version"), v)
		},
		VersionLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.version"), v)
		},
		CreatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.created_at"), v)
		},
		CreatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.created_at"), v)
		},
		CreatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.created_at"), bun.In(v))
		},
		CreatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.created_at"), bun.In(v))
		},
		CreatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.created_at"), v)
		},
		CreatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.created_at"), v)
		},
		CreatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.created_at"), v)
		},
		CreatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.created_at"), v)
		},
		UpdatedAtEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("bu.updated_at"), v)
		},
		UpdatedAtNEQ: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("bu.updated_at"), v)
		},
		UpdatedAtIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("bu.updated_at"), bun.In(v))
		},
		UpdatedAtNotIn: func(q *bun.SelectQuery, v []int64) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("bu.updated_at"), bun.In(v))
		},
		UpdatedAtGT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("bu.updated_at"), v)
		},
		UpdatedAtGTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("bu.updated_at"), v)
		},
		UpdatedAtLT: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("bu.updated_at"), v)
		},
		UpdatedAtLTE: func(q *bun.SelectQuery, v int64) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("bu.updated_at"), v)
		},
	},

	// UPDATE clause helpers
	Update: struct {
		WhereIDAndVersion func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery
	}{
		WhereIDAndVersion: func(q *bun.UpdateQuery, id pulid.ID, version int64) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("bu.id"), id).
				Where("? = ?", bun.Ident("bu.version"), version)
		},
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
		Code      func(desc bool) string
		CreatedAt func(desc bool) string
		UpdatedAt func(desc bool) string
	}{
		Field: func(field string, desc bool) string {
			orderClause := "bu." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
				"bu.code ASC",
			}
		},
		Code: func(desc bool) string {
			if desc {
				return "bu.code DESC"
			}
			return "bu.code ASC"
		},
		CreatedAt: func(desc bool) string {
			if desc {
				return "bu.created_at DESC"
			}
			return "bu.created_at ASC"
		},
		UpdatedAt: func(desc bool) string {
			if desc {
				return "bu.updated_at DESC"
			}
			return "bu.updated_at ASC"
		},
	},

	// Field configuration
	FieldConfig: func() map[string]businessUnitFieldConfig {
		return map[string]businessUnitFieldConfig{
			"id": {
				Name:       "id",
				Column:     "bu.id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "bu.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"parent_business_unit_id": {
				Name:       "parent_business_unit_id",
				Column:     "bu.parent_business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "bu.name",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "bu.code",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "bu.description",
				Sortable:   false,
				Filterable: false,
			},
			"primary_contact": {
				Name:       "primary_contact",
				Column:     "bu.primary_contact",
				Sortable:   false,
				Filterable: true,
			},
			"primary_email": {
				Name:       "primary_email",
				Column:     "bu.primary_email",
				Sortable:   false,
				Filterable: true,
			},
			"primary_phone": {
				Name:       "primary_phone",
				Column:     "bu.primary_phone",
				Sortable:   false,
				Filterable: true,
			},
			"address_line1": {
				Name:       "address_line1",
				Column:     "bu.address_line1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line2": {
				Name:       "address_line2",
				Column:     "bu.address_line2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "bu.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "bu.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "bu.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"locale": {
				Name:       "locale",
				Column:     "bu.locale",
				Sortable:   false,
				Filterable: true,
			},
			"tax_id": {
				Name:       "tax_id",
				Column:     "bu.tax_id",
				Sortable:   false,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "bu.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "bu.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "bu.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "bu.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]businessUnitFieldConfig{
			"id": {
				Name:       "id",
				Column:     "bu.id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "bu.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"parent_business_unit_id": {
				Name:       "parent_business_unit_id",
				Column:     "bu.parent_business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "bu.name",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "bu.code",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "bu.description",
				Sortable:   false,
				Filterable: false,
			},
			"primary_contact": {
				Name:       "primary_contact",
				Column:     "bu.primary_contact",
				Sortable:   false,
				Filterable: true,
			},
			"primary_email": {
				Name:       "primary_email",
				Column:     "bu.primary_email",
				Sortable:   false,
				Filterable: true,
			},
			"primary_phone": {
				Name:       "primary_phone",
				Column:     "bu.primary_phone",
				Sortable:   false,
				Filterable: true,
			},
			"address_line1": {
				Name:       "address_line1",
				Column:     "bu.address_line1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line2": {
				Name:       "address_line2",
				Column:     "bu.address_line2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "bu.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "bu.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "bu.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"locale": {
				Name:       "locale",
				Column:     "bu.locale",
				Sortable:   false,
				Filterable: true,
			},
			"tax_id": {
				Name:       "tax_id",
				Column:     "bu.tax_id",
				Sortable:   false,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "bu.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "bu.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "bu.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "bu.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]businessUnitFieldConfig{
			"id": {
				Name:       "id",
				Column:     "bu.id",
				Sortable:   false,
				Filterable: true,
			},
			"state_id": {
				Name:       "state_id",
				Column:     "bu.state_id",
				Sortable:   false,
				Filterable: true,
			},
			"parent_business_unit_id": {
				Name:       "parent_business_unit_id",
				Column:     "bu.parent_business_unit_id",
				Sortable:   false,
				Filterable: true,
			},
			"name": {
				Name:       "name",
				Column:     "bu.name",
				Sortable:   true,
				Filterable: true,
			},
			"code": {
				Name:       "code",
				Column:     "bu.code",
				Sortable:   true,
				Filterable: true,
			},
			"description": {
				Name:       "description",
				Column:     "bu.description",
				Sortable:   false,
				Filterable: false,
			},
			"primary_contact": {
				Name:       "primary_contact",
				Column:     "bu.primary_contact",
				Sortable:   false,
				Filterable: true,
			},
			"primary_email": {
				Name:       "primary_email",
				Column:     "bu.primary_email",
				Sortable:   false,
				Filterable: true,
			},
			"primary_phone": {
				Name:       "primary_phone",
				Column:     "bu.primary_phone",
				Sortable:   false,
				Filterable: true,
			},
			"address_line1": {
				Name:       "address_line1",
				Column:     "bu.address_line1",
				Sortable:   false,
				Filterable: true,
			},
			"address_line2": {
				Name:       "address_line2",
				Column:     "bu.address_line2",
				Sortable:   false,
				Filterable: true,
			},
			"city": {
				Name:       "city",
				Column:     "bu.city",
				Sortable:   false,
				Filterable: true,
			},
			"postal_code": {
				Name:       "postal_code",
				Column:     "bu.postal_code",
				Sortable:   false,
				Filterable: false,
			},
			"timezone": {
				Name:       "timezone",
				Column:     "bu.timezone",
				Sortable:   false,
				Filterable: true,
			},
			"locale": {
				Name:       "locale",
				Column:     "bu.locale",
				Sortable:   false,
				Filterable: true,
			},
			"tax_id": {
				Name:       "tax_id",
				Column:     "bu.tax_id",
				Sortable:   false,
				Filterable: true,
			},
			"metadata": {
				Name:       "metadata",
				Column:     "bu.metadata",
				Sortable:   false,
				Filterable: false,
			},
			"version": {
				Name:       "version",
				Column:     "bu.version",
				Sortable:   false,
				Filterable: false,
			},
			"created_at": {
				Name:       "created_at",
				Column:     "bu.created_at",
				Sortable:   true,
				Filterable: true,
			},
			"updated_at": {
				Name:       "updated_at",
				Column:     "bu.updated_at",
				Sortable:   true,
				Filterable: true,
			},
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
	// Relationship helpers
	Relations: struct {
		ParentBusinessUnit string
		State              string
	}{
		ParentBusinessUnit: "ParentBusinessUnit",
		State:              "State",
	},
}

// BusinessUnitQueryBuilder provides a fluent interface for building queries
type BusinessUnitQueryBuilder struct {
	query *bun.SelectQuery
}

// NewBusinessUnitQuery creates a new query builder
func NewBusinessUnitQuery(db bun.IDB) *BusinessUnitQueryBuilder {
	return &BusinessUnitQueryBuilder{
		query: db.NewSelect().Model((*BusinessUnit)(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func BusinessUnitFromQuery(q *bun.SelectQuery) *BusinessUnitQueryBuilder {
	return &BusinessUnitQueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *BusinessUnitQueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *BusinessUnitQueryBuilder) Model(model interface{}) *BusinessUnitQueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates

// WhereIDEQ adds a WHERE id = ? condition
func (b *BusinessUnitQueryBuilder) WhereIDEQ(v pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.IDEQ(b.query, v)
	return b
}

// WhereIDNEQ adds a WHERE id != ? condition
func (b *BusinessUnitQueryBuilder) WhereIDNEQ(v pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.IDNEQ(b.query, v)
	return b
}

// WhereIDIn adds a WHERE id IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereIDIn(v []pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.IDIn(b.query, v)
	return b
}

// WhereIDNotIn adds a WHERE id NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereIDNotIn(v []pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.IDNotIn(b.query, v)
	return b
}

// WhereStateIDEQ adds a WHERE state_id = ? condition
func (b *BusinessUnitQueryBuilder) WhereStateIDEQ(v pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.StateIDEQ(b.query, v)
	return b
}

// WhereStateIDNEQ adds a WHERE state_id != ? condition
func (b *BusinessUnitQueryBuilder) WhereStateIDNEQ(v pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.StateIDNEQ(b.query, v)
	return b
}

// WhereStateIDIn adds a WHERE state_id IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereStateIDIn(v []pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.StateIDIn(b.query, v)
	return b
}

// WhereStateIDNotIn adds a WHERE state_id NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereStateIDNotIn(v []pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.StateIDNotIn(b.query, v)
	return b
}

// WhereParentBusinessUnitIDEQ adds a WHERE parent_business_unit_id = ? condition
func (b *BusinessUnitQueryBuilder) WhereParentBusinessUnitIDEQ(v *pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.ParentBusinessUnitIDEQ(b.query, v)
	return b
}

// WhereParentBusinessUnitIDNEQ adds a WHERE parent_business_unit_id != ? condition
func (b *BusinessUnitQueryBuilder) WhereParentBusinessUnitIDNEQ(v *pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.ParentBusinessUnitIDNEQ(b.query, v)
	return b
}

// WhereParentBusinessUnitIDIn adds a WHERE parent_business_unit_id IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereParentBusinessUnitIDIn(v []*pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.ParentBusinessUnitIDIn(b.query, v)
	return b
}

// WhereParentBusinessUnitIDNotIn adds a WHERE parent_business_unit_id NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereParentBusinessUnitIDNotIn(v []*pulid.ID) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.ParentBusinessUnitIDNotIn(b.query, v)
	return b
}

// WhereNameEQ adds a WHERE name = ? condition
func (b *BusinessUnitQueryBuilder) WhereNameEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.NameEQ(b.query, v)
	return b
}

// WhereNameNEQ adds a WHERE name != ? condition
func (b *BusinessUnitQueryBuilder) WhereNameNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.NameNEQ(b.query, v)
	return b
}

// WhereNameIn adds a WHERE name IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereNameIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.NameIn(b.query, v)
	return b
}

// WhereNameNotIn adds a WHERE name NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereNameNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.NameNotIn(b.query, v)
	return b
}

// WhereNameContains adds a WHERE name LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereNameContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.NameContains(b.query, v)
	return b
}

// WhereNameHasPrefix adds a WHERE name LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereNameHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.NameHasPrefix(b.query, v)
	return b
}

// WhereNameHasSuffix adds a WHERE name LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereNameHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.NameHasSuffix(b.query, v)
	return b
}

// WhereCodeEQ adds a WHERE code = ? condition
func (b *BusinessUnitQueryBuilder) WhereCodeEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CodeEQ(b.query, v)
	return b
}

// WhereCodeNEQ adds a WHERE code != ? condition
func (b *BusinessUnitQueryBuilder) WhereCodeNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CodeNEQ(b.query, v)
	return b
}

// WhereCodeIn adds a WHERE code IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereCodeIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CodeIn(b.query, v)
	return b
}

// WhereCodeNotIn adds a WHERE code NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereCodeNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CodeNotIn(b.query, v)
	return b
}

// WhereCodeContains adds a WHERE code LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereCodeContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CodeContains(b.query, v)
	return b
}

// WhereCodeHasPrefix adds a WHERE code LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereCodeHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CodeHasPrefix(b.query, v)
	return b
}

// WhereCodeHasSuffix adds a WHERE code LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereCodeHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CodeHasSuffix(b.query, v)
	return b
}

// WhereDescriptionEQ adds a WHERE description = ? condition
func (b *BusinessUnitQueryBuilder) WhereDescriptionEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.DescriptionEQ(b.query, v)
	return b
}

// WhereDescriptionNEQ adds a WHERE description != ? condition
func (b *BusinessUnitQueryBuilder) WhereDescriptionNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.DescriptionNEQ(b.query, v)
	return b
}

// WhereDescriptionIn adds a WHERE description IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereDescriptionIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.DescriptionIn(b.query, v)
	return b
}

// WhereDescriptionNotIn adds a WHERE description NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereDescriptionNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.DescriptionNotIn(b.query, v)
	return b
}

// WhereDescriptionContains adds a WHERE description LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereDescriptionContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.DescriptionContains(b.query, v)
	return b
}

// WhereDescriptionHasPrefix adds a WHERE description LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereDescriptionHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.DescriptionHasPrefix(b.query, v)
	return b
}

// WhereDescriptionHasSuffix adds a WHERE description LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereDescriptionHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.DescriptionHasSuffix(b.query, v)
	return b
}

// WherePrimaryContactEQ adds a WHERE primary_contact = ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryContactEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryContactEQ(b.query, v)
	return b
}

// WherePrimaryContactNEQ adds a WHERE primary_contact != ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryContactNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryContactNEQ(b.query, v)
	return b
}

// WherePrimaryContactIn adds a WHERE primary_contact IN (?) condition
func (b *BusinessUnitQueryBuilder) WherePrimaryContactIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryContactIn(b.query, v)
	return b
}

// WherePrimaryContactNotIn adds a WHERE primary_contact NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WherePrimaryContactNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryContactNotIn(b.query, v)
	return b
}

// WherePrimaryContactContains adds a WHERE primary_contact LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryContactContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryContactContains(b.query, v)
	return b
}

// WherePrimaryContactHasPrefix adds a WHERE primary_contact LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryContactHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryContactHasPrefix(b.query, v)
	return b
}

// WherePrimaryContactHasSuffix adds a WHERE primary_contact LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryContactHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryContactHasSuffix(b.query, v)
	return b
}

// WherePrimaryEmailEQ adds a WHERE primary_email = ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryEmailEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryEmailEQ(b.query, v)
	return b
}

// WherePrimaryEmailNEQ adds a WHERE primary_email != ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryEmailNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryEmailNEQ(b.query, v)
	return b
}

// WherePrimaryEmailIn adds a WHERE primary_email IN (?) condition
func (b *BusinessUnitQueryBuilder) WherePrimaryEmailIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryEmailIn(b.query, v)
	return b
}

// WherePrimaryEmailNotIn adds a WHERE primary_email NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WherePrimaryEmailNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryEmailNotIn(b.query, v)
	return b
}

// WherePrimaryEmailContains adds a WHERE primary_email LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryEmailContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryEmailContains(b.query, v)
	return b
}

// WherePrimaryEmailHasPrefix adds a WHERE primary_email LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryEmailHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryEmailHasPrefix(b.query, v)
	return b
}

// WherePrimaryEmailHasSuffix adds a WHERE primary_email LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryEmailHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryEmailHasSuffix(b.query, v)
	return b
}

// WherePrimaryPhoneEQ adds a WHERE primary_phone = ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryPhoneEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryPhoneEQ(b.query, v)
	return b
}

// WherePrimaryPhoneNEQ adds a WHERE primary_phone != ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryPhoneNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryPhoneNEQ(b.query, v)
	return b
}

// WherePrimaryPhoneIn adds a WHERE primary_phone IN (?) condition
func (b *BusinessUnitQueryBuilder) WherePrimaryPhoneIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryPhoneIn(b.query, v)
	return b
}

// WherePrimaryPhoneNotIn adds a WHERE primary_phone NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WherePrimaryPhoneNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryPhoneNotIn(b.query, v)
	return b
}

// WherePrimaryPhoneContains adds a WHERE primary_phone LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryPhoneContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryPhoneContains(b.query, v)
	return b
}

// WherePrimaryPhoneHasPrefix adds a WHERE primary_phone LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryPhoneHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryPhoneHasPrefix(b.query, v)
	return b
}

// WherePrimaryPhoneHasSuffix adds a WHERE primary_phone LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePrimaryPhoneHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PrimaryPhoneHasSuffix(b.query, v)
	return b
}

// WhereAddressLine1EQ adds a WHERE address_line1 = ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine1EQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine1EQ(b.query, v)
	return b
}

// WhereAddressLine1NEQ adds a WHERE address_line1 != ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine1NEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine1NEQ(b.query, v)
	return b
}

// WhereAddressLine1In adds a WHERE address_line1 IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine1In(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine1In(b.query, v)
	return b
}

// WhereAddressLine1NotIn adds a WHERE address_line1 NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine1NotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine1NotIn(b.query, v)
	return b
}

// WhereAddressLine1Contains adds a WHERE address_line1 LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine1Contains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine1Contains(b.query, v)
	return b
}

// WhereAddressLine1HasPrefix adds a WHERE address_line1 LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine1HasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine1HasPrefix(b.query, v)
	return b
}

// WhereAddressLine1HasSuffix adds a WHERE address_line1 LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine1HasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine1HasSuffix(b.query, v)
	return b
}

// WhereAddressLine2EQ adds a WHERE address_line2 = ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine2EQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine2EQ(b.query, v)
	return b
}

// WhereAddressLine2NEQ adds a WHERE address_line2 != ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine2NEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine2NEQ(b.query, v)
	return b
}

// WhereAddressLine2In adds a WHERE address_line2 IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine2In(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine2In(b.query, v)
	return b
}

// WhereAddressLine2NotIn adds a WHERE address_line2 NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine2NotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine2NotIn(b.query, v)
	return b
}

// WhereAddressLine2Contains adds a WHERE address_line2 LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine2Contains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine2Contains(b.query, v)
	return b
}

// WhereAddressLine2HasPrefix adds a WHERE address_line2 LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine2HasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine2HasPrefix(b.query, v)
	return b
}

// WhereAddressLine2HasSuffix adds a WHERE address_line2 LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereAddressLine2HasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.AddressLine2HasSuffix(b.query, v)
	return b
}

// WhereCityEQ adds a WHERE city = ? condition
func (b *BusinessUnitQueryBuilder) WhereCityEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CityEQ(b.query, v)
	return b
}

// WhereCityNEQ adds a WHERE city != ? condition
func (b *BusinessUnitQueryBuilder) WhereCityNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CityNEQ(b.query, v)
	return b
}

// WhereCityIn adds a WHERE city IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereCityIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CityIn(b.query, v)
	return b
}

// WhereCityNotIn adds a WHERE city NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereCityNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CityNotIn(b.query, v)
	return b
}

// WhereCityContains adds a WHERE city LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereCityContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CityContains(b.query, v)
	return b
}

// WhereCityHasPrefix adds a WHERE city LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereCityHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CityHasPrefix(b.query, v)
	return b
}

// WhereCityHasSuffix adds a WHERE city LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereCityHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CityHasSuffix(b.query, v)
	return b
}

// WherePostalCodeEQ adds a WHERE postal_code = ? condition
func (b *BusinessUnitQueryBuilder) WherePostalCodeEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PostalCodeEQ(b.query, v)
	return b
}

// WherePostalCodeNEQ adds a WHERE postal_code != ? condition
func (b *BusinessUnitQueryBuilder) WherePostalCodeNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PostalCodeNEQ(b.query, v)
	return b
}

// WherePostalCodeIn adds a WHERE postal_code IN (?) condition
func (b *BusinessUnitQueryBuilder) WherePostalCodeIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PostalCodeIn(b.query, v)
	return b
}

// WherePostalCodeNotIn adds a WHERE postal_code NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WherePostalCodeNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PostalCodeNotIn(b.query, v)
	return b
}

// WherePostalCodeContains adds a WHERE postal_code LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePostalCodeContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PostalCodeContains(b.query, v)
	return b
}

// WherePostalCodeHasPrefix adds a WHERE postal_code LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePostalCodeHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PostalCodeHasPrefix(b.query, v)
	return b
}

// WherePostalCodeHasSuffix adds a WHERE postal_code LIKE ? condition
func (b *BusinessUnitQueryBuilder) WherePostalCodeHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.PostalCodeHasSuffix(b.query, v)
	return b
}

// WhereTimezoneEQ adds a WHERE timezone = ? condition
func (b *BusinessUnitQueryBuilder) WhereTimezoneEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TimezoneEQ(b.query, v)
	return b
}

// WhereTimezoneNEQ adds a WHERE timezone != ? condition
func (b *BusinessUnitQueryBuilder) WhereTimezoneNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TimezoneNEQ(b.query, v)
	return b
}

// WhereTimezoneIn adds a WHERE timezone IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereTimezoneIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TimezoneIn(b.query, v)
	return b
}

// WhereTimezoneNotIn adds a WHERE timezone NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereTimezoneNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TimezoneNotIn(b.query, v)
	return b
}

// WhereTimezoneContains adds a WHERE timezone LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereTimezoneContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TimezoneContains(b.query, v)
	return b
}

// WhereTimezoneHasPrefix adds a WHERE timezone LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereTimezoneHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TimezoneHasPrefix(b.query, v)
	return b
}

// WhereTimezoneHasSuffix adds a WHERE timezone LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereTimezoneHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TimezoneHasSuffix(b.query, v)
	return b
}

// WhereLocaleEQ adds a WHERE locale = ? condition
func (b *BusinessUnitQueryBuilder) WhereLocaleEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.LocaleEQ(b.query, v)
	return b
}

// WhereLocaleNEQ adds a WHERE locale != ? condition
func (b *BusinessUnitQueryBuilder) WhereLocaleNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.LocaleNEQ(b.query, v)
	return b
}

// WhereLocaleIn adds a WHERE locale IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereLocaleIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.LocaleIn(b.query, v)
	return b
}

// WhereLocaleNotIn adds a WHERE locale NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereLocaleNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.LocaleNotIn(b.query, v)
	return b
}

// WhereLocaleContains adds a WHERE locale LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereLocaleContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.LocaleContains(b.query, v)
	return b
}

// WhereLocaleHasPrefix adds a WHERE locale LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereLocaleHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.LocaleHasPrefix(b.query, v)
	return b
}

// WhereLocaleHasSuffix adds a WHERE locale LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereLocaleHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.LocaleHasSuffix(b.query, v)
	return b
}

// WhereTaxIDEQ adds a WHERE tax_id = ? condition
func (b *BusinessUnitQueryBuilder) WhereTaxIDEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TaxIDEQ(b.query, v)
	return b
}

// WhereTaxIDNEQ adds a WHERE tax_id != ? condition
func (b *BusinessUnitQueryBuilder) WhereTaxIDNEQ(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TaxIDNEQ(b.query, v)
	return b
}

// WhereTaxIDIn adds a WHERE tax_id IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereTaxIDIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TaxIDIn(b.query, v)
	return b
}

// WhereTaxIDNotIn adds a WHERE tax_id NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereTaxIDNotIn(v []string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TaxIDNotIn(b.query, v)
	return b
}

// WhereTaxIDContains adds a WHERE tax_id LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereTaxIDContains(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TaxIDContains(b.query, v)
	return b
}

// WhereTaxIDHasPrefix adds a WHERE tax_id LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereTaxIDHasPrefix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TaxIDHasPrefix(b.query, v)
	return b
}

// WhereTaxIDHasSuffix adds a WHERE tax_id LIKE ? condition
func (b *BusinessUnitQueryBuilder) WhereTaxIDHasSuffix(v string) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.TaxIDHasSuffix(b.query, v)
	return b
}

// WhereMetadataEQ adds a WHERE metadata = ? condition
func (b *BusinessUnitQueryBuilder) WhereMetadataEQ(v map[string]any) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.MetadataEQ(b.query, v)
	return b
}

// WhereMetadataNEQ adds a WHERE metadata != ? condition
func (b *BusinessUnitQueryBuilder) WhereMetadataNEQ(v map[string]any) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.MetadataNEQ(b.query, v)
	return b
}

// WhereMetadataIn adds a WHERE metadata IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereMetadataIn(v []map[string]any) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.MetadataIn(b.query, v)
	return b
}

// WhereMetadataNotIn adds a WHERE metadata NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereMetadataNotIn(v []map[string]any) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.MetadataNotIn(b.query, v)
	return b
}

// WhereVersionEQ adds a WHERE version = ? condition
func (b *BusinessUnitQueryBuilder) WhereVersionEQ(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.VersionEQ(b.query, v)
	return b
}

// WhereVersionNEQ adds a WHERE version != ? condition
func (b *BusinessUnitQueryBuilder) WhereVersionNEQ(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.VersionNEQ(b.query, v)
	return b
}

// WhereVersionGT adds a WHERE version > ? condition
func (b *BusinessUnitQueryBuilder) WhereVersionGT(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.VersionGT(b.query, v)
	return b
}

// WhereVersionGTE adds a WHERE version >= ? condition
func (b *BusinessUnitQueryBuilder) WhereVersionGTE(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.VersionGTE(b.query, v)
	return b
}

// WhereVersionLT adds a WHERE version < ? condition
func (b *BusinessUnitQueryBuilder) WhereVersionLT(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.VersionLT(b.query, v)
	return b
}

// WhereVersionLTE adds a WHERE version <= ? condition
func (b *BusinessUnitQueryBuilder) WhereVersionLTE(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.VersionLTE(b.query, v)
	return b
}

// WhereVersionIn adds a WHERE version IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereVersionIn(v []int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.VersionIn(b.query, v)
	return b
}

// WhereVersionNotIn adds a WHERE version NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereVersionNotIn(v []int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.VersionNotIn(b.query, v)
	return b
}

// WhereCreatedAtEQ adds a WHERE created_at = ? condition
func (b *BusinessUnitQueryBuilder) WhereCreatedAtEQ(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CreatedAtEQ(b.query, v)
	return b
}

// WhereCreatedAtNEQ adds a WHERE created_at != ? condition
func (b *BusinessUnitQueryBuilder) WhereCreatedAtNEQ(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CreatedAtNEQ(b.query, v)
	return b
}

// WhereCreatedAtGT adds a WHERE created_at > ? condition
func (b *BusinessUnitQueryBuilder) WhereCreatedAtGT(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CreatedAtGT(b.query, v)
	return b
}

// WhereCreatedAtGTE adds a WHERE created_at >= ? condition
func (b *BusinessUnitQueryBuilder) WhereCreatedAtGTE(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CreatedAtGTE(b.query, v)
	return b
}

// WhereCreatedAtLT adds a WHERE created_at < ? condition
func (b *BusinessUnitQueryBuilder) WhereCreatedAtLT(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CreatedAtLT(b.query, v)
	return b
}

// WhereCreatedAtLTE adds a WHERE created_at <= ? condition
func (b *BusinessUnitQueryBuilder) WhereCreatedAtLTE(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CreatedAtLTE(b.query, v)
	return b
}

// WhereCreatedAtIn adds a WHERE created_at IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereCreatedAtIn(v []int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CreatedAtIn(b.query, v)
	return b
}

// WhereCreatedAtNotIn adds a WHERE created_at NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereCreatedAtNotIn(v []int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.CreatedAtNotIn(b.query, v)
	return b
}

// WhereUpdatedAtEQ adds a WHERE updated_at = ? condition
func (b *BusinessUnitQueryBuilder) WhereUpdatedAtEQ(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.UpdatedAtEQ(b.query, v)
	return b
}

// WhereUpdatedAtNEQ adds a WHERE updated_at != ? condition
func (b *BusinessUnitQueryBuilder) WhereUpdatedAtNEQ(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.UpdatedAtNEQ(b.query, v)
	return b
}

// WhereUpdatedAtGT adds a WHERE updated_at > ? condition
func (b *BusinessUnitQueryBuilder) WhereUpdatedAtGT(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.UpdatedAtGT(b.query, v)
	return b
}

// WhereUpdatedAtGTE adds a WHERE updated_at >= ? condition
func (b *BusinessUnitQueryBuilder) WhereUpdatedAtGTE(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.UpdatedAtGTE(b.query, v)
	return b
}

// WhereUpdatedAtLT adds a WHERE updated_at < ? condition
func (b *BusinessUnitQueryBuilder) WhereUpdatedAtLT(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.UpdatedAtLT(b.query, v)
	return b
}

// WhereUpdatedAtLTE adds a WHERE updated_at <= ? condition
func (b *BusinessUnitQueryBuilder) WhereUpdatedAtLTE(v int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.UpdatedAtLTE(b.query, v)
	return b
}

// WhereUpdatedAtIn adds a WHERE updated_at IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereUpdatedAtIn(v []int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.UpdatedAtIn(b.query, v)
	return b
}

// WhereUpdatedAtNotIn adds a WHERE updated_at NOT IN (?) condition
func (b *BusinessUnitQueryBuilder) WhereUpdatedAtNotIn(v []int64) *BusinessUnitQueryBuilder {
	b.query = BusinessUnitQuery.Where.UpdatedAtNotIn(b.query, v)
	return b
}

// Common helper methods

// WhereGroup adds a WHERE clause with grouped conditions
func (b *BusinessUnitQueryBuilder) WhereGroup(sep string, fn func(*BusinessUnitQueryBuilder) *BusinessUnitQueryBuilder) *BusinessUnitQueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &BusinessUnitQueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *BusinessUnitQueryBuilder) Where(query string, args ...interface{}) *BusinessUnitQueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *BusinessUnitQueryBuilder) OrderBy(column string, desc ...bool) *BusinessUnitQueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order(BusinessUnitQuery.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *BusinessUnitQueryBuilder) Limit(n int) *BusinessUnitQueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *BusinessUnitQueryBuilder) Offset(n int) *BusinessUnitQueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *BusinessUnitQueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *BusinessUnitQueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *BusinessUnitQueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *BusinessUnitQueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *BusinessUnitQueryBuilder) All(ctx context.Context) ([]*BusinessUnit, error) {
	var entities []*BusinessUnit
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *BusinessUnitQueryBuilder) AllWithCount(ctx context.Context) ([]*BusinessUnit, int, error) {
	var entities []*BusinessUnit
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *BusinessUnitQueryBuilder) One(ctx context.Context) (*BusinessUnit, error) {
	entity := new(BusinessUnit)
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *BusinessUnitQueryBuilder) First(ctx context.Context) (*BusinessUnit, error) {
	entity := new(BusinessUnit)
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// BusinessUnitBuild creates a chainable query builder
func BusinessUnitBuild(db bun.IDB) *BusinessUnitQueryBuilder {
	return NewBusinessUnitQuery(db)
}

// Relationship loading methods

// LoadParentBusinessUnit loads the ParentBusinessUnit relationship
func (b *BusinessUnitQueryBuilder) LoadParentBusinessUnit() *BusinessUnitQueryBuilder {
	b.query = b.query.Relation("ParentBusinessUnit")
	return b
}

// LoadState loads the State relationship
func (b *BusinessUnitQueryBuilder) LoadState() *BusinessUnitQueryBuilder {
	b.query = b.query.Relation("State")
	return b
}

// LoadAllRelations loads all relationships for BusinessUnit
func (b *BusinessUnitQueryBuilder) LoadAllRelations() *BusinessUnitQueryBuilder {
	b.LoadParentBusinessUnit()
	b.LoadState()
	return b
}

// BusinessUnitRelationChain provides a fluent API for building nested relationship chains
type BusinessUnitRelationChain struct {
	relations []string
	options   map[string]func(*bun.SelectQuery) *bun.SelectQuery
}

// NewBusinessUnitRelationChain creates a new relation chain builder
func NewBusinessUnitRelationChain() *BusinessUnitRelationChain {
	return &BusinessUnitRelationChain{
		relations: []string{},
		options:   make(map[string]func(*bun.SelectQuery) *bun.SelectQuery),
	}
}

// Add adds a relation to the chain with optional configuration
func (rc *BusinessUnitRelationChain) Add(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *BusinessUnitRelationChain {
	rc.relations = append(rc.relations, relation)
	if len(opts) > 0 {
		rc.options[relation] = func(q *bun.SelectQuery) *bun.SelectQuery {
			for _, opt := range opts {
				q = opt(q)
			}
			return q
		}
	}
	return rc
}

// Build builds the relation chain
func (rc *BusinessUnitRelationChain) Build() []string {
	return rc.relations
}

// Apply applies the relation chain to a query
func (rc *BusinessUnitRelationChain) Apply(q *bun.SelectQuery) *bun.SelectQuery {
	for _, rel := range rc.relations {
		if opt, ok := rc.options[rel]; ok {
			q = q.Relation(rel, opt)
		} else {
			q = q.Relation(rel)
		}
	}
	return q
}

// WithParentBusinessUnit creates a relation chain starting with ParentBusinessUnit
func (b *BusinessUnitQueryBuilder) WithParentBusinessUnit() *BusinessUnitRelationChainBuilder {
	chain := &BusinessUnitRelationChainBuilder{
		parent: b,
		chain:  NewBusinessUnitRelationChain(),
	}
	chain.chain.Add("ParentBusinessUnit")
	return chain
}

// WithState creates a relation chain starting with State
func (b *BusinessUnitQueryBuilder) WithState() *BusinessUnitRelationChainBuilder {
	chain := &BusinessUnitRelationChainBuilder{
		parent: b,
		chain:  NewBusinessUnitRelationChain(),
	}
	chain.chain.Add("State")
	return chain
}

// BusinessUnitRelationChainBuilder provides fluent API for building nested relations
type BusinessUnitRelationChainBuilder struct {
	parent *BusinessUnitQueryBuilder
	chain  *BusinessUnitRelationChain
}

// Load applies the relation chain and returns to the parent builder
func (rb *BusinessUnitRelationChainBuilder) Load() *BusinessUnitQueryBuilder {
	rb.parent.query = rb.chain.Apply(rb.parent.query)
	return rb.parent
}

// ThenLoad adds another relation to the chain
func (rb *BusinessUnitRelationChainBuilder) ThenLoad(relation string, opts ...func(*bun.SelectQuery) *bun.SelectQuery) *BusinessUnitRelationChainBuilder {
	rb.chain.Add(relation, opts...)
	return rb
}

// OrderBy adds ordering to the current relation in the chain
func (rb *BusinessUnitRelationChainBuilder) OrderBy(order string) *BusinessUnitRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Order(order)
		}
	}
	return rb
}

// Where adds a where condition to the current relation in the chain
func (rb *BusinessUnitRelationChainBuilder) Where(condition string, args ...interface{}) *BusinessUnitRelationChainBuilder {
	if len(rb.chain.relations) > 0 {
		lastRel := rb.chain.relations[len(rb.chain.relations)-1]
		currentOpt := rb.chain.options[lastRel]
		rb.chain.options[lastRel] = func(q *bun.SelectQuery) *bun.SelectQuery {
			if currentOpt != nil {
				q = currentOpt(q)
			}
			return q.Where(condition, args...)
		}
	}
	return rb
}
