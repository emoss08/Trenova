##
## Copyright 2023-2025 Eric Moss
## Licensed under FSL-1.1-ALv2 (Functional Source License 1.1, Apache 2.0 Future)
## Full license: https://github.com/emoss08/Trenova/blob/master/LICENSE.md##

http:
  # Middlewares
  middlewares:
    # Security headers
    security-headers:
      headers:
        customFrameOptionsValue: "SAMEORIGIN"
        contentTypeNosniff: true
        browserXssFilter: true
        referrerPolicy: "strict-origin-when-cross-origin"
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 31536000
        customResponseHeaders:
          X-Robots-Tag: "none,noarchive,nosnippet,notranslate,noimageindex"
          server: ""
          X-Powered-By: ""
        contentSecurityPolicy: |
          default-src 'self' https:;
          script-src 'self' 'unsafe-inline' 'unsafe-eval' https:;
          style-src 'self' 'unsafe-inline' https:;
          img-src 'self' data: https:;
          font-src 'self' data: https:;
          connect-src 'self' wss: https:;
          frame-ancestors 'self';

    # Rate limiting
    rate-limit:
      rateLimit:
        average: 100
        period: 1s
        burst: 50

    # Rate limiting for auth endpoints
    auth-rate-limit:
      rateLimit:
        average: 5
        period: 1m
        burst: 2

    # Compression
    compress:
      compress:
        excludedContentTypes:
          - text/event-stream

    # Basic authentication for admin endpoints (configure users as needed)
    basic-auth:
      basicAuth:
        users:
          - "${ADMIN_USER}:${ADMIN_PASSWORD_HASH}"

    # CORS headers
    cors:
      headers:
        accessControlAllowOriginList:
          - "https://${DOMAIN}"
          - "http://localhost:5173"
        accessControlAllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        accessControlAllowHeaders:
          - Content-Type
          - Authorization
          - X-Requested-With
          - X-Request-Id
        accessControlExposeHeaders:
          - Content-Length
          - Content-Range
        accessControlMaxAge: 3600
        addVaryHeader: true
        accessControlAllowCredentials: true

    # Retry configuration
    retry:
      retry:
        attempts: 3
        initialInterval: 100ms

    # Circuit breaker
    circuit-breaker:
      circuitBreaker:
        expression: NetworkErrorRatio() > 0.5

    # Buffering
    buffering:
      buffering:
        maxRequestBodyBytes: 104857600  # 100MB
        memRequestBodyBytes: 2097152    # 2MB
        maxResponseBodyBytes: 104857600 # 100MB
        memResponseBodyBytes: 2097152   # 2MB

  # Routers
  routers:
    # API router
    api:
      rule: "Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      entryPoints:
        - websecure
      middlewares:
        - security-headers
        - rate-limit
        - compress
      service: api
      tls:
        certResolver: letsencrypt

    # API WebSocket router
    api-ws:
      rule: "Host(`${DOMAIN}`) && PathPrefix(`/api/v1/ws`)"
      entryPoints:
        - websecure
      middlewares:
        - security-headers
      service: api
      tls:
        certResolver: letsencrypt

    # Auth endpoints with stricter rate limiting
    api-auth:
      rule: "Host(`${DOMAIN}`) && PathPrefix(`/api/v1/login`, `/api/v1/register`, `/api/v1/forgot-password`, `/api/v1/reset-password`)"
      entryPoints:
        - websecure
      middlewares:
        - security-headers
        - auth-rate-limit
        - compress
      service: api
      priority: 10  # Higher priority than general API router
      tls:
        certResolver: letsencrypt

    # UI router
    ui:
      rule: "Host(`${DOMAIN}`)"
      entryPoints:
        - websecure
      middlewares:
        - security-headers
        - compress
      service: ui
      tls:
        certResolver: letsencrypt

    # Traefik dashboard (protected)
    traefik-dashboard:
      rule: "Host(`traefik.${DOMAIN}`)"
      entryPoints:
        - websecure
      middlewares:
        - security-headers
        - basic-auth
      service: api@internal
      tls:
        certResolver: letsencrypt

  # Services
  services:
    # API backend
    api:
      loadBalancer:
        servers:
          - url: "http://tren-api:3001"
        healthCheck:
          path: /health
          interval: 10s
          timeout: 3s
          scheme: http
        sticky:
          cookie:
            name: trenova_backend
            secure: true
            httpOnly: true
            sameSite: lax
        responseForwarding:
          flushInterval: 100ms

    # UI frontend
    ui:
      loadBalancer:
        servers:
          - url: "http://tren-client:5173"
        healthCheck:
          path: /
          interval: 10s
          timeout: 3s
          scheme: http

# TLS configuration
tls:
  options:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
      curvePreferences:
        - CurveP521
        - CurveP384
        - CurveP256
      sniStrict: true