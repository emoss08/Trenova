# Generated by Django 4.1.7 on 2023-03-02 15:05

import uuid

import django.db.models.deletion
import django_extensions.db.fields
import django_lifecycle.mixins
import localflavor.us.models
import phonenumber_field.modelfields
from django.db import migrations, models

import organization.validators.organization


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Depot",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the depot.",
                        max_length=255,
                        unique=True,
                        verbose_name="Depot Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="The description of the depot.",
                        max_length=255,
                        verbose_name="Depot Description",
                    ),
                ),
            ],
            options={
                "verbose_name": "Depot",
                "verbose_name_plural": "Depots",
                "db_table": "depot",
                "ordering": ["name"],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="EmailLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text="The subject of the email.",
                        max_length=255,
                        verbose_name="Subject",
                    ),
                ),
                (
                    "to_email",
                    models.EmailField(
                        help_text="The email address that the email was sent to.",
                        max_length=255,
                        verbose_name="To Email",
                    ),
                ),
                (
                    "error",
                    models.TextField(
                        blank=True,
                        help_text="The error that was returned from the email server.",
                        verbose_name="Error",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Log",
                "verbose_name_plural": "Email Logs",
                "db_table": "email_log",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="EmailProfile",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the Email Profile.",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="The email address that will be used for outgoing email.",
                        max_length=255,
                        verbose_name="Email",
                    ),
                ),
                (
                    "protocol",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("TLS", "TLS"),
                            ("SSL", "SSL"),
                            ("UNENCRYPTED", "Unencrypted SMTP"),
                        ],
                        help_text="The protocol that will be used for outgoing email.",
                        max_length=12,
                        verbose_name="Protocol",
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        blank=True,
                        help_text="The host that will be used for outgoing email.",
                        max_length=255,
                        verbose_name="Host",
                    ),
                ),
                (
                    "port",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The port that will be used for outgoing email.",
                        null=True,
                        verbose_name="Port",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="The username that will be used for outgoing email.",
                        max_length=255,
                        verbose_name="Username",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        blank=True,
                        help_text="The password that will be used for outgoing email.",
                        max_length=255,
                        verbose_name="Password",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Profile",
                "verbose_name_plural": "Email Profiles",
                "db_table": "email_profile",
                "ordering": ["email"],
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Organization Name"),
                ),
                (
                    "scac_code",
                    models.CharField(
                        help_text="The SCAC code for the organization.",
                        max_length=4,
                        verbose_name="SCAC Code",
                    ),
                ),
                (
                    "dot_number",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The DOT number for the organization.",
                        null=True,
                        verbose_name="DOT Number",
                    ),
                ),
                (
                    "address_line_1",
                    models.CharField(
                        blank=True,
                        help_text="The address line 1 of the organization.",
                        max_length=255,
                        verbose_name="Address line 1",
                    ),
                ),
                (
                    "address_line_2",
                    models.CharField(
                        blank=True,
                        help_text="The address line 2 of the organization.",
                        max_length=255,
                        verbose_name="Address line 2",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        help_text="The city of the organization.",
                        max_length=255,
                        verbose_name="City",
                    ),
                ),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        blank=True,
                        help_text="The state of the organization.",
                        max_length=2,
                        verbose_name="State",
                    ),
                ),
                (
                    "zip_code",
                    localflavor.us.models.USZipCodeField(
                        blank=True,
                        help_text="The zip code of the organization.",
                        max_length=10,
                        verbose_name="zip code",
                    ),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="The phone number of the organization.",
                        max_length=128,
                        region="US",
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True,
                        help_text="The website of the organization.",
                        verbose_name="Website",
                    ),
                ),
                (
                    "org_type",
                    models.CharField(
                        choices=[
                            ("Asset", "Asset"),
                            ("Brokerage", "Brokerage"),
                            ("Both", "Both"),
                        ],
                        default="Asset",
                        help_text="The type of organization.",
                        max_length=10,
                        verbose_name="Organization Type",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="America/New_York",
                        help_text="The timezone of the organization",
                        max_length=255,
                        validators=[
                            organization.validators.organization.validate_org_timezone
                        ],
                        verbose_name="Timezone",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish")],
                        default="en",
                        help_text="The language of the organization",
                        max_length=2,
                        verbose_name="Language",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD",
                        help_text="The currency that the organization uses",
                        max_length=255,
                        verbose_name="Currency",
                    ),
                ),
                (
                    "date_format",
                    models.CharField(
                        default="MM/DD/YYYY",
                        help_text="Date Format",
                        max_length=255,
                        verbose_name="Date Format",
                    ),
                ),
                (
                    "time_format",
                    models.CharField(
                        default="HH:mm",
                        help_text="Time Format",
                        max_length=255,
                        verbose_name="Time Format",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="organizations/logo/",
                        verbose_name="Logo",
                    ),
                ),
                (
                    "token_expiration_days",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="The number of days before a token expires.",
                        verbose_name="Token Expiration Days",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organization",
                "verbose_name_plural": "Organizations",
                "db_table": "organization",
                "ordering": ["name"],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="TaxRate",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the tax rate.",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "rate",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The rate of the tax rate.",
                        max_digits=5,
                        verbose_name="Rate",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that the tax rate belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tax_rates",
                        to="organization.organization",
                        verbose_name="Organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tax Rate",
                "verbose_name_plural": "Tax Rates",
                "db_table": "tax_rate",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TableChangeAlert",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the table change alert is active.",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the table change alert.",
                        max_length=50,
                        verbose_name="Name",
                    ),
                ),
                (
                    "database_action",
                    models.CharField(
                        choices=[
                            ("INSERT", "Insert"),
                            ("UPDATE", "Update"),
                            ("BOTH", "Both"),
                        ],
                        default="INSERT",
                        help_text="The database action that the table change alert is for.",
                        max_length=50,
                        verbose_name="Database Action",
                    ),
                ),
                (
                    "table",
                    models.CharField(
                        choices=[
                            ("additional_charge", "additional_charge"),
                            ("auditlog_logentry", "auditlog_logentry"),
                            ("auth_group_permissions", "auth_group_permissions"),
                            ("billing_control", "billing_control"),
                            ("billing_exception", "billing_exception"),
                            ("billing_history", "billing_history"),
                            ("billing_queue", "billing_queue"),
                            ("billing_transfer_log", "billing_transfer_log"),
                            ("charge_type", "charge_type"),
                            ("comment_type", "comment_type"),
                            ("commodity", "commodity"),
                            ("customer", "customer"),
                            ("customer_billing_profile", "customer_billing_profile"),
                            ("customer_contact", "customer_contact"),
                            ("customer_email_profile", "customer_email_profile"),
                            ("customer_fuel_profile", "customer_fuel_profile"),
                            (
                                "customer_fuel_profile_detail",
                                "customer_fuel_profile_detail",
                            ),
                            ("customer_fuel_table", "customer_fuel_table"),
                            ("customer_rule_profile", "customer_rule_profile"),
                            (
                                "customer_rule_profile_document_class",
                                "customer_rule_profile_document_class",
                            ),
                            ("delay_code", "delay_code"),
                            ("department", "department"),
                            ("depot", "depot"),
                            ("depot_detail", "depot_detail"),
                            ("dispatch_control", "dispatch_control"),
                            ("division_code", "division_code"),
                            (
                                "django_celery_beat_clockedschedule",
                                "django_celery_beat_clockedschedule",
                            ),
                            (
                                "django_celery_beat_intervalschedule",
                                "django_celery_beat_intervalschedule",
                            ),
                            (
                                "django_celery_beat_periodictasks",
                                "django_celery_beat_periodictasks",
                            ),
                            (
                                "django_celery_results_chordcounter",
                                "django_celery_results_chordcounter",
                            ),
                            (
                                "django_celery_results_taskresult",
                                "django_celery_results_taskresult",
                            ),
                            ("django_migrations", "django_migrations"),
                            ("document_classification", "document_classification"),
                            ("email_control", "email_control"),
                            ("email_log", "email_log"),
                            ("email_profile", "email_profile"),
                            ("equipment", "equipment"),
                            (
                                "equipment_maintenance_plan",
                                "equipment_maintenance_plan",
                            ),
                            (
                                "equipment_maintenance_plan_equipment_types",
                                "equipment_maintenance_plan_equipment_types",
                            ),
                            ("equipment_manufacturer", "equipment_manufacturer"),
                            ("equipment_type", "equipment_type"),
                            ("equipment_type_detail", "equipment_type_detail"),
                            ("fleet_code", "fleet_code"),
                            ("fuel_vendor", "fuel_vendor"),
                            ("fuel_vendor_fuel_detail", "fuel_vendor_fuel_detail"),
                            ("general_ledger_account", "general_ledger_account"),
                            ("google_api", "google_api"),
                            ("hazardous_material", "hazardous_material"),
                            ("integration", "integration"),
                            ("integration_vendor", "integration_vendor"),
                            ("invoice_control", "invoice_control"),
                            ("job_title", "job_title"),
                            ("knox_authtoken", "knox_authtoken"),
                            ("location", "location"),
                            ("location_category", "location_category"),
                            ("location_comment", "location_comment"),
                            ("location_contact", "location_contact"),
                            ("movement", "movement"),
                            ("order", "order"),
                            ("order_comment", "order_comment"),
                            ("order_control", "order_control"),
                            ("order_documentation", "order_documentation"),
                            ("order_type", "order_type"),
                            ("organization", "organization"),
                            ("other_charge", "other_charge"),
                            ("qualifier_code", "qualifier_code"),
                            ("rate", "rate"),
                            ("rate_billing_table", "rate_billing_table"),
                            ("rate_table", "rate_table"),
                            ("reason_code", "reason_code"),
                            ("revenue_code", "revenue_code"),
                            ("route", "route"),
                            ("route_control", "route_control"),
                            ("service_incident", "service_incident"),
                            ("silk_profile_queries", "silk_profile_queries"),
                            ("silk_response", "silk_response"),
                            ("stop", "stop"),
                            ("stop_comment", "stop_comment"),
                            ("table_change_alert", "table_change_alert"),
                            ("tax_rate", "tax_rate"),
                            ("user", "user"),
                            ("user_groups", "user_groups"),
                            ("user_profile", "user_profile"),
                            ("user_user_permissions", "user_user_permissions"),
                            ("worker", "worker"),
                            ("worker_comment", "worker_comment"),
                            ("worker_contact", "worker_contact"),
                            ("worker_profile", "worker_profile"),
                            ("worker_time_away", "worker_time_away"),
                        ],
                        help_text="The table that the table change alert is for.",
                        max_length=255,
                        verbose_name="Table",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="The description of the table change alert.",
                        verbose_name="Description",
                    ),
                ),
                (
                    "function_name",
                    models.CharField(
                        blank=True,
                        help_text="The function name that the table change alert will use.",
                        max_length=50,
                        verbose_name="Function Name",
                    ),
                ),
                (
                    "trigger_name",
                    models.CharField(
                        blank=True,
                        help_text="The trigger name that the table change alert will use.",
                        max_length=50,
                        verbose_name="Trigger Name",
                    ),
                ),
                (
                    "listener_name",
                    models.CharField(
                        blank=True,
                        help_text="The listener name that the table change alert will use.",
                        max_length=50,
                        verbose_name="Listener Name",
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        blank=True,
                        help_text="The effective date of the table change alert.",
                        null=True,
                        verbose_name="Effective Date",
                    ),
                ),
                (
                    "expiration_date",
                    models.DateField(
                        blank=True,
                        help_text="The expiration date of the table change alert.",
                        null=True,
                        verbose_name="Expiration Date",
                    ),
                ),
                (
                    "email_profile",
                    models.ForeignKey(
                        blank=True,
                        help_text="The email profile that the table change alert will use.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="table_change_alerts",
                        to="organization.emailprofile",
                        verbose_name="Email Profile",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that the tax rate belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="table_change_alerts",
                        to="organization.organization",
                        verbose_name="Organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Table Change Alert",
                "verbose_name_plural": "Table Change Alerts",
                "db_table": "table_change_alert",
                "ordering": ("name",),
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name="emailprofile",
            name="organization",
            field=models.ForeignKey(
                help_text="The organization that the email profile belongs to.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="email_profiles",
                to="organization.organization",
                verbose_name="Organization",
            ),
        ),
        migrations.CreateModel(
            name="EmailControl",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "billing_email_profile",
                    models.ForeignKey(
                        blank=True,
                        help_text="The email profile that will be used for billing emails.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="billing_email_control",
                        to="organization.emailprofile",
                        verbose_name="Billing Email Profile",
                    ),
                ),
                (
                    "organization",
                    models.OneToOneField(
                        help_text="The organization that the email control belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="email_control",
                        to="organization.organization",
                        verbose_name="Organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Control",
                "verbose_name_plural": "Email Controls",
                "db_table": "email_control",
            },
        ),
        migrations.CreateModel(
            name="DepotDetail",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "address_line_1",
                    models.CharField(
                        help_text="The address line 1 of the depot.",
                        max_length=255,
                        verbose_name="Address Line 1",
                    ),
                ),
                (
                    "address_line_2",
                    models.CharField(
                        blank=True,
                        help_text="The address line 2 of the depot.",
                        max_length=255,
                        verbose_name="Address Line 2",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        help_text="The city of the depot.",
                        max_length=255,
                        verbose_name="City",
                    ),
                ),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        blank=True,
                        help_text="The state of the depot.",
                        max_length=2,
                        null=True,
                        verbose_name="State",
                    ),
                ),
                (
                    "zip_code",
                    localflavor.us.models.USZipCodeField(
                        blank=True,
                        help_text="The zip code of the depot.",
                        max_length=10,
                        null=True,
                        verbose_name="Zip Code",
                    ),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="The phone number of the depot.",
                        max_length=128,
                        null=True,
                        region=None,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "alternate_phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="The alternate phone number of the depot.",
                        max_length=128,
                        null=True,
                        region=None,
                        verbose_name="Alternate Phone Number",
                    ),
                ),
                (
                    "fax_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="The fax number of the depot.",
                        max_length=128,
                        null=True,
                        region=None,
                        verbose_name="Fax Number",
                    ),
                ),
                (
                    "depot",
                    models.OneToOneField(
                        help_text="The depot that the depot detail belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="details",
                        related_query_name="detail",
                        to="organization.depot",
                        verbose_name="Depot",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that the depot detail belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="depot_details",
                        related_query_name="depot_detail",
                        to="organization.organization",
                        verbose_name="Organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Depot Detail",
                "verbose_name_plural": "Depot Details",
                "db_table": "depot_detail",
                "ordering": ["depot"],
            },
        ),
        migrations.AddField(
            model_name="depot",
            name="organization",
            field=models.ForeignKey(
                help_text="The organization that the depot belongs to.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="depots",
                related_query_name="depot",
                to="organization.organization",
                verbose_name="Organization",
            ),
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the department",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="The description of the department",
                        verbose_name="Description",
                    ),
                ),
                (
                    "depot",
                    models.ForeignKey(
                        blank=True,
                        help_text="The depot that the department belongs to.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="departments",
                        related_query_name="department",
                        to="organization.depot",
                        verbose_name="Depot",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that the department belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="departments",
                        related_query_name="department",
                        to="organization.organization",
                        verbose_name="Organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Department",
                "verbose_name_plural": "Departments",
                "db_table": "department",
            },
        ),
    ]
