// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/tag"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// GeneralLedgerAccountCreate is the builder for creating a GeneralLedgerAccount entity.
type GeneralLedgerAccountCreate struct {
	config
	mutation *GeneralLedgerAccountMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (glac *GeneralLedgerAccountCreate) SetBusinessUnitID(u uuid.UUID) *GeneralLedgerAccountCreate {
	glac.mutation.SetBusinessUnitID(u)
	return glac
}

// SetOrganizationID sets the "organization_id" field.
func (glac *GeneralLedgerAccountCreate) SetOrganizationID(u uuid.UUID) *GeneralLedgerAccountCreate {
	glac.mutation.SetOrganizationID(u)
	return glac
}

// SetCreatedAt sets the "created_at" field.
func (glac *GeneralLedgerAccountCreate) SetCreatedAt(t time.Time) *GeneralLedgerAccountCreate {
	glac.mutation.SetCreatedAt(t)
	return glac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableCreatedAt(t *time.Time) *GeneralLedgerAccountCreate {
	if t != nil {
		glac.SetCreatedAt(*t)
	}
	return glac
}

// SetUpdatedAt sets the "updated_at" field.
func (glac *GeneralLedgerAccountCreate) SetUpdatedAt(t time.Time) *GeneralLedgerAccountCreate {
	glac.mutation.SetUpdatedAt(t)
	return glac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableUpdatedAt(t *time.Time) *GeneralLedgerAccountCreate {
	if t != nil {
		glac.SetUpdatedAt(*t)
	}
	return glac
}

// SetVersion sets the "version" field.
func (glac *GeneralLedgerAccountCreate) SetVersion(i int) *GeneralLedgerAccountCreate {
	glac.mutation.SetVersion(i)
	return glac
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableVersion(i *int) *GeneralLedgerAccountCreate {
	if i != nil {
		glac.SetVersion(*i)
	}
	return glac
}

// SetStatus sets the "status" field.
func (glac *GeneralLedgerAccountCreate) SetStatus(ge generalledgeraccount.Status) *GeneralLedgerAccountCreate {
	glac.mutation.SetStatus(ge)
	return glac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableStatus(ge *generalledgeraccount.Status) *GeneralLedgerAccountCreate {
	if ge != nil {
		glac.SetStatus(*ge)
	}
	return glac
}

// SetAccountNumber sets the "account_number" field.
func (glac *GeneralLedgerAccountCreate) SetAccountNumber(s string) *GeneralLedgerAccountCreate {
	glac.mutation.SetAccountNumber(s)
	return glac
}

// SetAccountType sets the "account_type" field.
func (glac *GeneralLedgerAccountCreate) SetAccountType(gt generalledgeraccount.AccountType) *GeneralLedgerAccountCreate {
	glac.mutation.SetAccountType(gt)
	return glac
}

// SetCashFlowType sets the "cash_flow_type" field.
func (glac *GeneralLedgerAccountCreate) SetCashFlowType(s string) *GeneralLedgerAccountCreate {
	glac.mutation.SetCashFlowType(s)
	return glac
}

// SetNillableCashFlowType sets the "cash_flow_type" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableCashFlowType(s *string) *GeneralLedgerAccountCreate {
	if s != nil {
		glac.SetCashFlowType(*s)
	}
	return glac
}

// SetAccountSubType sets the "account_sub_type" field.
func (glac *GeneralLedgerAccountCreate) SetAccountSubType(s string) *GeneralLedgerAccountCreate {
	glac.mutation.SetAccountSubType(s)
	return glac
}

// SetNillableAccountSubType sets the "account_sub_type" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableAccountSubType(s *string) *GeneralLedgerAccountCreate {
	if s != nil {
		glac.SetAccountSubType(*s)
	}
	return glac
}

// SetAccountClass sets the "account_class" field.
func (glac *GeneralLedgerAccountCreate) SetAccountClass(s string) *GeneralLedgerAccountCreate {
	glac.mutation.SetAccountClass(s)
	return glac
}

// SetNillableAccountClass sets the "account_class" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableAccountClass(s *string) *GeneralLedgerAccountCreate {
	if s != nil {
		glac.SetAccountClass(*s)
	}
	return glac
}

// SetBalance sets the "balance" field.
func (glac *GeneralLedgerAccountCreate) SetBalance(f float64) *GeneralLedgerAccountCreate {
	glac.mutation.SetBalance(f)
	return glac
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableBalance(f *float64) *GeneralLedgerAccountCreate {
	if f != nil {
		glac.SetBalance(*f)
	}
	return glac
}

// SetInterestRate sets the "interest_rate" field.
func (glac *GeneralLedgerAccountCreate) SetInterestRate(f float64) *GeneralLedgerAccountCreate {
	glac.mutation.SetInterestRate(f)
	return glac
}

// SetNillableInterestRate sets the "interest_rate" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableInterestRate(f *float64) *GeneralLedgerAccountCreate {
	if f != nil {
		glac.SetInterestRate(*f)
	}
	return glac
}

// SetDateOpened sets the "date_opened" field.
func (glac *GeneralLedgerAccountCreate) SetDateOpened(pg *pgtype.Date) *GeneralLedgerAccountCreate {
	glac.mutation.SetDateOpened(pg)
	return glac
}

// SetDateClosed sets the "date_closed" field.
func (glac *GeneralLedgerAccountCreate) SetDateClosed(pg *pgtype.Date) *GeneralLedgerAccountCreate {
	glac.mutation.SetDateClosed(pg)
	return glac
}

// SetNotes sets the "notes" field.
func (glac *GeneralLedgerAccountCreate) SetNotes(s string) *GeneralLedgerAccountCreate {
	glac.mutation.SetNotes(s)
	return glac
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableNotes(s *string) *GeneralLedgerAccountCreate {
	if s != nil {
		glac.SetNotes(*s)
	}
	return glac
}

// SetIsTaxRelevant sets the "is_tax_relevant" field.
func (glac *GeneralLedgerAccountCreate) SetIsTaxRelevant(b bool) *GeneralLedgerAccountCreate {
	glac.mutation.SetIsTaxRelevant(b)
	return glac
}

// SetNillableIsTaxRelevant sets the "is_tax_relevant" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableIsTaxRelevant(b *bool) *GeneralLedgerAccountCreate {
	if b != nil {
		glac.SetIsTaxRelevant(*b)
	}
	return glac
}

// SetIsReconciled sets the "is_reconciled" field.
func (glac *GeneralLedgerAccountCreate) SetIsReconciled(b bool) *GeneralLedgerAccountCreate {
	glac.mutation.SetIsReconciled(b)
	return glac
}

// SetNillableIsReconciled sets the "is_reconciled" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableIsReconciled(b *bool) *GeneralLedgerAccountCreate {
	if b != nil {
		glac.SetIsReconciled(*b)
	}
	return glac
}

// SetID sets the "id" field.
func (glac *GeneralLedgerAccountCreate) SetID(u uuid.UUID) *GeneralLedgerAccountCreate {
	glac.mutation.SetID(u)
	return glac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (glac *GeneralLedgerAccountCreate) SetNillableID(u *uuid.UUID) *GeneralLedgerAccountCreate {
	if u != nil {
		glac.SetID(*u)
	}
	return glac
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (glac *GeneralLedgerAccountCreate) SetBusinessUnit(b *BusinessUnit) *GeneralLedgerAccountCreate {
	return glac.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (glac *GeneralLedgerAccountCreate) SetOrganization(o *Organization) *GeneralLedgerAccountCreate {
	return glac.SetOrganizationID(o.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (glac *GeneralLedgerAccountCreate) AddTagIDs(ids ...uuid.UUID) *GeneralLedgerAccountCreate {
	glac.mutation.AddTagIDs(ids...)
	return glac
}

// AddTags adds the "tags" edges to the Tag entity.
func (glac *GeneralLedgerAccountCreate) AddTags(t ...*Tag) *GeneralLedgerAccountCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return glac.AddTagIDs(ids...)
}

// Mutation returns the GeneralLedgerAccountMutation object of the builder.
func (glac *GeneralLedgerAccountCreate) Mutation() *GeneralLedgerAccountMutation {
	return glac.mutation
}

// Save creates the GeneralLedgerAccount in the database.
func (glac *GeneralLedgerAccountCreate) Save(ctx context.Context) (*GeneralLedgerAccount, error) {
	glac.defaults()
	return withHooks(ctx, glac.sqlSave, glac.mutation, glac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (glac *GeneralLedgerAccountCreate) SaveX(ctx context.Context) *GeneralLedgerAccount {
	v, err := glac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glac *GeneralLedgerAccountCreate) Exec(ctx context.Context) error {
	_, err := glac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glac *GeneralLedgerAccountCreate) ExecX(ctx context.Context) {
	if err := glac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (glac *GeneralLedgerAccountCreate) defaults() {
	if _, ok := glac.mutation.CreatedAt(); !ok {
		v := generalledgeraccount.DefaultCreatedAt()
		glac.mutation.SetCreatedAt(v)
	}
	if _, ok := glac.mutation.UpdatedAt(); !ok {
		v := generalledgeraccount.DefaultUpdatedAt()
		glac.mutation.SetUpdatedAt(v)
	}
	if _, ok := glac.mutation.Version(); !ok {
		v := generalledgeraccount.DefaultVersion
		glac.mutation.SetVersion(v)
	}
	if _, ok := glac.mutation.Status(); !ok {
		v := generalledgeraccount.DefaultStatus
		glac.mutation.SetStatus(v)
	}
	if _, ok := glac.mutation.DateOpened(); !ok {
		v := generalledgeraccount.DefaultDateOpened
		glac.mutation.SetDateOpened(v)
	}
	if _, ok := glac.mutation.IsTaxRelevant(); !ok {
		v := generalledgeraccount.DefaultIsTaxRelevant
		glac.mutation.SetIsTaxRelevant(v)
	}
	if _, ok := glac.mutation.IsReconciled(); !ok {
		v := generalledgeraccount.DefaultIsReconciled
		glac.mutation.SetIsReconciled(v)
	}
	if _, ok := glac.mutation.ID(); !ok {
		v := generalledgeraccount.DefaultID()
		glac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (glac *GeneralLedgerAccountCreate) check() error {
	if _, ok := glac.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "GeneralLedgerAccount.business_unit_id"`)}
	}
	if _, ok := glac.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "GeneralLedgerAccount.organization_id"`)}
	}
	if _, ok := glac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GeneralLedgerAccount.created_at"`)}
	}
	if _, ok := glac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GeneralLedgerAccount.updated_at"`)}
	}
	if _, ok := glac.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "GeneralLedgerAccount.version"`)}
	}
	if _, ok := glac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "GeneralLedgerAccount.status"`)}
	}
	if v, ok := glac.mutation.Status(); ok {
		if err := generalledgeraccount.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GeneralLedgerAccount.status": %w`, err)}
		}
	}
	if _, ok := glac.mutation.AccountNumber(); !ok {
		return &ValidationError{Name: "account_number", err: errors.New(`ent: missing required field "GeneralLedgerAccount.account_number"`)}
	}
	if v, ok := glac.mutation.AccountNumber(); ok {
		if err := generalledgeraccount.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`ent: validator failed for field "GeneralLedgerAccount.account_number": %w`, err)}
		}
	}
	if _, ok := glac.mutation.AccountType(); !ok {
		return &ValidationError{Name: "account_type", err: errors.New(`ent: missing required field "GeneralLedgerAccount.account_type"`)}
	}
	if v, ok := glac.mutation.AccountType(); ok {
		if err := generalledgeraccount.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "GeneralLedgerAccount.account_type": %w`, err)}
		}
	}
	if _, ok := glac.mutation.DateOpened(); !ok {
		return &ValidationError{Name: "date_opened", err: errors.New(`ent: missing required field "GeneralLedgerAccount.date_opened"`)}
	}
	if _, ok := glac.mutation.IsTaxRelevant(); !ok {
		return &ValidationError{Name: "is_tax_relevant", err: errors.New(`ent: missing required field "GeneralLedgerAccount.is_tax_relevant"`)}
	}
	if _, ok := glac.mutation.IsReconciled(); !ok {
		return &ValidationError{Name: "is_reconciled", err: errors.New(`ent: missing required field "GeneralLedgerAccount.is_reconciled"`)}
	}
	if _, ok := glac.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "GeneralLedgerAccount.business_unit"`)}
	}
	if _, ok := glac.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "GeneralLedgerAccount.organization"`)}
	}
	return nil
}

func (glac *GeneralLedgerAccountCreate) sqlSave(ctx context.Context) (*GeneralLedgerAccount, error) {
	if err := glac.check(); err != nil {
		return nil, err
	}
	_node, _spec := glac.createSpec()
	if err := sqlgraph.CreateNode(ctx, glac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	glac.mutation.id = &_node.ID
	glac.mutation.done = true
	return _node, nil
}

func (glac *GeneralLedgerAccountCreate) createSpec() (*GeneralLedgerAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &GeneralLedgerAccount{config: glac.config}
		_spec = sqlgraph.NewCreateSpec(generalledgeraccount.Table, sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID))
	)
	if id, ok := glac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := glac.mutation.CreatedAt(); ok {
		_spec.SetField(generalledgeraccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := glac.mutation.UpdatedAt(); ok {
		_spec.SetField(generalledgeraccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := glac.mutation.Version(); ok {
		_spec.SetField(generalledgeraccount.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := glac.mutation.Status(); ok {
		_spec.SetField(generalledgeraccount.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := glac.mutation.AccountNumber(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountNumber, field.TypeString, value)
		_node.AccountNumber = value
	}
	if value, ok := glac.mutation.AccountType(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountType, field.TypeEnum, value)
		_node.AccountType = value
	}
	if value, ok := glac.mutation.CashFlowType(); ok {
		_spec.SetField(generalledgeraccount.FieldCashFlowType, field.TypeString, value)
		_node.CashFlowType = value
	}
	if value, ok := glac.mutation.AccountSubType(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountSubType, field.TypeString, value)
		_node.AccountSubType = value
	}
	if value, ok := glac.mutation.AccountClass(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountClass, field.TypeString, value)
		_node.AccountClass = value
	}
	if value, ok := glac.mutation.Balance(); ok {
		_spec.SetField(generalledgeraccount.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := glac.mutation.InterestRate(); ok {
		_spec.SetField(generalledgeraccount.FieldInterestRate, field.TypeFloat64, value)
		_node.InterestRate = value
	}
	if value, ok := glac.mutation.DateOpened(); ok {
		_spec.SetField(generalledgeraccount.FieldDateOpened, field.TypeOther, value)
		_node.DateOpened = value
	}
	if value, ok := glac.mutation.DateClosed(); ok {
		_spec.SetField(generalledgeraccount.FieldDateClosed, field.TypeOther, value)
		_node.DateClosed = value
	}
	if value, ok := glac.mutation.Notes(); ok {
		_spec.SetField(generalledgeraccount.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := glac.mutation.IsTaxRelevant(); ok {
		_spec.SetField(generalledgeraccount.FieldIsTaxRelevant, field.TypeBool, value)
		_node.IsTaxRelevant = value
	}
	if value, ok := glac.mutation.IsReconciled(); ok {
		_spec.SetField(generalledgeraccount.FieldIsReconciled, field.TypeBool, value)
		_node.IsReconciled = value
	}
	if nodes := glac.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   generalledgeraccount.BusinessUnitTable,
			Columns: []string{generalledgeraccount.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := glac.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   generalledgeraccount.OrganizationTable,
			Columns: []string{generalledgeraccount.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := glac.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   generalledgeraccount.TagsTable,
			Columns: generalledgeraccount.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GeneralLedgerAccountCreateBulk is the builder for creating many GeneralLedgerAccount entities in bulk.
type GeneralLedgerAccountCreateBulk struct {
	config
	err      error
	builders []*GeneralLedgerAccountCreate
}

// Save creates the GeneralLedgerAccount entities in the database.
func (glacb *GeneralLedgerAccountCreateBulk) Save(ctx context.Context) ([]*GeneralLedgerAccount, error) {
	if glacb.err != nil {
		return nil, glacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(glacb.builders))
	nodes := make([]*GeneralLedgerAccount, len(glacb.builders))
	mutators := make([]Mutator, len(glacb.builders))
	for i := range glacb.builders {
		func(i int, root context.Context) {
			builder := glacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GeneralLedgerAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, glacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, glacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, glacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (glacb *GeneralLedgerAccountCreateBulk) SaveX(ctx context.Context) []*GeneralLedgerAccount {
	v, err := glacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glacb *GeneralLedgerAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := glacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glacb *GeneralLedgerAccountCreateBulk) ExecX(ctx context.Context) {
	if err := glacb.Exec(ctx); err != nil {
		panic(err)
	}
}
