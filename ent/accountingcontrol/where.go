// Code generated by ent, DO NOT EDIT.

package accountingcontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// RecThreshold applies equality check predicate on the "rec_threshold" field. It's identical to RecThresholdEQ.
func RecThreshold(v int64) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldRecThreshold, v))
}

// AutoCreateJournalEntries applies equality check predicate on the "auto_create_journal_entries" field. It's identical to AutoCreateJournalEntriesEQ.
func AutoCreateJournalEntries(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldAutoCreateJournalEntries, v))
}

// RestrictManualJournalEntries applies equality check predicate on the "restrict_manual_journal_entries" field. It's identical to RestrictManualJournalEntriesEQ.
func RestrictManualJournalEntries(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldRestrictManualJournalEntries, v))
}

// RequireJournalEntryApproval applies equality check predicate on the "require_journal_entry_approval" field. It's identical to RequireJournalEntryApprovalEQ.
func RequireJournalEntryApproval(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldRequireJournalEntryApproval, v))
}

// EnableRecNotifications applies equality check predicate on the "enable_rec_notifications" field. It's identical to EnableRecNotificationsEQ.
func EnableRecNotifications(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldEnableRecNotifications, v))
}

// HaltOnPendingRec applies equality check predicate on the "halt_on_pending_rec" field. It's identical to HaltOnPendingRecEQ.
func HaltOnPendingRec(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldHaltOnPendingRec, v))
}

// CriticalProcesses applies equality check predicate on the "critical_processes" field. It's identical to CriticalProcessesEQ.
func CriticalProcesses(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldCriticalProcesses, v))
}

// DefaultRevAccountID applies equality check predicate on the "default_rev_account_id" field. It's identical to DefaultRevAccountIDEQ.
func DefaultRevAccountID(v uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldDefaultRevAccountID, v))
}

// DefaultExpAccountID applies equality check predicate on the "default_exp_account_id" field. It's identical to DefaultExpAccountIDEQ.
func DefaultExpAccountID(v uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldDefaultExpAccountID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLTE(FieldUpdatedAt, v))
}

// RecThresholdEQ applies the EQ predicate on the "rec_threshold" field.
func RecThresholdEQ(v int64) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldRecThreshold, v))
}

// RecThresholdNEQ applies the NEQ predicate on the "rec_threshold" field.
func RecThresholdNEQ(v int64) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldRecThreshold, v))
}

// RecThresholdIn applies the In predicate on the "rec_threshold" field.
func RecThresholdIn(vs ...int64) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIn(FieldRecThreshold, vs...))
}

// RecThresholdNotIn applies the NotIn predicate on the "rec_threshold" field.
func RecThresholdNotIn(vs ...int64) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotIn(FieldRecThreshold, vs...))
}

// RecThresholdGT applies the GT predicate on the "rec_threshold" field.
func RecThresholdGT(v int64) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGT(FieldRecThreshold, v))
}

// RecThresholdGTE applies the GTE predicate on the "rec_threshold" field.
func RecThresholdGTE(v int64) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGTE(FieldRecThreshold, v))
}

// RecThresholdLT applies the LT predicate on the "rec_threshold" field.
func RecThresholdLT(v int64) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLT(FieldRecThreshold, v))
}

// RecThresholdLTE applies the LTE predicate on the "rec_threshold" field.
func RecThresholdLTE(v int64) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLTE(FieldRecThreshold, v))
}

// RecThresholdActionEQ applies the EQ predicate on the "rec_threshold_action" field.
func RecThresholdActionEQ(v RecThresholdAction) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldRecThresholdAction, v))
}

// RecThresholdActionNEQ applies the NEQ predicate on the "rec_threshold_action" field.
func RecThresholdActionNEQ(v RecThresholdAction) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldRecThresholdAction, v))
}

// RecThresholdActionIn applies the In predicate on the "rec_threshold_action" field.
func RecThresholdActionIn(vs ...RecThresholdAction) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIn(FieldRecThresholdAction, vs...))
}

// RecThresholdActionNotIn applies the NotIn predicate on the "rec_threshold_action" field.
func RecThresholdActionNotIn(vs ...RecThresholdAction) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotIn(FieldRecThresholdAction, vs...))
}

// AutoCreateJournalEntriesEQ applies the EQ predicate on the "auto_create_journal_entries" field.
func AutoCreateJournalEntriesEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldAutoCreateJournalEntries, v))
}

// AutoCreateJournalEntriesNEQ applies the NEQ predicate on the "auto_create_journal_entries" field.
func AutoCreateJournalEntriesNEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldAutoCreateJournalEntries, v))
}

// RestrictManualJournalEntriesEQ applies the EQ predicate on the "restrict_manual_journal_entries" field.
func RestrictManualJournalEntriesEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldRestrictManualJournalEntries, v))
}

// RestrictManualJournalEntriesNEQ applies the NEQ predicate on the "restrict_manual_journal_entries" field.
func RestrictManualJournalEntriesNEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldRestrictManualJournalEntries, v))
}

// RequireJournalEntryApprovalEQ applies the EQ predicate on the "require_journal_entry_approval" field.
func RequireJournalEntryApprovalEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldRequireJournalEntryApproval, v))
}

// RequireJournalEntryApprovalNEQ applies the NEQ predicate on the "require_journal_entry_approval" field.
func RequireJournalEntryApprovalNEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldRequireJournalEntryApproval, v))
}

// EnableRecNotificationsEQ applies the EQ predicate on the "enable_rec_notifications" field.
func EnableRecNotificationsEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldEnableRecNotifications, v))
}

// EnableRecNotificationsNEQ applies the NEQ predicate on the "enable_rec_notifications" field.
func EnableRecNotificationsNEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldEnableRecNotifications, v))
}

// HaltOnPendingRecEQ applies the EQ predicate on the "halt_on_pending_rec" field.
func HaltOnPendingRecEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldHaltOnPendingRec, v))
}

// HaltOnPendingRecNEQ applies the NEQ predicate on the "halt_on_pending_rec" field.
func HaltOnPendingRecNEQ(v bool) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldHaltOnPendingRec, v))
}

// CriticalProcessesEQ applies the EQ predicate on the "critical_processes" field.
func CriticalProcessesEQ(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldCriticalProcesses, v))
}

// CriticalProcessesNEQ applies the NEQ predicate on the "critical_processes" field.
func CriticalProcessesNEQ(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldCriticalProcesses, v))
}

// CriticalProcessesIn applies the In predicate on the "critical_processes" field.
func CriticalProcessesIn(vs ...string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIn(FieldCriticalProcesses, vs...))
}

// CriticalProcessesNotIn applies the NotIn predicate on the "critical_processes" field.
func CriticalProcessesNotIn(vs ...string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotIn(FieldCriticalProcesses, vs...))
}

// CriticalProcessesGT applies the GT predicate on the "critical_processes" field.
func CriticalProcessesGT(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGT(FieldCriticalProcesses, v))
}

// CriticalProcessesGTE applies the GTE predicate on the "critical_processes" field.
func CriticalProcessesGTE(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldGTE(FieldCriticalProcesses, v))
}

// CriticalProcessesLT applies the LT predicate on the "critical_processes" field.
func CriticalProcessesLT(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLT(FieldCriticalProcesses, v))
}

// CriticalProcessesLTE applies the LTE predicate on the "critical_processes" field.
func CriticalProcessesLTE(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldLTE(FieldCriticalProcesses, v))
}

// CriticalProcessesContains applies the Contains predicate on the "critical_processes" field.
func CriticalProcessesContains(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldContains(FieldCriticalProcesses, v))
}

// CriticalProcessesHasPrefix applies the HasPrefix predicate on the "critical_processes" field.
func CriticalProcessesHasPrefix(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldHasPrefix(FieldCriticalProcesses, v))
}

// CriticalProcessesHasSuffix applies the HasSuffix predicate on the "critical_processes" field.
func CriticalProcessesHasSuffix(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldHasSuffix(FieldCriticalProcesses, v))
}

// CriticalProcessesIsNil applies the IsNil predicate on the "critical_processes" field.
func CriticalProcessesIsNil() predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIsNull(FieldCriticalProcesses))
}

// CriticalProcessesNotNil applies the NotNil predicate on the "critical_processes" field.
func CriticalProcessesNotNil() predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotNull(FieldCriticalProcesses))
}

// CriticalProcessesEqualFold applies the EqualFold predicate on the "critical_processes" field.
func CriticalProcessesEqualFold(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEqualFold(FieldCriticalProcesses, v))
}

// CriticalProcessesContainsFold applies the ContainsFold predicate on the "critical_processes" field.
func CriticalProcessesContainsFold(v string) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldContainsFold(FieldCriticalProcesses, v))
}

// DefaultRevAccountIDEQ applies the EQ predicate on the "default_rev_account_id" field.
func DefaultRevAccountIDEQ(v uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldDefaultRevAccountID, v))
}

// DefaultRevAccountIDNEQ applies the NEQ predicate on the "default_rev_account_id" field.
func DefaultRevAccountIDNEQ(v uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldDefaultRevAccountID, v))
}

// DefaultRevAccountIDIn applies the In predicate on the "default_rev_account_id" field.
func DefaultRevAccountIDIn(vs ...uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIn(FieldDefaultRevAccountID, vs...))
}

// DefaultRevAccountIDNotIn applies the NotIn predicate on the "default_rev_account_id" field.
func DefaultRevAccountIDNotIn(vs ...uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotIn(FieldDefaultRevAccountID, vs...))
}

// DefaultRevAccountIDIsNil applies the IsNil predicate on the "default_rev_account_id" field.
func DefaultRevAccountIDIsNil() predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIsNull(FieldDefaultRevAccountID))
}

// DefaultRevAccountIDNotNil applies the NotNil predicate on the "default_rev_account_id" field.
func DefaultRevAccountIDNotNil() predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotNull(FieldDefaultRevAccountID))
}

// DefaultExpAccountIDEQ applies the EQ predicate on the "default_exp_account_id" field.
func DefaultExpAccountIDEQ(v uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldEQ(FieldDefaultExpAccountID, v))
}

// DefaultExpAccountIDNEQ applies the NEQ predicate on the "default_exp_account_id" field.
func DefaultExpAccountIDNEQ(v uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNEQ(FieldDefaultExpAccountID, v))
}

// DefaultExpAccountIDIn applies the In predicate on the "default_exp_account_id" field.
func DefaultExpAccountIDIn(vs ...uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIn(FieldDefaultExpAccountID, vs...))
}

// DefaultExpAccountIDNotIn applies the NotIn predicate on the "default_exp_account_id" field.
func DefaultExpAccountIDNotIn(vs ...uuid.UUID) predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotIn(FieldDefaultExpAccountID, vs...))
}

// DefaultExpAccountIDIsNil applies the IsNil predicate on the "default_exp_account_id" field.
func DefaultExpAccountIDIsNil() predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldIsNull(FieldDefaultExpAccountID))
}

// DefaultExpAccountIDNotNil applies the NotNil predicate on the "default_exp_account_id" field.
func DefaultExpAccountIDNotNil() predicate.AccountingControl {
	return predicate.AccountingControl(sql.FieldNotNull(FieldDefaultExpAccountID))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.AccountingControl {
	return predicate.AccountingControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.AccountingControl {
	return predicate.AccountingControl(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.AccountingControl {
	return predicate.AccountingControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.AccountingControl {
	return predicate.AccountingControl(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefaultRevAccount applies the HasEdge predicate on the "default_rev_account" edge.
func HasDefaultRevAccount() predicate.AccountingControl {
	return predicate.AccountingControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DefaultRevAccountTable, DefaultRevAccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultRevAccountWith applies the HasEdge predicate on the "default_rev_account" edge with a given conditions (other predicates).
func HasDefaultRevAccountWith(preds ...predicate.GeneralLedgerAccount) predicate.AccountingControl {
	return predicate.AccountingControl(func(s *sql.Selector) {
		step := newDefaultRevAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefaultExpAccount applies the HasEdge predicate on the "default_exp_account" edge.
func HasDefaultExpAccount() predicate.AccountingControl {
	return predicate.AccountingControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DefaultExpAccountTable, DefaultExpAccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultExpAccountWith applies the HasEdge predicate on the "default_exp_account" edge with a given conditions (other predicates).
func HasDefaultExpAccountWith(preds ...predicate.GeneralLedgerAccount) predicate.AccountingControl {
	return predicate.AccountingControl(func(s *sql.Selector) {
		step := newDefaultExpAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccountingControl) predicate.AccountingControl {
	return predicate.AccountingControl(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccountingControl) predicate.AccountingControl {
	return predicate.AccountingControl(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountingControl) predicate.AccountingControl {
	return predicate.AccountingControl(sql.NotPredicates(p))
}
