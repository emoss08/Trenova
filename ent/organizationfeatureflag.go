// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/featureflag"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/organizationfeatureflag"
	"github.com/google/uuid"
)

// OrganizationFeatureFlag is the model entity for the OrganizationFeatureFlag schema.
type OrganizationFeatureFlag struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// FeatureFlagID holds the value of the "feature_flag_id" field.
	FeatureFlagID uuid.UUID `json:"feature_flag_id,omitempty" json:featureFlagId`
	// IsEnabled holds the value of the "is_enabled" field.
	IsEnabled bool `json:"isEnabled" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationFeatureFlagQuery when eager-loading is set.
	Edges        OrganizationFeatureFlagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationFeatureFlagEdges holds the relations/edges for other nodes in the graph.
type OrganizationFeatureFlagEdges struct {
	// FeatureFlag holds the value of the feature_flag edge.
	FeatureFlag *FeatureFlag `json:"featureFlag"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FeatureFlagOrErr returns the FeatureFlag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationFeatureFlagEdges) FeatureFlagOrErr() (*FeatureFlag, error) {
	if e.FeatureFlag != nil {
		return e.FeatureFlag, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: featureflag.Label}
	}
	return nil, &NotLoadedError{edge: "feature_flag"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationFeatureFlagEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationFeatureFlag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationfeatureflag.FieldIsEnabled:
			values[i] = new(sql.NullBool)
		case organizationfeatureflag.FieldCreatedAt, organizationfeatureflag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case organizationfeatureflag.FieldID, organizationfeatureflag.FieldOrganizationID, organizationfeatureflag.FieldFeatureFlagID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationFeatureFlag fields.
func (off *OrganizationFeatureFlag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationfeatureflag.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				off.ID = *value
			}
		case organizationfeatureflag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				off.CreatedAt = value.Time
			}
		case organizationfeatureflag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				off.UpdatedAt = value.Time
			}
		case organizationfeatureflag.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				off.OrganizationID = *value
			}
		case organizationfeatureflag.FieldFeatureFlagID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field feature_flag_id", values[i])
			} else if value != nil {
				off.FeatureFlagID = *value
			}
		case organizationfeatureflag.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				off.IsEnabled = value.Bool
			}
		default:
			off.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrganizationFeatureFlag.
// This includes values selected through modifiers, order, etc.
func (off *OrganizationFeatureFlag) Value(name string) (ent.Value, error) {
	return off.selectValues.Get(name)
}

// QueryFeatureFlag queries the "feature_flag" edge of the OrganizationFeatureFlag entity.
func (off *OrganizationFeatureFlag) QueryFeatureFlag() *FeatureFlagQuery {
	return NewOrganizationFeatureFlagClient(off.config).QueryFeatureFlag(off)
}

// QueryOrganization queries the "organization" edge of the OrganizationFeatureFlag entity.
func (off *OrganizationFeatureFlag) QueryOrganization() *OrganizationQuery {
	return NewOrganizationFeatureFlagClient(off.config).QueryOrganization(off)
}

// Update returns a builder for updating this OrganizationFeatureFlag.
// Note that you need to call OrganizationFeatureFlag.Unwrap() before calling this method if this OrganizationFeatureFlag
// was returned from a transaction, and the transaction was committed or rolled back.
func (off *OrganizationFeatureFlag) Update() *OrganizationFeatureFlagUpdateOne {
	return NewOrganizationFeatureFlagClient(off.config).UpdateOne(off)
}

// Unwrap unwraps the OrganizationFeatureFlag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (off *OrganizationFeatureFlag) Unwrap() *OrganizationFeatureFlag {
	_tx, ok := off.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationFeatureFlag is not a transactional entity")
	}
	off.config.driver = _tx.drv
	return off
}

// String implements the fmt.Stringer.
func (off *OrganizationFeatureFlag) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationFeatureFlag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", off.ID))
	builder.WriteString("created_at=")
	builder.WriteString(off.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(off.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", off.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("feature_flag_id=")
	builder.WriteString(fmt.Sprintf("%v", off.FeatureFlagID))
	builder.WriteString(", ")
	builder.WriteString("is_enabled=")
	builder.WriteString(fmt.Sprintf("%v", off.IsEnabled))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationFeatureFlags is a parsable slice of OrganizationFeatureFlag.
type OrganizationFeatureFlags []*OrganizationFeatureFlag
