// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/accountingcontrol"
	"github.com/emoss08/trenova/ent/billingcontrol"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/dispatchcontrol"
	"github.com/emoss08/trenova/ent/emailcontrol"
	"github.com/emoss08/trenova/ent/feasibilitytoolcontrol"
	"github.com/emoss08/trenova/ent/googleapi"
	"github.com/emoss08/trenova/ent/invoicecontrol"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/routecontrol"
	"github.com/emoss08/trenova/ent/shipmentcontrol"
	"github.com/google/uuid"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrganizationUpdate) SetUpdatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (ou *OrganizationUpdate) SetBusinessUnitID(u uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetBusinessUnitID(u)
	return ou
}

// SetNillableBusinessUnitID sets the "business_unit_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableBusinessUnitID(u *uuid.UUID) *OrganizationUpdate {
	if u != nil {
		ou.SetBusinessUnitID(*u)
	}
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetScacCode sets the "scac_code" field.
func (ou *OrganizationUpdate) SetScacCode(s string) *OrganizationUpdate {
	ou.mutation.SetScacCode(s)
	return ou
}

// SetNillableScacCode sets the "scac_code" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableScacCode(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetScacCode(*s)
	}
	return ou
}

// SetDotNumber sets the "dot_number" field.
func (ou *OrganizationUpdate) SetDotNumber(s string) *OrganizationUpdate {
	ou.mutation.SetDotNumber(s)
	return ou
}

// SetNillableDotNumber sets the "dot_number" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDotNumber(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDotNumber(*s)
	}
	return ou
}

// SetLogoURL sets the "logo_url" field.
func (ou *OrganizationUpdate) SetLogoURL(s string) *OrganizationUpdate {
	ou.mutation.SetLogoURL(s)
	return ou
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableLogoURL(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetLogoURL(*s)
	}
	return ou
}

// ClearLogoURL clears the value of the "logo_url" field.
func (ou *OrganizationUpdate) ClearLogoURL() *OrganizationUpdate {
	ou.mutation.ClearLogoURL()
	return ou
}

// SetOrgType sets the "org_type" field.
func (ou *OrganizationUpdate) SetOrgType(ot organization.OrgType) *OrganizationUpdate {
	ou.mutation.SetOrgType(ot)
	return ou
}

// SetNillableOrgType sets the "org_type" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableOrgType(ot *organization.OrgType) *OrganizationUpdate {
	if ot != nil {
		ou.SetOrgType(*ot)
	}
	return ou
}

// SetTimezone sets the "timezone" field.
func (ou *OrganizationUpdate) SetTimezone(o organization.Timezone) *OrganizationUpdate {
	ou.mutation.SetTimezone(o)
	return ou
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableTimezone(o *organization.Timezone) *OrganizationUpdate {
	if o != nil {
		ou.SetTimezone(*o)
	}
	return ou
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (ou *OrganizationUpdate) SetBusinessUnit(b *BusinessUnit) *OrganizationUpdate {
	return ou.SetBusinessUnitID(b.ID)
}

// SetAccountingControlID sets the "accounting_control" edge to the AccountingControl entity by ID.
func (ou *OrganizationUpdate) SetAccountingControlID(id uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetAccountingControlID(id)
	return ou
}

// SetNillableAccountingControlID sets the "accounting_control" edge to the AccountingControl entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableAccountingControlID(id *uuid.UUID) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetAccountingControlID(*id)
	}
	return ou
}

// SetAccountingControl sets the "accounting_control" edge to the AccountingControl entity.
func (ou *OrganizationUpdate) SetAccountingControl(a *AccountingControl) *OrganizationUpdate {
	return ou.SetAccountingControlID(a.ID)
}

// SetBillingControlID sets the "billing_control" edge to the BillingControl entity by ID.
func (ou *OrganizationUpdate) SetBillingControlID(id uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetBillingControlID(id)
	return ou
}

// SetNillableBillingControlID sets the "billing_control" edge to the BillingControl entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableBillingControlID(id *uuid.UUID) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetBillingControlID(*id)
	}
	return ou
}

// SetBillingControl sets the "billing_control" edge to the BillingControl entity.
func (ou *OrganizationUpdate) SetBillingControl(b *BillingControl) *OrganizationUpdate {
	return ou.SetBillingControlID(b.ID)
}

// SetDispatchControlID sets the "dispatch_control" edge to the DispatchControl entity by ID.
func (ou *OrganizationUpdate) SetDispatchControlID(id uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetDispatchControlID(id)
	return ou
}

// SetNillableDispatchControlID sets the "dispatch_control" edge to the DispatchControl entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDispatchControlID(id *uuid.UUID) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetDispatchControlID(*id)
	}
	return ou
}

// SetDispatchControl sets the "dispatch_control" edge to the DispatchControl entity.
func (ou *OrganizationUpdate) SetDispatchControl(d *DispatchControl) *OrganizationUpdate {
	return ou.SetDispatchControlID(d.ID)
}

// SetFeasibilityToolControlID sets the "feasibility_tool_control" edge to the FeasibilityToolControl entity by ID.
func (ou *OrganizationUpdate) SetFeasibilityToolControlID(id uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetFeasibilityToolControlID(id)
	return ou
}

// SetNillableFeasibilityToolControlID sets the "feasibility_tool_control" edge to the FeasibilityToolControl entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableFeasibilityToolControlID(id *uuid.UUID) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetFeasibilityToolControlID(*id)
	}
	return ou
}

// SetFeasibilityToolControl sets the "feasibility_tool_control" edge to the FeasibilityToolControl entity.
func (ou *OrganizationUpdate) SetFeasibilityToolControl(f *FeasibilityToolControl) *OrganizationUpdate {
	return ou.SetFeasibilityToolControlID(f.ID)
}

// SetInvoiceControlID sets the "invoice_control" edge to the InvoiceControl entity by ID.
func (ou *OrganizationUpdate) SetInvoiceControlID(id uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetInvoiceControlID(id)
	return ou
}

// SetNillableInvoiceControlID sets the "invoice_control" edge to the InvoiceControl entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableInvoiceControlID(id *uuid.UUID) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetInvoiceControlID(*id)
	}
	return ou
}

// SetInvoiceControl sets the "invoice_control" edge to the InvoiceControl entity.
func (ou *OrganizationUpdate) SetInvoiceControl(i *InvoiceControl) *OrganizationUpdate {
	return ou.SetInvoiceControlID(i.ID)
}

// SetRouteControlID sets the "route_control" edge to the RouteControl entity by ID.
func (ou *OrganizationUpdate) SetRouteControlID(id uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetRouteControlID(id)
	return ou
}

// SetNillableRouteControlID sets the "route_control" edge to the RouteControl entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableRouteControlID(id *uuid.UUID) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetRouteControlID(*id)
	}
	return ou
}

// SetRouteControl sets the "route_control" edge to the RouteControl entity.
func (ou *OrganizationUpdate) SetRouteControl(r *RouteControl) *OrganizationUpdate {
	return ou.SetRouteControlID(r.ID)
}

// SetShipmentControlID sets the "shipment_control" edge to the ShipmentControl entity by ID.
func (ou *OrganizationUpdate) SetShipmentControlID(id uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetShipmentControlID(id)
	return ou
}

// SetNillableShipmentControlID sets the "shipment_control" edge to the ShipmentControl entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableShipmentControlID(id *uuid.UUID) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetShipmentControlID(*id)
	}
	return ou
}

// SetShipmentControl sets the "shipment_control" edge to the ShipmentControl entity.
func (ou *OrganizationUpdate) SetShipmentControl(s *ShipmentControl) *OrganizationUpdate {
	return ou.SetShipmentControlID(s.ID)
}

// SetEmailControlID sets the "email_control" edge to the EmailControl entity by ID.
func (ou *OrganizationUpdate) SetEmailControlID(id uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetEmailControlID(id)
	return ou
}

// SetNillableEmailControlID sets the "email_control" edge to the EmailControl entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableEmailControlID(id *uuid.UUID) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetEmailControlID(*id)
	}
	return ou
}

// SetEmailControl sets the "email_control" edge to the EmailControl entity.
func (ou *OrganizationUpdate) SetEmailControl(e *EmailControl) *OrganizationUpdate {
	return ou.SetEmailControlID(e.ID)
}

// SetGoogleAPIID sets the "google_api" edge to the GoogleApi entity by ID.
func (ou *OrganizationUpdate) SetGoogleAPIID(id uuid.UUID) *OrganizationUpdate {
	ou.mutation.SetGoogleAPIID(id)
	return ou
}

// SetNillableGoogleAPIID sets the "google_api" edge to the GoogleApi entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableGoogleAPIID(id *uuid.UUID) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetGoogleAPIID(*id)
	}
	return ou
}

// SetGoogleAPI sets the "google_api" edge to the GoogleApi entity.
func (ou *OrganizationUpdate) SetGoogleAPI(g *GoogleApi) *OrganizationUpdate {
	return ou.SetGoogleAPIID(g.ID)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (ou *OrganizationUpdate) ClearBusinessUnit() *OrganizationUpdate {
	ou.mutation.ClearBusinessUnit()
	return ou
}

// ClearAccountingControl clears the "accounting_control" edge to the AccountingControl entity.
func (ou *OrganizationUpdate) ClearAccountingControl() *OrganizationUpdate {
	ou.mutation.ClearAccountingControl()
	return ou
}

// ClearBillingControl clears the "billing_control" edge to the BillingControl entity.
func (ou *OrganizationUpdate) ClearBillingControl() *OrganizationUpdate {
	ou.mutation.ClearBillingControl()
	return ou
}

// ClearDispatchControl clears the "dispatch_control" edge to the DispatchControl entity.
func (ou *OrganizationUpdate) ClearDispatchControl() *OrganizationUpdate {
	ou.mutation.ClearDispatchControl()
	return ou
}

// ClearFeasibilityToolControl clears the "feasibility_tool_control" edge to the FeasibilityToolControl entity.
func (ou *OrganizationUpdate) ClearFeasibilityToolControl() *OrganizationUpdate {
	ou.mutation.ClearFeasibilityToolControl()
	return ou
}

// ClearInvoiceControl clears the "invoice_control" edge to the InvoiceControl entity.
func (ou *OrganizationUpdate) ClearInvoiceControl() *OrganizationUpdate {
	ou.mutation.ClearInvoiceControl()
	return ou
}

// ClearRouteControl clears the "route_control" edge to the RouteControl entity.
func (ou *OrganizationUpdate) ClearRouteControl() *OrganizationUpdate {
	ou.mutation.ClearRouteControl()
	return ou
}

// ClearShipmentControl clears the "shipment_control" edge to the ShipmentControl entity.
func (ou *OrganizationUpdate) ClearShipmentControl() *OrganizationUpdate {
	ou.mutation.ClearShipmentControl()
	return ou
}

// ClearEmailControl clears the "email_control" edge to the EmailControl entity.
func (ou *OrganizationUpdate) ClearEmailControl() *OrganizationUpdate {
	ou.mutation.ClearEmailControl()
	return ou
}

// ClearGoogleAPI clears the "google_api" edge to the GoogleApi entity.
func (ou *OrganizationUpdate) ClearGoogleAPI() *OrganizationUpdate {
	ou.mutation.ClearGoogleAPI()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrganizationUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrganizationUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.ScacCode(); ok {
		if err := organization.ScacCodeValidator(v); err != nil {
			return &ValidationError{Name: "scac_code", err: fmt.Errorf(`ent: validator failed for field "Organization.scac_code": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DotNumber(); ok {
		if err := organization.DotNumberValidator(v); err != nil {
			return &ValidationError{Name: "dot_number", err: fmt.Errorf(`ent: validator failed for field "Organization.dot_number": %w`, err)}
		}
	}
	if v, ok := ou.mutation.OrgType(); ok {
		if err := organization.OrgTypeValidator(v); err != nil {
			return &ValidationError{Name: "org_type", err: fmt.Errorf(`ent: validator failed for field "Organization.org_type": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Timezone(); ok {
		if err := organization.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "Organization.timezone": %w`, err)}
		}
	}
	if _, ok := ou.mutation.BusinessUnitID(); ou.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Organization.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrganizationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.ScacCode(); ok {
		_spec.SetField(organization.FieldScacCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.DotNumber(); ok {
		_spec.SetField(organization.FieldDotNumber, field.TypeString, value)
	}
	if value, ok := ou.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if ou.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := ou.mutation.OrgType(); ok {
		_spec.SetField(organization.FieldOrgType, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.Timezone(); ok {
		_spec.SetField(organization.FieldTimezone, field.TypeEnum, value)
	}
	if ou.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.BusinessUnitTable,
			Columns: []string{organization.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.BusinessUnitTable,
			Columns: []string{organization.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AccountingControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.AccountingControlTable,
			Columns: []string{organization.AccountingControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AccountingControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.AccountingControlTable,
			Columns: []string{organization.AccountingControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.BillingControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.BillingControlTable,
			Columns: []string{organization.BillingControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BillingControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.BillingControlTable,
			Columns: []string{organization.BillingControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.DispatchControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.DispatchControlTable,
			Columns: []string{organization.DispatchControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dispatchcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DispatchControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.DispatchControlTable,
			Columns: []string{organization.DispatchControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dispatchcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.FeasibilityToolControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.FeasibilityToolControlTable,
			Columns: []string{organization.FeasibilityToolControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feasibilitytoolcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.FeasibilityToolControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.FeasibilityToolControlTable,
			Columns: []string{organization.FeasibilityToolControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feasibilitytoolcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.InvoiceControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.InvoiceControlTable,
			Columns: []string{organization.InvoiceControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoicecontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.InvoiceControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.InvoiceControlTable,
			Columns: []string{organization.InvoiceControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoicecontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.RouteControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.RouteControlTable,
			Columns: []string{organization.RouteControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routecontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RouteControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.RouteControlTable,
			Columns: []string{organization.RouteControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routecontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ShipmentControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.ShipmentControlTable,
			Columns: []string{organization.ShipmentControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ShipmentControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.ShipmentControlTable,
			Columns: []string{organization.ShipmentControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.EmailControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.EmailControlTable,
			Columns: []string{organization.EmailControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EmailControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.EmailControlTable,
			Columns: []string{organization.EmailControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.GoogleAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.GoogleAPITable,
			Columns: []string{organization.GoogleAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(googleapi.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.GoogleAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.GoogleAPITable,
			Columns: []string{organization.GoogleAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(googleapi.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrganizationUpdateOne) SetUpdatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (ouo *OrganizationUpdateOne) SetBusinessUnitID(u uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetBusinessUnitID(u)
	return ouo
}

// SetNillableBusinessUnitID sets the "business_unit_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableBusinessUnitID(u *uuid.UUID) *OrganizationUpdateOne {
	if u != nil {
		ouo.SetBusinessUnitID(*u)
	}
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetScacCode sets the "scac_code" field.
func (ouo *OrganizationUpdateOne) SetScacCode(s string) *OrganizationUpdateOne {
	ouo.mutation.SetScacCode(s)
	return ouo
}

// SetNillableScacCode sets the "scac_code" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableScacCode(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetScacCode(*s)
	}
	return ouo
}

// SetDotNumber sets the "dot_number" field.
func (ouo *OrganizationUpdateOne) SetDotNumber(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDotNumber(s)
	return ouo
}

// SetNillableDotNumber sets the "dot_number" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDotNumber(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDotNumber(*s)
	}
	return ouo
}

// SetLogoURL sets the "logo_url" field.
func (ouo *OrganizationUpdateOne) SetLogoURL(s string) *OrganizationUpdateOne {
	ouo.mutation.SetLogoURL(s)
	return ouo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableLogoURL(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetLogoURL(*s)
	}
	return ouo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (ouo *OrganizationUpdateOne) ClearLogoURL() *OrganizationUpdateOne {
	ouo.mutation.ClearLogoURL()
	return ouo
}

// SetOrgType sets the "org_type" field.
func (ouo *OrganizationUpdateOne) SetOrgType(ot organization.OrgType) *OrganizationUpdateOne {
	ouo.mutation.SetOrgType(ot)
	return ouo
}

// SetNillableOrgType sets the "org_type" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableOrgType(ot *organization.OrgType) *OrganizationUpdateOne {
	if ot != nil {
		ouo.SetOrgType(*ot)
	}
	return ouo
}

// SetTimezone sets the "timezone" field.
func (ouo *OrganizationUpdateOne) SetTimezone(o organization.Timezone) *OrganizationUpdateOne {
	ouo.mutation.SetTimezone(o)
	return ouo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableTimezone(o *organization.Timezone) *OrganizationUpdateOne {
	if o != nil {
		ouo.SetTimezone(*o)
	}
	return ouo
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (ouo *OrganizationUpdateOne) SetBusinessUnit(b *BusinessUnit) *OrganizationUpdateOne {
	return ouo.SetBusinessUnitID(b.ID)
}

// SetAccountingControlID sets the "accounting_control" edge to the AccountingControl entity by ID.
func (ouo *OrganizationUpdateOne) SetAccountingControlID(id uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetAccountingControlID(id)
	return ouo
}

// SetNillableAccountingControlID sets the "accounting_control" edge to the AccountingControl entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableAccountingControlID(id *uuid.UUID) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetAccountingControlID(*id)
	}
	return ouo
}

// SetAccountingControl sets the "accounting_control" edge to the AccountingControl entity.
func (ouo *OrganizationUpdateOne) SetAccountingControl(a *AccountingControl) *OrganizationUpdateOne {
	return ouo.SetAccountingControlID(a.ID)
}

// SetBillingControlID sets the "billing_control" edge to the BillingControl entity by ID.
func (ouo *OrganizationUpdateOne) SetBillingControlID(id uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetBillingControlID(id)
	return ouo
}

// SetNillableBillingControlID sets the "billing_control" edge to the BillingControl entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableBillingControlID(id *uuid.UUID) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetBillingControlID(*id)
	}
	return ouo
}

// SetBillingControl sets the "billing_control" edge to the BillingControl entity.
func (ouo *OrganizationUpdateOne) SetBillingControl(b *BillingControl) *OrganizationUpdateOne {
	return ouo.SetBillingControlID(b.ID)
}

// SetDispatchControlID sets the "dispatch_control" edge to the DispatchControl entity by ID.
func (ouo *OrganizationUpdateOne) SetDispatchControlID(id uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetDispatchControlID(id)
	return ouo
}

// SetNillableDispatchControlID sets the "dispatch_control" edge to the DispatchControl entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDispatchControlID(id *uuid.UUID) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetDispatchControlID(*id)
	}
	return ouo
}

// SetDispatchControl sets the "dispatch_control" edge to the DispatchControl entity.
func (ouo *OrganizationUpdateOne) SetDispatchControl(d *DispatchControl) *OrganizationUpdateOne {
	return ouo.SetDispatchControlID(d.ID)
}

// SetFeasibilityToolControlID sets the "feasibility_tool_control" edge to the FeasibilityToolControl entity by ID.
func (ouo *OrganizationUpdateOne) SetFeasibilityToolControlID(id uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetFeasibilityToolControlID(id)
	return ouo
}

// SetNillableFeasibilityToolControlID sets the "feasibility_tool_control" edge to the FeasibilityToolControl entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableFeasibilityToolControlID(id *uuid.UUID) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetFeasibilityToolControlID(*id)
	}
	return ouo
}

// SetFeasibilityToolControl sets the "feasibility_tool_control" edge to the FeasibilityToolControl entity.
func (ouo *OrganizationUpdateOne) SetFeasibilityToolControl(f *FeasibilityToolControl) *OrganizationUpdateOne {
	return ouo.SetFeasibilityToolControlID(f.ID)
}

// SetInvoiceControlID sets the "invoice_control" edge to the InvoiceControl entity by ID.
func (ouo *OrganizationUpdateOne) SetInvoiceControlID(id uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetInvoiceControlID(id)
	return ouo
}

// SetNillableInvoiceControlID sets the "invoice_control" edge to the InvoiceControl entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableInvoiceControlID(id *uuid.UUID) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetInvoiceControlID(*id)
	}
	return ouo
}

// SetInvoiceControl sets the "invoice_control" edge to the InvoiceControl entity.
func (ouo *OrganizationUpdateOne) SetInvoiceControl(i *InvoiceControl) *OrganizationUpdateOne {
	return ouo.SetInvoiceControlID(i.ID)
}

// SetRouteControlID sets the "route_control" edge to the RouteControl entity by ID.
func (ouo *OrganizationUpdateOne) SetRouteControlID(id uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetRouteControlID(id)
	return ouo
}

// SetNillableRouteControlID sets the "route_control" edge to the RouteControl entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableRouteControlID(id *uuid.UUID) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetRouteControlID(*id)
	}
	return ouo
}

// SetRouteControl sets the "route_control" edge to the RouteControl entity.
func (ouo *OrganizationUpdateOne) SetRouteControl(r *RouteControl) *OrganizationUpdateOne {
	return ouo.SetRouteControlID(r.ID)
}

// SetShipmentControlID sets the "shipment_control" edge to the ShipmentControl entity by ID.
func (ouo *OrganizationUpdateOne) SetShipmentControlID(id uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetShipmentControlID(id)
	return ouo
}

// SetNillableShipmentControlID sets the "shipment_control" edge to the ShipmentControl entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableShipmentControlID(id *uuid.UUID) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetShipmentControlID(*id)
	}
	return ouo
}

// SetShipmentControl sets the "shipment_control" edge to the ShipmentControl entity.
func (ouo *OrganizationUpdateOne) SetShipmentControl(s *ShipmentControl) *OrganizationUpdateOne {
	return ouo.SetShipmentControlID(s.ID)
}

// SetEmailControlID sets the "email_control" edge to the EmailControl entity by ID.
func (ouo *OrganizationUpdateOne) SetEmailControlID(id uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetEmailControlID(id)
	return ouo
}

// SetNillableEmailControlID sets the "email_control" edge to the EmailControl entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableEmailControlID(id *uuid.UUID) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetEmailControlID(*id)
	}
	return ouo
}

// SetEmailControl sets the "email_control" edge to the EmailControl entity.
func (ouo *OrganizationUpdateOne) SetEmailControl(e *EmailControl) *OrganizationUpdateOne {
	return ouo.SetEmailControlID(e.ID)
}

// SetGoogleAPIID sets the "google_api" edge to the GoogleApi entity by ID.
func (ouo *OrganizationUpdateOne) SetGoogleAPIID(id uuid.UUID) *OrganizationUpdateOne {
	ouo.mutation.SetGoogleAPIID(id)
	return ouo
}

// SetNillableGoogleAPIID sets the "google_api" edge to the GoogleApi entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableGoogleAPIID(id *uuid.UUID) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetGoogleAPIID(*id)
	}
	return ouo
}

// SetGoogleAPI sets the "google_api" edge to the GoogleApi entity.
func (ouo *OrganizationUpdateOne) SetGoogleAPI(g *GoogleApi) *OrganizationUpdateOne {
	return ouo.SetGoogleAPIID(g.ID)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (ouo *OrganizationUpdateOne) ClearBusinessUnit() *OrganizationUpdateOne {
	ouo.mutation.ClearBusinessUnit()
	return ouo
}

// ClearAccountingControl clears the "accounting_control" edge to the AccountingControl entity.
func (ouo *OrganizationUpdateOne) ClearAccountingControl() *OrganizationUpdateOne {
	ouo.mutation.ClearAccountingControl()
	return ouo
}

// ClearBillingControl clears the "billing_control" edge to the BillingControl entity.
func (ouo *OrganizationUpdateOne) ClearBillingControl() *OrganizationUpdateOne {
	ouo.mutation.ClearBillingControl()
	return ouo
}

// ClearDispatchControl clears the "dispatch_control" edge to the DispatchControl entity.
func (ouo *OrganizationUpdateOne) ClearDispatchControl() *OrganizationUpdateOne {
	ouo.mutation.ClearDispatchControl()
	return ouo
}

// ClearFeasibilityToolControl clears the "feasibility_tool_control" edge to the FeasibilityToolControl entity.
func (ouo *OrganizationUpdateOne) ClearFeasibilityToolControl() *OrganizationUpdateOne {
	ouo.mutation.ClearFeasibilityToolControl()
	return ouo
}

// ClearInvoiceControl clears the "invoice_control" edge to the InvoiceControl entity.
func (ouo *OrganizationUpdateOne) ClearInvoiceControl() *OrganizationUpdateOne {
	ouo.mutation.ClearInvoiceControl()
	return ouo
}

// ClearRouteControl clears the "route_control" edge to the RouteControl entity.
func (ouo *OrganizationUpdateOne) ClearRouteControl() *OrganizationUpdateOne {
	ouo.mutation.ClearRouteControl()
	return ouo
}

// ClearShipmentControl clears the "shipment_control" edge to the ShipmentControl entity.
func (ouo *OrganizationUpdateOne) ClearShipmentControl() *OrganizationUpdateOne {
	ouo.mutation.ClearShipmentControl()
	return ouo
}

// ClearEmailControl clears the "email_control" edge to the EmailControl entity.
func (ouo *OrganizationUpdateOne) ClearEmailControl() *OrganizationUpdateOne {
	ouo.mutation.ClearEmailControl()
	return ouo
}

// ClearGoogleAPI clears the "google_api" edge to the GoogleApi entity.
func (ouo *OrganizationUpdateOne) ClearGoogleAPI() *OrganizationUpdateOne {
	ouo.mutation.ClearGoogleAPI()
	return ouo
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrganizationUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrganizationUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.ScacCode(); ok {
		if err := organization.ScacCodeValidator(v); err != nil {
			return &ValidationError{Name: "scac_code", err: fmt.Errorf(`ent: validator failed for field "Organization.scac_code": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DotNumber(); ok {
		if err := organization.DotNumberValidator(v); err != nil {
			return &ValidationError{Name: "dot_number", err: fmt.Errorf(`ent: validator failed for field "Organization.dot_number": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.OrgType(); ok {
		if err := organization.OrgTypeValidator(v); err != nil {
			return &ValidationError{Name: "org_type", err: fmt.Errorf(`ent: validator failed for field "Organization.org_type": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Timezone(); ok {
		if err := organization.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "Organization.timezone": %w`, err)}
		}
	}
	if _, ok := ouo.mutation.BusinessUnitID(); ouo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Organization.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrganizationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ScacCode(); ok {
		_spec.SetField(organization.FieldScacCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.DotNumber(); ok {
		_spec.SetField(organization.FieldDotNumber, field.TypeString, value)
	}
	if value, ok := ouo.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if ouo.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := ouo.mutation.OrgType(); ok {
		_spec.SetField(organization.FieldOrgType, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.Timezone(); ok {
		_spec.SetField(organization.FieldTimezone, field.TypeEnum, value)
	}
	if ouo.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.BusinessUnitTable,
			Columns: []string{organization.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.BusinessUnitTable,
			Columns: []string{organization.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AccountingControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.AccountingControlTable,
			Columns: []string{organization.AccountingControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AccountingControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.AccountingControlTable,
			Columns: []string{organization.AccountingControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.BillingControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.BillingControlTable,
			Columns: []string{organization.BillingControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BillingControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.BillingControlTable,
			Columns: []string{organization.BillingControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.DispatchControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.DispatchControlTable,
			Columns: []string{organization.DispatchControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dispatchcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DispatchControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.DispatchControlTable,
			Columns: []string{organization.DispatchControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dispatchcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.FeasibilityToolControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.FeasibilityToolControlTable,
			Columns: []string{organization.FeasibilityToolControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feasibilitytoolcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.FeasibilityToolControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.FeasibilityToolControlTable,
			Columns: []string{organization.FeasibilityToolControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feasibilitytoolcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.InvoiceControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.InvoiceControlTable,
			Columns: []string{organization.InvoiceControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoicecontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.InvoiceControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.InvoiceControlTable,
			Columns: []string{organization.InvoiceControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoicecontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.RouteControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.RouteControlTable,
			Columns: []string{organization.RouteControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routecontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RouteControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.RouteControlTable,
			Columns: []string{organization.RouteControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routecontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ShipmentControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.ShipmentControlTable,
			Columns: []string{organization.ShipmentControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ShipmentControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.ShipmentControlTable,
			Columns: []string{organization.ShipmentControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.EmailControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.EmailControlTable,
			Columns: []string{organization.EmailControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EmailControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.EmailControlTable,
			Columns: []string{organization.EmailControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.GoogleAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.GoogleAPITable,
			Columns: []string{organization.GoogleAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(googleapi.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.GoogleAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.GoogleAPITable,
			Columns: []string{organization.GoogleAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(googleapi.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ouo.modifiers...)
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
