// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/divisioncode"
	"github.com/emoss08/trenova/ent/predicate"
)

// DivisionCodeDelete is the builder for deleting a DivisionCode entity.
type DivisionCodeDelete struct {
	config
	hooks    []Hook
	mutation *DivisionCodeMutation
}

// Where appends a list predicates to the DivisionCodeDelete builder.
func (dcd *DivisionCodeDelete) Where(ps ...predicate.DivisionCode) *DivisionCodeDelete {
	dcd.mutation.Where(ps...)
	return dcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dcd *DivisionCodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dcd.sqlExec, dcd.mutation, dcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dcd *DivisionCodeDelete) ExecX(ctx context.Context) int {
	n, err := dcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dcd *DivisionCodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(divisioncode.Table, sqlgraph.NewFieldSpec(divisioncode.FieldID, field.TypeUUID))
	if ps := dcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dcd.mutation.done = true
	return affected, err
}

// DivisionCodeDeleteOne is the builder for deleting a single DivisionCode entity.
type DivisionCodeDeleteOne struct {
	dcd *DivisionCodeDelete
}

// Where appends a list predicates to the DivisionCodeDelete builder.
func (dcdo *DivisionCodeDeleteOne) Where(ps ...predicate.DivisionCode) *DivisionCodeDeleteOne {
	dcdo.dcd.mutation.Where(ps...)
	return dcdo
}

// Exec executes the deletion query.
func (dcdo *DivisionCodeDeleteOne) Exec(ctx context.Context) error {
	n, err := dcdo.dcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{divisioncode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dcdo *DivisionCodeDeleteOne) ExecX(ctx context.Context) {
	if err := dcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
