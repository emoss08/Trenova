// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/shipment"
	"github.com/emoss08/trenova/ent/shipmentmove"
	"github.com/emoss08/trenova/ent/stop"
	"github.com/emoss08/trenova/ent/tractor"
	"github.com/emoss08/trenova/ent/worker"
	"github.com/google/uuid"
)

// ShipmentMoveCreate is the builder for creating a ShipmentMove entity.
type ShipmentMoveCreate struct {
	config
	mutation *ShipmentMoveMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (smc *ShipmentMoveCreate) SetBusinessUnitID(u uuid.UUID) *ShipmentMoveCreate {
	smc.mutation.SetBusinessUnitID(u)
	return smc
}

// SetOrganizationID sets the "organization_id" field.
func (smc *ShipmentMoveCreate) SetOrganizationID(u uuid.UUID) *ShipmentMoveCreate {
	smc.mutation.SetOrganizationID(u)
	return smc
}

// SetCreatedAt sets the "created_at" field.
func (smc *ShipmentMoveCreate) SetCreatedAt(t time.Time) *ShipmentMoveCreate {
	smc.mutation.SetCreatedAt(t)
	return smc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillableCreatedAt(t *time.Time) *ShipmentMoveCreate {
	if t != nil {
		smc.SetCreatedAt(*t)
	}
	return smc
}

// SetUpdatedAt sets the "updated_at" field.
func (smc *ShipmentMoveCreate) SetUpdatedAt(t time.Time) *ShipmentMoveCreate {
	smc.mutation.SetUpdatedAt(t)
	return smc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillableUpdatedAt(t *time.Time) *ShipmentMoveCreate {
	if t != nil {
		smc.SetUpdatedAt(*t)
	}
	return smc
}

// SetVersion sets the "version" field.
func (smc *ShipmentMoveCreate) SetVersion(i int) *ShipmentMoveCreate {
	smc.mutation.SetVersion(i)
	return smc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillableVersion(i *int) *ShipmentMoveCreate {
	if i != nil {
		smc.SetVersion(*i)
	}
	return smc
}

// SetReferenceNumber sets the "reference_number" field.
func (smc *ShipmentMoveCreate) SetReferenceNumber(s string) *ShipmentMoveCreate {
	smc.mutation.SetReferenceNumber(s)
	return smc
}

// SetStatus sets the "status" field.
func (smc *ShipmentMoveCreate) SetStatus(s shipmentmove.Status) *ShipmentMoveCreate {
	smc.mutation.SetStatus(s)
	return smc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillableStatus(s *shipmentmove.Status) *ShipmentMoveCreate {
	if s != nil {
		smc.SetStatus(*s)
	}
	return smc
}

// SetIsLoaded sets the "is_loaded" field.
func (smc *ShipmentMoveCreate) SetIsLoaded(b bool) *ShipmentMoveCreate {
	smc.mutation.SetIsLoaded(b)
	return smc
}

// SetNillableIsLoaded sets the "is_loaded" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillableIsLoaded(b *bool) *ShipmentMoveCreate {
	if b != nil {
		smc.SetIsLoaded(*b)
	}
	return smc
}

// SetShipmentID sets the "shipment_id" field.
func (smc *ShipmentMoveCreate) SetShipmentID(u uuid.UUID) *ShipmentMoveCreate {
	smc.mutation.SetShipmentID(u)
	return smc
}

// SetTractorID sets the "tractor_id" field.
func (smc *ShipmentMoveCreate) SetTractorID(u uuid.UUID) *ShipmentMoveCreate {
	smc.mutation.SetTractorID(u)
	return smc
}

// SetNillableTractorID sets the "tractor_id" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillableTractorID(u *uuid.UUID) *ShipmentMoveCreate {
	if u != nil {
		smc.SetTractorID(*u)
	}
	return smc
}

// SetTrailerID sets the "trailer_id" field.
func (smc *ShipmentMoveCreate) SetTrailerID(u uuid.UUID) *ShipmentMoveCreate {
	smc.mutation.SetTrailerID(u)
	return smc
}

// SetNillableTrailerID sets the "trailer_id" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillableTrailerID(u *uuid.UUID) *ShipmentMoveCreate {
	if u != nil {
		smc.SetTrailerID(*u)
	}
	return smc
}

// SetPrimaryWorkerID sets the "primary_worker_id" field.
func (smc *ShipmentMoveCreate) SetPrimaryWorkerID(u uuid.UUID) *ShipmentMoveCreate {
	smc.mutation.SetPrimaryWorkerID(u)
	return smc
}

// SetNillablePrimaryWorkerID sets the "primary_worker_id" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillablePrimaryWorkerID(u *uuid.UUID) *ShipmentMoveCreate {
	if u != nil {
		smc.SetPrimaryWorkerID(*u)
	}
	return smc
}

// SetSecondaryWorkerID sets the "secondary_worker_id" field.
func (smc *ShipmentMoveCreate) SetSecondaryWorkerID(u uuid.UUID) *ShipmentMoveCreate {
	smc.mutation.SetSecondaryWorkerID(u)
	return smc
}

// SetNillableSecondaryWorkerID sets the "secondary_worker_id" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillableSecondaryWorkerID(u *uuid.UUID) *ShipmentMoveCreate {
	if u != nil {
		smc.SetSecondaryWorkerID(*u)
	}
	return smc
}

// SetID sets the "id" field.
func (smc *ShipmentMoveCreate) SetID(u uuid.UUID) *ShipmentMoveCreate {
	smc.mutation.SetID(u)
	return smc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (smc *ShipmentMoveCreate) SetNillableID(u *uuid.UUID) *ShipmentMoveCreate {
	if u != nil {
		smc.SetID(*u)
	}
	return smc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (smc *ShipmentMoveCreate) SetBusinessUnit(b *BusinessUnit) *ShipmentMoveCreate {
	return smc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (smc *ShipmentMoveCreate) SetOrganization(o *Organization) *ShipmentMoveCreate {
	return smc.SetOrganizationID(o.ID)
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (smc *ShipmentMoveCreate) SetShipment(s *Shipment) *ShipmentMoveCreate {
	return smc.SetShipmentID(s.ID)
}

// SetTractor sets the "tractor" edge to the Tractor entity.
func (smc *ShipmentMoveCreate) SetTractor(t *Tractor) *ShipmentMoveCreate {
	return smc.SetTractorID(t.ID)
}

// SetTrailer sets the "trailer" edge to the Tractor entity.
func (smc *ShipmentMoveCreate) SetTrailer(t *Tractor) *ShipmentMoveCreate {
	return smc.SetTrailerID(t.ID)
}

// SetPrimaryWorker sets the "primary_worker" edge to the Worker entity.
func (smc *ShipmentMoveCreate) SetPrimaryWorker(w *Worker) *ShipmentMoveCreate {
	return smc.SetPrimaryWorkerID(w.ID)
}

// SetSecondaryWorker sets the "secondary_worker" edge to the Worker entity.
func (smc *ShipmentMoveCreate) SetSecondaryWorker(w *Worker) *ShipmentMoveCreate {
	return smc.SetSecondaryWorkerID(w.ID)
}

// AddMoveStopIDs adds the "move_stops" edge to the Stop entity by IDs.
func (smc *ShipmentMoveCreate) AddMoveStopIDs(ids ...uuid.UUID) *ShipmentMoveCreate {
	smc.mutation.AddMoveStopIDs(ids...)
	return smc
}

// AddMoveStops adds the "move_stops" edges to the Stop entity.
func (smc *ShipmentMoveCreate) AddMoveStops(s ...*Stop) *ShipmentMoveCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smc.AddMoveStopIDs(ids...)
}

// Mutation returns the ShipmentMoveMutation object of the builder.
func (smc *ShipmentMoveCreate) Mutation() *ShipmentMoveMutation {
	return smc.mutation
}

// Save creates the ShipmentMove in the database.
func (smc *ShipmentMoveCreate) Save(ctx context.Context) (*ShipmentMove, error) {
	smc.defaults()
	return withHooks(ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *ShipmentMoveCreate) SaveX(ctx context.Context) *ShipmentMove {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *ShipmentMoveCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *ShipmentMoveCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *ShipmentMoveCreate) defaults() {
	if _, ok := smc.mutation.CreatedAt(); !ok {
		v := shipmentmove.DefaultCreatedAt()
		smc.mutation.SetCreatedAt(v)
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		v := shipmentmove.DefaultUpdatedAt()
		smc.mutation.SetUpdatedAt(v)
	}
	if _, ok := smc.mutation.Version(); !ok {
		v := shipmentmove.DefaultVersion
		smc.mutation.SetVersion(v)
	}
	if _, ok := smc.mutation.Status(); !ok {
		v := shipmentmove.DefaultStatus
		smc.mutation.SetStatus(v)
	}
	if _, ok := smc.mutation.IsLoaded(); !ok {
		v := shipmentmove.DefaultIsLoaded
		smc.mutation.SetIsLoaded(v)
	}
	if _, ok := smc.mutation.ID(); !ok {
		v := shipmentmove.DefaultID()
		smc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *ShipmentMoveCreate) check() error {
	if _, ok := smc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "ShipmentMove.business_unit_id"`)}
	}
	if _, ok := smc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "ShipmentMove.organization_id"`)}
	}
	if _, ok := smc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ShipmentMove.created_at"`)}
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ShipmentMove.updated_at"`)}
	}
	if _, ok := smc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ShipmentMove.version"`)}
	}
	if _, ok := smc.mutation.ReferenceNumber(); !ok {
		return &ValidationError{Name: "reference_number", err: errors.New(`ent: missing required field "ShipmentMove.reference_number"`)}
	}
	if v, ok := smc.mutation.ReferenceNumber(); ok {
		if err := shipmentmove.ReferenceNumberValidator(v); err != nil {
			return &ValidationError{Name: "reference_number", err: fmt.Errorf(`ent: validator failed for field "ShipmentMove.reference_number": %w`, err)}
		}
	}
	if _, ok := smc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ShipmentMove.status"`)}
	}
	if v, ok := smc.mutation.Status(); ok {
		if err := shipmentmove.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentMove.status": %w`, err)}
		}
	}
	if _, ok := smc.mutation.IsLoaded(); !ok {
		return &ValidationError{Name: "is_loaded", err: errors.New(`ent: missing required field "ShipmentMove.is_loaded"`)}
	}
	if _, ok := smc.mutation.ShipmentID(); !ok {
		return &ValidationError{Name: "shipment_id", err: errors.New(`ent: missing required field "ShipmentMove.shipment_id"`)}
	}
	if _, ok := smc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "ShipmentMove.business_unit"`)}
	}
	if _, ok := smc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "ShipmentMove.organization"`)}
	}
	if _, ok := smc.mutation.ShipmentID(); !ok {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentMove.shipment"`)}
	}
	return nil
}

func (smc *ShipmentMoveCreate) sqlSave(ctx context.Context) (*ShipmentMove, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *ShipmentMoveCreate) createSpec() (*ShipmentMove, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentMove{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentmove.Table, sqlgraph.NewFieldSpec(shipmentmove.FieldID, field.TypeUUID))
	)
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := smc.mutation.CreatedAt(); ok {
		_spec.SetField(shipmentmove.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := smc.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentmove.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := smc.mutation.Version(); ok {
		_spec.SetField(shipmentmove.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := smc.mutation.ReferenceNumber(); ok {
		_spec.SetField(shipmentmove.FieldReferenceNumber, field.TypeString, value)
		_node.ReferenceNumber = value
	}
	if value, ok := smc.mutation.Status(); ok {
		_spec.SetField(shipmentmove.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := smc.mutation.IsLoaded(); ok {
		_spec.SetField(shipmentmove.FieldIsLoaded, field.TypeBool, value)
		_node.IsLoaded = value
	}
	if nodes := smc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.BusinessUnitTable,
			Columns: []string{shipmentmove.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.OrganizationTable,
			Columns: []string{shipmentmove.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentmove.ShipmentTable,
			Columns: []string{shipmentmove.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShipmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smc.mutation.TractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TractorTable,
			Columns: []string{shipmentmove.TractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TractorID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smc.mutation.TrailerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TrailerTable,
			Columns: []string{shipmentmove.TrailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TrailerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smc.mutation.PrimaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.PrimaryWorkerTable,
			Columns: []string{shipmentmove.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PrimaryWorkerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smc.mutation.SecondaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.SecondaryWorkerTable,
			Columns: []string{shipmentmove.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SecondaryWorkerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smc.mutation.MoveStopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentmove.MoveStopsTable,
			Columns: []string{shipmentmove.MoveStopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stop.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShipmentMoveCreateBulk is the builder for creating many ShipmentMove entities in bulk.
type ShipmentMoveCreateBulk struct {
	config
	err      error
	builders []*ShipmentMoveCreate
}

// Save creates the ShipmentMove entities in the database.
func (smcb *ShipmentMoveCreateBulk) Save(ctx context.Context) ([]*ShipmentMove, error) {
	if smcb.err != nil {
		return nil, smcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*ShipmentMove, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentMoveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *ShipmentMoveCreateBulk) SaveX(ctx context.Context) []*ShipmentMove {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *ShipmentMoveCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *ShipmentMoveCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}
