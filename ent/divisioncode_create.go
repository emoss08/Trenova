// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/divisioncode"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// DivisionCodeCreate is the builder for creating a DivisionCode entity.
type DivisionCodeCreate struct {
	config
	mutation *DivisionCodeMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (dcc *DivisionCodeCreate) SetBusinessUnitID(u uuid.UUID) *DivisionCodeCreate {
	dcc.mutation.SetBusinessUnitID(u)
	return dcc
}

// SetOrganizationID sets the "organization_id" field.
func (dcc *DivisionCodeCreate) SetOrganizationID(u uuid.UUID) *DivisionCodeCreate {
	dcc.mutation.SetOrganizationID(u)
	return dcc
}

// SetCreatedAt sets the "created_at" field.
func (dcc *DivisionCodeCreate) SetCreatedAt(t time.Time) *DivisionCodeCreate {
	dcc.mutation.SetCreatedAt(t)
	return dcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcc *DivisionCodeCreate) SetNillableCreatedAt(t *time.Time) *DivisionCodeCreate {
	if t != nil {
		dcc.SetCreatedAt(*t)
	}
	return dcc
}

// SetUpdatedAt sets the "updated_at" field.
func (dcc *DivisionCodeCreate) SetUpdatedAt(t time.Time) *DivisionCodeCreate {
	dcc.mutation.SetUpdatedAt(t)
	return dcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dcc *DivisionCodeCreate) SetNillableUpdatedAt(t *time.Time) *DivisionCodeCreate {
	if t != nil {
		dcc.SetUpdatedAt(*t)
	}
	return dcc
}

// SetVersion sets the "version" field.
func (dcc *DivisionCodeCreate) SetVersion(i int) *DivisionCodeCreate {
	dcc.mutation.SetVersion(i)
	return dcc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dcc *DivisionCodeCreate) SetNillableVersion(i *int) *DivisionCodeCreate {
	if i != nil {
		dcc.SetVersion(*i)
	}
	return dcc
}

// SetStatus sets the "status" field.
func (dcc *DivisionCodeCreate) SetStatus(d divisioncode.Status) *DivisionCodeCreate {
	dcc.mutation.SetStatus(d)
	return dcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dcc *DivisionCodeCreate) SetNillableStatus(d *divisioncode.Status) *DivisionCodeCreate {
	if d != nil {
		dcc.SetStatus(*d)
	}
	return dcc
}

// SetCode sets the "code" field.
func (dcc *DivisionCodeCreate) SetCode(s string) *DivisionCodeCreate {
	dcc.mutation.SetCode(s)
	return dcc
}

// SetDescription sets the "description" field.
func (dcc *DivisionCodeCreate) SetDescription(s string) *DivisionCodeCreate {
	dcc.mutation.SetDescription(s)
	return dcc
}

// SetCashAccountID sets the "cash_account_id" field.
func (dcc *DivisionCodeCreate) SetCashAccountID(u uuid.UUID) *DivisionCodeCreate {
	dcc.mutation.SetCashAccountID(u)
	return dcc
}

// SetNillableCashAccountID sets the "cash_account_id" field if the given value is not nil.
func (dcc *DivisionCodeCreate) SetNillableCashAccountID(u *uuid.UUID) *DivisionCodeCreate {
	if u != nil {
		dcc.SetCashAccountID(*u)
	}
	return dcc
}

// SetApAccountID sets the "ap_account_id" field.
func (dcc *DivisionCodeCreate) SetApAccountID(u uuid.UUID) *DivisionCodeCreate {
	dcc.mutation.SetApAccountID(u)
	return dcc
}

// SetNillableApAccountID sets the "ap_account_id" field if the given value is not nil.
func (dcc *DivisionCodeCreate) SetNillableApAccountID(u *uuid.UUID) *DivisionCodeCreate {
	if u != nil {
		dcc.SetApAccountID(*u)
	}
	return dcc
}

// SetExpenseAccountID sets the "expense_account_id" field.
func (dcc *DivisionCodeCreate) SetExpenseAccountID(u uuid.UUID) *DivisionCodeCreate {
	dcc.mutation.SetExpenseAccountID(u)
	return dcc
}

// SetNillableExpenseAccountID sets the "expense_account_id" field if the given value is not nil.
func (dcc *DivisionCodeCreate) SetNillableExpenseAccountID(u *uuid.UUID) *DivisionCodeCreate {
	if u != nil {
		dcc.SetExpenseAccountID(*u)
	}
	return dcc
}

// SetID sets the "id" field.
func (dcc *DivisionCodeCreate) SetID(u uuid.UUID) *DivisionCodeCreate {
	dcc.mutation.SetID(u)
	return dcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dcc *DivisionCodeCreate) SetNillableID(u *uuid.UUID) *DivisionCodeCreate {
	if u != nil {
		dcc.SetID(*u)
	}
	return dcc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (dcc *DivisionCodeCreate) SetBusinessUnit(b *BusinessUnit) *DivisionCodeCreate {
	return dcc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (dcc *DivisionCodeCreate) SetOrganization(o *Organization) *DivisionCodeCreate {
	return dcc.SetOrganizationID(o.ID)
}

// SetCashAccount sets the "cash_account" edge to the GeneralLedgerAccount entity.
func (dcc *DivisionCodeCreate) SetCashAccount(g *GeneralLedgerAccount) *DivisionCodeCreate {
	return dcc.SetCashAccountID(g.ID)
}

// SetApAccount sets the "ap_account" edge to the GeneralLedgerAccount entity.
func (dcc *DivisionCodeCreate) SetApAccount(g *GeneralLedgerAccount) *DivisionCodeCreate {
	return dcc.SetApAccountID(g.ID)
}

// SetExpenseAccount sets the "expense_account" edge to the GeneralLedgerAccount entity.
func (dcc *DivisionCodeCreate) SetExpenseAccount(g *GeneralLedgerAccount) *DivisionCodeCreate {
	return dcc.SetExpenseAccountID(g.ID)
}

// Mutation returns the DivisionCodeMutation object of the builder.
func (dcc *DivisionCodeCreate) Mutation() *DivisionCodeMutation {
	return dcc.mutation
}

// Save creates the DivisionCode in the database.
func (dcc *DivisionCodeCreate) Save(ctx context.Context) (*DivisionCode, error) {
	dcc.defaults()
	return withHooks(ctx, dcc.sqlSave, dcc.mutation, dcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DivisionCodeCreate) SaveX(ctx context.Context) *DivisionCode {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DivisionCodeCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DivisionCodeCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcc *DivisionCodeCreate) defaults() {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		v := divisioncode.DefaultCreatedAt()
		dcc.mutation.SetCreatedAt(v)
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		v := divisioncode.DefaultUpdatedAt()
		dcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dcc.mutation.Version(); !ok {
		v := divisioncode.DefaultVersion
		dcc.mutation.SetVersion(v)
	}
	if _, ok := dcc.mutation.Status(); !ok {
		v := divisioncode.DefaultStatus
		dcc.mutation.SetStatus(v)
	}
	if _, ok := dcc.mutation.ID(); !ok {
		v := divisioncode.DefaultID()
		dcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DivisionCodeCreate) check() error {
	if _, ok := dcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "DivisionCode.business_unit_id"`)}
	}
	if _, ok := dcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "DivisionCode.organization_id"`)}
	}
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DivisionCode.created_at"`)}
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DivisionCode.updated_at"`)}
	}
	if _, ok := dcc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "DivisionCode.version"`)}
	}
	if _, ok := dcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "DivisionCode.status"`)}
	}
	if v, ok := dcc.mutation.Status(); ok {
		if err := divisioncode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DivisionCode.status": %w`, err)}
		}
	}
	if _, ok := dcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "DivisionCode.code"`)}
	}
	if v, ok := dcc.mutation.Code(); ok {
		if err := divisioncode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DivisionCode.code": %w`, err)}
		}
	}
	if _, ok := dcc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "DivisionCode.description"`)}
	}
	if v, ok := dcc.mutation.Description(); ok {
		if err := divisioncode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "DivisionCode.description": %w`, err)}
		}
	}
	if _, ok := dcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "DivisionCode.business_unit"`)}
	}
	if _, ok := dcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "DivisionCode.organization"`)}
	}
	return nil
}

func (dcc *DivisionCodeCreate) sqlSave(ctx context.Context) (*DivisionCode, error) {
	if err := dcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dcc.mutation.id = &_node.ID
	dcc.mutation.done = true
	return _node, nil
}

func (dcc *DivisionCodeCreate) createSpec() (*DivisionCode, *sqlgraph.CreateSpec) {
	var (
		_node = &DivisionCode{config: dcc.config}
		_spec = sqlgraph.NewCreateSpec(divisioncode.Table, sqlgraph.NewFieldSpec(divisioncode.FieldID, field.TypeUUID))
	)
	if id, ok := dcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dcc.mutation.CreatedAt(); ok {
		_spec.SetField(divisioncode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dcc.mutation.UpdatedAt(); ok {
		_spec.SetField(divisioncode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dcc.mutation.Version(); ok {
		_spec.SetField(divisioncode.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := dcc.mutation.Status(); ok {
		_spec.SetField(divisioncode.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := dcc.mutation.Code(); ok {
		_spec.SetField(divisioncode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := dcc.mutation.Description(); ok {
		_spec.SetField(divisioncode.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := dcc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.BusinessUnitTable,
			Columns: []string{divisioncode.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.OrganizationTable,
			Columns: []string{divisioncode.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.CashAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.CashAccountTable,
			Columns: []string{divisioncode.CashAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CashAccountID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.ApAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ApAccountTable,
			Columns: []string{divisioncode.ApAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApAccountID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.ExpenseAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ExpenseAccountTable,
			Columns: []string{divisioncode.ExpenseAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExpenseAccountID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DivisionCodeCreateBulk is the builder for creating many DivisionCode entities in bulk.
type DivisionCodeCreateBulk struct {
	config
	err      error
	builders []*DivisionCodeCreate
}

// Save creates the DivisionCode entities in the database.
func (dccb *DivisionCodeCreateBulk) Save(ctx context.Context) ([]*DivisionCode, error) {
	if dccb.err != nil {
		return nil, dccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DivisionCode, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DivisionCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DivisionCodeCreateBulk) SaveX(ctx context.Context) []*DivisionCode {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DivisionCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DivisionCodeCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}
