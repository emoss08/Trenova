// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/accessorialcharge"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/shipmentcharges"
	"github.com/emoss08/trenova/ent/user"
	"github.com/google/uuid"
)

// ShipmentChargesUpdate is the builder for updating ShipmentCharges entities.
type ShipmentChargesUpdate struct {
	config
	hooks     []Hook
	mutation  *ShipmentChargesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShipmentChargesUpdate builder.
func (scu *ShipmentChargesUpdate) Where(ps ...predicate.ShipmentCharges) *ShipmentChargesUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *ShipmentChargesUpdate) SetUpdatedAt(t time.Time) *ShipmentChargesUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetVersion sets the "version" field.
func (scu *ShipmentChargesUpdate) SetVersion(i int) *ShipmentChargesUpdate {
	scu.mutation.ResetVersion()
	scu.mutation.SetVersion(i)
	return scu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (scu *ShipmentChargesUpdate) SetNillableVersion(i *int) *ShipmentChargesUpdate {
	if i != nil {
		scu.SetVersion(*i)
	}
	return scu
}

// AddVersion adds i to the "version" field.
func (scu *ShipmentChargesUpdate) AddVersion(i int) *ShipmentChargesUpdate {
	scu.mutation.AddVersion(i)
	return scu
}

// SetAccessorialChargeID sets the "accessorial_charge_id" field.
func (scu *ShipmentChargesUpdate) SetAccessorialChargeID(u uuid.UUID) *ShipmentChargesUpdate {
	scu.mutation.SetAccessorialChargeID(u)
	return scu
}

// SetNillableAccessorialChargeID sets the "accessorial_charge_id" field if the given value is not nil.
func (scu *ShipmentChargesUpdate) SetNillableAccessorialChargeID(u *uuid.UUID) *ShipmentChargesUpdate {
	if u != nil {
		scu.SetAccessorialChargeID(*u)
	}
	return scu
}

// SetDescription sets the "description" field.
func (scu *ShipmentChargesUpdate) SetDescription(s string) *ShipmentChargesUpdate {
	scu.mutation.SetDescription(s)
	return scu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scu *ShipmentChargesUpdate) SetNillableDescription(s *string) *ShipmentChargesUpdate {
	if s != nil {
		scu.SetDescription(*s)
	}
	return scu
}

// SetChargeAmount sets the "charge_amount" field.
func (scu *ShipmentChargesUpdate) SetChargeAmount(f float64) *ShipmentChargesUpdate {
	scu.mutation.ResetChargeAmount()
	scu.mutation.SetChargeAmount(f)
	return scu
}

// SetNillableChargeAmount sets the "charge_amount" field if the given value is not nil.
func (scu *ShipmentChargesUpdate) SetNillableChargeAmount(f *float64) *ShipmentChargesUpdate {
	if f != nil {
		scu.SetChargeAmount(*f)
	}
	return scu
}

// AddChargeAmount adds f to the "charge_amount" field.
func (scu *ShipmentChargesUpdate) AddChargeAmount(f float64) *ShipmentChargesUpdate {
	scu.mutation.AddChargeAmount(f)
	return scu
}

// SetUnits sets the "units" field.
func (scu *ShipmentChargesUpdate) SetUnits(i int) *ShipmentChargesUpdate {
	scu.mutation.ResetUnits()
	scu.mutation.SetUnits(i)
	return scu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (scu *ShipmentChargesUpdate) SetNillableUnits(i *int) *ShipmentChargesUpdate {
	if i != nil {
		scu.SetUnits(*i)
	}
	return scu
}

// AddUnits adds i to the "units" field.
func (scu *ShipmentChargesUpdate) AddUnits(i int) *ShipmentChargesUpdate {
	scu.mutation.AddUnits(i)
	return scu
}

// SetSubTotal sets the "sub_total" field.
func (scu *ShipmentChargesUpdate) SetSubTotal(f float64) *ShipmentChargesUpdate {
	scu.mutation.ResetSubTotal()
	scu.mutation.SetSubTotal(f)
	return scu
}

// SetNillableSubTotal sets the "sub_total" field if the given value is not nil.
func (scu *ShipmentChargesUpdate) SetNillableSubTotal(f *float64) *ShipmentChargesUpdate {
	if f != nil {
		scu.SetSubTotal(*f)
	}
	return scu
}

// AddSubTotal adds f to the "sub_total" field.
func (scu *ShipmentChargesUpdate) AddSubTotal(f float64) *ShipmentChargesUpdate {
	scu.mutation.AddSubTotal(f)
	return scu
}

// SetCreatedBy sets the "created_by" field.
func (scu *ShipmentChargesUpdate) SetCreatedBy(u uuid.UUID) *ShipmentChargesUpdate {
	scu.mutation.SetCreatedBy(u)
	return scu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (scu *ShipmentChargesUpdate) SetNillableCreatedBy(u *uuid.UUID) *ShipmentChargesUpdate {
	if u != nil {
		scu.SetCreatedBy(*u)
	}
	return scu
}

// SetAccessorialCharge sets the "accessorial_charge" edge to the AccessorialCharge entity.
func (scu *ShipmentChargesUpdate) SetAccessorialCharge(a *AccessorialCharge) *ShipmentChargesUpdate {
	return scu.SetAccessorialChargeID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (scu *ShipmentChargesUpdate) SetUserID(id uuid.UUID) *ShipmentChargesUpdate {
	scu.mutation.SetUserID(id)
	return scu
}

// SetUser sets the "user" edge to the User entity.
func (scu *ShipmentChargesUpdate) SetUser(u *User) *ShipmentChargesUpdate {
	return scu.SetUserID(u.ID)
}

// Mutation returns the ShipmentChargesMutation object of the builder.
func (scu *ShipmentChargesUpdate) Mutation() *ShipmentChargesMutation {
	return scu.mutation
}

// ClearAccessorialCharge clears the "accessorial_charge" edge to the AccessorialCharge entity.
func (scu *ShipmentChargesUpdate) ClearAccessorialCharge() *ShipmentChargesUpdate {
	scu.mutation.ClearAccessorialCharge()
	return scu
}

// ClearUser clears the "user" edge to the User entity.
func (scu *ShipmentChargesUpdate) ClearUser() *ShipmentChargesUpdate {
	scu.mutation.ClearUser()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ShipmentChargesUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ShipmentChargesUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ShipmentChargesUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ShipmentChargesUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ShipmentChargesUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := shipmentcharges.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *ShipmentChargesUpdate) check() error {
	if v, ok := scu.mutation.ChargeAmount(); ok {
		if err := shipmentcharges.ChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "charge_amount", err: fmt.Errorf(`ent: validator failed for field "ShipmentCharges.charge_amount": %w`, err)}
		}
	}
	if v, ok := scu.mutation.Units(); ok {
		if err := shipmentcharges.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "ShipmentCharges.units": %w`, err)}
		}
	}
	if v, ok := scu.mutation.SubTotal(); ok {
		if err := shipmentcharges.SubTotalValidator(v); err != nil {
			return &ValidationError{Name: "sub_total", err: fmt.Errorf(`ent: validator failed for field "ShipmentCharges.sub_total": %w`, err)}
		}
	}
	if _, ok := scu.mutation.BusinessUnitID(); scu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.business_unit"`)
	}
	if _, ok := scu.mutation.OrganizationID(); scu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.organization"`)
	}
	if _, ok := scu.mutation.ShipmentID(); scu.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.shipment"`)
	}
	if _, ok := scu.mutation.AccessorialChargeID(); scu.mutation.AccessorialChargeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.accessorial_charge"`)
	}
	if _, ok := scu.mutation.UserID(); scu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scu *ShipmentChargesUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentChargesUpdate {
	scu.modifiers = append(scu.modifiers, modifiers...)
	return scu
}

func (scu *ShipmentChargesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentcharges.Table, shipmentcharges.Columns, sqlgraph.NewFieldSpec(shipmentcharges.FieldID, field.TypeUUID))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcharges.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.Version(); ok {
		_spec.SetField(shipmentcharges.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentcharges.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scu.mutation.Description(); ok {
		_spec.SetField(shipmentcharges.FieldDescription, field.TypeString, value)
	}
	if value, ok := scu.mutation.ChargeAmount(); ok {
		_spec.SetField(shipmentcharges.FieldChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.AddedChargeAmount(); ok {
		_spec.AddField(shipmentcharges.FieldChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.Units(); ok {
		_spec.SetField(shipmentcharges.FieldUnits, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedUnits(); ok {
		_spec.AddField(shipmentcharges.FieldUnits, field.TypeInt, value)
	}
	if value, ok := scu.mutation.SubTotal(); ok {
		_spec.SetField(shipmentcharges.FieldSubTotal, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.AddedSubTotal(); ok {
		_spec.AddField(shipmentcharges.FieldSubTotal, field.TypeFloat64, value)
	}
	if scu.mutation.AccessorialChargeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.AccessorialChargeTable,
			Columns: []string{shipmentcharges.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.AccessorialChargeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.AccessorialChargeTable,
			Columns: []string{shipmentcharges.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.UserTable,
			Columns: []string{shipmentcharges.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.UserTable,
			Columns: []string{shipmentcharges.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentcharges.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ShipmentChargesUpdateOne is the builder for updating a single ShipmentCharges entity.
type ShipmentChargesUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShipmentChargesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *ShipmentChargesUpdateOne) SetUpdatedAt(t time.Time) *ShipmentChargesUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetVersion sets the "version" field.
func (scuo *ShipmentChargesUpdateOne) SetVersion(i int) *ShipmentChargesUpdateOne {
	scuo.mutation.ResetVersion()
	scuo.mutation.SetVersion(i)
	return scuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (scuo *ShipmentChargesUpdateOne) SetNillableVersion(i *int) *ShipmentChargesUpdateOne {
	if i != nil {
		scuo.SetVersion(*i)
	}
	return scuo
}

// AddVersion adds i to the "version" field.
func (scuo *ShipmentChargesUpdateOne) AddVersion(i int) *ShipmentChargesUpdateOne {
	scuo.mutation.AddVersion(i)
	return scuo
}

// SetAccessorialChargeID sets the "accessorial_charge_id" field.
func (scuo *ShipmentChargesUpdateOne) SetAccessorialChargeID(u uuid.UUID) *ShipmentChargesUpdateOne {
	scuo.mutation.SetAccessorialChargeID(u)
	return scuo
}

// SetNillableAccessorialChargeID sets the "accessorial_charge_id" field if the given value is not nil.
func (scuo *ShipmentChargesUpdateOne) SetNillableAccessorialChargeID(u *uuid.UUID) *ShipmentChargesUpdateOne {
	if u != nil {
		scuo.SetAccessorialChargeID(*u)
	}
	return scuo
}

// SetDescription sets the "description" field.
func (scuo *ShipmentChargesUpdateOne) SetDescription(s string) *ShipmentChargesUpdateOne {
	scuo.mutation.SetDescription(s)
	return scuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scuo *ShipmentChargesUpdateOne) SetNillableDescription(s *string) *ShipmentChargesUpdateOne {
	if s != nil {
		scuo.SetDescription(*s)
	}
	return scuo
}

// SetChargeAmount sets the "charge_amount" field.
func (scuo *ShipmentChargesUpdateOne) SetChargeAmount(f float64) *ShipmentChargesUpdateOne {
	scuo.mutation.ResetChargeAmount()
	scuo.mutation.SetChargeAmount(f)
	return scuo
}

// SetNillableChargeAmount sets the "charge_amount" field if the given value is not nil.
func (scuo *ShipmentChargesUpdateOne) SetNillableChargeAmount(f *float64) *ShipmentChargesUpdateOne {
	if f != nil {
		scuo.SetChargeAmount(*f)
	}
	return scuo
}

// AddChargeAmount adds f to the "charge_amount" field.
func (scuo *ShipmentChargesUpdateOne) AddChargeAmount(f float64) *ShipmentChargesUpdateOne {
	scuo.mutation.AddChargeAmount(f)
	return scuo
}

// SetUnits sets the "units" field.
func (scuo *ShipmentChargesUpdateOne) SetUnits(i int) *ShipmentChargesUpdateOne {
	scuo.mutation.ResetUnits()
	scuo.mutation.SetUnits(i)
	return scuo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (scuo *ShipmentChargesUpdateOne) SetNillableUnits(i *int) *ShipmentChargesUpdateOne {
	if i != nil {
		scuo.SetUnits(*i)
	}
	return scuo
}

// AddUnits adds i to the "units" field.
func (scuo *ShipmentChargesUpdateOne) AddUnits(i int) *ShipmentChargesUpdateOne {
	scuo.mutation.AddUnits(i)
	return scuo
}

// SetSubTotal sets the "sub_total" field.
func (scuo *ShipmentChargesUpdateOne) SetSubTotal(f float64) *ShipmentChargesUpdateOne {
	scuo.mutation.ResetSubTotal()
	scuo.mutation.SetSubTotal(f)
	return scuo
}

// SetNillableSubTotal sets the "sub_total" field if the given value is not nil.
func (scuo *ShipmentChargesUpdateOne) SetNillableSubTotal(f *float64) *ShipmentChargesUpdateOne {
	if f != nil {
		scuo.SetSubTotal(*f)
	}
	return scuo
}

// AddSubTotal adds f to the "sub_total" field.
func (scuo *ShipmentChargesUpdateOne) AddSubTotal(f float64) *ShipmentChargesUpdateOne {
	scuo.mutation.AddSubTotal(f)
	return scuo
}

// SetCreatedBy sets the "created_by" field.
func (scuo *ShipmentChargesUpdateOne) SetCreatedBy(u uuid.UUID) *ShipmentChargesUpdateOne {
	scuo.mutation.SetCreatedBy(u)
	return scuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (scuo *ShipmentChargesUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *ShipmentChargesUpdateOne {
	if u != nil {
		scuo.SetCreatedBy(*u)
	}
	return scuo
}

// SetAccessorialCharge sets the "accessorial_charge" edge to the AccessorialCharge entity.
func (scuo *ShipmentChargesUpdateOne) SetAccessorialCharge(a *AccessorialCharge) *ShipmentChargesUpdateOne {
	return scuo.SetAccessorialChargeID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (scuo *ShipmentChargesUpdateOne) SetUserID(id uuid.UUID) *ShipmentChargesUpdateOne {
	scuo.mutation.SetUserID(id)
	return scuo
}

// SetUser sets the "user" edge to the User entity.
func (scuo *ShipmentChargesUpdateOne) SetUser(u *User) *ShipmentChargesUpdateOne {
	return scuo.SetUserID(u.ID)
}

// Mutation returns the ShipmentChargesMutation object of the builder.
func (scuo *ShipmentChargesUpdateOne) Mutation() *ShipmentChargesMutation {
	return scuo.mutation
}

// ClearAccessorialCharge clears the "accessorial_charge" edge to the AccessorialCharge entity.
func (scuo *ShipmentChargesUpdateOne) ClearAccessorialCharge() *ShipmentChargesUpdateOne {
	scuo.mutation.ClearAccessorialCharge()
	return scuo
}

// ClearUser clears the "user" edge to the User entity.
func (scuo *ShipmentChargesUpdateOne) ClearUser() *ShipmentChargesUpdateOne {
	scuo.mutation.ClearUser()
	return scuo
}

// Where appends a list predicates to the ShipmentChargesUpdate builder.
func (scuo *ShipmentChargesUpdateOne) Where(ps ...predicate.ShipmentCharges) *ShipmentChargesUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ShipmentChargesUpdateOne) Select(field string, fields ...string) *ShipmentChargesUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ShipmentCharges entity.
func (scuo *ShipmentChargesUpdateOne) Save(ctx context.Context) (*ShipmentCharges, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ShipmentChargesUpdateOne) SaveX(ctx context.Context) *ShipmentCharges {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ShipmentChargesUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ShipmentChargesUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ShipmentChargesUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := shipmentcharges.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *ShipmentChargesUpdateOne) check() error {
	if v, ok := scuo.mutation.ChargeAmount(); ok {
		if err := shipmentcharges.ChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "charge_amount", err: fmt.Errorf(`ent: validator failed for field "ShipmentCharges.charge_amount": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.Units(); ok {
		if err := shipmentcharges.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "ShipmentCharges.units": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.SubTotal(); ok {
		if err := shipmentcharges.SubTotalValidator(v); err != nil {
			return &ValidationError{Name: "sub_total", err: fmt.Errorf(`ent: validator failed for field "ShipmentCharges.sub_total": %w`, err)}
		}
	}
	if _, ok := scuo.mutation.BusinessUnitID(); scuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.business_unit"`)
	}
	if _, ok := scuo.mutation.OrganizationID(); scuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.organization"`)
	}
	if _, ok := scuo.mutation.ShipmentID(); scuo.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.shipment"`)
	}
	if _, ok := scuo.mutation.AccessorialChargeID(); scuo.mutation.AccessorialChargeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.accessorial_charge"`)
	}
	if _, ok := scuo.mutation.UserID(); scuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentCharges.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scuo *ShipmentChargesUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentChargesUpdateOne {
	scuo.modifiers = append(scuo.modifiers, modifiers...)
	return scuo
}

func (scuo *ShipmentChargesUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentCharges, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentcharges.Table, shipmentcharges.Columns, sqlgraph.NewFieldSpec(shipmentcharges.FieldID, field.TypeUUID))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentCharges.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentcharges.FieldID)
		for _, f := range fields {
			if !shipmentcharges.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentcharges.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcharges.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.Version(); ok {
		_spec.SetField(shipmentcharges.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentcharges.FieldVersion, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.Description(); ok {
		_spec.SetField(shipmentcharges.FieldDescription, field.TypeString, value)
	}
	if value, ok := scuo.mutation.ChargeAmount(); ok {
		_spec.SetField(shipmentcharges.FieldChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.AddedChargeAmount(); ok {
		_spec.AddField(shipmentcharges.FieldChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.Units(); ok {
		_spec.SetField(shipmentcharges.FieldUnits, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedUnits(); ok {
		_spec.AddField(shipmentcharges.FieldUnits, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.SubTotal(); ok {
		_spec.SetField(shipmentcharges.FieldSubTotal, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.AddedSubTotal(); ok {
		_spec.AddField(shipmentcharges.FieldSubTotal, field.TypeFloat64, value)
	}
	if scuo.mutation.AccessorialChargeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.AccessorialChargeTable,
			Columns: []string{shipmentcharges.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.AccessorialChargeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.AccessorialChargeTable,
			Columns: []string{shipmentcharges.AccessorialChargeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.UserTable,
			Columns: []string{shipmentcharges.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcharges.UserTable,
			Columns: []string{shipmentcharges.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scuo.modifiers...)
	_node = &ShipmentCharges{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentcharges.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
