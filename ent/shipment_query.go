// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/customer"
	"github.com/emoss08/trenova/ent/equipmenttype"
	"github.com/emoss08/trenova/ent/location"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/servicetype"
	"github.com/emoss08/trenova/ent/shipment"
	"github.com/emoss08/trenova/ent/shipmentcharges"
	"github.com/emoss08/trenova/ent/shipmentcomment"
	"github.com/emoss08/trenova/ent/shipmentcommodity"
	"github.com/emoss08/trenova/ent/shipmentdocumentation"
	"github.com/emoss08/trenova/ent/shipmenttype"
	"github.com/emoss08/trenova/ent/user"
	"github.com/google/uuid"
)

// ShipmentQuery is the builder for querying Shipment entities.
type ShipmentQuery struct {
	config
	ctx                            *QueryContext
	order                          []shipment.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.Shipment
	withBusinessUnit               *BusinessUnitQuery
	withOrganization               *OrganizationQuery
	withShipmentType               *ShipmentTypeQuery
	withServiceType                *ServiceTypeQuery
	withRevenueCode                *ServiceTypeQuery
	withOriginLocation             *LocationQuery
	withDestinationLocation        *LocationQuery
	withTrailerType                *EquipmentTypeQuery
	withTractorType                *EquipmentTypeQuery
	withShipmentDocumentation      *ShipmentDocumentationQuery
	withShipmentComments           *ShipmentCommentQuery
	withShipmentCharges            *ShipmentChargesQuery
	withShipmentCommodities        *ShipmentCommodityQuery
	withCreatedByUser              *UserQuery
	withCustomer                   *CustomerQuery
	modifiers                      []func(*sql.Selector)
	withNamedShipmentDocumentation map[string]*ShipmentDocumentationQuery
	withNamedShipmentComments      map[string]*ShipmentCommentQuery
	withNamedShipmentCharges       map[string]*ShipmentChargesQuery
	withNamedShipmentCommodities   map[string]*ShipmentCommodityQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShipmentQuery builder.
func (sq *ShipmentQuery) Where(ps ...predicate.Shipment) *ShipmentQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *ShipmentQuery) Limit(limit int) *ShipmentQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *ShipmentQuery) Offset(offset int) *ShipmentQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *ShipmentQuery) Unique(unique bool) *ShipmentQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *ShipmentQuery) Order(o ...shipment.OrderOption) *ShipmentQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryBusinessUnit chains the current query on the "business_unit" edge.
func (sq *ShipmentQuery) QueryBusinessUnit() *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.BusinessUnitTable, shipment.BusinessUnitColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (sq *ShipmentQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.OrganizationTable, shipment.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentType chains the current query on the "shipment_type" edge.
func (sq *ShipmentQuery) QueryShipmentType() *ShipmentTypeQuery {
	query := (&ShipmentTypeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmenttype.Table, shipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.ShipmentTypeTable, shipment.ShipmentTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServiceType chains the current query on the "service_type" edge.
func (sq *ShipmentQuery) QueryServiceType() *ServiceTypeQuery {
	query := (&ServiceTypeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(servicetype.Table, servicetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.ServiceTypeTable, shipment.ServiceTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRevenueCode chains the current query on the "revenue_code" edge.
func (sq *ShipmentQuery) QueryRevenueCode() *ServiceTypeQuery {
	query := (&ServiceTypeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(servicetype.Table, servicetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.RevenueCodeTable, shipment.RevenueCodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOriginLocation chains the current query on the "origin_location" edge.
func (sq *ShipmentQuery) QueryOriginLocation() *LocationQuery {
	query := (&LocationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.OriginLocationTable, shipment.OriginLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDestinationLocation chains the current query on the "destination_location" edge.
func (sq *ShipmentQuery) QueryDestinationLocation() *LocationQuery {
	query := (&LocationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.DestinationLocationTable, shipment.DestinationLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrailerType chains the current query on the "trailer_type" edge.
func (sq *ShipmentQuery) QueryTrailerType() *EquipmentTypeQuery {
	query := (&EquipmentTypeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.TrailerTypeTable, shipment.TrailerTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTractorType chains the current query on the "tractor_type" edge.
func (sq *ShipmentQuery) QueryTractorType() *EquipmentTypeQuery {
	query := (&EquipmentTypeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.TractorTypeTable, shipment.TractorTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentDocumentation chains the current query on the "shipment_documentation" edge.
func (sq *ShipmentQuery) QueryShipmentDocumentation() *ShipmentDocumentationQuery {
	query := (&ShipmentDocumentationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentdocumentation.Table, shipmentdocumentation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentDocumentationTable, shipment.ShipmentDocumentationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentComments chains the current query on the "shipment_comments" edge.
func (sq *ShipmentQuery) QueryShipmentComments() *ShipmentCommentQuery {
	query := (&ShipmentCommentClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentcomment.Table, shipmentcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentCommentsTable, shipment.ShipmentCommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentCharges chains the current query on the "shipment_charges" edge.
func (sq *ShipmentQuery) QueryShipmentCharges() *ShipmentChargesQuery {
	query := (&ShipmentChargesClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentcharges.Table, shipmentcharges.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentChargesTable, shipment.ShipmentChargesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentCommodities chains the current query on the "shipment_commodities" edge.
func (sq *ShipmentQuery) QueryShipmentCommodities() *ShipmentCommodityQuery {
	query := (&ShipmentCommodityClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentcommodity.Table, shipmentcommodity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentCommoditiesTable, shipment.ShipmentCommoditiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedByUser chains the current query on the "created_by_user" edge.
func (sq *ShipmentQuery) QueryCreatedByUser() *UserQuery {
	query := (&UserClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipment.CreatedByUserTable, shipment.CreatedByUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomer chains the current query on the "customer" edge.
func (sq *ShipmentQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipment.CustomerTable, shipment.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Shipment entity from the query.
// Returns a *NotFoundError when no Shipment was found.
func (sq *ShipmentQuery) First(ctx context.Context) (*Shipment, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shipment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *ShipmentQuery) FirstX(ctx context.Context) *Shipment {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Shipment ID from the query.
// Returns a *NotFoundError when no Shipment ID was found.
func (sq *ShipmentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shipment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *ShipmentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Shipment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Shipment entity is found.
// Returns a *NotFoundError when no Shipment entities are found.
func (sq *ShipmentQuery) Only(ctx context.Context) (*Shipment, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shipment.Label}
	default:
		return nil, &NotSingularError{shipment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *ShipmentQuery) OnlyX(ctx context.Context) *Shipment {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Shipment ID in the query.
// Returns a *NotSingularError when more than one Shipment ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *ShipmentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shipment.Label}
	default:
		err = &NotSingularError{shipment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *ShipmentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Shipments.
func (sq *ShipmentQuery) All(ctx context.Context) ([]*Shipment, error) {
	ctx = setContextOp(ctx, sq.ctx, "All")
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Shipment, *ShipmentQuery]()
	return withInterceptors[[]*Shipment](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *ShipmentQuery) AllX(ctx context.Context) []*Shipment {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Shipment IDs.
func (sq *ShipmentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, "IDs")
	if err = sq.Select(shipment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *ShipmentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *ShipmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, "Count")
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*ShipmentQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *ShipmentQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *ShipmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, "Exist")
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *ShipmentQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShipmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *ShipmentQuery) Clone() *ShipmentQuery {
	if sq == nil {
		return nil
	}
	return &ShipmentQuery{
		config:                    sq.config,
		ctx:                       sq.ctx.Clone(),
		order:                     append([]shipment.OrderOption{}, sq.order...),
		inters:                    append([]Interceptor{}, sq.inters...),
		predicates:                append([]predicate.Shipment{}, sq.predicates...),
		withBusinessUnit:          sq.withBusinessUnit.Clone(),
		withOrganization:          sq.withOrganization.Clone(),
		withShipmentType:          sq.withShipmentType.Clone(),
		withServiceType:           sq.withServiceType.Clone(),
		withRevenueCode:           sq.withRevenueCode.Clone(),
		withOriginLocation:        sq.withOriginLocation.Clone(),
		withDestinationLocation:   sq.withDestinationLocation.Clone(),
		withTrailerType:           sq.withTrailerType.Clone(),
		withTractorType:           sq.withTractorType.Clone(),
		withShipmentDocumentation: sq.withShipmentDocumentation.Clone(),
		withShipmentComments:      sq.withShipmentComments.Clone(),
		withShipmentCharges:       sq.withShipmentCharges.Clone(),
		withShipmentCommodities:   sq.withShipmentCommodities.Clone(),
		withCreatedByUser:         sq.withCreatedByUser.Clone(),
		withCustomer:              sq.withCustomer.Clone(),
		// clone intermediate query.
		sql:  sq.sql.Clone(),
		path: sq.path,
	}
}

// WithBusinessUnit tells the query-builder to eager-load the nodes that are connected to
// the "business_unit" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithBusinessUnit(opts ...func(*BusinessUnitQuery)) *ShipmentQuery {
	query := (&BusinessUnitClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withBusinessUnit = query
	return sq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithOrganization(opts ...func(*OrganizationQuery)) *ShipmentQuery {
	query := (&OrganizationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withOrganization = query
	return sq
}

// WithShipmentType tells the query-builder to eager-load the nodes that are connected to
// the "shipment_type" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentType(opts ...func(*ShipmentTypeQuery)) *ShipmentQuery {
	query := (&ShipmentTypeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentType = query
	return sq
}

// WithServiceType tells the query-builder to eager-load the nodes that are connected to
// the "service_type" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithServiceType(opts ...func(*ServiceTypeQuery)) *ShipmentQuery {
	query := (&ServiceTypeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withServiceType = query
	return sq
}

// WithRevenueCode tells the query-builder to eager-load the nodes that are connected to
// the "revenue_code" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithRevenueCode(opts ...func(*ServiceTypeQuery)) *ShipmentQuery {
	query := (&ServiceTypeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withRevenueCode = query
	return sq
}

// WithOriginLocation tells the query-builder to eager-load the nodes that are connected to
// the "origin_location" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithOriginLocation(opts ...func(*LocationQuery)) *ShipmentQuery {
	query := (&LocationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withOriginLocation = query
	return sq
}

// WithDestinationLocation tells the query-builder to eager-load the nodes that are connected to
// the "destination_location" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithDestinationLocation(opts ...func(*LocationQuery)) *ShipmentQuery {
	query := (&LocationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withDestinationLocation = query
	return sq
}

// WithTrailerType tells the query-builder to eager-load the nodes that are connected to
// the "trailer_type" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithTrailerType(opts ...func(*EquipmentTypeQuery)) *ShipmentQuery {
	query := (&EquipmentTypeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withTrailerType = query
	return sq
}

// WithTractorType tells the query-builder to eager-load the nodes that are connected to
// the "tractor_type" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithTractorType(opts ...func(*EquipmentTypeQuery)) *ShipmentQuery {
	query := (&EquipmentTypeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withTractorType = query
	return sq
}

// WithShipmentDocumentation tells the query-builder to eager-load the nodes that are connected to
// the "shipment_documentation" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentDocumentation(opts ...func(*ShipmentDocumentationQuery)) *ShipmentQuery {
	query := (&ShipmentDocumentationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentDocumentation = query
	return sq
}

// WithShipmentComments tells the query-builder to eager-load the nodes that are connected to
// the "shipment_comments" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentComments(opts ...func(*ShipmentCommentQuery)) *ShipmentQuery {
	query := (&ShipmentCommentClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentComments = query
	return sq
}

// WithShipmentCharges tells the query-builder to eager-load the nodes that are connected to
// the "shipment_charges" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentCharges(opts ...func(*ShipmentChargesQuery)) *ShipmentQuery {
	query := (&ShipmentChargesClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentCharges = query
	return sq
}

// WithShipmentCommodities tells the query-builder to eager-load the nodes that are connected to
// the "shipment_commodities" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentCommodities(opts ...func(*ShipmentCommodityQuery)) *ShipmentQuery {
	query := (&ShipmentCommodityClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentCommodities = query
	return sq
}

// WithCreatedByUser tells the query-builder to eager-load the nodes that are connected to
// the "created_by_user" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithCreatedByUser(opts ...func(*UserQuery)) *ShipmentQuery {
	query := (&UserClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withCreatedByUser = query
	return sq
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithCustomer(opts ...func(*CustomerQuery)) *ShipmentQuery {
	query := (&CustomerClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withCustomer = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Shipment.Query().
//		GroupBy(shipment.FieldBusinessUnitID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *ShipmentQuery) GroupBy(field string, fields ...string) *ShipmentGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ShipmentGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = shipment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//	}
//
//	client.Shipment.Query().
//		Select(shipment.FieldBusinessUnitID).
//		Scan(ctx, &v)
func (sq *ShipmentQuery) Select(fields ...string) *ShipmentSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &ShipmentSelect{ShipmentQuery: sq}
	sbuild.label = shipment.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ShipmentSelect configured with the given aggregations.
func (sq *ShipmentQuery) Aggregate(fns ...AggregateFunc) *ShipmentSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *ShipmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !shipment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *ShipmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Shipment, error) {
	var (
		nodes       = []*Shipment{}
		_spec       = sq.querySpec()
		loadedTypes = [15]bool{
			sq.withBusinessUnit != nil,
			sq.withOrganization != nil,
			sq.withShipmentType != nil,
			sq.withServiceType != nil,
			sq.withRevenueCode != nil,
			sq.withOriginLocation != nil,
			sq.withDestinationLocation != nil,
			sq.withTrailerType != nil,
			sq.withTractorType != nil,
			sq.withShipmentDocumentation != nil,
			sq.withShipmentComments != nil,
			sq.withShipmentCharges != nil,
			sq.withShipmentCommodities != nil,
			sq.withCreatedByUser != nil,
			sq.withCustomer != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Shipment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Shipment{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withBusinessUnit; query != nil {
		if err := sq.loadBusinessUnit(ctx, query, nodes, nil,
			func(n *Shipment, e *BusinessUnit) { n.Edges.BusinessUnit = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withOrganization; query != nil {
		if err := sq.loadOrganization(ctx, query, nodes, nil,
			func(n *Shipment, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentType; query != nil {
		if err := sq.loadShipmentType(ctx, query, nodes, nil,
			func(n *Shipment, e *ShipmentType) { n.Edges.ShipmentType = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withServiceType; query != nil {
		if err := sq.loadServiceType(ctx, query, nodes, nil,
			func(n *Shipment, e *ServiceType) { n.Edges.ServiceType = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withRevenueCode; query != nil {
		if err := sq.loadRevenueCode(ctx, query, nodes, nil,
			func(n *Shipment, e *ServiceType) { n.Edges.RevenueCode = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withOriginLocation; query != nil {
		if err := sq.loadOriginLocation(ctx, query, nodes, nil,
			func(n *Shipment, e *Location) { n.Edges.OriginLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withDestinationLocation; query != nil {
		if err := sq.loadDestinationLocation(ctx, query, nodes, nil,
			func(n *Shipment, e *Location) { n.Edges.DestinationLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withTrailerType; query != nil {
		if err := sq.loadTrailerType(ctx, query, nodes, nil,
			func(n *Shipment, e *EquipmentType) { n.Edges.TrailerType = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withTractorType; query != nil {
		if err := sq.loadTractorType(ctx, query, nodes, nil,
			func(n *Shipment, e *EquipmentType) { n.Edges.TractorType = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentDocumentation; query != nil {
		if err := sq.loadShipmentDocumentation(ctx, query, nodes,
			func(n *Shipment) { n.Edges.ShipmentDocumentation = []*ShipmentDocumentation{} },
			func(n *Shipment, e *ShipmentDocumentation) {
				n.Edges.ShipmentDocumentation = append(n.Edges.ShipmentDocumentation, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentComments; query != nil {
		if err := sq.loadShipmentComments(ctx, query, nodes,
			func(n *Shipment) { n.Edges.ShipmentComments = []*ShipmentComment{} },
			func(n *Shipment, e *ShipmentComment) { n.Edges.ShipmentComments = append(n.Edges.ShipmentComments, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentCharges; query != nil {
		if err := sq.loadShipmentCharges(ctx, query, nodes,
			func(n *Shipment) { n.Edges.ShipmentCharges = []*ShipmentCharges{} },
			func(n *Shipment, e *ShipmentCharges) { n.Edges.ShipmentCharges = append(n.Edges.ShipmentCharges, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentCommodities; query != nil {
		if err := sq.loadShipmentCommodities(ctx, query, nodes,
			func(n *Shipment) { n.Edges.ShipmentCommodities = []*ShipmentCommodity{} },
			func(n *Shipment, e *ShipmentCommodity) {
				n.Edges.ShipmentCommodities = append(n.Edges.ShipmentCommodities, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sq.withCreatedByUser; query != nil {
		if err := sq.loadCreatedByUser(ctx, query, nodes, nil,
			func(n *Shipment, e *User) { n.Edges.CreatedByUser = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withCustomer; query != nil {
		if err := sq.loadCustomer(ctx, query, nodes, nil,
			func(n *Shipment, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedShipmentDocumentation {
		if err := sq.loadShipmentDocumentation(ctx, query, nodes,
			func(n *Shipment) { n.appendNamedShipmentDocumentation(name) },
			func(n *Shipment, e *ShipmentDocumentation) { n.appendNamedShipmentDocumentation(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedShipmentComments {
		if err := sq.loadShipmentComments(ctx, query, nodes,
			func(n *Shipment) { n.appendNamedShipmentComments(name) },
			func(n *Shipment, e *ShipmentComment) { n.appendNamedShipmentComments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedShipmentCharges {
		if err := sq.loadShipmentCharges(ctx, query, nodes,
			func(n *Shipment) { n.appendNamedShipmentCharges(name) },
			func(n *Shipment, e *ShipmentCharges) { n.appendNamedShipmentCharges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedShipmentCommodities {
		if err := sq.loadShipmentCommodities(ctx, query, nodes,
			func(n *Shipment) { n.appendNamedShipmentCommodities(name) },
			func(n *Shipment, e *ShipmentCommodity) { n.appendNamedShipmentCommodities(name, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *ShipmentQuery) loadBusinessUnit(ctx context.Context, query *BusinessUnitQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *BusinessUnit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		fk := nodes[i].BusinessUnitID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(businessunit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_unit_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentType(ctx context.Context, query *ShipmentTypeQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentType)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		fk := nodes[i].ShipmentTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipmenttype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadServiceType(ctx context.Context, query *ServiceTypeQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ServiceType)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		if nodes[i].ServiceTypeID == nil {
			continue
		}
		fk := *nodes[i].ServiceTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(servicetype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "service_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadRevenueCode(ctx context.Context, query *ServiceTypeQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ServiceType)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		if nodes[i].RevenueCodeID == nil {
			continue
		}
		fk := *nodes[i].RevenueCodeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(servicetype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "revenue_code_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadOriginLocation(ctx context.Context, query *LocationQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *Location)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		if nodes[i].OriginLocationID == nil {
			continue
		}
		fk := *nodes[i].OriginLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "origin_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadDestinationLocation(ctx context.Context, query *LocationQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *Location)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		if nodes[i].DestinationLocationID == nil {
			continue
		}
		fk := *nodes[i].DestinationLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "destination_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadTrailerType(ctx context.Context, query *EquipmentTypeQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *EquipmentType)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		if nodes[i].TrailerTypeID == nil {
			continue
		}
		fk := *nodes[i].TrailerTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(equipmenttype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "trailer_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadTractorType(ctx context.Context, query *EquipmentTypeQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *EquipmentType)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		if nodes[i].TractorTypeID == nil {
			continue
		}
		fk := *nodes[i].TractorTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(equipmenttype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tractor_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentDocumentation(ctx context.Context, query *ShipmentDocumentationQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentDocumentation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(shipmentdocumentation.FieldShipmentID)
	}
	query.Where(predicate.ShipmentDocumentation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentDocumentationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ShipmentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentComments(ctx context.Context, query *ShipmentCommentQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentComment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(shipmentcomment.FieldShipmentID)
	}
	query.Where(predicate.ShipmentComment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentCommentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ShipmentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentCharges(ctx context.Context, query *ShipmentChargesQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentCharges)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(shipmentcharges.FieldShipmentID)
	}
	query.Where(predicate.ShipmentCharges(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentChargesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ShipmentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentCommodities(ctx context.Context, query *ShipmentCommodityQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentCommodity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(shipmentcommodity.FieldShipmentID)
	}
	query.Where(predicate.ShipmentCommodity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentCommoditiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ShipmentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadCreatedByUser(ctx context.Context, query *UserQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		if nodes[i].CreatedBy == nil {
			continue
		}
		fk := *nodes[i].CreatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *Customer)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Shipment)
	for i := range nodes {
		fk := nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sq *ShipmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *ShipmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(shipment.Table, shipment.Columns, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipment.FieldID)
		for i := range fields {
			if fields[i] != shipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sq.withBusinessUnit != nil {
			_spec.Node.AddColumnOnce(shipment.FieldBusinessUnitID)
		}
		if sq.withOrganization != nil {
			_spec.Node.AddColumnOnce(shipment.FieldOrganizationID)
		}
		if sq.withShipmentType != nil {
			_spec.Node.AddColumnOnce(shipment.FieldShipmentTypeID)
		}
		if sq.withServiceType != nil {
			_spec.Node.AddColumnOnce(shipment.FieldServiceTypeID)
		}
		if sq.withRevenueCode != nil {
			_spec.Node.AddColumnOnce(shipment.FieldRevenueCodeID)
		}
		if sq.withOriginLocation != nil {
			_spec.Node.AddColumnOnce(shipment.FieldOriginLocationID)
		}
		if sq.withDestinationLocation != nil {
			_spec.Node.AddColumnOnce(shipment.FieldDestinationLocationID)
		}
		if sq.withTrailerType != nil {
			_spec.Node.AddColumnOnce(shipment.FieldTrailerTypeID)
		}
		if sq.withTractorType != nil {
			_spec.Node.AddColumnOnce(shipment.FieldTractorTypeID)
		}
		if sq.withCreatedByUser != nil {
			_spec.Node.AddColumnOnce(shipment.FieldCreatedBy)
		}
		if sq.withCustomer != nil {
			_spec.Node.AddColumnOnce(shipment.FieldCustomerID)
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *ShipmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(shipment.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = shipment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *ShipmentQuery) Modify(modifiers ...func(s *sql.Selector)) *ShipmentSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

// WithNamedShipmentDocumentation tells the query-builder to eager-load the nodes that are connected to the "shipment_documentation"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithNamedShipmentDocumentation(name string, opts ...func(*ShipmentDocumentationQuery)) *ShipmentQuery {
	query := (&ShipmentDocumentationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedShipmentDocumentation == nil {
		sq.withNamedShipmentDocumentation = make(map[string]*ShipmentDocumentationQuery)
	}
	sq.withNamedShipmentDocumentation[name] = query
	return sq
}

// WithNamedShipmentComments tells the query-builder to eager-load the nodes that are connected to the "shipment_comments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithNamedShipmentComments(name string, opts ...func(*ShipmentCommentQuery)) *ShipmentQuery {
	query := (&ShipmentCommentClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedShipmentComments == nil {
		sq.withNamedShipmentComments = make(map[string]*ShipmentCommentQuery)
	}
	sq.withNamedShipmentComments[name] = query
	return sq
}

// WithNamedShipmentCharges tells the query-builder to eager-load the nodes that are connected to the "shipment_charges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithNamedShipmentCharges(name string, opts ...func(*ShipmentChargesQuery)) *ShipmentQuery {
	query := (&ShipmentChargesClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedShipmentCharges == nil {
		sq.withNamedShipmentCharges = make(map[string]*ShipmentChargesQuery)
	}
	sq.withNamedShipmentCharges[name] = query
	return sq
}

// WithNamedShipmentCommodities tells the query-builder to eager-load the nodes that are connected to the "shipment_commodities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithNamedShipmentCommodities(name string, opts ...func(*ShipmentCommodityQuery)) *ShipmentQuery {
	query := (&ShipmentCommodityClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedShipmentCommodities == nil {
		sq.withNamedShipmentCommodities = make(map[string]*ShipmentCommodityQuery)
	}
	sq.withNamedShipmentCommodities[name] = query
	return sq
}

// ShipmentGroupBy is the group-by builder for Shipment entities.
type ShipmentGroupBy struct {
	selector
	build *ShipmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *ShipmentGroupBy) Aggregate(fns ...AggregateFunc) *ShipmentGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *ShipmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, "GroupBy")
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentQuery, *ShipmentGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *ShipmentGroupBy) sqlScan(ctx context.Context, root *ShipmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ShipmentSelect is the builder for selecting fields of Shipment entities.
type ShipmentSelect struct {
	*ShipmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *ShipmentSelect) Aggregate(fns ...AggregateFunc) *ShipmentSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *ShipmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, "Select")
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentQuery, *ShipmentSelect](ctx, ss.ShipmentQuery, ss, ss.inters, v)
}

func (ss *ShipmentSelect) sqlScan(ctx context.Context, root *ShipmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *ShipmentSelect) Modify(modifiers ...func(s *sql.Selector)) *ShipmentSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
