// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/tablechangealert"
)

// TableChangeAlertUpdate is the builder for updating TableChangeAlert entities.
type TableChangeAlertUpdate struct {
	config
	hooks    []Hook
	mutation *TableChangeAlertMutation
}

// Where appends a list predicates to the TableChangeAlertUpdate builder.
func (tcau *TableChangeAlertUpdate) Where(ps ...predicate.TableChangeAlert) *TableChangeAlertUpdate {
	tcau.mutation.Where(ps...)
	return tcau
}

// SetUpdatedAt sets the "updated_at" field.
func (tcau *TableChangeAlertUpdate) SetUpdatedAt(t time.Time) *TableChangeAlertUpdate {
	tcau.mutation.SetUpdatedAt(t)
	return tcau
}

// SetStatus sets the "status" field.
func (tcau *TableChangeAlertUpdate) SetStatus(t tablechangealert.Status) *TableChangeAlertUpdate {
	tcau.mutation.SetStatus(t)
	return tcau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableStatus(t *tablechangealert.Status) *TableChangeAlertUpdate {
	if t != nil {
		tcau.SetStatus(*t)
	}
	return tcau
}

// SetName sets the "name" field.
func (tcau *TableChangeAlertUpdate) SetName(s string) *TableChangeAlertUpdate {
	tcau.mutation.SetName(s)
	return tcau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableName(s *string) *TableChangeAlertUpdate {
	if s != nil {
		tcau.SetName(*s)
	}
	return tcau
}

// SetDatabaseAction sets the "database_action" field.
func (tcau *TableChangeAlertUpdate) SetDatabaseAction(ta tablechangealert.DatabaseAction) *TableChangeAlertUpdate {
	tcau.mutation.SetDatabaseAction(ta)
	return tcau
}

// SetNillableDatabaseAction sets the "database_action" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableDatabaseAction(ta *tablechangealert.DatabaseAction) *TableChangeAlertUpdate {
	if ta != nil {
		tcau.SetDatabaseAction(*ta)
	}
	return tcau
}

// SetSource sets the "source" field.
func (tcau *TableChangeAlertUpdate) SetSource(t tablechangealert.Source) *TableChangeAlertUpdate {
	tcau.mutation.SetSource(t)
	return tcau
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableSource(t *tablechangealert.Source) *TableChangeAlertUpdate {
	if t != nil {
		tcau.SetSource(*t)
	}
	return tcau
}

// SetTableName sets the "table_name" field.
func (tcau *TableChangeAlertUpdate) SetTableName(s string) *TableChangeAlertUpdate {
	tcau.mutation.SetTableName(s)
	return tcau
}

// SetNillableTableName sets the "table_name" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableTableName(s *string) *TableChangeAlertUpdate {
	if s != nil {
		tcau.SetTableName(*s)
	}
	return tcau
}

// ClearTableName clears the value of the "table_name" field.
func (tcau *TableChangeAlertUpdate) ClearTableName() *TableChangeAlertUpdate {
	tcau.mutation.ClearTableName()
	return tcau
}

// SetTopic sets the "topic" field.
func (tcau *TableChangeAlertUpdate) SetTopic(s string) *TableChangeAlertUpdate {
	tcau.mutation.SetTopic(s)
	return tcau
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableTopic(s *string) *TableChangeAlertUpdate {
	if s != nil {
		tcau.SetTopic(*s)
	}
	return tcau
}

// ClearTopic clears the value of the "topic" field.
func (tcau *TableChangeAlertUpdate) ClearTopic() *TableChangeAlertUpdate {
	tcau.mutation.ClearTopic()
	return tcau
}

// SetDescription sets the "description" field.
func (tcau *TableChangeAlertUpdate) SetDescription(s string) *TableChangeAlertUpdate {
	tcau.mutation.SetDescription(s)
	return tcau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableDescription(s *string) *TableChangeAlertUpdate {
	if s != nil {
		tcau.SetDescription(*s)
	}
	return tcau
}

// ClearDescription clears the value of the "description" field.
func (tcau *TableChangeAlertUpdate) ClearDescription() *TableChangeAlertUpdate {
	tcau.mutation.ClearDescription()
	return tcau
}

// SetCustomSubject sets the "custom_subject" field.
func (tcau *TableChangeAlertUpdate) SetCustomSubject(s string) *TableChangeAlertUpdate {
	tcau.mutation.SetCustomSubject(s)
	return tcau
}

// SetNillableCustomSubject sets the "custom_subject" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableCustomSubject(s *string) *TableChangeAlertUpdate {
	if s != nil {
		tcau.SetCustomSubject(*s)
	}
	return tcau
}

// ClearCustomSubject clears the value of the "custom_subject" field.
func (tcau *TableChangeAlertUpdate) ClearCustomSubject() *TableChangeAlertUpdate {
	tcau.mutation.ClearCustomSubject()
	return tcau
}

// SetFunctionName sets the "function_name" field.
func (tcau *TableChangeAlertUpdate) SetFunctionName(s string) *TableChangeAlertUpdate {
	tcau.mutation.SetFunctionName(s)
	return tcau
}

// SetNillableFunctionName sets the "function_name" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableFunctionName(s *string) *TableChangeAlertUpdate {
	if s != nil {
		tcau.SetFunctionName(*s)
	}
	return tcau
}

// ClearFunctionName clears the value of the "function_name" field.
func (tcau *TableChangeAlertUpdate) ClearFunctionName() *TableChangeAlertUpdate {
	tcau.mutation.ClearFunctionName()
	return tcau
}

// SetTriggerName sets the "trigger_name" field.
func (tcau *TableChangeAlertUpdate) SetTriggerName(s string) *TableChangeAlertUpdate {
	tcau.mutation.SetTriggerName(s)
	return tcau
}

// SetNillableTriggerName sets the "trigger_name" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableTriggerName(s *string) *TableChangeAlertUpdate {
	if s != nil {
		tcau.SetTriggerName(*s)
	}
	return tcau
}

// ClearTriggerName clears the value of the "trigger_name" field.
func (tcau *TableChangeAlertUpdate) ClearTriggerName() *TableChangeAlertUpdate {
	tcau.mutation.ClearTriggerName()
	return tcau
}

// SetListenerName sets the "listener_name" field.
func (tcau *TableChangeAlertUpdate) SetListenerName(s string) *TableChangeAlertUpdate {
	tcau.mutation.SetListenerName(s)
	return tcau
}

// SetNillableListenerName sets the "listener_name" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableListenerName(s *string) *TableChangeAlertUpdate {
	if s != nil {
		tcau.SetListenerName(*s)
	}
	return tcau
}

// ClearListenerName clears the value of the "listener_name" field.
func (tcau *TableChangeAlertUpdate) ClearListenerName() *TableChangeAlertUpdate {
	tcau.mutation.ClearListenerName()
	return tcau
}

// SetEmailRecipients sets the "email_recipients" field.
func (tcau *TableChangeAlertUpdate) SetEmailRecipients(s string) *TableChangeAlertUpdate {
	tcau.mutation.SetEmailRecipients(s)
	return tcau
}

// SetNillableEmailRecipients sets the "email_recipients" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableEmailRecipients(s *string) *TableChangeAlertUpdate {
	if s != nil {
		tcau.SetEmailRecipients(*s)
	}
	return tcau
}

// ClearEmailRecipients clears the value of the "email_recipients" field.
func (tcau *TableChangeAlertUpdate) ClearEmailRecipients() *TableChangeAlertUpdate {
	tcau.mutation.ClearEmailRecipients()
	return tcau
}

// SetEffectiveDate sets the "effective_date" field.
func (tcau *TableChangeAlertUpdate) SetEffectiveDate(t time.Time) *TableChangeAlertUpdate {
	tcau.mutation.SetEffectiveDate(t)
	return tcau
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableEffectiveDate(t *time.Time) *TableChangeAlertUpdate {
	if t != nil {
		tcau.SetEffectiveDate(*t)
	}
	return tcau
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (tcau *TableChangeAlertUpdate) ClearEffectiveDate() *TableChangeAlertUpdate {
	tcau.mutation.ClearEffectiveDate()
	return tcau
}

// SetExpirationDate sets the "expiration_date" field.
func (tcau *TableChangeAlertUpdate) SetExpirationDate(t time.Time) *TableChangeAlertUpdate {
	tcau.mutation.SetExpirationDate(t)
	return tcau
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (tcau *TableChangeAlertUpdate) SetNillableExpirationDate(t *time.Time) *TableChangeAlertUpdate {
	if t != nil {
		tcau.SetExpirationDate(*t)
	}
	return tcau
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (tcau *TableChangeAlertUpdate) ClearExpirationDate() *TableChangeAlertUpdate {
	tcau.mutation.ClearExpirationDate()
	return tcau
}

// Mutation returns the TableChangeAlertMutation object of the builder.
func (tcau *TableChangeAlertUpdate) Mutation() *TableChangeAlertMutation {
	return tcau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcau *TableChangeAlertUpdate) Save(ctx context.Context) (int, error) {
	tcau.defaults()
	return withHooks(ctx, tcau.sqlSave, tcau.mutation, tcau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcau *TableChangeAlertUpdate) SaveX(ctx context.Context) int {
	affected, err := tcau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcau *TableChangeAlertUpdate) Exec(ctx context.Context) error {
	_, err := tcau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcau *TableChangeAlertUpdate) ExecX(ctx context.Context) {
	if err := tcau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcau *TableChangeAlertUpdate) defaults() {
	if _, ok := tcau.mutation.UpdatedAt(); !ok {
		v := tablechangealert.UpdateDefaultUpdatedAt()
		tcau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcau *TableChangeAlertUpdate) check() error {
	if v, ok := tcau.mutation.Status(); ok {
		if err := tablechangealert.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.status": %w`, err)}
		}
	}
	if v, ok := tcau.mutation.Name(); ok {
		if err := tablechangealert.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.name": %w`, err)}
		}
	}
	if v, ok := tcau.mutation.DatabaseAction(); ok {
		if err := tablechangealert.DatabaseActionValidator(v); err != nil {
			return &ValidationError{Name: "database_action", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.database_action": %w`, err)}
		}
	}
	if v, ok := tcau.mutation.Source(); ok {
		if err := tablechangealert.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.source": %w`, err)}
		}
	}
	if v, ok := tcau.mutation.TableName(); ok {
		if err := tablechangealert.TableNameValidator(v); err != nil {
			return &ValidationError{Name: "table_name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.table_name": %w`, err)}
		}
	}
	if v, ok := tcau.mutation.Topic(); ok {
		if err := tablechangealert.TopicValidator(v); err != nil {
			return &ValidationError{Name: "topic", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.topic": %w`, err)}
		}
	}
	if v, ok := tcau.mutation.CustomSubject(); ok {
		if err := tablechangealert.CustomSubjectValidator(v); err != nil {
			return &ValidationError{Name: "custom_subject", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.custom_subject": %w`, err)}
		}
	}
	if v, ok := tcau.mutation.FunctionName(); ok {
		if err := tablechangealert.FunctionNameValidator(v); err != nil {
			return &ValidationError{Name: "function_name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.function_name": %w`, err)}
		}
	}
	if v, ok := tcau.mutation.TriggerName(); ok {
		if err := tablechangealert.TriggerNameValidator(v); err != nil {
			return &ValidationError{Name: "trigger_name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.trigger_name": %w`, err)}
		}
	}
	if v, ok := tcau.mutation.ListenerName(); ok {
		if err := tablechangealert.ListenerNameValidator(v); err != nil {
			return &ValidationError{Name: "listener_name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.listener_name": %w`, err)}
		}
	}
	if _, ok := tcau.mutation.BusinessUnitID(); tcau.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TableChangeAlert.business_unit"`)
	}
	if _, ok := tcau.mutation.OrganizationID(); tcau.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TableChangeAlert.organization"`)
	}
	return nil
}

func (tcau *TableChangeAlertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tablechangealert.Table, tablechangealert.Columns, sqlgraph.NewFieldSpec(tablechangealert.FieldID, field.TypeUUID))
	if ps := tcau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcau.mutation.UpdatedAt(); ok {
		_spec.SetField(tablechangealert.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tcau.mutation.Status(); ok {
		_spec.SetField(tablechangealert.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tcau.mutation.Name(); ok {
		_spec.SetField(tablechangealert.FieldName, field.TypeString, value)
	}
	if value, ok := tcau.mutation.DatabaseAction(); ok {
		_spec.SetField(tablechangealert.FieldDatabaseAction, field.TypeEnum, value)
	}
	if value, ok := tcau.mutation.Source(); ok {
		_spec.SetField(tablechangealert.FieldSource, field.TypeEnum, value)
	}
	if value, ok := tcau.mutation.TableName(); ok {
		_spec.SetField(tablechangealert.FieldTableName, field.TypeString, value)
	}
	if tcau.mutation.TableNameCleared() {
		_spec.ClearField(tablechangealert.FieldTableName, field.TypeString)
	}
	if value, ok := tcau.mutation.Topic(); ok {
		_spec.SetField(tablechangealert.FieldTopic, field.TypeString, value)
	}
	if tcau.mutation.TopicCleared() {
		_spec.ClearField(tablechangealert.FieldTopic, field.TypeString)
	}
	if value, ok := tcau.mutation.Description(); ok {
		_spec.SetField(tablechangealert.FieldDescription, field.TypeString, value)
	}
	if tcau.mutation.DescriptionCleared() {
		_spec.ClearField(tablechangealert.FieldDescription, field.TypeString)
	}
	if value, ok := tcau.mutation.CustomSubject(); ok {
		_spec.SetField(tablechangealert.FieldCustomSubject, field.TypeString, value)
	}
	if tcau.mutation.CustomSubjectCleared() {
		_spec.ClearField(tablechangealert.FieldCustomSubject, field.TypeString)
	}
	if value, ok := tcau.mutation.FunctionName(); ok {
		_spec.SetField(tablechangealert.FieldFunctionName, field.TypeString, value)
	}
	if tcau.mutation.FunctionNameCleared() {
		_spec.ClearField(tablechangealert.FieldFunctionName, field.TypeString)
	}
	if value, ok := tcau.mutation.TriggerName(); ok {
		_spec.SetField(tablechangealert.FieldTriggerName, field.TypeString, value)
	}
	if tcau.mutation.TriggerNameCleared() {
		_spec.ClearField(tablechangealert.FieldTriggerName, field.TypeString)
	}
	if value, ok := tcau.mutation.ListenerName(); ok {
		_spec.SetField(tablechangealert.FieldListenerName, field.TypeString, value)
	}
	if tcau.mutation.ListenerNameCleared() {
		_spec.ClearField(tablechangealert.FieldListenerName, field.TypeString)
	}
	if value, ok := tcau.mutation.EmailRecipients(); ok {
		_spec.SetField(tablechangealert.FieldEmailRecipients, field.TypeString, value)
	}
	if tcau.mutation.EmailRecipientsCleared() {
		_spec.ClearField(tablechangealert.FieldEmailRecipients, field.TypeString)
	}
	if value, ok := tcau.mutation.EffectiveDate(); ok {
		_spec.SetField(tablechangealert.FieldEffectiveDate, field.TypeTime, value)
	}
	if tcau.mutation.EffectiveDateCleared() {
		_spec.ClearField(tablechangealert.FieldEffectiveDate, field.TypeTime)
	}
	if value, ok := tcau.mutation.ExpirationDate(); ok {
		_spec.SetField(tablechangealert.FieldExpirationDate, field.TypeTime, value)
	}
	if tcau.mutation.ExpirationDateCleared() {
		_spec.ClearField(tablechangealert.FieldExpirationDate, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tablechangealert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcau.mutation.done = true
	return n, nil
}

// TableChangeAlertUpdateOne is the builder for updating a single TableChangeAlert entity.
type TableChangeAlertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TableChangeAlertMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tcauo *TableChangeAlertUpdateOne) SetUpdatedAt(t time.Time) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetUpdatedAt(t)
	return tcauo
}

// SetStatus sets the "status" field.
func (tcauo *TableChangeAlertUpdateOne) SetStatus(t tablechangealert.Status) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetStatus(t)
	return tcauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableStatus(t *tablechangealert.Status) *TableChangeAlertUpdateOne {
	if t != nil {
		tcauo.SetStatus(*t)
	}
	return tcauo
}

// SetName sets the "name" field.
func (tcauo *TableChangeAlertUpdateOne) SetName(s string) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetName(s)
	return tcauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableName(s *string) *TableChangeAlertUpdateOne {
	if s != nil {
		tcauo.SetName(*s)
	}
	return tcauo
}

// SetDatabaseAction sets the "database_action" field.
func (tcauo *TableChangeAlertUpdateOne) SetDatabaseAction(ta tablechangealert.DatabaseAction) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetDatabaseAction(ta)
	return tcauo
}

// SetNillableDatabaseAction sets the "database_action" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableDatabaseAction(ta *tablechangealert.DatabaseAction) *TableChangeAlertUpdateOne {
	if ta != nil {
		tcauo.SetDatabaseAction(*ta)
	}
	return tcauo
}

// SetSource sets the "source" field.
func (tcauo *TableChangeAlertUpdateOne) SetSource(t tablechangealert.Source) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetSource(t)
	return tcauo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableSource(t *tablechangealert.Source) *TableChangeAlertUpdateOne {
	if t != nil {
		tcauo.SetSource(*t)
	}
	return tcauo
}

// SetTableName sets the "table_name" field.
func (tcauo *TableChangeAlertUpdateOne) SetTableName(s string) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetTableName(s)
	return tcauo
}

// SetNillableTableName sets the "table_name" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableTableName(s *string) *TableChangeAlertUpdateOne {
	if s != nil {
		tcauo.SetTableName(*s)
	}
	return tcauo
}

// ClearTableName clears the value of the "table_name" field.
func (tcauo *TableChangeAlertUpdateOne) ClearTableName() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearTableName()
	return tcauo
}

// SetTopic sets the "topic" field.
func (tcauo *TableChangeAlertUpdateOne) SetTopic(s string) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetTopic(s)
	return tcauo
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableTopic(s *string) *TableChangeAlertUpdateOne {
	if s != nil {
		tcauo.SetTopic(*s)
	}
	return tcauo
}

// ClearTopic clears the value of the "topic" field.
func (tcauo *TableChangeAlertUpdateOne) ClearTopic() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearTopic()
	return tcauo
}

// SetDescription sets the "description" field.
func (tcauo *TableChangeAlertUpdateOne) SetDescription(s string) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetDescription(s)
	return tcauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableDescription(s *string) *TableChangeAlertUpdateOne {
	if s != nil {
		tcauo.SetDescription(*s)
	}
	return tcauo
}

// ClearDescription clears the value of the "description" field.
func (tcauo *TableChangeAlertUpdateOne) ClearDescription() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearDescription()
	return tcauo
}

// SetCustomSubject sets the "custom_subject" field.
func (tcauo *TableChangeAlertUpdateOne) SetCustomSubject(s string) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetCustomSubject(s)
	return tcauo
}

// SetNillableCustomSubject sets the "custom_subject" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableCustomSubject(s *string) *TableChangeAlertUpdateOne {
	if s != nil {
		tcauo.SetCustomSubject(*s)
	}
	return tcauo
}

// ClearCustomSubject clears the value of the "custom_subject" field.
func (tcauo *TableChangeAlertUpdateOne) ClearCustomSubject() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearCustomSubject()
	return tcauo
}

// SetFunctionName sets the "function_name" field.
func (tcauo *TableChangeAlertUpdateOne) SetFunctionName(s string) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetFunctionName(s)
	return tcauo
}

// SetNillableFunctionName sets the "function_name" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableFunctionName(s *string) *TableChangeAlertUpdateOne {
	if s != nil {
		tcauo.SetFunctionName(*s)
	}
	return tcauo
}

// ClearFunctionName clears the value of the "function_name" field.
func (tcauo *TableChangeAlertUpdateOne) ClearFunctionName() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearFunctionName()
	return tcauo
}

// SetTriggerName sets the "trigger_name" field.
func (tcauo *TableChangeAlertUpdateOne) SetTriggerName(s string) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetTriggerName(s)
	return tcauo
}

// SetNillableTriggerName sets the "trigger_name" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableTriggerName(s *string) *TableChangeAlertUpdateOne {
	if s != nil {
		tcauo.SetTriggerName(*s)
	}
	return tcauo
}

// ClearTriggerName clears the value of the "trigger_name" field.
func (tcauo *TableChangeAlertUpdateOne) ClearTriggerName() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearTriggerName()
	return tcauo
}

// SetListenerName sets the "listener_name" field.
func (tcauo *TableChangeAlertUpdateOne) SetListenerName(s string) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetListenerName(s)
	return tcauo
}

// SetNillableListenerName sets the "listener_name" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableListenerName(s *string) *TableChangeAlertUpdateOne {
	if s != nil {
		tcauo.SetListenerName(*s)
	}
	return tcauo
}

// ClearListenerName clears the value of the "listener_name" field.
func (tcauo *TableChangeAlertUpdateOne) ClearListenerName() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearListenerName()
	return tcauo
}

// SetEmailRecipients sets the "email_recipients" field.
func (tcauo *TableChangeAlertUpdateOne) SetEmailRecipients(s string) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetEmailRecipients(s)
	return tcauo
}

// SetNillableEmailRecipients sets the "email_recipients" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableEmailRecipients(s *string) *TableChangeAlertUpdateOne {
	if s != nil {
		tcauo.SetEmailRecipients(*s)
	}
	return tcauo
}

// ClearEmailRecipients clears the value of the "email_recipients" field.
func (tcauo *TableChangeAlertUpdateOne) ClearEmailRecipients() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearEmailRecipients()
	return tcauo
}

// SetEffectiveDate sets the "effective_date" field.
func (tcauo *TableChangeAlertUpdateOne) SetEffectiveDate(t time.Time) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetEffectiveDate(t)
	return tcauo
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableEffectiveDate(t *time.Time) *TableChangeAlertUpdateOne {
	if t != nil {
		tcauo.SetEffectiveDate(*t)
	}
	return tcauo
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (tcauo *TableChangeAlertUpdateOne) ClearEffectiveDate() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearEffectiveDate()
	return tcauo
}

// SetExpirationDate sets the "expiration_date" field.
func (tcauo *TableChangeAlertUpdateOne) SetExpirationDate(t time.Time) *TableChangeAlertUpdateOne {
	tcauo.mutation.SetExpirationDate(t)
	return tcauo
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (tcauo *TableChangeAlertUpdateOne) SetNillableExpirationDate(t *time.Time) *TableChangeAlertUpdateOne {
	if t != nil {
		tcauo.SetExpirationDate(*t)
	}
	return tcauo
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (tcauo *TableChangeAlertUpdateOne) ClearExpirationDate() *TableChangeAlertUpdateOne {
	tcauo.mutation.ClearExpirationDate()
	return tcauo
}

// Mutation returns the TableChangeAlertMutation object of the builder.
func (tcauo *TableChangeAlertUpdateOne) Mutation() *TableChangeAlertMutation {
	return tcauo.mutation
}

// Where appends a list predicates to the TableChangeAlertUpdate builder.
func (tcauo *TableChangeAlertUpdateOne) Where(ps ...predicate.TableChangeAlert) *TableChangeAlertUpdateOne {
	tcauo.mutation.Where(ps...)
	return tcauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcauo *TableChangeAlertUpdateOne) Select(field string, fields ...string) *TableChangeAlertUpdateOne {
	tcauo.fields = append([]string{field}, fields...)
	return tcauo
}

// Save executes the query and returns the updated TableChangeAlert entity.
func (tcauo *TableChangeAlertUpdateOne) Save(ctx context.Context) (*TableChangeAlert, error) {
	tcauo.defaults()
	return withHooks(ctx, tcauo.sqlSave, tcauo.mutation, tcauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcauo *TableChangeAlertUpdateOne) SaveX(ctx context.Context) *TableChangeAlert {
	node, err := tcauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcauo *TableChangeAlertUpdateOne) Exec(ctx context.Context) error {
	_, err := tcauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcauo *TableChangeAlertUpdateOne) ExecX(ctx context.Context) {
	if err := tcauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcauo *TableChangeAlertUpdateOne) defaults() {
	if _, ok := tcauo.mutation.UpdatedAt(); !ok {
		v := tablechangealert.UpdateDefaultUpdatedAt()
		tcauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcauo *TableChangeAlertUpdateOne) check() error {
	if v, ok := tcauo.mutation.Status(); ok {
		if err := tablechangealert.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.status": %w`, err)}
		}
	}
	if v, ok := tcauo.mutation.Name(); ok {
		if err := tablechangealert.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.name": %w`, err)}
		}
	}
	if v, ok := tcauo.mutation.DatabaseAction(); ok {
		if err := tablechangealert.DatabaseActionValidator(v); err != nil {
			return &ValidationError{Name: "database_action", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.database_action": %w`, err)}
		}
	}
	if v, ok := tcauo.mutation.Source(); ok {
		if err := tablechangealert.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.source": %w`, err)}
		}
	}
	if v, ok := tcauo.mutation.TableName(); ok {
		if err := tablechangealert.TableNameValidator(v); err != nil {
			return &ValidationError{Name: "table_name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.table_name": %w`, err)}
		}
	}
	if v, ok := tcauo.mutation.Topic(); ok {
		if err := tablechangealert.TopicValidator(v); err != nil {
			return &ValidationError{Name: "topic", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.topic": %w`, err)}
		}
	}
	if v, ok := tcauo.mutation.CustomSubject(); ok {
		if err := tablechangealert.CustomSubjectValidator(v); err != nil {
			return &ValidationError{Name: "custom_subject", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.custom_subject": %w`, err)}
		}
	}
	if v, ok := tcauo.mutation.FunctionName(); ok {
		if err := tablechangealert.FunctionNameValidator(v); err != nil {
			return &ValidationError{Name: "function_name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.function_name": %w`, err)}
		}
	}
	if v, ok := tcauo.mutation.TriggerName(); ok {
		if err := tablechangealert.TriggerNameValidator(v); err != nil {
			return &ValidationError{Name: "trigger_name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.trigger_name": %w`, err)}
		}
	}
	if v, ok := tcauo.mutation.ListenerName(); ok {
		if err := tablechangealert.ListenerNameValidator(v); err != nil {
			return &ValidationError{Name: "listener_name", err: fmt.Errorf(`ent: validator failed for field "TableChangeAlert.listener_name": %w`, err)}
		}
	}
	if _, ok := tcauo.mutation.BusinessUnitID(); tcauo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TableChangeAlert.business_unit"`)
	}
	if _, ok := tcauo.mutation.OrganizationID(); tcauo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TableChangeAlert.organization"`)
	}
	return nil
}

func (tcauo *TableChangeAlertUpdateOne) sqlSave(ctx context.Context) (_node *TableChangeAlert, err error) {
	if err := tcauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tablechangealert.Table, tablechangealert.Columns, sqlgraph.NewFieldSpec(tablechangealert.FieldID, field.TypeUUID))
	id, ok := tcauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TableChangeAlert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tablechangealert.FieldID)
		for _, f := range fields {
			if !tablechangealert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tablechangealert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcauo.mutation.UpdatedAt(); ok {
		_spec.SetField(tablechangealert.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tcauo.mutation.Status(); ok {
		_spec.SetField(tablechangealert.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tcauo.mutation.Name(); ok {
		_spec.SetField(tablechangealert.FieldName, field.TypeString, value)
	}
	if value, ok := tcauo.mutation.DatabaseAction(); ok {
		_spec.SetField(tablechangealert.FieldDatabaseAction, field.TypeEnum, value)
	}
	if value, ok := tcauo.mutation.Source(); ok {
		_spec.SetField(tablechangealert.FieldSource, field.TypeEnum, value)
	}
	if value, ok := tcauo.mutation.TableName(); ok {
		_spec.SetField(tablechangealert.FieldTableName, field.TypeString, value)
	}
	if tcauo.mutation.TableNameCleared() {
		_spec.ClearField(tablechangealert.FieldTableName, field.TypeString)
	}
	if value, ok := tcauo.mutation.Topic(); ok {
		_spec.SetField(tablechangealert.FieldTopic, field.TypeString, value)
	}
	if tcauo.mutation.TopicCleared() {
		_spec.ClearField(tablechangealert.FieldTopic, field.TypeString)
	}
	if value, ok := tcauo.mutation.Description(); ok {
		_spec.SetField(tablechangealert.FieldDescription, field.TypeString, value)
	}
	if tcauo.mutation.DescriptionCleared() {
		_spec.ClearField(tablechangealert.FieldDescription, field.TypeString)
	}
	if value, ok := tcauo.mutation.CustomSubject(); ok {
		_spec.SetField(tablechangealert.FieldCustomSubject, field.TypeString, value)
	}
	if tcauo.mutation.CustomSubjectCleared() {
		_spec.ClearField(tablechangealert.FieldCustomSubject, field.TypeString)
	}
	if value, ok := tcauo.mutation.FunctionName(); ok {
		_spec.SetField(tablechangealert.FieldFunctionName, field.TypeString, value)
	}
	if tcauo.mutation.FunctionNameCleared() {
		_spec.ClearField(tablechangealert.FieldFunctionName, field.TypeString)
	}
	if value, ok := tcauo.mutation.TriggerName(); ok {
		_spec.SetField(tablechangealert.FieldTriggerName, field.TypeString, value)
	}
	if tcauo.mutation.TriggerNameCleared() {
		_spec.ClearField(tablechangealert.FieldTriggerName, field.TypeString)
	}
	if value, ok := tcauo.mutation.ListenerName(); ok {
		_spec.SetField(tablechangealert.FieldListenerName, field.TypeString, value)
	}
	if tcauo.mutation.ListenerNameCleared() {
		_spec.ClearField(tablechangealert.FieldListenerName, field.TypeString)
	}
	if value, ok := tcauo.mutation.EmailRecipients(); ok {
		_spec.SetField(tablechangealert.FieldEmailRecipients, field.TypeString, value)
	}
	if tcauo.mutation.EmailRecipientsCleared() {
		_spec.ClearField(tablechangealert.FieldEmailRecipients, field.TypeString)
	}
	if value, ok := tcauo.mutation.EffectiveDate(); ok {
		_spec.SetField(tablechangealert.FieldEffectiveDate, field.TypeTime, value)
	}
	if tcauo.mutation.EffectiveDateCleared() {
		_spec.ClearField(tablechangealert.FieldEffectiveDate, field.TypeTime)
	}
	if value, ok := tcauo.mutation.ExpirationDate(); ok {
		_spec.SetField(tablechangealert.FieldExpirationDate, field.TypeTime, value)
	}
	if tcauo.mutation.ExpirationDateCleared() {
		_spec.ClearField(tablechangealert.FieldExpirationDate, field.TypeTime)
	}
	_node = &TableChangeAlert{config: tcauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tablechangealert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcauo.mutation.done = true
	return _node, nil
}
