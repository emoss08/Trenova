// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/accessorialcharge"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// AccessorialChargeCreate is the builder for creating a AccessorialCharge entity.
type AccessorialChargeCreate struct {
	config
	mutation *AccessorialChargeMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (acc *AccessorialChargeCreate) SetBusinessUnitID(u uuid.UUID) *AccessorialChargeCreate {
	acc.mutation.SetBusinessUnitID(u)
	return acc
}

// SetOrganizationID sets the "organization_id" field.
func (acc *AccessorialChargeCreate) SetOrganizationID(u uuid.UUID) *AccessorialChargeCreate {
	acc.mutation.SetOrganizationID(u)
	return acc
}

// SetCreatedAt sets the "created_at" field.
func (acc *AccessorialChargeCreate) SetCreatedAt(t time.Time) *AccessorialChargeCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AccessorialChargeCreate) SetNillableCreatedAt(t *time.Time) *AccessorialChargeCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AccessorialChargeCreate) SetUpdatedAt(t time.Time) *AccessorialChargeCreate {
	acc.mutation.SetUpdatedAt(t)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AccessorialChargeCreate) SetNillableUpdatedAt(t *time.Time) *AccessorialChargeCreate {
	if t != nil {
		acc.SetUpdatedAt(*t)
	}
	return acc
}

// SetStatus sets the "status" field.
func (acc *AccessorialChargeCreate) SetStatus(a accessorialcharge.Status) *AccessorialChargeCreate {
	acc.mutation.SetStatus(a)
	return acc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (acc *AccessorialChargeCreate) SetNillableStatus(a *accessorialcharge.Status) *AccessorialChargeCreate {
	if a != nil {
		acc.SetStatus(*a)
	}
	return acc
}

// SetCode sets the "code" field.
func (acc *AccessorialChargeCreate) SetCode(s string) *AccessorialChargeCreate {
	acc.mutation.SetCode(s)
	return acc
}

// SetDescription sets the "description" field.
func (acc *AccessorialChargeCreate) SetDescription(s string) *AccessorialChargeCreate {
	acc.mutation.SetDescription(s)
	return acc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (acc *AccessorialChargeCreate) SetNillableDescription(s *string) *AccessorialChargeCreate {
	if s != nil {
		acc.SetDescription(*s)
	}
	return acc
}

// SetIsDetention sets the "is_detention" field.
func (acc *AccessorialChargeCreate) SetIsDetention(b bool) *AccessorialChargeCreate {
	acc.mutation.SetIsDetention(b)
	return acc
}

// SetNillableIsDetention sets the "is_detention" field if the given value is not nil.
func (acc *AccessorialChargeCreate) SetNillableIsDetention(b *bool) *AccessorialChargeCreate {
	if b != nil {
		acc.SetIsDetention(*b)
	}
	return acc
}

// SetMethod sets the "method" field.
func (acc *AccessorialChargeCreate) SetMethod(a accessorialcharge.Method) *AccessorialChargeCreate {
	acc.mutation.SetMethod(a)
	return acc
}

// SetAmount sets the "amount" field.
func (acc *AccessorialChargeCreate) SetAmount(f float64) *AccessorialChargeCreate {
	acc.mutation.SetAmount(f)
	return acc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (acc *AccessorialChargeCreate) SetNillableAmount(f *float64) *AccessorialChargeCreate {
	if f != nil {
		acc.SetAmount(*f)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AccessorialChargeCreate) SetID(u uuid.UUID) *AccessorialChargeCreate {
	acc.mutation.SetID(u)
	return acc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acc *AccessorialChargeCreate) SetNillableID(u *uuid.UUID) *AccessorialChargeCreate {
	if u != nil {
		acc.SetID(*u)
	}
	return acc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (acc *AccessorialChargeCreate) SetBusinessUnit(b *BusinessUnit) *AccessorialChargeCreate {
	return acc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (acc *AccessorialChargeCreate) SetOrganization(o *Organization) *AccessorialChargeCreate {
	return acc.SetOrganizationID(o.ID)
}

// Mutation returns the AccessorialChargeMutation object of the builder.
func (acc *AccessorialChargeCreate) Mutation() *AccessorialChargeMutation {
	return acc.mutation
}

// Save creates the AccessorialCharge in the database.
func (acc *AccessorialChargeCreate) Save(ctx context.Context) (*AccessorialCharge, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AccessorialChargeCreate) SaveX(ctx context.Context) *AccessorialCharge {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AccessorialChargeCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AccessorialChargeCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AccessorialChargeCreate) defaults() {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := accessorialcharge.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		v := accessorialcharge.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.Status(); !ok {
		v := accessorialcharge.DefaultStatus
		acc.mutation.SetStatus(v)
	}
	if _, ok := acc.mutation.IsDetention(); !ok {
		v := accessorialcharge.DefaultIsDetention
		acc.mutation.SetIsDetention(v)
	}
	if _, ok := acc.mutation.Amount(); !ok {
		v := accessorialcharge.DefaultAmount
		acc.mutation.SetAmount(v)
	}
	if _, ok := acc.mutation.ID(); !ok {
		v := accessorialcharge.DefaultID()
		acc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AccessorialChargeCreate) check() error {
	if _, ok := acc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "AccessorialCharge.business_unit_id"`)}
	}
	if _, ok := acc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "AccessorialCharge.organization_id"`)}
	}
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccessorialCharge.created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AccessorialCharge.updated_at"`)}
	}
	if _, ok := acc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AccessorialCharge.status"`)}
	}
	if v, ok := acc.mutation.Status(); ok {
		if err := accessorialcharge.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.status": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "AccessorialCharge.code"`)}
	}
	if v, ok := acc.mutation.Code(); ok {
		if err := accessorialcharge.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.code": %w`, err)}
		}
	}
	if _, ok := acc.mutation.IsDetention(); !ok {
		return &ValidationError{Name: "is_detention", err: errors.New(`ent: missing required field "AccessorialCharge.is_detention"`)}
	}
	if _, ok := acc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "AccessorialCharge.method"`)}
	}
	if v, ok := acc.mutation.Method(); ok {
		if err := accessorialcharge.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.method": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "AccessorialCharge.amount"`)}
	}
	if _, ok := acc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "AccessorialCharge.business_unit"`)}
	}
	if _, ok := acc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "AccessorialCharge.organization"`)}
	}
	return nil
}

func (acc *AccessorialChargeCreate) sqlSave(ctx context.Context) (*AccessorialCharge, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AccessorialChargeCreate) createSpec() (*AccessorialCharge, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessorialCharge{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(accessorialcharge.Table, sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID))
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(accessorialcharge.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.SetField(accessorialcharge.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.Status(); ok {
		_spec.SetField(accessorialcharge.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := acc.mutation.Code(); ok {
		_spec.SetField(accessorialcharge.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := acc.mutation.Description(); ok {
		_spec.SetField(accessorialcharge.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := acc.mutation.IsDetention(); ok {
		_spec.SetField(accessorialcharge.FieldIsDetention, field.TypeBool, value)
		_node.IsDetention = value
	}
	if value, ok := acc.mutation.Method(); ok {
		_spec.SetField(accessorialcharge.FieldMethod, field.TypeEnum, value)
		_node.Method = value
	}
	if value, ok := acc.mutation.Amount(); ok {
		_spec.SetField(accessorialcharge.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if nodes := acc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accessorialcharge.BusinessUnitTable,
			Columns: []string{accessorialcharge.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accessorialcharge.OrganizationTable,
			Columns: []string{accessorialcharge.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccessorialChargeCreateBulk is the builder for creating many AccessorialCharge entities in bulk.
type AccessorialChargeCreateBulk struct {
	config
	err      error
	builders []*AccessorialChargeCreate
}

// Save creates the AccessorialCharge entities in the database.
func (accb *AccessorialChargeCreateBulk) Save(ctx context.Context) ([]*AccessorialCharge, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AccessorialCharge, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessorialChargeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AccessorialChargeCreateBulk) SaveX(ctx context.Context) []*AccessorialCharge {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AccessorialChargeCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AccessorialChargeCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
