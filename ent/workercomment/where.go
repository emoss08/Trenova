// Code generated by ent, DO NOT EDIT.

package workercomment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldVersion, v))
}

// WorkerID applies equality check predicate on the "worker_id" field. It's identical to WorkerIDEQ.
func WorkerID(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldWorkerID, v))
}

// CommentTypeID applies equality check predicate on the "comment_type_id" field. It's identical to CommentTypeIDEQ.
func CommentTypeID(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldCommentTypeID, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldComment, v))
}

// EnteredBy applies equality check predicate on the "entered_by" field. It's identical to EnteredByEQ.
func EnteredBy(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldEnteredBy, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLTE(FieldVersion, v))
}

// WorkerIDEQ applies the EQ predicate on the "worker_id" field.
func WorkerIDEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldWorkerID, v))
}

// WorkerIDNEQ applies the NEQ predicate on the "worker_id" field.
func WorkerIDNEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldWorkerID, v))
}

// WorkerIDIn applies the In predicate on the "worker_id" field.
func WorkerIDIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldWorkerID, vs...))
}

// WorkerIDNotIn applies the NotIn predicate on the "worker_id" field.
func WorkerIDNotIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldWorkerID, vs...))
}

// CommentTypeIDEQ applies the EQ predicate on the "comment_type_id" field.
func CommentTypeIDEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldCommentTypeID, v))
}

// CommentTypeIDNEQ applies the NEQ predicate on the "comment_type_id" field.
func CommentTypeIDNEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldCommentTypeID, v))
}

// CommentTypeIDIn applies the In predicate on the "comment_type_id" field.
func CommentTypeIDIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldCommentTypeID, vs...))
}

// CommentTypeIDNotIn applies the NotIn predicate on the "comment_type_id" field.
func CommentTypeIDNotIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldCommentTypeID, vs...))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldContainsFold(FieldComment, v))
}

// EnteredByEQ applies the EQ predicate on the "entered_by" field.
func EnteredByEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldEQ(FieldEnteredBy, v))
}

// EnteredByNEQ applies the NEQ predicate on the "entered_by" field.
func EnteredByNEQ(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNEQ(FieldEnteredBy, v))
}

// EnteredByIn applies the In predicate on the "entered_by" field.
func EnteredByIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldIn(FieldEnteredBy, vs...))
}

// EnteredByNotIn applies the NotIn predicate on the "entered_by" field.
func EnteredByNotIn(vs ...uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldNotIn(FieldEnteredBy, vs...))
}

// EnteredByGT applies the GT predicate on the "entered_by" field.
func EnteredByGT(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGT(FieldEnteredBy, v))
}

// EnteredByGTE applies the GTE predicate on the "entered_by" field.
func EnteredByGTE(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldGTE(FieldEnteredBy, v))
}

// EnteredByLT applies the LT predicate on the "entered_by" field.
func EnteredByLT(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLT(FieldEnteredBy, v))
}

// EnteredByLTE applies the LTE predicate on the "entered_by" field.
func EnteredByLTE(v uuid.UUID) predicate.WorkerComment {
	return predicate.WorkerComment(sql.FieldLTE(FieldEnteredBy, v))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.WorkerComment {
	return predicate.WorkerComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.WorkerComment {
	return predicate.WorkerComment(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.WorkerComment {
	return predicate.WorkerComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.WorkerComment {
	return predicate.WorkerComment(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorker applies the HasEdge predicate on the "worker" edge.
func HasWorker() predicate.WorkerComment {
	return predicate.WorkerComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkerTable, WorkerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkerWith applies the HasEdge predicate on the "worker" edge with a given conditions (other predicates).
func HasWorkerWith(preds ...predicate.Worker) predicate.WorkerComment {
	return predicate.WorkerComment(func(s *sql.Selector) {
		step := newWorkerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommentType applies the HasEdge predicate on the "comment_type" edge.
func HasCommentType() predicate.WorkerComment {
	return predicate.WorkerComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CommentTypeTable, CommentTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentTypeWith applies the HasEdge predicate on the "comment_type" edge with a given conditions (other predicates).
func HasCommentTypeWith(preds ...predicate.CommentType) predicate.WorkerComment {
	return predicate.WorkerComment(func(s *sql.Selector) {
		step := newCommentTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkerComment) predicate.WorkerComment {
	return predicate.WorkerComment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkerComment) predicate.WorkerComment {
	return predicate.WorkerComment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkerComment) predicate.WorkerComment {
	return predicate.WorkerComment(sql.NotPredicates(p))
}
