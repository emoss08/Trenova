// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/fleetcode"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/tractor"
	"github.com/emoss08/trenova/ent/user"
	"github.com/emoss08/trenova/ent/usstate"
	"github.com/emoss08/trenova/ent/worker"
	"github.com/emoss08/trenova/ent/workercomment"
	"github.com/emoss08/trenova/ent/workercontact"
	"github.com/emoss08/trenova/ent/workerprofile"
	"github.com/google/uuid"
)

// WorkerUpdate is the builder for updating Worker entities.
type WorkerUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WorkerUpdate builder.
func (wu *WorkerUpdate) Where(ps ...predicate.Worker) *WorkerUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WorkerUpdate) SetUpdatedAt(t time.Time) *WorkerUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetStatus sets the "status" field.
func (wu *WorkerUpdate) SetStatus(w worker.Status) *WorkerUpdate {
	wu.mutation.SetStatus(w)
	return wu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableStatus(w *worker.Status) *WorkerUpdate {
	if w != nil {
		wu.SetStatus(*w)
	}
	return wu
}

// SetCode sets the "code" field.
func (wu *WorkerUpdate) SetCode(s string) *WorkerUpdate {
	wu.mutation.SetCode(s)
	return wu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableCode(s *string) *WorkerUpdate {
	if s != nil {
		wu.SetCode(*s)
	}
	return wu
}

// SetProfilePictureURL sets the "profile_picture_url" field.
func (wu *WorkerUpdate) SetProfilePictureURL(s string) *WorkerUpdate {
	wu.mutation.SetProfilePictureURL(s)
	return wu
}

// SetNillableProfilePictureURL sets the "profile_picture_url" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableProfilePictureURL(s *string) *WorkerUpdate {
	if s != nil {
		wu.SetProfilePictureURL(*s)
	}
	return wu
}

// ClearProfilePictureURL clears the value of the "profile_picture_url" field.
func (wu *WorkerUpdate) ClearProfilePictureURL() *WorkerUpdate {
	wu.mutation.ClearProfilePictureURL()
	return wu
}

// SetWorkerType sets the "worker_type" field.
func (wu *WorkerUpdate) SetWorkerType(wt worker.WorkerType) *WorkerUpdate {
	wu.mutation.SetWorkerType(wt)
	return wu
}

// SetNillableWorkerType sets the "worker_type" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableWorkerType(wt *worker.WorkerType) *WorkerUpdate {
	if wt != nil {
		wu.SetWorkerType(*wt)
	}
	return wu
}

// SetFirstName sets the "first_name" field.
func (wu *WorkerUpdate) SetFirstName(s string) *WorkerUpdate {
	wu.mutation.SetFirstName(s)
	return wu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableFirstName(s *string) *WorkerUpdate {
	if s != nil {
		wu.SetFirstName(*s)
	}
	return wu
}

// SetLastName sets the "last_name" field.
func (wu *WorkerUpdate) SetLastName(s string) *WorkerUpdate {
	wu.mutation.SetLastName(s)
	return wu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableLastName(s *string) *WorkerUpdate {
	if s != nil {
		wu.SetLastName(*s)
	}
	return wu
}

// SetCity sets the "city" field.
func (wu *WorkerUpdate) SetCity(s string) *WorkerUpdate {
	wu.mutation.SetCity(s)
	return wu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableCity(s *string) *WorkerUpdate {
	if s != nil {
		wu.SetCity(*s)
	}
	return wu
}

// ClearCity clears the value of the "city" field.
func (wu *WorkerUpdate) ClearCity() *WorkerUpdate {
	wu.mutation.ClearCity()
	return wu
}

// SetPostalCode sets the "postal_code" field.
func (wu *WorkerUpdate) SetPostalCode(s string) *WorkerUpdate {
	wu.mutation.SetPostalCode(s)
	return wu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillablePostalCode(s *string) *WorkerUpdate {
	if s != nil {
		wu.SetPostalCode(*s)
	}
	return wu
}

// ClearPostalCode clears the value of the "postal_code" field.
func (wu *WorkerUpdate) ClearPostalCode() *WorkerUpdate {
	wu.mutation.ClearPostalCode()
	return wu
}

// SetStateID sets the "state_id" field.
func (wu *WorkerUpdate) SetStateID(u uuid.UUID) *WorkerUpdate {
	wu.mutation.SetStateID(u)
	return wu
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableStateID(u *uuid.UUID) *WorkerUpdate {
	if u != nil {
		wu.SetStateID(*u)
	}
	return wu
}

// ClearStateID clears the value of the "state_id" field.
func (wu *WorkerUpdate) ClearStateID() *WorkerUpdate {
	wu.mutation.ClearStateID()
	return wu
}

// SetFleetCodeID sets the "fleet_code_id" field.
func (wu *WorkerUpdate) SetFleetCodeID(u uuid.UUID) *WorkerUpdate {
	wu.mutation.SetFleetCodeID(u)
	return wu
}

// SetNillableFleetCodeID sets the "fleet_code_id" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableFleetCodeID(u *uuid.UUID) *WorkerUpdate {
	if u != nil {
		wu.SetFleetCodeID(*u)
	}
	return wu
}

// ClearFleetCodeID clears the value of the "fleet_code_id" field.
func (wu *WorkerUpdate) ClearFleetCodeID() *WorkerUpdate {
	wu.mutation.ClearFleetCodeID()
	return wu
}

// SetManagerID sets the "manager_id" field.
func (wu *WorkerUpdate) SetManagerID(u uuid.UUID) *WorkerUpdate {
	wu.mutation.SetManagerID(u)
	return wu
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (wu *WorkerUpdate) SetNillableManagerID(u *uuid.UUID) *WorkerUpdate {
	if u != nil {
		wu.SetManagerID(*u)
	}
	return wu
}

// ClearManagerID clears the value of the "manager_id" field.
func (wu *WorkerUpdate) ClearManagerID() *WorkerUpdate {
	wu.mutation.ClearManagerID()
	return wu
}

// SetState sets the "state" edge to the UsState entity.
func (wu *WorkerUpdate) SetState(u *UsState) *WorkerUpdate {
	return wu.SetStateID(u.ID)
}

// SetFleetCode sets the "fleet_code" edge to the FleetCode entity.
func (wu *WorkerUpdate) SetFleetCode(f *FleetCode) *WorkerUpdate {
	return wu.SetFleetCodeID(f.ID)
}

// SetManager sets the "manager" edge to the User entity.
func (wu *WorkerUpdate) SetManager(u *User) *WorkerUpdate {
	return wu.SetManagerID(u.ID)
}

// SetPrimaryTractorID sets the "primary_tractor" edge to the Tractor entity by ID.
func (wu *WorkerUpdate) SetPrimaryTractorID(id uuid.UUID) *WorkerUpdate {
	wu.mutation.SetPrimaryTractorID(id)
	return wu
}

// SetNillablePrimaryTractorID sets the "primary_tractor" edge to the Tractor entity by ID if the given value is not nil.
func (wu *WorkerUpdate) SetNillablePrimaryTractorID(id *uuid.UUID) *WorkerUpdate {
	if id != nil {
		wu = wu.SetPrimaryTractorID(*id)
	}
	return wu
}

// SetPrimaryTractor sets the "primary_tractor" edge to the Tractor entity.
func (wu *WorkerUpdate) SetPrimaryTractor(t *Tractor) *WorkerUpdate {
	return wu.SetPrimaryTractorID(t.ID)
}

// SetSecondaryTractorID sets the "secondary_tractor" edge to the Tractor entity by ID.
func (wu *WorkerUpdate) SetSecondaryTractorID(id uuid.UUID) *WorkerUpdate {
	wu.mutation.SetSecondaryTractorID(id)
	return wu
}

// SetNillableSecondaryTractorID sets the "secondary_tractor" edge to the Tractor entity by ID if the given value is not nil.
func (wu *WorkerUpdate) SetNillableSecondaryTractorID(id *uuid.UUID) *WorkerUpdate {
	if id != nil {
		wu = wu.SetSecondaryTractorID(*id)
	}
	return wu
}

// SetSecondaryTractor sets the "secondary_tractor" edge to the Tractor entity.
func (wu *WorkerUpdate) SetSecondaryTractor(t *Tractor) *WorkerUpdate {
	return wu.SetSecondaryTractorID(t.ID)
}

// SetWorkerProfileID sets the "worker_profile" edge to the WorkerProfile entity by ID.
func (wu *WorkerUpdate) SetWorkerProfileID(id uuid.UUID) *WorkerUpdate {
	wu.mutation.SetWorkerProfileID(id)
	return wu
}

// SetNillableWorkerProfileID sets the "worker_profile" edge to the WorkerProfile entity by ID if the given value is not nil.
func (wu *WorkerUpdate) SetNillableWorkerProfileID(id *uuid.UUID) *WorkerUpdate {
	if id != nil {
		wu = wu.SetWorkerProfileID(*id)
	}
	return wu
}

// SetWorkerProfile sets the "worker_profile" edge to the WorkerProfile entity.
func (wu *WorkerUpdate) SetWorkerProfile(w *WorkerProfile) *WorkerUpdate {
	return wu.SetWorkerProfileID(w.ID)
}

// AddWorkerCommentIDs adds the "worker_comments" edge to the WorkerComment entity by IDs.
func (wu *WorkerUpdate) AddWorkerCommentIDs(ids ...uuid.UUID) *WorkerUpdate {
	wu.mutation.AddWorkerCommentIDs(ids...)
	return wu
}

// AddWorkerComments adds the "worker_comments" edges to the WorkerComment entity.
func (wu *WorkerUpdate) AddWorkerComments(w ...*WorkerComment) *WorkerUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkerCommentIDs(ids...)
}

// AddWorkerContactIDs adds the "worker_contacts" edge to the WorkerContact entity by IDs.
func (wu *WorkerUpdate) AddWorkerContactIDs(ids ...uuid.UUID) *WorkerUpdate {
	wu.mutation.AddWorkerContactIDs(ids...)
	return wu
}

// AddWorkerContacts adds the "worker_contacts" edges to the WorkerContact entity.
func (wu *WorkerUpdate) AddWorkerContacts(w ...*WorkerContact) *WorkerUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkerContactIDs(ids...)
}

// Mutation returns the WorkerMutation object of the builder.
func (wu *WorkerUpdate) Mutation() *WorkerMutation {
	return wu.mutation
}

// ClearState clears the "state" edge to the UsState entity.
func (wu *WorkerUpdate) ClearState() *WorkerUpdate {
	wu.mutation.ClearState()
	return wu
}

// ClearFleetCode clears the "fleet_code" edge to the FleetCode entity.
func (wu *WorkerUpdate) ClearFleetCode() *WorkerUpdate {
	wu.mutation.ClearFleetCode()
	return wu
}

// ClearManager clears the "manager" edge to the User entity.
func (wu *WorkerUpdate) ClearManager() *WorkerUpdate {
	wu.mutation.ClearManager()
	return wu
}

// ClearPrimaryTractor clears the "primary_tractor" edge to the Tractor entity.
func (wu *WorkerUpdate) ClearPrimaryTractor() *WorkerUpdate {
	wu.mutation.ClearPrimaryTractor()
	return wu
}

// ClearSecondaryTractor clears the "secondary_tractor" edge to the Tractor entity.
func (wu *WorkerUpdate) ClearSecondaryTractor() *WorkerUpdate {
	wu.mutation.ClearSecondaryTractor()
	return wu
}

// ClearWorkerProfile clears the "worker_profile" edge to the WorkerProfile entity.
func (wu *WorkerUpdate) ClearWorkerProfile() *WorkerUpdate {
	wu.mutation.ClearWorkerProfile()
	return wu
}

// ClearWorkerComments clears all "worker_comments" edges to the WorkerComment entity.
func (wu *WorkerUpdate) ClearWorkerComments() *WorkerUpdate {
	wu.mutation.ClearWorkerComments()
	return wu
}

// RemoveWorkerCommentIDs removes the "worker_comments" edge to WorkerComment entities by IDs.
func (wu *WorkerUpdate) RemoveWorkerCommentIDs(ids ...uuid.UUID) *WorkerUpdate {
	wu.mutation.RemoveWorkerCommentIDs(ids...)
	return wu
}

// RemoveWorkerComments removes "worker_comments" edges to WorkerComment entities.
func (wu *WorkerUpdate) RemoveWorkerComments(w ...*WorkerComment) *WorkerUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkerCommentIDs(ids...)
}

// ClearWorkerContacts clears all "worker_contacts" edges to the WorkerContact entity.
func (wu *WorkerUpdate) ClearWorkerContacts() *WorkerUpdate {
	wu.mutation.ClearWorkerContacts()
	return wu
}

// RemoveWorkerContactIDs removes the "worker_contacts" edge to WorkerContact entities by IDs.
func (wu *WorkerUpdate) RemoveWorkerContactIDs(ids ...uuid.UUID) *WorkerUpdate {
	wu.mutation.RemoveWorkerContactIDs(ids...)
	return wu
}

// RemoveWorkerContacts removes "worker_contacts" edges to WorkerContact entities.
func (wu *WorkerUpdate) RemoveWorkerContacts(w ...*WorkerContact) *WorkerUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkerContactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkerUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkerUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkerUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkerUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkerUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := worker.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkerUpdate) check() error {
	if v, ok := wu.mutation.Status(); ok {
		if err := worker.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Worker.status": %w`, err)}
		}
	}
	if v, ok := wu.mutation.Code(); ok {
		if err := worker.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Worker.code": %w`, err)}
		}
	}
	if v, ok := wu.mutation.WorkerType(); ok {
		if err := worker.WorkerTypeValidator(v); err != nil {
			return &ValidationError{Name: "worker_type", err: fmt.Errorf(`ent: validator failed for field "Worker.worker_type": %w`, err)}
		}
	}
	if v, ok := wu.mutation.FirstName(); ok {
		if err := worker.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Worker.first_name": %w`, err)}
		}
	}
	if v, ok := wu.mutation.LastName(); ok {
		if err := worker.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Worker.last_name": %w`, err)}
		}
	}
	if v, ok := wu.mutation.PostalCode(); ok {
		if err := worker.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Worker.postal_code": %w`, err)}
		}
	}
	if _, ok := wu.mutation.BusinessUnitID(); wu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Worker.business_unit"`)
	}
	if _, ok := wu.mutation.OrganizationID(); wu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Worker.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WorkerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkerUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WorkerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(worker.Table, worker.Columns, sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(worker.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.Status(); ok {
		_spec.SetField(worker.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := wu.mutation.Code(); ok {
		_spec.SetField(worker.FieldCode, field.TypeString, value)
	}
	if value, ok := wu.mutation.ProfilePictureURL(); ok {
		_spec.SetField(worker.FieldProfilePictureURL, field.TypeString, value)
	}
	if wu.mutation.ProfilePictureURLCleared() {
		_spec.ClearField(worker.FieldProfilePictureURL, field.TypeString)
	}
	if value, ok := wu.mutation.WorkerType(); ok {
		_spec.SetField(worker.FieldWorkerType, field.TypeEnum, value)
	}
	if value, ok := wu.mutation.FirstName(); ok {
		_spec.SetField(worker.FieldFirstName, field.TypeString, value)
	}
	if value, ok := wu.mutation.LastName(); ok {
		_spec.SetField(worker.FieldLastName, field.TypeString, value)
	}
	if value, ok := wu.mutation.City(); ok {
		_spec.SetField(worker.FieldCity, field.TypeString, value)
	}
	if wu.mutation.CityCleared() {
		_spec.ClearField(worker.FieldCity, field.TypeString)
	}
	if value, ok := wu.mutation.PostalCode(); ok {
		_spec.SetField(worker.FieldPostalCode, field.TypeString, value)
	}
	if wu.mutation.PostalCodeCleared() {
		_spec.ClearField(worker.FieldPostalCode, field.TypeString)
	}
	if wu.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.StateTable,
			Columns: []string{worker.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.StateTable,
			Columns: []string{worker.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.FleetCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.FleetCodeTable,
			Columns: []string{worker.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.FleetCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.FleetCodeTable,
			Columns: []string{worker.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.ManagerTable,
			Columns: []string{worker.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.ManagerTable,
			Columns: []string{worker.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.PrimaryTractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.PrimaryTractorTable,
			Columns: []string{worker.PrimaryTractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.PrimaryTractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.PrimaryTractorTable,
			Columns: []string{worker.PrimaryTractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.SecondaryTractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.SecondaryTractorTable,
			Columns: []string{worker.SecondaryTractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.SecondaryTractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.SecondaryTractorTable,
			Columns: []string{worker.SecondaryTractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkerProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.WorkerProfileTable,
			Columns: []string{worker.WorkerProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workerprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkerProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.WorkerProfileTable,
			Columns: []string{worker.WorkerProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workerprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkerCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerCommentsTable,
			Columns: []string{worker.WorkerCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkerCommentsIDs(); len(nodes) > 0 && !wu.mutation.WorkerCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerCommentsTable,
			Columns: []string{worker.WorkerCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkerCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerCommentsTable,
			Columns: []string{worker.WorkerCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerContactsTable,
			Columns: []string{worker.WorkerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercontact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkerContactsIDs(); len(nodes) > 0 && !wu.mutation.WorkerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerContactsTable,
			Columns: []string{worker.WorkerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerContactsTable,
			Columns: []string{worker.WorkerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{worker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkerUpdateOne is the builder for updating a single Worker entity.
type WorkerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WorkerUpdateOne) SetUpdatedAt(t time.Time) *WorkerUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetStatus sets the "status" field.
func (wuo *WorkerUpdateOne) SetStatus(w worker.Status) *WorkerUpdateOne {
	wuo.mutation.SetStatus(w)
	return wuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableStatus(w *worker.Status) *WorkerUpdateOne {
	if w != nil {
		wuo.SetStatus(*w)
	}
	return wuo
}

// SetCode sets the "code" field.
func (wuo *WorkerUpdateOne) SetCode(s string) *WorkerUpdateOne {
	wuo.mutation.SetCode(s)
	return wuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableCode(s *string) *WorkerUpdateOne {
	if s != nil {
		wuo.SetCode(*s)
	}
	return wuo
}

// SetProfilePictureURL sets the "profile_picture_url" field.
func (wuo *WorkerUpdateOne) SetProfilePictureURL(s string) *WorkerUpdateOne {
	wuo.mutation.SetProfilePictureURL(s)
	return wuo
}

// SetNillableProfilePictureURL sets the "profile_picture_url" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableProfilePictureURL(s *string) *WorkerUpdateOne {
	if s != nil {
		wuo.SetProfilePictureURL(*s)
	}
	return wuo
}

// ClearProfilePictureURL clears the value of the "profile_picture_url" field.
func (wuo *WorkerUpdateOne) ClearProfilePictureURL() *WorkerUpdateOne {
	wuo.mutation.ClearProfilePictureURL()
	return wuo
}

// SetWorkerType sets the "worker_type" field.
func (wuo *WorkerUpdateOne) SetWorkerType(wt worker.WorkerType) *WorkerUpdateOne {
	wuo.mutation.SetWorkerType(wt)
	return wuo
}

// SetNillableWorkerType sets the "worker_type" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableWorkerType(wt *worker.WorkerType) *WorkerUpdateOne {
	if wt != nil {
		wuo.SetWorkerType(*wt)
	}
	return wuo
}

// SetFirstName sets the "first_name" field.
func (wuo *WorkerUpdateOne) SetFirstName(s string) *WorkerUpdateOne {
	wuo.mutation.SetFirstName(s)
	return wuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableFirstName(s *string) *WorkerUpdateOne {
	if s != nil {
		wuo.SetFirstName(*s)
	}
	return wuo
}

// SetLastName sets the "last_name" field.
func (wuo *WorkerUpdateOne) SetLastName(s string) *WorkerUpdateOne {
	wuo.mutation.SetLastName(s)
	return wuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableLastName(s *string) *WorkerUpdateOne {
	if s != nil {
		wuo.SetLastName(*s)
	}
	return wuo
}

// SetCity sets the "city" field.
func (wuo *WorkerUpdateOne) SetCity(s string) *WorkerUpdateOne {
	wuo.mutation.SetCity(s)
	return wuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableCity(s *string) *WorkerUpdateOne {
	if s != nil {
		wuo.SetCity(*s)
	}
	return wuo
}

// ClearCity clears the value of the "city" field.
func (wuo *WorkerUpdateOne) ClearCity() *WorkerUpdateOne {
	wuo.mutation.ClearCity()
	return wuo
}

// SetPostalCode sets the "postal_code" field.
func (wuo *WorkerUpdateOne) SetPostalCode(s string) *WorkerUpdateOne {
	wuo.mutation.SetPostalCode(s)
	return wuo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillablePostalCode(s *string) *WorkerUpdateOne {
	if s != nil {
		wuo.SetPostalCode(*s)
	}
	return wuo
}

// ClearPostalCode clears the value of the "postal_code" field.
func (wuo *WorkerUpdateOne) ClearPostalCode() *WorkerUpdateOne {
	wuo.mutation.ClearPostalCode()
	return wuo
}

// SetStateID sets the "state_id" field.
func (wuo *WorkerUpdateOne) SetStateID(u uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.SetStateID(u)
	return wuo
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableStateID(u *uuid.UUID) *WorkerUpdateOne {
	if u != nil {
		wuo.SetStateID(*u)
	}
	return wuo
}

// ClearStateID clears the value of the "state_id" field.
func (wuo *WorkerUpdateOne) ClearStateID() *WorkerUpdateOne {
	wuo.mutation.ClearStateID()
	return wuo
}

// SetFleetCodeID sets the "fleet_code_id" field.
func (wuo *WorkerUpdateOne) SetFleetCodeID(u uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.SetFleetCodeID(u)
	return wuo
}

// SetNillableFleetCodeID sets the "fleet_code_id" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableFleetCodeID(u *uuid.UUID) *WorkerUpdateOne {
	if u != nil {
		wuo.SetFleetCodeID(*u)
	}
	return wuo
}

// ClearFleetCodeID clears the value of the "fleet_code_id" field.
func (wuo *WorkerUpdateOne) ClearFleetCodeID() *WorkerUpdateOne {
	wuo.mutation.ClearFleetCodeID()
	return wuo
}

// SetManagerID sets the "manager_id" field.
func (wuo *WorkerUpdateOne) SetManagerID(u uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.SetManagerID(u)
	return wuo
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableManagerID(u *uuid.UUID) *WorkerUpdateOne {
	if u != nil {
		wuo.SetManagerID(*u)
	}
	return wuo
}

// ClearManagerID clears the value of the "manager_id" field.
func (wuo *WorkerUpdateOne) ClearManagerID() *WorkerUpdateOne {
	wuo.mutation.ClearManagerID()
	return wuo
}

// SetState sets the "state" edge to the UsState entity.
func (wuo *WorkerUpdateOne) SetState(u *UsState) *WorkerUpdateOne {
	return wuo.SetStateID(u.ID)
}

// SetFleetCode sets the "fleet_code" edge to the FleetCode entity.
func (wuo *WorkerUpdateOne) SetFleetCode(f *FleetCode) *WorkerUpdateOne {
	return wuo.SetFleetCodeID(f.ID)
}

// SetManager sets the "manager" edge to the User entity.
func (wuo *WorkerUpdateOne) SetManager(u *User) *WorkerUpdateOne {
	return wuo.SetManagerID(u.ID)
}

// SetPrimaryTractorID sets the "primary_tractor" edge to the Tractor entity by ID.
func (wuo *WorkerUpdateOne) SetPrimaryTractorID(id uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.SetPrimaryTractorID(id)
	return wuo
}

// SetNillablePrimaryTractorID sets the "primary_tractor" edge to the Tractor entity by ID if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillablePrimaryTractorID(id *uuid.UUID) *WorkerUpdateOne {
	if id != nil {
		wuo = wuo.SetPrimaryTractorID(*id)
	}
	return wuo
}

// SetPrimaryTractor sets the "primary_tractor" edge to the Tractor entity.
func (wuo *WorkerUpdateOne) SetPrimaryTractor(t *Tractor) *WorkerUpdateOne {
	return wuo.SetPrimaryTractorID(t.ID)
}

// SetSecondaryTractorID sets the "secondary_tractor" edge to the Tractor entity by ID.
func (wuo *WorkerUpdateOne) SetSecondaryTractorID(id uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.SetSecondaryTractorID(id)
	return wuo
}

// SetNillableSecondaryTractorID sets the "secondary_tractor" edge to the Tractor entity by ID if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableSecondaryTractorID(id *uuid.UUID) *WorkerUpdateOne {
	if id != nil {
		wuo = wuo.SetSecondaryTractorID(*id)
	}
	return wuo
}

// SetSecondaryTractor sets the "secondary_tractor" edge to the Tractor entity.
func (wuo *WorkerUpdateOne) SetSecondaryTractor(t *Tractor) *WorkerUpdateOne {
	return wuo.SetSecondaryTractorID(t.ID)
}

// SetWorkerProfileID sets the "worker_profile" edge to the WorkerProfile entity by ID.
func (wuo *WorkerUpdateOne) SetWorkerProfileID(id uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.SetWorkerProfileID(id)
	return wuo
}

// SetNillableWorkerProfileID sets the "worker_profile" edge to the WorkerProfile entity by ID if the given value is not nil.
func (wuo *WorkerUpdateOne) SetNillableWorkerProfileID(id *uuid.UUID) *WorkerUpdateOne {
	if id != nil {
		wuo = wuo.SetWorkerProfileID(*id)
	}
	return wuo
}

// SetWorkerProfile sets the "worker_profile" edge to the WorkerProfile entity.
func (wuo *WorkerUpdateOne) SetWorkerProfile(w *WorkerProfile) *WorkerUpdateOne {
	return wuo.SetWorkerProfileID(w.ID)
}

// AddWorkerCommentIDs adds the "worker_comments" edge to the WorkerComment entity by IDs.
func (wuo *WorkerUpdateOne) AddWorkerCommentIDs(ids ...uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.AddWorkerCommentIDs(ids...)
	return wuo
}

// AddWorkerComments adds the "worker_comments" edges to the WorkerComment entity.
func (wuo *WorkerUpdateOne) AddWorkerComments(w ...*WorkerComment) *WorkerUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkerCommentIDs(ids...)
}

// AddWorkerContactIDs adds the "worker_contacts" edge to the WorkerContact entity by IDs.
func (wuo *WorkerUpdateOne) AddWorkerContactIDs(ids ...uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.AddWorkerContactIDs(ids...)
	return wuo
}

// AddWorkerContacts adds the "worker_contacts" edges to the WorkerContact entity.
func (wuo *WorkerUpdateOne) AddWorkerContacts(w ...*WorkerContact) *WorkerUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkerContactIDs(ids...)
}

// Mutation returns the WorkerMutation object of the builder.
func (wuo *WorkerUpdateOne) Mutation() *WorkerMutation {
	return wuo.mutation
}

// ClearState clears the "state" edge to the UsState entity.
func (wuo *WorkerUpdateOne) ClearState() *WorkerUpdateOne {
	wuo.mutation.ClearState()
	return wuo
}

// ClearFleetCode clears the "fleet_code" edge to the FleetCode entity.
func (wuo *WorkerUpdateOne) ClearFleetCode() *WorkerUpdateOne {
	wuo.mutation.ClearFleetCode()
	return wuo
}

// ClearManager clears the "manager" edge to the User entity.
func (wuo *WorkerUpdateOne) ClearManager() *WorkerUpdateOne {
	wuo.mutation.ClearManager()
	return wuo
}

// ClearPrimaryTractor clears the "primary_tractor" edge to the Tractor entity.
func (wuo *WorkerUpdateOne) ClearPrimaryTractor() *WorkerUpdateOne {
	wuo.mutation.ClearPrimaryTractor()
	return wuo
}

// ClearSecondaryTractor clears the "secondary_tractor" edge to the Tractor entity.
func (wuo *WorkerUpdateOne) ClearSecondaryTractor() *WorkerUpdateOne {
	wuo.mutation.ClearSecondaryTractor()
	return wuo
}

// ClearWorkerProfile clears the "worker_profile" edge to the WorkerProfile entity.
func (wuo *WorkerUpdateOne) ClearWorkerProfile() *WorkerUpdateOne {
	wuo.mutation.ClearWorkerProfile()
	return wuo
}

// ClearWorkerComments clears all "worker_comments" edges to the WorkerComment entity.
func (wuo *WorkerUpdateOne) ClearWorkerComments() *WorkerUpdateOne {
	wuo.mutation.ClearWorkerComments()
	return wuo
}

// RemoveWorkerCommentIDs removes the "worker_comments" edge to WorkerComment entities by IDs.
func (wuo *WorkerUpdateOne) RemoveWorkerCommentIDs(ids ...uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.RemoveWorkerCommentIDs(ids...)
	return wuo
}

// RemoveWorkerComments removes "worker_comments" edges to WorkerComment entities.
func (wuo *WorkerUpdateOne) RemoveWorkerComments(w ...*WorkerComment) *WorkerUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkerCommentIDs(ids...)
}

// ClearWorkerContacts clears all "worker_contacts" edges to the WorkerContact entity.
func (wuo *WorkerUpdateOne) ClearWorkerContacts() *WorkerUpdateOne {
	wuo.mutation.ClearWorkerContacts()
	return wuo
}

// RemoveWorkerContactIDs removes the "worker_contacts" edge to WorkerContact entities by IDs.
func (wuo *WorkerUpdateOne) RemoveWorkerContactIDs(ids ...uuid.UUID) *WorkerUpdateOne {
	wuo.mutation.RemoveWorkerContactIDs(ids...)
	return wuo
}

// RemoveWorkerContacts removes "worker_contacts" edges to WorkerContact entities.
func (wuo *WorkerUpdateOne) RemoveWorkerContacts(w ...*WorkerContact) *WorkerUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkerContactIDs(ids...)
}

// Where appends a list predicates to the WorkerUpdate builder.
func (wuo *WorkerUpdateOne) Where(ps ...predicate.Worker) *WorkerUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkerUpdateOne) Select(field string, fields ...string) *WorkerUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Worker entity.
func (wuo *WorkerUpdateOne) Save(ctx context.Context) (*Worker, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkerUpdateOne) SaveX(ctx context.Context) *Worker {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkerUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkerUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkerUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := worker.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkerUpdateOne) check() error {
	if v, ok := wuo.mutation.Status(); ok {
		if err := worker.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Worker.status": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.Code(); ok {
		if err := worker.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Worker.code": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.WorkerType(); ok {
		if err := worker.WorkerTypeValidator(v); err != nil {
			return &ValidationError{Name: "worker_type", err: fmt.Errorf(`ent: validator failed for field "Worker.worker_type": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.FirstName(); ok {
		if err := worker.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Worker.first_name": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.LastName(); ok {
		if err := worker.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Worker.last_name": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.PostalCode(); ok {
		if err := worker.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Worker.postal_code": %w`, err)}
		}
	}
	if _, ok := wuo.mutation.BusinessUnitID(); wuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Worker.business_unit"`)
	}
	if _, ok := wuo.mutation.OrganizationID(); wuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Worker.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WorkerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkerUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WorkerUpdateOne) sqlSave(ctx context.Context) (_node *Worker, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(worker.Table, worker.Columns, sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Worker.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, worker.FieldID)
		for _, f := range fields {
			if !worker.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != worker.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(worker.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.Status(); ok {
		_spec.SetField(worker.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := wuo.mutation.Code(); ok {
		_spec.SetField(worker.FieldCode, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ProfilePictureURL(); ok {
		_spec.SetField(worker.FieldProfilePictureURL, field.TypeString, value)
	}
	if wuo.mutation.ProfilePictureURLCleared() {
		_spec.ClearField(worker.FieldProfilePictureURL, field.TypeString)
	}
	if value, ok := wuo.mutation.WorkerType(); ok {
		_spec.SetField(worker.FieldWorkerType, field.TypeEnum, value)
	}
	if value, ok := wuo.mutation.FirstName(); ok {
		_spec.SetField(worker.FieldFirstName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.LastName(); ok {
		_spec.SetField(worker.FieldLastName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.City(); ok {
		_spec.SetField(worker.FieldCity, field.TypeString, value)
	}
	if wuo.mutation.CityCleared() {
		_spec.ClearField(worker.FieldCity, field.TypeString)
	}
	if value, ok := wuo.mutation.PostalCode(); ok {
		_spec.SetField(worker.FieldPostalCode, field.TypeString, value)
	}
	if wuo.mutation.PostalCodeCleared() {
		_spec.ClearField(worker.FieldPostalCode, field.TypeString)
	}
	if wuo.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.StateTable,
			Columns: []string{worker.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.StateTable,
			Columns: []string{worker.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.FleetCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.FleetCodeTable,
			Columns: []string{worker.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.FleetCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.FleetCodeTable,
			Columns: []string{worker.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.ManagerTable,
			Columns: []string{worker.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.ManagerTable,
			Columns: []string{worker.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.PrimaryTractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.PrimaryTractorTable,
			Columns: []string{worker.PrimaryTractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.PrimaryTractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.PrimaryTractorTable,
			Columns: []string{worker.PrimaryTractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.SecondaryTractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.SecondaryTractorTable,
			Columns: []string{worker.SecondaryTractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.SecondaryTractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.SecondaryTractorTable,
			Columns: []string{worker.SecondaryTractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkerProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.WorkerProfileTable,
			Columns: []string{worker.WorkerProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workerprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkerProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.WorkerProfileTable,
			Columns: []string{worker.WorkerProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workerprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkerCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerCommentsTable,
			Columns: []string{worker.WorkerCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkerCommentsIDs(); len(nodes) > 0 && !wuo.mutation.WorkerCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerCommentsTable,
			Columns: []string{worker.WorkerCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkerCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerCommentsTable,
			Columns: []string{worker.WorkerCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerContactsTable,
			Columns: []string{worker.WorkerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercontact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkerContactsIDs(); len(nodes) > 0 && !wuo.mutation.WorkerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerContactsTable,
			Columns: []string{worker.WorkerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerContactsTable,
			Columns: []string{worker.WorkerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workercontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Worker{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{worker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
