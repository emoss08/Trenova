// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/userfavorite"
)

// UserFavoriteUpdate is the builder for updating UserFavorite entities.
type UserFavoriteUpdate struct {
	config
	hooks    []Hook
	mutation *UserFavoriteMutation
}

// Where appends a list predicates to the UserFavoriteUpdate builder.
func (ufu *UserFavoriteUpdate) Where(ps ...predicate.UserFavorite) *UserFavoriteUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetUpdatedAt sets the "updated_at" field.
func (ufu *UserFavoriteUpdate) SetUpdatedAt(t time.Time) *UserFavoriteUpdate {
	ufu.mutation.SetUpdatedAt(t)
	return ufu
}

// SetPageLink sets the "page_link" field.
func (ufu *UserFavoriteUpdate) SetPageLink(s string) *UserFavoriteUpdate {
	ufu.mutation.SetPageLink(s)
	return ufu
}

// SetNillablePageLink sets the "page_link" field if the given value is not nil.
func (ufu *UserFavoriteUpdate) SetNillablePageLink(s *string) *UserFavoriteUpdate {
	if s != nil {
		ufu.SetPageLink(*s)
	}
	return ufu
}

// Mutation returns the UserFavoriteMutation object of the builder.
func (ufu *UserFavoriteUpdate) Mutation() *UserFavoriteMutation {
	return ufu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UserFavoriteUpdate) Save(ctx context.Context) (int, error) {
	ufu.defaults()
	return withHooks(ctx, ufu.sqlSave, ufu.mutation, ufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UserFavoriteUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UserFavoriteUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UserFavoriteUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufu *UserFavoriteUpdate) defaults() {
	if _, ok := ufu.mutation.UpdatedAt(); !ok {
		v := userfavorite.UpdateDefaultUpdatedAt()
		ufu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufu *UserFavoriteUpdate) check() error {
	if v, ok := ufu.mutation.PageLink(); ok {
		if err := userfavorite.PageLinkValidator(v); err != nil {
			return &ValidationError{Name: "page_link", err: fmt.Errorf(`ent: validator failed for field "UserFavorite.page_link": %w`, err)}
		}
	}
	if _, ok := ufu.mutation.BusinessUnitID(); ufu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFavorite.business_unit"`)
	}
	if _, ok := ufu.mutation.OrganizationID(); ufu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFavorite.organization"`)
	}
	if _, ok := ufu.mutation.UserID(); ufu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFavorite.user"`)
	}
	return nil
}

func (ufu *UserFavoriteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ufu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userfavorite.Table, userfavorite.Columns, sqlgraph.NewFieldSpec(userfavorite.FieldID, field.TypeUUID))
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.UpdatedAt(); ok {
		_spec.SetField(userfavorite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ufu.mutation.PageLink(); ok {
		_spec.SetField(userfavorite.FieldPageLink, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfavorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufu.mutation.done = true
	return n, nil
}

// UserFavoriteUpdateOne is the builder for updating a single UserFavorite entity.
type UserFavoriteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFavoriteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ufuo *UserFavoriteUpdateOne) SetUpdatedAt(t time.Time) *UserFavoriteUpdateOne {
	ufuo.mutation.SetUpdatedAt(t)
	return ufuo
}

// SetPageLink sets the "page_link" field.
func (ufuo *UserFavoriteUpdateOne) SetPageLink(s string) *UserFavoriteUpdateOne {
	ufuo.mutation.SetPageLink(s)
	return ufuo
}

// SetNillablePageLink sets the "page_link" field if the given value is not nil.
func (ufuo *UserFavoriteUpdateOne) SetNillablePageLink(s *string) *UserFavoriteUpdateOne {
	if s != nil {
		ufuo.SetPageLink(*s)
	}
	return ufuo
}

// Mutation returns the UserFavoriteMutation object of the builder.
func (ufuo *UserFavoriteUpdateOne) Mutation() *UserFavoriteMutation {
	return ufuo.mutation
}

// Where appends a list predicates to the UserFavoriteUpdate builder.
func (ufuo *UserFavoriteUpdateOne) Where(ps ...predicate.UserFavorite) *UserFavoriteUpdateOne {
	ufuo.mutation.Where(ps...)
	return ufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UserFavoriteUpdateOne) Select(field string, fields ...string) *UserFavoriteUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UserFavorite entity.
func (ufuo *UserFavoriteUpdateOne) Save(ctx context.Context) (*UserFavorite, error) {
	ufuo.defaults()
	return withHooks(ctx, ufuo.sqlSave, ufuo.mutation, ufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UserFavoriteUpdateOne) SaveX(ctx context.Context) *UserFavorite {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UserFavoriteUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UserFavoriteUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufuo *UserFavoriteUpdateOne) defaults() {
	if _, ok := ufuo.mutation.UpdatedAt(); !ok {
		v := userfavorite.UpdateDefaultUpdatedAt()
		ufuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufuo *UserFavoriteUpdateOne) check() error {
	if v, ok := ufuo.mutation.PageLink(); ok {
		if err := userfavorite.PageLinkValidator(v); err != nil {
			return &ValidationError{Name: "page_link", err: fmt.Errorf(`ent: validator failed for field "UserFavorite.page_link": %w`, err)}
		}
	}
	if _, ok := ufuo.mutation.BusinessUnitID(); ufuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFavorite.business_unit"`)
	}
	if _, ok := ufuo.mutation.OrganizationID(); ufuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFavorite.organization"`)
	}
	if _, ok := ufuo.mutation.UserID(); ufuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFavorite.user"`)
	}
	return nil
}

func (ufuo *UserFavoriteUpdateOne) sqlSave(ctx context.Context) (_node *UserFavorite, err error) {
	if err := ufuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userfavorite.Table, userfavorite.Columns, sqlgraph.NewFieldSpec(userfavorite.FieldID, field.TypeUUID))
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFavorite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfavorite.FieldID)
		for _, f := range fields {
			if !userfavorite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfavorite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userfavorite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ufuo.mutation.PageLink(); ok {
		_spec.SetField(userfavorite.FieldPageLink, field.TypeString, value)
	}
	_node = &UserFavorite{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfavorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufuo.mutation.done = true
	return _node, nil
}
