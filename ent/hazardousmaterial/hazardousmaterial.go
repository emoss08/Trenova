// Code generated by ent, DO NOT EDIT.

package hazardousmaterial

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the hazardousmaterial type in the database.
	Label = "hazardous_material"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldHazardClass holds the string denoting the hazard_class field in the database.
	FieldHazardClass = "hazard_class"
	// FieldErgNumber holds the string denoting the erg_number field in the database.
	FieldErgNumber = "erg_number"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPackingGroup holds the string denoting the packing_group field in the database.
	FieldPackingGroup = "packing_group"
	// FieldProperShippingName holds the string denoting the proper_shipping_name field in the database.
	FieldProperShippingName = "proper_shipping_name"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeCommodities holds the string denoting the commodities edge name in mutations.
	EdgeCommodities = "commodities"
	// Table holds the table name of the hazardousmaterial in the database.
	Table = "hazardous_materials"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "hazardous_materials"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "hazardous_materials"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// CommoditiesTable is the table that holds the commodities relation/edge.
	CommoditiesTable = "commodities"
	// CommoditiesInverseTable is the table name for the Commodity entity.
	// It exists in this package in order to avoid circular dependency with the "commodity" package.
	CommoditiesInverseTable = "commodities"
	// CommoditiesColumn is the table column denoting the commodities relation/edge.
	CommoditiesColumn = "hazardous_material_id"
)

// Columns holds all SQL columns for hazardousmaterial fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldHazardClass,
	FieldErgNumber,
	FieldDescription,
	FieldPackingGroup,
	FieldProperShippingName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ErgNumberValidator is a validator for the "erg_number" field. It is called by the builders before save.
	ErgNumberValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// HazardClass defines the type for the "hazard_class" enum field.
type HazardClass string

// HazardClassHazardClass1And1 is the default value of the HazardClass enum.
const DefaultHazardClass = HazardClassHazardClass1And1

// HazardClass values.
const (
	HazardClassHazardClass1And1 HazardClass = "HazardClass1And1"
	HazardClassHazardClass1And2 HazardClass = "HazardClass1And2"
	HazardClassHazardClass1And3 HazardClass = "HazardClass1And3"
	HazardClassHazardClass1And4 HazardClass = "HazardClass1And4"
	HazardClassHazardClass1And5 HazardClass = "HazardClass1And5"
	HazardClassHazardClass1And6 HazardClass = "HazardClass1And6"
	HazardClassHazardClass2And1 HazardClass = "HazardClass2And1"
	HazardClassHazardClass2And2 HazardClass = "HazardClass2And2"
	HazardClassHazardClass2And3 HazardClass = "HazardClass2And3"
	HazardClassHazardClass3     HazardClass = "HazardClass3"
	HazardClassHazardClass4And1 HazardClass = "HazardClass4And1"
	HazardClassHazardClass4And2 HazardClass = "HazardClass4And2"
	HazardClassHazardClass4And3 HazardClass = "HazardClass4And3"
	HazardClassHazardClass5And1 HazardClass = "HazardClass5And1"
	HazardClassHazardClass5And2 HazardClass = "HazardClass5And2"
	HazardClassHazardClass6And1 HazardClass = "HazardClass6And1"
	HazardClassHazardClass6And2 HazardClass = "HazardClass6And2"
	HazardClassHazardClass7     HazardClass = "HazardClass7"
	HazardClassHazardClass8     HazardClass = "HazardClass8"
	HazardClassHazardClass9     HazardClass = "HazardClass9"
)

func (hc HazardClass) String() string {
	return string(hc)
}

// HazardClassValidator is a validator for the "hazard_class" field enum values. It is called by the builders before save.
func HazardClassValidator(hc HazardClass) error {
	switch hc {
	case HazardClassHazardClass1And1, HazardClassHazardClass1And2, HazardClassHazardClass1And3, HazardClassHazardClass1And4, HazardClassHazardClass1And5, HazardClassHazardClass1And6, HazardClassHazardClass2And1, HazardClassHazardClass2And2, HazardClassHazardClass2And3, HazardClassHazardClass3, HazardClassHazardClass4And1, HazardClassHazardClass4And2, HazardClassHazardClass4And3, HazardClassHazardClass5And1, HazardClassHazardClass5And2, HazardClassHazardClass6And1, HazardClassHazardClass6And2, HazardClassHazardClass7, HazardClassHazardClass8, HazardClassHazardClass9:
		return nil
	default:
		return fmt.Errorf("hazardousmaterial: invalid enum value for hazard_class field: %q", hc)
	}
}

// PackingGroup defines the type for the "packing_group" enum field.
type PackingGroup string

// PackingGroup values.
const (
	PackingGroupPackingGroupI   PackingGroup = "PackingGroupI"
	PackingGroupPackingGroupII  PackingGroup = "PackingGroupII"
	PackingGroupPackingGroupIII PackingGroup = "PackingGroupIII"
)

func (pg PackingGroup) String() string {
	return string(pg)
}

// PackingGroupValidator is a validator for the "packing_group" field enum values. It is called by the builders before save.
func PackingGroupValidator(pg PackingGroup) error {
	switch pg {
	case PackingGroupPackingGroupI, PackingGroupPackingGroupII, PackingGroupPackingGroupIII:
		return nil
	default:
		return fmt.Errorf("hazardousmaterial: invalid enum value for packing_group field: %q", pg)
	}
}

// OrderOption defines the ordering options for the HazardousMaterial queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByHazardClass orders the results by the hazard_class field.
func ByHazardClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHazardClass, opts...).ToFunc()
}

// ByErgNumber orders the results by the erg_number field.
func ByErgNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErgNumber, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPackingGroup orders the results by the packing_group field.
func ByPackingGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackingGroup, opts...).ToFunc()
}

// ByProperShippingName orders the results by the proper_shipping_name field.
func ByProperShippingName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProperShippingName, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommoditiesCount orders the results by commodities count.
func ByCommoditiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommoditiesStep(), opts...)
	}
}

// ByCommodities orders the results by commodities terms.
func ByCommodities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommoditiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newCommoditiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommoditiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommoditiesTable, CommoditiesColumn),
	)
}
