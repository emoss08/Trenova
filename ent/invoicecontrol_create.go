// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/invoicecontrol"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// InvoiceControlCreate is the builder for creating a InvoiceControl entity.
type InvoiceControlCreate struct {
	config
	mutation *InvoiceControlMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (icc *InvoiceControlCreate) SetCreatedAt(t time.Time) *InvoiceControlCreate {
	icc.mutation.SetCreatedAt(t)
	return icc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableCreatedAt(t *time.Time) *InvoiceControlCreate {
	if t != nil {
		icc.SetCreatedAt(*t)
	}
	return icc
}

// SetUpdatedAt sets the "updated_at" field.
func (icc *InvoiceControlCreate) SetUpdatedAt(t time.Time) *InvoiceControlCreate {
	icc.mutation.SetUpdatedAt(t)
	return icc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableUpdatedAt(t *time.Time) *InvoiceControlCreate {
	if t != nil {
		icc.SetUpdatedAt(*t)
	}
	return icc
}

// SetInvoiceNumberPrefix sets the "invoice_number_prefix" field.
func (icc *InvoiceControlCreate) SetInvoiceNumberPrefix(s string) *InvoiceControlCreate {
	icc.mutation.SetInvoiceNumberPrefix(s)
	return icc
}

// SetNillableInvoiceNumberPrefix sets the "invoice_number_prefix" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableInvoiceNumberPrefix(s *string) *InvoiceControlCreate {
	if s != nil {
		icc.SetInvoiceNumberPrefix(*s)
	}
	return icc
}

// SetCreditMemoNumberPrefix sets the "credit_memo_number_prefix" field.
func (icc *InvoiceControlCreate) SetCreditMemoNumberPrefix(s string) *InvoiceControlCreate {
	icc.mutation.SetCreditMemoNumberPrefix(s)
	return icc
}

// SetNillableCreditMemoNumberPrefix sets the "credit_memo_number_prefix" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableCreditMemoNumberPrefix(s *string) *InvoiceControlCreate {
	if s != nil {
		icc.SetCreditMemoNumberPrefix(*s)
	}
	return icc
}

// SetInvoiceTerms sets the "invoice_terms" field.
func (icc *InvoiceControlCreate) SetInvoiceTerms(s string) *InvoiceControlCreate {
	icc.mutation.SetInvoiceTerms(s)
	return icc
}

// SetNillableInvoiceTerms sets the "invoice_terms" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableInvoiceTerms(s *string) *InvoiceControlCreate {
	if s != nil {
		icc.SetInvoiceTerms(*s)
	}
	return icc
}

// SetInvoiceFooter sets the "invoice_footer" field.
func (icc *InvoiceControlCreate) SetInvoiceFooter(s string) *InvoiceControlCreate {
	icc.mutation.SetInvoiceFooter(s)
	return icc
}

// SetNillableInvoiceFooter sets the "invoice_footer" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableInvoiceFooter(s *string) *InvoiceControlCreate {
	if s != nil {
		icc.SetInvoiceFooter(*s)
	}
	return icc
}

// SetInvoiceLogoURL sets the "invoice_logo_url" field.
func (icc *InvoiceControlCreate) SetInvoiceLogoURL(s string) *InvoiceControlCreate {
	icc.mutation.SetInvoiceLogoURL(s)
	return icc
}

// SetNillableInvoiceLogoURL sets the "invoice_logo_url" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableInvoiceLogoURL(s *string) *InvoiceControlCreate {
	if s != nil {
		icc.SetInvoiceLogoURL(*s)
	}
	return icc
}

// SetInvoiceDateFormat sets the "invoice_date_format" field.
func (icc *InvoiceControlCreate) SetInvoiceDateFormat(idf invoicecontrol.InvoiceDateFormat) *InvoiceControlCreate {
	icc.mutation.SetInvoiceDateFormat(idf)
	return icc
}

// SetNillableInvoiceDateFormat sets the "invoice_date_format" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableInvoiceDateFormat(idf *invoicecontrol.InvoiceDateFormat) *InvoiceControlCreate {
	if idf != nil {
		icc.SetInvoiceDateFormat(*idf)
	}
	return icc
}

// SetInvoiceDueAfterDays sets the "invoice_due_after_days" field.
func (icc *InvoiceControlCreate) SetInvoiceDueAfterDays(u uint8) *InvoiceControlCreate {
	icc.mutation.SetInvoiceDueAfterDays(u)
	return icc
}

// SetNillableInvoiceDueAfterDays sets the "invoice_due_after_days" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableInvoiceDueAfterDays(u *uint8) *InvoiceControlCreate {
	if u != nil {
		icc.SetInvoiceDueAfterDays(*u)
	}
	return icc
}

// SetInvoiceLogoWidth sets the "invoice_logo_width" field.
func (icc *InvoiceControlCreate) SetInvoiceLogoWidth(u uint16) *InvoiceControlCreate {
	icc.mutation.SetInvoiceLogoWidth(u)
	return icc
}

// SetNillableInvoiceLogoWidth sets the "invoice_logo_width" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableInvoiceLogoWidth(u *uint16) *InvoiceControlCreate {
	if u != nil {
		icc.SetInvoiceLogoWidth(*u)
	}
	return icc
}

// SetShowAmountDue sets the "show_amount_due" field.
func (icc *InvoiceControlCreate) SetShowAmountDue(b bool) *InvoiceControlCreate {
	icc.mutation.SetShowAmountDue(b)
	return icc
}

// SetNillableShowAmountDue sets the "show_amount_due" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableShowAmountDue(b *bool) *InvoiceControlCreate {
	if b != nil {
		icc.SetShowAmountDue(*b)
	}
	return icc
}

// SetAttachPdf sets the "attach_pdf" field.
func (icc *InvoiceControlCreate) SetAttachPdf(b bool) *InvoiceControlCreate {
	icc.mutation.SetAttachPdf(b)
	return icc
}

// SetNillableAttachPdf sets the "attach_pdf" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableAttachPdf(b *bool) *InvoiceControlCreate {
	if b != nil {
		icc.SetAttachPdf(*b)
	}
	return icc
}

// SetShowInvoiceDueDate sets the "show_invoice_due_date" field.
func (icc *InvoiceControlCreate) SetShowInvoiceDueDate(b bool) *InvoiceControlCreate {
	icc.mutation.SetShowInvoiceDueDate(b)
	return icc
}

// SetNillableShowInvoiceDueDate sets the "show_invoice_due_date" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableShowInvoiceDueDate(b *bool) *InvoiceControlCreate {
	if b != nil {
		icc.SetShowInvoiceDueDate(*b)
	}
	return icc
}

// SetID sets the "id" field.
func (icc *InvoiceControlCreate) SetID(u uuid.UUID) *InvoiceControlCreate {
	icc.mutation.SetID(u)
	return icc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (icc *InvoiceControlCreate) SetNillableID(u *uuid.UUID) *InvoiceControlCreate {
	if u != nil {
		icc.SetID(*u)
	}
	return icc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (icc *InvoiceControlCreate) SetOrganizationID(id uuid.UUID) *InvoiceControlCreate {
	icc.mutation.SetOrganizationID(id)
	return icc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (icc *InvoiceControlCreate) SetOrganization(o *Organization) *InvoiceControlCreate {
	return icc.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (icc *InvoiceControlCreate) SetBusinessUnitID(id uuid.UUID) *InvoiceControlCreate {
	icc.mutation.SetBusinessUnitID(id)
	return icc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (icc *InvoiceControlCreate) SetBusinessUnit(b *BusinessUnit) *InvoiceControlCreate {
	return icc.SetBusinessUnitID(b.ID)
}

// Mutation returns the InvoiceControlMutation object of the builder.
func (icc *InvoiceControlCreate) Mutation() *InvoiceControlMutation {
	return icc.mutation
}

// Save creates the InvoiceControl in the database.
func (icc *InvoiceControlCreate) Save(ctx context.Context) (*InvoiceControl, error) {
	icc.defaults()
	return withHooks(ctx, icc.sqlSave, icc.mutation, icc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (icc *InvoiceControlCreate) SaveX(ctx context.Context) *InvoiceControl {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *InvoiceControlCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *InvoiceControlCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icc *InvoiceControlCreate) defaults() {
	if _, ok := icc.mutation.CreatedAt(); !ok {
		v := invoicecontrol.DefaultCreatedAt
		icc.mutation.SetCreatedAt(v)
	}
	if _, ok := icc.mutation.UpdatedAt(); !ok {
		v := invoicecontrol.DefaultUpdatedAt
		icc.mutation.SetUpdatedAt(v)
	}
	if _, ok := icc.mutation.InvoiceNumberPrefix(); !ok {
		v := invoicecontrol.DefaultInvoiceNumberPrefix
		icc.mutation.SetInvoiceNumberPrefix(v)
	}
	if _, ok := icc.mutation.CreditMemoNumberPrefix(); !ok {
		v := invoicecontrol.DefaultCreditMemoNumberPrefix
		icc.mutation.SetCreditMemoNumberPrefix(v)
	}
	if _, ok := icc.mutation.InvoiceDateFormat(); !ok {
		v := invoicecontrol.DefaultInvoiceDateFormat
		icc.mutation.SetInvoiceDateFormat(v)
	}
	if _, ok := icc.mutation.InvoiceDueAfterDays(); !ok {
		v := invoicecontrol.DefaultInvoiceDueAfterDays
		icc.mutation.SetInvoiceDueAfterDays(v)
	}
	if _, ok := icc.mutation.InvoiceLogoWidth(); !ok {
		v := invoicecontrol.DefaultInvoiceLogoWidth
		icc.mutation.SetInvoiceLogoWidth(v)
	}
	if _, ok := icc.mutation.ShowAmountDue(); !ok {
		v := invoicecontrol.DefaultShowAmountDue
		icc.mutation.SetShowAmountDue(v)
	}
	if _, ok := icc.mutation.AttachPdf(); !ok {
		v := invoicecontrol.DefaultAttachPdf
		icc.mutation.SetAttachPdf(v)
	}
	if _, ok := icc.mutation.ShowInvoiceDueDate(); !ok {
		v := invoicecontrol.DefaultShowInvoiceDueDate
		icc.mutation.SetShowInvoiceDueDate(v)
	}
	if _, ok := icc.mutation.ID(); !ok {
		v := invoicecontrol.DefaultID()
		icc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *InvoiceControlCreate) check() error {
	if _, ok := icc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InvoiceControl.created_at"`)}
	}
	if _, ok := icc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InvoiceControl.updated_at"`)}
	}
	if _, ok := icc.mutation.InvoiceNumberPrefix(); !ok {
		return &ValidationError{Name: "invoice_number_prefix", err: errors.New(`ent: missing required field "InvoiceControl.invoice_number_prefix"`)}
	}
	if v, ok := icc.mutation.InvoiceNumberPrefix(); ok {
		if err := invoicecontrol.InvoiceNumberPrefixValidator(v); err != nil {
			return &ValidationError{Name: "invoice_number_prefix", err: fmt.Errorf(`ent: validator failed for field "InvoiceControl.invoice_number_prefix": %w`, err)}
		}
	}
	if _, ok := icc.mutation.CreditMemoNumberPrefix(); !ok {
		return &ValidationError{Name: "credit_memo_number_prefix", err: errors.New(`ent: missing required field "InvoiceControl.credit_memo_number_prefix"`)}
	}
	if v, ok := icc.mutation.CreditMemoNumberPrefix(); ok {
		if err := invoicecontrol.CreditMemoNumberPrefixValidator(v); err != nil {
			return &ValidationError{Name: "credit_memo_number_prefix", err: fmt.Errorf(`ent: validator failed for field "InvoiceControl.credit_memo_number_prefix": %w`, err)}
		}
	}
	if v, ok := icc.mutation.InvoiceLogoURL(); ok {
		if err := invoicecontrol.InvoiceLogoURLValidator(v); err != nil {
			return &ValidationError{Name: "invoice_logo_url", err: fmt.Errorf(`ent: validator failed for field "InvoiceControl.invoice_logo_url": %w`, err)}
		}
	}
	if _, ok := icc.mutation.InvoiceDateFormat(); !ok {
		return &ValidationError{Name: "invoice_date_format", err: errors.New(`ent: missing required field "InvoiceControl.invoice_date_format"`)}
	}
	if v, ok := icc.mutation.InvoiceDateFormat(); ok {
		if err := invoicecontrol.InvoiceDateFormatValidator(v); err != nil {
			return &ValidationError{Name: "invoice_date_format", err: fmt.Errorf(`ent: validator failed for field "InvoiceControl.invoice_date_format": %w`, err)}
		}
	}
	if _, ok := icc.mutation.InvoiceDueAfterDays(); !ok {
		return &ValidationError{Name: "invoice_due_after_days", err: errors.New(`ent: missing required field "InvoiceControl.invoice_due_after_days"`)}
	}
	if v, ok := icc.mutation.InvoiceDueAfterDays(); ok {
		if err := invoicecontrol.InvoiceDueAfterDaysValidator(v); err != nil {
			return &ValidationError{Name: "invoice_due_after_days", err: fmt.Errorf(`ent: validator failed for field "InvoiceControl.invoice_due_after_days": %w`, err)}
		}
	}
	if _, ok := icc.mutation.InvoiceLogoWidth(); !ok {
		return &ValidationError{Name: "invoice_logo_width", err: errors.New(`ent: missing required field "InvoiceControl.invoice_logo_width"`)}
	}
	if v, ok := icc.mutation.InvoiceLogoWidth(); ok {
		if err := invoicecontrol.InvoiceLogoWidthValidator(v); err != nil {
			return &ValidationError{Name: "invoice_logo_width", err: fmt.Errorf(`ent: validator failed for field "InvoiceControl.invoice_logo_width": %w`, err)}
		}
	}
	if _, ok := icc.mutation.ShowAmountDue(); !ok {
		return &ValidationError{Name: "show_amount_due", err: errors.New(`ent: missing required field "InvoiceControl.show_amount_due"`)}
	}
	if _, ok := icc.mutation.AttachPdf(); !ok {
		return &ValidationError{Name: "attach_pdf", err: errors.New(`ent: missing required field "InvoiceControl.attach_pdf"`)}
	}
	if _, ok := icc.mutation.ShowInvoiceDueDate(); !ok {
		return &ValidationError{Name: "show_invoice_due_date", err: errors.New(`ent: missing required field "InvoiceControl.show_invoice_due_date"`)}
	}
	if _, ok := icc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "InvoiceControl.organization"`)}
	}
	if _, ok := icc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "InvoiceControl.business_unit"`)}
	}
	return nil
}

func (icc *InvoiceControlCreate) sqlSave(ctx context.Context) (*InvoiceControl, error) {
	if err := icc.check(); err != nil {
		return nil, err
	}
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	icc.mutation.id = &_node.ID
	icc.mutation.done = true
	return _node, nil
}

func (icc *InvoiceControlCreate) createSpec() (*InvoiceControl, *sqlgraph.CreateSpec) {
	var (
		_node = &InvoiceControl{config: icc.config}
		_spec = sqlgraph.NewCreateSpec(invoicecontrol.Table, sqlgraph.NewFieldSpec(invoicecontrol.FieldID, field.TypeUUID))
	)
	if id, ok := icc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := icc.mutation.CreatedAt(); ok {
		_spec.SetField(invoicecontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := icc.mutation.UpdatedAt(); ok {
		_spec.SetField(invoicecontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := icc.mutation.InvoiceNumberPrefix(); ok {
		_spec.SetField(invoicecontrol.FieldInvoiceNumberPrefix, field.TypeString, value)
		_node.InvoiceNumberPrefix = value
	}
	if value, ok := icc.mutation.CreditMemoNumberPrefix(); ok {
		_spec.SetField(invoicecontrol.FieldCreditMemoNumberPrefix, field.TypeString, value)
		_node.CreditMemoNumberPrefix = value
	}
	if value, ok := icc.mutation.InvoiceTerms(); ok {
		_spec.SetField(invoicecontrol.FieldInvoiceTerms, field.TypeString, value)
		_node.InvoiceTerms = &value
	}
	if value, ok := icc.mutation.InvoiceFooter(); ok {
		_spec.SetField(invoicecontrol.FieldInvoiceFooter, field.TypeString, value)
		_node.InvoiceFooter = &value
	}
	if value, ok := icc.mutation.InvoiceLogoURL(); ok {
		_spec.SetField(invoicecontrol.FieldInvoiceLogoURL, field.TypeString, value)
		_node.InvoiceLogoURL = &value
	}
	if value, ok := icc.mutation.InvoiceDateFormat(); ok {
		_spec.SetField(invoicecontrol.FieldInvoiceDateFormat, field.TypeEnum, value)
		_node.InvoiceDateFormat = value
	}
	if value, ok := icc.mutation.InvoiceDueAfterDays(); ok {
		_spec.SetField(invoicecontrol.FieldInvoiceDueAfterDays, field.TypeUint8, value)
		_node.InvoiceDueAfterDays = value
	}
	if value, ok := icc.mutation.InvoiceLogoWidth(); ok {
		_spec.SetField(invoicecontrol.FieldInvoiceLogoWidth, field.TypeUint16, value)
		_node.InvoiceLogoWidth = value
	}
	if value, ok := icc.mutation.ShowAmountDue(); ok {
		_spec.SetField(invoicecontrol.FieldShowAmountDue, field.TypeBool, value)
		_node.ShowAmountDue = value
	}
	if value, ok := icc.mutation.AttachPdf(); ok {
		_spec.SetField(invoicecontrol.FieldAttachPdf, field.TypeBool, value)
		_node.AttachPdf = value
	}
	if value, ok := icc.mutation.ShowInvoiceDueDate(); ok {
		_spec.SetField(invoicecontrol.FieldShowInvoiceDueDate, field.TypeBool, value)
		_node.ShowInvoiceDueDate = value
	}
	if nodes := icc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   invoicecontrol.OrganizationTable,
			Columns: []string{invoicecontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicecontrol.BusinessUnitTable,
			Columns: []string{invoicecontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_unit_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvoiceControlCreateBulk is the builder for creating many InvoiceControl entities in bulk.
type InvoiceControlCreateBulk struct {
	config
	err      error
	builders []*InvoiceControlCreate
}

// Save creates the InvoiceControl entities in the database.
func (iccb *InvoiceControlCreateBulk) Save(ctx context.Context) ([]*InvoiceControl, error) {
	if iccb.err != nil {
		return nil, iccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*InvoiceControl, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *InvoiceControlCreateBulk) SaveX(ctx context.Context) []*InvoiceControl {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *InvoiceControlCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *InvoiceControlCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}
