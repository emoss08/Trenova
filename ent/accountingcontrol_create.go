// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/accountingcontrol"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// AccountingControlCreate is the builder for creating a AccountingControl entity.
type AccountingControlCreate struct {
	config
	mutation *AccountingControlMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (acc *AccountingControlCreate) SetCreatedAt(t time.Time) *AccountingControlCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableCreatedAt(t *time.Time) *AccountingControlCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AccountingControlCreate) SetUpdatedAt(t time.Time) *AccountingControlCreate {
	acc.mutation.SetUpdatedAt(t)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableUpdatedAt(t *time.Time) *AccountingControlCreate {
	if t != nil {
		acc.SetUpdatedAt(*t)
	}
	return acc
}

// SetRecThreshold sets the "rec_threshold" field.
func (acc *AccountingControlCreate) SetRecThreshold(i int8) *AccountingControlCreate {
	acc.mutation.SetRecThreshold(i)
	return acc
}

// SetNillableRecThreshold sets the "rec_threshold" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableRecThreshold(i *int8) *AccountingControlCreate {
	if i != nil {
		acc.SetRecThreshold(*i)
	}
	return acc
}

// SetRecThresholdAction sets the "rec_threshold_action" field.
func (acc *AccountingControlCreate) SetRecThresholdAction(ata accountingcontrol.RecThresholdAction) *AccountingControlCreate {
	acc.mutation.SetRecThresholdAction(ata)
	return acc
}

// SetNillableRecThresholdAction sets the "rec_threshold_action" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableRecThresholdAction(ata *accountingcontrol.RecThresholdAction) *AccountingControlCreate {
	if ata != nil {
		acc.SetRecThresholdAction(*ata)
	}
	return acc
}

// SetAutoCreateJournalEntries sets the "auto_create_journal_entries" field.
func (acc *AccountingControlCreate) SetAutoCreateJournalEntries(b bool) *AccountingControlCreate {
	acc.mutation.SetAutoCreateJournalEntries(b)
	return acc
}

// SetNillableAutoCreateJournalEntries sets the "auto_create_journal_entries" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableAutoCreateJournalEntries(b *bool) *AccountingControlCreate {
	if b != nil {
		acc.SetAutoCreateJournalEntries(*b)
	}
	return acc
}

// SetJournalEntryCriteria sets the "journal_entry_criteria" field.
func (acc *AccountingControlCreate) SetJournalEntryCriteria(aec accountingcontrol.JournalEntryCriteria) *AccountingControlCreate {
	acc.mutation.SetJournalEntryCriteria(aec)
	return acc
}

// SetNillableJournalEntryCriteria sets the "journal_entry_criteria" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableJournalEntryCriteria(aec *accountingcontrol.JournalEntryCriteria) *AccountingControlCreate {
	if aec != nil {
		acc.SetJournalEntryCriteria(*aec)
	}
	return acc
}

// SetRestrictManualJournalEntries sets the "restrict_manual_journal_entries" field.
func (acc *AccountingControlCreate) SetRestrictManualJournalEntries(b bool) *AccountingControlCreate {
	acc.mutation.SetRestrictManualJournalEntries(b)
	return acc
}

// SetNillableRestrictManualJournalEntries sets the "restrict_manual_journal_entries" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableRestrictManualJournalEntries(b *bool) *AccountingControlCreate {
	if b != nil {
		acc.SetRestrictManualJournalEntries(*b)
	}
	return acc
}

// SetRequireJournalEntryApproval sets the "require_journal_entry_approval" field.
func (acc *AccountingControlCreate) SetRequireJournalEntryApproval(b bool) *AccountingControlCreate {
	acc.mutation.SetRequireJournalEntryApproval(b)
	return acc
}

// SetNillableRequireJournalEntryApproval sets the "require_journal_entry_approval" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableRequireJournalEntryApproval(b *bool) *AccountingControlCreate {
	if b != nil {
		acc.SetRequireJournalEntryApproval(*b)
	}
	return acc
}

// SetEnableRecNotifications sets the "enable_rec_notifications" field.
func (acc *AccountingControlCreate) SetEnableRecNotifications(b bool) *AccountingControlCreate {
	acc.mutation.SetEnableRecNotifications(b)
	return acc
}

// SetNillableEnableRecNotifications sets the "enable_rec_notifications" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableEnableRecNotifications(b *bool) *AccountingControlCreate {
	if b != nil {
		acc.SetEnableRecNotifications(*b)
	}
	return acc
}

// SetHaltOnPendingRec sets the "halt_on_pending_rec" field.
func (acc *AccountingControlCreate) SetHaltOnPendingRec(b bool) *AccountingControlCreate {
	acc.mutation.SetHaltOnPendingRec(b)
	return acc
}

// SetNillableHaltOnPendingRec sets the "halt_on_pending_rec" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableHaltOnPendingRec(b *bool) *AccountingControlCreate {
	if b != nil {
		acc.SetHaltOnPendingRec(*b)
	}
	return acc
}

// SetCriticalProcesses sets the "critical_processes" field.
func (acc *AccountingControlCreate) SetCriticalProcesses(s string) *AccountingControlCreate {
	acc.mutation.SetCriticalProcesses(s)
	return acc
}

// SetNillableCriticalProcesses sets the "critical_processes" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableCriticalProcesses(s *string) *AccountingControlCreate {
	if s != nil {
		acc.SetCriticalProcesses(*s)
	}
	return acc
}

// SetDefaultRevAccountID sets the "default_rev_account_id" field.
func (acc *AccountingControlCreate) SetDefaultRevAccountID(u uuid.UUID) *AccountingControlCreate {
	acc.mutation.SetDefaultRevAccountID(u)
	return acc
}

// SetNillableDefaultRevAccountID sets the "default_rev_account_id" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableDefaultRevAccountID(u *uuid.UUID) *AccountingControlCreate {
	if u != nil {
		acc.SetDefaultRevAccountID(*u)
	}
	return acc
}

// SetDefaultExpAccountID sets the "default_exp_account_id" field.
func (acc *AccountingControlCreate) SetDefaultExpAccountID(u uuid.UUID) *AccountingControlCreate {
	acc.mutation.SetDefaultExpAccountID(u)
	return acc
}

// SetNillableDefaultExpAccountID sets the "default_exp_account_id" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableDefaultExpAccountID(u *uuid.UUID) *AccountingControlCreate {
	if u != nil {
		acc.SetDefaultExpAccountID(*u)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AccountingControlCreate) SetID(u uuid.UUID) *AccountingControlCreate {
	acc.mutation.SetID(u)
	return acc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acc *AccountingControlCreate) SetNillableID(u *uuid.UUID) *AccountingControlCreate {
	if u != nil {
		acc.SetID(*u)
	}
	return acc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (acc *AccountingControlCreate) SetOrganizationID(id uuid.UUID) *AccountingControlCreate {
	acc.mutation.SetOrganizationID(id)
	return acc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (acc *AccountingControlCreate) SetOrganization(o *Organization) *AccountingControlCreate {
	return acc.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (acc *AccountingControlCreate) SetBusinessUnitID(id uuid.UUID) *AccountingControlCreate {
	acc.mutation.SetBusinessUnitID(id)
	return acc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (acc *AccountingControlCreate) SetBusinessUnit(b *BusinessUnit) *AccountingControlCreate {
	return acc.SetBusinessUnitID(b.ID)
}

// SetDefaultRevAccount sets the "default_rev_account" edge to the GeneralLedgerAccount entity.
func (acc *AccountingControlCreate) SetDefaultRevAccount(g *GeneralLedgerAccount) *AccountingControlCreate {
	return acc.SetDefaultRevAccountID(g.ID)
}

// SetDefaultExpAccount sets the "default_exp_account" edge to the GeneralLedgerAccount entity.
func (acc *AccountingControlCreate) SetDefaultExpAccount(g *GeneralLedgerAccount) *AccountingControlCreate {
	return acc.SetDefaultExpAccountID(g.ID)
}

// Mutation returns the AccountingControlMutation object of the builder.
func (acc *AccountingControlCreate) Mutation() *AccountingControlMutation {
	return acc.mutation
}

// Save creates the AccountingControl in the database.
func (acc *AccountingControlCreate) Save(ctx context.Context) (*AccountingControl, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AccountingControlCreate) SaveX(ctx context.Context) *AccountingControl {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AccountingControlCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AccountingControlCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AccountingControlCreate) defaults() {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := accountingcontrol.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		v := accountingcontrol.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.RecThreshold(); !ok {
		v := accountingcontrol.DefaultRecThreshold
		acc.mutation.SetRecThreshold(v)
	}
	if _, ok := acc.mutation.RecThresholdAction(); !ok {
		v := accountingcontrol.DefaultRecThresholdAction
		acc.mutation.SetRecThresholdAction(v)
	}
	if _, ok := acc.mutation.AutoCreateJournalEntries(); !ok {
		v := accountingcontrol.DefaultAutoCreateJournalEntries
		acc.mutation.SetAutoCreateJournalEntries(v)
	}
	if _, ok := acc.mutation.JournalEntryCriteria(); !ok {
		v := accountingcontrol.DefaultJournalEntryCriteria
		acc.mutation.SetJournalEntryCriteria(v)
	}
	if _, ok := acc.mutation.RestrictManualJournalEntries(); !ok {
		v := accountingcontrol.DefaultRestrictManualJournalEntries
		acc.mutation.SetRestrictManualJournalEntries(v)
	}
	if _, ok := acc.mutation.RequireJournalEntryApproval(); !ok {
		v := accountingcontrol.DefaultRequireJournalEntryApproval
		acc.mutation.SetRequireJournalEntryApproval(v)
	}
	if _, ok := acc.mutation.EnableRecNotifications(); !ok {
		v := accountingcontrol.DefaultEnableRecNotifications
		acc.mutation.SetEnableRecNotifications(v)
	}
	if _, ok := acc.mutation.HaltOnPendingRec(); !ok {
		v := accountingcontrol.DefaultHaltOnPendingRec
		acc.mutation.SetHaltOnPendingRec(v)
	}
	if _, ok := acc.mutation.ID(); !ok {
		v := accountingcontrol.DefaultID()
		acc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AccountingControlCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccountingControl.created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AccountingControl.updated_at"`)}
	}
	if _, ok := acc.mutation.RecThreshold(); !ok {
		return &ValidationError{Name: "rec_threshold", err: errors.New(`ent: missing required field "AccountingControl.rec_threshold"`)}
	}
	if v, ok := acc.mutation.RecThreshold(); ok {
		if err := accountingcontrol.RecThresholdValidator(v); err != nil {
			return &ValidationError{Name: "rec_threshold", err: fmt.Errorf(`ent: validator failed for field "AccountingControl.rec_threshold": %w`, err)}
		}
	}
	if _, ok := acc.mutation.RecThresholdAction(); !ok {
		return &ValidationError{Name: "rec_threshold_action", err: errors.New(`ent: missing required field "AccountingControl.rec_threshold_action"`)}
	}
	if v, ok := acc.mutation.RecThresholdAction(); ok {
		if err := accountingcontrol.RecThresholdActionValidator(v); err != nil {
			return &ValidationError{Name: "rec_threshold_action", err: fmt.Errorf(`ent: validator failed for field "AccountingControl.rec_threshold_action": %w`, err)}
		}
	}
	if _, ok := acc.mutation.AutoCreateJournalEntries(); !ok {
		return &ValidationError{Name: "auto_create_journal_entries", err: errors.New(`ent: missing required field "AccountingControl.auto_create_journal_entries"`)}
	}
	if _, ok := acc.mutation.JournalEntryCriteria(); !ok {
		return &ValidationError{Name: "journal_entry_criteria", err: errors.New(`ent: missing required field "AccountingControl.journal_entry_criteria"`)}
	}
	if v, ok := acc.mutation.JournalEntryCriteria(); ok {
		if err := accountingcontrol.JournalEntryCriteriaValidator(v); err != nil {
			return &ValidationError{Name: "journal_entry_criteria", err: fmt.Errorf(`ent: validator failed for field "AccountingControl.journal_entry_criteria": %w`, err)}
		}
	}
	if _, ok := acc.mutation.RestrictManualJournalEntries(); !ok {
		return &ValidationError{Name: "restrict_manual_journal_entries", err: errors.New(`ent: missing required field "AccountingControl.restrict_manual_journal_entries"`)}
	}
	if _, ok := acc.mutation.RequireJournalEntryApproval(); !ok {
		return &ValidationError{Name: "require_journal_entry_approval", err: errors.New(`ent: missing required field "AccountingControl.require_journal_entry_approval"`)}
	}
	if _, ok := acc.mutation.EnableRecNotifications(); !ok {
		return &ValidationError{Name: "enable_rec_notifications", err: errors.New(`ent: missing required field "AccountingControl.enable_rec_notifications"`)}
	}
	if _, ok := acc.mutation.HaltOnPendingRec(); !ok {
		return &ValidationError{Name: "halt_on_pending_rec", err: errors.New(`ent: missing required field "AccountingControl.halt_on_pending_rec"`)}
	}
	if _, ok := acc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "AccountingControl.organization"`)}
	}
	if _, ok := acc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "AccountingControl.business_unit"`)}
	}
	return nil
}

func (acc *AccountingControlCreate) sqlSave(ctx context.Context) (*AccountingControl, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AccountingControlCreate) createSpec() (*AccountingControl, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountingControl{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(accountingcontrol.Table, sqlgraph.NewFieldSpec(accountingcontrol.FieldID, field.TypeUUID))
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(accountingcontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.SetField(accountingcontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.RecThreshold(); ok {
		_spec.SetField(accountingcontrol.FieldRecThreshold, field.TypeInt8, value)
		_node.RecThreshold = value
	}
	if value, ok := acc.mutation.RecThresholdAction(); ok {
		_spec.SetField(accountingcontrol.FieldRecThresholdAction, field.TypeEnum, value)
		_node.RecThresholdAction = value
	}
	if value, ok := acc.mutation.AutoCreateJournalEntries(); ok {
		_spec.SetField(accountingcontrol.FieldAutoCreateJournalEntries, field.TypeBool, value)
		_node.AutoCreateJournalEntries = value
	}
	if value, ok := acc.mutation.JournalEntryCriteria(); ok {
		_spec.SetField(accountingcontrol.FieldJournalEntryCriteria, field.TypeEnum, value)
		_node.JournalEntryCriteria = value
	}
	if value, ok := acc.mutation.RestrictManualJournalEntries(); ok {
		_spec.SetField(accountingcontrol.FieldRestrictManualJournalEntries, field.TypeBool, value)
		_node.RestrictManualJournalEntries = value
	}
	if value, ok := acc.mutation.RequireJournalEntryApproval(); ok {
		_spec.SetField(accountingcontrol.FieldRequireJournalEntryApproval, field.TypeBool, value)
		_node.RequireJournalEntryApproval = value
	}
	if value, ok := acc.mutation.EnableRecNotifications(); ok {
		_spec.SetField(accountingcontrol.FieldEnableRecNotifications, field.TypeBool, value)
		_node.EnableRecNotifications = value
	}
	if value, ok := acc.mutation.HaltOnPendingRec(); ok {
		_spec.SetField(accountingcontrol.FieldHaltOnPendingRec, field.TypeBool, value)
		_node.HaltOnPendingRec = value
	}
	if value, ok := acc.mutation.CriticalProcesses(); ok {
		_spec.SetField(accountingcontrol.FieldCriticalProcesses, field.TypeString, value)
		_node.CriticalProcesses = &value
	}
	if nodes := acc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountingcontrol.OrganizationTable,
			Columns: []string{accountingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.BusinessUnitTable,
			Columns: []string{accountingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_unit_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.DefaultRevAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultRevAccountTable,
			Columns: []string{accountingcontrol.DefaultRevAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DefaultRevAccountID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.DefaultExpAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultExpAccountTable,
			Columns: []string{accountingcontrol.DefaultExpAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DefaultExpAccountID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountingControlCreateBulk is the builder for creating many AccountingControl entities in bulk.
type AccountingControlCreateBulk struct {
	config
	err      error
	builders []*AccountingControlCreate
}

// Save creates the AccountingControl entities in the database.
func (accb *AccountingControlCreateBulk) Save(ctx context.Context) ([]*AccountingControl, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AccountingControl, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountingControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AccountingControlCreateBulk) SaveX(ctx context.Context) []*AccountingControl {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AccountingControlCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AccountingControlCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
