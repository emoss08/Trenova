// Code generated by ent, DO NOT EDIT.

package emailcontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the emailcontrol type in the database.
	Label = "email_control"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldBillingEmailProfileID holds the string denoting the billing_email_profile_id field in the database.
	FieldBillingEmailProfileID = "billing_email_profile_id"
	// FieldRateExpirtationEmailProfileID holds the string denoting the rate_expirtation_email_profile_id field in the database.
	FieldRateExpirtationEmailProfileID = "rate_expirtation_email_profile_id"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeBillingEmailProfile holds the string denoting the billing_email_profile edge name in mutations.
	EdgeBillingEmailProfile = "billing_email_profile"
	// EdgeRateEmailProfile holds the string denoting the rate_email_profile edge name in mutations.
	EdgeRateEmailProfile = "rate_email_profile"
	// Table holds the table name of the emailcontrol in the database.
	Table = "email_controls"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "email_controls"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "email_controls"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// BillingEmailProfileTable is the table that holds the billing_email_profile relation/edge.
	BillingEmailProfileTable = "email_controls"
	// BillingEmailProfileInverseTable is the table name for the EmailProfile entity.
	// It exists in this package in order to avoid circular dependency with the "emailprofile" package.
	BillingEmailProfileInverseTable = "email_profiles"
	// BillingEmailProfileColumn is the table column denoting the billing_email_profile relation/edge.
	BillingEmailProfileColumn = "billing_email_profile_id"
	// RateEmailProfileTable is the table that holds the rate_email_profile relation/edge.
	RateEmailProfileTable = "email_controls"
	// RateEmailProfileInverseTable is the table name for the EmailProfile entity.
	// It exists in this package in order to avoid circular dependency with the "emailprofile" package.
	RateEmailProfileInverseTable = "email_profiles"
	// RateEmailProfileColumn is the table column denoting the rate_email_profile relation/edge.
	RateEmailProfileColumn = "rate_expirtation_email_profile_id"
)

// Columns holds all SQL columns for emailcontrol fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldBillingEmailProfileID,
	FieldRateExpirtationEmailProfileID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "email_controls"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"business_unit_id",
	"organization_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the EmailControl queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBillingEmailProfileID orders the results by the billing_email_profile_id field.
func ByBillingEmailProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingEmailProfileID, opts...).ToFunc()
}

// ByRateExpirtationEmailProfileID orders the results by the rate_expirtation_email_profile_id field.
func ByRateExpirtationEmailProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRateExpirtationEmailProfileID, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillingEmailProfileField orders the results by billing_email_profile field.
func ByBillingEmailProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingEmailProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByRateEmailProfileField orders the results by rate_email_profile field.
func ByRateEmailProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRateEmailProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newBillingEmailProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingEmailProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BillingEmailProfileTable, BillingEmailProfileColumn),
	)
}
func newRateEmailProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RateEmailProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RateEmailProfileTable, RateEmailProfileColumn),
	)
}
