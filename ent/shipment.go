// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/customer"
	"github.com/emoss08/trenova/ent/equipmenttype"
	"github.com/emoss08/trenova/ent/location"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/servicetype"
	"github.com/emoss08/trenova/ent/shipment"
	"github.com/emoss08/trenova/ent/shipmenttype"
	"github.com/emoss08/trenova/ent/user"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// Shipment holds the schema definition for the Shipment entity.
type Shipment struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// ProNumber holds the value of the "pro_number" field.
	ProNumber string `json:"pro_number" validate:"required,max=20"`
	// Status holds the value of the "status" field.
	Status shipment.Status `json:"status,omitempty"`
	// OriginLocationID holds the value of the "origin_location_id" field.
	OriginLocationID *uuid.UUID `json:"originLocationId" validate:"required"`
	// OriginAddressLine holds the value of the "origin_address_line" field.
	OriginAddressLine string `json:"originAddressLine" validate:"omitempty"`
	// OriginAppointmentStart holds the value of the "origin_appointment_start" field.
	OriginAppointmentStart *time.Time `json:"originAppointmentStart" validate:"required"`
	// OriginAppointmentEnd holds the value of the "origin_appointment_end" field.
	OriginAppointmentEnd *time.Time `json:"originAppointmentEnd" validate:"required"`
	// DestinationLocationID holds the value of the "destination_location_id" field.
	DestinationLocationID *uuid.UUID `json:"destinationLocationId" validate:"required"`
	// DestinationAddressLine holds the value of the "destination_address_line" field.
	DestinationAddressLine string `json:"destinationAddressLine" validate:"omitempty"`
	// DestinationAppointmentStart holds the value of the "destination_appointment_start" field.
	DestinationAppointmentStart *time.Time `json:"destinationAppointmentStart" validate:"required"`
	// DestinationAppointmentEnd holds the value of the "destination_appointment_end" field.
	DestinationAppointmentEnd *time.Time `json:"destinationAppointmentEnd" validate:"required"`
	// ShipmentTypeID holds the value of the "shipment_type_id" field.
	ShipmentTypeID uuid.UUID `json:"shipmentTypeId" validate:"required"`
	// RevenueCodeID holds the value of the "revenue_code_id" field.
	RevenueCodeID *uuid.UUID `json:"revenueCodeId" validate:"omitempty"`
	// ServiceTypeID holds the value of the "service_type_id" field.
	ServiceTypeID *uuid.UUID `json:"serviceTypeId" validate:"omitempty"`
	// The rating unit for the shipment.
	RatingUnit int `json:"ratingUnit" validate:"omitempty"`
	// Mileage holds the value of the "mileage" field.
	Mileage float64 `json:"mileage" validate:"omitempty"`
	// OtherChargeAmount holds the value of the "other_charge_amount" field.
	OtherChargeAmount float64 `json:"otherChargeAmount" validate:"omitempty"`
	// FreightChargeAmount holds the value of the "freight_charge_amount" field.
	FreightChargeAmount float64 `json:"freightChargeAmount" validate:"omitempty"`
	// RatingMethod holds the value of the "rating_method" field.
	RatingMethod shipment.RatingMethod `json:"ratingMethod" validate:"omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID uuid.UUID `json:"customerId" validate:"required"`
	// Pieces holds the value of the "pieces" field.
	Pieces float64 `json:"pieces" validate:"omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float64 `json:"weight" validate:"omitempty"`
	// ReadyToBill holds the value of the "ready_to_bill" field.
	ReadyToBill bool `json:"readyToBill" validate:"omitempty"`
	// BillDate holds the value of the "bill_date" field.
	BillDate *pgtype.Date `json:"billDate" validate:"omitempty"`
	// ShipDate holds the value of the "ship_date" field.
	ShipDate *pgtype.Date `json:"shipDate" validate:"omitempty"`
	// Billed holds the value of the "billed" field.
	Billed bool `json:"billed" validate:"omitempty"`
	// TransferredToBilling holds the value of the "transferred_to_billing" field.
	TransferredToBilling bool `json:"transferredToBilling" validate:"omitempty"`
	// TransferredToBillingDate holds the value of the "transferred_to_billing_date" field.
	TransferredToBillingDate *pgtype.Date `json:"transferredToBillingDate" validate:"omitempty"`
	// TotalChargeAmount holds the value of the "total_charge_amount" field.
	TotalChargeAmount float64 `json:"totalChargeAmount" validate:"omitempty"`
	// TrailerTypeID holds the value of the "trailer_type_id" field.
	TrailerTypeID *uuid.UUID `json:"trailerTypeId" validate:"omitempty"`
	// TractorTypeID holds the value of the "tractor_type_id" field.
	TractorTypeID *uuid.UUID `json:"tractorTypeId" validate:"omitempty"`
	// TemperatureMin holds the value of the "temperature_min" field.
	TemperatureMin int `json:"temperatureMin" validate:"omitempty"`
	// TemperatureMax holds the value of the "temperature_max" field.
	TemperatureMax int `json:"temperatureMax" validate:"omitempty"`
	// BillOfLadingNumber holds the value of the "bill_of_lading_number" field.
	BillOfLadingNumber string `json:"billOfLadingNumber" validate:"omitempty"`
	// ConsigneeReferenceNumber holds the value of the "consignee_reference_number" field.
	ConsigneeReferenceNumber string `json:"consigneeReferenceNumber" validate:"omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment" validate:"omitempty"`
	// The comment for voiding the shipment.
	VoidedComment string `json:"voidedComment" validate:"omitempty"`
	// Indicates if the shipment was auto rated.
	AutoRated bool `json:"autoRated" validate:"omitempty"`
	// CurrentSuffix holds the value of the "current_suffix" field.
	CurrentSuffix string `json:"currentSuffix" validate:"omitempty"`
	// EntryMethod holds the value of the "entry_method" field.
	EntryMethod shipment.EntryMethod `json:"entryMethod" validate:"omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy *uuid.UUID `json:"createdBy" validate:"omitempty"`
	// Indicates if the shipment is hazardous.
	IsHazardous bool `json:"isHazardous" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentQuery when eager-loading is set.
	Edges        ShipmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShipmentEdges holds the relations/edges for other nodes in the graph.
type ShipmentEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// ShipmentType holds the value of the shipment_type edge.
	ShipmentType *ShipmentType `json:"shipmentType"`
	// ServiceType holds the value of the service_type edge.
	ServiceType *ServiceType `json:"serviceType"`
	// RevenueCode holds the value of the revenue_code edge.
	RevenueCode *ServiceType `json:"revenueCode"`
	// OriginLocation holds the value of the origin_location edge.
	OriginLocation *Location `json:"originLocation"`
	// DestinationLocation holds the value of the destination_location edge.
	DestinationLocation *Location `json:"destinationLocation"`
	// TrailerType holds the value of the trailer_type edge.
	TrailerType *EquipmentType `json:"trailerType"`
	// TractorType holds the value of the tractor_type edge.
	TractorType *EquipmentType `json:"tractorType"`
	// CreatedByUser holds the value of the created_by_user edge.
	CreatedByUser *User `json:"createdByUser"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer"`
	// ShipmentDocumentation holds the value of the shipment_documentation edge.
	ShipmentDocumentation []*ShipmentDocumentation `json:"shipmentDocumentation"`
	// ShipmentComments holds the value of the shipment_comments edge.
	ShipmentComments []*ShipmentComment `json:"shipmentComments"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes                [13]bool
	namedShipmentDocumentation map[string][]*ShipmentDocumentation
	namedShipmentComments      map[string][]*ShipmentComment
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ShipmentTypeOrErr returns the ShipmentType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentTypeOrErr() (*ShipmentType, error) {
	if e.ShipmentType != nil {
		return e.ShipmentType, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: shipmenttype.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_type"}
}

// ServiceTypeOrErr returns the ServiceType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ServiceTypeOrErr() (*ServiceType, error) {
	if e.ServiceType != nil {
		return e.ServiceType, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: servicetype.Label}
	}
	return nil, &NotLoadedError{edge: "service_type"}
}

// RevenueCodeOrErr returns the RevenueCode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) RevenueCodeOrErr() (*ServiceType, error) {
	if e.RevenueCode != nil {
		return e.RevenueCode, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: servicetype.Label}
	}
	return nil, &NotLoadedError{edge: "revenue_code"}
}

// OriginLocationOrErr returns the OriginLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) OriginLocationOrErr() (*Location, error) {
	if e.OriginLocation != nil {
		return e.OriginLocation, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "origin_location"}
}

// DestinationLocationOrErr returns the DestinationLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) DestinationLocationOrErr() (*Location, error) {
	if e.DestinationLocation != nil {
		return e.DestinationLocation, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "destination_location"}
}

// TrailerTypeOrErr returns the TrailerType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) TrailerTypeOrErr() (*EquipmentType, error) {
	if e.TrailerType != nil {
		return e.TrailerType, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: equipmenttype.Label}
	}
	return nil, &NotLoadedError{edge: "trailer_type"}
}

// TractorTypeOrErr returns the TractorType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) TractorTypeOrErr() (*EquipmentType, error) {
	if e.TractorType != nil {
		return e.TractorType, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: equipmenttype.Label}
	}
	return nil, &NotLoadedError{edge: "tractor_type"}
}

// CreatedByUserOrErr returns the CreatedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) CreatedByUserOrErr() (*User, error) {
	if e.CreatedByUser != nil {
		return e.CreatedByUser, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by_user"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ShipmentDocumentationOrErr returns the ShipmentDocumentation value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentEdges) ShipmentDocumentationOrErr() ([]*ShipmentDocumentation, error) {
	if e.loadedTypes[11] {
		return e.ShipmentDocumentation, nil
	}
	return nil, &NotLoadedError{edge: "shipment_documentation"}
}

// ShipmentCommentsOrErr returns the ShipmentComments value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentEdges) ShipmentCommentsOrErr() ([]*ShipmentComment, error) {
	if e.loadedTypes[12] {
		return e.ShipmentComments, nil
	}
	return nil, &NotLoadedError{edge: "shipment_comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shipment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipment.FieldOriginLocationID, shipment.FieldDestinationLocationID, shipment.FieldRevenueCodeID, shipment.FieldServiceTypeID, shipment.FieldTrailerTypeID, shipment.FieldTractorTypeID, shipment.FieldCreatedBy:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case shipment.FieldBillDate, shipment.FieldShipDate, shipment.FieldTransferredToBillingDate:
			values[i] = new(pgtype.Date)
		case shipment.FieldReadyToBill, shipment.FieldBilled, shipment.FieldTransferredToBilling, shipment.FieldAutoRated, shipment.FieldIsHazardous:
			values[i] = new(sql.NullBool)
		case shipment.FieldMileage, shipment.FieldOtherChargeAmount, shipment.FieldFreightChargeAmount, shipment.FieldPieces, shipment.FieldWeight, shipment.FieldTotalChargeAmount:
			values[i] = new(sql.NullFloat64)
		case shipment.FieldVersion, shipment.FieldRatingUnit, shipment.FieldTemperatureMin, shipment.FieldTemperatureMax:
			values[i] = new(sql.NullInt64)
		case shipment.FieldProNumber, shipment.FieldStatus, shipment.FieldOriginAddressLine, shipment.FieldDestinationAddressLine, shipment.FieldRatingMethod, shipment.FieldBillOfLadingNumber, shipment.FieldConsigneeReferenceNumber, shipment.FieldComment, shipment.FieldVoidedComment, shipment.FieldCurrentSuffix, shipment.FieldEntryMethod:
			values[i] = new(sql.NullString)
		case shipment.FieldCreatedAt, shipment.FieldUpdatedAt, shipment.FieldOriginAppointmentStart, shipment.FieldOriginAppointmentEnd, shipment.FieldDestinationAppointmentStart, shipment.FieldDestinationAppointmentEnd:
			values[i] = new(sql.NullTime)
		case shipment.FieldID, shipment.FieldBusinessUnitID, shipment.FieldOrganizationID, shipment.FieldShipmentTypeID, shipment.FieldCustomerID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shipment fields.
func (s *Shipment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case shipment.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				s.BusinessUnitID = *value
			}
		case shipment.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				s.OrganizationID = *value
			}
		case shipment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case shipment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case shipment.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				s.Version = int(value.Int64)
			}
		case shipment.FieldProNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pro_number", values[i])
			} else if value.Valid {
				s.ProNumber = value.String
			}
		case shipment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = shipment.Status(value.String)
			}
		case shipment.FieldOriginLocationID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field origin_location_id", values[i])
			} else if value.Valid {
				s.OriginLocationID = new(uuid.UUID)
				*s.OriginLocationID = *value.S.(*uuid.UUID)
			}
		case shipment.FieldOriginAddressLine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin_address_line", values[i])
			} else if value.Valid {
				s.OriginAddressLine = value.String
			}
		case shipment.FieldOriginAppointmentStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field origin_appointment_start", values[i])
			} else if value.Valid {
				s.OriginAppointmentStart = new(time.Time)
				*s.OriginAppointmentStart = value.Time
			}
		case shipment.FieldOriginAppointmentEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field origin_appointment_end", values[i])
			} else if value.Valid {
				s.OriginAppointmentEnd = new(time.Time)
				*s.OriginAppointmentEnd = value.Time
			}
		case shipment.FieldDestinationLocationID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field destination_location_id", values[i])
			} else if value.Valid {
				s.DestinationLocationID = new(uuid.UUID)
				*s.DestinationLocationID = *value.S.(*uuid.UUID)
			}
		case shipment.FieldDestinationAddressLine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination_address_line", values[i])
			} else if value.Valid {
				s.DestinationAddressLine = value.String
			}
		case shipment.FieldDestinationAppointmentStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field destination_appointment_start", values[i])
			} else if value.Valid {
				s.DestinationAppointmentStart = new(time.Time)
				*s.DestinationAppointmentStart = value.Time
			}
		case shipment.FieldDestinationAppointmentEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field destination_appointment_end", values[i])
			} else if value.Valid {
				s.DestinationAppointmentEnd = new(time.Time)
				*s.DestinationAppointmentEnd = value.Time
			}
		case shipment.FieldShipmentTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_type_id", values[i])
			} else if value != nil {
				s.ShipmentTypeID = *value
			}
		case shipment.FieldRevenueCodeID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field revenue_code_id", values[i])
			} else if value.Valid {
				s.RevenueCodeID = new(uuid.UUID)
				*s.RevenueCodeID = *value.S.(*uuid.UUID)
			}
		case shipment.FieldServiceTypeID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field service_type_id", values[i])
			} else if value.Valid {
				s.ServiceTypeID = new(uuid.UUID)
				*s.ServiceTypeID = *value.S.(*uuid.UUID)
			}
		case shipment.FieldRatingUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating_unit", values[i])
			} else if value.Valid {
				s.RatingUnit = int(value.Int64)
			}
		case shipment.FieldMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field mileage", values[i])
			} else if value.Valid {
				s.Mileage = value.Float64
			}
		case shipment.FieldOtherChargeAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field other_charge_amount", values[i])
			} else if value.Valid {
				s.OtherChargeAmount = value.Float64
			}
		case shipment.FieldFreightChargeAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field freight_charge_amount", values[i])
			} else if value.Valid {
				s.FreightChargeAmount = value.Float64
			}
		case shipment.FieldRatingMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rating_method", values[i])
			} else if value.Valid {
				s.RatingMethod = shipment.RatingMethod(value.String)
			}
		case shipment.FieldCustomerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value != nil {
				s.CustomerID = *value
			}
		case shipment.FieldPieces:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pieces", values[i])
			} else if value.Valid {
				s.Pieces = value.Float64
			}
		case shipment.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				s.Weight = value.Float64
			}
		case shipment.FieldReadyToBill:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ready_to_bill", values[i])
			} else if value.Valid {
				s.ReadyToBill = value.Bool
			}
		case shipment.FieldBillDate:
			if value, ok := values[i].(*pgtype.Date); !ok {
				return fmt.Errorf("unexpected type %T for field bill_date", values[i])
			} else if value != nil {
				s.BillDate = value
			}
		case shipment.FieldShipDate:
			if value, ok := values[i].(*pgtype.Date); !ok {
				return fmt.Errorf("unexpected type %T for field ship_date", values[i])
			} else if value != nil {
				s.ShipDate = value
			}
		case shipment.FieldBilled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field billed", values[i])
			} else if value.Valid {
				s.Billed = value.Bool
			}
		case shipment.FieldTransferredToBilling:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field transferred_to_billing", values[i])
			} else if value.Valid {
				s.TransferredToBilling = value.Bool
			}
		case shipment.FieldTransferredToBillingDate:
			if value, ok := values[i].(*pgtype.Date); !ok {
				return fmt.Errorf("unexpected type %T for field transferred_to_billing_date", values[i])
			} else if value != nil {
				s.TransferredToBillingDate = value
			}
		case shipment.FieldTotalChargeAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_charge_amount", values[i])
			} else if value.Valid {
				s.TotalChargeAmount = value.Float64
			}
		case shipment.FieldTrailerTypeID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field trailer_type_id", values[i])
			} else if value.Valid {
				s.TrailerTypeID = new(uuid.UUID)
				*s.TrailerTypeID = *value.S.(*uuid.UUID)
			}
		case shipment.FieldTractorTypeID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tractor_type_id", values[i])
			} else if value.Valid {
				s.TractorTypeID = new(uuid.UUID)
				*s.TractorTypeID = *value.S.(*uuid.UUID)
			}
		case shipment.FieldTemperatureMin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field temperature_min", values[i])
			} else if value.Valid {
				s.TemperatureMin = int(value.Int64)
			}
		case shipment.FieldTemperatureMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field temperature_max", values[i])
			} else if value.Valid {
				s.TemperatureMax = int(value.Int64)
			}
		case shipment.FieldBillOfLadingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bill_of_lading_number", values[i])
			} else if value.Valid {
				s.BillOfLadingNumber = value.String
			}
		case shipment.FieldConsigneeReferenceNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field consignee_reference_number", values[i])
			} else if value.Valid {
				s.ConsigneeReferenceNumber = value.String
			}
		case shipment.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				s.Comment = value.String
			}
		case shipment.FieldVoidedComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field voided_comment", values[i])
			} else if value.Valid {
				s.VoidedComment = value.String
			}
		case shipment.FieldAutoRated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_rated", values[i])
			} else if value.Valid {
				s.AutoRated = value.Bool
			}
		case shipment.FieldCurrentSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_suffix", values[i])
			} else if value.Valid {
				s.CurrentSuffix = value.String
			}
		case shipment.FieldEntryMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entry_method", values[i])
			} else if value.Valid {
				s.EntryMethod = shipment.EntryMethod(value.String)
			}
		case shipment.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = new(uuid.UUID)
				*s.CreatedBy = *value.S.(*uuid.UUID)
			}
		case shipment.FieldIsHazardous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_hazardous", values[i])
			} else if value.Valid {
				s.IsHazardous = value.Bool
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Shipment.
// This includes values selected through modifiers, order, etc.
func (s *Shipment) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the Shipment entity.
func (s *Shipment) QueryBusinessUnit() *BusinessUnitQuery {
	return NewShipmentClient(s.config).QueryBusinessUnit(s)
}

// QueryOrganization queries the "organization" edge of the Shipment entity.
func (s *Shipment) QueryOrganization() *OrganizationQuery {
	return NewShipmentClient(s.config).QueryOrganization(s)
}

// QueryShipmentType queries the "shipment_type" edge of the Shipment entity.
func (s *Shipment) QueryShipmentType() *ShipmentTypeQuery {
	return NewShipmentClient(s.config).QueryShipmentType(s)
}

// QueryServiceType queries the "service_type" edge of the Shipment entity.
func (s *Shipment) QueryServiceType() *ServiceTypeQuery {
	return NewShipmentClient(s.config).QueryServiceType(s)
}

// QueryRevenueCode queries the "revenue_code" edge of the Shipment entity.
func (s *Shipment) QueryRevenueCode() *ServiceTypeQuery {
	return NewShipmentClient(s.config).QueryRevenueCode(s)
}

// QueryOriginLocation queries the "origin_location" edge of the Shipment entity.
func (s *Shipment) QueryOriginLocation() *LocationQuery {
	return NewShipmentClient(s.config).QueryOriginLocation(s)
}

// QueryDestinationLocation queries the "destination_location" edge of the Shipment entity.
func (s *Shipment) QueryDestinationLocation() *LocationQuery {
	return NewShipmentClient(s.config).QueryDestinationLocation(s)
}

// QueryTrailerType queries the "trailer_type" edge of the Shipment entity.
func (s *Shipment) QueryTrailerType() *EquipmentTypeQuery {
	return NewShipmentClient(s.config).QueryTrailerType(s)
}

// QueryTractorType queries the "tractor_type" edge of the Shipment entity.
func (s *Shipment) QueryTractorType() *EquipmentTypeQuery {
	return NewShipmentClient(s.config).QueryTractorType(s)
}

// QueryCreatedByUser queries the "created_by_user" edge of the Shipment entity.
func (s *Shipment) QueryCreatedByUser() *UserQuery {
	return NewShipmentClient(s.config).QueryCreatedByUser(s)
}

// QueryCustomer queries the "customer" edge of the Shipment entity.
func (s *Shipment) QueryCustomer() *CustomerQuery {
	return NewShipmentClient(s.config).QueryCustomer(s)
}

// QueryShipmentDocumentation queries the "shipment_documentation" edge of the Shipment entity.
func (s *Shipment) QueryShipmentDocumentation() *ShipmentDocumentationQuery {
	return NewShipmentClient(s.config).QueryShipmentDocumentation(s)
}

// QueryShipmentComments queries the "shipment_comments" edge of the Shipment entity.
func (s *Shipment) QueryShipmentComments() *ShipmentCommentQuery {
	return NewShipmentClient(s.config).QueryShipmentComments(s)
}

// Update returns a builder for updating this Shipment.
// Note that you need to call Shipment.Unwrap() before calling this method if this Shipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shipment) Update() *ShipmentUpdateOne {
	return NewShipmentClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Shipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shipment) Unwrap() *Shipment {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shipment is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shipment) String() string {
	var builder strings.Builder
	builder.WriteString("Shipment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", s.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", s.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", s.Version))
	builder.WriteString(", ")
	builder.WriteString("pro_number=")
	builder.WriteString(s.ProNumber)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	if v := s.OriginLocationID; v != nil {
		builder.WriteString("origin_location_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("origin_address_line=")
	builder.WriteString(s.OriginAddressLine)
	builder.WriteString(", ")
	if v := s.OriginAppointmentStart; v != nil {
		builder.WriteString("origin_appointment_start=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.OriginAppointmentEnd; v != nil {
		builder.WriteString("origin_appointment_end=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.DestinationLocationID; v != nil {
		builder.WriteString("destination_location_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("destination_address_line=")
	builder.WriteString(s.DestinationAddressLine)
	builder.WriteString(", ")
	if v := s.DestinationAppointmentStart; v != nil {
		builder.WriteString("destination_appointment_start=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.DestinationAppointmentEnd; v != nil {
		builder.WriteString("destination_appointment_end=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("shipment_type_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ShipmentTypeID))
	builder.WriteString(", ")
	if v := s.RevenueCodeID; v != nil {
		builder.WriteString("revenue_code_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.ServiceTypeID; v != nil {
		builder.WriteString("service_type_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("rating_unit=")
	builder.WriteString(fmt.Sprintf("%v", s.RatingUnit))
	builder.WriteString(", ")
	builder.WriteString("mileage=")
	builder.WriteString(fmt.Sprintf("%v", s.Mileage))
	builder.WriteString(", ")
	builder.WriteString("other_charge_amount=")
	builder.WriteString(fmt.Sprintf("%v", s.OtherChargeAmount))
	builder.WriteString(", ")
	builder.WriteString("freight_charge_amount=")
	builder.WriteString(fmt.Sprintf("%v", s.FreightChargeAmount))
	builder.WriteString(", ")
	builder.WriteString("rating_method=")
	builder.WriteString(fmt.Sprintf("%v", s.RatingMethod))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("pieces=")
	builder.WriteString(fmt.Sprintf("%v", s.Pieces))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", s.Weight))
	builder.WriteString(", ")
	builder.WriteString("ready_to_bill=")
	builder.WriteString(fmt.Sprintf("%v", s.ReadyToBill))
	builder.WriteString(", ")
	builder.WriteString("bill_date=")
	builder.WriteString(fmt.Sprintf("%v", s.BillDate))
	builder.WriteString(", ")
	builder.WriteString("ship_date=")
	builder.WriteString(fmt.Sprintf("%v", s.ShipDate))
	builder.WriteString(", ")
	builder.WriteString("billed=")
	builder.WriteString(fmt.Sprintf("%v", s.Billed))
	builder.WriteString(", ")
	builder.WriteString("transferred_to_billing=")
	builder.WriteString(fmt.Sprintf("%v", s.TransferredToBilling))
	builder.WriteString(", ")
	builder.WriteString("transferred_to_billing_date=")
	builder.WriteString(fmt.Sprintf("%v", s.TransferredToBillingDate))
	builder.WriteString(", ")
	builder.WriteString("total_charge_amount=")
	builder.WriteString(fmt.Sprintf("%v", s.TotalChargeAmount))
	builder.WriteString(", ")
	if v := s.TrailerTypeID; v != nil {
		builder.WriteString("trailer_type_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.TractorTypeID; v != nil {
		builder.WriteString("tractor_type_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("temperature_min=")
	builder.WriteString(fmt.Sprintf("%v", s.TemperatureMin))
	builder.WriteString(", ")
	builder.WriteString("temperature_max=")
	builder.WriteString(fmt.Sprintf("%v", s.TemperatureMax))
	builder.WriteString(", ")
	builder.WriteString("bill_of_lading_number=")
	builder.WriteString(s.BillOfLadingNumber)
	builder.WriteString(", ")
	builder.WriteString("consignee_reference_number=")
	builder.WriteString(s.ConsigneeReferenceNumber)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(s.Comment)
	builder.WriteString(", ")
	builder.WriteString("voided_comment=")
	builder.WriteString(s.VoidedComment)
	builder.WriteString(", ")
	builder.WriteString("auto_rated=")
	builder.WriteString(fmt.Sprintf("%v", s.AutoRated))
	builder.WriteString(", ")
	builder.WriteString("current_suffix=")
	builder.WriteString(s.CurrentSuffix)
	builder.WriteString(", ")
	builder.WriteString("entry_method=")
	builder.WriteString(fmt.Sprintf("%v", s.EntryMethod))
	builder.WriteString(", ")
	if v := s.CreatedBy; v != nil {
		builder.WriteString("created_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("is_hazardous=")
	builder.WriteString(fmt.Sprintf("%v", s.IsHazardous))
	builder.WriteByte(')')
	return builder.String()
}

// NamedShipmentDocumentation returns the ShipmentDocumentation named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Shipment) NamedShipmentDocumentation(name string) ([]*ShipmentDocumentation, error) {
	if s.Edges.namedShipmentDocumentation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedShipmentDocumentation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Shipment) appendNamedShipmentDocumentation(name string, edges ...*ShipmentDocumentation) {
	if s.Edges.namedShipmentDocumentation == nil {
		s.Edges.namedShipmentDocumentation = make(map[string][]*ShipmentDocumentation)
	}
	if len(edges) == 0 {
		s.Edges.namedShipmentDocumentation[name] = []*ShipmentDocumentation{}
	} else {
		s.Edges.namedShipmentDocumentation[name] = append(s.Edges.namedShipmentDocumentation[name], edges...)
	}
}

// NamedShipmentComments returns the ShipmentComments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Shipment) NamedShipmentComments(name string) ([]*ShipmentComment, error) {
	if s.Edges.namedShipmentComments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedShipmentComments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Shipment) appendNamedShipmentComments(name string, edges ...*ShipmentComment) {
	if s.Edges.namedShipmentComments == nil {
		s.Edges.namedShipmentComments = make(map[string][]*ShipmentComment)
	}
	if len(edges) == 0 {
		s.Edges.namedShipmentComments[name] = []*ShipmentComment{}
	} else {
		s.Edges.namedShipmentComments[name] = append(s.Edges.namedShipmentComments[name], edges...)
	}
}

// Shipments is a parsable slice of Shipment.
type Shipments []*Shipment
