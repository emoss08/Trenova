// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/hazardousmaterial"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// HazardousMaterial is the model entity for the HazardousMaterial schema.
type HazardousMaterial struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Status holds the value of the "status" field.
	Status hazardousmaterial.Status `json:"status" validate:"required,oneof=A I"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// HazardClass holds the value of the "hazard_class" field.
	HazardClass hazardousmaterial.HazardClass `json:"hazardClass" validate:"required"`
	// ErgNumber holds the value of the "erg_number" field.
	ErgNumber string `json:"ergNumber" validate:"omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description" validate:"omitempty"`
	// PackingGroup holds the value of the "packing_group" field.
	PackingGroup string `json:"packingGroup" validate:"omitempty"`
	// ProperShippingName holds the value of the "proper_shipping_name" field.
	ProperShippingName string `json:"properShippingName"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HazardousMaterialQuery when eager-loading is set.
	Edges        HazardousMaterialEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HazardousMaterialEdges holds the relations/edges for other nodes in the graph.
type HazardousMaterialEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HazardousMaterialEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HazardousMaterialEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HazardousMaterial) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hazardousmaterial.FieldStatus, hazardousmaterial.FieldName, hazardousmaterial.FieldHazardClass, hazardousmaterial.FieldErgNumber, hazardousmaterial.FieldDescription, hazardousmaterial.FieldPackingGroup, hazardousmaterial.FieldProperShippingName:
			values[i] = new(sql.NullString)
		case hazardousmaterial.FieldCreatedAt, hazardousmaterial.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case hazardousmaterial.FieldID, hazardousmaterial.FieldBusinessUnitID, hazardousmaterial.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HazardousMaterial fields.
func (hm *HazardousMaterial) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hazardousmaterial.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hm.ID = *value
			}
		case hazardousmaterial.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				hm.BusinessUnitID = *value
			}
		case hazardousmaterial.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				hm.OrganizationID = *value
			}
		case hazardousmaterial.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hm.CreatedAt = value.Time
			}
		case hazardousmaterial.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hm.UpdatedAt = value.Time
			}
		case hazardousmaterial.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				hm.Status = hazardousmaterial.Status(value.String)
			}
		case hazardousmaterial.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				hm.Name = value.String
			}
		case hazardousmaterial.FieldHazardClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hazard_class", values[i])
			} else if value.Valid {
				hm.HazardClass = hazardousmaterial.HazardClass(value.String)
			}
		case hazardousmaterial.FieldErgNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field erg_number", values[i])
			} else if value.Valid {
				hm.ErgNumber = value.String
			}
		case hazardousmaterial.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hm.Description = value.String
			}
		case hazardousmaterial.FieldPackingGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field packing_group", values[i])
			} else if value.Valid {
				hm.PackingGroup = value.String
			}
		case hazardousmaterial.FieldProperShippingName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proper_shipping_name", values[i])
			} else if value.Valid {
				hm.ProperShippingName = value.String
			}
		default:
			hm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HazardousMaterial.
// This includes values selected through modifiers, order, etc.
func (hm *HazardousMaterial) Value(name string) (ent.Value, error) {
	return hm.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the HazardousMaterial entity.
func (hm *HazardousMaterial) QueryBusinessUnit() *BusinessUnitQuery {
	return NewHazardousMaterialClient(hm.config).QueryBusinessUnit(hm)
}

// QueryOrganization queries the "organization" edge of the HazardousMaterial entity.
func (hm *HazardousMaterial) QueryOrganization() *OrganizationQuery {
	return NewHazardousMaterialClient(hm.config).QueryOrganization(hm)
}

// Update returns a builder for updating this HazardousMaterial.
// Note that you need to call HazardousMaterial.Unwrap() before calling this method if this HazardousMaterial
// was returned from a transaction, and the transaction was committed or rolled back.
func (hm *HazardousMaterial) Update() *HazardousMaterialUpdateOne {
	return NewHazardousMaterialClient(hm.config).UpdateOne(hm)
}

// Unwrap unwraps the HazardousMaterial entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hm *HazardousMaterial) Unwrap() *HazardousMaterial {
	_tx, ok := hm.config.driver.(*txDriver)
	if !ok {
		panic("ent: HazardousMaterial is not a transactional entity")
	}
	hm.config.driver = _tx.drv
	return hm
}

// String implements the fmt.Stringer.
func (hm *HazardousMaterial) String() string {
	var builder strings.Builder
	builder.WriteString("HazardousMaterial(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hm.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", hm.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", hm.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", hm.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(hm.Name)
	builder.WriteString(", ")
	builder.WriteString("hazard_class=")
	builder.WriteString(fmt.Sprintf("%v", hm.HazardClass))
	builder.WriteString(", ")
	builder.WriteString("erg_number=")
	builder.WriteString(hm.ErgNumber)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(hm.Description)
	builder.WriteString(", ")
	builder.WriteString("packing_group=")
	builder.WriteString(hm.PackingGroup)
	builder.WriteString(", ")
	builder.WriteString("proper_shipping_name=")
	builder.WriteString(hm.ProperShippingName)
	builder.WriteByte(')')
	return builder.String()
}

// HazardousMaterials is a parsable slice of HazardousMaterial.
type HazardousMaterials []*HazardousMaterial
