// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/dispatchcontrol"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// DispatchControlCreate is the builder for creating a DispatchControl entity.
type DispatchControlCreate struct {
	config
	mutation *DispatchControlMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dcc *DispatchControlCreate) SetCreatedAt(t time.Time) *DispatchControlCreate {
	dcc.mutation.SetCreatedAt(t)
	return dcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableCreatedAt(t *time.Time) *DispatchControlCreate {
	if t != nil {
		dcc.SetCreatedAt(*t)
	}
	return dcc
}

// SetUpdatedAt sets the "updated_at" field.
func (dcc *DispatchControlCreate) SetUpdatedAt(t time.Time) *DispatchControlCreate {
	dcc.mutation.SetUpdatedAt(t)
	return dcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableUpdatedAt(t *time.Time) *DispatchControlCreate {
	if t != nil {
		dcc.SetUpdatedAt(*t)
	}
	return dcc
}

// SetRecordServiceIncident sets the "record_service_incident" field.
func (dcc *DispatchControlCreate) SetRecordServiceIncident(dsi dispatchcontrol.RecordServiceIncident) *DispatchControlCreate {
	dcc.mutation.SetRecordServiceIncident(dsi)
	return dcc
}

// SetNillableRecordServiceIncident sets the "record_service_incident" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableRecordServiceIncident(dsi *dispatchcontrol.RecordServiceIncident) *DispatchControlCreate {
	if dsi != nil {
		dcc.SetRecordServiceIncident(*dsi)
	}
	return dcc
}

// SetDeadheadTarget sets the "deadhead_target" field.
func (dcc *DispatchControlCreate) SetDeadheadTarget(f float64) *DispatchControlCreate {
	dcc.mutation.SetDeadheadTarget(f)
	return dcc
}

// SetNillableDeadheadTarget sets the "deadhead_target" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableDeadheadTarget(f *float64) *DispatchControlCreate {
	if f != nil {
		dcc.SetDeadheadTarget(*f)
	}
	return dcc
}

// SetMaxShipmentWeightLimit sets the "max_shipment_weight_limit" field.
func (dcc *DispatchControlCreate) SetMaxShipmentWeightLimit(i int32) *DispatchControlCreate {
	dcc.mutation.SetMaxShipmentWeightLimit(i)
	return dcc
}

// SetNillableMaxShipmentWeightLimit sets the "max_shipment_weight_limit" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableMaxShipmentWeightLimit(i *int32) *DispatchControlCreate {
	if i != nil {
		dcc.SetMaxShipmentWeightLimit(*i)
	}
	return dcc
}

// SetGracePeriod sets the "grace_period" field.
func (dcc *DispatchControlCreate) SetGracePeriod(u uint8) *DispatchControlCreate {
	dcc.mutation.SetGracePeriod(u)
	return dcc
}

// SetNillableGracePeriod sets the "grace_period" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableGracePeriod(u *uint8) *DispatchControlCreate {
	if u != nil {
		dcc.SetGracePeriod(*u)
	}
	return dcc
}

// SetEnforceWorkerAssign sets the "enforce_worker_assign" field.
func (dcc *DispatchControlCreate) SetEnforceWorkerAssign(b bool) *DispatchControlCreate {
	dcc.mutation.SetEnforceWorkerAssign(b)
	return dcc
}

// SetNillableEnforceWorkerAssign sets the "enforce_worker_assign" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableEnforceWorkerAssign(b *bool) *DispatchControlCreate {
	if b != nil {
		dcc.SetEnforceWorkerAssign(*b)
	}
	return dcc
}

// SetTrailerContinuity sets the "trailer_continuity" field.
func (dcc *DispatchControlCreate) SetTrailerContinuity(b bool) *DispatchControlCreate {
	dcc.mutation.SetTrailerContinuity(b)
	return dcc
}

// SetNillableTrailerContinuity sets the "trailer_continuity" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableTrailerContinuity(b *bool) *DispatchControlCreate {
	if b != nil {
		dcc.SetTrailerContinuity(*b)
	}
	return dcc
}

// SetDupeTrailerCheck sets the "dupe_trailer_check" field.
func (dcc *DispatchControlCreate) SetDupeTrailerCheck(b bool) *DispatchControlCreate {
	dcc.mutation.SetDupeTrailerCheck(b)
	return dcc
}

// SetNillableDupeTrailerCheck sets the "dupe_trailer_check" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableDupeTrailerCheck(b *bool) *DispatchControlCreate {
	if b != nil {
		dcc.SetDupeTrailerCheck(*b)
	}
	return dcc
}

// SetMaintenanceCompliance sets the "maintenance_compliance" field.
func (dcc *DispatchControlCreate) SetMaintenanceCompliance(b bool) *DispatchControlCreate {
	dcc.mutation.SetMaintenanceCompliance(b)
	return dcc
}

// SetNillableMaintenanceCompliance sets the "maintenance_compliance" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableMaintenanceCompliance(b *bool) *DispatchControlCreate {
	if b != nil {
		dcc.SetMaintenanceCompliance(*b)
	}
	return dcc
}

// SetRegulatoryCheck sets the "regulatory_check" field.
func (dcc *DispatchControlCreate) SetRegulatoryCheck(b bool) *DispatchControlCreate {
	dcc.mutation.SetRegulatoryCheck(b)
	return dcc
}

// SetNillableRegulatoryCheck sets the "regulatory_check" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableRegulatoryCheck(b *bool) *DispatchControlCreate {
	if b != nil {
		dcc.SetRegulatoryCheck(*b)
	}
	return dcc
}

// SetPrevShipmentOnHold sets the "prev_shipment_on_hold" field.
func (dcc *DispatchControlCreate) SetPrevShipmentOnHold(b bool) *DispatchControlCreate {
	dcc.mutation.SetPrevShipmentOnHold(b)
	return dcc
}

// SetNillablePrevShipmentOnHold sets the "prev_shipment_on_hold" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillablePrevShipmentOnHold(b *bool) *DispatchControlCreate {
	if b != nil {
		dcc.SetPrevShipmentOnHold(*b)
	}
	return dcc
}

// SetWorkerTimeAwayRestriction sets the "worker_time_away_restriction" field.
func (dcc *DispatchControlCreate) SetWorkerTimeAwayRestriction(b bool) *DispatchControlCreate {
	dcc.mutation.SetWorkerTimeAwayRestriction(b)
	return dcc
}

// SetNillableWorkerTimeAwayRestriction sets the "worker_time_away_restriction" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableWorkerTimeAwayRestriction(b *bool) *DispatchControlCreate {
	if b != nil {
		dcc.SetWorkerTimeAwayRestriction(*b)
	}
	return dcc
}

// SetTractorWorkerFleetConstraint sets the "tractor_worker_fleet_constraint" field.
func (dcc *DispatchControlCreate) SetTractorWorkerFleetConstraint(b bool) *DispatchControlCreate {
	dcc.mutation.SetTractorWorkerFleetConstraint(b)
	return dcc
}

// SetNillableTractorWorkerFleetConstraint sets the "tractor_worker_fleet_constraint" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableTractorWorkerFleetConstraint(b *bool) *DispatchControlCreate {
	if b != nil {
		dcc.SetTractorWorkerFleetConstraint(*b)
	}
	return dcc
}

// SetID sets the "id" field.
func (dcc *DispatchControlCreate) SetID(u uuid.UUID) *DispatchControlCreate {
	dcc.mutation.SetID(u)
	return dcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dcc *DispatchControlCreate) SetNillableID(u *uuid.UUID) *DispatchControlCreate {
	if u != nil {
		dcc.SetID(*u)
	}
	return dcc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (dcc *DispatchControlCreate) SetOrganizationID(id uuid.UUID) *DispatchControlCreate {
	dcc.mutation.SetOrganizationID(id)
	return dcc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (dcc *DispatchControlCreate) SetOrganization(o *Organization) *DispatchControlCreate {
	return dcc.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (dcc *DispatchControlCreate) SetBusinessUnitID(id uuid.UUID) *DispatchControlCreate {
	dcc.mutation.SetBusinessUnitID(id)
	return dcc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (dcc *DispatchControlCreate) SetBusinessUnit(b *BusinessUnit) *DispatchControlCreate {
	return dcc.SetBusinessUnitID(b.ID)
}

// Mutation returns the DispatchControlMutation object of the builder.
func (dcc *DispatchControlCreate) Mutation() *DispatchControlMutation {
	return dcc.mutation
}

// Save creates the DispatchControl in the database.
func (dcc *DispatchControlCreate) Save(ctx context.Context) (*DispatchControl, error) {
	dcc.defaults()
	return withHooks(ctx, dcc.sqlSave, dcc.mutation, dcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DispatchControlCreate) SaveX(ctx context.Context) *DispatchControl {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DispatchControlCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DispatchControlCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcc *DispatchControlCreate) defaults() {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		v := dispatchcontrol.DefaultCreatedAt()
		dcc.mutation.SetCreatedAt(v)
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		v := dispatchcontrol.DefaultUpdatedAt()
		dcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dcc.mutation.RecordServiceIncident(); !ok {
		v := dispatchcontrol.DefaultRecordServiceIncident
		dcc.mutation.SetRecordServiceIncident(v)
	}
	if _, ok := dcc.mutation.DeadheadTarget(); !ok {
		v := dispatchcontrol.DefaultDeadheadTarget
		dcc.mutation.SetDeadheadTarget(v)
	}
	if _, ok := dcc.mutation.MaxShipmentWeightLimit(); !ok {
		v := dispatchcontrol.DefaultMaxShipmentWeightLimit
		dcc.mutation.SetMaxShipmentWeightLimit(v)
	}
	if _, ok := dcc.mutation.GracePeriod(); !ok {
		v := dispatchcontrol.DefaultGracePeriod
		dcc.mutation.SetGracePeriod(v)
	}
	if _, ok := dcc.mutation.EnforceWorkerAssign(); !ok {
		v := dispatchcontrol.DefaultEnforceWorkerAssign
		dcc.mutation.SetEnforceWorkerAssign(v)
	}
	if _, ok := dcc.mutation.TrailerContinuity(); !ok {
		v := dispatchcontrol.DefaultTrailerContinuity
		dcc.mutation.SetTrailerContinuity(v)
	}
	if _, ok := dcc.mutation.DupeTrailerCheck(); !ok {
		v := dispatchcontrol.DefaultDupeTrailerCheck
		dcc.mutation.SetDupeTrailerCheck(v)
	}
	if _, ok := dcc.mutation.MaintenanceCompliance(); !ok {
		v := dispatchcontrol.DefaultMaintenanceCompliance
		dcc.mutation.SetMaintenanceCompliance(v)
	}
	if _, ok := dcc.mutation.RegulatoryCheck(); !ok {
		v := dispatchcontrol.DefaultRegulatoryCheck
		dcc.mutation.SetRegulatoryCheck(v)
	}
	if _, ok := dcc.mutation.PrevShipmentOnHold(); !ok {
		v := dispatchcontrol.DefaultPrevShipmentOnHold
		dcc.mutation.SetPrevShipmentOnHold(v)
	}
	if _, ok := dcc.mutation.WorkerTimeAwayRestriction(); !ok {
		v := dispatchcontrol.DefaultWorkerTimeAwayRestriction
		dcc.mutation.SetWorkerTimeAwayRestriction(v)
	}
	if _, ok := dcc.mutation.TractorWorkerFleetConstraint(); !ok {
		v := dispatchcontrol.DefaultTractorWorkerFleetConstraint
		dcc.mutation.SetTractorWorkerFleetConstraint(v)
	}
	if _, ok := dcc.mutation.ID(); !ok {
		v := dispatchcontrol.DefaultID()
		dcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DispatchControlCreate) check() error {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DispatchControl.created_at"`)}
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DispatchControl.updated_at"`)}
	}
	if _, ok := dcc.mutation.RecordServiceIncident(); !ok {
		return &ValidationError{Name: "record_service_incident", err: errors.New(`ent: missing required field "DispatchControl.record_service_incident"`)}
	}
	if v, ok := dcc.mutation.RecordServiceIncident(); ok {
		if err := dispatchcontrol.RecordServiceIncidentValidator(v); err != nil {
			return &ValidationError{Name: "record_service_incident", err: fmt.Errorf(`ent: validator failed for field "DispatchControl.record_service_incident": %w`, err)}
		}
	}
	if _, ok := dcc.mutation.DeadheadTarget(); !ok {
		return &ValidationError{Name: "deadhead_target", err: errors.New(`ent: missing required field "DispatchControl.deadhead_target"`)}
	}
	if _, ok := dcc.mutation.MaxShipmentWeightLimit(); !ok {
		return &ValidationError{Name: "max_shipment_weight_limit", err: errors.New(`ent: missing required field "DispatchControl.max_shipment_weight_limit"`)}
	}
	if v, ok := dcc.mutation.MaxShipmentWeightLimit(); ok {
		if err := dispatchcontrol.MaxShipmentWeightLimitValidator(v); err != nil {
			return &ValidationError{Name: "max_shipment_weight_limit", err: fmt.Errorf(`ent: validator failed for field "DispatchControl.max_shipment_weight_limit": %w`, err)}
		}
	}
	if _, ok := dcc.mutation.GracePeriod(); !ok {
		return &ValidationError{Name: "grace_period", err: errors.New(`ent: missing required field "DispatchControl.grace_period"`)}
	}
	if _, ok := dcc.mutation.EnforceWorkerAssign(); !ok {
		return &ValidationError{Name: "enforce_worker_assign", err: errors.New(`ent: missing required field "DispatchControl.enforce_worker_assign"`)}
	}
	if _, ok := dcc.mutation.TrailerContinuity(); !ok {
		return &ValidationError{Name: "trailer_continuity", err: errors.New(`ent: missing required field "DispatchControl.trailer_continuity"`)}
	}
	if _, ok := dcc.mutation.DupeTrailerCheck(); !ok {
		return &ValidationError{Name: "dupe_trailer_check", err: errors.New(`ent: missing required field "DispatchControl.dupe_trailer_check"`)}
	}
	if _, ok := dcc.mutation.MaintenanceCompliance(); !ok {
		return &ValidationError{Name: "maintenance_compliance", err: errors.New(`ent: missing required field "DispatchControl.maintenance_compliance"`)}
	}
	if _, ok := dcc.mutation.RegulatoryCheck(); !ok {
		return &ValidationError{Name: "regulatory_check", err: errors.New(`ent: missing required field "DispatchControl.regulatory_check"`)}
	}
	if _, ok := dcc.mutation.PrevShipmentOnHold(); !ok {
		return &ValidationError{Name: "prev_shipment_on_hold", err: errors.New(`ent: missing required field "DispatchControl.prev_shipment_on_hold"`)}
	}
	if _, ok := dcc.mutation.WorkerTimeAwayRestriction(); !ok {
		return &ValidationError{Name: "worker_time_away_restriction", err: errors.New(`ent: missing required field "DispatchControl.worker_time_away_restriction"`)}
	}
	if _, ok := dcc.mutation.TractorWorkerFleetConstraint(); !ok {
		return &ValidationError{Name: "tractor_worker_fleet_constraint", err: errors.New(`ent: missing required field "DispatchControl.tractor_worker_fleet_constraint"`)}
	}
	if _, ok := dcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "DispatchControl.organization"`)}
	}
	if _, ok := dcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "DispatchControl.business_unit"`)}
	}
	return nil
}

func (dcc *DispatchControlCreate) sqlSave(ctx context.Context) (*DispatchControl, error) {
	if err := dcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dcc.mutation.id = &_node.ID
	dcc.mutation.done = true
	return _node, nil
}

func (dcc *DispatchControlCreate) createSpec() (*DispatchControl, *sqlgraph.CreateSpec) {
	var (
		_node = &DispatchControl{config: dcc.config}
		_spec = sqlgraph.NewCreateSpec(dispatchcontrol.Table, sqlgraph.NewFieldSpec(dispatchcontrol.FieldID, field.TypeUUID))
	)
	if id, ok := dcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dcc.mutation.CreatedAt(); ok {
		_spec.SetField(dispatchcontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dcc.mutation.UpdatedAt(); ok {
		_spec.SetField(dispatchcontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dcc.mutation.RecordServiceIncident(); ok {
		_spec.SetField(dispatchcontrol.FieldRecordServiceIncident, field.TypeEnum, value)
		_node.RecordServiceIncident = value
	}
	if value, ok := dcc.mutation.DeadheadTarget(); ok {
		_spec.SetField(dispatchcontrol.FieldDeadheadTarget, field.TypeFloat64, value)
		_node.DeadheadTarget = value
	}
	if value, ok := dcc.mutation.MaxShipmentWeightLimit(); ok {
		_spec.SetField(dispatchcontrol.FieldMaxShipmentWeightLimit, field.TypeInt32, value)
		_node.MaxShipmentWeightLimit = value
	}
	if value, ok := dcc.mutation.GracePeriod(); ok {
		_spec.SetField(dispatchcontrol.FieldGracePeriod, field.TypeUint8, value)
		_node.GracePeriod = value
	}
	if value, ok := dcc.mutation.EnforceWorkerAssign(); ok {
		_spec.SetField(dispatchcontrol.FieldEnforceWorkerAssign, field.TypeBool, value)
		_node.EnforceWorkerAssign = value
	}
	if value, ok := dcc.mutation.TrailerContinuity(); ok {
		_spec.SetField(dispatchcontrol.FieldTrailerContinuity, field.TypeBool, value)
		_node.TrailerContinuity = value
	}
	if value, ok := dcc.mutation.DupeTrailerCheck(); ok {
		_spec.SetField(dispatchcontrol.FieldDupeTrailerCheck, field.TypeBool, value)
		_node.DupeTrailerCheck = value
	}
	if value, ok := dcc.mutation.MaintenanceCompliance(); ok {
		_spec.SetField(dispatchcontrol.FieldMaintenanceCompliance, field.TypeBool, value)
		_node.MaintenanceCompliance = value
	}
	if value, ok := dcc.mutation.RegulatoryCheck(); ok {
		_spec.SetField(dispatchcontrol.FieldRegulatoryCheck, field.TypeBool, value)
		_node.RegulatoryCheck = value
	}
	if value, ok := dcc.mutation.PrevShipmentOnHold(); ok {
		_spec.SetField(dispatchcontrol.FieldPrevShipmentOnHold, field.TypeBool, value)
		_node.PrevShipmentOnHold = value
	}
	if value, ok := dcc.mutation.WorkerTimeAwayRestriction(); ok {
		_spec.SetField(dispatchcontrol.FieldWorkerTimeAwayRestriction, field.TypeBool, value)
		_node.WorkerTimeAwayRestriction = value
	}
	if value, ok := dcc.mutation.TractorWorkerFleetConstraint(); ok {
		_spec.SetField(dispatchcontrol.FieldTractorWorkerFleetConstraint, field.TypeBool, value)
		_node.TractorWorkerFleetConstraint = value
	}
	if nodes := dcc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dispatchcontrol.OrganizationTable,
			Columns: []string{dispatchcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dispatchcontrol.BusinessUnitTable,
			Columns: []string{dispatchcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_unit_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DispatchControlCreateBulk is the builder for creating many DispatchControl entities in bulk.
type DispatchControlCreateBulk struct {
	config
	err      error
	builders []*DispatchControlCreate
}

// Save creates the DispatchControl entities in the database.
func (dccb *DispatchControlCreateBulk) Save(ctx context.Context) ([]*DispatchControl, error) {
	if dccb.err != nil {
		return nil, dccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DispatchControl, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DispatchControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DispatchControlCreateBulk) SaveX(ctx context.Context) []*DispatchControl {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DispatchControlCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DispatchControlCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}
