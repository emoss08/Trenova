// Code generated by ent, DO NOT EDIT.

package generalledgeraccount

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const (
	// Label holds the string label denoting the generalledgeraccount type in the database.
	Label = "general_ledger_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// FieldAccountType holds the string denoting the account_type field in the database.
	FieldAccountType = "account_type"
	// FieldCashFlowType holds the string denoting the cash_flow_type field in the database.
	FieldCashFlowType = "cash_flow_type"
	// FieldAccountSubType holds the string denoting the account_sub_type field in the database.
	FieldAccountSubType = "account_sub_type"
	// FieldAccountClass holds the string denoting the account_class field in the database.
	FieldAccountClass = "account_class"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldInterestRate holds the string denoting the interest_rate field in the database.
	FieldInterestRate = "interest_rate"
	// FieldDateOpened holds the string denoting the date_opened field in the database.
	FieldDateOpened = "date_opened"
	// FieldDateClosed holds the string denoting the date_closed field in the database.
	FieldDateClosed = "date_closed"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldIsTaxRelevant holds the string denoting the is_tax_relevant field in the database.
	FieldIsTaxRelevant = "is_tax_relevant"
	// FieldIsReconciled holds the string denoting the is_reconciled field in the database.
	FieldIsReconciled = "is_reconciled"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// Table holds the table name of the generalledgeraccount in the database.
	Table = "general_ledger_accounts"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "general_ledger_accounts"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "general_ledger_accounts"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "general_ledger_account_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
)

// Columns holds all SQL columns for generalledgeraccount fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVersion,
	FieldStatus,
	FieldAccountNumber,
	FieldAccountType,
	FieldCashFlowType,
	FieldAccountSubType,
	FieldAccountClass,
	FieldBalance,
	FieldInterestRate,
	FieldDateOpened,
	FieldDateClosed,
	FieldNotes,
	FieldIsTaxRelevant,
	FieldIsReconciled,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"general_ledger_account_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// AccountNumberValidator is a validator for the "account_number" field. It is called by the builders before save.
	AccountNumberValidator func(string) error
	// DefaultDateOpened holds the default value on creation for the "date_opened" field.
	DefaultDateOpened *pgtype.Date
	// DefaultIsTaxRelevant holds the default value on creation for the "is_tax_relevant" field.
	DefaultIsTaxRelevant bool
	// DefaultIsReconciled holds the default value on creation for the "is_reconciled" field.
	DefaultIsReconciled bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusA is the default value of the Status enum.
const DefaultStatus = StatusA

// Status values.
const (
	StatusA Status = "A"
	StatusI Status = "I"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusA, StatusI:
		return nil
	default:
		return fmt.Errorf("generalledgeraccount: invalid enum value for status field: %q", s)
	}
}

// AccountType defines the type for the "account_type" enum field.
type AccountType string

// AccountType values.
const (
	AccountTypeAsset     AccountType = "Asset"
	AccountTypeLiability AccountType = "Liability"
	AccountTypeEquity    AccountType = "Equity"
	AccountTypeRevenue   AccountType = "Revenue"
	AccountTypeExpense   AccountType = "Expense"
)

func (at AccountType) String() string {
	return string(at)
}

// AccountTypeValidator is a validator for the "account_type" field enum values. It is called by the builders before save.
func AccountTypeValidator(at AccountType) error {
	switch at {
	case AccountTypeAsset, AccountTypeLiability, AccountTypeEquity, AccountTypeRevenue, AccountTypeExpense:
		return nil
	default:
		return fmt.Errorf("generalledgeraccount: invalid enum value for account_type field: %q", at)
	}
}

// OrderOption defines the ordering options for the GeneralLedgerAccount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAccountNumber orders the results by the account_number field.
func ByAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumber, opts...).ToFunc()
}

// ByAccountType orders the results by the account_type field.
func ByAccountType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountType, opts...).ToFunc()
}

// ByCashFlowType orders the results by the cash_flow_type field.
func ByCashFlowType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCashFlowType, opts...).ToFunc()
}

// ByAccountSubType orders the results by the account_sub_type field.
func ByAccountSubType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountSubType, opts...).ToFunc()
}

// ByAccountClass orders the results by the account_class field.
func ByAccountClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountClass, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByInterestRate orders the results by the interest_rate field.
func ByInterestRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterestRate, opts...).ToFunc()
}

// ByDateOpened orders the results by the date_opened field.
func ByDateOpened(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOpened, opts...).ToFunc()
}

// ByDateClosed orders the results by the date_closed field.
func ByDateClosed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateClosed, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByIsTaxRelevant orders the results by the is_tax_relevant field.
func ByIsTaxRelevant(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTaxRelevant, opts...).ToFunc()
}

// ByIsReconciled orders the results by the is_reconciled field.
func ByIsReconciled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsReconciled, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
	)
}
