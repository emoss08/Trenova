// Code generated by ent, DO NOT EDIT.

package generalledgeraccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldVersion, v))
}

// AccountNumber applies equality check predicate on the "account_number" field. It's identical to AccountNumberEQ.
func AccountNumber(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldAccountNumber, v))
}

// CashFlowType applies equality check predicate on the "cash_flow_type" field. It's identical to CashFlowTypeEQ.
func CashFlowType(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldCashFlowType, v))
}

// AccountSubType applies equality check predicate on the "account_sub_type" field. It's identical to AccountSubTypeEQ.
func AccountSubType(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldAccountSubType, v))
}

// AccountClass applies equality check predicate on the "account_class" field. It's identical to AccountClassEQ.
func AccountClass(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldAccountClass, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldBalance, v))
}

// InterestRate applies equality check predicate on the "interest_rate" field. It's identical to InterestRateEQ.
func InterestRate(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldInterestRate, v))
}

// DateOpened applies equality check predicate on the "date_opened" field. It's identical to DateOpenedEQ.
func DateOpened(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldDateOpened, v))
}

// DateClosed applies equality check predicate on the "date_closed" field. It's identical to DateClosedEQ.
func DateClosed(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldDateClosed, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldNotes, v))
}

// IsTaxRelevant applies equality check predicate on the "is_tax_relevant" field. It's identical to IsTaxRelevantEQ.
func IsTaxRelevant(v bool) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldIsTaxRelevant, v))
}

// IsReconciled applies equality check predicate on the "is_reconciled" field. It's identical to IsReconciledEQ.
func IsReconciled(v bool) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldIsReconciled, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldVersion, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldStatus, vs...))
}

// AccountNumberEQ applies the EQ predicate on the "account_number" field.
func AccountNumberEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldAccountNumber, v))
}

// AccountNumberNEQ applies the NEQ predicate on the "account_number" field.
func AccountNumberNEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldAccountNumber, v))
}

// AccountNumberIn applies the In predicate on the "account_number" field.
func AccountNumberIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldAccountNumber, vs...))
}

// AccountNumberNotIn applies the NotIn predicate on the "account_number" field.
func AccountNumberNotIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldAccountNumber, vs...))
}

// AccountNumberGT applies the GT predicate on the "account_number" field.
func AccountNumberGT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldAccountNumber, v))
}

// AccountNumberGTE applies the GTE predicate on the "account_number" field.
func AccountNumberGTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldAccountNumber, v))
}

// AccountNumberLT applies the LT predicate on the "account_number" field.
func AccountNumberLT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldAccountNumber, v))
}

// AccountNumberLTE applies the LTE predicate on the "account_number" field.
func AccountNumberLTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldAccountNumber, v))
}

// AccountNumberContains applies the Contains predicate on the "account_number" field.
func AccountNumberContains(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContains(FieldAccountNumber, v))
}

// AccountNumberHasPrefix applies the HasPrefix predicate on the "account_number" field.
func AccountNumberHasPrefix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasPrefix(FieldAccountNumber, v))
}

// AccountNumberHasSuffix applies the HasSuffix predicate on the "account_number" field.
func AccountNumberHasSuffix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasSuffix(FieldAccountNumber, v))
}

// AccountNumberEqualFold applies the EqualFold predicate on the "account_number" field.
func AccountNumberEqualFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEqualFold(FieldAccountNumber, v))
}

// AccountNumberContainsFold applies the ContainsFold predicate on the "account_number" field.
func AccountNumberContainsFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContainsFold(FieldAccountNumber, v))
}

// AccountTypeEQ applies the EQ predicate on the "account_type" field.
func AccountTypeEQ(v AccountType) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldAccountType, v))
}

// AccountTypeNEQ applies the NEQ predicate on the "account_type" field.
func AccountTypeNEQ(v AccountType) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldAccountType, v))
}

// AccountTypeIn applies the In predicate on the "account_type" field.
func AccountTypeIn(vs ...AccountType) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldAccountType, vs...))
}

// AccountTypeNotIn applies the NotIn predicate on the "account_type" field.
func AccountTypeNotIn(vs ...AccountType) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldAccountType, vs...))
}

// CashFlowTypeEQ applies the EQ predicate on the "cash_flow_type" field.
func CashFlowTypeEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldCashFlowType, v))
}

// CashFlowTypeNEQ applies the NEQ predicate on the "cash_flow_type" field.
func CashFlowTypeNEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldCashFlowType, v))
}

// CashFlowTypeIn applies the In predicate on the "cash_flow_type" field.
func CashFlowTypeIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldCashFlowType, vs...))
}

// CashFlowTypeNotIn applies the NotIn predicate on the "cash_flow_type" field.
func CashFlowTypeNotIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldCashFlowType, vs...))
}

// CashFlowTypeGT applies the GT predicate on the "cash_flow_type" field.
func CashFlowTypeGT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldCashFlowType, v))
}

// CashFlowTypeGTE applies the GTE predicate on the "cash_flow_type" field.
func CashFlowTypeGTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldCashFlowType, v))
}

// CashFlowTypeLT applies the LT predicate on the "cash_flow_type" field.
func CashFlowTypeLT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldCashFlowType, v))
}

// CashFlowTypeLTE applies the LTE predicate on the "cash_flow_type" field.
func CashFlowTypeLTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldCashFlowType, v))
}

// CashFlowTypeContains applies the Contains predicate on the "cash_flow_type" field.
func CashFlowTypeContains(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContains(FieldCashFlowType, v))
}

// CashFlowTypeHasPrefix applies the HasPrefix predicate on the "cash_flow_type" field.
func CashFlowTypeHasPrefix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasPrefix(FieldCashFlowType, v))
}

// CashFlowTypeHasSuffix applies the HasSuffix predicate on the "cash_flow_type" field.
func CashFlowTypeHasSuffix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasSuffix(FieldCashFlowType, v))
}

// CashFlowTypeIsNil applies the IsNil predicate on the "cash_flow_type" field.
func CashFlowTypeIsNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIsNull(FieldCashFlowType))
}

// CashFlowTypeNotNil applies the NotNil predicate on the "cash_flow_type" field.
func CashFlowTypeNotNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotNull(FieldCashFlowType))
}

// CashFlowTypeEqualFold applies the EqualFold predicate on the "cash_flow_type" field.
func CashFlowTypeEqualFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEqualFold(FieldCashFlowType, v))
}

// CashFlowTypeContainsFold applies the ContainsFold predicate on the "cash_flow_type" field.
func CashFlowTypeContainsFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContainsFold(FieldCashFlowType, v))
}

// AccountSubTypeEQ applies the EQ predicate on the "account_sub_type" field.
func AccountSubTypeEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldAccountSubType, v))
}

// AccountSubTypeNEQ applies the NEQ predicate on the "account_sub_type" field.
func AccountSubTypeNEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldAccountSubType, v))
}

// AccountSubTypeIn applies the In predicate on the "account_sub_type" field.
func AccountSubTypeIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldAccountSubType, vs...))
}

// AccountSubTypeNotIn applies the NotIn predicate on the "account_sub_type" field.
func AccountSubTypeNotIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldAccountSubType, vs...))
}

// AccountSubTypeGT applies the GT predicate on the "account_sub_type" field.
func AccountSubTypeGT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldAccountSubType, v))
}

// AccountSubTypeGTE applies the GTE predicate on the "account_sub_type" field.
func AccountSubTypeGTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldAccountSubType, v))
}

// AccountSubTypeLT applies the LT predicate on the "account_sub_type" field.
func AccountSubTypeLT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldAccountSubType, v))
}

// AccountSubTypeLTE applies the LTE predicate on the "account_sub_type" field.
func AccountSubTypeLTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldAccountSubType, v))
}

// AccountSubTypeContains applies the Contains predicate on the "account_sub_type" field.
func AccountSubTypeContains(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContains(FieldAccountSubType, v))
}

// AccountSubTypeHasPrefix applies the HasPrefix predicate on the "account_sub_type" field.
func AccountSubTypeHasPrefix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasPrefix(FieldAccountSubType, v))
}

// AccountSubTypeHasSuffix applies the HasSuffix predicate on the "account_sub_type" field.
func AccountSubTypeHasSuffix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasSuffix(FieldAccountSubType, v))
}

// AccountSubTypeIsNil applies the IsNil predicate on the "account_sub_type" field.
func AccountSubTypeIsNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIsNull(FieldAccountSubType))
}

// AccountSubTypeNotNil applies the NotNil predicate on the "account_sub_type" field.
func AccountSubTypeNotNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotNull(FieldAccountSubType))
}

// AccountSubTypeEqualFold applies the EqualFold predicate on the "account_sub_type" field.
func AccountSubTypeEqualFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEqualFold(FieldAccountSubType, v))
}

// AccountSubTypeContainsFold applies the ContainsFold predicate on the "account_sub_type" field.
func AccountSubTypeContainsFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContainsFold(FieldAccountSubType, v))
}

// AccountClassEQ applies the EQ predicate on the "account_class" field.
func AccountClassEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldAccountClass, v))
}

// AccountClassNEQ applies the NEQ predicate on the "account_class" field.
func AccountClassNEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldAccountClass, v))
}

// AccountClassIn applies the In predicate on the "account_class" field.
func AccountClassIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldAccountClass, vs...))
}

// AccountClassNotIn applies the NotIn predicate on the "account_class" field.
func AccountClassNotIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldAccountClass, vs...))
}

// AccountClassGT applies the GT predicate on the "account_class" field.
func AccountClassGT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldAccountClass, v))
}

// AccountClassGTE applies the GTE predicate on the "account_class" field.
func AccountClassGTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldAccountClass, v))
}

// AccountClassLT applies the LT predicate on the "account_class" field.
func AccountClassLT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldAccountClass, v))
}

// AccountClassLTE applies the LTE predicate on the "account_class" field.
func AccountClassLTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldAccountClass, v))
}

// AccountClassContains applies the Contains predicate on the "account_class" field.
func AccountClassContains(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContains(FieldAccountClass, v))
}

// AccountClassHasPrefix applies the HasPrefix predicate on the "account_class" field.
func AccountClassHasPrefix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasPrefix(FieldAccountClass, v))
}

// AccountClassHasSuffix applies the HasSuffix predicate on the "account_class" field.
func AccountClassHasSuffix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasSuffix(FieldAccountClass, v))
}

// AccountClassIsNil applies the IsNil predicate on the "account_class" field.
func AccountClassIsNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIsNull(FieldAccountClass))
}

// AccountClassNotNil applies the NotNil predicate on the "account_class" field.
func AccountClassNotNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotNull(FieldAccountClass))
}

// AccountClassEqualFold applies the EqualFold predicate on the "account_class" field.
func AccountClassEqualFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEqualFold(FieldAccountClass, v))
}

// AccountClassContainsFold applies the ContainsFold predicate on the "account_class" field.
func AccountClassContainsFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContainsFold(FieldAccountClass, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldBalance, v))
}

// BalanceIsNil applies the IsNil predicate on the "balance" field.
func BalanceIsNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIsNull(FieldBalance))
}

// BalanceNotNil applies the NotNil predicate on the "balance" field.
func BalanceNotNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotNull(FieldBalance))
}

// InterestRateEQ applies the EQ predicate on the "interest_rate" field.
func InterestRateEQ(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldInterestRate, v))
}

// InterestRateNEQ applies the NEQ predicate on the "interest_rate" field.
func InterestRateNEQ(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldInterestRate, v))
}

// InterestRateIn applies the In predicate on the "interest_rate" field.
func InterestRateIn(vs ...float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldInterestRate, vs...))
}

// InterestRateNotIn applies the NotIn predicate on the "interest_rate" field.
func InterestRateNotIn(vs ...float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldInterestRate, vs...))
}

// InterestRateGT applies the GT predicate on the "interest_rate" field.
func InterestRateGT(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldInterestRate, v))
}

// InterestRateGTE applies the GTE predicate on the "interest_rate" field.
func InterestRateGTE(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldInterestRate, v))
}

// InterestRateLT applies the LT predicate on the "interest_rate" field.
func InterestRateLT(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldInterestRate, v))
}

// InterestRateLTE applies the LTE predicate on the "interest_rate" field.
func InterestRateLTE(v float64) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldInterestRate, v))
}

// InterestRateIsNil applies the IsNil predicate on the "interest_rate" field.
func InterestRateIsNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIsNull(FieldInterestRate))
}

// InterestRateNotNil applies the NotNil predicate on the "interest_rate" field.
func InterestRateNotNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotNull(FieldInterestRate))
}

// DateOpenedEQ applies the EQ predicate on the "date_opened" field.
func DateOpenedEQ(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldDateOpened, v))
}

// DateOpenedNEQ applies the NEQ predicate on the "date_opened" field.
func DateOpenedNEQ(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldDateOpened, v))
}

// DateOpenedIn applies the In predicate on the "date_opened" field.
func DateOpenedIn(vs ...*pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldDateOpened, vs...))
}

// DateOpenedNotIn applies the NotIn predicate on the "date_opened" field.
func DateOpenedNotIn(vs ...*pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldDateOpened, vs...))
}

// DateOpenedGT applies the GT predicate on the "date_opened" field.
func DateOpenedGT(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldDateOpened, v))
}

// DateOpenedGTE applies the GTE predicate on the "date_opened" field.
func DateOpenedGTE(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldDateOpened, v))
}

// DateOpenedLT applies the LT predicate on the "date_opened" field.
func DateOpenedLT(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldDateOpened, v))
}

// DateOpenedLTE applies the LTE predicate on the "date_opened" field.
func DateOpenedLTE(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldDateOpened, v))
}

// DateClosedEQ applies the EQ predicate on the "date_closed" field.
func DateClosedEQ(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldDateClosed, v))
}

// DateClosedNEQ applies the NEQ predicate on the "date_closed" field.
func DateClosedNEQ(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldDateClosed, v))
}

// DateClosedIn applies the In predicate on the "date_closed" field.
func DateClosedIn(vs ...*pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldDateClosed, vs...))
}

// DateClosedNotIn applies the NotIn predicate on the "date_closed" field.
func DateClosedNotIn(vs ...*pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldDateClosed, vs...))
}

// DateClosedGT applies the GT predicate on the "date_closed" field.
func DateClosedGT(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldDateClosed, v))
}

// DateClosedGTE applies the GTE predicate on the "date_closed" field.
func DateClosedGTE(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldDateClosed, v))
}

// DateClosedLT applies the LT predicate on the "date_closed" field.
func DateClosedLT(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldDateClosed, v))
}

// DateClosedLTE applies the LTE predicate on the "date_closed" field.
func DateClosedLTE(v *pgtype.Date) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldDateClosed, v))
}

// DateClosedIsNil applies the IsNil predicate on the "date_closed" field.
func DateClosedIsNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIsNull(FieldDateClosed))
}

// DateClosedNotNil applies the NotNil predicate on the "date_closed" field.
func DateClosedNotNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotNull(FieldDateClosed))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldContainsFold(FieldNotes, v))
}

// IsTaxRelevantEQ applies the EQ predicate on the "is_tax_relevant" field.
func IsTaxRelevantEQ(v bool) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldIsTaxRelevant, v))
}

// IsTaxRelevantNEQ applies the NEQ predicate on the "is_tax_relevant" field.
func IsTaxRelevantNEQ(v bool) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldIsTaxRelevant, v))
}

// IsReconciledEQ applies the EQ predicate on the "is_reconciled" field.
func IsReconciledEQ(v bool) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldEQ(FieldIsReconciled, v))
}

// IsReconciledNEQ applies the NEQ predicate on the "is_reconciled" field.
func IsReconciledNEQ(v bool) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.FieldNEQ(FieldIsReconciled, v))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GeneralLedgerAccount) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GeneralLedgerAccount) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GeneralLedgerAccount) predicate.GeneralLedgerAccount {
	return predicate.GeneralLedgerAccount(sql.NotPredicates(p))
}
