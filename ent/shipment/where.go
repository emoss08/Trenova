// Code generated by ent, DO NOT EDIT.

package shipment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldVersion, v))
}

// ProNumber applies equality check predicate on the "pro_number" field. It's identical to ProNumberEQ.
func ProNumber(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldProNumber, v))
}

// OriginLocationID applies equality check predicate on the "origin_location_id" field. It's identical to OriginLocationIDEQ.
func OriginLocationID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOriginLocationID, v))
}

// OriginAddressLine applies equality check predicate on the "origin_address_line" field. It's identical to OriginAddressLineEQ.
func OriginAddressLine(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOriginAddressLine, v))
}

// OriginAppointmentStart applies equality check predicate on the "origin_appointment_start" field. It's identical to OriginAppointmentStartEQ.
func OriginAppointmentStart(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOriginAppointmentStart, v))
}

// OriginAppointmentEnd applies equality check predicate on the "origin_appointment_end" field. It's identical to OriginAppointmentEndEQ.
func OriginAppointmentEnd(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOriginAppointmentEnd, v))
}

// DestinationLocationID applies equality check predicate on the "destination_location_id" field. It's identical to DestinationLocationIDEQ.
func DestinationLocationID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldDestinationLocationID, v))
}

// DestinationAddressLine applies equality check predicate on the "destination_address_line" field. It's identical to DestinationAddressLineEQ.
func DestinationAddressLine(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldDestinationAddressLine, v))
}

// DestinationAppointmentStart applies equality check predicate on the "destination_appointment_start" field. It's identical to DestinationAppointmentStartEQ.
func DestinationAppointmentStart(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldDestinationAppointmentStart, v))
}

// DestinationAppointmentEnd applies equality check predicate on the "destination_appointment_end" field. It's identical to DestinationAppointmentEndEQ.
func DestinationAppointmentEnd(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldDestinationAppointmentEnd, v))
}

// ShipmentTypeID applies equality check predicate on the "shipment_type_id" field. It's identical to ShipmentTypeIDEQ.
func ShipmentTypeID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldShipmentTypeID, v))
}

// RevenueCodeID applies equality check predicate on the "revenue_code_id" field. It's identical to RevenueCodeIDEQ.
func RevenueCodeID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldRevenueCodeID, v))
}

// ServiceTypeID applies equality check predicate on the "service_type_id" field. It's identical to ServiceTypeIDEQ.
func ServiceTypeID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldServiceTypeID, v))
}

// RatingUnit applies equality check predicate on the "rating_unit" field. It's identical to RatingUnitEQ.
func RatingUnit(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldRatingUnit, v))
}

// Mileage applies equality check predicate on the "mileage" field. It's identical to MileageEQ.
func Mileage(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldMileage, v))
}

// OtherChargeAmount applies equality check predicate on the "other_charge_amount" field. It's identical to OtherChargeAmountEQ.
func OtherChargeAmount(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOtherChargeAmount, v))
}

// FreightChargeAmount applies equality check predicate on the "freight_charge_amount" field. It's identical to FreightChargeAmountEQ.
func FreightChargeAmount(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldFreightChargeAmount, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCustomerID, v))
}

// Pieces applies equality check predicate on the "pieces" field. It's identical to PiecesEQ.
func Pieces(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldPieces, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldWeight, v))
}

// ReadyToBill applies equality check predicate on the "ready_to_bill" field. It's identical to ReadyToBillEQ.
func ReadyToBill(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldReadyToBill, v))
}

// BillDate applies equality check predicate on the "bill_date" field. It's identical to BillDateEQ.
func BillDate(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldBillDate, v))
}

// ShipDate applies equality check predicate on the "ship_date" field. It's identical to ShipDateEQ.
func ShipDate(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldShipDate, v))
}

// Billed applies equality check predicate on the "billed" field. It's identical to BilledEQ.
func Billed(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldBilled, v))
}

// TransferredToBilling applies equality check predicate on the "transferred_to_billing" field. It's identical to TransferredToBillingEQ.
func TransferredToBilling(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTransferredToBilling, v))
}

// TransferredToBillingDate applies equality check predicate on the "transferred_to_billing_date" field. It's identical to TransferredToBillingDateEQ.
func TransferredToBillingDate(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTransferredToBillingDate, v))
}

// TotalChargeAmount applies equality check predicate on the "total_charge_amount" field. It's identical to TotalChargeAmountEQ.
func TotalChargeAmount(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTotalChargeAmount, v))
}

// TrailerTypeID applies equality check predicate on the "trailer_type_id" field. It's identical to TrailerTypeIDEQ.
func TrailerTypeID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTrailerTypeID, v))
}

// TractorTypeID applies equality check predicate on the "tractor_type_id" field. It's identical to TractorTypeIDEQ.
func TractorTypeID(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTractorTypeID, v))
}

// TemperatureMin applies equality check predicate on the "temperature_min" field. It's identical to TemperatureMinEQ.
func TemperatureMin(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTemperatureMin, v))
}

// TemperatureMax applies equality check predicate on the "temperature_max" field. It's identical to TemperatureMaxEQ.
func TemperatureMax(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTemperatureMax, v))
}

// BillOfLadingNumber applies equality check predicate on the "bill_of_lading_number" field. It's identical to BillOfLadingNumberEQ.
func BillOfLadingNumber(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldBillOfLadingNumber, v))
}

// ConsigneeReferenceNumber applies equality check predicate on the "consignee_reference_number" field. It's identical to ConsigneeReferenceNumberEQ.
func ConsigneeReferenceNumber(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldConsigneeReferenceNumber, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldComment, v))
}

// VoidedComment applies equality check predicate on the "voided_comment" field. It's identical to VoidedCommentEQ.
func VoidedComment(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldVoidedComment, v))
}

// AutoRated applies equality check predicate on the "auto_rated" field. It's identical to AutoRatedEQ.
func AutoRated(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldAutoRated, v))
}

// CurrentSuffix applies equality check predicate on the "current_suffix" field. It's identical to CurrentSuffixEQ.
func CurrentSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCurrentSuffix, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCreatedBy, v))
}

// IsHazardous applies equality check predicate on the "is_hazardous" field. It's identical to IsHazardousEQ.
func IsHazardous(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldIsHazardous, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldVersion, v))
}

// ProNumberEQ applies the EQ predicate on the "pro_number" field.
func ProNumberEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldProNumber, v))
}

// ProNumberNEQ applies the NEQ predicate on the "pro_number" field.
func ProNumberNEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldProNumber, v))
}

// ProNumberIn applies the In predicate on the "pro_number" field.
func ProNumberIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldProNumber, vs...))
}

// ProNumberNotIn applies the NotIn predicate on the "pro_number" field.
func ProNumberNotIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldProNumber, vs...))
}

// ProNumberGT applies the GT predicate on the "pro_number" field.
func ProNumberGT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldProNumber, v))
}

// ProNumberGTE applies the GTE predicate on the "pro_number" field.
func ProNumberGTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldProNumber, v))
}

// ProNumberLT applies the LT predicate on the "pro_number" field.
func ProNumberLT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldProNumber, v))
}

// ProNumberLTE applies the LTE predicate on the "pro_number" field.
func ProNumberLTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldProNumber, v))
}

// ProNumberContains applies the Contains predicate on the "pro_number" field.
func ProNumberContains(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContains(FieldProNumber, v))
}

// ProNumberHasPrefix applies the HasPrefix predicate on the "pro_number" field.
func ProNumberHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasPrefix(FieldProNumber, v))
}

// ProNumberHasSuffix applies the HasSuffix predicate on the "pro_number" field.
func ProNumberHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasSuffix(FieldProNumber, v))
}

// ProNumberEqualFold applies the EqualFold predicate on the "pro_number" field.
func ProNumberEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEqualFold(FieldProNumber, v))
}

// ProNumberContainsFold applies the ContainsFold predicate on the "pro_number" field.
func ProNumberContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContainsFold(FieldProNumber, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldStatus, vs...))
}

// OriginLocationIDEQ applies the EQ predicate on the "origin_location_id" field.
func OriginLocationIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOriginLocationID, v))
}

// OriginLocationIDNEQ applies the NEQ predicate on the "origin_location_id" field.
func OriginLocationIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldOriginLocationID, v))
}

// OriginLocationIDIn applies the In predicate on the "origin_location_id" field.
func OriginLocationIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldOriginLocationID, vs...))
}

// OriginLocationIDNotIn applies the NotIn predicate on the "origin_location_id" field.
func OriginLocationIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldOriginLocationID, vs...))
}

// OriginLocationIDIsNil applies the IsNil predicate on the "origin_location_id" field.
func OriginLocationIDIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldOriginLocationID))
}

// OriginLocationIDNotNil applies the NotNil predicate on the "origin_location_id" field.
func OriginLocationIDNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldOriginLocationID))
}

// OriginAddressLineEQ applies the EQ predicate on the "origin_address_line" field.
func OriginAddressLineEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOriginAddressLine, v))
}

// OriginAddressLineNEQ applies the NEQ predicate on the "origin_address_line" field.
func OriginAddressLineNEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldOriginAddressLine, v))
}

// OriginAddressLineIn applies the In predicate on the "origin_address_line" field.
func OriginAddressLineIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldOriginAddressLine, vs...))
}

// OriginAddressLineNotIn applies the NotIn predicate on the "origin_address_line" field.
func OriginAddressLineNotIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldOriginAddressLine, vs...))
}

// OriginAddressLineGT applies the GT predicate on the "origin_address_line" field.
func OriginAddressLineGT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldOriginAddressLine, v))
}

// OriginAddressLineGTE applies the GTE predicate on the "origin_address_line" field.
func OriginAddressLineGTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldOriginAddressLine, v))
}

// OriginAddressLineLT applies the LT predicate on the "origin_address_line" field.
func OriginAddressLineLT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldOriginAddressLine, v))
}

// OriginAddressLineLTE applies the LTE predicate on the "origin_address_line" field.
func OriginAddressLineLTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldOriginAddressLine, v))
}

// OriginAddressLineContains applies the Contains predicate on the "origin_address_line" field.
func OriginAddressLineContains(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContains(FieldOriginAddressLine, v))
}

// OriginAddressLineHasPrefix applies the HasPrefix predicate on the "origin_address_line" field.
func OriginAddressLineHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasPrefix(FieldOriginAddressLine, v))
}

// OriginAddressLineHasSuffix applies the HasSuffix predicate on the "origin_address_line" field.
func OriginAddressLineHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasSuffix(FieldOriginAddressLine, v))
}

// OriginAddressLineIsNil applies the IsNil predicate on the "origin_address_line" field.
func OriginAddressLineIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldOriginAddressLine))
}

// OriginAddressLineNotNil applies the NotNil predicate on the "origin_address_line" field.
func OriginAddressLineNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldOriginAddressLine))
}

// OriginAddressLineEqualFold applies the EqualFold predicate on the "origin_address_line" field.
func OriginAddressLineEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEqualFold(FieldOriginAddressLine, v))
}

// OriginAddressLineContainsFold applies the ContainsFold predicate on the "origin_address_line" field.
func OriginAddressLineContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContainsFold(FieldOriginAddressLine, v))
}

// OriginAppointmentStartEQ applies the EQ predicate on the "origin_appointment_start" field.
func OriginAppointmentStartEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOriginAppointmentStart, v))
}

// OriginAppointmentStartNEQ applies the NEQ predicate on the "origin_appointment_start" field.
func OriginAppointmentStartNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldOriginAppointmentStart, v))
}

// OriginAppointmentStartIn applies the In predicate on the "origin_appointment_start" field.
func OriginAppointmentStartIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldOriginAppointmentStart, vs...))
}

// OriginAppointmentStartNotIn applies the NotIn predicate on the "origin_appointment_start" field.
func OriginAppointmentStartNotIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldOriginAppointmentStart, vs...))
}

// OriginAppointmentStartGT applies the GT predicate on the "origin_appointment_start" field.
func OriginAppointmentStartGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldOriginAppointmentStart, v))
}

// OriginAppointmentStartGTE applies the GTE predicate on the "origin_appointment_start" field.
func OriginAppointmentStartGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldOriginAppointmentStart, v))
}

// OriginAppointmentStartLT applies the LT predicate on the "origin_appointment_start" field.
func OriginAppointmentStartLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldOriginAppointmentStart, v))
}

// OriginAppointmentStartLTE applies the LTE predicate on the "origin_appointment_start" field.
func OriginAppointmentStartLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldOriginAppointmentStart, v))
}

// OriginAppointmentStartIsNil applies the IsNil predicate on the "origin_appointment_start" field.
func OriginAppointmentStartIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldOriginAppointmentStart))
}

// OriginAppointmentStartNotNil applies the NotNil predicate on the "origin_appointment_start" field.
func OriginAppointmentStartNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldOriginAppointmentStart))
}

// OriginAppointmentEndEQ applies the EQ predicate on the "origin_appointment_end" field.
func OriginAppointmentEndEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOriginAppointmentEnd, v))
}

// OriginAppointmentEndNEQ applies the NEQ predicate on the "origin_appointment_end" field.
func OriginAppointmentEndNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldOriginAppointmentEnd, v))
}

// OriginAppointmentEndIn applies the In predicate on the "origin_appointment_end" field.
func OriginAppointmentEndIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldOriginAppointmentEnd, vs...))
}

// OriginAppointmentEndNotIn applies the NotIn predicate on the "origin_appointment_end" field.
func OriginAppointmentEndNotIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldOriginAppointmentEnd, vs...))
}

// OriginAppointmentEndGT applies the GT predicate on the "origin_appointment_end" field.
func OriginAppointmentEndGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldOriginAppointmentEnd, v))
}

// OriginAppointmentEndGTE applies the GTE predicate on the "origin_appointment_end" field.
func OriginAppointmentEndGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldOriginAppointmentEnd, v))
}

// OriginAppointmentEndLT applies the LT predicate on the "origin_appointment_end" field.
func OriginAppointmentEndLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldOriginAppointmentEnd, v))
}

// OriginAppointmentEndLTE applies the LTE predicate on the "origin_appointment_end" field.
func OriginAppointmentEndLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldOriginAppointmentEnd, v))
}

// OriginAppointmentEndIsNil applies the IsNil predicate on the "origin_appointment_end" field.
func OriginAppointmentEndIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldOriginAppointmentEnd))
}

// OriginAppointmentEndNotNil applies the NotNil predicate on the "origin_appointment_end" field.
func OriginAppointmentEndNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldOriginAppointmentEnd))
}

// DestinationLocationIDEQ applies the EQ predicate on the "destination_location_id" field.
func DestinationLocationIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldDestinationLocationID, v))
}

// DestinationLocationIDNEQ applies the NEQ predicate on the "destination_location_id" field.
func DestinationLocationIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldDestinationLocationID, v))
}

// DestinationLocationIDIn applies the In predicate on the "destination_location_id" field.
func DestinationLocationIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldDestinationLocationID, vs...))
}

// DestinationLocationIDNotIn applies the NotIn predicate on the "destination_location_id" field.
func DestinationLocationIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldDestinationLocationID, vs...))
}

// DestinationLocationIDIsNil applies the IsNil predicate on the "destination_location_id" field.
func DestinationLocationIDIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldDestinationLocationID))
}

// DestinationLocationIDNotNil applies the NotNil predicate on the "destination_location_id" field.
func DestinationLocationIDNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldDestinationLocationID))
}

// DestinationAddressLineEQ applies the EQ predicate on the "destination_address_line" field.
func DestinationAddressLineEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldDestinationAddressLine, v))
}

// DestinationAddressLineNEQ applies the NEQ predicate on the "destination_address_line" field.
func DestinationAddressLineNEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldDestinationAddressLine, v))
}

// DestinationAddressLineIn applies the In predicate on the "destination_address_line" field.
func DestinationAddressLineIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldDestinationAddressLine, vs...))
}

// DestinationAddressLineNotIn applies the NotIn predicate on the "destination_address_line" field.
func DestinationAddressLineNotIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldDestinationAddressLine, vs...))
}

// DestinationAddressLineGT applies the GT predicate on the "destination_address_line" field.
func DestinationAddressLineGT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldDestinationAddressLine, v))
}

// DestinationAddressLineGTE applies the GTE predicate on the "destination_address_line" field.
func DestinationAddressLineGTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldDestinationAddressLine, v))
}

// DestinationAddressLineLT applies the LT predicate on the "destination_address_line" field.
func DestinationAddressLineLT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldDestinationAddressLine, v))
}

// DestinationAddressLineLTE applies the LTE predicate on the "destination_address_line" field.
func DestinationAddressLineLTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldDestinationAddressLine, v))
}

// DestinationAddressLineContains applies the Contains predicate on the "destination_address_line" field.
func DestinationAddressLineContains(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContains(FieldDestinationAddressLine, v))
}

// DestinationAddressLineHasPrefix applies the HasPrefix predicate on the "destination_address_line" field.
func DestinationAddressLineHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasPrefix(FieldDestinationAddressLine, v))
}

// DestinationAddressLineHasSuffix applies the HasSuffix predicate on the "destination_address_line" field.
func DestinationAddressLineHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasSuffix(FieldDestinationAddressLine, v))
}

// DestinationAddressLineIsNil applies the IsNil predicate on the "destination_address_line" field.
func DestinationAddressLineIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldDestinationAddressLine))
}

// DestinationAddressLineNotNil applies the NotNil predicate on the "destination_address_line" field.
func DestinationAddressLineNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldDestinationAddressLine))
}

// DestinationAddressLineEqualFold applies the EqualFold predicate on the "destination_address_line" field.
func DestinationAddressLineEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEqualFold(FieldDestinationAddressLine, v))
}

// DestinationAddressLineContainsFold applies the ContainsFold predicate on the "destination_address_line" field.
func DestinationAddressLineContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContainsFold(FieldDestinationAddressLine, v))
}

// DestinationAppointmentStartEQ applies the EQ predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldDestinationAppointmentStart, v))
}

// DestinationAppointmentStartNEQ applies the NEQ predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldDestinationAppointmentStart, v))
}

// DestinationAppointmentStartIn applies the In predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldDestinationAppointmentStart, vs...))
}

// DestinationAppointmentStartNotIn applies the NotIn predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartNotIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldDestinationAppointmentStart, vs...))
}

// DestinationAppointmentStartGT applies the GT predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldDestinationAppointmentStart, v))
}

// DestinationAppointmentStartGTE applies the GTE predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldDestinationAppointmentStart, v))
}

// DestinationAppointmentStartLT applies the LT predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldDestinationAppointmentStart, v))
}

// DestinationAppointmentStartLTE applies the LTE predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldDestinationAppointmentStart, v))
}

// DestinationAppointmentStartIsNil applies the IsNil predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldDestinationAppointmentStart))
}

// DestinationAppointmentStartNotNil applies the NotNil predicate on the "destination_appointment_start" field.
func DestinationAppointmentStartNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldDestinationAppointmentStart))
}

// DestinationAppointmentEndEQ applies the EQ predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldDestinationAppointmentEnd, v))
}

// DestinationAppointmentEndNEQ applies the NEQ predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldDestinationAppointmentEnd, v))
}

// DestinationAppointmentEndIn applies the In predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldDestinationAppointmentEnd, vs...))
}

// DestinationAppointmentEndNotIn applies the NotIn predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndNotIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldDestinationAppointmentEnd, vs...))
}

// DestinationAppointmentEndGT applies the GT predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldDestinationAppointmentEnd, v))
}

// DestinationAppointmentEndGTE applies the GTE predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldDestinationAppointmentEnd, v))
}

// DestinationAppointmentEndLT applies the LT predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldDestinationAppointmentEnd, v))
}

// DestinationAppointmentEndLTE applies the LTE predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldDestinationAppointmentEnd, v))
}

// DestinationAppointmentEndIsNil applies the IsNil predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldDestinationAppointmentEnd))
}

// DestinationAppointmentEndNotNil applies the NotNil predicate on the "destination_appointment_end" field.
func DestinationAppointmentEndNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldDestinationAppointmentEnd))
}

// ShipmentTypeIDEQ applies the EQ predicate on the "shipment_type_id" field.
func ShipmentTypeIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldShipmentTypeID, v))
}

// ShipmentTypeIDNEQ applies the NEQ predicate on the "shipment_type_id" field.
func ShipmentTypeIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldShipmentTypeID, v))
}

// ShipmentTypeIDIn applies the In predicate on the "shipment_type_id" field.
func ShipmentTypeIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldShipmentTypeID, vs...))
}

// ShipmentTypeIDNotIn applies the NotIn predicate on the "shipment_type_id" field.
func ShipmentTypeIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldShipmentTypeID, vs...))
}

// RevenueCodeIDEQ applies the EQ predicate on the "revenue_code_id" field.
func RevenueCodeIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldRevenueCodeID, v))
}

// RevenueCodeIDNEQ applies the NEQ predicate on the "revenue_code_id" field.
func RevenueCodeIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldRevenueCodeID, v))
}

// RevenueCodeIDIn applies the In predicate on the "revenue_code_id" field.
func RevenueCodeIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldRevenueCodeID, vs...))
}

// RevenueCodeIDNotIn applies the NotIn predicate on the "revenue_code_id" field.
func RevenueCodeIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldRevenueCodeID, vs...))
}

// RevenueCodeIDIsNil applies the IsNil predicate on the "revenue_code_id" field.
func RevenueCodeIDIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldRevenueCodeID))
}

// RevenueCodeIDNotNil applies the NotNil predicate on the "revenue_code_id" field.
func RevenueCodeIDNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldRevenueCodeID))
}

// ServiceTypeIDEQ applies the EQ predicate on the "service_type_id" field.
func ServiceTypeIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldServiceTypeID, v))
}

// ServiceTypeIDNEQ applies the NEQ predicate on the "service_type_id" field.
func ServiceTypeIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldServiceTypeID, v))
}

// ServiceTypeIDIn applies the In predicate on the "service_type_id" field.
func ServiceTypeIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldServiceTypeID, vs...))
}

// ServiceTypeIDNotIn applies the NotIn predicate on the "service_type_id" field.
func ServiceTypeIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldServiceTypeID, vs...))
}

// ServiceTypeIDIsNil applies the IsNil predicate on the "service_type_id" field.
func ServiceTypeIDIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldServiceTypeID))
}

// ServiceTypeIDNotNil applies the NotNil predicate on the "service_type_id" field.
func ServiceTypeIDNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldServiceTypeID))
}

// RatingUnitEQ applies the EQ predicate on the "rating_unit" field.
func RatingUnitEQ(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldRatingUnit, v))
}

// RatingUnitNEQ applies the NEQ predicate on the "rating_unit" field.
func RatingUnitNEQ(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldRatingUnit, v))
}

// RatingUnitIn applies the In predicate on the "rating_unit" field.
func RatingUnitIn(vs ...int) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldRatingUnit, vs...))
}

// RatingUnitNotIn applies the NotIn predicate on the "rating_unit" field.
func RatingUnitNotIn(vs ...int) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldRatingUnit, vs...))
}

// RatingUnitGT applies the GT predicate on the "rating_unit" field.
func RatingUnitGT(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldRatingUnit, v))
}

// RatingUnitGTE applies the GTE predicate on the "rating_unit" field.
func RatingUnitGTE(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldRatingUnit, v))
}

// RatingUnitLT applies the LT predicate on the "rating_unit" field.
func RatingUnitLT(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldRatingUnit, v))
}

// RatingUnitLTE applies the LTE predicate on the "rating_unit" field.
func RatingUnitLTE(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldRatingUnit, v))
}

// MileageEQ applies the EQ predicate on the "mileage" field.
func MileageEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldMileage, v))
}

// MileageNEQ applies the NEQ predicate on the "mileage" field.
func MileageNEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldMileage, v))
}

// MileageIn applies the In predicate on the "mileage" field.
func MileageIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldMileage, vs...))
}

// MileageNotIn applies the NotIn predicate on the "mileage" field.
func MileageNotIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldMileage, vs...))
}

// MileageGT applies the GT predicate on the "mileage" field.
func MileageGT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldMileage, v))
}

// MileageGTE applies the GTE predicate on the "mileage" field.
func MileageGTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldMileage, v))
}

// MileageLT applies the LT predicate on the "mileage" field.
func MileageLT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldMileage, v))
}

// MileageLTE applies the LTE predicate on the "mileage" field.
func MileageLTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldMileage, v))
}

// MileageIsNil applies the IsNil predicate on the "mileage" field.
func MileageIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldMileage))
}

// MileageNotNil applies the NotNil predicate on the "mileage" field.
func MileageNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldMileage))
}

// OtherChargeAmountEQ applies the EQ predicate on the "other_charge_amount" field.
func OtherChargeAmountEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldOtherChargeAmount, v))
}

// OtherChargeAmountNEQ applies the NEQ predicate on the "other_charge_amount" field.
func OtherChargeAmountNEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldOtherChargeAmount, v))
}

// OtherChargeAmountIn applies the In predicate on the "other_charge_amount" field.
func OtherChargeAmountIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldOtherChargeAmount, vs...))
}

// OtherChargeAmountNotIn applies the NotIn predicate on the "other_charge_amount" field.
func OtherChargeAmountNotIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldOtherChargeAmount, vs...))
}

// OtherChargeAmountGT applies the GT predicate on the "other_charge_amount" field.
func OtherChargeAmountGT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldOtherChargeAmount, v))
}

// OtherChargeAmountGTE applies the GTE predicate on the "other_charge_amount" field.
func OtherChargeAmountGTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldOtherChargeAmount, v))
}

// OtherChargeAmountLT applies the LT predicate on the "other_charge_amount" field.
func OtherChargeAmountLT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldOtherChargeAmount, v))
}

// OtherChargeAmountLTE applies the LTE predicate on the "other_charge_amount" field.
func OtherChargeAmountLTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldOtherChargeAmount, v))
}

// OtherChargeAmountIsNil applies the IsNil predicate on the "other_charge_amount" field.
func OtherChargeAmountIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldOtherChargeAmount))
}

// OtherChargeAmountNotNil applies the NotNil predicate on the "other_charge_amount" field.
func OtherChargeAmountNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldOtherChargeAmount))
}

// FreightChargeAmountEQ applies the EQ predicate on the "freight_charge_amount" field.
func FreightChargeAmountEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldFreightChargeAmount, v))
}

// FreightChargeAmountNEQ applies the NEQ predicate on the "freight_charge_amount" field.
func FreightChargeAmountNEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldFreightChargeAmount, v))
}

// FreightChargeAmountIn applies the In predicate on the "freight_charge_amount" field.
func FreightChargeAmountIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldFreightChargeAmount, vs...))
}

// FreightChargeAmountNotIn applies the NotIn predicate on the "freight_charge_amount" field.
func FreightChargeAmountNotIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldFreightChargeAmount, vs...))
}

// FreightChargeAmountGT applies the GT predicate on the "freight_charge_amount" field.
func FreightChargeAmountGT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldFreightChargeAmount, v))
}

// FreightChargeAmountGTE applies the GTE predicate on the "freight_charge_amount" field.
func FreightChargeAmountGTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldFreightChargeAmount, v))
}

// FreightChargeAmountLT applies the LT predicate on the "freight_charge_amount" field.
func FreightChargeAmountLT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldFreightChargeAmount, v))
}

// FreightChargeAmountLTE applies the LTE predicate on the "freight_charge_amount" field.
func FreightChargeAmountLTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldFreightChargeAmount, v))
}

// FreightChargeAmountIsNil applies the IsNil predicate on the "freight_charge_amount" field.
func FreightChargeAmountIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldFreightChargeAmount))
}

// FreightChargeAmountNotNil applies the NotNil predicate on the "freight_charge_amount" field.
func FreightChargeAmountNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldFreightChargeAmount))
}

// RatingMethodEQ applies the EQ predicate on the "rating_method" field.
func RatingMethodEQ(v RatingMethod) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldRatingMethod, v))
}

// RatingMethodNEQ applies the NEQ predicate on the "rating_method" field.
func RatingMethodNEQ(v RatingMethod) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldRatingMethod, v))
}

// RatingMethodIn applies the In predicate on the "rating_method" field.
func RatingMethodIn(vs ...RatingMethod) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldRatingMethod, vs...))
}

// RatingMethodNotIn applies the NotIn predicate on the "rating_method" field.
func RatingMethodNotIn(vs ...RatingMethod) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldRatingMethod, vs...))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldCustomerID, vs...))
}

// PiecesEQ applies the EQ predicate on the "pieces" field.
func PiecesEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldPieces, v))
}

// PiecesNEQ applies the NEQ predicate on the "pieces" field.
func PiecesNEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldPieces, v))
}

// PiecesIn applies the In predicate on the "pieces" field.
func PiecesIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldPieces, vs...))
}

// PiecesNotIn applies the NotIn predicate on the "pieces" field.
func PiecesNotIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldPieces, vs...))
}

// PiecesGT applies the GT predicate on the "pieces" field.
func PiecesGT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldPieces, v))
}

// PiecesGTE applies the GTE predicate on the "pieces" field.
func PiecesGTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldPieces, v))
}

// PiecesLT applies the LT predicate on the "pieces" field.
func PiecesLT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldPieces, v))
}

// PiecesLTE applies the LTE predicate on the "pieces" field.
func PiecesLTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldPieces, v))
}

// PiecesIsNil applies the IsNil predicate on the "pieces" field.
func PiecesIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldPieces))
}

// PiecesNotNil applies the NotNil predicate on the "pieces" field.
func PiecesNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldPieces))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldWeight))
}

// ReadyToBillEQ applies the EQ predicate on the "ready_to_bill" field.
func ReadyToBillEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldReadyToBill, v))
}

// ReadyToBillNEQ applies the NEQ predicate on the "ready_to_bill" field.
func ReadyToBillNEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldReadyToBill, v))
}

// BillDateEQ applies the EQ predicate on the "bill_date" field.
func BillDateEQ(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldBillDate, v))
}

// BillDateNEQ applies the NEQ predicate on the "bill_date" field.
func BillDateNEQ(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldBillDate, v))
}

// BillDateIn applies the In predicate on the "bill_date" field.
func BillDateIn(vs ...*pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldBillDate, vs...))
}

// BillDateNotIn applies the NotIn predicate on the "bill_date" field.
func BillDateNotIn(vs ...*pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldBillDate, vs...))
}

// BillDateGT applies the GT predicate on the "bill_date" field.
func BillDateGT(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldBillDate, v))
}

// BillDateGTE applies the GTE predicate on the "bill_date" field.
func BillDateGTE(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldBillDate, v))
}

// BillDateLT applies the LT predicate on the "bill_date" field.
func BillDateLT(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldBillDate, v))
}

// BillDateLTE applies the LTE predicate on the "bill_date" field.
func BillDateLTE(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldBillDate, v))
}

// BillDateIsNil applies the IsNil predicate on the "bill_date" field.
func BillDateIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldBillDate))
}

// BillDateNotNil applies the NotNil predicate on the "bill_date" field.
func BillDateNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldBillDate))
}

// ShipDateEQ applies the EQ predicate on the "ship_date" field.
func ShipDateEQ(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldShipDate, v))
}

// ShipDateNEQ applies the NEQ predicate on the "ship_date" field.
func ShipDateNEQ(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldShipDate, v))
}

// ShipDateIn applies the In predicate on the "ship_date" field.
func ShipDateIn(vs ...*pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldShipDate, vs...))
}

// ShipDateNotIn applies the NotIn predicate on the "ship_date" field.
func ShipDateNotIn(vs ...*pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldShipDate, vs...))
}

// ShipDateGT applies the GT predicate on the "ship_date" field.
func ShipDateGT(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldShipDate, v))
}

// ShipDateGTE applies the GTE predicate on the "ship_date" field.
func ShipDateGTE(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldShipDate, v))
}

// ShipDateLT applies the LT predicate on the "ship_date" field.
func ShipDateLT(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldShipDate, v))
}

// ShipDateLTE applies the LTE predicate on the "ship_date" field.
func ShipDateLTE(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldShipDate, v))
}

// ShipDateIsNil applies the IsNil predicate on the "ship_date" field.
func ShipDateIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldShipDate))
}

// ShipDateNotNil applies the NotNil predicate on the "ship_date" field.
func ShipDateNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldShipDate))
}

// BilledEQ applies the EQ predicate on the "billed" field.
func BilledEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldBilled, v))
}

// BilledNEQ applies the NEQ predicate on the "billed" field.
func BilledNEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldBilled, v))
}

// TransferredToBillingEQ applies the EQ predicate on the "transferred_to_billing" field.
func TransferredToBillingEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTransferredToBilling, v))
}

// TransferredToBillingNEQ applies the NEQ predicate on the "transferred_to_billing" field.
func TransferredToBillingNEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldTransferredToBilling, v))
}

// TransferredToBillingDateEQ applies the EQ predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateEQ(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTransferredToBillingDate, v))
}

// TransferredToBillingDateNEQ applies the NEQ predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateNEQ(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldTransferredToBillingDate, v))
}

// TransferredToBillingDateIn applies the In predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateIn(vs ...*pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldTransferredToBillingDate, vs...))
}

// TransferredToBillingDateNotIn applies the NotIn predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateNotIn(vs ...*pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldTransferredToBillingDate, vs...))
}

// TransferredToBillingDateGT applies the GT predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateGT(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldTransferredToBillingDate, v))
}

// TransferredToBillingDateGTE applies the GTE predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateGTE(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldTransferredToBillingDate, v))
}

// TransferredToBillingDateLT applies the LT predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateLT(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldTransferredToBillingDate, v))
}

// TransferredToBillingDateLTE applies the LTE predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateLTE(v *pgtype.Date) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldTransferredToBillingDate, v))
}

// TransferredToBillingDateIsNil applies the IsNil predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldTransferredToBillingDate))
}

// TransferredToBillingDateNotNil applies the NotNil predicate on the "transferred_to_billing_date" field.
func TransferredToBillingDateNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldTransferredToBillingDate))
}

// TotalChargeAmountEQ applies the EQ predicate on the "total_charge_amount" field.
func TotalChargeAmountEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTotalChargeAmount, v))
}

// TotalChargeAmountNEQ applies the NEQ predicate on the "total_charge_amount" field.
func TotalChargeAmountNEQ(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldTotalChargeAmount, v))
}

// TotalChargeAmountIn applies the In predicate on the "total_charge_amount" field.
func TotalChargeAmountIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldTotalChargeAmount, vs...))
}

// TotalChargeAmountNotIn applies the NotIn predicate on the "total_charge_amount" field.
func TotalChargeAmountNotIn(vs ...float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldTotalChargeAmount, vs...))
}

// TotalChargeAmountGT applies the GT predicate on the "total_charge_amount" field.
func TotalChargeAmountGT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldTotalChargeAmount, v))
}

// TotalChargeAmountGTE applies the GTE predicate on the "total_charge_amount" field.
func TotalChargeAmountGTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldTotalChargeAmount, v))
}

// TotalChargeAmountLT applies the LT predicate on the "total_charge_amount" field.
func TotalChargeAmountLT(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldTotalChargeAmount, v))
}

// TotalChargeAmountLTE applies the LTE predicate on the "total_charge_amount" field.
func TotalChargeAmountLTE(v float64) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldTotalChargeAmount, v))
}

// TotalChargeAmountIsNil applies the IsNil predicate on the "total_charge_amount" field.
func TotalChargeAmountIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldTotalChargeAmount))
}

// TotalChargeAmountNotNil applies the NotNil predicate on the "total_charge_amount" field.
func TotalChargeAmountNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldTotalChargeAmount))
}

// TrailerTypeIDEQ applies the EQ predicate on the "trailer_type_id" field.
func TrailerTypeIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTrailerTypeID, v))
}

// TrailerTypeIDNEQ applies the NEQ predicate on the "trailer_type_id" field.
func TrailerTypeIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldTrailerTypeID, v))
}

// TrailerTypeIDIn applies the In predicate on the "trailer_type_id" field.
func TrailerTypeIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldTrailerTypeID, vs...))
}

// TrailerTypeIDNotIn applies the NotIn predicate on the "trailer_type_id" field.
func TrailerTypeIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldTrailerTypeID, vs...))
}

// TrailerTypeIDIsNil applies the IsNil predicate on the "trailer_type_id" field.
func TrailerTypeIDIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldTrailerTypeID))
}

// TrailerTypeIDNotNil applies the NotNil predicate on the "trailer_type_id" field.
func TrailerTypeIDNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldTrailerTypeID))
}

// TractorTypeIDEQ applies the EQ predicate on the "tractor_type_id" field.
func TractorTypeIDEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTractorTypeID, v))
}

// TractorTypeIDNEQ applies the NEQ predicate on the "tractor_type_id" field.
func TractorTypeIDNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldTractorTypeID, v))
}

// TractorTypeIDIn applies the In predicate on the "tractor_type_id" field.
func TractorTypeIDIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldTractorTypeID, vs...))
}

// TractorTypeIDNotIn applies the NotIn predicate on the "tractor_type_id" field.
func TractorTypeIDNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldTractorTypeID, vs...))
}

// TractorTypeIDIsNil applies the IsNil predicate on the "tractor_type_id" field.
func TractorTypeIDIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldTractorTypeID))
}

// TractorTypeIDNotNil applies the NotNil predicate on the "tractor_type_id" field.
func TractorTypeIDNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldTractorTypeID))
}

// TemperatureMinEQ applies the EQ predicate on the "temperature_min" field.
func TemperatureMinEQ(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTemperatureMin, v))
}

// TemperatureMinNEQ applies the NEQ predicate on the "temperature_min" field.
func TemperatureMinNEQ(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldTemperatureMin, v))
}

// TemperatureMinIn applies the In predicate on the "temperature_min" field.
func TemperatureMinIn(vs ...int) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldTemperatureMin, vs...))
}

// TemperatureMinNotIn applies the NotIn predicate on the "temperature_min" field.
func TemperatureMinNotIn(vs ...int) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldTemperatureMin, vs...))
}

// TemperatureMinGT applies the GT predicate on the "temperature_min" field.
func TemperatureMinGT(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldTemperatureMin, v))
}

// TemperatureMinGTE applies the GTE predicate on the "temperature_min" field.
func TemperatureMinGTE(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldTemperatureMin, v))
}

// TemperatureMinLT applies the LT predicate on the "temperature_min" field.
func TemperatureMinLT(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldTemperatureMin, v))
}

// TemperatureMinLTE applies the LTE predicate on the "temperature_min" field.
func TemperatureMinLTE(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldTemperatureMin, v))
}

// TemperatureMinIsNil applies the IsNil predicate on the "temperature_min" field.
func TemperatureMinIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldTemperatureMin))
}

// TemperatureMinNotNil applies the NotNil predicate on the "temperature_min" field.
func TemperatureMinNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldTemperatureMin))
}

// TemperatureMaxEQ applies the EQ predicate on the "temperature_max" field.
func TemperatureMaxEQ(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTemperatureMax, v))
}

// TemperatureMaxNEQ applies the NEQ predicate on the "temperature_max" field.
func TemperatureMaxNEQ(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldTemperatureMax, v))
}

// TemperatureMaxIn applies the In predicate on the "temperature_max" field.
func TemperatureMaxIn(vs ...int) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldTemperatureMax, vs...))
}

// TemperatureMaxNotIn applies the NotIn predicate on the "temperature_max" field.
func TemperatureMaxNotIn(vs ...int) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldTemperatureMax, vs...))
}

// TemperatureMaxGT applies the GT predicate on the "temperature_max" field.
func TemperatureMaxGT(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldTemperatureMax, v))
}

// TemperatureMaxGTE applies the GTE predicate on the "temperature_max" field.
func TemperatureMaxGTE(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldTemperatureMax, v))
}

// TemperatureMaxLT applies the LT predicate on the "temperature_max" field.
func TemperatureMaxLT(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldTemperatureMax, v))
}

// TemperatureMaxLTE applies the LTE predicate on the "temperature_max" field.
func TemperatureMaxLTE(v int) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldTemperatureMax, v))
}

// TemperatureMaxIsNil applies the IsNil predicate on the "temperature_max" field.
func TemperatureMaxIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldTemperatureMax))
}

// TemperatureMaxNotNil applies the NotNil predicate on the "temperature_max" field.
func TemperatureMaxNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldTemperatureMax))
}

// BillOfLadingNumberEQ applies the EQ predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberNEQ applies the NEQ predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberNEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberIn applies the In predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldBillOfLadingNumber, vs...))
}

// BillOfLadingNumberNotIn applies the NotIn predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberNotIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldBillOfLadingNumber, vs...))
}

// BillOfLadingNumberGT applies the GT predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberGT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberGTE applies the GTE predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberGTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberLT applies the LT predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberLT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberLTE applies the LTE predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberLTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberContains applies the Contains predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberContains(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContains(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberHasPrefix applies the HasPrefix predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasPrefix(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberHasSuffix applies the HasSuffix predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasSuffix(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberIsNil applies the IsNil predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldBillOfLadingNumber))
}

// BillOfLadingNumberNotNil applies the NotNil predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldBillOfLadingNumber))
}

// BillOfLadingNumberEqualFold applies the EqualFold predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEqualFold(FieldBillOfLadingNumber, v))
}

// BillOfLadingNumberContainsFold applies the ContainsFold predicate on the "bill_of_lading_number" field.
func BillOfLadingNumberContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContainsFold(FieldBillOfLadingNumber, v))
}

// ConsigneeReferenceNumberEQ applies the EQ predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberNEQ applies the NEQ predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberNEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberIn applies the In predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldConsigneeReferenceNumber, vs...))
}

// ConsigneeReferenceNumberNotIn applies the NotIn predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberNotIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldConsigneeReferenceNumber, vs...))
}

// ConsigneeReferenceNumberGT applies the GT predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberGT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberGTE applies the GTE predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberGTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberLT applies the LT predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberLT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberLTE applies the LTE predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberLTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberContains applies the Contains predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberContains(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContains(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberHasPrefix applies the HasPrefix predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasPrefix(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberHasSuffix applies the HasSuffix predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasSuffix(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberIsNil applies the IsNil predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldConsigneeReferenceNumber))
}

// ConsigneeReferenceNumberNotNil applies the NotNil predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldConsigneeReferenceNumber))
}

// ConsigneeReferenceNumberEqualFold applies the EqualFold predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEqualFold(FieldConsigneeReferenceNumber, v))
}

// ConsigneeReferenceNumberContainsFold applies the ContainsFold predicate on the "consignee_reference_number" field.
func ConsigneeReferenceNumberContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContainsFold(FieldConsigneeReferenceNumber, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContainsFold(FieldComment, v))
}

// VoidedCommentEQ applies the EQ predicate on the "voided_comment" field.
func VoidedCommentEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldVoidedComment, v))
}

// VoidedCommentNEQ applies the NEQ predicate on the "voided_comment" field.
func VoidedCommentNEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldVoidedComment, v))
}

// VoidedCommentIn applies the In predicate on the "voided_comment" field.
func VoidedCommentIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldVoidedComment, vs...))
}

// VoidedCommentNotIn applies the NotIn predicate on the "voided_comment" field.
func VoidedCommentNotIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldVoidedComment, vs...))
}

// VoidedCommentGT applies the GT predicate on the "voided_comment" field.
func VoidedCommentGT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldVoidedComment, v))
}

// VoidedCommentGTE applies the GTE predicate on the "voided_comment" field.
func VoidedCommentGTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldVoidedComment, v))
}

// VoidedCommentLT applies the LT predicate on the "voided_comment" field.
func VoidedCommentLT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldVoidedComment, v))
}

// VoidedCommentLTE applies the LTE predicate on the "voided_comment" field.
func VoidedCommentLTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldVoidedComment, v))
}

// VoidedCommentContains applies the Contains predicate on the "voided_comment" field.
func VoidedCommentContains(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContains(FieldVoidedComment, v))
}

// VoidedCommentHasPrefix applies the HasPrefix predicate on the "voided_comment" field.
func VoidedCommentHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasPrefix(FieldVoidedComment, v))
}

// VoidedCommentHasSuffix applies the HasSuffix predicate on the "voided_comment" field.
func VoidedCommentHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasSuffix(FieldVoidedComment, v))
}

// VoidedCommentIsNil applies the IsNil predicate on the "voided_comment" field.
func VoidedCommentIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldVoidedComment))
}

// VoidedCommentNotNil applies the NotNil predicate on the "voided_comment" field.
func VoidedCommentNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldVoidedComment))
}

// VoidedCommentEqualFold applies the EqualFold predicate on the "voided_comment" field.
func VoidedCommentEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEqualFold(FieldVoidedComment, v))
}

// VoidedCommentContainsFold applies the ContainsFold predicate on the "voided_comment" field.
func VoidedCommentContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContainsFold(FieldVoidedComment, v))
}

// AutoRatedEQ applies the EQ predicate on the "auto_rated" field.
func AutoRatedEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldAutoRated, v))
}

// AutoRatedNEQ applies the NEQ predicate on the "auto_rated" field.
func AutoRatedNEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldAutoRated, v))
}

// CurrentSuffixEQ applies the EQ predicate on the "current_suffix" field.
func CurrentSuffixEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCurrentSuffix, v))
}

// CurrentSuffixNEQ applies the NEQ predicate on the "current_suffix" field.
func CurrentSuffixNEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldCurrentSuffix, v))
}

// CurrentSuffixIn applies the In predicate on the "current_suffix" field.
func CurrentSuffixIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldCurrentSuffix, vs...))
}

// CurrentSuffixNotIn applies the NotIn predicate on the "current_suffix" field.
func CurrentSuffixNotIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldCurrentSuffix, vs...))
}

// CurrentSuffixGT applies the GT predicate on the "current_suffix" field.
func CurrentSuffixGT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldCurrentSuffix, v))
}

// CurrentSuffixGTE applies the GTE predicate on the "current_suffix" field.
func CurrentSuffixGTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldCurrentSuffix, v))
}

// CurrentSuffixLT applies the LT predicate on the "current_suffix" field.
func CurrentSuffixLT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldCurrentSuffix, v))
}

// CurrentSuffixLTE applies the LTE predicate on the "current_suffix" field.
func CurrentSuffixLTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldCurrentSuffix, v))
}

// CurrentSuffixContains applies the Contains predicate on the "current_suffix" field.
func CurrentSuffixContains(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContains(FieldCurrentSuffix, v))
}

// CurrentSuffixHasPrefix applies the HasPrefix predicate on the "current_suffix" field.
func CurrentSuffixHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasPrefix(FieldCurrentSuffix, v))
}

// CurrentSuffixHasSuffix applies the HasSuffix predicate on the "current_suffix" field.
func CurrentSuffixHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasSuffix(FieldCurrentSuffix, v))
}

// CurrentSuffixIsNil applies the IsNil predicate on the "current_suffix" field.
func CurrentSuffixIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldCurrentSuffix))
}

// CurrentSuffixNotNil applies the NotNil predicate on the "current_suffix" field.
func CurrentSuffixNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldCurrentSuffix))
}

// CurrentSuffixEqualFold applies the EqualFold predicate on the "current_suffix" field.
func CurrentSuffixEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEqualFold(FieldCurrentSuffix, v))
}

// CurrentSuffixContainsFold applies the ContainsFold predicate on the "current_suffix" field.
func CurrentSuffixContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContainsFold(FieldCurrentSuffix, v))
}

// EntryMethodEQ applies the EQ predicate on the "entry_method" field.
func EntryMethodEQ(v EntryMethod) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldEntryMethod, v))
}

// EntryMethodNEQ applies the NEQ predicate on the "entry_method" field.
func EntryMethodNEQ(v EntryMethod) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldEntryMethod, v))
}

// EntryMethodIn applies the In predicate on the "entry_method" field.
func EntryMethodIn(vs ...EntryMethod) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldEntryMethod, vs...))
}

// EntryMethodNotIn applies the NotIn predicate on the "entry_method" field.
func EntryMethodNotIn(vs ...EntryMethod) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldEntryMethod, vs...))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Shipment {
	return predicate.Shipment(sql.FieldNotNull(FieldCreatedBy))
}

// IsHazardousEQ applies the EQ predicate on the "is_hazardous" field.
func IsHazardousEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldIsHazardous, v))
}

// IsHazardousNEQ applies the NEQ predicate on the "is_hazardous" field.
func IsHazardousNEQ(v bool) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldIsHazardous, v))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentType applies the HasEdge predicate on the "shipment_type" edge.
func HasShipmentType() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ShipmentTypeTable, ShipmentTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentTypeWith applies the HasEdge predicate on the "shipment_type" edge with a given conditions (other predicates).
func HasShipmentTypeWith(preds ...predicate.ShipmentType) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceType applies the HasEdge predicate on the "service_type" edge.
func HasServiceType() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServiceTypeTable, ServiceTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceTypeWith applies the HasEdge predicate on the "service_type" edge with a given conditions (other predicates).
func HasServiceTypeWith(preds ...predicate.ServiceType) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newServiceTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRevenueCode applies the HasEdge predicate on the "revenue_code" edge.
func HasRevenueCode() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RevenueCodeTable, RevenueCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRevenueCodeWith applies the HasEdge predicate on the "revenue_code" edge with a given conditions (other predicates).
func HasRevenueCodeWith(preds ...predicate.ServiceType) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newRevenueCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOriginLocation applies the HasEdge predicate on the "origin_location" edge.
func HasOriginLocation() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OriginLocationTable, OriginLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginLocationWith applies the HasEdge predicate on the "origin_location" edge with a given conditions (other predicates).
func HasOriginLocationWith(preds ...predicate.Location) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newOriginLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDestinationLocation applies the HasEdge predicate on the "destination_location" edge.
func HasDestinationLocation() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DestinationLocationTable, DestinationLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDestinationLocationWith applies the HasEdge predicate on the "destination_location" edge with a given conditions (other predicates).
func HasDestinationLocationWith(preds ...predicate.Location) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newDestinationLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrailerType applies the HasEdge predicate on the "trailer_type" edge.
func HasTrailerType() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TrailerTypeTable, TrailerTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrailerTypeWith applies the HasEdge predicate on the "trailer_type" edge with a given conditions (other predicates).
func HasTrailerTypeWith(preds ...predicate.EquipmentType) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newTrailerTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTractorType applies the HasEdge predicate on the "tractor_type" edge.
func HasTractorType() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TractorTypeTable, TractorTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTractorTypeWith applies the HasEdge predicate on the "tractor_type" edge with a given conditions (other predicates).
func HasTractorTypeWith(preds ...predicate.EquipmentType) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newTractorTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedByUser applies the HasEdge predicate on the "created_by_user" edge.
func HasCreatedByUser() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByUserTable, CreatedByUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByUserWith applies the HasEdge predicate on the "created_by_user" edge with a given conditions (other predicates).
func HasCreatedByUserWith(preds ...predicate.User) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newCreatedByUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shipment) predicate.Shipment {
	return predicate.Shipment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shipment) predicate.Shipment {
	return predicate.Shipment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shipment) predicate.Shipment {
	return predicate.Shipment(sql.NotPredicates(p))
}
