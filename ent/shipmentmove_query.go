// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/shipment"
	"github.com/emoss08/trenova/ent/shipmentmove"
	"github.com/emoss08/trenova/ent/stop"
	"github.com/emoss08/trenova/ent/tractor"
	"github.com/emoss08/trenova/ent/worker"
	"github.com/google/uuid"
)

// ShipmentMoveQuery is the builder for querying ShipmentMove entities.
type ShipmentMoveQuery struct {
	config
	ctx                 *QueryContext
	order               []shipmentmove.OrderOption
	inters              []Interceptor
	predicates          []predicate.ShipmentMove
	withBusinessUnit    *BusinessUnitQuery
	withOrganization    *OrganizationQuery
	withShipment        *ShipmentQuery
	withTractor         *TractorQuery
	withTrailer         *TractorQuery
	withPrimaryWorker   *WorkerQuery
	withSecondaryWorker *WorkerQuery
	withMoveStops       *StopQuery
	modifiers           []func(*sql.Selector)
	withNamedMoveStops  map[string]*StopQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShipmentMoveQuery builder.
func (smq *ShipmentMoveQuery) Where(ps ...predicate.ShipmentMove) *ShipmentMoveQuery {
	smq.predicates = append(smq.predicates, ps...)
	return smq
}

// Limit the number of records to be returned by this query.
func (smq *ShipmentMoveQuery) Limit(limit int) *ShipmentMoveQuery {
	smq.ctx.Limit = &limit
	return smq
}

// Offset to start from.
func (smq *ShipmentMoveQuery) Offset(offset int) *ShipmentMoveQuery {
	smq.ctx.Offset = &offset
	return smq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (smq *ShipmentMoveQuery) Unique(unique bool) *ShipmentMoveQuery {
	smq.ctx.Unique = &unique
	return smq
}

// Order specifies how the records should be ordered.
func (smq *ShipmentMoveQuery) Order(o ...shipmentmove.OrderOption) *ShipmentMoveQuery {
	smq.order = append(smq.order, o...)
	return smq
}

// QueryBusinessUnit chains the current query on the "business_unit" edge.
func (smq *ShipmentMoveQuery) QueryBusinessUnit() *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: smq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentmove.Table, shipmentmove.FieldID, selector),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentmove.BusinessUnitTable, shipmentmove.BusinessUnitColumn),
		)
		fromU = sqlgraph.SetNeighbors(smq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (smq *ShipmentMoveQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: smq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentmove.Table, shipmentmove.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentmove.OrganizationTable, shipmentmove.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(smq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipment chains the current query on the "shipment" edge.
func (smq *ShipmentMoveQuery) QueryShipment() *ShipmentQuery {
	query := (&ShipmentClient{config: smq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentmove.Table, shipmentmove.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmentmove.ShipmentTable, shipmentmove.ShipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(smq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTractor chains the current query on the "tractor" edge.
func (smq *ShipmentMoveQuery) QueryTractor() *TractorQuery {
	query := (&TractorClient{config: smq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentmove.Table, shipmentmove.FieldID, selector),
			sqlgraph.To(tractor.Table, tractor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentmove.TractorTable, shipmentmove.TractorColumn),
		)
		fromU = sqlgraph.SetNeighbors(smq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrailer chains the current query on the "trailer" edge.
func (smq *ShipmentMoveQuery) QueryTrailer() *TractorQuery {
	query := (&TractorClient{config: smq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentmove.Table, shipmentmove.FieldID, selector),
			sqlgraph.To(tractor.Table, tractor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentmove.TrailerTable, shipmentmove.TrailerColumn),
		)
		fromU = sqlgraph.SetNeighbors(smq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrimaryWorker chains the current query on the "primary_worker" edge.
func (smq *ShipmentMoveQuery) QueryPrimaryWorker() *WorkerQuery {
	query := (&WorkerClient{config: smq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentmove.Table, shipmentmove.FieldID, selector),
			sqlgraph.To(worker.Table, worker.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentmove.PrimaryWorkerTable, shipmentmove.PrimaryWorkerColumn),
		)
		fromU = sqlgraph.SetNeighbors(smq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySecondaryWorker chains the current query on the "secondary_worker" edge.
func (smq *ShipmentMoveQuery) QuerySecondaryWorker() *WorkerQuery {
	query := (&WorkerClient{config: smq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentmove.Table, shipmentmove.FieldID, selector),
			sqlgraph.To(worker.Table, worker.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentmove.SecondaryWorkerTable, shipmentmove.SecondaryWorkerColumn),
		)
		fromU = sqlgraph.SetNeighbors(smq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMoveStops chains the current query on the "move_stops" edge.
func (smq *ShipmentMoveQuery) QueryMoveStops() *StopQuery {
	query := (&StopClient{config: smq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentmove.Table, shipmentmove.FieldID, selector),
			sqlgraph.To(stop.Table, stop.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipmentmove.MoveStopsTable, shipmentmove.MoveStopsColumn),
		)
		fromU = sqlgraph.SetNeighbors(smq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ShipmentMove entity from the query.
// Returns a *NotFoundError when no ShipmentMove was found.
func (smq *ShipmentMoveQuery) First(ctx context.Context) (*ShipmentMove, error) {
	nodes, err := smq.Limit(1).All(setContextOp(ctx, smq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shipmentmove.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (smq *ShipmentMoveQuery) FirstX(ctx context.Context) *ShipmentMove {
	node, err := smq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ShipmentMove ID from the query.
// Returns a *NotFoundError when no ShipmentMove ID was found.
func (smq *ShipmentMoveQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = smq.Limit(1).IDs(setContextOp(ctx, smq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shipmentmove.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (smq *ShipmentMoveQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := smq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ShipmentMove entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ShipmentMove entity is found.
// Returns a *NotFoundError when no ShipmentMove entities are found.
func (smq *ShipmentMoveQuery) Only(ctx context.Context) (*ShipmentMove, error) {
	nodes, err := smq.Limit(2).All(setContextOp(ctx, smq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shipmentmove.Label}
	default:
		return nil, &NotSingularError{shipmentmove.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (smq *ShipmentMoveQuery) OnlyX(ctx context.Context) *ShipmentMove {
	node, err := smq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ShipmentMove ID in the query.
// Returns a *NotSingularError when more than one ShipmentMove ID is found.
// Returns a *NotFoundError when no entities are found.
func (smq *ShipmentMoveQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = smq.Limit(2).IDs(setContextOp(ctx, smq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shipmentmove.Label}
	default:
		err = &NotSingularError{shipmentmove.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (smq *ShipmentMoveQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := smq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ShipmentMoves.
func (smq *ShipmentMoveQuery) All(ctx context.Context) ([]*ShipmentMove, error) {
	ctx = setContextOp(ctx, smq.ctx, "All")
	if err := smq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ShipmentMove, *ShipmentMoveQuery]()
	return withInterceptors[[]*ShipmentMove](ctx, smq, qr, smq.inters)
}

// AllX is like All, but panics if an error occurs.
func (smq *ShipmentMoveQuery) AllX(ctx context.Context) []*ShipmentMove {
	nodes, err := smq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ShipmentMove IDs.
func (smq *ShipmentMoveQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if smq.ctx.Unique == nil && smq.path != nil {
		smq.Unique(true)
	}
	ctx = setContextOp(ctx, smq.ctx, "IDs")
	if err = smq.Select(shipmentmove.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (smq *ShipmentMoveQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := smq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (smq *ShipmentMoveQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, smq.ctx, "Count")
	if err := smq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, smq, querierCount[*ShipmentMoveQuery](), smq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (smq *ShipmentMoveQuery) CountX(ctx context.Context) int {
	count, err := smq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (smq *ShipmentMoveQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, smq.ctx, "Exist")
	switch _, err := smq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (smq *ShipmentMoveQuery) ExistX(ctx context.Context) bool {
	exist, err := smq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShipmentMoveQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (smq *ShipmentMoveQuery) Clone() *ShipmentMoveQuery {
	if smq == nil {
		return nil
	}
	return &ShipmentMoveQuery{
		config:              smq.config,
		ctx:                 smq.ctx.Clone(),
		order:               append([]shipmentmove.OrderOption{}, smq.order...),
		inters:              append([]Interceptor{}, smq.inters...),
		predicates:          append([]predicate.ShipmentMove{}, smq.predicates...),
		withBusinessUnit:    smq.withBusinessUnit.Clone(),
		withOrganization:    smq.withOrganization.Clone(),
		withShipment:        smq.withShipment.Clone(),
		withTractor:         smq.withTractor.Clone(),
		withTrailer:         smq.withTrailer.Clone(),
		withPrimaryWorker:   smq.withPrimaryWorker.Clone(),
		withSecondaryWorker: smq.withSecondaryWorker.Clone(),
		withMoveStops:       smq.withMoveStops.Clone(),
		// clone intermediate query.
		sql:  smq.sql.Clone(),
		path: smq.path,
	}
}

// WithBusinessUnit tells the query-builder to eager-load the nodes that are connected to
// the "business_unit" edge. The optional arguments are used to configure the query builder of the edge.
func (smq *ShipmentMoveQuery) WithBusinessUnit(opts ...func(*BusinessUnitQuery)) *ShipmentMoveQuery {
	query := (&BusinessUnitClient{config: smq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	smq.withBusinessUnit = query
	return smq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (smq *ShipmentMoveQuery) WithOrganization(opts ...func(*OrganizationQuery)) *ShipmentMoveQuery {
	query := (&OrganizationClient{config: smq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	smq.withOrganization = query
	return smq
}

// WithShipment tells the query-builder to eager-load the nodes that are connected to
// the "shipment" edge. The optional arguments are used to configure the query builder of the edge.
func (smq *ShipmentMoveQuery) WithShipment(opts ...func(*ShipmentQuery)) *ShipmentMoveQuery {
	query := (&ShipmentClient{config: smq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	smq.withShipment = query
	return smq
}

// WithTractor tells the query-builder to eager-load the nodes that are connected to
// the "tractor" edge. The optional arguments are used to configure the query builder of the edge.
func (smq *ShipmentMoveQuery) WithTractor(opts ...func(*TractorQuery)) *ShipmentMoveQuery {
	query := (&TractorClient{config: smq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	smq.withTractor = query
	return smq
}

// WithTrailer tells the query-builder to eager-load the nodes that are connected to
// the "trailer" edge. The optional arguments are used to configure the query builder of the edge.
func (smq *ShipmentMoveQuery) WithTrailer(opts ...func(*TractorQuery)) *ShipmentMoveQuery {
	query := (&TractorClient{config: smq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	smq.withTrailer = query
	return smq
}

// WithPrimaryWorker tells the query-builder to eager-load the nodes that are connected to
// the "primary_worker" edge. The optional arguments are used to configure the query builder of the edge.
func (smq *ShipmentMoveQuery) WithPrimaryWorker(opts ...func(*WorkerQuery)) *ShipmentMoveQuery {
	query := (&WorkerClient{config: smq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	smq.withPrimaryWorker = query
	return smq
}

// WithSecondaryWorker tells the query-builder to eager-load the nodes that are connected to
// the "secondary_worker" edge. The optional arguments are used to configure the query builder of the edge.
func (smq *ShipmentMoveQuery) WithSecondaryWorker(opts ...func(*WorkerQuery)) *ShipmentMoveQuery {
	query := (&WorkerClient{config: smq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	smq.withSecondaryWorker = query
	return smq
}

// WithMoveStops tells the query-builder to eager-load the nodes that are connected to
// the "move_stops" edge. The optional arguments are used to configure the query builder of the edge.
func (smq *ShipmentMoveQuery) WithMoveStops(opts ...func(*StopQuery)) *ShipmentMoveQuery {
	query := (&StopClient{config: smq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	smq.withMoveStops = query
	return smq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ShipmentMove.Query().
//		GroupBy(shipmentmove.FieldBusinessUnitID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (smq *ShipmentMoveQuery) GroupBy(field string, fields ...string) *ShipmentMoveGroupBy {
	smq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ShipmentMoveGroupBy{build: smq}
	grbuild.flds = &smq.ctx.Fields
	grbuild.label = shipmentmove.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BusinessUnitID uuid.UUID `json:"businessUnitId"`
//	}
//
//	client.ShipmentMove.Query().
//		Select(shipmentmove.FieldBusinessUnitID).
//		Scan(ctx, &v)
func (smq *ShipmentMoveQuery) Select(fields ...string) *ShipmentMoveSelect {
	smq.ctx.Fields = append(smq.ctx.Fields, fields...)
	sbuild := &ShipmentMoveSelect{ShipmentMoveQuery: smq}
	sbuild.label = shipmentmove.Label
	sbuild.flds, sbuild.scan = &smq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ShipmentMoveSelect configured with the given aggregations.
func (smq *ShipmentMoveQuery) Aggregate(fns ...AggregateFunc) *ShipmentMoveSelect {
	return smq.Select().Aggregate(fns...)
}

func (smq *ShipmentMoveQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range smq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, smq); err != nil {
				return err
			}
		}
	}
	for _, f := range smq.ctx.Fields {
		if !shipmentmove.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if smq.path != nil {
		prev, err := smq.path(ctx)
		if err != nil {
			return err
		}
		smq.sql = prev
	}
	return nil
}

func (smq *ShipmentMoveQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ShipmentMove, error) {
	var (
		nodes       = []*ShipmentMove{}
		_spec       = smq.querySpec()
		loadedTypes = [8]bool{
			smq.withBusinessUnit != nil,
			smq.withOrganization != nil,
			smq.withShipment != nil,
			smq.withTractor != nil,
			smq.withTrailer != nil,
			smq.withPrimaryWorker != nil,
			smq.withSecondaryWorker != nil,
			smq.withMoveStops != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ShipmentMove).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ShipmentMove{config: smq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(smq.modifiers) > 0 {
		_spec.Modifiers = smq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, smq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := smq.withBusinessUnit; query != nil {
		if err := smq.loadBusinessUnit(ctx, query, nodes, nil,
			func(n *ShipmentMove, e *BusinessUnit) { n.Edges.BusinessUnit = e }); err != nil {
			return nil, err
		}
	}
	if query := smq.withOrganization; query != nil {
		if err := smq.loadOrganization(ctx, query, nodes, nil,
			func(n *ShipmentMove, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	if query := smq.withShipment; query != nil {
		if err := smq.loadShipment(ctx, query, nodes, nil,
			func(n *ShipmentMove, e *Shipment) { n.Edges.Shipment = e }); err != nil {
			return nil, err
		}
	}
	if query := smq.withTractor; query != nil {
		if err := smq.loadTractor(ctx, query, nodes, nil,
			func(n *ShipmentMove, e *Tractor) { n.Edges.Tractor = e }); err != nil {
			return nil, err
		}
	}
	if query := smq.withTrailer; query != nil {
		if err := smq.loadTrailer(ctx, query, nodes, nil,
			func(n *ShipmentMove, e *Tractor) { n.Edges.Trailer = e }); err != nil {
			return nil, err
		}
	}
	if query := smq.withPrimaryWorker; query != nil {
		if err := smq.loadPrimaryWorker(ctx, query, nodes, nil,
			func(n *ShipmentMove, e *Worker) { n.Edges.PrimaryWorker = e }); err != nil {
			return nil, err
		}
	}
	if query := smq.withSecondaryWorker; query != nil {
		if err := smq.loadSecondaryWorker(ctx, query, nodes, nil,
			func(n *ShipmentMove, e *Worker) { n.Edges.SecondaryWorker = e }); err != nil {
			return nil, err
		}
	}
	if query := smq.withMoveStops; query != nil {
		if err := smq.loadMoveStops(ctx, query, nodes,
			func(n *ShipmentMove) { n.Edges.MoveStops = []*Stop{} },
			func(n *ShipmentMove, e *Stop) { n.Edges.MoveStops = append(n.Edges.MoveStops, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range smq.withNamedMoveStops {
		if err := smq.loadMoveStops(ctx, query, nodes,
			func(n *ShipmentMove) { n.appendNamedMoveStops(name) },
			func(n *ShipmentMove, e *Stop) { n.appendNamedMoveStops(name, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (smq *ShipmentMoveQuery) loadBusinessUnit(ctx context.Context, query *BusinessUnitQuery, nodes []*ShipmentMove, init func(*ShipmentMove), assign func(*ShipmentMove, *BusinessUnit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ShipmentMove)
	for i := range nodes {
		fk := nodes[i].BusinessUnitID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(businessunit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_unit_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (smq *ShipmentMoveQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*ShipmentMove, init func(*ShipmentMove), assign func(*ShipmentMove, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ShipmentMove)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (smq *ShipmentMoveQuery) loadShipment(ctx context.Context, query *ShipmentQuery, nodes []*ShipmentMove, init func(*ShipmentMove), assign func(*ShipmentMove, *Shipment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ShipmentMove)
	for i := range nodes {
		fk := nodes[i].ShipmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (smq *ShipmentMoveQuery) loadTractor(ctx context.Context, query *TractorQuery, nodes []*ShipmentMove, init func(*ShipmentMove), assign func(*ShipmentMove, *Tractor)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ShipmentMove)
	for i := range nodes {
		if nodes[i].TractorID == nil {
			continue
		}
		fk := *nodes[i].TractorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tractor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tractor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (smq *ShipmentMoveQuery) loadTrailer(ctx context.Context, query *TractorQuery, nodes []*ShipmentMove, init func(*ShipmentMove), assign func(*ShipmentMove, *Tractor)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ShipmentMove)
	for i := range nodes {
		if nodes[i].TrailerID == nil {
			continue
		}
		fk := *nodes[i].TrailerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tractor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "trailer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (smq *ShipmentMoveQuery) loadPrimaryWorker(ctx context.Context, query *WorkerQuery, nodes []*ShipmentMove, init func(*ShipmentMove), assign func(*ShipmentMove, *Worker)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ShipmentMove)
	for i := range nodes {
		if nodes[i].PrimaryWorkerID == nil {
			continue
		}
		fk := *nodes[i].PrimaryWorkerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(worker.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "primary_worker_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (smq *ShipmentMoveQuery) loadSecondaryWorker(ctx context.Context, query *WorkerQuery, nodes []*ShipmentMove, init func(*ShipmentMove), assign func(*ShipmentMove, *Worker)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ShipmentMove)
	for i := range nodes {
		if nodes[i].SecondaryWorkerID == nil {
			continue
		}
		fk := *nodes[i].SecondaryWorkerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(worker.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "secondary_worker_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (smq *ShipmentMoveQuery) loadMoveStops(ctx context.Context, query *StopQuery, nodes []*ShipmentMove, init func(*ShipmentMove), assign func(*ShipmentMove, *Stop)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ShipmentMove)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(stop.FieldShipmentMoveID)
	}
	query.Where(predicate.Stop(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipmentmove.MoveStopsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ShipmentMoveID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_move_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (smq *ShipmentMoveQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := smq.querySpec()
	if len(smq.modifiers) > 0 {
		_spec.Modifiers = smq.modifiers
	}
	_spec.Node.Columns = smq.ctx.Fields
	if len(smq.ctx.Fields) > 0 {
		_spec.Unique = smq.ctx.Unique != nil && *smq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, smq.driver, _spec)
}

func (smq *ShipmentMoveQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(shipmentmove.Table, shipmentmove.Columns, sqlgraph.NewFieldSpec(shipmentmove.FieldID, field.TypeUUID))
	_spec.From = smq.sql
	if unique := smq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if smq.path != nil {
		_spec.Unique = true
	}
	if fields := smq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentmove.FieldID)
		for i := range fields {
			if fields[i] != shipmentmove.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if smq.withBusinessUnit != nil {
			_spec.Node.AddColumnOnce(shipmentmove.FieldBusinessUnitID)
		}
		if smq.withOrganization != nil {
			_spec.Node.AddColumnOnce(shipmentmove.FieldOrganizationID)
		}
		if smq.withShipment != nil {
			_spec.Node.AddColumnOnce(shipmentmove.FieldShipmentID)
		}
		if smq.withTractor != nil {
			_spec.Node.AddColumnOnce(shipmentmove.FieldTractorID)
		}
		if smq.withTrailer != nil {
			_spec.Node.AddColumnOnce(shipmentmove.FieldTrailerID)
		}
		if smq.withPrimaryWorker != nil {
			_spec.Node.AddColumnOnce(shipmentmove.FieldPrimaryWorkerID)
		}
		if smq.withSecondaryWorker != nil {
			_spec.Node.AddColumnOnce(shipmentmove.FieldSecondaryWorkerID)
		}
	}
	if ps := smq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := smq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := smq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := smq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (smq *ShipmentMoveQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(smq.driver.Dialect())
	t1 := builder.Table(shipmentmove.Table)
	columns := smq.ctx.Fields
	if len(columns) == 0 {
		columns = shipmentmove.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if smq.sql != nil {
		selector = smq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if smq.ctx.Unique != nil && *smq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range smq.modifiers {
		m(selector)
	}
	for _, p := range smq.predicates {
		p(selector)
	}
	for _, p := range smq.order {
		p(selector)
	}
	if offset := smq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := smq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (smq *ShipmentMoveQuery) Modify(modifiers ...func(s *sql.Selector)) *ShipmentMoveSelect {
	smq.modifiers = append(smq.modifiers, modifiers...)
	return smq.Select()
}

// WithNamedMoveStops tells the query-builder to eager-load the nodes that are connected to the "move_stops"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (smq *ShipmentMoveQuery) WithNamedMoveStops(name string, opts ...func(*StopQuery)) *ShipmentMoveQuery {
	query := (&StopClient{config: smq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if smq.withNamedMoveStops == nil {
		smq.withNamedMoveStops = make(map[string]*StopQuery)
	}
	smq.withNamedMoveStops[name] = query
	return smq
}

// ShipmentMoveGroupBy is the group-by builder for ShipmentMove entities.
type ShipmentMoveGroupBy struct {
	selector
	build *ShipmentMoveQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (smgb *ShipmentMoveGroupBy) Aggregate(fns ...AggregateFunc) *ShipmentMoveGroupBy {
	smgb.fns = append(smgb.fns, fns...)
	return smgb
}

// Scan applies the selector query and scans the result into the given value.
func (smgb *ShipmentMoveGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, smgb.build.ctx, "GroupBy")
	if err := smgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentMoveQuery, *ShipmentMoveGroupBy](ctx, smgb.build, smgb, smgb.build.inters, v)
}

func (smgb *ShipmentMoveGroupBy) sqlScan(ctx context.Context, root *ShipmentMoveQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(smgb.fns))
	for _, fn := range smgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*smgb.flds)+len(smgb.fns))
		for _, f := range *smgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*smgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := smgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ShipmentMoveSelect is the builder for selecting fields of ShipmentMove entities.
type ShipmentMoveSelect struct {
	*ShipmentMoveQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sms *ShipmentMoveSelect) Aggregate(fns ...AggregateFunc) *ShipmentMoveSelect {
	sms.fns = append(sms.fns, fns...)
	return sms
}

// Scan applies the selector query and scans the result into the given value.
func (sms *ShipmentMoveSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sms.ctx, "Select")
	if err := sms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentMoveQuery, *ShipmentMoveSelect](ctx, sms.ShipmentMoveQuery, sms, sms.inters, v)
}

func (sms *ShipmentMoveSelect) sqlScan(ctx context.Context, root *ShipmentMoveQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sms.fns))
	for _, fn := range sms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sms *ShipmentMoveSelect) Modify(modifiers ...func(s *sql.Selector)) *ShipmentMoveSelect {
	sms.modifiers = append(sms.modifiers, modifiers...)
	return sms
}
