// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/revenuecode"
	"github.com/google/uuid"
)

// RevenueCodeUpdate is the builder for updating RevenueCode entities.
type RevenueCodeUpdate struct {
	config
	hooks     []Hook
	mutation  *RevenueCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RevenueCodeUpdate builder.
func (rcu *RevenueCodeUpdate) Where(ps ...predicate.RevenueCode) *RevenueCodeUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetUpdatedAt sets the "updated_at" field.
func (rcu *RevenueCodeUpdate) SetUpdatedAt(t time.Time) *RevenueCodeUpdate {
	rcu.mutation.SetUpdatedAt(t)
	return rcu
}

// SetStatus sets the "status" field.
func (rcu *RevenueCodeUpdate) SetStatus(r revenuecode.Status) *RevenueCodeUpdate {
	rcu.mutation.SetStatus(r)
	return rcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rcu *RevenueCodeUpdate) SetNillableStatus(r *revenuecode.Status) *RevenueCodeUpdate {
	if r != nil {
		rcu.SetStatus(*r)
	}
	return rcu
}

// SetCode sets the "code" field.
func (rcu *RevenueCodeUpdate) SetCode(s string) *RevenueCodeUpdate {
	rcu.mutation.SetCode(s)
	return rcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (rcu *RevenueCodeUpdate) SetNillableCode(s *string) *RevenueCodeUpdate {
	if s != nil {
		rcu.SetCode(*s)
	}
	return rcu
}

// SetDescription sets the "description" field.
func (rcu *RevenueCodeUpdate) SetDescription(s string) *RevenueCodeUpdate {
	rcu.mutation.SetDescription(s)
	return rcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rcu *RevenueCodeUpdate) SetNillableDescription(s *string) *RevenueCodeUpdate {
	if s != nil {
		rcu.SetDescription(*s)
	}
	return rcu
}

// SetExpenseAccountID sets the "expense_account_id" field.
func (rcu *RevenueCodeUpdate) SetExpenseAccountID(u uuid.UUID) *RevenueCodeUpdate {
	rcu.mutation.SetExpenseAccountID(u)
	return rcu
}

// SetNillableExpenseAccountID sets the "expense_account_id" field if the given value is not nil.
func (rcu *RevenueCodeUpdate) SetNillableExpenseAccountID(u *uuid.UUID) *RevenueCodeUpdate {
	if u != nil {
		rcu.SetExpenseAccountID(*u)
	}
	return rcu
}

// ClearExpenseAccountID clears the value of the "expense_account_id" field.
func (rcu *RevenueCodeUpdate) ClearExpenseAccountID() *RevenueCodeUpdate {
	rcu.mutation.ClearExpenseAccountID()
	return rcu
}

// SetRevenueAccountID sets the "revenue_account_id" field.
func (rcu *RevenueCodeUpdate) SetRevenueAccountID(u uuid.UUID) *RevenueCodeUpdate {
	rcu.mutation.SetRevenueAccountID(u)
	return rcu
}

// SetNillableRevenueAccountID sets the "revenue_account_id" field if the given value is not nil.
func (rcu *RevenueCodeUpdate) SetNillableRevenueAccountID(u *uuid.UUID) *RevenueCodeUpdate {
	if u != nil {
		rcu.SetRevenueAccountID(*u)
	}
	return rcu
}

// ClearRevenueAccountID clears the value of the "revenue_account_id" field.
func (rcu *RevenueCodeUpdate) ClearRevenueAccountID() *RevenueCodeUpdate {
	rcu.mutation.ClearRevenueAccountID()
	return rcu
}

// SetExpenseAccount sets the "expense_account" edge to the GeneralLedgerAccount entity.
func (rcu *RevenueCodeUpdate) SetExpenseAccount(g *GeneralLedgerAccount) *RevenueCodeUpdate {
	return rcu.SetExpenseAccountID(g.ID)
}

// SetRevenueAccount sets the "revenue_account" edge to the GeneralLedgerAccount entity.
func (rcu *RevenueCodeUpdate) SetRevenueAccount(g *GeneralLedgerAccount) *RevenueCodeUpdate {
	return rcu.SetRevenueAccountID(g.ID)
}

// Mutation returns the RevenueCodeMutation object of the builder.
func (rcu *RevenueCodeUpdate) Mutation() *RevenueCodeMutation {
	return rcu.mutation
}

// ClearExpenseAccount clears the "expense_account" edge to the GeneralLedgerAccount entity.
func (rcu *RevenueCodeUpdate) ClearExpenseAccount() *RevenueCodeUpdate {
	rcu.mutation.ClearExpenseAccount()
	return rcu
}

// ClearRevenueAccount clears the "revenue_account" edge to the GeneralLedgerAccount entity.
func (rcu *RevenueCodeUpdate) ClearRevenueAccount() *RevenueCodeUpdate {
	rcu.mutation.ClearRevenueAccount()
	return rcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RevenueCodeUpdate) Save(ctx context.Context) (int, error) {
	if err := rcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RevenueCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RevenueCodeUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RevenueCodeUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcu *RevenueCodeUpdate) defaults() error {
	if _, ok := rcu.mutation.UpdatedAt(); !ok {
		if revenuecode.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized revenuecode.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := revenuecode.UpdateDefaultUpdatedAt()
		rcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rcu *RevenueCodeUpdate) check() error {
	if v, ok := rcu.mutation.Status(); ok {
		if err := revenuecode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RevenueCode.status": %w`, err)}
		}
	}
	if v, ok := rcu.mutation.Code(); ok {
		if err := revenuecode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "RevenueCode.code": %w`, err)}
		}
	}
	if v, ok := rcu.mutation.Description(); ok {
		if err := revenuecode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RevenueCode.description": %w`, err)}
		}
	}
	if _, ok := rcu.mutation.BusinessUnitID(); rcu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RevenueCode.business_unit"`)
	}
	if _, ok := rcu.mutation.OrganizationID(); rcu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RevenueCode.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcu *RevenueCodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RevenueCodeUpdate {
	rcu.modifiers = append(rcu.modifiers, modifiers...)
	return rcu
}

func (rcu *RevenueCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(revenuecode.Table, revenuecode.Columns, sqlgraph.NewFieldSpec(revenuecode.FieldID, field.TypeUUID))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.UpdatedAt(); ok {
		_spec.SetField(revenuecode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rcu.mutation.Status(); ok {
		_spec.SetField(revenuecode.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := rcu.mutation.Code(); ok {
		_spec.SetField(revenuecode.FieldCode, field.TypeString, value)
	}
	if value, ok := rcu.mutation.Description(); ok {
		_spec.SetField(revenuecode.FieldDescription, field.TypeString, value)
	}
	if rcu.mutation.ExpenseAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.ExpenseAccountTable,
			Columns: []string{revenuecode.ExpenseAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ExpenseAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.ExpenseAccountTable,
			Columns: []string{revenuecode.ExpenseAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.RevenueAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.RevenueAccountTable,
			Columns: []string{revenuecode.RevenueAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RevenueAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.RevenueAccountTable,
			Columns: []string{revenuecode.RevenueAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{revenuecode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RevenueCodeUpdateOne is the builder for updating a single RevenueCode entity.
type RevenueCodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RevenueCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (rcuo *RevenueCodeUpdateOne) SetUpdatedAt(t time.Time) *RevenueCodeUpdateOne {
	rcuo.mutation.SetUpdatedAt(t)
	return rcuo
}

// SetStatus sets the "status" field.
func (rcuo *RevenueCodeUpdateOne) SetStatus(r revenuecode.Status) *RevenueCodeUpdateOne {
	rcuo.mutation.SetStatus(r)
	return rcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rcuo *RevenueCodeUpdateOne) SetNillableStatus(r *revenuecode.Status) *RevenueCodeUpdateOne {
	if r != nil {
		rcuo.SetStatus(*r)
	}
	return rcuo
}

// SetCode sets the "code" field.
func (rcuo *RevenueCodeUpdateOne) SetCode(s string) *RevenueCodeUpdateOne {
	rcuo.mutation.SetCode(s)
	return rcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (rcuo *RevenueCodeUpdateOne) SetNillableCode(s *string) *RevenueCodeUpdateOne {
	if s != nil {
		rcuo.SetCode(*s)
	}
	return rcuo
}

// SetDescription sets the "description" field.
func (rcuo *RevenueCodeUpdateOne) SetDescription(s string) *RevenueCodeUpdateOne {
	rcuo.mutation.SetDescription(s)
	return rcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rcuo *RevenueCodeUpdateOne) SetNillableDescription(s *string) *RevenueCodeUpdateOne {
	if s != nil {
		rcuo.SetDescription(*s)
	}
	return rcuo
}

// SetExpenseAccountID sets the "expense_account_id" field.
func (rcuo *RevenueCodeUpdateOne) SetExpenseAccountID(u uuid.UUID) *RevenueCodeUpdateOne {
	rcuo.mutation.SetExpenseAccountID(u)
	return rcuo
}

// SetNillableExpenseAccountID sets the "expense_account_id" field if the given value is not nil.
func (rcuo *RevenueCodeUpdateOne) SetNillableExpenseAccountID(u *uuid.UUID) *RevenueCodeUpdateOne {
	if u != nil {
		rcuo.SetExpenseAccountID(*u)
	}
	return rcuo
}

// ClearExpenseAccountID clears the value of the "expense_account_id" field.
func (rcuo *RevenueCodeUpdateOne) ClearExpenseAccountID() *RevenueCodeUpdateOne {
	rcuo.mutation.ClearExpenseAccountID()
	return rcuo
}

// SetRevenueAccountID sets the "revenue_account_id" field.
func (rcuo *RevenueCodeUpdateOne) SetRevenueAccountID(u uuid.UUID) *RevenueCodeUpdateOne {
	rcuo.mutation.SetRevenueAccountID(u)
	return rcuo
}

// SetNillableRevenueAccountID sets the "revenue_account_id" field if the given value is not nil.
func (rcuo *RevenueCodeUpdateOne) SetNillableRevenueAccountID(u *uuid.UUID) *RevenueCodeUpdateOne {
	if u != nil {
		rcuo.SetRevenueAccountID(*u)
	}
	return rcuo
}

// ClearRevenueAccountID clears the value of the "revenue_account_id" field.
func (rcuo *RevenueCodeUpdateOne) ClearRevenueAccountID() *RevenueCodeUpdateOne {
	rcuo.mutation.ClearRevenueAccountID()
	return rcuo
}

// SetExpenseAccount sets the "expense_account" edge to the GeneralLedgerAccount entity.
func (rcuo *RevenueCodeUpdateOne) SetExpenseAccount(g *GeneralLedgerAccount) *RevenueCodeUpdateOne {
	return rcuo.SetExpenseAccountID(g.ID)
}

// SetRevenueAccount sets the "revenue_account" edge to the GeneralLedgerAccount entity.
func (rcuo *RevenueCodeUpdateOne) SetRevenueAccount(g *GeneralLedgerAccount) *RevenueCodeUpdateOne {
	return rcuo.SetRevenueAccountID(g.ID)
}

// Mutation returns the RevenueCodeMutation object of the builder.
func (rcuo *RevenueCodeUpdateOne) Mutation() *RevenueCodeMutation {
	return rcuo.mutation
}

// ClearExpenseAccount clears the "expense_account" edge to the GeneralLedgerAccount entity.
func (rcuo *RevenueCodeUpdateOne) ClearExpenseAccount() *RevenueCodeUpdateOne {
	rcuo.mutation.ClearExpenseAccount()
	return rcuo
}

// ClearRevenueAccount clears the "revenue_account" edge to the GeneralLedgerAccount entity.
func (rcuo *RevenueCodeUpdateOne) ClearRevenueAccount() *RevenueCodeUpdateOne {
	rcuo.mutation.ClearRevenueAccount()
	return rcuo
}

// Where appends a list predicates to the RevenueCodeUpdate builder.
func (rcuo *RevenueCodeUpdateOne) Where(ps ...predicate.RevenueCode) *RevenueCodeUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RevenueCodeUpdateOne) Select(field string, fields ...string) *RevenueCodeUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RevenueCode entity.
func (rcuo *RevenueCodeUpdateOne) Save(ctx context.Context) (*RevenueCode, error) {
	if err := rcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RevenueCodeUpdateOne) SaveX(ctx context.Context) *RevenueCode {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RevenueCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RevenueCodeUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcuo *RevenueCodeUpdateOne) defaults() error {
	if _, ok := rcuo.mutation.UpdatedAt(); !ok {
		if revenuecode.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized revenuecode.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := revenuecode.UpdateDefaultUpdatedAt()
		rcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rcuo *RevenueCodeUpdateOne) check() error {
	if v, ok := rcuo.mutation.Status(); ok {
		if err := revenuecode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RevenueCode.status": %w`, err)}
		}
	}
	if v, ok := rcuo.mutation.Code(); ok {
		if err := revenuecode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "RevenueCode.code": %w`, err)}
		}
	}
	if v, ok := rcuo.mutation.Description(); ok {
		if err := revenuecode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RevenueCode.description": %w`, err)}
		}
	}
	if _, ok := rcuo.mutation.BusinessUnitID(); rcuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RevenueCode.business_unit"`)
	}
	if _, ok := rcuo.mutation.OrganizationID(); rcuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RevenueCode.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcuo *RevenueCodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RevenueCodeUpdateOne {
	rcuo.modifiers = append(rcuo.modifiers, modifiers...)
	return rcuo
}

func (rcuo *RevenueCodeUpdateOne) sqlSave(ctx context.Context) (_node *RevenueCode, err error) {
	if err := rcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(revenuecode.Table, revenuecode.Columns, sqlgraph.NewFieldSpec(revenuecode.FieldID, field.TypeUUID))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RevenueCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, revenuecode.FieldID)
		for _, f := range fields {
			if !revenuecode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != revenuecode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(revenuecode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rcuo.mutation.Status(); ok {
		_spec.SetField(revenuecode.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := rcuo.mutation.Code(); ok {
		_spec.SetField(revenuecode.FieldCode, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.Description(); ok {
		_spec.SetField(revenuecode.FieldDescription, field.TypeString, value)
	}
	if rcuo.mutation.ExpenseAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.ExpenseAccountTable,
			Columns: []string{revenuecode.ExpenseAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ExpenseAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.ExpenseAccountTable,
			Columns: []string{revenuecode.ExpenseAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.RevenueAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.RevenueAccountTable,
			Columns: []string{revenuecode.RevenueAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RevenueAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.RevenueAccountTable,
			Columns: []string{revenuecode.RevenueAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rcuo.modifiers...)
	_node = &RevenueCode{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{revenuecode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
