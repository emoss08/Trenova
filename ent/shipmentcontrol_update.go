// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/shipmentcontrol"
	"github.com/google/uuid"
)

// ShipmentControlUpdate is the builder for updating ShipmentControl entities.
type ShipmentControlUpdate struct {
	config
	hooks     []Hook
	mutation  *ShipmentControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShipmentControlUpdate builder.
func (scu *ShipmentControlUpdate) Where(ps ...predicate.ShipmentControl) *ShipmentControlUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *ShipmentControlUpdate) SetUpdatedAt(t time.Time) *ShipmentControlUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetAutoRateShipment sets the "auto_rate_shipment" field.
func (scu *ShipmentControlUpdate) SetAutoRateShipment(b bool) *ShipmentControlUpdate {
	scu.mutation.SetAutoRateShipment(b)
	return scu
}

// SetNillableAutoRateShipment sets the "auto_rate_shipment" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableAutoRateShipment(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetAutoRateShipment(*b)
	}
	return scu
}

// SetCalculateDistance sets the "calculate_distance" field.
func (scu *ShipmentControlUpdate) SetCalculateDistance(b bool) *ShipmentControlUpdate {
	scu.mutation.SetCalculateDistance(b)
	return scu
}

// SetNillableCalculateDistance sets the "calculate_distance" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableCalculateDistance(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetCalculateDistance(*b)
	}
	return scu
}

// SetEnforceRevCode sets the "enforce_rev_code" field.
func (scu *ShipmentControlUpdate) SetEnforceRevCode(b bool) *ShipmentControlUpdate {
	scu.mutation.SetEnforceRevCode(b)
	return scu
}

// SetNillableEnforceRevCode sets the "enforce_rev_code" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableEnforceRevCode(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetEnforceRevCode(*b)
	}
	return scu
}

// SetEnforceVoidedComm sets the "enforce_voided_comm" field.
func (scu *ShipmentControlUpdate) SetEnforceVoidedComm(b bool) *ShipmentControlUpdate {
	scu.mutation.SetEnforceVoidedComm(b)
	return scu
}

// SetNillableEnforceVoidedComm sets the "enforce_voided_comm" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableEnforceVoidedComm(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetEnforceVoidedComm(*b)
	}
	return scu
}

// SetGenerateRoutes sets the "generate_routes" field.
func (scu *ShipmentControlUpdate) SetGenerateRoutes(b bool) *ShipmentControlUpdate {
	scu.mutation.SetGenerateRoutes(b)
	return scu
}

// SetNillableGenerateRoutes sets the "generate_routes" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableGenerateRoutes(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetGenerateRoutes(*b)
	}
	return scu
}

// SetEnforceCommodity sets the "enforce_commodity" field.
func (scu *ShipmentControlUpdate) SetEnforceCommodity(b bool) *ShipmentControlUpdate {
	scu.mutation.SetEnforceCommodity(b)
	return scu
}

// SetNillableEnforceCommodity sets the "enforce_commodity" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableEnforceCommodity(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetEnforceCommodity(*b)
	}
	return scu
}

// SetAutoSequenceStops sets the "auto_sequence_stops" field.
func (scu *ShipmentControlUpdate) SetAutoSequenceStops(b bool) *ShipmentControlUpdate {
	scu.mutation.SetAutoSequenceStops(b)
	return scu
}

// SetNillableAutoSequenceStops sets the "auto_sequence_stops" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableAutoSequenceStops(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetAutoSequenceStops(*b)
	}
	return scu
}

// SetAutoShipmentTotal sets the "auto_shipment_total" field.
func (scu *ShipmentControlUpdate) SetAutoShipmentTotal(b bool) *ShipmentControlUpdate {
	scu.mutation.SetAutoShipmentTotal(b)
	return scu
}

// SetNillableAutoShipmentTotal sets the "auto_shipment_total" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableAutoShipmentTotal(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetAutoShipmentTotal(*b)
	}
	return scu
}

// SetEnforceOriginDestination sets the "enforce_origin_destination" field.
func (scu *ShipmentControlUpdate) SetEnforceOriginDestination(b bool) *ShipmentControlUpdate {
	scu.mutation.SetEnforceOriginDestination(b)
	return scu
}

// SetNillableEnforceOriginDestination sets the "enforce_origin_destination" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableEnforceOriginDestination(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetEnforceOriginDestination(*b)
	}
	return scu
}

// SetCheckForDuplicateBol sets the "check_for_duplicate_bol" field.
func (scu *ShipmentControlUpdate) SetCheckForDuplicateBol(b bool) *ShipmentControlUpdate {
	scu.mutation.SetCheckForDuplicateBol(b)
	return scu
}

// SetNillableCheckForDuplicateBol sets the "check_for_duplicate_bol" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableCheckForDuplicateBol(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetCheckForDuplicateBol(*b)
	}
	return scu
}

// SetSendPlacardInfo sets the "send_placard_info" field.
func (scu *ShipmentControlUpdate) SetSendPlacardInfo(b bool) *ShipmentControlUpdate {
	scu.mutation.SetSendPlacardInfo(b)
	return scu
}

// SetNillableSendPlacardInfo sets the "send_placard_info" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableSendPlacardInfo(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetSendPlacardInfo(*b)
	}
	return scu
}

// SetEnforceHazmatSegRules sets the "enforce_hazmat_seg_rules" field.
func (scu *ShipmentControlUpdate) SetEnforceHazmatSegRules(b bool) *ShipmentControlUpdate {
	scu.mutation.SetEnforceHazmatSegRules(b)
	return scu
}

// SetNillableEnforceHazmatSegRules sets the "enforce_hazmat_seg_rules" field if the given value is not nil.
func (scu *ShipmentControlUpdate) SetNillableEnforceHazmatSegRules(b *bool) *ShipmentControlUpdate {
	if b != nil {
		scu.SetEnforceHazmatSegRules(*b)
	}
	return scu
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (scu *ShipmentControlUpdate) SetOrganizationID(id uuid.UUID) *ShipmentControlUpdate {
	scu.mutation.SetOrganizationID(id)
	return scu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (scu *ShipmentControlUpdate) SetOrganization(o *Organization) *ShipmentControlUpdate {
	return scu.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (scu *ShipmentControlUpdate) SetBusinessUnitID(id uuid.UUID) *ShipmentControlUpdate {
	scu.mutation.SetBusinessUnitID(id)
	return scu
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (scu *ShipmentControlUpdate) SetBusinessUnit(b *BusinessUnit) *ShipmentControlUpdate {
	return scu.SetBusinessUnitID(b.ID)
}

// Mutation returns the ShipmentControlMutation object of the builder.
func (scu *ShipmentControlUpdate) Mutation() *ShipmentControlMutation {
	return scu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (scu *ShipmentControlUpdate) ClearOrganization() *ShipmentControlUpdate {
	scu.mutation.ClearOrganization()
	return scu
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (scu *ShipmentControlUpdate) ClearBusinessUnit() *ShipmentControlUpdate {
	scu.mutation.ClearBusinessUnit()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ShipmentControlUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ShipmentControlUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ShipmentControlUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ShipmentControlUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ShipmentControlUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := shipmentcontrol.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *ShipmentControlUpdate) check() error {
	if _, ok := scu.mutation.OrganizationID(); scu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentControl.organization"`)
	}
	if _, ok := scu.mutation.BusinessUnitID(); scu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scu *ShipmentControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentControlUpdate {
	scu.modifiers = append(scu.modifiers, modifiers...)
	return scu
}

func (scu *ShipmentControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentcontrol.Table, shipmentcontrol.Columns, sqlgraph.NewFieldSpec(shipmentcontrol.FieldID, field.TypeUUID))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.AutoRateShipment(); ok {
		_spec.SetField(shipmentcontrol.FieldAutoRateShipment, field.TypeBool, value)
	}
	if value, ok := scu.mutation.CalculateDistance(); ok {
		_spec.SetField(shipmentcontrol.FieldCalculateDistance, field.TypeBool, value)
	}
	if value, ok := scu.mutation.EnforceRevCode(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceRevCode, field.TypeBool, value)
	}
	if value, ok := scu.mutation.EnforceVoidedComm(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceVoidedComm, field.TypeBool, value)
	}
	if value, ok := scu.mutation.GenerateRoutes(); ok {
		_spec.SetField(shipmentcontrol.FieldGenerateRoutes, field.TypeBool, value)
	}
	if value, ok := scu.mutation.EnforceCommodity(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceCommodity, field.TypeBool, value)
	}
	if value, ok := scu.mutation.AutoSequenceStops(); ok {
		_spec.SetField(shipmentcontrol.FieldAutoSequenceStops, field.TypeBool, value)
	}
	if value, ok := scu.mutation.AutoShipmentTotal(); ok {
		_spec.SetField(shipmentcontrol.FieldAutoShipmentTotal, field.TypeBool, value)
	}
	if value, ok := scu.mutation.EnforceOriginDestination(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceOriginDestination, field.TypeBool, value)
	}
	if value, ok := scu.mutation.CheckForDuplicateBol(); ok {
		_spec.SetField(shipmentcontrol.FieldCheckForDuplicateBol, field.TypeBool, value)
	}
	if value, ok := scu.mutation.SendPlacardInfo(); ok {
		_spec.SetField(shipmentcontrol.FieldSendPlacardInfo, field.TypeBool, value)
	}
	if value, ok := scu.mutation.EnforceHazmatSegRules(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceHazmatSegRules, field.TypeBool, value)
	}
	if scu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentcontrol.OrganizationTable,
			Columns: []string{shipmentcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentcontrol.OrganizationTable,
			Columns: []string{shipmentcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentcontrol.BusinessUnitTable,
			Columns: []string{shipmentcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentcontrol.BusinessUnitTable,
			Columns: []string{shipmentcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ShipmentControlUpdateOne is the builder for updating a single ShipmentControl entity.
type ShipmentControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShipmentControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *ShipmentControlUpdateOne) SetUpdatedAt(t time.Time) *ShipmentControlUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetAutoRateShipment sets the "auto_rate_shipment" field.
func (scuo *ShipmentControlUpdateOne) SetAutoRateShipment(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetAutoRateShipment(b)
	return scuo
}

// SetNillableAutoRateShipment sets the "auto_rate_shipment" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableAutoRateShipment(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetAutoRateShipment(*b)
	}
	return scuo
}

// SetCalculateDistance sets the "calculate_distance" field.
func (scuo *ShipmentControlUpdateOne) SetCalculateDistance(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetCalculateDistance(b)
	return scuo
}

// SetNillableCalculateDistance sets the "calculate_distance" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableCalculateDistance(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetCalculateDistance(*b)
	}
	return scuo
}

// SetEnforceRevCode sets the "enforce_rev_code" field.
func (scuo *ShipmentControlUpdateOne) SetEnforceRevCode(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetEnforceRevCode(b)
	return scuo
}

// SetNillableEnforceRevCode sets the "enforce_rev_code" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableEnforceRevCode(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetEnforceRevCode(*b)
	}
	return scuo
}

// SetEnforceVoidedComm sets the "enforce_voided_comm" field.
func (scuo *ShipmentControlUpdateOne) SetEnforceVoidedComm(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetEnforceVoidedComm(b)
	return scuo
}

// SetNillableEnforceVoidedComm sets the "enforce_voided_comm" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableEnforceVoidedComm(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetEnforceVoidedComm(*b)
	}
	return scuo
}

// SetGenerateRoutes sets the "generate_routes" field.
func (scuo *ShipmentControlUpdateOne) SetGenerateRoutes(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetGenerateRoutes(b)
	return scuo
}

// SetNillableGenerateRoutes sets the "generate_routes" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableGenerateRoutes(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetGenerateRoutes(*b)
	}
	return scuo
}

// SetEnforceCommodity sets the "enforce_commodity" field.
func (scuo *ShipmentControlUpdateOne) SetEnforceCommodity(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetEnforceCommodity(b)
	return scuo
}

// SetNillableEnforceCommodity sets the "enforce_commodity" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableEnforceCommodity(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetEnforceCommodity(*b)
	}
	return scuo
}

// SetAutoSequenceStops sets the "auto_sequence_stops" field.
func (scuo *ShipmentControlUpdateOne) SetAutoSequenceStops(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetAutoSequenceStops(b)
	return scuo
}

// SetNillableAutoSequenceStops sets the "auto_sequence_stops" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableAutoSequenceStops(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetAutoSequenceStops(*b)
	}
	return scuo
}

// SetAutoShipmentTotal sets the "auto_shipment_total" field.
func (scuo *ShipmentControlUpdateOne) SetAutoShipmentTotal(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetAutoShipmentTotal(b)
	return scuo
}

// SetNillableAutoShipmentTotal sets the "auto_shipment_total" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableAutoShipmentTotal(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetAutoShipmentTotal(*b)
	}
	return scuo
}

// SetEnforceOriginDestination sets the "enforce_origin_destination" field.
func (scuo *ShipmentControlUpdateOne) SetEnforceOriginDestination(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetEnforceOriginDestination(b)
	return scuo
}

// SetNillableEnforceOriginDestination sets the "enforce_origin_destination" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableEnforceOriginDestination(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetEnforceOriginDestination(*b)
	}
	return scuo
}

// SetCheckForDuplicateBol sets the "check_for_duplicate_bol" field.
func (scuo *ShipmentControlUpdateOne) SetCheckForDuplicateBol(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetCheckForDuplicateBol(b)
	return scuo
}

// SetNillableCheckForDuplicateBol sets the "check_for_duplicate_bol" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableCheckForDuplicateBol(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetCheckForDuplicateBol(*b)
	}
	return scuo
}

// SetSendPlacardInfo sets the "send_placard_info" field.
func (scuo *ShipmentControlUpdateOne) SetSendPlacardInfo(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetSendPlacardInfo(b)
	return scuo
}

// SetNillableSendPlacardInfo sets the "send_placard_info" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableSendPlacardInfo(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetSendPlacardInfo(*b)
	}
	return scuo
}

// SetEnforceHazmatSegRules sets the "enforce_hazmat_seg_rules" field.
func (scuo *ShipmentControlUpdateOne) SetEnforceHazmatSegRules(b bool) *ShipmentControlUpdateOne {
	scuo.mutation.SetEnforceHazmatSegRules(b)
	return scuo
}

// SetNillableEnforceHazmatSegRules sets the "enforce_hazmat_seg_rules" field if the given value is not nil.
func (scuo *ShipmentControlUpdateOne) SetNillableEnforceHazmatSegRules(b *bool) *ShipmentControlUpdateOne {
	if b != nil {
		scuo.SetEnforceHazmatSegRules(*b)
	}
	return scuo
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (scuo *ShipmentControlUpdateOne) SetOrganizationID(id uuid.UUID) *ShipmentControlUpdateOne {
	scuo.mutation.SetOrganizationID(id)
	return scuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (scuo *ShipmentControlUpdateOne) SetOrganization(o *Organization) *ShipmentControlUpdateOne {
	return scuo.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (scuo *ShipmentControlUpdateOne) SetBusinessUnitID(id uuid.UUID) *ShipmentControlUpdateOne {
	scuo.mutation.SetBusinessUnitID(id)
	return scuo
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (scuo *ShipmentControlUpdateOne) SetBusinessUnit(b *BusinessUnit) *ShipmentControlUpdateOne {
	return scuo.SetBusinessUnitID(b.ID)
}

// Mutation returns the ShipmentControlMutation object of the builder.
func (scuo *ShipmentControlUpdateOne) Mutation() *ShipmentControlMutation {
	return scuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (scuo *ShipmentControlUpdateOne) ClearOrganization() *ShipmentControlUpdateOne {
	scuo.mutation.ClearOrganization()
	return scuo
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (scuo *ShipmentControlUpdateOne) ClearBusinessUnit() *ShipmentControlUpdateOne {
	scuo.mutation.ClearBusinessUnit()
	return scuo
}

// Where appends a list predicates to the ShipmentControlUpdate builder.
func (scuo *ShipmentControlUpdateOne) Where(ps ...predicate.ShipmentControl) *ShipmentControlUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ShipmentControlUpdateOne) Select(field string, fields ...string) *ShipmentControlUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ShipmentControl entity.
func (scuo *ShipmentControlUpdateOne) Save(ctx context.Context) (*ShipmentControl, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ShipmentControlUpdateOne) SaveX(ctx context.Context) *ShipmentControl {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ShipmentControlUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ShipmentControlUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ShipmentControlUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := shipmentcontrol.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *ShipmentControlUpdateOne) check() error {
	if _, ok := scuo.mutation.OrganizationID(); scuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentControl.organization"`)
	}
	if _, ok := scuo.mutation.BusinessUnitID(); scuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scuo *ShipmentControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentControlUpdateOne {
	scuo.modifiers = append(scuo.modifiers, modifiers...)
	return scuo
}

func (scuo *ShipmentControlUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentControl, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentcontrol.Table, shipmentcontrol.Columns, sqlgraph.NewFieldSpec(shipmentcontrol.FieldID, field.TypeUUID))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentcontrol.FieldID)
		for _, f := range fields {
			if !shipmentcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.AutoRateShipment(); ok {
		_spec.SetField(shipmentcontrol.FieldAutoRateShipment, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.CalculateDistance(); ok {
		_spec.SetField(shipmentcontrol.FieldCalculateDistance, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.EnforceRevCode(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceRevCode, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.EnforceVoidedComm(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceVoidedComm, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.GenerateRoutes(); ok {
		_spec.SetField(shipmentcontrol.FieldGenerateRoutes, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.EnforceCommodity(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceCommodity, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.AutoSequenceStops(); ok {
		_spec.SetField(shipmentcontrol.FieldAutoSequenceStops, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.AutoShipmentTotal(); ok {
		_spec.SetField(shipmentcontrol.FieldAutoShipmentTotal, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.EnforceOriginDestination(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceOriginDestination, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.CheckForDuplicateBol(); ok {
		_spec.SetField(shipmentcontrol.FieldCheckForDuplicateBol, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.SendPlacardInfo(); ok {
		_spec.SetField(shipmentcontrol.FieldSendPlacardInfo, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.EnforceHazmatSegRules(); ok {
		_spec.SetField(shipmentcontrol.FieldEnforceHazmatSegRules, field.TypeBool, value)
	}
	if scuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentcontrol.OrganizationTable,
			Columns: []string{shipmentcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentcontrol.OrganizationTable,
			Columns: []string{shipmentcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentcontrol.BusinessUnitTable,
			Columns: []string{shipmentcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentcontrol.BusinessUnitTable,
			Columns: []string{shipmentcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scuo.modifiers...)
	_node = &ShipmentControl{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
