// Code generated by ent, DO NOT EDIT.

package shipmentcomment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldLTE(FieldID, id))
}

// ShipmentID applies equality check predicate on the "shipment_id" field. It's identical to ShipmentIDEQ.
func ShipmentID(v uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldShipmentID, v))
}

// CommentTypeID applies equality check predicate on the "comment_type_id" field. It's identical to CommentTypeIDEQ.
func CommentTypeID(v uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldCommentTypeID, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldComment, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldCreatedBy, v))
}

// ShipmentIDEQ applies the EQ predicate on the "shipment_id" field.
func ShipmentIDEQ(v uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldShipmentID, v))
}

// ShipmentIDNEQ applies the NEQ predicate on the "shipment_id" field.
func ShipmentIDNEQ(v uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNEQ(FieldShipmentID, v))
}

// ShipmentIDIn applies the In predicate on the "shipment_id" field.
func ShipmentIDIn(vs ...uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldIn(FieldShipmentID, vs...))
}

// ShipmentIDNotIn applies the NotIn predicate on the "shipment_id" field.
func ShipmentIDNotIn(vs ...uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNotIn(FieldShipmentID, vs...))
}

// CommentTypeIDEQ applies the EQ predicate on the "comment_type_id" field.
func CommentTypeIDEQ(v uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldCommentTypeID, v))
}

// CommentTypeIDNEQ applies the NEQ predicate on the "comment_type_id" field.
func CommentTypeIDNEQ(v uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNEQ(FieldCommentTypeID, v))
}

// CommentTypeIDIn applies the In predicate on the "comment_type_id" field.
func CommentTypeIDIn(vs ...uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldIn(FieldCommentTypeID, vs...))
}

// CommentTypeIDNotIn applies the NotIn predicate on the "comment_type_id" field.
func CommentTypeIDNotIn(vs ...uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNotIn(FieldCommentTypeID, vs...))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldContainsFold(FieldComment, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// HasShipment applies the HasEdge predicate on the "shipment" edge.
func HasShipment() predicate.ShipmentComment {
	return predicate.ShipmentComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShipmentTable, ShipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentWith applies the HasEdge predicate on the "shipment" edge with a given conditions (other predicates).
func HasShipmentWith(preds ...predicate.Shipment) predicate.ShipmentComment {
	return predicate.ShipmentComment(func(s *sql.Selector) {
		step := newShipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommentType applies the HasEdge predicate on the "comment_type" edge.
func HasCommentType() predicate.ShipmentComment {
	return predicate.ShipmentComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommentTypeTable, CommentTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentTypeWith applies the HasEdge predicate on the "comment_type" edge with a given conditions (other predicates).
func HasCommentTypeWith(preds ...predicate.CommentType) predicate.ShipmentComment {
	return predicate.ShipmentComment(func(s *sql.Selector) {
		step := newCommentTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedByUser applies the HasEdge predicate on the "created_by_user" edge.
func HasCreatedByUser() predicate.ShipmentComment {
	return predicate.ShipmentComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByUserTable, CreatedByUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByUserWith applies the HasEdge predicate on the "created_by_user" edge with a given conditions (other predicates).
func HasCreatedByUserWith(preds ...predicate.User) predicate.ShipmentComment {
	return predicate.ShipmentComment(func(s *sql.Selector) {
		step := newCreatedByUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentComment) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentComment) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentComment) predicate.ShipmentComment {
	return predicate.ShipmentComment(sql.NotPredicates(p))
}
