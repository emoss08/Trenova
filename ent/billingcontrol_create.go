// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/billingcontrol"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// BillingControlCreate is the builder for creating a BillingControl entity.
type BillingControlCreate struct {
	config
	mutation *BillingControlMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bcc *BillingControlCreate) SetCreatedAt(t time.Time) *BillingControlCreate {
	bcc.mutation.SetCreatedAt(t)
	return bcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableCreatedAt(t *time.Time) *BillingControlCreate {
	if t != nil {
		bcc.SetCreatedAt(*t)
	}
	return bcc
}

// SetUpdatedAt sets the "updated_at" field.
func (bcc *BillingControlCreate) SetUpdatedAt(t time.Time) *BillingControlCreate {
	bcc.mutation.SetUpdatedAt(t)
	return bcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableUpdatedAt(t *time.Time) *BillingControlCreate {
	if t != nil {
		bcc.SetUpdatedAt(*t)
	}
	return bcc
}

// SetRemoveBillingHistory sets the "remove_billing_history" field.
func (bcc *BillingControlCreate) SetRemoveBillingHistory(b bool) *BillingControlCreate {
	bcc.mutation.SetRemoveBillingHistory(b)
	return bcc
}

// SetNillableRemoveBillingHistory sets the "remove_billing_history" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableRemoveBillingHistory(b *bool) *BillingControlCreate {
	if b != nil {
		bcc.SetRemoveBillingHistory(*b)
	}
	return bcc
}

// SetAutoBillShipment sets the "auto_bill_shipment" field.
func (bcc *BillingControlCreate) SetAutoBillShipment(b bool) *BillingControlCreate {
	bcc.mutation.SetAutoBillShipment(b)
	return bcc
}

// SetNillableAutoBillShipment sets the "auto_bill_shipment" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableAutoBillShipment(b *bool) *BillingControlCreate {
	if b != nil {
		bcc.SetAutoBillShipment(*b)
	}
	return bcc
}

// SetAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field.
func (bcc *BillingControlCreate) SetAutoMarkReadyToBill(b bool) *BillingControlCreate {
	bcc.mutation.SetAutoMarkReadyToBill(b)
	return bcc
}

// SetNillableAutoMarkReadyToBill sets the "auto_mark_ready_to_bill" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableAutoMarkReadyToBill(b *bool) *BillingControlCreate {
	if b != nil {
		bcc.SetAutoMarkReadyToBill(*b)
	}
	return bcc
}

// SetValidateCustomerRates sets the "validate_customer_rates" field.
func (bcc *BillingControlCreate) SetValidateCustomerRates(b bool) *BillingControlCreate {
	bcc.mutation.SetValidateCustomerRates(b)
	return bcc
}

// SetNillableValidateCustomerRates sets the "validate_customer_rates" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableValidateCustomerRates(b *bool) *BillingControlCreate {
	if b != nil {
		bcc.SetValidateCustomerRates(*b)
	}
	return bcc
}

// SetAutoBillCriteria sets the "auto_bill_criteria" field.
func (bcc *BillingControlCreate) SetAutoBillCriteria(bbc billingcontrol.AutoBillCriteria) *BillingControlCreate {
	bcc.mutation.SetAutoBillCriteria(bbc)
	return bcc
}

// SetNillableAutoBillCriteria sets the "auto_bill_criteria" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableAutoBillCriteria(bbc *billingcontrol.AutoBillCriteria) *BillingControlCreate {
	if bbc != nil {
		bcc.SetAutoBillCriteria(*bbc)
	}
	return bcc
}

// SetShipmentTransferCriteria sets the "shipment_transfer_criteria" field.
func (bcc *BillingControlCreate) SetShipmentTransferCriteria(btc billingcontrol.ShipmentTransferCriteria) *BillingControlCreate {
	bcc.mutation.SetShipmentTransferCriteria(btc)
	return bcc
}

// SetNillableShipmentTransferCriteria sets the "shipment_transfer_criteria" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableShipmentTransferCriteria(btc *billingcontrol.ShipmentTransferCriteria) *BillingControlCreate {
	if btc != nil {
		bcc.SetShipmentTransferCriteria(*btc)
	}
	return bcc
}

// SetEnforceCustomerBilling sets the "enforce_customer_billing" field.
func (bcc *BillingControlCreate) SetEnforceCustomerBilling(b bool) *BillingControlCreate {
	bcc.mutation.SetEnforceCustomerBilling(b)
	return bcc
}

// SetNillableEnforceCustomerBilling sets the "enforce_customer_billing" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableEnforceCustomerBilling(b *bool) *BillingControlCreate {
	if b != nil {
		bcc.SetEnforceCustomerBilling(*b)
	}
	return bcc
}

// SetID sets the "id" field.
func (bcc *BillingControlCreate) SetID(u uuid.UUID) *BillingControlCreate {
	bcc.mutation.SetID(u)
	return bcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bcc *BillingControlCreate) SetNillableID(u *uuid.UUID) *BillingControlCreate {
	if u != nil {
		bcc.SetID(*u)
	}
	return bcc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (bcc *BillingControlCreate) SetOrganizationID(id uuid.UUID) *BillingControlCreate {
	bcc.mutation.SetOrganizationID(id)
	return bcc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (bcc *BillingControlCreate) SetOrganization(o *Organization) *BillingControlCreate {
	return bcc.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (bcc *BillingControlCreate) SetBusinessUnitID(id uuid.UUID) *BillingControlCreate {
	bcc.mutation.SetBusinessUnitID(id)
	return bcc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (bcc *BillingControlCreate) SetBusinessUnit(b *BusinessUnit) *BillingControlCreate {
	return bcc.SetBusinessUnitID(b.ID)
}

// Mutation returns the BillingControlMutation object of the builder.
func (bcc *BillingControlCreate) Mutation() *BillingControlMutation {
	return bcc.mutation
}

// Save creates the BillingControl in the database.
func (bcc *BillingControlCreate) Save(ctx context.Context) (*BillingControl, error) {
	bcc.defaults()
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BillingControlCreate) SaveX(ctx context.Context) *BillingControl {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BillingControlCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BillingControlCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcc *BillingControlCreate) defaults() {
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		v := billingcontrol.DefaultCreatedAt
		bcc.mutation.SetCreatedAt(v)
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		v := billingcontrol.DefaultUpdatedAt
		bcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bcc.mutation.RemoveBillingHistory(); !ok {
		v := billingcontrol.DefaultRemoveBillingHistory
		bcc.mutation.SetRemoveBillingHistory(v)
	}
	if _, ok := bcc.mutation.AutoBillShipment(); !ok {
		v := billingcontrol.DefaultAutoBillShipment
		bcc.mutation.SetAutoBillShipment(v)
	}
	if _, ok := bcc.mutation.AutoMarkReadyToBill(); !ok {
		v := billingcontrol.DefaultAutoMarkReadyToBill
		bcc.mutation.SetAutoMarkReadyToBill(v)
	}
	if _, ok := bcc.mutation.ValidateCustomerRates(); !ok {
		v := billingcontrol.DefaultValidateCustomerRates
		bcc.mutation.SetValidateCustomerRates(v)
	}
	if _, ok := bcc.mutation.AutoBillCriteria(); !ok {
		v := billingcontrol.DefaultAutoBillCriteria
		bcc.mutation.SetAutoBillCriteria(v)
	}
	if _, ok := bcc.mutation.ShipmentTransferCriteria(); !ok {
		v := billingcontrol.DefaultShipmentTransferCriteria
		bcc.mutation.SetShipmentTransferCriteria(v)
	}
	if _, ok := bcc.mutation.EnforceCustomerBilling(); !ok {
		v := billingcontrol.DefaultEnforceCustomerBilling
		bcc.mutation.SetEnforceCustomerBilling(v)
	}
	if _, ok := bcc.mutation.ID(); !ok {
		v := billingcontrol.DefaultID()
		bcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BillingControlCreate) check() error {
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BillingControl.created_at"`)}
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BillingControl.updated_at"`)}
	}
	if _, ok := bcc.mutation.RemoveBillingHistory(); !ok {
		return &ValidationError{Name: "remove_billing_history", err: errors.New(`ent: missing required field "BillingControl.remove_billing_history"`)}
	}
	if _, ok := bcc.mutation.AutoBillShipment(); !ok {
		return &ValidationError{Name: "auto_bill_shipment", err: errors.New(`ent: missing required field "BillingControl.auto_bill_shipment"`)}
	}
	if _, ok := bcc.mutation.AutoMarkReadyToBill(); !ok {
		return &ValidationError{Name: "auto_mark_ready_to_bill", err: errors.New(`ent: missing required field "BillingControl.auto_mark_ready_to_bill"`)}
	}
	if _, ok := bcc.mutation.ValidateCustomerRates(); !ok {
		return &ValidationError{Name: "validate_customer_rates", err: errors.New(`ent: missing required field "BillingControl.validate_customer_rates"`)}
	}
	if _, ok := bcc.mutation.AutoBillCriteria(); !ok {
		return &ValidationError{Name: "auto_bill_criteria", err: errors.New(`ent: missing required field "BillingControl.auto_bill_criteria"`)}
	}
	if v, ok := bcc.mutation.AutoBillCriteria(); ok {
		if err := billingcontrol.AutoBillCriteriaValidator(v); err != nil {
			return &ValidationError{Name: "auto_bill_criteria", err: fmt.Errorf(`ent: validator failed for field "BillingControl.auto_bill_criteria": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.ShipmentTransferCriteria(); !ok {
		return &ValidationError{Name: "shipment_transfer_criteria", err: errors.New(`ent: missing required field "BillingControl.shipment_transfer_criteria"`)}
	}
	if v, ok := bcc.mutation.ShipmentTransferCriteria(); ok {
		if err := billingcontrol.ShipmentTransferCriteriaValidator(v); err != nil {
			return &ValidationError{Name: "shipment_transfer_criteria", err: fmt.Errorf(`ent: validator failed for field "BillingControl.shipment_transfer_criteria": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.EnforceCustomerBilling(); !ok {
		return &ValidationError{Name: "enforce_customer_billing", err: errors.New(`ent: missing required field "BillingControl.enforce_customer_billing"`)}
	}
	if _, ok := bcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "BillingControl.organization"`)}
	}
	if _, ok := bcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "BillingControl.business_unit"`)}
	}
	return nil
}

func (bcc *BillingControlCreate) sqlSave(ctx context.Context) (*BillingControl, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BillingControlCreate) createSpec() (*BillingControl, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingControl{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(billingcontrol.Table, sqlgraph.NewFieldSpec(billingcontrol.FieldID, field.TypeUUID))
	)
	if id, ok := bcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bcc.mutation.CreatedAt(); ok {
		_spec.SetField(billingcontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bcc.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bcc.mutation.RemoveBillingHistory(); ok {
		_spec.SetField(billingcontrol.FieldRemoveBillingHistory, field.TypeBool, value)
		_node.RemoveBillingHistory = value
	}
	if value, ok := bcc.mutation.AutoBillShipment(); ok {
		_spec.SetField(billingcontrol.FieldAutoBillShipment, field.TypeBool, value)
		_node.AutoBillShipment = value
	}
	if value, ok := bcc.mutation.AutoMarkReadyToBill(); ok {
		_spec.SetField(billingcontrol.FieldAutoMarkReadyToBill, field.TypeBool, value)
		_node.AutoMarkReadyToBill = value
	}
	if value, ok := bcc.mutation.ValidateCustomerRates(); ok {
		_spec.SetField(billingcontrol.FieldValidateCustomerRates, field.TypeBool, value)
		_node.ValidateCustomerRates = value
	}
	if value, ok := bcc.mutation.AutoBillCriteria(); ok {
		_spec.SetField(billingcontrol.FieldAutoBillCriteria, field.TypeEnum, value)
		_node.AutoBillCriteria = value
	}
	if value, ok := bcc.mutation.ShipmentTransferCriteria(); ok {
		_spec.SetField(billingcontrol.FieldShipmentTransferCriteria, field.TypeEnum, value)
		_node.ShipmentTransferCriteria = value
	}
	if value, ok := bcc.mutation.EnforceCustomerBilling(); ok {
		_spec.SetField(billingcontrol.FieldEnforceCustomerBilling, field.TypeBool, value)
		_node.EnforceCustomerBilling = value
	}
	if nodes := bcc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingcontrol.OrganizationTable,
			Columns: []string{billingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bcc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingcontrol.BusinessUnitTable,
			Columns: []string{billingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_unit_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BillingControlCreateBulk is the builder for creating many BillingControl entities in bulk.
type BillingControlCreateBulk struct {
	config
	err      error
	builders []*BillingControlCreate
}

// Save creates the BillingControl entities in the database.
func (bccb *BillingControlCreateBulk) Save(ctx context.Context) ([]*BillingControl, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BillingControl, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BillingControlCreateBulk) SaveX(ctx context.Context) []*BillingControl {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BillingControlCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BillingControlCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}
