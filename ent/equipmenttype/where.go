// Code generated by ent, DO NOT EDIT.

package equipmenttype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldVersion, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldDescription, v))
}

// CostPerMile applies equality check predicate on the "cost_per_mile" field. It's identical to CostPerMileEQ.
func CostPerMile(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldCostPerMile, v))
}

// FixedCost applies equality check predicate on the "fixed_cost" field. It's identical to FixedCostEQ.
func FixedCost(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldFixedCost, v))
}

// VariableCost applies equality check predicate on the "variable_cost" field. It's identical to VariableCostEQ.
func VariableCost(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldVariableCost, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldHeight, v))
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldLength, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldWidth, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldWeight, v))
}

// IdlingFuelUsage applies equality check predicate on the "idling_fuel_usage" field. It's identical to IdlingFuelUsageEQ.
func IdlingFuelUsage(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldIdlingFuelUsage, v))
}

// ExemptFromTolls applies equality check predicate on the "exempt_from_tolls" field. It's identical to ExemptFromTollsEQ.
func ExemptFromTolls(v bool) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldExemptFromTolls, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldColor, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldVersion, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldStatus, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldContainsFold(FieldDescription, v))
}

// CostPerMileEQ applies the EQ predicate on the "cost_per_mile" field.
func CostPerMileEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldCostPerMile, v))
}

// CostPerMileNEQ applies the NEQ predicate on the "cost_per_mile" field.
func CostPerMileNEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldCostPerMile, v))
}

// CostPerMileIn applies the In predicate on the "cost_per_mile" field.
func CostPerMileIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldCostPerMile, vs...))
}

// CostPerMileNotIn applies the NotIn predicate on the "cost_per_mile" field.
func CostPerMileNotIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldCostPerMile, vs...))
}

// CostPerMileGT applies the GT predicate on the "cost_per_mile" field.
func CostPerMileGT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldCostPerMile, v))
}

// CostPerMileGTE applies the GTE predicate on the "cost_per_mile" field.
func CostPerMileGTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldCostPerMile, v))
}

// CostPerMileLT applies the LT predicate on the "cost_per_mile" field.
func CostPerMileLT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldCostPerMile, v))
}

// CostPerMileLTE applies the LTE predicate on the "cost_per_mile" field.
func CostPerMileLTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldCostPerMile, v))
}

// CostPerMileIsNil applies the IsNil predicate on the "cost_per_mile" field.
func CostPerMileIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldCostPerMile))
}

// CostPerMileNotNil applies the NotNil predicate on the "cost_per_mile" field.
func CostPerMileNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldCostPerMile))
}

// EquipmentClassEQ applies the EQ predicate on the "equipment_class" field.
func EquipmentClassEQ(v EquipmentClass) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldEquipmentClass, v))
}

// EquipmentClassNEQ applies the NEQ predicate on the "equipment_class" field.
func EquipmentClassNEQ(v EquipmentClass) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldEquipmentClass, v))
}

// EquipmentClassIn applies the In predicate on the "equipment_class" field.
func EquipmentClassIn(vs ...EquipmentClass) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldEquipmentClass, vs...))
}

// EquipmentClassNotIn applies the NotIn predicate on the "equipment_class" field.
func EquipmentClassNotIn(vs ...EquipmentClass) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldEquipmentClass, vs...))
}

// FixedCostEQ applies the EQ predicate on the "fixed_cost" field.
func FixedCostEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldFixedCost, v))
}

// FixedCostNEQ applies the NEQ predicate on the "fixed_cost" field.
func FixedCostNEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldFixedCost, v))
}

// FixedCostIn applies the In predicate on the "fixed_cost" field.
func FixedCostIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldFixedCost, vs...))
}

// FixedCostNotIn applies the NotIn predicate on the "fixed_cost" field.
func FixedCostNotIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldFixedCost, vs...))
}

// FixedCostGT applies the GT predicate on the "fixed_cost" field.
func FixedCostGT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldFixedCost, v))
}

// FixedCostGTE applies the GTE predicate on the "fixed_cost" field.
func FixedCostGTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldFixedCost, v))
}

// FixedCostLT applies the LT predicate on the "fixed_cost" field.
func FixedCostLT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldFixedCost, v))
}

// FixedCostLTE applies the LTE predicate on the "fixed_cost" field.
func FixedCostLTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldFixedCost, v))
}

// FixedCostIsNil applies the IsNil predicate on the "fixed_cost" field.
func FixedCostIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldFixedCost))
}

// FixedCostNotNil applies the NotNil predicate on the "fixed_cost" field.
func FixedCostNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldFixedCost))
}

// VariableCostEQ applies the EQ predicate on the "variable_cost" field.
func VariableCostEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldVariableCost, v))
}

// VariableCostNEQ applies the NEQ predicate on the "variable_cost" field.
func VariableCostNEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldVariableCost, v))
}

// VariableCostIn applies the In predicate on the "variable_cost" field.
func VariableCostIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldVariableCost, vs...))
}

// VariableCostNotIn applies the NotIn predicate on the "variable_cost" field.
func VariableCostNotIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldVariableCost, vs...))
}

// VariableCostGT applies the GT predicate on the "variable_cost" field.
func VariableCostGT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldVariableCost, v))
}

// VariableCostGTE applies the GTE predicate on the "variable_cost" field.
func VariableCostGTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldVariableCost, v))
}

// VariableCostLT applies the LT predicate on the "variable_cost" field.
func VariableCostLT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldVariableCost, v))
}

// VariableCostLTE applies the LTE predicate on the "variable_cost" field.
func VariableCostLTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldVariableCost, v))
}

// VariableCostIsNil applies the IsNil predicate on the "variable_cost" field.
func VariableCostIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldVariableCost))
}

// VariableCostNotNil applies the NotNil predicate on the "variable_cost" field.
func VariableCostNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldVariableCost))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldHeight))
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldLength, v))
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldLength, v))
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldLength, vs...))
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldLength, vs...))
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldLength, v))
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldLength, v))
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldLength, v))
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldLength, v))
}

// LengthIsNil applies the IsNil predicate on the "length" field.
func LengthIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldLength))
}

// LengthNotNil applies the NotNil predicate on the "length" field.
func LengthNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldLength))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldWidth, v))
}

// WidthIsNil applies the IsNil predicate on the "width" field.
func WidthIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldWidth))
}

// WidthNotNil applies the NotNil predicate on the "width" field.
func WidthNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldWidth))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldWeight))
}

// IdlingFuelUsageEQ applies the EQ predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldIdlingFuelUsage, v))
}

// IdlingFuelUsageNEQ applies the NEQ predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageNEQ(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldIdlingFuelUsage, v))
}

// IdlingFuelUsageIn applies the In predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldIdlingFuelUsage, vs...))
}

// IdlingFuelUsageNotIn applies the NotIn predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageNotIn(vs ...float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldIdlingFuelUsage, vs...))
}

// IdlingFuelUsageGT applies the GT predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageGT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldIdlingFuelUsage, v))
}

// IdlingFuelUsageGTE applies the GTE predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageGTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldIdlingFuelUsage, v))
}

// IdlingFuelUsageLT applies the LT predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageLT(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldIdlingFuelUsage, v))
}

// IdlingFuelUsageLTE applies the LTE predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageLTE(v float64) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldIdlingFuelUsage, v))
}

// IdlingFuelUsageIsNil applies the IsNil predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldIdlingFuelUsage))
}

// IdlingFuelUsageNotNil applies the NotNil predicate on the "idling_fuel_usage" field.
func IdlingFuelUsageNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldIdlingFuelUsage))
}

// ExemptFromTollsEQ applies the EQ predicate on the "exempt_from_tolls" field.
func ExemptFromTollsEQ(v bool) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldExemptFromTolls, v))
}

// ExemptFromTollsNEQ applies the NEQ predicate on the "exempt_from_tolls" field.
func ExemptFromTollsNEQ(v bool) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldExemptFromTolls, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldHasSuffix(FieldColor, v))
}

// ColorIsNil applies the IsNil predicate on the "color" field.
func ColorIsNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldIsNull(FieldColor))
}

// ColorNotNil applies the NotNil predicate on the "color" field.
func ColorNotNil() predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldNotNull(FieldColor))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.EquipmentType {
	return predicate.EquipmentType(sql.FieldContainsFold(FieldColor, v))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.EquipmentType {
	return predicate.EquipmentType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.EquipmentType {
	return predicate.EquipmentType(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.EquipmentType {
	return predicate.EquipmentType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.EquipmentType {
	return predicate.EquipmentType(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EquipmentType) predicate.EquipmentType {
	return predicate.EquipmentType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EquipmentType) predicate.EquipmentType {
	return predicate.EquipmentType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EquipmentType) predicate.EquipmentType {
	return predicate.EquipmentType(sql.NotPredicates(p))
}
