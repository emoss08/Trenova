// Code generated by ent, DO NOT EDIT.

package equipmenttype

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the equipmenttype type in the database.
	Label = "equipment_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCostPerMile holds the string denoting the cost_per_mile field in the database.
	FieldCostPerMile = "cost_per_mile"
	// FieldEquipmentClass holds the string denoting the equipment_class field in the database.
	FieldEquipmentClass = "equipment_class"
	// FieldFixedCost holds the string denoting the fixed_cost field in the database.
	FieldFixedCost = "fixed_cost"
	// FieldVariableCost holds the string denoting the variable_cost field in the database.
	FieldVariableCost = "variable_cost"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldLength holds the string denoting the length field in the database.
	FieldLength = "length"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldIdlingFuelUsage holds the string denoting the idling_fuel_usage field in the database.
	FieldIdlingFuelUsage = "idling_fuel_usage"
	// FieldExemptFromTolls holds the string denoting the exempt_from_tolls field in the database.
	FieldExemptFromTolls = "exempt_from_tolls"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// Table holds the table name of the equipmenttype in the database.
	Table = "equipment_types"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "equipment_types"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "equipment_types"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
)

// Columns holds all SQL columns for equipmenttype fields.
var Columns = []string{
	FieldID,
	FieldBusinessUnitID,
	FieldOrganizationID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldName,
	FieldDescription,
	FieldCostPerMile,
	FieldEquipmentClass,
	FieldFixedCost,
	FieldVariableCost,
	FieldHeight,
	FieldLength,
	FieldWidth,
	FieldWeight,
	FieldIdlingFuelUsage,
	FieldExemptFromTolls,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultExemptFromTolls holds the default value on creation for the "exempt_from_tolls" field.
	DefaultExemptFromTolls bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusA is the default value of the Status enum.
const DefaultStatus = StatusA

// Status values.
const (
	StatusA Status = "A"
	StatusI Status = "I"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusA, StatusI:
		return nil
	default:
		return fmt.Errorf("equipmenttype: invalid enum value for status field: %q", s)
	}
}

// EquipmentClass defines the type for the "equipment_class" enum field.
type EquipmentClass string

// EquipmentClassUndefined is the default value of the EquipmentClass enum.
const DefaultEquipmentClass = EquipmentClassUndefined

// EquipmentClass values.
const (
	EquipmentClassUndefined EquipmentClass = "Undefined"
	EquipmentClassCar       EquipmentClass = "Car"
	EquipmentClassVan       EquipmentClass = "Van"
	EquipmentClassPickup    EquipmentClass = "Pickup"
	EquipmentClassStraight  EquipmentClass = "Straight"
	EquipmentClassTractor   EquipmentClass = "Tractor"
	EquipmentClassTrailer   EquipmentClass = "Trailer"
	EquipmentClassContainer EquipmentClass = "Container"
	EquipmentClassChassis   EquipmentClass = "Chassis"
	EquipmentClassOther     EquipmentClass = "Other"
)

func (ec EquipmentClass) String() string {
	return string(ec)
}

// EquipmentClassValidator is a validator for the "equipment_class" field enum values. It is called by the builders before save.
func EquipmentClassValidator(ec EquipmentClass) error {
	switch ec {
	case EquipmentClassUndefined, EquipmentClassCar, EquipmentClassVan, EquipmentClassPickup, EquipmentClassStraight, EquipmentClassTractor, EquipmentClassTrailer, EquipmentClassContainer, EquipmentClassChassis, EquipmentClassOther:
		return nil
	default:
		return fmt.Errorf("equipmenttype: invalid enum value for equipment_class field: %q", ec)
	}
}

// OrderOption defines the ordering options for the EquipmentType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCostPerMile orders the results by the cost_per_mile field.
func ByCostPerMile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostPerMile, opts...).ToFunc()
}

// ByEquipmentClass orders the results by the equipment_class field.
func ByEquipmentClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEquipmentClass, opts...).ToFunc()
}

// ByFixedCost orders the results by the fixed_cost field.
func ByFixedCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFixedCost, opts...).ToFunc()
}

// ByVariableCost orders the results by the variable_cost field.
func ByVariableCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVariableCost, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByLength orders the results by the length field.
func ByLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLength, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByIdlingFuelUsage orders the results by the idling_fuel_usage field.
func ByIdlingFuelUsage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdlingFuelUsage, opts...).ToFunc()
}

// ByExemptFromTolls orders the results by the exempt_from_tolls field.
func ByExemptFromTolls(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExemptFromTolls, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
