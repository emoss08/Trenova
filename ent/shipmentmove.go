// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/shipment"
	"github.com/emoss08/trenova/ent/shipmentmove"
	"github.com/emoss08/trenova/ent/tractor"
	"github.com/emoss08/trenova/ent/worker"
	"github.com/google/uuid"
)

// ShipmentMove is the model entity for the ShipmentMove schema.
type ShipmentMove struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// ReferenceNumber holds the value of the "reference_number" field.
	ReferenceNumber string `json:"reference_number"`
	// Status holds the value of the "status" field.
	Status shipmentmove.Status `json:"status" validate:"required"`
	// IsLoaded holds the value of the "is_loaded" field.
	IsLoaded bool `json:"isLoaded" validate:"required"`
	// ShipmentID holds the value of the "shipment_id" field.
	ShipmentID uuid.UUID `json:"shipmentId"`
	// TractorID holds the value of the "tractor_id" field.
	TractorID *uuid.UUID `json:"tractorId" validate:"omitempty"`
	// TrailerID holds the value of the "trailer_id" field.
	TrailerID *uuid.UUID `json:"trailerId" validate:"omitempty"`
	// PrimaryWorkerID holds the value of the "primary_worker_id" field.
	PrimaryWorkerID *uuid.UUID `json:"primaryWorkerId" validate:"omitempty"`
	// SecondaryWorkerID holds the value of the "secondary_worker_id" field.
	SecondaryWorkerID *uuid.UUID `json:"secondaryWorkerId" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentMoveQuery when eager-loading is set.
	Edges        ShipmentMoveEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShipmentMoveEdges holds the relations/edges for other nodes in the graph.
type ShipmentMoveEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// Tractor holds the value of the tractor edge.
	Tractor *Tractor `json:"tractor,omitempty"`
	// Trailer holds the value of the trailer edge.
	Trailer *Tractor `json:"trailer,omitempty"`
	// PrimaryWorker holds the value of the primary_worker edge.
	PrimaryWorker *Worker `json:"primaryWorker,omitempty"`
	// SecondaryWorker holds the value of the secondary_worker edge.
	SecondaryWorker *Worker `json:"secondaryWorker,omitempty"`
	// MoveStops holds the value of the move_stops edge.
	MoveStops []*Stop `json:"moveStops,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes    [8]bool
	namedMoveStops map[string][]*Stop
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentMoveEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentMoveEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentMoveEdges) ShipmentOrErr() (*Shipment, error) {
	if e.Shipment != nil {
		return e.Shipment, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: shipment.Label}
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// TractorOrErr returns the Tractor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentMoveEdges) TractorOrErr() (*Tractor, error) {
	if e.Tractor != nil {
		return e.Tractor, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: tractor.Label}
	}
	return nil, &NotLoadedError{edge: "tractor"}
}

// TrailerOrErr returns the Trailer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentMoveEdges) TrailerOrErr() (*Tractor, error) {
	if e.Trailer != nil {
		return e.Trailer, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: tractor.Label}
	}
	return nil, &NotLoadedError{edge: "trailer"}
}

// PrimaryWorkerOrErr returns the PrimaryWorker value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentMoveEdges) PrimaryWorkerOrErr() (*Worker, error) {
	if e.PrimaryWorker != nil {
		return e.PrimaryWorker, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: worker.Label}
	}
	return nil, &NotLoadedError{edge: "primary_worker"}
}

// SecondaryWorkerOrErr returns the SecondaryWorker value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentMoveEdges) SecondaryWorkerOrErr() (*Worker, error) {
	if e.SecondaryWorker != nil {
		return e.SecondaryWorker, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: worker.Label}
	}
	return nil, &NotLoadedError{edge: "secondary_worker"}
}

// MoveStopsOrErr returns the MoveStops value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentMoveEdges) MoveStopsOrErr() ([]*Stop, error) {
	if e.loadedTypes[7] {
		return e.MoveStops, nil
	}
	return nil, &NotLoadedError{edge: "move_stops"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentMove) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentmove.FieldTractorID, shipmentmove.FieldTrailerID, shipmentmove.FieldPrimaryWorkerID, shipmentmove.FieldSecondaryWorkerID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case shipmentmove.FieldIsLoaded:
			values[i] = new(sql.NullBool)
		case shipmentmove.FieldVersion:
			values[i] = new(sql.NullInt64)
		case shipmentmove.FieldReferenceNumber, shipmentmove.FieldStatus:
			values[i] = new(sql.NullString)
		case shipmentmove.FieldCreatedAt, shipmentmove.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case shipmentmove.FieldID, shipmentmove.FieldBusinessUnitID, shipmentmove.FieldOrganizationID, shipmentmove.FieldShipmentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentMove fields.
func (sm *ShipmentMove) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentmove.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sm.ID = *value
			}
		case shipmentmove.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				sm.BusinessUnitID = *value
			}
		case shipmentmove.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				sm.OrganizationID = *value
			}
		case shipmentmove.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sm.CreatedAt = value.Time
			}
		case shipmentmove.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sm.UpdatedAt = value.Time
			}
		case shipmentmove.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				sm.Version = int(value.Int64)
			}
		case shipmentmove.FieldReferenceNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_number", values[i])
			} else if value.Valid {
				sm.ReferenceNumber = value.String
			}
		case shipmentmove.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sm.Status = shipmentmove.Status(value.String)
			}
		case shipmentmove.FieldIsLoaded:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_loaded", values[i])
			} else if value.Valid {
				sm.IsLoaded = value.Bool
			}
		case shipmentmove.FieldShipmentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_id", values[i])
			} else if value != nil {
				sm.ShipmentID = *value
			}
		case shipmentmove.FieldTractorID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tractor_id", values[i])
			} else if value.Valid {
				sm.TractorID = new(uuid.UUID)
				*sm.TractorID = *value.S.(*uuid.UUID)
			}
		case shipmentmove.FieldTrailerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field trailer_id", values[i])
			} else if value.Valid {
				sm.TrailerID = new(uuid.UUID)
				*sm.TrailerID = *value.S.(*uuid.UUID)
			}
		case shipmentmove.FieldPrimaryWorkerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field primary_worker_id", values[i])
			} else if value.Valid {
				sm.PrimaryWorkerID = new(uuid.UUID)
				*sm.PrimaryWorkerID = *value.S.(*uuid.UUID)
			}
		case shipmentmove.FieldSecondaryWorkerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field secondary_worker_id", values[i])
			} else if value.Valid {
				sm.SecondaryWorkerID = new(uuid.UUID)
				*sm.SecondaryWorkerID = *value.S.(*uuid.UUID)
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShipmentMove.
// This includes values selected through modifiers, order, etc.
func (sm *ShipmentMove) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the ShipmentMove entity.
func (sm *ShipmentMove) QueryBusinessUnit() *BusinessUnitQuery {
	return NewShipmentMoveClient(sm.config).QueryBusinessUnit(sm)
}

// QueryOrganization queries the "organization" edge of the ShipmentMove entity.
func (sm *ShipmentMove) QueryOrganization() *OrganizationQuery {
	return NewShipmentMoveClient(sm.config).QueryOrganization(sm)
}

// QueryShipment queries the "shipment" edge of the ShipmentMove entity.
func (sm *ShipmentMove) QueryShipment() *ShipmentQuery {
	return NewShipmentMoveClient(sm.config).QueryShipment(sm)
}

// QueryTractor queries the "tractor" edge of the ShipmentMove entity.
func (sm *ShipmentMove) QueryTractor() *TractorQuery {
	return NewShipmentMoveClient(sm.config).QueryTractor(sm)
}

// QueryTrailer queries the "trailer" edge of the ShipmentMove entity.
func (sm *ShipmentMove) QueryTrailer() *TractorQuery {
	return NewShipmentMoveClient(sm.config).QueryTrailer(sm)
}

// QueryPrimaryWorker queries the "primary_worker" edge of the ShipmentMove entity.
func (sm *ShipmentMove) QueryPrimaryWorker() *WorkerQuery {
	return NewShipmentMoveClient(sm.config).QueryPrimaryWorker(sm)
}

// QuerySecondaryWorker queries the "secondary_worker" edge of the ShipmentMove entity.
func (sm *ShipmentMove) QuerySecondaryWorker() *WorkerQuery {
	return NewShipmentMoveClient(sm.config).QuerySecondaryWorker(sm)
}

// QueryMoveStops queries the "move_stops" edge of the ShipmentMove entity.
func (sm *ShipmentMove) QueryMoveStops() *StopQuery {
	return NewShipmentMoveClient(sm.config).QueryMoveStops(sm)
}

// Update returns a builder for updating this ShipmentMove.
// Note that you need to call ShipmentMove.Unwrap() before calling this method if this ShipmentMove
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *ShipmentMove) Update() *ShipmentMoveUpdateOne {
	return NewShipmentMoveClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the ShipmentMove entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *ShipmentMove) Unwrap() *ShipmentMove {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentMove is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *ShipmentMove) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentMove(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", sm.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", sm.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", sm.Version))
	builder.WriteString(", ")
	builder.WriteString("reference_number=")
	builder.WriteString(sm.ReferenceNumber)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sm.Status))
	builder.WriteString(", ")
	builder.WriteString("is_loaded=")
	builder.WriteString(fmt.Sprintf("%v", sm.IsLoaded))
	builder.WriteString(", ")
	builder.WriteString("shipment_id=")
	builder.WriteString(fmt.Sprintf("%v", sm.ShipmentID))
	builder.WriteString(", ")
	if v := sm.TractorID; v != nil {
		builder.WriteString("tractor_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sm.TrailerID; v != nil {
		builder.WriteString("trailer_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sm.PrimaryWorkerID; v != nil {
		builder.WriteString("primary_worker_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sm.SecondaryWorkerID; v != nil {
		builder.WriteString("secondary_worker_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedMoveStops returns the MoveStops named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sm *ShipmentMove) NamedMoveStops(name string) ([]*Stop, error) {
	if sm.Edges.namedMoveStops == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sm.Edges.namedMoveStops[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sm *ShipmentMove) appendNamedMoveStops(name string, edges ...*Stop) {
	if sm.Edges.namedMoveStops == nil {
		sm.Edges.namedMoveStops = make(map[string][]*Stop)
	}
	if len(edges) == 0 {
		sm.Edges.namedMoveStops[name] = []*Stop{}
	} else {
		sm.Edges.namedMoveStops[name] = append(sm.Edges.namedMoveStops[name], edges...)
	}
}

// ShipmentMoves is a parsable slice of ShipmentMove.
type ShipmentMoves []*ShipmentMove
