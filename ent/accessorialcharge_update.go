// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/accessorialcharge"
	"github.com/emoss08/trenova/ent/predicate"
)

// AccessorialChargeUpdate is the builder for updating AccessorialCharge entities.
type AccessorialChargeUpdate struct {
	config
	hooks     []Hook
	mutation  *AccessorialChargeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AccessorialChargeUpdate builder.
func (acu *AccessorialChargeUpdate) Where(ps ...predicate.AccessorialCharge) *AccessorialChargeUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AccessorialChargeUpdate) SetUpdatedAt(t time.Time) *AccessorialChargeUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetStatus sets the "status" field.
func (acu *AccessorialChargeUpdate) SetStatus(a accessorialcharge.Status) *AccessorialChargeUpdate {
	acu.mutation.SetStatus(a)
	return acu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (acu *AccessorialChargeUpdate) SetNillableStatus(a *accessorialcharge.Status) *AccessorialChargeUpdate {
	if a != nil {
		acu.SetStatus(*a)
	}
	return acu
}

// SetCode sets the "code" field.
func (acu *AccessorialChargeUpdate) SetCode(s string) *AccessorialChargeUpdate {
	acu.mutation.SetCode(s)
	return acu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (acu *AccessorialChargeUpdate) SetNillableCode(s *string) *AccessorialChargeUpdate {
	if s != nil {
		acu.SetCode(*s)
	}
	return acu
}

// SetDescription sets the "description" field.
func (acu *AccessorialChargeUpdate) SetDescription(s string) *AccessorialChargeUpdate {
	acu.mutation.SetDescription(s)
	return acu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (acu *AccessorialChargeUpdate) SetNillableDescription(s *string) *AccessorialChargeUpdate {
	if s != nil {
		acu.SetDescription(*s)
	}
	return acu
}

// ClearDescription clears the value of the "description" field.
func (acu *AccessorialChargeUpdate) ClearDescription() *AccessorialChargeUpdate {
	acu.mutation.ClearDescription()
	return acu
}

// SetIsDetention sets the "is_detention" field.
func (acu *AccessorialChargeUpdate) SetIsDetention(b bool) *AccessorialChargeUpdate {
	acu.mutation.SetIsDetention(b)
	return acu
}

// SetNillableIsDetention sets the "is_detention" field if the given value is not nil.
func (acu *AccessorialChargeUpdate) SetNillableIsDetention(b *bool) *AccessorialChargeUpdate {
	if b != nil {
		acu.SetIsDetention(*b)
	}
	return acu
}

// SetMethod sets the "method" field.
func (acu *AccessorialChargeUpdate) SetMethod(a accessorialcharge.Method) *AccessorialChargeUpdate {
	acu.mutation.SetMethod(a)
	return acu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (acu *AccessorialChargeUpdate) SetNillableMethod(a *accessorialcharge.Method) *AccessorialChargeUpdate {
	if a != nil {
		acu.SetMethod(*a)
	}
	return acu
}

// SetAmount sets the "amount" field.
func (acu *AccessorialChargeUpdate) SetAmount(f float64) *AccessorialChargeUpdate {
	acu.mutation.ResetAmount()
	acu.mutation.SetAmount(f)
	return acu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (acu *AccessorialChargeUpdate) SetNillableAmount(f *float64) *AccessorialChargeUpdate {
	if f != nil {
		acu.SetAmount(*f)
	}
	return acu
}

// AddAmount adds f to the "amount" field.
func (acu *AccessorialChargeUpdate) AddAmount(f float64) *AccessorialChargeUpdate {
	acu.mutation.AddAmount(f)
	return acu
}

// Mutation returns the AccessorialChargeMutation object of the builder.
func (acu *AccessorialChargeUpdate) Mutation() *AccessorialChargeMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AccessorialChargeUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AccessorialChargeUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AccessorialChargeUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AccessorialChargeUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AccessorialChargeUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := accessorialcharge.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *AccessorialChargeUpdate) check() error {
	if v, ok := acu.mutation.Status(); ok {
		if err := accessorialcharge.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.status": %w`, err)}
		}
	}
	if v, ok := acu.mutation.Code(); ok {
		if err := accessorialcharge.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.code": %w`, err)}
		}
	}
	if v, ok := acu.mutation.Description(); ok {
		if err := accessorialcharge.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.description": %w`, err)}
		}
	}
	if v, ok := acu.mutation.Method(); ok {
		if err := accessorialcharge.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.method": %w`, err)}
		}
	}
	if _, ok := acu.mutation.BusinessUnitID(); acu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccessorialCharge.business_unit"`)
	}
	if _, ok := acu.mutation.OrganizationID(); acu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccessorialCharge.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *AccessorialChargeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccessorialChargeUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *AccessorialChargeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(accessorialcharge.Table, accessorialcharge.Columns, sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(accessorialcharge.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.Status(); ok {
		_spec.SetField(accessorialcharge.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := acu.mutation.Code(); ok {
		_spec.SetField(accessorialcharge.FieldCode, field.TypeString, value)
	}
	if value, ok := acu.mutation.Description(); ok {
		_spec.SetField(accessorialcharge.FieldDescription, field.TypeString, value)
	}
	if acu.mutation.DescriptionCleared() {
		_spec.ClearField(accessorialcharge.FieldDescription, field.TypeString)
	}
	if value, ok := acu.mutation.IsDetention(); ok {
		_spec.SetField(accessorialcharge.FieldIsDetention, field.TypeBool, value)
	}
	if value, ok := acu.mutation.Method(); ok {
		_spec.SetField(accessorialcharge.FieldMethod, field.TypeEnum, value)
	}
	if value, ok := acu.mutation.Amount(); ok {
		_spec.SetField(accessorialcharge.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedAmount(); ok {
		_spec.AddField(accessorialcharge.FieldAmount, field.TypeFloat64, value)
	}
	_spec.AddModifiers(acu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accessorialcharge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AccessorialChargeUpdateOne is the builder for updating a single AccessorialCharge entity.
type AccessorialChargeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AccessorialChargeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AccessorialChargeUpdateOne) SetUpdatedAt(t time.Time) *AccessorialChargeUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetStatus sets the "status" field.
func (acuo *AccessorialChargeUpdateOne) SetStatus(a accessorialcharge.Status) *AccessorialChargeUpdateOne {
	acuo.mutation.SetStatus(a)
	return acuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (acuo *AccessorialChargeUpdateOne) SetNillableStatus(a *accessorialcharge.Status) *AccessorialChargeUpdateOne {
	if a != nil {
		acuo.SetStatus(*a)
	}
	return acuo
}

// SetCode sets the "code" field.
func (acuo *AccessorialChargeUpdateOne) SetCode(s string) *AccessorialChargeUpdateOne {
	acuo.mutation.SetCode(s)
	return acuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (acuo *AccessorialChargeUpdateOne) SetNillableCode(s *string) *AccessorialChargeUpdateOne {
	if s != nil {
		acuo.SetCode(*s)
	}
	return acuo
}

// SetDescription sets the "description" field.
func (acuo *AccessorialChargeUpdateOne) SetDescription(s string) *AccessorialChargeUpdateOne {
	acuo.mutation.SetDescription(s)
	return acuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (acuo *AccessorialChargeUpdateOne) SetNillableDescription(s *string) *AccessorialChargeUpdateOne {
	if s != nil {
		acuo.SetDescription(*s)
	}
	return acuo
}

// ClearDescription clears the value of the "description" field.
func (acuo *AccessorialChargeUpdateOne) ClearDescription() *AccessorialChargeUpdateOne {
	acuo.mutation.ClearDescription()
	return acuo
}

// SetIsDetention sets the "is_detention" field.
func (acuo *AccessorialChargeUpdateOne) SetIsDetention(b bool) *AccessorialChargeUpdateOne {
	acuo.mutation.SetIsDetention(b)
	return acuo
}

// SetNillableIsDetention sets the "is_detention" field if the given value is not nil.
func (acuo *AccessorialChargeUpdateOne) SetNillableIsDetention(b *bool) *AccessorialChargeUpdateOne {
	if b != nil {
		acuo.SetIsDetention(*b)
	}
	return acuo
}

// SetMethod sets the "method" field.
func (acuo *AccessorialChargeUpdateOne) SetMethod(a accessorialcharge.Method) *AccessorialChargeUpdateOne {
	acuo.mutation.SetMethod(a)
	return acuo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (acuo *AccessorialChargeUpdateOne) SetNillableMethod(a *accessorialcharge.Method) *AccessorialChargeUpdateOne {
	if a != nil {
		acuo.SetMethod(*a)
	}
	return acuo
}

// SetAmount sets the "amount" field.
func (acuo *AccessorialChargeUpdateOne) SetAmount(f float64) *AccessorialChargeUpdateOne {
	acuo.mutation.ResetAmount()
	acuo.mutation.SetAmount(f)
	return acuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (acuo *AccessorialChargeUpdateOne) SetNillableAmount(f *float64) *AccessorialChargeUpdateOne {
	if f != nil {
		acuo.SetAmount(*f)
	}
	return acuo
}

// AddAmount adds f to the "amount" field.
func (acuo *AccessorialChargeUpdateOne) AddAmount(f float64) *AccessorialChargeUpdateOne {
	acuo.mutation.AddAmount(f)
	return acuo
}

// Mutation returns the AccessorialChargeMutation object of the builder.
func (acuo *AccessorialChargeUpdateOne) Mutation() *AccessorialChargeMutation {
	return acuo.mutation
}

// Where appends a list predicates to the AccessorialChargeUpdate builder.
func (acuo *AccessorialChargeUpdateOne) Where(ps ...predicate.AccessorialCharge) *AccessorialChargeUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AccessorialChargeUpdateOne) Select(field string, fields ...string) *AccessorialChargeUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AccessorialCharge entity.
func (acuo *AccessorialChargeUpdateOne) Save(ctx context.Context) (*AccessorialCharge, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AccessorialChargeUpdateOne) SaveX(ctx context.Context) *AccessorialCharge {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AccessorialChargeUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AccessorialChargeUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AccessorialChargeUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := accessorialcharge.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *AccessorialChargeUpdateOne) check() error {
	if v, ok := acuo.mutation.Status(); ok {
		if err := accessorialcharge.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.status": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.Code(); ok {
		if err := accessorialcharge.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.code": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.Description(); ok {
		if err := accessorialcharge.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.description": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.Method(); ok {
		if err := accessorialcharge.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "AccessorialCharge.method": %w`, err)}
		}
	}
	if _, ok := acuo.mutation.BusinessUnitID(); acuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccessorialCharge.business_unit"`)
	}
	if _, ok := acuo.mutation.OrganizationID(); acuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccessorialCharge.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *AccessorialChargeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccessorialChargeUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *AccessorialChargeUpdateOne) sqlSave(ctx context.Context) (_node *AccessorialCharge, err error) {
	if err := acuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accessorialcharge.Table, accessorialcharge.Columns, sqlgraph.NewFieldSpec(accessorialcharge.FieldID, field.TypeUUID))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccessorialCharge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accessorialcharge.FieldID)
		for _, f := range fields {
			if !accessorialcharge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accessorialcharge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(accessorialcharge.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.Status(); ok {
		_spec.SetField(accessorialcharge.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := acuo.mutation.Code(); ok {
		_spec.SetField(accessorialcharge.FieldCode, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Description(); ok {
		_spec.SetField(accessorialcharge.FieldDescription, field.TypeString, value)
	}
	if acuo.mutation.DescriptionCleared() {
		_spec.ClearField(accessorialcharge.FieldDescription, field.TypeString)
	}
	if value, ok := acuo.mutation.IsDetention(); ok {
		_spec.SetField(accessorialcharge.FieldIsDetention, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.Method(); ok {
		_spec.SetField(accessorialcharge.FieldMethod, field.TypeEnum, value)
	}
	if value, ok := acuo.mutation.Amount(); ok {
		_spec.SetField(accessorialcharge.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedAmount(); ok {
		_spec.AddField(accessorialcharge.FieldAmount, field.TypeFloat64, value)
	}
	_spec.AddModifiers(acuo.modifiers...)
	_node = &AccessorialCharge{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accessorialcharge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
