// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/hazardousmaterialsegregation"
	"github.com/emoss08/trenova/ent/predicate"
)

// HazardousMaterialSegregationUpdate is the builder for updating HazardousMaterialSegregation entities.
type HazardousMaterialSegregationUpdate struct {
	config
	hooks     []Hook
	mutation  *HazardousMaterialSegregationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the HazardousMaterialSegregationUpdate builder.
func (hmsu *HazardousMaterialSegregationUpdate) Where(ps ...predicate.HazardousMaterialSegregation) *HazardousMaterialSegregationUpdate {
	hmsu.mutation.Where(ps...)
	return hmsu
}

// SetUpdatedAt sets the "updated_at" field.
func (hmsu *HazardousMaterialSegregationUpdate) SetUpdatedAt(t time.Time) *HazardousMaterialSegregationUpdate {
	hmsu.mutation.SetUpdatedAt(t)
	return hmsu
}

// SetClassA sets the "class_a" field.
func (hmsu *HazardousMaterialSegregationUpdate) SetClassA(h hazardousmaterialsegregation.ClassA) *HazardousMaterialSegregationUpdate {
	hmsu.mutation.SetClassA(h)
	return hmsu
}

// SetNillableClassA sets the "class_a" field if the given value is not nil.
func (hmsu *HazardousMaterialSegregationUpdate) SetNillableClassA(h *hazardousmaterialsegregation.ClassA) *HazardousMaterialSegregationUpdate {
	if h != nil {
		hmsu.SetClassA(*h)
	}
	return hmsu
}

// SetClassB sets the "class_b" field.
func (hmsu *HazardousMaterialSegregationUpdate) SetClassB(h hazardousmaterialsegregation.ClassB) *HazardousMaterialSegregationUpdate {
	hmsu.mutation.SetClassB(h)
	return hmsu
}

// SetNillableClassB sets the "class_b" field if the given value is not nil.
func (hmsu *HazardousMaterialSegregationUpdate) SetNillableClassB(h *hazardousmaterialsegregation.ClassB) *HazardousMaterialSegregationUpdate {
	if h != nil {
		hmsu.SetClassB(*h)
	}
	return hmsu
}

// SetSegregationType sets the "segregation_type" field.
func (hmsu *HazardousMaterialSegregationUpdate) SetSegregationType(ht hazardousmaterialsegregation.SegregationType) *HazardousMaterialSegregationUpdate {
	hmsu.mutation.SetSegregationType(ht)
	return hmsu
}

// SetNillableSegregationType sets the "segregation_type" field if the given value is not nil.
func (hmsu *HazardousMaterialSegregationUpdate) SetNillableSegregationType(ht *hazardousmaterialsegregation.SegregationType) *HazardousMaterialSegregationUpdate {
	if ht != nil {
		hmsu.SetSegregationType(*ht)
	}
	return hmsu
}

// Mutation returns the HazardousMaterialSegregationMutation object of the builder.
func (hmsu *HazardousMaterialSegregationUpdate) Mutation() *HazardousMaterialSegregationMutation {
	return hmsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hmsu *HazardousMaterialSegregationUpdate) Save(ctx context.Context) (int, error) {
	hmsu.defaults()
	return withHooks(ctx, hmsu.sqlSave, hmsu.mutation, hmsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hmsu *HazardousMaterialSegregationUpdate) SaveX(ctx context.Context) int {
	affected, err := hmsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hmsu *HazardousMaterialSegregationUpdate) Exec(ctx context.Context) error {
	_, err := hmsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmsu *HazardousMaterialSegregationUpdate) ExecX(ctx context.Context) {
	if err := hmsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hmsu *HazardousMaterialSegregationUpdate) defaults() {
	if _, ok := hmsu.mutation.UpdatedAt(); !ok {
		v := hazardousmaterialsegregation.UpdateDefaultUpdatedAt()
		hmsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hmsu *HazardousMaterialSegregationUpdate) check() error {
	if v, ok := hmsu.mutation.ClassA(); ok {
		if err := hazardousmaterialsegregation.ClassAValidator(v); err != nil {
			return &ValidationError{Name: "class_a", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterialSegregation.class_a": %w`, err)}
		}
	}
	if v, ok := hmsu.mutation.ClassB(); ok {
		if err := hazardousmaterialsegregation.ClassBValidator(v); err != nil {
			return &ValidationError{Name: "class_b", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterialSegregation.class_b": %w`, err)}
		}
	}
	if v, ok := hmsu.mutation.SegregationType(); ok {
		if err := hazardousmaterialsegregation.SegregationTypeValidator(v); err != nil {
			return &ValidationError{Name: "segregation_type", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterialSegregation.segregation_type": %w`, err)}
		}
	}
	if _, ok := hmsu.mutation.BusinessUnitID(); hmsu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HazardousMaterialSegregation.business_unit"`)
	}
	if _, ok := hmsu.mutation.OrganizationID(); hmsu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HazardousMaterialSegregation.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (hmsu *HazardousMaterialSegregationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HazardousMaterialSegregationUpdate {
	hmsu.modifiers = append(hmsu.modifiers, modifiers...)
	return hmsu
}

func (hmsu *HazardousMaterialSegregationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hmsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hazardousmaterialsegregation.Table, hazardousmaterialsegregation.Columns, sqlgraph.NewFieldSpec(hazardousmaterialsegregation.FieldID, field.TypeUUID))
	if ps := hmsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hmsu.mutation.UpdatedAt(); ok {
		_spec.SetField(hazardousmaterialsegregation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hmsu.mutation.ClassA(); ok {
		_spec.SetField(hazardousmaterialsegregation.FieldClassA, field.TypeEnum, value)
	}
	if value, ok := hmsu.mutation.ClassB(); ok {
		_spec.SetField(hazardousmaterialsegregation.FieldClassB, field.TypeEnum, value)
	}
	if value, ok := hmsu.mutation.SegregationType(); ok {
		_spec.SetField(hazardousmaterialsegregation.FieldSegregationType, field.TypeEnum, value)
	}
	_spec.AddModifiers(hmsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, hmsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hazardousmaterialsegregation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hmsu.mutation.done = true
	return n, nil
}

// HazardousMaterialSegregationUpdateOne is the builder for updating a single HazardousMaterialSegregation entity.
type HazardousMaterialSegregationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *HazardousMaterialSegregationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (hmsuo *HazardousMaterialSegregationUpdateOne) SetUpdatedAt(t time.Time) *HazardousMaterialSegregationUpdateOne {
	hmsuo.mutation.SetUpdatedAt(t)
	return hmsuo
}

// SetClassA sets the "class_a" field.
func (hmsuo *HazardousMaterialSegregationUpdateOne) SetClassA(h hazardousmaterialsegregation.ClassA) *HazardousMaterialSegregationUpdateOne {
	hmsuo.mutation.SetClassA(h)
	return hmsuo
}

// SetNillableClassA sets the "class_a" field if the given value is not nil.
func (hmsuo *HazardousMaterialSegregationUpdateOne) SetNillableClassA(h *hazardousmaterialsegregation.ClassA) *HazardousMaterialSegregationUpdateOne {
	if h != nil {
		hmsuo.SetClassA(*h)
	}
	return hmsuo
}

// SetClassB sets the "class_b" field.
func (hmsuo *HazardousMaterialSegregationUpdateOne) SetClassB(h hazardousmaterialsegregation.ClassB) *HazardousMaterialSegregationUpdateOne {
	hmsuo.mutation.SetClassB(h)
	return hmsuo
}

// SetNillableClassB sets the "class_b" field if the given value is not nil.
func (hmsuo *HazardousMaterialSegregationUpdateOne) SetNillableClassB(h *hazardousmaterialsegregation.ClassB) *HazardousMaterialSegregationUpdateOne {
	if h != nil {
		hmsuo.SetClassB(*h)
	}
	return hmsuo
}

// SetSegregationType sets the "segregation_type" field.
func (hmsuo *HazardousMaterialSegregationUpdateOne) SetSegregationType(ht hazardousmaterialsegregation.SegregationType) *HazardousMaterialSegregationUpdateOne {
	hmsuo.mutation.SetSegregationType(ht)
	return hmsuo
}

// SetNillableSegregationType sets the "segregation_type" field if the given value is not nil.
func (hmsuo *HazardousMaterialSegregationUpdateOne) SetNillableSegregationType(ht *hazardousmaterialsegregation.SegregationType) *HazardousMaterialSegregationUpdateOne {
	if ht != nil {
		hmsuo.SetSegregationType(*ht)
	}
	return hmsuo
}

// Mutation returns the HazardousMaterialSegregationMutation object of the builder.
func (hmsuo *HazardousMaterialSegregationUpdateOne) Mutation() *HazardousMaterialSegregationMutation {
	return hmsuo.mutation
}

// Where appends a list predicates to the HazardousMaterialSegregationUpdate builder.
func (hmsuo *HazardousMaterialSegregationUpdateOne) Where(ps ...predicate.HazardousMaterialSegregation) *HazardousMaterialSegregationUpdateOne {
	hmsuo.mutation.Where(ps...)
	return hmsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hmsuo *HazardousMaterialSegregationUpdateOne) Select(field string, fields ...string) *HazardousMaterialSegregationUpdateOne {
	hmsuo.fields = append([]string{field}, fields...)
	return hmsuo
}

// Save executes the query and returns the updated HazardousMaterialSegregation entity.
func (hmsuo *HazardousMaterialSegregationUpdateOne) Save(ctx context.Context) (*HazardousMaterialSegregation, error) {
	hmsuo.defaults()
	return withHooks(ctx, hmsuo.sqlSave, hmsuo.mutation, hmsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hmsuo *HazardousMaterialSegregationUpdateOne) SaveX(ctx context.Context) *HazardousMaterialSegregation {
	node, err := hmsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hmsuo *HazardousMaterialSegregationUpdateOne) Exec(ctx context.Context) error {
	_, err := hmsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmsuo *HazardousMaterialSegregationUpdateOne) ExecX(ctx context.Context) {
	if err := hmsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hmsuo *HazardousMaterialSegregationUpdateOne) defaults() {
	if _, ok := hmsuo.mutation.UpdatedAt(); !ok {
		v := hazardousmaterialsegregation.UpdateDefaultUpdatedAt()
		hmsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hmsuo *HazardousMaterialSegregationUpdateOne) check() error {
	if v, ok := hmsuo.mutation.ClassA(); ok {
		if err := hazardousmaterialsegregation.ClassAValidator(v); err != nil {
			return &ValidationError{Name: "class_a", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterialSegregation.class_a": %w`, err)}
		}
	}
	if v, ok := hmsuo.mutation.ClassB(); ok {
		if err := hazardousmaterialsegregation.ClassBValidator(v); err != nil {
			return &ValidationError{Name: "class_b", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterialSegregation.class_b": %w`, err)}
		}
	}
	if v, ok := hmsuo.mutation.SegregationType(); ok {
		if err := hazardousmaterialsegregation.SegregationTypeValidator(v); err != nil {
			return &ValidationError{Name: "segregation_type", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterialSegregation.segregation_type": %w`, err)}
		}
	}
	if _, ok := hmsuo.mutation.BusinessUnitID(); hmsuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HazardousMaterialSegregation.business_unit"`)
	}
	if _, ok := hmsuo.mutation.OrganizationID(); hmsuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HazardousMaterialSegregation.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (hmsuo *HazardousMaterialSegregationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HazardousMaterialSegregationUpdateOne {
	hmsuo.modifiers = append(hmsuo.modifiers, modifiers...)
	return hmsuo
}

func (hmsuo *HazardousMaterialSegregationUpdateOne) sqlSave(ctx context.Context) (_node *HazardousMaterialSegregation, err error) {
	if err := hmsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hazardousmaterialsegregation.Table, hazardousmaterialsegregation.Columns, sqlgraph.NewFieldSpec(hazardousmaterialsegregation.FieldID, field.TypeUUID))
	id, ok := hmsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HazardousMaterialSegregation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hmsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hazardousmaterialsegregation.FieldID)
		for _, f := range fields {
			if !hazardousmaterialsegregation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hazardousmaterialsegregation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hmsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hmsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hazardousmaterialsegregation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hmsuo.mutation.ClassA(); ok {
		_spec.SetField(hazardousmaterialsegregation.FieldClassA, field.TypeEnum, value)
	}
	if value, ok := hmsuo.mutation.ClassB(); ok {
		_spec.SetField(hazardousmaterialsegregation.FieldClassB, field.TypeEnum, value)
	}
	if value, ok := hmsuo.mutation.SegregationType(); ok {
		_spec.SetField(hazardousmaterialsegregation.FieldSegregationType, field.TypeEnum, value)
	}
	_spec.AddModifiers(hmsuo.modifiers...)
	_node = &HazardousMaterialSegregation{config: hmsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hmsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hazardousmaterialsegregation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hmsuo.mutation.done = true
	return _node, nil
}
