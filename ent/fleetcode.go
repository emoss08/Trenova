// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/fleetcode"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/user"
	"github.com/google/uuid"
)

// FleetCode is the model entity for the FleetCode schema.
type FleetCode struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// Status holds the value of the "status" field.
	Status fleetcode.Status `json:"status" validate:"required,oneof=A I"`
	// Code holds the value of the "code" field.
	Code string `json:"code" validate:"required,max=10"`
	// Description holds the value of the "description" field.
	Description string `json:"description" validate:"omitempty"`
	// RevenueGoal holds the value of the "revenue_goal" field.
	RevenueGoal float64 `json:"revenueGoal" validate:"omitempty"`
	// DeadheadGoal holds the value of the "deadhead_goal" field.
	DeadheadGoal float64 `json:"deadheadGoal" validate:"omitempty"`
	// MileageGoal holds the value of the "mileage_goal" field.
	MileageGoal float64 `json:"mileageGoal" validate:"omitempty"`
	// ManagerID holds the value of the "manager_id" field.
	ManagerID *uuid.UUID `json:"managerId" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FleetCodeQuery when eager-loading is set.
	Edges        FleetCodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FleetCodeEdges holds the relations/edges for other nodes in the graph.
type FleetCodeEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Manager holds the value of the manager edge.
	Manager *User `json:"manager"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FleetCodeEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FleetCodeEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ManagerOrErr returns the Manager value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FleetCodeEdges) ManagerOrErr() (*User, error) {
	if e.Manager != nil {
		return e.Manager, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "manager"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FleetCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fleetcode.FieldManagerID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case fleetcode.FieldRevenueGoal, fleetcode.FieldDeadheadGoal, fleetcode.FieldMileageGoal:
			values[i] = new(sql.NullFloat64)
		case fleetcode.FieldVersion:
			values[i] = new(sql.NullInt64)
		case fleetcode.FieldStatus, fleetcode.FieldCode, fleetcode.FieldDescription:
			values[i] = new(sql.NullString)
		case fleetcode.FieldCreatedAt, fleetcode.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case fleetcode.FieldID, fleetcode.FieldBusinessUnitID, fleetcode.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FleetCode fields.
func (fc *FleetCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fleetcode.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fc.ID = *value
			}
		case fleetcode.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				fc.BusinessUnitID = *value
			}
		case fleetcode.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				fc.OrganizationID = *value
			}
		case fleetcode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fc.CreatedAt = value.Time
			}
		case fleetcode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fc.UpdatedAt = value.Time
			}
		case fleetcode.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				fc.Version = int(value.Int64)
			}
		case fleetcode.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fc.Status = fleetcode.Status(value.String)
			}
		case fleetcode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				fc.Code = value.String
			}
		case fleetcode.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fc.Description = value.String
			}
		case fleetcode.FieldRevenueGoal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field revenue_goal", values[i])
			} else if value.Valid {
				fc.RevenueGoal = value.Float64
			}
		case fleetcode.FieldDeadheadGoal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field deadhead_goal", values[i])
			} else if value.Valid {
				fc.DeadheadGoal = value.Float64
			}
		case fleetcode.FieldMileageGoal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field mileage_goal", values[i])
			} else if value.Valid {
				fc.MileageGoal = value.Float64
			}
		case fleetcode.FieldManagerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field manager_id", values[i])
			} else if value.Valid {
				fc.ManagerID = new(uuid.UUID)
				*fc.ManagerID = *value.S.(*uuid.UUID)
			}
		default:
			fc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FleetCode.
// This includes values selected through modifiers, order, etc.
func (fc *FleetCode) Value(name string) (ent.Value, error) {
	return fc.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the FleetCode entity.
func (fc *FleetCode) QueryBusinessUnit() *BusinessUnitQuery {
	return NewFleetCodeClient(fc.config).QueryBusinessUnit(fc)
}

// QueryOrganization queries the "organization" edge of the FleetCode entity.
func (fc *FleetCode) QueryOrganization() *OrganizationQuery {
	return NewFleetCodeClient(fc.config).QueryOrganization(fc)
}

// QueryManager queries the "manager" edge of the FleetCode entity.
func (fc *FleetCode) QueryManager() *UserQuery {
	return NewFleetCodeClient(fc.config).QueryManager(fc)
}

// Update returns a builder for updating this FleetCode.
// Note that you need to call FleetCode.Unwrap() before calling this method if this FleetCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (fc *FleetCode) Update() *FleetCodeUpdateOne {
	return NewFleetCodeClient(fc.config).UpdateOne(fc)
}

// Unwrap unwraps the FleetCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fc *FleetCode) Unwrap() *FleetCode {
	_tx, ok := fc.config.driver.(*txDriver)
	if !ok {
		panic("ent: FleetCode is not a transactional entity")
	}
	fc.config.driver = _tx.drv
	return fc
}

// String implements the fmt.Stringer.
func (fc *FleetCode) String() string {
	var builder strings.Builder
	builder.WriteString("FleetCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fc.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", fc.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", fc.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", fc.Version))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", fc.Status))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(fc.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fc.Description)
	builder.WriteString(", ")
	builder.WriteString("revenue_goal=")
	builder.WriteString(fmt.Sprintf("%v", fc.RevenueGoal))
	builder.WriteString(", ")
	builder.WriteString("deadhead_goal=")
	builder.WriteString(fmt.Sprintf("%v", fc.DeadheadGoal))
	builder.WriteString(", ")
	builder.WriteString("mileage_goal=")
	builder.WriteString(fmt.Sprintf("%v", fc.MileageGoal))
	builder.WriteString(", ")
	if v := fc.ManagerID; v != nil {
		builder.WriteString("manager_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FleetCodes is a parsable slice of FleetCode.
type FleetCodes []*FleetCode
