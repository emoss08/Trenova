// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/emoss08/trenova/ent/accessorialcharge"
	"github.com/emoss08/trenova/ent/accountingcontrol"
	"github.com/emoss08/trenova/ent/billingcontrol"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/chargetype"
	"github.com/emoss08/trenova/ent/commenttype"
	"github.com/emoss08/trenova/ent/commodity"
	"github.com/emoss08/trenova/ent/customer"
	"github.com/emoss08/trenova/ent/delaycode"
	"github.com/emoss08/trenova/ent/dispatchcontrol"
	"github.com/emoss08/trenova/ent/divisioncode"
	"github.com/emoss08/trenova/ent/documentclassification"
	"github.com/emoss08/trenova/ent/emailcontrol"
	"github.com/emoss08/trenova/ent/emailprofile"
	"github.com/emoss08/trenova/ent/equipmentmanufactuer"
	"github.com/emoss08/trenova/ent/equipmenttype"
	"github.com/emoss08/trenova/ent/feasibilitytoolcontrol"
	"github.com/emoss08/trenova/ent/featureflag"
	"github.com/emoss08/trenova/ent/fleetcode"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/googleapi"
	"github.com/emoss08/trenova/ent/hazardousmaterial"
	"github.com/emoss08/trenova/ent/hazardousmaterialsegregation"
	"github.com/emoss08/trenova/ent/invoicecontrol"
	"github.com/emoss08/trenova/ent/location"
	"github.com/emoss08/trenova/ent/locationcategory"
	"github.com/emoss08/trenova/ent/locationcomment"
	"github.com/emoss08/trenova/ent/locationcontact"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/organizationfeatureflag"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/qualifiercode"
	"github.com/emoss08/trenova/ent/reasoncode"
	"github.com/emoss08/trenova/ent/revenuecode"
	"github.com/emoss08/trenova/ent/routecontrol"
	"github.com/emoss08/trenova/ent/servicetype"
	"github.com/emoss08/trenova/ent/session"
	"github.com/emoss08/trenova/ent/shipmentcontrol"
	"github.com/emoss08/trenova/ent/shipmenttype"
	"github.com/emoss08/trenova/ent/tablechangealert"
	"github.com/emoss08/trenova/ent/tag"
	"github.com/emoss08/trenova/ent/tractor"
	"github.com/emoss08/trenova/ent/trailer"
	"github.com/emoss08/trenova/ent/user"
	"github.com/emoss08/trenova/ent/userfavorite"
	"github.com/emoss08/trenova/ent/usstate"
	"github.com/emoss08/trenova/ent/worker"
	"github.com/emoss08/trenova/ent/workercomment"
	"github.com/emoss08/trenova/ent/workercontact"
	"github.com/emoss08/trenova/ent/workerprofile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 49)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   accessorialcharge.Table,
			Columns: accessorialcharge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: accessorialcharge.FieldID,
			},
		},
		Type: "AccessorialCharge",
		Fields: map[string]*sqlgraph.FieldSpec{
			accessorialcharge.FieldBusinessUnitID: {Type: field.TypeUUID, Column: accessorialcharge.FieldBusinessUnitID},
			accessorialcharge.FieldOrganizationID: {Type: field.TypeUUID, Column: accessorialcharge.FieldOrganizationID},
			accessorialcharge.FieldCreatedAt:      {Type: field.TypeTime, Column: accessorialcharge.FieldCreatedAt},
			accessorialcharge.FieldUpdatedAt:      {Type: field.TypeTime, Column: accessorialcharge.FieldUpdatedAt},
			accessorialcharge.FieldVersion:        {Type: field.TypeInt, Column: accessorialcharge.FieldVersion},
			accessorialcharge.FieldStatus:         {Type: field.TypeEnum, Column: accessorialcharge.FieldStatus},
			accessorialcharge.FieldCode:           {Type: field.TypeString, Column: accessorialcharge.FieldCode},
			accessorialcharge.FieldDescription:    {Type: field.TypeString, Column: accessorialcharge.FieldDescription},
			accessorialcharge.FieldIsDetention:    {Type: field.TypeBool, Column: accessorialcharge.FieldIsDetention},
			accessorialcharge.FieldMethod:         {Type: field.TypeEnum, Column: accessorialcharge.FieldMethod},
			accessorialcharge.FieldAmount:         {Type: field.TypeFloat64, Column: accessorialcharge.FieldAmount},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   accountingcontrol.Table,
			Columns: accountingcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: accountingcontrol.FieldID,
			},
		},
		Type: "AccountingControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			accountingcontrol.FieldCreatedAt:                    {Type: field.TypeTime, Column: accountingcontrol.FieldCreatedAt},
			accountingcontrol.FieldUpdatedAt:                    {Type: field.TypeTime, Column: accountingcontrol.FieldUpdatedAt},
			accountingcontrol.FieldRecThreshold:                 {Type: field.TypeInt8, Column: accountingcontrol.FieldRecThreshold},
			accountingcontrol.FieldRecThresholdAction:           {Type: field.TypeEnum, Column: accountingcontrol.FieldRecThresholdAction},
			accountingcontrol.FieldAutoCreateJournalEntries:     {Type: field.TypeBool, Column: accountingcontrol.FieldAutoCreateJournalEntries},
			accountingcontrol.FieldJournalEntryCriteria:         {Type: field.TypeEnum, Column: accountingcontrol.FieldJournalEntryCriteria},
			accountingcontrol.FieldRestrictManualJournalEntries: {Type: field.TypeBool, Column: accountingcontrol.FieldRestrictManualJournalEntries},
			accountingcontrol.FieldRequireJournalEntryApproval:  {Type: field.TypeBool, Column: accountingcontrol.FieldRequireJournalEntryApproval},
			accountingcontrol.FieldEnableRecNotifications:       {Type: field.TypeBool, Column: accountingcontrol.FieldEnableRecNotifications},
			accountingcontrol.FieldHaltOnPendingRec:             {Type: field.TypeBool, Column: accountingcontrol.FieldHaltOnPendingRec},
			accountingcontrol.FieldCriticalProcesses:            {Type: field.TypeString, Column: accountingcontrol.FieldCriticalProcesses},
			accountingcontrol.FieldDefaultRevAccountID:          {Type: field.TypeUUID, Column: accountingcontrol.FieldDefaultRevAccountID},
			accountingcontrol.FieldDefaultExpAccountID:          {Type: field.TypeUUID, Column: accountingcontrol.FieldDefaultExpAccountID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   billingcontrol.Table,
			Columns: billingcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: billingcontrol.FieldID,
			},
		},
		Type: "BillingControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			billingcontrol.FieldCreatedAt:                {Type: field.TypeTime, Column: billingcontrol.FieldCreatedAt},
			billingcontrol.FieldUpdatedAt:                {Type: field.TypeTime, Column: billingcontrol.FieldUpdatedAt},
			billingcontrol.FieldRemoveBillingHistory:     {Type: field.TypeBool, Column: billingcontrol.FieldRemoveBillingHistory},
			billingcontrol.FieldAutoBillShipment:         {Type: field.TypeBool, Column: billingcontrol.FieldAutoBillShipment},
			billingcontrol.FieldAutoMarkReadyToBill:      {Type: field.TypeBool, Column: billingcontrol.FieldAutoMarkReadyToBill},
			billingcontrol.FieldValidateCustomerRates:    {Type: field.TypeBool, Column: billingcontrol.FieldValidateCustomerRates},
			billingcontrol.FieldAutoBillCriteria:         {Type: field.TypeEnum, Column: billingcontrol.FieldAutoBillCriteria},
			billingcontrol.FieldShipmentTransferCriteria: {Type: field.TypeEnum, Column: billingcontrol.FieldShipmentTransferCriteria},
			billingcontrol.FieldEnforceCustomerBilling:   {Type: field.TypeBool, Column: billingcontrol.FieldEnforceCustomerBilling},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   businessunit.Table,
			Columns: businessunit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: businessunit.FieldID,
			},
		},
		Type: "BusinessUnit",
		Fields: map[string]*sqlgraph.FieldSpec{
			businessunit.FieldCreatedAt:        {Type: field.TypeTime, Column: businessunit.FieldCreatedAt},
			businessunit.FieldUpdatedAt:        {Type: field.TypeTime, Column: businessunit.FieldUpdatedAt},
			businessunit.FieldStatus:           {Type: field.TypeEnum, Column: businessunit.FieldStatus},
			businessunit.FieldName:             {Type: field.TypeString, Column: businessunit.FieldName},
			businessunit.FieldEntityKey:        {Type: field.TypeString, Column: businessunit.FieldEntityKey},
			businessunit.FieldPhoneNumber:      {Type: field.TypeString, Column: businessunit.FieldPhoneNumber},
			businessunit.FieldAddress:          {Type: field.TypeString, Column: businessunit.FieldAddress},
			businessunit.FieldCity:             {Type: field.TypeString, Column: businessunit.FieldCity},
			businessunit.FieldState:            {Type: field.TypeString, Column: businessunit.FieldState},
			businessunit.FieldCountry:          {Type: field.TypeString, Column: businessunit.FieldCountry},
			businessunit.FieldPostalCode:       {Type: field.TypeString, Column: businessunit.FieldPostalCode},
			businessunit.FieldTaxID:            {Type: field.TypeString, Column: businessunit.FieldTaxID},
			businessunit.FieldSubscriptionPlan: {Type: field.TypeString, Column: businessunit.FieldSubscriptionPlan},
			businessunit.FieldDescription:      {Type: field.TypeString, Column: businessunit.FieldDescription},
			businessunit.FieldLegalName:        {Type: field.TypeString, Column: businessunit.FieldLegalName},
			businessunit.FieldContactName:      {Type: field.TypeString, Column: businessunit.FieldContactName},
			businessunit.FieldContactEmail:     {Type: field.TypeString, Column: businessunit.FieldContactEmail},
			businessunit.FieldPaidUntil:        {Type: field.TypeTime, Column: businessunit.FieldPaidUntil},
			businessunit.FieldSettings:         {Type: field.TypeJSON, Column: businessunit.FieldSettings},
			businessunit.FieldFreeTrial:        {Type: field.TypeBool, Column: businessunit.FieldFreeTrial},
			businessunit.FieldParentID:         {Type: field.TypeUUID, Column: businessunit.FieldParentID},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   chargetype.Table,
			Columns: chargetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: chargetype.FieldID,
			},
		},
		Type: "ChargeType",
		Fields: map[string]*sqlgraph.FieldSpec{
			chargetype.FieldBusinessUnitID: {Type: field.TypeUUID, Column: chargetype.FieldBusinessUnitID},
			chargetype.FieldOrganizationID: {Type: field.TypeUUID, Column: chargetype.FieldOrganizationID},
			chargetype.FieldCreatedAt:      {Type: field.TypeTime, Column: chargetype.FieldCreatedAt},
			chargetype.FieldUpdatedAt:      {Type: field.TypeTime, Column: chargetype.FieldUpdatedAt},
			chargetype.FieldVersion:        {Type: field.TypeInt, Column: chargetype.FieldVersion},
			chargetype.FieldStatus:         {Type: field.TypeEnum, Column: chargetype.FieldStatus},
			chargetype.FieldName:           {Type: field.TypeString, Column: chargetype.FieldName},
			chargetype.FieldDescription:    {Type: field.TypeString, Column: chargetype.FieldDescription},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   commenttype.Table,
			Columns: commenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: commenttype.FieldID,
			},
		},
		Type: "CommentType",
		Fields: map[string]*sqlgraph.FieldSpec{
			commenttype.FieldBusinessUnitID: {Type: field.TypeUUID, Column: commenttype.FieldBusinessUnitID},
			commenttype.FieldOrganizationID: {Type: field.TypeUUID, Column: commenttype.FieldOrganizationID},
			commenttype.FieldCreatedAt:      {Type: field.TypeTime, Column: commenttype.FieldCreatedAt},
			commenttype.FieldUpdatedAt:      {Type: field.TypeTime, Column: commenttype.FieldUpdatedAt},
			commenttype.FieldVersion:        {Type: field.TypeInt, Column: commenttype.FieldVersion},
			commenttype.FieldStatus:         {Type: field.TypeEnum, Column: commenttype.FieldStatus},
			commenttype.FieldName:           {Type: field.TypeString, Column: commenttype.FieldName},
			commenttype.FieldSeverity:       {Type: field.TypeEnum, Column: commenttype.FieldSeverity},
			commenttype.FieldDescription:    {Type: field.TypeString, Column: commenttype.FieldDescription},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   commodity.Table,
			Columns: commodity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: commodity.FieldID,
			},
		},
		Type: "Commodity",
		Fields: map[string]*sqlgraph.FieldSpec{
			commodity.FieldBusinessUnitID:      {Type: field.TypeUUID, Column: commodity.FieldBusinessUnitID},
			commodity.FieldOrganizationID:      {Type: field.TypeUUID, Column: commodity.FieldOrganizationID},
			commodity.FieldCreatedAt:           {Type: field.TypeTime, Column: commodity.FieldCreatedAt},
			commodity.FieldUpdatedAt:           {Type: field.TypeTime, Column: commodity.FieldUpdatedAt},
			commodity.FieldVersion:             {Type: field.TypeInt, Column: commodity.FieldVersion},
			commodity.FieldStatus:              {Type: field.TypeEnum, Column: commodity.FieldStatus},
			commodity.FieldName:                {Type: field.TypeString, Column: commodity.FieldName},
			commodity.FieldIsHazmat:            {Type: field.TypeBool, Column: commodity.FieldIsHazmat},
			commodity.FieldUnitOfMeasure:       {Type: field.TypeString, Column: commodity.FieldUnitOfMeasure},
			commodity.FieldMinTemp:             {Type: field.TypeInt8, Column: commodity.FieldMinTemp},
			commodity.FieldMaxTemp:             {Type: field.TypeInt8, Column: commodity.FieldMaxTemp},
			commodity.FieldDescription:         {Type: field.TypeString, Column: commodity.FieldDescription},
			commodity.FieldHazardousMaterialID: {Type: field.TypeUUID, Column: commodity.FieldHazardousMaterialID},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   customer.Table,
			Columns: customer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: customer.FieldID,
			},
		},
		Type: "Customer",
		Fields: map[string]*sqlgraph.FieldSpec{
			customer.FieldBusinessUnitID:      {Type: field.TypeUUID, Column: customer.FieldBusinessUnitID},
			customer.FieldOrganizationID:      {Type: field.TypeUUID, Column: customer.FieldOrganizationID},
			customer.FieldCreatedAt:           {Type: field.TypeTime, Column: customer.FieldCreatedAt},
			customer.FieldUpdatedAt:           {Type: field.TypeTime, Column: customer.FieldUpdatedAt},
			customer.FieldVersion:             {Type: field.TypeInt, Column: customer.FieldVersion},
			customer.FieldStatus:              {Type: field.TypeEnum, Column: customer.FieldStatus},
			customer.FieldCode:                {Type: field.TypeString, Column: customer.FieldCode},
			customer.FieldName:                {Type: field.TypeString, Column: customer.FieldName},
			customer.FieldAddressLine1:        {Type: field.TypeString, Column: customer.FieldAddressLine1},
			customer.FieldAddressLine2:        {Type: field.TypeString, Column: customer.FieldAddressLine2},
			customer.FieldCity:                {Type: field.TypeString, Column: customer.FieldCity},
			customer.FieldStateID:             {Type: field.TypeUUID, Column: customer.FieldStateID},
			customer.FieldPostalCode:          {Type: field.TypeString, Column: customer.FieldPostalCode},
			customer.FieldHasCustomerPortal:   {Type: field.TypeBool, Column: customer.FieldHasCustomerPortal},
			customer.FieldAutoMarkReadyToBill: {Type: field.TypeBool, Column: customer.FieldAutoMarkReadyToBill},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   delaycode.Table,
			Columns: delaycode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: delaycode.FieldID,
			},
		},
		Type: "DelayCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			delaycode.FieldBusinessUnitID:   {Type: field.TypeUUID, Column: delaycode.FieldBusinessUnitID},
			delaycode.FieldOrganizationID:   {Type: field.TypeUUID, Column: delaycode.FieldOrganizationID},
			delaycode.FieldCreatedAt:        {Type: field.TypeTime, Column: delaycode.FieldCreatedAt},
			delaycode.FieldUpdatedAt:        {Type: field.TypeTime, Column: delaycode.FieldUpdatedAt},
			delaycode.FieldVersion:          {Type: field.TypeInt, Column: delaycode.FieldVersion},
			delaycode.FieldStatus:           {Type: field.TypeEnum, Column: delaycode.FieldStatus},
			delaycode.FieldCode:             {Type: field.TypeString, Column: delaycode.FieldCode},
			delaycode.FieldDescription:      {Type: field.TypeString, Column: delaycode.FieldDescription},
			delaycode.FieldFCarrierOrDriver: {Type: field.TypeBool, Column: delaycode.FieldFCarrierOrDriver},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dispatchcontrol.Table,
			Columns: dispatchcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dispatchcontrol.FieldID,
			},
		},
		Type: "DispatchControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			dispatchcontrol.FieldCreatedAt:                    {Type: field.TypeTime, Column: dispatchcontrol.FieldCreatedAt},
			dispatchcontrol.FieldUpdatedAt:                    {Type: field.TypeTime, Column: dispatchcontrol.FieldUpdatedAt},
			dispatchcontrol.FieldRecordServiceIncident:        {Type: field.TypeEnum, Column: dispatchcontrol.FieldRecordServiceIncident},
			dispatchcontrol.FieldDeadheadTarget:               {Type: field.TypeFloat64, Column: dispatchcontrol.FieldDeadheadTarget},
			dispatchcontrol.FieldMaxShipmentWeightLimit:       {Type: field.TypeInt32, Column: dispatchcontrol.FieldMaxShipmentWeightLimit},
			dispatchcontrol.FieldGracePeriod:                  {Type: field.TypeUint8, Column: dispatchcontrol.FieldGracePeriod},
			dispatchcontrol.FieldEnforceWorkerAssign:          {Type: field.TypeBool, Column: dispatchcontrol.FieldEnforceWorkerAssign},
			dispatchcontrol.FieldTrailerContinuity:            {Type: field.TypeBool, Column: dispatchcontrol.FieldTrailerContinuity},
			dispatchcontrol.FieldDupeTrailerCheck:             {Type: field.TypeBool, Column: dispatchcontrol.FieldDupeTrailerCheck},
			dispatchcontrol.FieldMaintenanceCompliance:        {Type: field.TypeBool, Column: dispatchcontrol.FieldMaintenanceCompliance},
			dispatchcontrol.FieldRegulatoryCheck:              {Type: field.TypeBool, Column: dispatchcontrol.FieldRegulatoryCheck},
			dispatchcontrol.FieldPrevShipmentOnHold:           {Type: field.TypeBool, Column: dispatchcontrol.FieldPrevShipmentOnHold},
			dispatchcontrol.FieldWorkerTimeAwayRestriction:    {Type: field.TypeBool, Column: dispatchcontrol.FieldWorkerTimeAwayRestriction},
			dispatchcontrol.FieldTractorWorkerFleetConstraint: {Type: field.TypeBool, Column: dispatchcontrol.FieldTractorWorkerFleetConstraint},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   divisioncode.Table,
			Columns: divisioncode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: divisioncode.FieldID,
			},
		},
		Type: "DivisionCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			divisioncode.FieldBusinessUnitID:   {Type: field.TypeUUID, Column: divisioncode.FieldBusinessUnitID},
			divisioncode.FieldOrganizationID:   {Type: field.TypeUUID, Column: divisioncode.FieldOrganizationID},
			divisioncode.FieldCreatedAt:        {Type: field.TypeTime, Column: divisioncode.FieldCreatedAt},
			divisioncode.FieldUpdatedAt:        {Type: field.TypeTime, Column: divisioncode.FieldUpdatedAt},
			divisioncode.FieldVersion:          {Type: field.TypeInt, Column: divisioncode.FieldVersion},
			divisioncode.FieldStatus:           {Type: field.TypeEnum, Column: divisioncode.FieldStatus},
			divisioncode.FieldCode:             {Type: field.TypeString, Column: divisioncode.FieldCode},
			divisioncode.FieldDescription:      {Type: field.TypeString, Column: divisioncode.FieldDescription},
			divisioncode.FieldCashAccountID:    {Type: field.TypeUUID, Column: divisioncode.FieldCashAccountID},
			divisioncode.FieldApAccountID:      {Type: field.TypeUUID, Column: divisioncode.FieldApAccountID},
			divisioncode.FieldExpenseAccountID: {Type: field.TypeUUID, Column: divisioncode.FieldExpenseAccountID},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   documentclassification.Table,
			Columns: documentclassification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: documentclassification.FieldID,
			},
		},
		Type: "DocumentClassification",
		Fields: map[string]*sqlgraph.FieldSpec{
			documentclassification.FieldBusinessUnitID: {Type: field.TypeUUID, Column: documentclassification.FieldBusinessUnitID},
			documentclassification.FieldOrganizationID: {Type: field.TypeUUID, Column: documentclassification.FieldOrganizationID},
			documentclassification.FieldCreatedAt:      {Type: field.TypeTime, Column: documentclassification.FieldCreatedAt},
			documentclassification.FieldUpdatedAt:      {Type: field.TypeTime, Column: documentclassification.FieldUpdatedAt},
			documentclassification.FieldVersion:        {Type: field.TypeInt, Column: documentclassification.FieldVersion},
			documentclassification.FieldStatus:         {Type: field.TypeEnum, Column: documentclassification.FieldStatus},
			documentclassification.FieldCode:           {Type: field.TypeString, Column: documentclassification.FieldCode},
			documentclassification.FieldDescription:    {Type: field.TypeString, Column: documentclassification.FieldDescription},
			documentclassification.FieldColor:          {Type: field.TypeString, Column: documentclassification.FieldColor},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailcontrol.Table,
			Columns: emailcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailcontrol.FieldID,
			},
		},
		Type: "EmailControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailcontrol.FieldCreatedAt:                     {Type: field.TypeTime, Column: emailcontrol.FieldCreatedAt},
			emailcontrol.FieldUpdatedAt:                     {Type: field.TypeTime, Column: emailcontrol.FieldUpdatedAt},
			emailcontrol.FieldBillingEmailProfileID:         {Type: field.TypeUUID, Column: emailcontrol.FieldBillingEmailProfileID},
			emailcontrol.FieldRateExpirtationEmailProfileID: {Type: field.TypeUUID, Column: emailcontrol.FieldRateExpirtationEmailProfileID},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailprofile.Table,
			Columns: emailprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailprofile.FieldID,
			},
		},
		Type: "EmailProfile",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailprofile.FieldBusinessUnitID: {Type: field.TypeUUID, Column: emailprofile.FieldBusinessUnitID},
			emailprofile.FieldOrganizationID: {Type: field.TypeUUID, Column: emailprofile.FieldOrganizationID},
			emailprofile.FieldCreatedAt:      {Type: field.TypeTime, Column: emailprofile.FieldCreatedAt},
			emailprofile.FieldUpdatedAt:      {Type: field.TypeTime, Column: emailprofile.FieldUpdatedAt},
			emailprofile.FieldVersion:        {Type: field.TypeInt, Column: emailprofile.FieldVersion},
			emailprofile.FieldName:           {Type: field.TypeString, Column: emailprofile.FieldName},
			emailprofile.FieldEmail:          {Type: field.TypeString, Column: emailprofile.FieldEmail},
			emailprofile.FieldProtocol:       {Type: field.TypeEnum, Column: emailprofile.FieldProtocol},
			emailprofile.FieldHost:           {Type: field.TypeString, Column: emailprofile.FieldHost},
			emailprofile.FieldPort:           {Type: field.TypeInt16, Column: emailprofile.FieldPort},
			emailprofile.FieldUsername:       {Type: field.TypeString, Column: emailprofile.FieldUsername},
			emailprofile.FieldPassword:       {Type: field.TypeString, Column: emailprofile.FieldPassword},
			emailprofile.FieldIsDefault:      {Type: field.TypeBool, Column: emailprofile.FieldIsDefault},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   equipmentmanufactuer.Table,
			Columns: equipmentmanufactuer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: equipmentmanufactuer.FieldID,
			},
		},
		Type: "EquipmentManufactuer",
		Fields: map[string]*sqlgraph.FieldSpec{
			equipmentmanufactuer.FieldBusinessUnitID: {Type: field.TypeUUID, Column: equipmentmanufactuer.FieldBusinessUnitID},
			equipmentmanufactuer.FieldOrganizationID: {Type: field.TypeUUID, Column: equipmentmanufactuer.FieldOrganizationID},
			equipmentmanufactuer.FieldCreatedAt:      {Type: field.TypeTime, Column: equipmentmanufactuer.FieldCreatedAt},
			equipmentmanufactuer.FieldUpdatedAt:      {Type: field.TypeTime, Column: equipmentmanufactuer.FieldUpdatedAt},
			equipmentmanufactuer.FieldVersion:        {Type: field.TypeInt, Column: equipmentmanufactuer.FieldVersion},
			equipmentmanufactuer.FieldStatus:         {Type: field.TypeEnum, Column: equipmentmanufactuer.FieldStatus},
			equipmentmanufactuer.FieldName:           {Type: field.TypeString, Column: equipmentmanufactuer.FieldName},
			equipmentmanufactuer.FieldDescription:    {Type: field.TypeString, Column: equipmentmanufactuer.FieldDescription},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   equipmenttype.Table,
			Columns: equipmenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: equipmenttype.FieldID,
			},
		},
		Type: "EquipmentType",
		Fields: map[string]*sqlgraph.FieldSpec{
			equipmenttype.FieldBusinessUnitID:  {Type: field.TypeUUID, Column: equipmenttype.FieldBusinessUnitID},
			equipmenttype.FieldOrganizationID:  {Type: field.TypeUUID, Column: equipmenttype.FieldOrganizationID},
			equipmenttype.FieldCreatedAt:       {Type: field.TypeTime, Column: equipmenttype.FieldCreatedAt},
			equipmenttype.FieldUpdatedAt:       {Type: field.TypeTime, Column: equipmenttype.FieldUpdatedAt},
			equipmenttype.FieldVersion:         {Type: field.TypeInt, Column: equipmenttype.FieldVersion},
			equipmenttype.FieldStatus:          {Type: field.TypeEnum, Column: equipmenttype.FieldStatus},
			equipmenttype.FieldCode:            {Type: field.TypeString, Column: equipmenttype.FieldCode},
			equipmenttype.FieldDescription:     {Type: field.TypeString, Column: equipmenttype.FieldDescription},
			equipmenttype.FieldCostPerMile:     {Type: field.TypeFloat64, Column: equipmenttype.FieldCostPerMile},
			equipmenttype.FieldEquipmentClass:  {Type: field.TypeEnum, Column: equipmenttype.FieldEquipmentClass},
			equipmenttype.FieldFixedCost:       {Type: field.TypeFloat64, Column: equipmenttype.FieldFixedCost},
			equipmenttype.FieldVariableCost:    {Type: field.TypeFloat64, Column: equipmenttype.FieldVariableCost},
			equipmenttype.FieldHeight:          {Type: field.TypeFloat64, Column: equipmenttype.FieldHeight},
			equipmenttype.FieldLength:          {Type: field.TypeFloat64, Column: equipmenttype.FieldLength},
			equipmenttype.FieldWidth:           {Type: field.TypeFloat64, Column: equipmenttype.FieldWidth},
			equipmenttype.FieldWeight:          {Type: field.TypeFloat64, Column: equipmenttype.FieldWeight},
			equipmenttype.FieldIdlingFuelUsage: {Type: field.TypeFloat64, Column: equipmenttype.FieldIdlingFuelUsage},
			equipmenttype.FieldExemptFromTolls: {Type: field.TypeBool, Column: equipmenttype.FieldExemptFromTolls},
			equipmenttype.FieldColor:           {Type: field.TypeString, Column: equipmenttype.FieldColor},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   feasibilitytoolcontrol.Table,
			Columns: feasibilitytoolcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: feasibilitytoolcontrol.FieldID,
			},
		},
		Type: "FeasibilityToolControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			feasibilitytoolcontrol.FieldCreatedAt:   {Type: field.TypeTime, Column: feasibilitytoolcontrol.FieldCreatedAt},
			feasibilitytoolcontrol.FieldUpdatedAt:   {Type: field.TypeTime, Column: feasibilitytoolcontrol.FieldUpdatedAt},
			feasibilitytoolcontrol.FieldOtpOperator: {Type: field.TypeEnum, Column: feasibilitytoolcontrol.FieldOtpOperator},
			feasibilitytoolcontrol.FieldOtpValue:    {Type: field.TypeFloat64, Column: feasibilitytoolcontrol.FieldOtpValue},
			feasibilitytoolcontrol.FieldMpwOperator: {Type: field.TypeEnum, Column: feasibilitytoolcontrol.FieldMpwOperator},
			feasibilitytoolcontrol.FieldMpwValue:    {Type: field.TypeFloat64, Column: feasibilitytoolcontrol.FieldMpwValue},
			feasibilitytoolcontrol.FieldMpdOperator: {Type: field.TypeEnum, Column: feasibilitytoolcontrol.FieldMpdOperator},
			feasibilitytoolcontrol.FieldMpdValue:    {Type: field.TypeFloat64, Column: feasibilitytoolcontrol.FieldMpdValue},
			feasibilitytoolcontrol.FieldMpgOperator: {Type: field.TypeEnum, Column: feasibilitytoolcontrol.FieldMpgOperator},
			feasibilitytoolcontrol.FieldMpgValue:    {Type: field.TypeFloat64, Column: feasibilitytoolcontrol.FieldMpgValue},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   featureflag.Table,
			Columns: featureflag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: featureflag.FieldID,
			},
		},
		Type: "FeatureFlag",
		Fields: map[string]*sqlgraph.FieldSpec{
			featureflag.FieldCreatedAt:         {Type: field.TypeTime, Column: featureflag.FieldCreatedAt},
			featureflag.FieldUpdatedAt:         {Type: field.TypeTime, Column: featureflag.FieldUpdatedAt},
			featureflag.FieldName:              {Type: field.TypeString, Column: featureflag.FieldName},
			featureflag.FieldCode:              {Type: field.TypeString, Column: featureflag.FieldCode},
			featureflag.FieldBeta:              {Type: field.TypeBool, Column: featureflag.FieldBeta},
			featureflag.FieldDescription:       {Type: field.TypeString, Column: featureflag.FieldDescription},
			featureflag.FieldPreviewPictureURL: {Type: field.TypeString, Column: featureflag.FieldPreviewPictureURL},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   fleetcode.Table,
			Columns: fleetcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fleetcode.FieldID,
			},
		},
		Type: "FleetCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			fleetcode.FieldBusinessUnitID: {Type: field.TypeUUID, Column: fleetcode.FieldBusinessUnitID},
			fleetcode.FieldOrganizationID: {Type: field.TypeUUID, Column: fleetcode.FieldOrganizationID},
			fleetcode.FieldCreatedAt:      {Type: field.TypeTime, Column: fleetcode.FieldCreatedAt},
			fleetcode.FieldUpdatedAt:      {Type: field.TypeTime, Column: fleetcode.FieldUpdatedAt},
			fleetcode.FieldVersion:        {Type: field.TypeInt, Column: fleetcode.FieldVersion},
			fleetcode.FieldStatus:         {Type: field.TypeEnum, Column: fleetcode.FieldStatus},
			fleetcode.FieldCode:           {Type: field.TypeString, Column: fleetcode.FieldCode},
			fleetcode.FieldDescription:    {Type: field.TypeString, Column: fleetcode.FieldDescription},
			fleetcode.FieldRevenueGoal:    {Type: field.TypeFloat64, Column: fleetcode.FieldRevenueGoal},
			fleetcode.FieldDeadheadGoal:   {Type: field.TypeFloat64, Column: fleetcode.FieldDeadheadGoal},
			fleetcode.FieldMileageGoal:    {Type: field.TypeFloat64, Column: fleetcode.FieldMileageGoal},
			fleetcode.FieldManagerID:      {Type: field.TypeUUID, Column: fleetcode.FieldManagerID},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   generalledgeraccount.Table,
			Columns: generalledgeraccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: generalledgeraccount.FieldID,
			},
		},
		Type: "GeneralLedgerAccount",
		Fields: map[string]*sqlgraph.FieldSpec{
			generalledgeraccount.FieldBusinessUnitID: {Type: field.TypeUUID, Column: generalledgeraccount.FieldBusinessUnitID},
			generalledgeraccount.FieldOrganizationID: {Type: field.TypeUUID, Column: generalledgeraccount.FieldOrganizationID},
			generalledgeraccount.FieldCreatedAt:      {Type: field.TypeTime, Column: generalledgeraccount.FieldCreatedAt},
			generalledgeraccount.FieldUpdatedAt:      {Type: field.TypeTime, Column: generalledgeraccount.FieldUpdatedAt},
			generalledgeraccount.FieldVersion:        {Type: field.TypeInt, Column: generalledgeraccount.FieldVersion},
			generalledgeraccount.FieldStatus:         {Type: field.TypeEnum, Column: generalledgeraccount.FieldStatus},
			generalledgeraccount.FieldAccountNumber:  {Type: field.TypeString, Column: generalledgeraccount.FieldAccountNumber},
			generalledgeraccount.FieldAccountType:    {Type: field.TypeEnum, Column: generalledgeraccount.FieldAccountType},
			generalledgeraccount.FieldCashFlowType:   {Type: field.TypeString, Column: generalledgeraccount.FieldCashFlowType},
			generalledgeraccount.FieldAccountSubType: {Type: field.TypeString, Column: generalledgeraccount.FieldAccountSubType},
			generalledgeraccount.FieldAccountClass:   {Type: field.TypeString, Column: generalledgeraccount.FieldAccountClass},
			generalledgeraccount.FieldBalance:        {Type: field.TypeFloat64, Column: generalledgeraccount.FieldBalance},
			generalledgeraccount.FieldInterestRate:   {Type: field.TypeFloat64, Column: generalledgeraccount.FieldInterestRate},
			generalledgeraccount.FieldDateOpened:     {Type: field.TypeOther, Column: generalledgeraccount.FieldDateOpened},
			generalledgeraccount.FieldDateClosed:     {Type: field.TypeOther, Column: generalledgeraccount.FieldDateClosed},
			generalledgeraccount.FieldNotes:          {Type: field.TypeString, Column: generalledgeraccount.FieldNotes},
			generalledgeraccount.FieldIsTaxRelevant:  {Type: field.TypeBool, Column: generalledgeraccount.FieldIsTaxRelevant},
			generalledgeraccount.FieldIsReconciled:   {Type: field.TypeBool, Column: generalledgeraccount.FieldIsReconciled},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   googleapi.Table,
			Columns: googleapi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: googleapi.FieldID,
			},
		},
		Type: "GoogleApi",
		Fields: map[string]*sqlgraph.FieldSpec{
			googleapi.FieldCreatedAt:           {Type: field.TypeTime, Column: googleapi.FieldCreatedAt},
			googleapi.FieldUpdatedAt:           {Type: field.TypeTime, Column: googleapi.FieldUpdatedAt},
			googleapi.FieldAPIKey:              {Type: field.TypeString, Column: googleapi.FieldAPIKey},
			googleapi.FieldMileageUnit:         {Type: field.TypeEnum, Column: googleapi.FieldMileageUnit},
			googleapi.FieldAddCustomerLocation: {Type: field.TypeBool, Column: googleapi.FieldAddCustomerLocation},
			googleapi.FieldAutoGeocode:         {Type: field.TypeBool, Column: googleapi.FieldAutoGeocode},
			googleapi.FieldAddLocation:         {Type: field.TypeBool, Column: googleapi.FieldAddLocation},
			googleapi.FieldTrafficModel:        {Type: field.TypeEnum, Column: googleapi.FieldTrafficModel},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hazardousmaterial.Table,
			Columns: hazardousmaterial.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hazardousmaterial.FieldID,
			},
		},
		Type: "HazardousMaterial",
		Fields: map[string]*sqlgraph.FieldSpec{
			hazardousmaterial.FieldBusinessUnitID:     {Type: field.TypeUUID, Column: hazardousmaterial.FieldBusinessUnitID},
			hazardousmaterial.FieldOrganizationID:     {Type: field.TypeUUID, Column: hazardousmaterial.FieldOrganizationID},
			hazardousmaterial.FieldCreatedAt:          {Type: field.TypeTime, Column: hazardousmaterial.FieldCreatedAt},
			hazardousmaterial.FieldUpdatedAt:          {Type: field.TypeTime, Column: hazardousmaterial.FieldUpdatedAt},
			hazardousmaterial.FieldVersion:            {Type: field.TypeInt, Column: hazardousmaterial.FieldVersion},
			hazardousmaterial.FieldStatus:             {Type: field.TypeEnum, Column: hazardousmaterial.FieldStatus},
			hazardousmaterial.FieldName:               {Type: field.TypeString, Column: hazardousmaterial.FieldName},
			hazardousmaterial.FieldHazardClass:        {Type: field.TypeEnum, Column: hazardousmaterial.FieldHazardClass},
			hazardousmaterial.FieldErgNumber:          {Type: field.TypeString, Column: hazardousmaterial.FieldErgNumber},
			hazardousmaterial.FieldDescription:        {Type: field.TypeString, Column: hazardousmaterial.FieldDescription},
			hazardousmaterial.FieldPackingGroup:       {Type: field.TypeString, Column: hazardousmaterial.FieldPackingGroup},
			hazardousmaterial.FieldProperShippingName: {Type: field.TypeString, Column: hazardousmaterial.FieldProperShippingName},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hazardousmaterialsegregation.Table,
			Columns: hazardousmaterialsegregation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hazardousmaterialsegregation.FieldID,
			},
		},
		Type: "HazardousMaterialSegregation",
		Fields: map[string]*sqlgraph.FieldSpec{
			hazardousmaterialsegregation.FieldBusinessUnitID:  {Type: field.TypeUUID, Column: hazardousmaterialsegregation.FieldBusinessUnitID},
			hazardousmaterialsegregation.FieldOrganizationID:  {Type: field.TypeUUID, Column: hazardousmaterialsegregation.FieldOrganizationID},
			hazardousmaterialsegregation.FieldCreatedAt:       {Type: field.TypeTime, Column: hazardousmaterialsegregation.FieldCreatedAt},
			hazardousmaterialsegregation.FieldUpdatedAt:       {Type: field.TypeTime, Column: hazardousmaterialsegregation.FieldUpdatedAt},
			hazardousmaterialsegregation.FieldVersion:         {Type: field.TypeInt, Column: hazardousmaterialsegregation.FieldVersion},
			hazardousmaterialsegregation.FieldClassA:          {Type: field.TypeEnum, Column: hazardousmaterialsegregation.FieldClassA},
			hazardousmaterialsegregation.FieldClassB:          {Type: field.TypeEnum, Column: hazardousmaterialsegregation.FieldClassB},
			hazardousmaterialsegregation.FieldSegregationType: {Type: field.TypeEnum, Column: hazardousmaterialsegregation.FieldSegregationType},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   invoicecontrol.Table,
			Columns: invoicecontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invoicecontrol.FieldID,
			},
		},
		Type: "InvoiceControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			invoicecontrol.FieldCreatedAt:              {Type: field.TypeTime, Column: invoicecontrol.FieldCreatedAt},
			invoicecontrol.FieldUpdatedAt:              {Type: field.TypeTime, Column: invoicecontrol.FieldUpdatedAt},
			invoicecontrol.FieldInvoiceNumberPrefix:    {Type: field.TypeString, Column: invoicecontrol.FieldInvoiceNumberPrefix},
			invoicecontrol.FieldCreditMemoNumberPrefix: {Type: field.TypeString, Column: invoicecontrol.FieldCreditMemoNumberPrefix},
			invoicecontrol.FieldInvoiceTerms:           {Type: field.TypeString, Column: invoicecontrol.FieldInvoiceTerms},
			invoicecontrol.FieldInvoiceFooter:          {Type: field.TypeString, Column: invoicecontrol.FieldInvoiceFooter},
			invoicecontrol.FieldInvoiceLogoURL:         {Type: field.TypeString, Column: invoicecontrol.FieldInvoiceLogoURL},
			invoicecontrol.FieldInvoiceDateFormat:      {Type: field.TypeEnum, Column: invoicecontrol.FieldInvoiceDateFormat},
			invoicecontrol.FieldInvoiceDueAfterDays:    {Type: field.TypeUint8, Column: invoicecontrol.FieldInvoiceDueAfterDays},
			invoicecontrol.FieldInvoiceLogoWidth:       {Type: field.TypeUint16, Column: invoicecontrol.FieldInvoiceLogoWidth},
			invoicecontrol.FieldShowAmountDue:          {Type: field.TypeBool, Column: invoicecontrol.FieldShowAmountDue},
			invoicecontrol.FieldAttachPdf:              {Type: field.TypeBool, Column: invoicecontrol.FieldAttachPdf},
			invoicecontrol.FieldShowInvoiceDueDate:     {Type: field.TypeBool, Column: invoicecontrol.FieldShowInvoiceDueDate},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   location.Table,
			Columns: location.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: location.FieldID,
			},
		},
		Type: "Location",
		Fields: map[string]*sqlgraph.FieldSpec{
			location.FieldBusinessUnitID:     {Type: field.TypeUUID, Column: location.FieldBusinessUnitID},
			location.FieldOrganizationID:     {Type: field.TypeUUID, Column: location.FieldOrganizationID},
			location.FieldCreatedAt:          {Type: field.TypeTime, Column: location.FieldCreatedAt},
			location.FieldUpdatedAt:          {Type: field.TypeTime, Column: location.FieldUpdatedAt},
			location.FieldVersion:            {Type: field.TypeInt, Column: location.FieldVersion},
			location.FieldStatus:             {Type: field.TypeEnum, Column: location.FieldStatus},
			location.FieldCode:               {Type: field.TypeString, Column: location.FieldCode},
			location.FieldLocationCategoryID: {Type: field.TypeUUID, Column: location.FieldLocationCategoryID},
			location.FieldName:               {Type: field.TypeString, Column: location.FieldName},
			location.FieldDescription:        {Type: field.TypeString, Column: location.FieldDescription},
			location.FieldAddressLine1:       {Type: field.TypeString, Column: location.FieldAddressLine1},
			location.FieldAddressLine2:       {Type: field.TypeString, Column: location.FieldAddressLine2},
			location.FieldCity:               {Type: field.TypeString, Column: location.FieldCity},
			location.FieldStateID:            {Type: field.TypeUUID, Column: location.FieldStateID},
			location.FieldPostalCode:         {Type: field.TypeString, Column: location.FieldPostalCode},
			location.FieldLongitude:          {Type: field.TypeFloat64, Column: location.FieldLongitude},
			location.FieldLatitude:           {Type: field.TypeFloat64, Column: location.FieldLatitude},
			location.FieldPlaceID:            {Type: field.TypeString, Column: location.FieldPlaceID},
			location.FieldIsGeocoded:         {Type: field.TypeBool, Column: location.FieldIsGeocoded},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   locationcategory.Table,
			Columns: locationcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: locationcategory.FieldID,
			},
		},
		Type: "LocationCategory",
		Fields: map[string]*sqlgraph.FieldSpec{
			locationcategory.FieldBusinessUnitID: {Type: field.TypeUUID, Column: locationcategory.FieldBusinessUnitID},
			locationcategory.FieldOrganizationID: {Type: field.TypeUUID, Column: locationcategory.FieldOrganizationID},
			locationcategory.FieldCreatedAt:      {Type: field.TypeTime, Column: locationcategory.FieldCreatedAt},
			locationcategory.FieldUpdatedAt:      {Type: field.TypeTime, Column: locationcategory.FieldUpdatedAt},
			locationcategory.FieldVersion:        {Type: field.TypeInt, Column: locationcategory.FieldVersion},
			locationcategory.FieldName:           {Type: field.TypeString, Column: locationcategory.FieldName},
			locationcategory.FieldDescription:    {Type: field.TypeString, Column: locationcategory.FieldDescription},
			locationcategory.FieldColor:          {Type: field.TypeString, Column: locationcategory.FieldColor},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   locationcomment.Table,
			Columns: locationcomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: locationcomment.FieldID,
			},
		},
		Type: "LocationComment",
		Fields: map[string]*sqlgraph.FieldSpec{
			locationcomment.FieldBusinessUnitID: {Type: field.TypeUUID, Column: locationcomment.FieldBusinessUnitID},
			locationcomment.FieldOrganizationID: {Type: field.TypeUUID, Column: locationcomment.FieldOrganizationID},
			locationcomment.FieldCreatedAt:      {Type: field.TypeTime, Column: locationcomment.FieldCreatedAt},
			locationcomment.FieldUpdatedAt:      {Type: field.TypeTime, Column: locationcomment.FieldUpdatedAt},
			locationcomment.FieldVersion:        {Type: field.TypeInt, Column: locationcomment.FieldVersion},
			locationcomment.FieldLocationID:     {Type: field.TypeUUID, Column: locationcomment.FieldLocationID},
			locationcomment.FieldUserID:         {Type: field.TypeUUID, Column: locationcomment.FieldUserID},
			locationcomment.FieldCommentTypeID:  {Type: field.TypeUUID, Column: locationcomment.FieldCommentTypeID},
			locationcomment.FieldComment:        {Type: field.TypeString, Column: locationcomment.FieldComment},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   locationcontact.Table,
			Columns: locationcontact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: locationcontact.FieldID,
			},
		},
		Type: "LocationContact",
		Fields: map[string]*sqlgraph.FieldSpec{
			locationcontact.FieldBusinessUnitID: {Type: field.TypeUUID, Column: locationcontact.FieldBusinessUnitID},
			locationcontact.FieldOrganizationID: {Type: field.TypeUUID, Column: locationcontact.FieldOrganizationID},
			locationcontact.FieldCreatedAt:      {Type: field.TypeTime, Column: locationcontact.FieldCreatedAt},
			locationcontact.FieldUpdatedAt:      {Type: field.TypeTime, Column: locationcontact.FieldUpdatedAt},
			locationcontact.FieldVersion:        {Type: field.TypeInt, Column: locationcontact.FieldVersion},
			locationcontact.FieldLocationID:     {Type: field.TypeUUID, Column: locationcontact.FieldLocationID},
			locationcontact.FieldName:           {Type: field.TypeString, Column: locationcontact.FieldName},
			locationcontact.FieldEmailAddress:   {Type: field.TypeString, Column: locationcontact.FieldEmailAddress},
			locationcontact.FieldPhoneNumber:    {Type: field.TypeString, Column: locationcontact.FieldPhoneNumber},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldCreatedAt:      {Type: field.TypeTime, Column: organization.FieldCreatedAt},
			organization.FieldUpdatedAt:      {Type: field.TypeTime, Column: organization.FieldUpdatedAt},
			organization.FieldBusinessUnitID: {Type: field.TypeUUID, Column: organization.FieldBusinessUnitID},
			organization.FieldName:           {Type: field.TypeString, Column: organization.FieldName},
			organization.FieldScacCode:       {Type: field.TypeString, Column: organization.FieldScacCode},
			organization.FieldDotNumber:      {Type: field.TypeString, Column: organization.FieldDotNumber},
			organization.FieldLogoURL:        {Type: field.TypeString, Column: organization.FieldLogoURL},
			organization.FieldOrgType:        {Type: field.TypeEnum, Column: organization.FieldOrgType},
			organization.FieldTimezone:       {Type: field.TypeEnum, Column: organization.FieldTimezone},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationfeatureflag.Table,
			Columns: organizationfeatureflag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: organizationfeatureflag.FieldID,
			},
		},
		Type: "OrganizationFeatureFlag",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationfeatureflag.FieldCreatedAt:      {Type: field.TypeTime, Column: organizationfeatureflag.FieldCreatedAt},
			organizationfeatureflag.FieldUpdatedAt:      {Type: field.TypeTime, Column: organizationfeatureflag.FieldUpdatedAt},
			organizationfeatureflag.FieldOrganizationID: {Type: field.TypeUUID, Column: organizationfeatureflag.FieldOrganizationID},
			organizationfeatureflag.FieldFeatureFlagID:  {Type: field.TypeUUID, Column: organizationfeatureflag.FieldFeatureFlagID},
			organizationfeatureflag.FieldIsEnabled:      {Type: field.TypeBool, Column: organizationfeatureflag.FieldIsEnabled},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   qualifiercode.Table,
			Columns: qualifiercode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: qualifiercode.FieldID,
			},
		},
		Type: "QualifierCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			qualifiercode.FieldBusinessUnitID: {Type: field.TypeUUID, Column: qualifiercode.FieldBusinessUnitID},
			qualifiercode.FieldOrganizationID: {Type: field.TypeUUID, Column: qualifiercode.FieldOrganizationID},
			qualifiercode.FieldCreatedAt:      {Type: field.TypeTime, Column: qualifiercode.FieldCreatedAt},
			qualifiercode.FieldUpdatedAt:      {Type: field.TypeTime, Column: qualifiercode.FieldUpdatedAt},
			qualifiercode.FieldVersion:        {Type: field.TypeInt, Column: qualifiercode.FieldVersion},
			qualifiercode.FieldStatus:         {Type: field.TypeEnum, Column: qualifiercode.FieldStatus},
			qualifiercode.FieldCode:           {Type: field.TypeString, Column: qualifiercode.FieldCode},
			qualifiercode.FieldDescription:    {Type: field.TypeString, Column: qualifiercode.FieldDescription},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   reasoncode.Table,
			Columns: reasoncode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: reasoncode.FieldID,
			},
		},
		Type: "ReasonCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			reasoncode.FieldBusinessUnitID: {Type: field.TypeUUID, Column: reasoncode.FieldBusinessUnitID},
			reasoncode.FieldOrganizationID: {Type: field.TypeUUID, Column: reasoncode.FieldOrganizationID},
			reasoncode.FieldCreatedAt:      {Type: field.TypeTime, Column: reasoncode.FieldCreatedAt},
			reasoncode.FieldUpdatedAt:      {Type: field.TypeTime, Column: reasoncode.FieldUpdatedAt},
			reasoncode.FieldVersion:        {Type: field.TypeInt, Column: reasoncode.FieldVersion},
			reasoncode.FieldStatus:         {Type: field.TypeEnum, Column: reasoncode.FieldStatus},
			reasoncode.FieldCode:           {Type: field.TypeString, Column: reasoncode.FieldCode},
			reasoncode.FieldCodeType:       {Type: field.TypeEnum, Column: reasoncode.FieldCodeType},
			reasoncode.FieldDescription:    {Type: field.TypeString, Column: reasoncode.FieldDescription},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   revenuecode.Table,
			Columns: revenuecode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: revenuecode.FieldID,
			},
		},
		Type: "RevenueCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			revenuecode.FieldBusinessUnitID:   {Type: field.TypeUUID, Column: revenuecode.FieldBusinessUnitID},
			revenuecode.FieldOrganizationID:   {Type: field.TypeUUID, Column: revenuecode.FieldOrganizationID},
			revenuecode.FieldCreatedAt:        {Type: field.TypeTime, Column: revenuecode.FieldCreatedAt},
			revenuecode.FieldUpdatedAt:        {Type: field.TypeTime, Column: revenuecode.FieldUpdatedAt},
			revenuecode.FieldVersion:          {Type: field.TypeInt, Column: revenuecode.FieldVersion},
			revenuecode.FieldStatus:           {Type: field.TypeEnum, Column: revenuecode.FieldStatus},
			revenuecode.FieldCode:             {Type: field.TypeString, Column: revenuecode.FieldCode},
			revenuecode.FieldDescription:      {Type: field.TypeString, Column: revenuecode.FieldDescription},
			revenuecode.FieldExpenseAccountID: {Type: field.TypeUUID, Column: revenuecode.FieldExpenseAccountID},
			revenuecode.FieldRevenueAccountID: {Type: field.TypeUUID, Column: revenuecode.FieldRevenueAccountID},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   routecontrol.Table,
			Columns: routecontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: routecontrol.FieldID,
			},
		},
		Type: "RouteControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			routecontrol.FieldCreatedAt:      {Type: field.TypeTime, Column: routecontrol.FieldCreatedAt},
			routecontrol.FieldUpdatedAt:      {Type: field.TypeTime, Column: routecontrol.FieldUpdatedAt},
			routecontrol.FieldDistanceMethod: {Type: field.TypeEnum, Column: routecontrol.FieldDistanceMethod},
			routecontrol.FieldMileageUnit:    {Type: field.TypeEnum, Column: routecontrol.FieldMileageUnit},
			routecontrol.FieldGenerateRoutes: {Type: field.TypeBool, Column: routecontrol.FieldGenerateRoutes},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   servicetype.Table,
			Columns: servicetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servicetype.FieldID,
			},
		},
		Type: "ServiceType",
		Fields: map[string]*sqlgraph.FieldSpec{
			servicetype.FieldBusinessUnitID: {Type: field.TypeUUID, Column: servicetype.FieldBusinessUnitID},
			servicetype.FieldOrganizationID: {Type: field.TypeUUID, Column: servicetype.FieldOrganizationID},
			servicetype.FieldCreatedAt:      {Type: field.TypeTime, Column: servicetype.FieldCreatedAt},
			servicetype.FieldUpdatedAt:      {Type: field.TypeTime, Column: servicetype.FieldUpdatedAt},
			servicetype.FieldVersion:        {Type: field.TypeInt, Column: servicetype.FieldVersion},
			servicetype.FieldStatus:         {Type: field.TypeEnum, Column: servicetype.FieldStatus},
			servicetype.FieldCode:           {Type: field.TypeString, Column: servicetype.FieldCode},
			servicetype.FieldDescription:    {Type: field.TypeString, Column: servicetype.FieldDescription},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: session.FieldID,
			},
		},
		Type: "Session",
		Fields: map[string]*sqlgraph.FieldSpec{
			session.FieldData:      {Type: field.TypeString, Column: session.FieldData},
			session.FieldCreatedAt: {Type: field.TypeTime, Column: session.FieldCreatedAt},
			session.FieldUpdatedAt: {Type: field.TypeTime, Column: session.FieldUpdatedAt},
			session.FieldExpiresAt: {Type: field.TypeTime, Column: session.FieldExpiresAt},
		},
	}
	graph.Nodes[36] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentcontrol.Table,
			Columns: shipmentcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: shipmentcontrol.FieldID,
			},
		},
		Type: "ShipmentControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentcontrol.FieldCreatedAt:                {Type: field.TypeTime, Column: shipmentcontrol.FieldCreatedAt},
			shipmentcontrol.FieldUpdatedAt:                {Type: field.TypeTime, Column: shipmentcontrol.FieldUpdatedAt},
			shipmentcontrol.FieldAutoRateShipment:         {Type: field.TypeBool, Column: shipmentcontrol.FieldAutoRateShipment},
			shipmentcontrol.FieldCalculateDistance:        {Type: field.TypeBool, Column: shipmentcontrol.FieldCalculateDistance},
			shipmentcontrol.FieldEnforceRevCode:           {Type: field.TypeBool, Column: shipmentcontrol.FieldEnforceRevCode},
			shipmentcontrol.FieldEnforceVoidedComm:        {Type: field.TypeBool, Column: shipmentcontrol.FieldEnforceVoidedComm},
			shipmentcontrol.FieldGenerateRoutes:           {Type: field.TypeBool, Column: shipmentcontrol.FieldGenerateRoutes},
			shipmentcontrol.FieldEnforceCommodity:         {Type: field.TypeBool, Column: shipmentcontrol.FieldEnforceCommodity},
			shipmentcontrol.FieldAutoSequenceStops:        {Type: field.TypeBool, Column: shipmentcontrol.FieldAutoSequenceStops},
			shipmentcontrol.FieldAutoShipmentTotal:        {Type: field.TypeBool, Column: shipmentcontrol.FieldAutoShipmentTotal},
			shipmentcontrol.FieldEnforceOriginDestination: {Type: field.TypeBool, Column: shipmentcontrol.FieldEnforceOriginDestination},
			shipmentcontrol.FieldCheckForDuplicateBol:     {Type: field.TypeBool, Column: shipmentcontrol.FieldCheckForDuplicateBol},
			shipmentcontrol.FieldSendPlacardInfo:          {Type: field.TypeBool, Column: shipmentcontrol.FieldSendPlacardInfo},
			shipmentcontrol.FieldEnforceHazmatSegRules:    {Type: field.TypeBool, Column: shipmentcontrol.FieldEnforceHazmatSegRules},
		},
	}
	graph.Nodes[37] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmenttype.Table,
			Columns: shipmenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: shipmenttype.FieldID,
			},
		},
		Type: "ShipmentType",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmenttype.FieldBusinessUnitID: {Type: field.TypeUUID, Column: shipmenttype.FieldBusinessUnitID},
			shipmenttype.FieldOrganizationID: {Type: field.TypeUUID, Column: shipmenttype.FieldOrganizationID},
			shipmenttype.FieldCreatedAt:      {Type: field.TypeTime, Column: shipmenttype.FieldCreatedAt},
			shipmenttype.FieldUpdatedAt:      {Type: field.TypeTime, Column: shipmenttype.FieldUpdatedAt},
			shipmenttype.FieldVersion:        {Type: field.TypeInt, Column: shipmenttype.FieldVersion},
			shipmenttype.FieldStatus:         {Type: field.TypeEnum, Column: shipmenttype.FieldStatus},
			shipmenttype.FieldCode:           {Type: field.TypeString, Column: shipmenttype.FieldCode},
			shipmenttype.FieldDescription:    {Type: field.TypeString, Column: shipmenttype.FieldDescription},
		},
	}
	graph.Nodes[38] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tablechangealert.Table,
			Columns: tablechangealert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tablechangealert.FieldID,
			},
		},
		Type: "TableChangeAlert",
		Fields: map[string]*sqlgraph.FieldSpec{
			tablechangealert.FieldBusinessUnitID:  {Type: field.TypeUUID, Column: tablechangealert.FieldBusinessUnitID},
			tablechangealert.FieldOrganizationID:  {Type: field.TypeUUID, Column: tablechangealert.FieldOrganizationID},
			tablechangealert.FieldCreatedAt:       {Type: field.TypeTime, Column: tablechangealert.FieldCreatedAt},
			tablechangealert.FieldUpdatedAt:       {Type: field.TypeTime, Column: tablechangealert.FieldUpdatedAt},
			tablechangealert.FieldVersion:         {Type: field.TypeInt, Column: tablechangealert.FieldVersion},
			tablechangealert.FieldStatus:          {Type: field.TypeEnum, Column: tablechangealert.FieldStatus},
			tablechangealert.FieldName:            {Type: field.TypeString, Column: tablechangealert.FieldName},
			tablechangealert.FieldDatabaseAction:  {Type: field.TypeEnum, Column: tablechangealert.FieldDatabaseAction},
			tablechangealert.FieldSource:          {Type: field.TypeEnum, Column: tablechangealert.FieldSource},
			tablechangealert.FieldTableName:       {Type: field.TypeString, Column: tablechangealert.FieldTableName},
			tablechangealert.FieldTopicName:       {Type: field.TypeString, Column: tablechangealert.FieldTopicName},
			tablechangealert.FieldDescription:     {Type: field.TypeString, Column: tablechangealert.FieldDescription},
			tablechangealert.FieldCustomSubject:   {Type: field.TypeString, Column: tablechangealert.FieldCustomSubject},
			tablechangealert.FieldFunctionName:    {Type: field.TypeString, Column: tablechangealert.FieldFunctionName},
			tablechangealert.FieldTriggerName:     {Type: field.TypeString, Column: tablechangealert.FieldTriggerName},
			tablechangealert.FieldListenerName:    {Type: field.TypeString, Column: tablechangealert.FieldListenerName},
			tablechangealert.FieldEmailRecipients: {Type: field.TypeString, Column: tablechangealert.FieldEmailRecipients},
			tablechangealert.FieldEffectiveDate:   {Type: field.TypeOther, Column: tablechangealert.FieldEffectiveDate},
			tablechangealert.FieldExpirationDate:  {Type: field.TypeOther, Column: tablechangealert.FieldExpirationDate},
		},
	}
	graph.Nodes[39] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tag.Table,
			Columns: tag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tag.FieldID,
			},
		},
		Type: "Tag",
		Fields: map[string]*sqlgraph.FieldSpec{
			tag.FieldBusinessUnitID: {Type: field.TypeUUID, Column: tag.FieldBusinessUnitID},
			tag.FieldOrganizationID: {Type: field.TypeUUID, Column: tag.FieldOrganizationID},
			tag.FieldCreatedAt:      {Type: field.TypeTime, Column: tag.FieldCreatedAt},
			tag.FieldUpdatedAt:      {Type: field.TypeTime, Column: tag.FieldUpdatedAt},
			tag.FieldVersion:        {Type: field.TypeInt, Column: tag.FieldVersion},
			tag.FieldName:           {Type: field.TypeString, Column: tag.FieldName},
			tag.FieldDescription:    {Type: field.TypeString, Column: tag.FieldDescription},
			tag.FieldColor:          {Type: field.TypeString, Column: tag.FieldColor},
		},
	}
	graph.Nodes[40] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tractor.Table,
			Columns: tractor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tractor.FieldID,
			},
		},
		Type: "Tractor",
		Fields: map[string]*sqlgraph.FieldSpec{
			tractor.FieldBusinessUnitID:          {Type: field.TypeUUID, Column: tractor.FieldBusinessUnitID},
			tractor.FieldOrganizationID:          {Type: field.TypeUUID, Column: tractor.FieldOrganizationID},
			tractor.FieldCreatedAt:               {Type: field.TypeTime, Column: tractor.FieldCreatedAt},
			tractor.FieldUpdatedAt:               {Type: field.TypeTime, Column: tractor.FieldUpdatedAt},
			tractor.FieldVersion:                 {Type: field.TypeInt, Column: tractor.FieldVersion},
			tractor.FieldCode:                    {Type: field.TypeString, Column: tractor.FieldCode},
			tractor.FieldStatus:                  {Type: field.TypeEnum, Column: tractor.FieldStatus},
			tractor.FieldEquipmentTypeID:         {Type: field.TypeUUID, Column: tractor.FieldEquipmentTypeID},
			tractor.FieldLicensePlateNumber:      {Type: field.TypeString, Column: tractor.FieldLicensePlateNumber},
			tractor.FieldVin:                     {Type: field.TypeString, Column: tractor.FieldVin},
			tractor.FieldEquipmentManufacturerID: {Type: field.TypeUUID, Column: tractor.FieldEquipmentManufacturerID},
			tractor.FieldModel:                   {Type: field.TypeString, Column: tractor.FieldModel},
			tractor.FieldYear:                    {Type: field.TypeInt16, Column: tractor.FieldYear},
			tractor.FieldStateID:                 {Type: field.TypeUUID, Column: tractor.FieldStateID},
			tractor.FieldLeased:                  {Type: field.TypeBool, Column: tractor.FieldLeased},
			tractor.FieldLeasedDate:              {Type: field.TypeOther, Column: tractor.FieldLeasedDate},
			tractor.FieldPrimaryWorkerID:         {Type: field.TypeUUID, Column: tractor.FieldPrimaryWorkerID},
			tractor.FieldSecondaryWorkerID:       {Type: field.TypeUUID, Column: tractor.FieldSecondaryWorkerID},
			tractor.FieldFleetCodeID:             {Type: field.TypeUUID, Column: tractor.FieldFleetCodeID},
		},
	}
	graph.Nodes[41] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trailer.Table,
			Columns: trailer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: trailer.FieldID,
			},
		},
		Type: "Trailer",
		Fields: map[string]*sqlgraph.FieldSpec{
			trailer.FieldBusinessUnitID:             {Type: field.TypeUUID, Column: trailer.FieldBusinessUnitID},
			trailer.FieldOrganizationID:             {Type: field.TypeUUID, Column: trailer.FieldOrganizationID},
			trailer.FieldCreatedAt:                  {Type: field.TypeTime, Column: trailer.FieldCreatedAt},
			trailer.FieldUpdatedAt:                  {Type: field.TypeTime, Column: trailer.FieldUpdatedAt},
			trailer.FieldVersion:                    {Type: field.TypeInt, Column: trailer.FieldVersion},
			trailer.FieldCode:                       {Type: field.TypeString, Column: trailer.FieldCode},
			trailer.FieldStatus:                     {Type: field.TypeEnum, Column: trailer.FieldStatus},
			trailer.FieldEquipmentTypeID:            {Type: field.TypeUUID, Column: trailer.FieldEquipmentTypeID},
			trailer.FieldVin:                        {Type: field.TypeString, Column: trailer.FieldVin},
			trailer.FieldEquipmentManufacturerID:    {Type: field.TypeUUID, Column: trailer.FieldEquipmentManufacturerID},
			trailer.FieldModel:                      {Type: field.TypeString, Column: trailer.FieldModel},
			trailer.FieldYear:                       {Type: field.TypeInt16, Column: trailer.FieldYear},
			trailer.FieldLicensePlateNumber:         {Type: field.TypeString, Column: trailer.FieldLicensePlateNumber},
			trailer.FieldStateID:                    {Type: field.TypeUUID, Column: trailer.FieldStateID},
			trailer.FieldFleetCodeID:                {Type: field.TypeUUID, Column: trailer.FieldFleetCodeID},
			trailer.FieldLastInspectionDate:         {Type: field.TypeOther, Column: trailer.FieldLastInspectionDate},
			trailer.FieldRegistrationNumber:         {Type: field.TypeString, Column: trailer.FieldRegistrationNumber},
			trailer.FieldRegistrationStateID:        {Type: field.TypeUUID, Column: trailer.FieldRegistrationStateID},
			trailer.FieldRegistrationExpirationDate: {Type: field.TypeOther, Column: trailer.FieldRegistrationExpirationDate},
		},
	}
	graph.Nodes[42] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usstate.Table,
			Columns: usstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usstate.FieldID,
			},
		},
		Type: "UsState",
		Fields: map[string]*sqlgraph.FieldSpec{
			usstate.FieldCreatedAt:    {Type: field.TypeTime, Column: usstate.FieldCreatedAt},
			usstate.FieldUpdatedAt:    {Type: field.TypeTime, Column: usstate.FieldUpdatedAt},
			usstate.FieldName:         {Type: field.TypeString, Column: usstate.FieldName},
			usstate.FieldAbbreviation: {Type: field.TypeString, Column: usstate.FieldAbbreviation},
			usstate.FieldCountryName:  {Type: field.TypeString, Column: usstate.FieldCountryName},
			usstate.FieldCountryIso3:  {Type: field.TypeString, Column: usstate.FieldCountryIso3},
		},
	}
	graph.Nodes[43] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldBusinessUnitID: {Type: field.TypeUUID, Column: user.FieldBusinessUnitID},
			user.FieldOrganizationID: {Type: field.TypeUUID, Column: user.FieldOrganizationID},
			user.FieldCreatedAt:      {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:      {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldVersion:        {Type: field.TypeInt, Column: user.FieldVersion},
			user.FieldStatus:         {Type: field.TypeEnum, Column: user.FieldStatus},
			user.FieldName:           {Type: field.TypeString, Column: user.FieldName},
			user.FieldUsername:       {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldPassword:       {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldEmail:          {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldTimezone:       {Type: field.TypeEnum, Column: user.FieldTimezone},
			user.FieldProfilePicURL:  {Type: field.TypeString, Column: user.FieldProfilePicURL},
			user.FieldThumbnailURL:   {Type: field.TypeString, Column: user.FieldThumbnailURL},
			user.FieldPhoneNumber:    {Type: field.TypeString, Column: user.FieldPhoneNumber},
			user.FieldIsAdmin:        {Type: field.TypeBool, Column: user.FieldIsAdmin},
			user.FieldIsSuperAdmin:   {Type: field.TypeBool, Column: user.FieldIsSuperAdmin},
			user.FieldLastLogin:      {Type: field.TypeTime, Column: user.FieldLastLogin},
		},
	}
	graph.Nodes[44] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userfavorite.Table,
			Columns: userfavorite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userfavorite.FieldID,
			},
		},
		Type: "UserFavorite",
		Fields: map[string]*sqlgraph.FieldSpec{
			userfavorite.FieldBusinessUnitID: {Type: field.TypeUUID, Column: userfavorite.FieldBusinessUnitID},
			userfavorite.FieldOrganizationID: {Type: field.TypeUUID, Column: userfavorite.FieldOrganizationID},
			userfavorite.FieldCreatedAt:      {Type: field.TypeTime, Column: userfavorite.FieldCreatedAt},
			userfavorite.FieldUpdatedAt:      {Type: field.TypeTime, Column: userfavorite.FieldUpdatedAt},
			userfavorite.FieldVersion:        {Type: field.TypeInt, Column: userfavorite.FieldVersion},
			userfavorite.FieldPageLink:       {Type: field.TypeString, Column: userfavorite.FieldPageLink},
			userfavorite.FieldUserID:         {Type: field.TypeUUID, Column: userfavorite.FieldUserID},
		},
	}
	graph.Nodes[45] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   worker.Table,
			Columns: worker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: worker.FieldID,
			},
		},
		Type: "Worker",
		Fields: map[string]*sqlgraph.FieldSpec{
			worker.FieldBusinessUnitID:    {Type: field.TypeUUID, Column: worker.FieldBusinessUnitID},
			worker.FieldOrganizationID:    {Type: field.TypeUUID, Column: worker.FieldOrganizationID},
			worker.FieldCreatedAt:         {Type: field.TypeTime, Column: worker.FieldCreatedAt},
			worker.FieldUpdatedAt:         {Type: field.TypeTime, Column: worker.FieldUpdatedAt},
			worker.FieldVersion:           {Type: field.TypeInt, Column: worker.FieldVersion},
			worker.FieldStatus:            {Type: field.TypeEnum, Column: worker.FieldStatus},
			worker.FieldCode:              {Type: field.TypeString, Column: worker.FieldCode},
			worker.FieldProfilePictureURL: {Type: field.TypeString, Column: worker.FieldProfilePictureURL},
			worker.FieldWorkerType:        {Type: field.TypeEnum, Column: worker.FieldWorkerType},
			worker.FieldFirstName:         {Type: field.TypeString, Column: worker.FieldFirstName},
			worker.FieldLastName:          {Type: field.TypeString, Column: worker.FieldLastName},
			worker.FieldAddressLine1:      {Type: field.TypeString, Column: worker.FieldAddressLine1},
			worker.FieldAddressLine2:      {Type: field.TypeString, Column: worker.FieldAddressLine2},
			worker.FieldCity:              {Type: field.TypeString, Column: worker.FieldCity},
			worker.FieldPostalCode:        {Type: field.TypeString, Column: worker.FieldPostalCode},
			worker.FieldStateID:           {Type: field.TypeUUID, Column: worker.FieldStateID},
			worker.FieldFleetCodeID:       {Type: field.TypeUUID, Column: worker.FieldFleetCodeID},
			worker.FieldManagerID:         {Type: field.TypeUUID, Column: worker.FieldManagerID},
		},
	}
	graph.Nodes[46] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   workercomment.Table,
			Columns: workercomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: workercomment.FieldID,
			},
		},
		Type: "WorkerComment",
		Fields: map[string]*sqlgraph.FieldSpec{
			workercomment.FieldBusinessUnitID: {Type: field.TypeUUID, Column: workercomment.FieldBusinessUnitID},
			workercomment.FieldOrganizationID: {Type: field.TypeUUID, Column: workercomment.FieldOrganizationID},
			workercomment.FieldCreatedAt:      {Type: field.TypeTime, Column: workercomment.FieldCreatedAt},
			workercomment.FieldUpdatedAt:      {Type: field.TypeTime, Column: workercomment.FieldUpdatedAt},
			workercomment.FieldVersion:        {Type: field.TypeInt, Column: workercomment.FieldVersion},
			workercomment.FieldWorkerID:       {Type: field.TypeUUID, Column: workercomment.FieldWorkerID},
			workercomment.FieldCommentTypeID:  {Type: field.TypeUUID, Column: workercomment.FieldCommentTypeID},
			workercomment.FieldUserID:         {Type: field.TypeUUID, Column: workercomment.FieldUserID},
			workercomment.FieldComment:        {Type: field.TypeString, Column: workercomment.FieldComment},
		},
	}
	graph.Nodes[47] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   workercontact.Table,
			Columns: workercontact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: workercontact.FieldID,
			},
		},
		Type: "WorkerContact",
		Fields: map[string]*sqlgraph.FieldSpec{
			workercontact.FieldBusinessUnitID: {Type: field.TypeUUID, Column: workercontact.FieldBusinessUnitID},
			workercontact.FieldOrganizationID: {Type: field.TypeUUID, Column: workercontact.FieldOrganizationID},
			workercontact.FieldCreatedAt:      {Type: field.TypeTime, Column: workercontact.FieldCreatedAt},
			workercontact.FieldUpdatedAt:      {Type: field.TypeTime, Column: workercontact.FieldUpdatedAt},
			workercontact.FieldVersion:        {Type: field.TypeInt, Column: workercontact.FieldVersion},
			workercontact.FieldWorkerID:       {Type: field.TypeUUID, Column: workercontact.FieldWorkerID},
			workercontact.FieldName:           {Type: field.TypeString, Column: workercontact.FieldName},
			workercontact.FieldEmail:          {Type: field.TypeString, Column: workercontact.FieldEmail},
			workercontact.FieldPhone:          {Type: field.TypeString, Column: workercontact.FieldPhone},
			workercontact.FieldRelationship:   {Type: field.TypeString, Column: workercontact.FieldRelationship},
			workercontact.FieldIsPrimary:      {Type: field.TypeBool, Column: workercontact.FieldIsPrimary},
		},
	}
	graph.Nodes[48] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   workerprofile.Table,
			Columns: workerprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: workerprofile.FieldID,
			},
		},
		Type: "WorkerProfile",
		Fields: map[string]*sqlgraph.FieldSpec{
			workerprofile.FieldBusinessUnitID:        {Type: field.TypeUUID, Column: workerprofile.FieldBusinessUnitID},
			workerprofile.FieldOrganizationID:        {Type: field.TypeUUID, Column: workerprofile.FieldOrganizationID},
			workerprofile.FieldCreatedAt:             {Type: field.TypeTime, Column: workerprofile.FieldCreatedAt},
			workerprofile.FieldUpdatedAt:             {Type: field.TypeTime, Column: workerprofile.FieldUpdatedAt},
			workerprofile.FieldVersion:               {Type: field.TypeInt, Column: workerprofile.FieldVersion},
			workerprofile.FieldWorkerID:              {Type: field.TypeUUID, Column: workerprofile.FieldWorkerID},
			workerprofile.FieldRace:                  {Type: field.TypeString, Column: workerprofile.FieldRace},
			workerprofile.FieldSex:                   {Type: field.TypeString, Column: workerprofile.FieldSex},
			workerprofile.FieldDateOfBirth:           {Type: field.TypeOther, Column: workerprofile.FieldDateOfBirth},
			workerprofile.FieldLicenseNumber:         {Type: field.TypeString, Column: workerprofile.FieldLicenseNumber},
			workerprofile.FieldLicenseStateID:        {Type: field.TypeUUID, Column: workerprofile.FieldLicenseStateID},
			workerprofile.FieldLicenseExpirationDate: {Type: field.TypeOther, Column: workerprofile.FieldLicenseExpirationDate},
			workerprofile.FieldEndorsements:          {Type: field.TypeEnum, Column: workerprofile.FieldEndorsements},
			workerprofile.FieldHazmatExpirationDate:  {Type: field.TypeOther, Column: workerprofile.FieldHazmatExpirationDate},
			workerprofile.FieldHireDate:              {Type: field.TypeOther, Column: workerprofile.FieldHireDate},
			workerprofile.FieldTerminationDate:       {Type: field.TypeOther, Column: workerprofile.FieldTerminationDate},
			workerprofile.FieldPhysicalDueDate:       {Type: field.TypeOther, Column: workerprofile.FieldPhysicalDueDate},
			workerprofile.FieldMedicalCertDate:       {Type: field.TypeOther, Column: workerprofile.FieldMedicalCertDate},
			workerprofile.FieldMvrDueDate:            {Type: field.TypeOther, Column: workerprofile.FieldMvrDueDate},
		},
	}
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accessorialcharge.BusinessUnitTable,
			Columns: []string{accessorialcharge.BusinessUnitColumn},
			Bidi:    false,
		},
		"AccessorialCharge",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accessorialcharge.OrganizationTable,
			Columns: []string{accessorialcharge.OrganizationColumn},
			Bidi:    false,
		},
		"AccessorialCharge",
		"Organization",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountingcontrol.OrganizationTable,
			Columns: []string{accountingcontrol.OrganizationColumn},
			Bidi:    false,
		},
		"AccountingControl",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.BusinessUnitTable,
			Columns: []string{accountingcontrol.BusinessUnitColumn},
			Bidi:    false,
		},
		"AccountingControl",
		"BusinessUnit",
	)
	graph.MustAddE(
		"default_rev_account",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultRevAccountTable,
			Columns: []string{accountingcontrol.DefaultRevAccountColumn},
			Bidi:    false,
		},
		"AccountingControl",
		"GeneralLedgerAccount",
	)
	graph.MustAddE(
		"default_exp_account",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultExpAccountTable,
			Columns: []string{accountingcontrol.DefaultExpAccountColumn},
			Bidi:    false,
		},
		"AccountingControl",
		"GeneralLedgerAccount",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingcontrol.OrganizationTable,
			Columns: []string{billingcontrol.OrganizationColumn},
			Bidi:    false,
		},
		"BillingControl",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingcontrol.BusinessUnitTable,
			Columns: []string{billingcontrol.BusinessUnitColumn},
			Bidi:    false,
		},
		"BillingControl",
		"BusinessUnit",
	)
	graph.MustAddE(
		"prev",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessunit.PrevTable,
			Columns: []string{businessunit.PrevColumn},
			Bidi:    false,
		},
		"BusinessUnit",
		"BusinessUnit",
	)
	graph.MustAddE(
		"next",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   businessunit.NextTable,
			Columns: []string{businessunit.NextColumn},
			Bidi:    false,
		},
		"BusinessUnit",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessunit.OrganizationsTable,
			Columns: []string{businessunit.OrganizationsColumn},
			Bidi:    false,
		},
		"BusinessUnit",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chargetype.BusinessUnitTable,
			Columns: []string{chargetype.BusinessUnitColumn},
			Bidi:    false,
		},
		"ChargeType",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chargetype.OrganizationTable,
			Columns: []string{chargetype.OrganizationColumn},
			Bidi:    false,
		},
		"ChargeType",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commenttype.BusinessUnitTable,
			Columns: []string{commenttype.BusinessUnitColumn},
			Bidi:    false,
		},
		"CommentType",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commenttype.OrganizationTable,
			Columns: []string{commenttype.OrganizationColumn},
			Bidi:    false,
		},
		"CommentType",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commodity.BusinessUnitTable,
			Columns: []string{commodity.BusinessUnitColumn},
			Bidi:    false,
		},
		"Commodity",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commodity.OrganizationTable,
			Columns: []string{commodity.OrganizationColumn},
			Bidi:    false,
		},
		"Commodity",
		"Organization",
	)
	graph.MustAddE(
		"hazardous_material",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commodity.HazardousMaterialTable,
			Columns: []string{commodity.HazardousMaterialColumn},
			Bidi:    false,
		},
		"Commodity",
		"HazardousMaterial",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.BusinessUnitTable,
			Columns: []string{customer.BusinessUnitColumn},
			Bidi:    false,
		},
		"Customer",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.OrganizationTable,
			Columns: []string{customer.OrganizationColumn},
			Bidi:    false,
		},
		"Customer",
		"Organization",
	)
	graph.MustAddE(
		"state",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.StateTable,
			Columns: []string{customer.StateColumn},
			Bidi:    false,
		},
		"Customer",
		"UsState",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delaycode.BusinessUnitTable,
			Columns: []string{delaycode.BusinessUnitColumn},
			Bidi:    false,
		},
		"DelayCode",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delaycode.OrganizationTable,
			Columns: []string{delaycode.OrganizationColumn},
			Bidi:    false,
		},
		"DelayCode",
		"Organization",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dispatchcontrol.OrganizationTable,
			Columns: []string{dispatchcontrol.OrganizationColumn},
			Bidi:    false,
		},
		"DispatchControl",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dispatchcontrol.BusinessUnitTable,
			Columns: []string{dispatchcontrol.BusinessUnitColumn},
			Bidi:    false,
		},
		"DispatchControl",
		"BusinessUnit",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.BusinessUnitTable,
			Columns: []string{divisioncode.BusinessUnitColumn},
			Bidi:    false,
		},
		"DivisionCode",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.OrganizationTable,
			Columns: []string{divisioncode.OrganizationColumn},
			Bidi:    false,
		},
		"DivisionCode",
		"Organization",
	)
	graph.MustAddE(
		"cash_account",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.CashAccountTable,
			Columns: []string{divisioncode.CashAccountColumn},
			Bidi:    false,
		},
		"DivisionCode",
		"GeneralLedgerAccount",
	)
	graph.MustAddE(
		"ap_account",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ApAccountTable,
			Columns: []string{divisioncode.ApAccountColumn},
			Bidi:    false,
		},
		"DivisionCode",
		"GeneralLedgerAccount",
	)
	graph.MustAddE(
		"expense_account",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   divisioncode.ExpenseAccountTable,
			Columns: []string{divisioncode.ExpenseAccountColumn},
			Bidi:    false,
		},
		"DivisionCode",
		"GeneralLedgerAccount",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentclassification.BusinessUnitTable,
			Columns: []string{documentclassification.BusinessUnitColumn},
			Bidi:    false,
		},
		"DocumentClassification",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentclassification.OrganizationTable,
			Columns: []string{documentclassification.OrganizationColumn},
			Bidi:    false,
		},
		"DocumentClassification",
		"Organization",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailcontrol.OrganizationTable,
			Columns: []string{emailcontrol.OrganizationColumn},
			Bidi:    false,
		},
		"EmailControl",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BusinessUnitTable,
			Columns: []string{emailcontrol.BusinessUnitColumn},
			Bidi:    false,
		},
		"EmailControl",
		"BusinessUnit",
	)
	graph.MustAddE(
		"billing_email_profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.BillingEmailProfileTable,
			Columns: []string{emailcontrol.BillingEmailProfileColumn},
			Bidi:    false,
		},
		"EmailControl",
		"EmailProfile",
	)
	graph.MustAddE(
		"rate_email_profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailcontrol.RateEmailProfileTable,
			Columns: []string{emailcontrol.RateEmailProfileColumn},
			Bidi:    false,
		},
		"EmailControl",
		"EmailProfile",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailprofile.BusinessUnitTable,
			Columns: []string{emailprofile.BusinessUnitColumn},
			Bidi:    false,
		},
		"EmailProfile",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailprofile.OrganizationTable,
			Columns: []string{emailprofile.OrganizationColumn},
			Bidi:    false,
		},
		"EmailProfile",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentmanufactuer.BusinessUnitTable,
			Columns: []string{equipmentmanufactuer.BusinessUnitColumn},
			Bidi:    false,
		},
		"EquipmentManufactuer",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentmanufactuer.OrganizationTable,
			Columns: []string{equipmentmanufactuer.OrganizationColumn},
			Bidi:    false,
		},
		"EquipmentManufactuer",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmenttype.BusinessUnitTable,
			Columns: []string{equipmenttype.BusinessUnitColumn},
			Bidi:    false,
		},
		"EquipmentType",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmenttype.OrganizationTable,
			Columns: []string{equipmenttype.OrganizationColumn},
			Bidi:    false,
		},
		"EquipmentType",
		"Organization",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   feasibilitytoolcontrol.OrganizationTable,
			Columns: []string{feasibilitytoolcontrol.OrganizationColumn},
			Bidi:    false,
		},
		"FeasibilityToolControl",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feasibilitytoolcontrol.BusinessUnitTable,
			Columns: []string{feasibilitytoolcontrol.BusinessUnitColumn},
			Bidi:    false,
		},
		"FeasibilityToolControl",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization_feature_flag",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   featureflag.OrganizationFeatureFlagTable,
			Columns: []string{featureflag.OrganizationFeatureFlagColumn},
			Bidi:    false,
		},
		"FeatureFlag",
		"OrganizationFeatureFlag",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fleetcode.BusinessUnitTable,
			Columns: []string{fleetcode.BusinessUnitColumn},
			Bidi:    false,
		},
		"FleetCode",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fleetcode.OrganizationTable,
			Columns: []string{fleetcode.OrganizationColumn},
			Bidi:    false,
		},
		"FleetCode",
		"Organization",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fleetcode.ManagerTable,
			Columns: []string{fleetcode.ManagerColumn},
			Bidi:    false,
		},
		"FleetCode",
		"User",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   generalledgeraccount.BusinessUnitTable,
			Columns: []string{generalledgeraccount.BusinessUnitColumn},
			Bidi:    false,
		},
		"GeneralLedgerAccount",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   generalledgeraccount.OrganizationTable,
			Columns: []string{generalledgeraccount.OrganizationColumn},
			Bidi:    false,
		},
		"GeneralLedgerAccount",
		"Organization",
	)
	graph.MustAddE(
		"tags",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   generalledgeraccount.TagsTable,
			Columns: generalledgeraccount.TagsPrimaryKey,
			Bidi:    false,
		},
		"GeneralLedgerAccount",
		"Tag",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleapi.OrganizationTable,
			Columns: []string{googleapi.OrganizationColumn},
			Bidi:    false,
		},
		"GoogleApi",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   googleapi.BusinessUnitTable,
			Columns: []string{googleapi.BusinessUnitColumn},
			Bidi:    false,
		},
		"GoogleApi",
		"BusinessUnit",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hazardousmaterial.BusinessUnitTable,
			Columns: []string{hazardousmaterial.BusinessUnitColumn},
			Bidi:    false,
		},
		"HazardousMaterial",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hazardousmaterial.OrganizationTable,
			Columns: []string{hazardousmaterial.OrganizationColumn},
			Bidi:    false,
		},
		"HazardousMaterial",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hazardousmaterialsegregation.BusinessUnitTable,
			Columns: []string{hazardousmaterialsegregation.BusinessUnitColumn},
			Bidi:    false,
		},
		"HazardousMaterialSegregation",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hazardousmaterialsegregation.OrganizationTable,
			Columns: []string{hazardousmaterialsegregation.OrganizationColumn},
			Bidi:    false,
		},
		"HazardousMaterialSegregation",
		"Organization",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   invoicecontrol.OrganizationTable,
			Columns: []string{invoicecontrol.OrganizationColumn},
			Bidi:    false,
		},
		"InvoiceControl",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicecontrol.BusinessUnitTable,
			Columns: []string{invoicecontrol.BusinessUnitColumn},
			Bidi:    false,
		},
		"InvoiceControl",
		"BusinessUnit",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.BusinessUnitTable,
			Columns: []string{location.BusinessUnitColumn},
			Bidi:    false,
		},
		"Location",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.OrganizationTable,
			Columns: []string{location.OrganizationColumn},
			Bidi:    false,
		},
		"Location",
		"Organization",
	)
	graph.MustAddE(
		"location_category",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.LocationCategoryTable,
			Columns: []string{location.LocationCategoryColumn},
			Bidi:    false,
		},
		"Location",
		"LocationCategory",
	)
	graph.MustAddE(
		"state",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.StateTable,
			Columns: []string{location.StateColumn},
			Bidi:    false,
		},
		"Location",
		"UsState",
	)
	graph.MustAddE(
		"comments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.CommentsTable,
			Columns: []string{location.CommentsColumn},
			Bidi:    false,
		},
		"Location",
		"LocationComment",
	)
	graph.MustAddE(
		"contacts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.ContactsTable,
			Columns: []string{location.ContactsColumn},
			Bidi:    false,
		},
		"Location",
		"LocationContact",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcategory.BusinessUnitTable,
			Columns: []string{locationcategory.BusinessUnitColumn},
			Bidi:    false,
		},
		"LocationCategory",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcategory.OrganizationTable,
			Columns: []string{locationcategory.OrganizationColumn},
			Bidi:    false,
		},
		"LocationCategory",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcomment.BusinessUnitTable,
			Columns: []string{locationcomment.BusinessUnitColumn},
			Bidi:    false,
		},
		"LocationComment",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcomment.OrganizationTable,
			Columns: []string{locationcomment.OrganizationColumn},
			Bidi:    false,
		},
		"LocationComment",
		"Organization",
	)
	graph.MustAddE(
		"location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   locationcomment.LocationTable,
			Columns: []string{locationcomment.LocationColumn},
			Bidi:    false,
		},
		"LocationComment",
		"Location",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcomment.UserTable,
			Columns: []string{locationcomment.UserColumn},
			Bidi:    false,
		},
		"LocationComment",
		"User",
	)
	graph.MustAddE(
		"comment_type",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcomment.CommentTypeTable,
			Columns: []string{locationcomment.CommentTypeColumn},
			Bidi:    false,
		},
		"LocationComment",
		"CommentType",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcontact.BusinessUnitTable,
			Columns: []string{locationcontact.BusinessUnitColumn},
			Bidi:    false,
		},
		"LocationContact",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcontact.OrganizationTable,
			Columns: []string{locationcontact.OrganizationColumn},
			Bidi:    false,
		},
		"LocationContact",
		"Organization",
	)
	graph.MustAddE(
		"location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   locationcontact.LocationTable,
			Columns: []string{locationcontact.LocationColumn},
			Bidi:    false,
		},
		"LocationContact",
		"Location",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.BusinessUnitTable,
			Columns: []string{organization.BusinessUnitColumn},
			Bidi:    false,
		},
		"Organization",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization_feature_flag",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.OrganizationFeatureFlagTable,
			Columns: []string{organization.OrganizationFeatureFlagColumn},
			Bidi:    false,
		},
		"Organization",
		"OrganizationFeatureFlag",
	)
	graph.MustAddE(
		"accounting_control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.AccountingControlTable,
			Columns: []string{organization.AccountingControlColumn},
			Bidi:    false,
		},
		"Organization",
		"AccountingControl",
	)
	graph.MustAddE(
		"billing_control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.BillingControlTable,
			Columns: []string{organization.BillingControlColumn},
			Bidi:    false,
		},
		"Organization",
		"BillingControl",
	)
	graph.MustAddE(
		"dispatch_control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.DispatchControlTable,
			Columns: []string{organization.DispatchControlColumn},
			Bidi:    false,
		},
		"Organization",
		"DispatchControl",
	)
	graph.MustAddE(
		"feasibility_tool_control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.FeasibilityToolControlTable,
			Columns: []string{organization.FeasibilityToolControlColumn},
			Bidi:    false,
		},
		"Organization",
		"FeasibilityToolControl",
	)
	graph.MustAddE(
		"invoice_control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.InvoiceControlTable,
			Columns: []string{organization.InvoiceControlColumn},
			Bidi:    false,
		},
		"Organization",
		"InvoiceControl",
	)
	graph.MustAddE(
		"route_control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.RouteControlTable,
			Columns: []string{organization.RouteControlColumn},
			Bidi:    false,
		},
		"Organization",
		"RouteControl",
	)
	graph.MustAddE(
		"shipment_control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.ShipmentControlTable,
			Columns: []string{organization.ShipmentControlColumn},
			Bidi:    false,
		},
		"Organization",
		"ShipmentControl",
	)
	graph.MustAddE(
		"email_control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.EmailControlTable,
			Columns: []string{organization.EmailControlColumn},
			Bidi:    false,
		},
		"Organization",
		"EmailControl",
	)
	graph.MustAddE(
		"google_api",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.GoogleAPITable,
			Columns: []string{organization.GoogleAPIColumn},
			Bidi:    false,
		},
		"Organization",
		"GoogleApi",
	)
	graph.MustAddE(
		"feature_flag",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationfeatureflag.FeatureFlagTable,
			Columns: []string{organizationfeatureflag.FeatureFlagColumn},
			Bidi:    false,
		},
		"OrganizationFeatureFlag",
		"FeatureFlag",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationfeatureflag.OrganizationTable,
			Columns: []string{organizationfeatureflag.OrganizationColumn},
			Bidi:    false,
		},
		"OrganizationFeatureFlag",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   qualifiercode.BusinessUnitTable,
			Columns: []string{qualifiercode.BusinessUnitColumn},
			Bidi:    false,
		},
		"QualifierCode",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   qualifiercode.OrganizationTable,
			Columns: []string{qualifiercode.OrganizationColumn},
			Bidi:    false,
		},
		"QualifierCode",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reasoncode.BusinessUnitTable,
			Columns: []string{reasoncode.BusinessUnitColumn},
			Bidi:    false,
		},
		"ReasonCode",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reasoncode.OrganizationTable,
			Columns: []string{reasoncode.OrganizationColumn},
			Bidi:    false,
		},
		"ReasonCode",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.BusinessUnitTable,
			Columns: []string{revenuecode.BusinessUnitColumn},
			Bidi:    false,
		},
		"RevenueCode",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.OrganizationTable,
			Columns: []string{revenuecode.OrganizationColumn},
			Bidi:    false,
		},
		"RevenueCode",
		"Organization",
	)
	graph.MustAddE(
		"expense_account",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.ExpenseAccountTable,
			Columns: []string{revenuecode.ExpenseAccountColumn},
			Bidi:    false,
		},
		"RevenueCode",
		"GeneralLedgerAccount",
	)
	graph.MustAddE(
		"revenue_account",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revenuecode.RevenueAccountTable,
			Columns: []string{revenuecode.RevenueAccountColumn},
			Bidi:    false,
		},
		"RevenueCode",
		"GeneralLedgerAccount",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   routecontrol.OrganizationTable,
			Columns: []string{routecontrol.OrganizationColumn},
			Bidi:    false,
		},
		"RouteControl",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   routecontrol.BusinessUnitTable,
			Columns: []string{routecontrol.BusinessUnitColumn},
			Bidi:    false,
		},
		"RouteControl",
		"BusinessUnit",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetype.BusinessUnitTable,
			Columns: []string{servicetype.BusinessUnitColumn},
			Bidi:    false,
		},
		"ServiceType",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetype.OrganizationTable,
			Columns: []string{servicetype.OrganizationColumn},
			Bidi:    false,
		},
		"ServiceType",
		"Organization",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentcontrol.OrganizationTable,
			Columns: []string{shipmentcontrol.OrganizationColumn},
			Bidi:    false,
		},
		"ShipmentControl",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentcontrol.BusinessUnitTable,
			Columns: []string{shipmentcontrol.BusinessUnitColumn},
			Bidi:    false,
		},
		"ShipmentControl",
		"BusinessUnit",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenttype.BusinessUnitTable,
			Columns: []string{shipmenttype.BusinessUnitColumn},
			Bidi:    false,
		},
		"ShipmentType",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenttype.OrganizationTable,
			Columns: []string{shipmenttype.OrganizationColumn},
			Bidi:    false,
		},
		"ShipmentType",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tablechangealert.BusinessUnitTable,
			Columns: []string{tablechangealert.BusinessUnitColumn},
			Bidi:    false,
		},
		"TableChangeAlert",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tablechangealert.OrganizationTable,
			Columns: []string{tablechangealert.OrganizationColumn},
			Bidi:    false,
		},
		"TableChangeAlert",
		"Organization",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tag.BusinessUnitTable,
			Columns: []string{tag.BusinessUnitColumn},
			Bidi:    false,
		},
		"Tag",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tag.OrganizationTable,
			Columns: []string{tag.OrganizationColumn},
			Bidi:    false,
		},
		"Tag",
		"Organization",
	)
	graph.MustAddE(
		"general_ledger_account",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.GeneralLedgerAccountTable,
			Columns: tag.GeneralLedgerAccountPrimaryKey,
			Bidi:    false,
		},
		"Tag",
		"GeneralLedgerAccount",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.BusinessUnitTable,
			Columns: []string{tractor.BusinessUnitColumn},
			Bidi:    false,
		},
		"Tractor",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.OrganizationTable,
			Columns: []string{tractor.OrganizationColumn},
			Bidi:    false,
		},
		"Tractor",
		"Organization",
	)
	graph.MustAddE(
		"equipment_type",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentTypeTable,
			Columns: []string{tractor.EquipmentTypeColumn},
			Bidi:    false,
		},
		"Tractor",
		"EquipmentType",
	)
	graph.MustAddE(
		"equipment_manufacturer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentManufacturerTable,
			Columns: []string{tractor.EquipmentManufacturerColumn},
			Bidi:    false,
		},
		"Tractor",
		"EquipmentManufactuer",
	)
	graph.MustAddE(
		"state",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.StateTable,
			Columns: []string{tractor.StateColumn},
			Bidi:    false,
		},
		"Tractor",
		"UsState",
	)
	graph.MustAddE(
		"primary_worker",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.PrimaryWorkerTable,
			Columns: []string{tractor.PrimaryWorkerColumn},
			Bidi:    false,
		},
		"Tractor",
		"Worker",
	)
	graph.MustAddE(
		"secondary_worker",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.SecondaryWorkerTable,
			Columns: []string{tractor.SecondaryWorkerColumn},
			Bidi:    false,
		},
		"Tractor",
		"Worker",
	)
	graph.MustAddE(
		"fleet_code",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.FleetCodeTable,
			Columns: []string{tractor.FleetCodeColumn},
			Bidi:    false,
		},
		"Tractor",
		"FleetCode",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.BusinessUnitTable,
			Columns: []string{trailer.BusinessUnitColumn},
			Bidi:    false,
		},
		"Trailer",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.OrganizationTable,
			Columns: []string{trailer.OrganizationColumn},
			Bidi:    false,
		},
		"Trailer",
		"Organization",
	)
	graph.MustAddE(
		"equipment_type",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentTypeTable,
			Columns: []string{trailer.EquipmentTypeColumn},
			Bidi:    false,
		},
		"Trailer",
		"EquipmentType",
	)
	graph.MustAddE(
		"equipment_manufacturer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.EquipmentManufacturerTable,
			Columns: []string{trailer.EquipmentManufacturerColumn},
			Bidi:    false,
		},
		"Trailer",
		"EquipmentManufactuer",
	)
	graph.MustAddE(
		"state",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.StateTable,
			Columns: []string{trailer.StateColumn},
			Bidi:    false,
		},
		"Trailer",
		"UsState",
	)
	graph.MustAddE(
		"registration_state",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.RegistrationStateTable,
			Columns: []string{trailer.RegistrationStateColumn},
			Bidi:    false,
		},
		"Trailer",
		"UsState",
	)
	graph.MustAddE(
		"fleet_code",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trailer.FleetCodeTable,
			Columns: []string{trailer.FleetCodeColumn},
			Bidi:    false,
		},
		"Trailer",
		"FleetCode",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.BusinessUnitTable,
			Columns: []string{user.BusinessUnitColumn},
			Bidi:    false,
		},
		"User",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
		},
		"User",
		"Organization",
	)
	graph.MustAddE(
		"user_favorites",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserFavoritesTable,
			Columns: []string{user.UserFavoritesColumn},
			Bidi:    false,
		},
		"User",
		"UserFavorite",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfavorite.BusinessUnitTable,
			Columns: []string{userfavorite.BusinessUnitColumn},
			Bidi:    false,
		},
		"UserFavorite",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfavorite.OrganizationTable,
			Columns: []string{userfavorite.OrganizationColumn},
			Bidi:    false,
		},
		"UserFavorite",
		"Organization",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfavorite.UserTable,
			Columns: []string{userfavorite.UserColumn},
			Bidi:    false,
		},
		"UserFavorite",
		"User",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.BusinessUnitTable,
			Columns: []string{worker.BusinessUnitColumn},
			Bidi:    false,
		},
		"Worker",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.OrganizationTable,
			Columns: []string{worker.OrganizationColumn},
			Bidi:    false,
		},
		"Worker",
		"Organization",
	)
	graph.MustAddE(
		"state",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.StateTable,
			Columns: []string{worker.StateColumn},
			Bidi:    false,
		},
		"Worker",
		"UsState",
	)
	graph.MustAddE(
		"fleet_code",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.FleetCodeTable,
			Columns: []string{worker.FleetCodeColumn},
			Bidi:    false,
		},
		"Worker",
		"FleetCode",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   worker.ManagerTable,
			Columns: []string{worker.ManagerColumn},
			Bidi:    false,
		},
		"Worker",
		"User",
	)
	graph.MustAddE(
		"primary_tractor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.PrimaryTractorTable,
			Columns: []string{worker.PrimaryTractorColumn},
			Bidi:    false,
		},
		"Worker",
		"Tractor",
	)
	graph.MustAddE(
		"secondary_tractor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.SecondaryTractorTable,
			Columns: []string{worker.SecondaryTractorColumn},
			Bidi:    false,
		},
		"Worker",
		"Tractor",
	)
	graph.MustAddE(
		"worker_profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   worker.WorkerProfileTable,
			Columns: []string{worker.WorkerProfileColumn},
			Bidi:    false,
		},
		"Worker",
		"WorkerProfile",
	)
	graph.MustAddE(
		"worker_comments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerCommentsTable,
			Columns: []string{worker.WorkerCommentsColumn},
			Bidi:    false,
		},
		"Worker",
		"WorkerComment",
	)
	graph.MustAddE(
		"worker_contacts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worker.WorkerContactsTable,
			Columns: []string{worker.WorkerContactsColumn},
			Bidi:    false,
		},
		"Worker",
		"WorkerContact",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workercomment.BusinessUnitTable,
			Columns: []string{workercomment.BusinessUnitColumn},
			Bidi:    false,
		},
		"WorkerComment",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workercomment.OrganizationTable,
			Columns: []string{workercomment.OrganizationColumn},
			Bidi:    false,
		},
		"WorkerComment",
		"Organization",
	)
	graph.MustAddE(
		"worker",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workercomment.WorkerTable,
			Columns: []string{workercomment.WorkerColumn},
			Bidi:    false,
		},
		"WorkerComment",
		"Worker",
	)
	graph.MustAddE(
		"comment_type",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workercomment.CommentTypeTable,
			Columns: []string{workercomment.CommentTypeColumn},
			Bidi:    false,
		},
		"WorkerComment",
		"CommentType",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workercomment.UserTable,
			Columns: []string{workercomment.UserColumn},
			Bidi:    false,
		},
		"WorkerComment",
		"User",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workercontact.BusinessUnitTable,
			Columns: []string{workercontact.BusinessUnitColumn},
			Bidi:    false,
		},
		"WorkerContact",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workercontact.OrganizationTable,
			Columns: []string{workercontact.OrganizationColumn},
			Bidi:    false,
		},
		"WorkerContact",
		"Organization",
	)
	graph.MustAddE(
		"worker",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workercontact.WorkerTable,
			Columns: []string{workercontact.WorkerColumn},
			Bidi:    false,
		},
		"WorkerContact",
		"Worker",
	)
	graph.MustAddE(
		"business_unit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workerprofile.BusinessUnitTable,
			Columns: []string{workerprofile.BusinessUnitColumn},
			Bidi:    false,
		},
		"WorkerProfile",
		"BusinessUnit",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workerprofile.OrganizationTable,
			Columns: []string{workerprofile.OrganizationColumn},
			Bidi:    false,
		},
		"WorkerProfile",
		"Organization",
	)
	graph.MustAddE(
		"worker",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workerprofile.WorkerTable,
			Columns: []string{workerprofile.WorkerColumn},
			Bidi:    false,
		},
		"WorkerProfile",
		"Worker",
	)
	graph.MustAddE(
		"state",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workerprofile.StateTable,
			Columns: []string{workerprofile.StateColumn},
			Bidi:    false,
		},
		"WorkerProfile",
		"UsState",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (acq *AccessorialChargeQuery) addPredicate(pred func(s *sql.Selector)) {
	acq.predicates = append(acq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AccessorialChargeQuery builder.
func (acq *AccessorialChargeQuery) Filter() *AccessorialChargeFilter {
	return &AccessorialChargeFilter{config: acq.config, predicateAdder: acq}
}

// addPredicate implements the predicateAdder interface.
func (m *AccessorialChargeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AccessorialChargeMutation builder.
func (m *AccessorialChargeMutation) Filter() *AccessorialChargeFilter {
	return &AccessorialChargeFilter{config: m.config, predicateAdder: m}
}

// AccessorialChargeFilter provides a generic filtering capability at runtime for AccessorialChargeQuery.
type AccessorialChargeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AccessorialChargeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AccessorialChargeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(accessorialcharge.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *AccessorialChargeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(accessorialcharge.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *AccessorialChargeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(accessorialcharge.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AccessorialChargeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(accessorialcharge.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AccessorialChargeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(accessorialcharge.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *AccessorialChargeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(accessorialcharge.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *AccessorialChargeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(accessorialcharge.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *AccessorialChargeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(accessorialcharge.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AccessorialChargeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(accessorialcharge.FieldDescription))
}

// WhereIsDetention applies the entql bool predicate on the is_detention field.
func (f *AccessorialChargeFilter) WhereIsDetention(p entql.BoolP) {
	f.Where(p.Field(accessorialcharge.FieldIsDetention))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *AccessorialChargeFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(accessorialcharge.FieldMethod))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *AccessorialChargeFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(accessorialcharge.FieldAmount))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *AccessorialChargeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *AccessorialChargeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *AccessorialChargeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *AccessorialChargeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (acq *AccountingControlQuery) addPredicate(pred func(s *sql.Selector)) {
	acq.predicates = append(acq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AccountingControlQuery builder.
func (acq *AccountingControlQuery) Filter() *AccountingControlFilter {
	return &AccountingControlFilter{config: acq.config, predicateAdder: acq}
}

// addPredicate implements the predicateAdder interface.
func (m *AccountingControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AccountingControlMutation builder.
func (m *AccountingControlMutation) Filter() *AccountingControlFilter {
	return &AccountingControlFilter{config: m.config, predicateAdder: m}
}

// AccountingControlFilter provides a generic filtering capability at runtime for AccountingControlQuery.
type AccountingControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AccountingControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AccountingControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(accountingcontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AccountingControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(accountingcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AccountingControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(accountingcontrol.FieldUpdatedAt))
}

// WhereRecThreshold applies the entql int8 predicate on the rec_threshold field.
func (f *AccountingControlFilter) WhereRecThreshold(p entql.Int8P) {
	f.Where(p.Field(accountingcontrol.FieldRecThreshold))
}

// WhereRecThresholdAction applies the entql string predicate on the rec_threshold_action field.
func (f *AccountingControlFilter) WhereRecThresholdAction(p entql.StringP) {
	f.Where(p.Field(accountingcontrol.FieldRecThresholdAction))
}

// WhereAutoCreateJournalEntries applies the entql bool predicate on the auto_create_journal_entries field.
func (f *AccountingControlFilter) WhereAutoCreateJournalEntries(p entql.BoolP) {
	f.Where(p.Field(accountingcontrol.FieldAutoCreateJournalEntries))
}

// WhereJournalEntryCriteria applies the entql string predicate on the journal_entry_criteria field.
func (f *AccountingControlFilter) WhereJournalEntryCriteria(p entql.StringP) {
	f.Where(p.Field(accountingcontrol.FieldJournalEntryCriteria))
}

// WhereRestrictManualJournalEntries applies the entql bool predicate on the restrict_manual_journal_entries field.
func (f *AccountingControlFilter) WhereRestrictManualJournalEntries(p entql.BoolP) {
	f.Where(p.Field(accountingcontrol.FieldRestrictManualJournalEntries))
}

// WhereRequireJournalEntryApproval applies the entql bool predicate on the require_journal_entry_approval field.
func (f *AccountingControlFilter) WhereRequireJournalEntryApproval(p entql.BoolP) {
	f.Where(p.Field(accountingcontrol.FieldRequireJournalEntryApproval))
}

// WhereEnableRecNotifications applies the entql bool predicate on the enable_rec_notifications field.
func (f *AccountingControlFilter) WhereEnableRecNotifications(p entql.BoolP) {
	f.Where(p.Field(accountingcontrol.FieldEnableRecNotifications))
}

// WhereHaltOnPendingRec applies the entql bool predicate on the halt_on_pending_rec field.
func (f *AccountingControlFilter) WhereHaltOnPendingRec(p entql.BoolP) {
	f.Where(p.Field(accountingcontrol.FieldHaltOnPendingRec))
}

// WhereCriticalProcesses applies the entql string predicate on the critical_processes field.
func (f *AccountingControlFilter) WhereCriticalProcesses(p entql.StringP) {
	f.Where(p.Field(accountingcontrol.FieldCriticalProcesses))
}

// WhereDefaultRevAccountID applies the entql [16]byte predicate on the default_rev_account_id field.
func (f *AccountingControlFilter) WhereDefaultRevAccountID(p entql.ValueP) {
	f.Where(p.Field(accountingcontrol.FieldDefaultRevAccountID))
}

// WhereDefaultExpAccountID applies the entql [16]byte predicate on the default_exp_account_id field.
func (f *AccountingControlFilter) WhereDefaultExpAccountID(p entql.ValueP) {
	f.Where(p.Field(accountingcontrol.FieldDefaultExpAccountID))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *AccountingControlFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *AccountingControlFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *AccountingControlFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *AccountingControlFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDefaultRevAccount applies a predicate to check if query has an edge default_rev_account.
func (f *AccountingControlFilter) WhereHasDefaultRevAccount() {
	f.Where(entql.HasEdge("default_rev_account"))
}

// WhereHasDefaultRevAccountWith applies a predicate to check if query has an edge default_rev_account with a given conditions (other predicates).
func (f *AccountingControlFilter) WhereHasDefaultRevAccountWith(preds ...predicate.GeneralLedgerAccount) {
	f.Where(entql.HasEdgeWith("default_rev_account", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDefaultExpAccount applies a predicate to check if query has an edge default_exp_account.
func (f *AccountingControlFilter) WhereHasDefaultExpAccount() {
	f.Where(entql.HasEdge("default_exp_account"))
}

// WhereHasDefaultExpAccountWith applies a predicate to check if query has an edge default_exp_account with a given conditions (other predicates).
func (f *AccountingControlFilter) WhereHasDefaultExpAccountWith(preds ...predicate.GeneralLedgerAccount) {
	f.Where(entql.HasEdgeWith("default_exp_account", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bcq *BillingControlQuery) addPredicate(pred func(s *sql.Selector)) {
	bcq.predicates = append(bcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BillingControlQuery builder.
func (bcq *BillingControlQuery) Filter() *BillingControlFilter {
	return &BillingControlFilter{config: bcq.config, predicateAdder: bcq}
}

// addPredicate implements the predicateAdder interface.
func (m *BillingControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BillingControlMutation builder.
func (m *BillingControlMutation) Filter() *BillingControlFilter {
	return &BillingControlFilter{config: m.config, predicateAdder: m}
}

// BillingControlFilter provides a generic filtering capability at runtime for BillingControlQuery.
type BillingControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BillingControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *BillingControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(billingcontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BillingControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(billingcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BillingControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(billingcontrol.FieldUpdatedAt))
}

// WhereRemoveBillingHistory applies the entql bool predicate on the remove_billing_history field.
func (f *BillingControlFilter) WhereRemoveBillingHistory(p entql.BoolP) {
	f.Where(p.Field(billingcontrol.FieldRemoveBillingHistory))
}

// WhereAutoBillShipment applies the entql bool predicate on the auto_bill_shipment field.
func (f *BillingControlFilter) WhereAutoBillShipment(p entql.BoolP) {
	f.Where(p.Field(billingcontrol.FieldAutoBillShipment))
}

// WhereAutoMarkReadyToBill applies the entql bool predicate on the auto_mark_ready_to_bill field.
func (f *BillingControlFilter) WhereAutoMarkReadyToBill(p entql.BoolP) {
	f.Where(p.Field(billingcontrol.FieldAutoMarkReadyToBill))
}

// WhereValidateCustomerRates applies the entql bool predicate on the validate_customer_rates field.
func (f *BillingControlFilter) WhereValidateCustomerRates(p entql.BoolP) {
	f.Where(p.Field(billingcontrol.FieldValidateCustomerRates))
}

// WhereAutoBillCriteria applies the entql string predicate on the auto_bill_criteria field.
func (f *BillingControlFilter) WhereAutoBillCriteria(p entql.StringP) {
	f.Where(p.Field(billingcontrol.FieldAutoBillCriteria))
}

// WhereShipmentTransferCriteria applies the entql string predicate on the shipment_transfer_criteria field.
func (f *BillingControlFilter) WhereShipmentTransferCriteria(p entql.StringP) {
	f.Where(p.Field(billingcontrol.FieldShipmentTransferCriteria))
}

// WhereEnforceCustomerBilling applies the entql bool predicate on the enforce_customer_billing field.
func (f *BillingControlFilter) WhereEnforceCustomerBilling(p entql.BoolP) {
	f.Where(p.Field(billingcontrol.FieldEnforceCustomerBilling))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *BillingControlFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *BillingControlFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *BillingControlFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *BillingControlFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (buq *BusinessUnitQuery) addPredicate(pred func(s *sql.Selector)) {
	buq.predicates = append(buq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BusinessUnitQuery builder.
func (buq *BusinessUnitQuery) Filter() *BusinessUnitFilter {
	return &BusinessUnitFilter{config: buq.config, predicateAdder: buq}
}

// addPredicate implements the predicateAdder interface.
func (m *BusinessUnitMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BusinessUnitMutation builder.
func (m *BusinessUnitMutation) Filter() *BusinessUnitFilter {
	return &BusinessUnitFilter{config: m.config, predicateAdder: m}
}

// BusinessUnitFilter provides a generic filtering capability at runtime for BusinessUnitQuery.
type BusinessUnitFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BusinessUnitFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *BusinessUnitFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(businessunit.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BusinessUnitFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(businessunit.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BusinessUnitFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(businessunit.FieldUpdatedAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *BusinessUnitFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldStatus))
}

// WhereName applies the entql string predicate on the name field.
func (f *BusinessUnitFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldName))
}

// WhereEntityKey applies the entql string predicate on the entity_key field.
func (f *BusinessUnitFilter) WhereEntityKey(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldEntityKey))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *BusinessUnitFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldPhoneNumber))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *BusinessUnitFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldAddress))
}

// WhereCity applies the entql string predicate on the city field.
func (f *BusinessUnitFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldCity))
}

// WhereState applies the entql string predicate on the state field.
func (f *BusinessUnitFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldState))
}

// WhereCountry applies the entql string predicate on the country field.
func (f *BusinessUnitFilter) WhereCountry(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldCountry))
}

// WherePostalCode applies the entql string predicate on the postal_code field.
func (f *BusinessUnitFilter) WherePostalCode(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldPostalCode))
}

// WhereTaxID applies the entql string predicate on the tax_id field.
func (f *BusinessUnitFilter) WhereTaxID(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldTaxID))
}

// WhereSubscriptionPlan applies the entql string predicate on the subscription_plan field.
func (f *BusinessUnitFilter) WhereSubscriptionPlan(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldSubscriptionPlan))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *BusinessUnitFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldDescription))
}

// WhereLegalName applies the entql string predicate on the legal_name field.
func (f *BusinessUnitFilter) WhereLegalName(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldLegalName))
}

// WhereContactName applies the entql string predicate on the contact_name field.
func (f *BusinessUnitFilter) WhereContactName(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldContactName))
}

// WhereContactEmail applies the entql string predicate on the contact_email field.
func (f *BusinessUnitFilter) WhereContactEmail(p entql.StringP) {
	f.Where(p.Field(businessunit.FieldContactEmail))
}

// WherePaidUntil applies the entql time.Time predicate on the paid_until field.
func (f *BusinessUnitFilter) WherePaidUntil(p entql.TimeP) {
	f.Where(p.Field(businessunit.FieldPaidUntil))
}

// WhereSettings applies the entql json.RawMessage predicate on the settings field.
func (f *BusinessUnitFilter) WhereSettings(p entql.BytesP) {
	f.Where(p.Field(businessunit.FieldSettings))
}

// WhereFreeTrial applies the entql bool predicate on the free_trial field.
func (f *BusinessUnitFilter) WhereFreeTrial(p entql.BoolP) {
	f.Where(p.Field(businessunit.FieldFreeTrial))
}

// WhereParentID applies the entql [16]byte predicate on the parent_id field.
func (f *BusinessUnitFilter) WhereParentID(p entql.ValueP) {
	f.Where(p.Field(businessunit.FieldParentID))
}

// WhereHasPrev applies a predicate to check if query has an edge prev.
func (f *BusinessUnitFilter) WhereHasPrev() {
	f.Where(entql.HasEdge("prev"))
}

// WhereHasPrevWith applies a predicate to check if query has an edge prev with a given conditions (other predicates).
func (f *BusinessUnitFilter) WhereHasPrevWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("prev", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNext applies a predicate to check if query has an edge next.
func (f *BusinessUnitFilter) WhereHasNext() {
	f.Where(entql.HasEdge("next"))
}

// WhereHasNextWith applies a predicate to check if query has an edge next with a given conditions (other predicates).
func (f *BusinessUnitFilter) WhereHasNextWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("next", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizations applies a predicate to check if query has an edge organizations.
func (f *BusinessUnitFilter) WhereHasOrganizations() {
	f.Where(entql.HasEdge("organizations"))
}

// WhereHasOrganizationsWith applies a predicate to check if query has an edge organizations with a given conditions (other predicates).
func (f *BusinessUnitFilter) WhereHasOrganizationsWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ctq *ChargeTypeQuery) addPredicate(pred func(s *sql.Selector)) {
	ctq.predicates = append(ctq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChargeTypeQuery builder.
func (ctq *ChargeTypeQuery) Filter() *ChargeTypeFilter {
	return &ChargeTypeFilter{config: ctq.config, predicateAdder: ctq}
}

// addPredicate implements the predicateAdder interface.
func (m *ChargeTypeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChargeTypeMutation builder.
func (m *ChargeTypeMutation) Filter() *ChargeTypeFilter {
	return &ChargeTypeFilter{config: m.config, predicateAdder: m}
}

// ChargeTypeFilter provides a generic filtering capability at runtime for ChargeTypeQuery.
type ChargeTypeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChargeTypeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ChargeTypeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(chargetype.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *ChargeTypeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(chargetype.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *ChargeTypeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(chargetype.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ChargeTypeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(chargetype.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ChargeTypeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(chargetype.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *ChargeTypeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(chargetype.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ChargeTypeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(chargetype.FieldStatus))
}

// WhereName applies the entql string predicate on the name field.
func (f *ChargeTypeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(chargetype.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ChargeTypeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(chargetype.FieldDescription))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *ChargeTypeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *ChargeTypeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *ChargeTypeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *ChargeTypeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ctq *CommentTypeQuery) addPredicate(pred func(s *sql.Selector)) {
	ctq.predicates = append(ctq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommentTypeQuery builder.
func (ctq *CommentTypeQuery) Filter() *CommentTypeFilter {
	return &CommentTypeFilter{config: ctq.config, predicateAdder: ctq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommentTypeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommentTypeMutation builder.
func (m *CommentTypeMutation) Filter() *CommentTypeFilter {
	return &CommentTypeFilter{config: m.config, predicateAdder: m}
}

// CommentTypeFilter provides a generic filtering capability at runtime for CommentTypeQuery.
type CommentTypeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommentTypeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CommentTypeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(commenttype.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *CommentTypeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(commenttype.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *CommentTypeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(commenttype.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CommentTypeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(commenttype.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CommentTypeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(commenttype.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *CommentTypeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(commenttype.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *CommentTypeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(commenttype.FieldStatus))
}

// WhereName applies the entql string predicate on the name field.
func (f *CommentTypeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(commenttype.FieldName))
}

// WhereSeverity applies the entql string predicate on the severity field.
func (f *CommentTypeFilter) WhereSeverity(p entql.StringP) {
	f.Where(p.Field(commenttype.FieldSeverity))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *CommentTypeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(commenttype.FieldDescription))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *CommentTypeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *CommentTypeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *CommentTypeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *CommentTypeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommodityQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommodityQuery builder.
func (cq *CommodityQuery) Filter() *CommodityFilter {
	return &CommodityFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommodityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommodityMutation builder.
func (m *CommodityMutation) Filter() *CommodityFilter {
	return &CommodityFilter{config: m.config, predicateAdder: m}
}

// CommodityFilter provides a generic filtering capability at runtime for CommodityQuery.
type CommodityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommodityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CommodityFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(commodity.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *CommodityFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(commodity.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *CommodityFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(commodity.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CommodityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(commodity.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CommodityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(commodity.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *CommodityFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(commodity.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *CommodityFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(commodity.FieldStatus))
}

// WhereName applies the entql string predicate on the name field.
func (f *CommodityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(commodity.FieldName))
}

// WhereIsHazmat applies the entql bool predicate on the is_hazmat field.
func (f *CommodityFilter) WhereIsHazmat(p entql.BoolP) {
	f.Where(p.Field(commodity.FieldIsHazmat))
}

// WhereUnitOfMeasure applies the entql string predicate on the unit_of_measure field.
func (f *CommodityFilter) WhereUnitOfMeasure(p entql.StringP) {
	f.Where(p.Field(commodity.FieldUnitOfMeasure))
}

// WhereMinTemp applies the entql int8 predicate on the min_temp field.
func (f *CommodityFilter) WhereMinTemp(p entql.Int8P) {
	f.Where(p.Field(commodity.FieldMinTemp))
}

// WhereMaxTemp applies the entql int8 predicate on the max_temp field.
func (f *CommodityFilter) WhereMaxTemp(p entql.Int8P) {
	f.Where(p.Field(commodity.FieldMaxTemp))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *CommodityFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(commodity.FieldDescription))
}

// WhereHazardousMaterialID applies the entql [16]byte predicate on the hazardous_material_id field.
func (f *CommodityFilter) WhereHazardousMaterialID(p entql.ValueP) {
	f.Where(p.Field(commodity.FieldHazardousMaterialID))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *CommodityFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *CommodityFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *CommodityFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *CommodityFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHazardousMaterial applies a predicate to check if query has an edge hazardous_material.
func (f *CommodityFilter) WhereHasHazardousMaterial() {
	f.Where(entql.HasEdge("hazardous_material"))
}

// WhereHasHazardousMaterialWith applies a predicate to check if query has an edge hazardous_material with a given conditions (other predicates).
func (f *CommodityFilter) WhereHasHazardousMaterialWith(preds ...predicate.HazardousMaterial) {
	f.Where(entql.HasEdgeWith("hazardous_material", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CustomerQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CustomerQuery builder.
func (cq *CustomerQuery) Filter() *CustomerFilter {
	return &CustomerFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CustomerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CustomerMutation builder.
func (m *CustomerMutation) Filter() *CustomerFilter {
	return &CustomerFilter{config: m.config, predicateAdder: m}
}

// CustomerFilter provides a generic filtering capability at runtime for CustomerQuery.
type CustomerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CustomerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CustomerFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(customer.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *CustomerFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(customer.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *CustomerFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(customer.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CustomerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(customer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CustomerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(customer.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *CustomerFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(customer.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *CustomerFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(customer.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CustomerFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(customer.FieldCode))
}

// WhereName applies the entql string predicate on the name field.
func (f *CustomerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(customer.FieldName))
}

// WhereAddressLine1 applies the entql string predicate on the address_line_1 field.
func (f *CustomerFilter) WhereAddressLine1(p entql.StringP) {
	f.Where(p.Field(customer.FieldAddressLine1))
}

// WhereAddressLine2 applies the entql string predicate on the address_line_2 field.
func (f *CustomerFilter) WhereAddressLine2(p entql.StringP) {
	f.Where(p.Field(customer.FieldAddressLine2))
}

// WhereCity applies the entql string predicate on the city field.
func (f *CustomerFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(customer.FieldCity))
}

// WhereStateID applies the entql [16]byte predicate on the state_id field.
func (f *CustomerFilter) WhereStateID(p entql.ValueP) {
	f.Where(p.Field(customer.FieldStateID))
}

// WherePostalCode applies the entql string predicate on the postal_code field.
func (f *CustomerFilter) WherePostalCode(p entql.StringP) {
	f.Where(p.Field(customer.FieldPostalCode))
}

// WhereHasCustomerPortal applies the entql bool predicate on the has_customer_portal field.
func (f *CustomerFilter) WhereHasCustomerPortal(p entql.BoolP) {
	f.Where(p.Field(customer.FieldHasCustomerPortal))
}

// WhereAutoMarkReadyToBill applies the entql bool predicate on the auto_mark_ready_to_bill field.
func (f *CustomerFilter) WhereAutoMarkReadyToBill(p entql.BoolP) {
	f.Where(p.Field(customer.FieldAutoMarkReadyToBill))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *CustomerFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *CustomerFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasState applies a predicate to check if query has an edge state.
func (f *CustomerFilter) WhereHasState() {
	f.Where(entql.HasEdge("state"))
}

// WhereHasStateWith applies a predicate to check if query has an edge state with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasStateWith(preds ...predicate.UsState) {
	f.Where(entql.HasEdgeWith("state", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dcq *DelayCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	dcq.predicates = append(dcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DelayCodeQuery builder.
func (dcq *DelayCodeQuery) Filter() *DelayCodeFilter {
	return &DelayCodeFilter{config: dcq.config, predicateAdder: dcq}
}

// addPredicate implements the predicateAdder interface.
func (m *DelayCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DelayCodeMutation builder.
func (m *DelayCodeMutation) Filter() *DelayCodeFilter {
	return &DelayCodeFilter{config: m.config, predicateAdder: m}
}

// DelayCodeFilter provides a generic filtering capability at runtime for DelayCodeQuery.
type DelayCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DelayCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DelayCodeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(delaycode.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *DelayCodeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(delaycode.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *DelayCodeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(delaycode.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DelayCodeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(delaycode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DelayCodeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(delaycode.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *DelayCodeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(delaycode.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *DelayCodeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(delaycode.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *DelayCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(delaycode.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DelayCodeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(delaycode.FieldDescription))
}

// WhereFCarrierOrDriver applies the entql bool predicate on the f_carrier_or_driver field.
func (f *DelayCodeFilter) WhereFCarrierOrDriver(p entql.BoolP) {
	f.Where(p.Field(delaycode.FieldFCarrierOrDriver))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *DelayCodeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *DelayCodeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *DelayCodeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *DelayCodeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dcq *DispatchControlQuery) addPredicate(pred func(s *sql.Selector)) {
	dcq.predicates = append(dcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DispatchControlQuery builder.
func (dcq *DispatchControlQuery) Filter() *DispatchControlFilter {
	return &DispatchControlFilter{config: dcq.config, predicateAdder: dcq}
}

// addPredicate implements the predicateAdder interface.
func (m *DispatchControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DispatchControlMutation builder.
func (m *DispatchControlMutation) Filter() *DispatchControlFilter {
	return &DispatchControlFilter{config: m.config, predicateAdder: m}
}

// DispatchControlFilter provides a generic filtering capability at runtime for DispatchControlQuery.
type DispatchControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DispatchControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DispatchControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(dispatchcontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DispatchControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(dispatchcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DispatchControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(dispatchcontrol.FieldUpdatedAt))
}

// WhereRecordServiceIncident applies the entql string predicate on the record_service_incident field.
func (f *DispatchControlFilter) WhereRecordServiceIncident(p entql.StringP) {
	f.Where(p.Field(dispatchcontrol.FieldRecordServiceIncident))
}

// WhereDeadheadTarget applies the entql float64 predicate on the deadhead_target field.
func (f *DispatchControlFilter) WhereDeadheadTarget(p entql.Float64P) {
	f.Where(p.Field(dispatchcontrol.FieldDeadheadTarget))
}

// WhereMaxShipmentWeightLimit applies the entql int32 predicate on the max_shipment_weight_limit field.
func (f *DispatchControlFilter) WhereMaxShipmentWeightLimit(p entql.Int32P) {
	f.Where(p.Field(dispatchcontrol.FieldMaxShipmentWeightLimit))
}

// WhereGracePeriod applies the entql uint8 predicate on the grace_period field.
func (f *DispatchControlFilter) WhereGracePeriod(p entql.Uint8P) {
	f.Where(p.Field(dispatchcontrol.FieldGracePeriod))
}

// WhereEnforceWorkerAssign applies the entql bool predicate on the enforce_worker_assign field.
func (f *DispatchControlFilter) WhereEnforceWorkerAssign(p entql.BoolP) {
	f.Where(p.Field(dispatchcontrol.FieldEnforceWorkerAssign))
}

// WhereTrailerContinuity applies the entql bool predicate on the trailer_continuity field.
func (f *DispatchControlFilter) WhereTrailerContinuity(p entql.BoolP) {
	f.Where(p.Field(dispatchcontrol.FieldTrailerContinuity))
}

// WhereDupeTrailerCheck applies the entql bool predicate on the dupe_trailer_check field.
func (f *DispatchControlFilter) WhereDupeTrailerCheck(p entql.BoolP) {
	f.Where(p.Field(dispatchcontrol.FieldDupeTrailerCheck))
}

// WhereMaintenanceCompliance applies the entql bool predicate on the maintenance_compliance field.
func (f *DispatchControlFilter) WhereMaintenanceCompliance(p entql.BoolP) {
	f.Where(p.Field(dispatchcontrol.FieldMaintenanceCompliance))
}

// WhereRegulatoryCheck applies the entql bool predicate on the regulatory_check field.
func (f *DispatchControlFilter) WhereRegulatoryCheck(p entql.BoolP) {
	f.Where(p.Field(dispatchcontrol.FieldRegulatoryCheck))
}

// WherePrevShipmentOnHold applies the entql bool predicate on the prev_shipment_on_hold field.
func (f *DispatchControlFilter) WherePrevShipmentOnHold(p entql.BoolP) {
	f.Where(p.Field(dispatchcontrol.FieldPrevShipmentOnHold))
}

// WhereWorkerTimeAwayRestriction applies the entql bool predicate on the worker_time_away_restriction field.
func (f *DispatchControlFilter) WhereWorkerTimeAwayRestriction(p entql.BoolP) {
	f.Where(p.Field(dispatchcontrol.FieldWorkerTimeAwayRestriction))
}

// WhereTractorWorkerFleetConstraint applies the entql bool predicate on the tractor_worker_fleet_constraint field.
func (f *DispatchControlFilter) WhereTractorWorkerFleetConstraint(p entql.BoolP) {
	f.Where(p.Field(dispatchcontrol.FieldTractorWorkerFleetConstraint))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *DispatchControlFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *DispatchControlFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *DispatchControlFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *DispatchControlFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dcq *DivisionCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	dcq.predicates = append(dcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DivisionCodeQuery builder.
func (dcq *DivisionCodeQuery) Filter() *DivisionCodeFilter {
	return &DivisionCodeFilter{config: dcq.config, predicateAdder: dcq}
}

// addPredicate implements the predicateAdder interface.
func (m *DivisionCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DivisionCodeMutation builder.
func (m *DivisionCodeMutation) Filter() *DivisionCodeFilter {
	return &DivisionCodeFilter{config: m.config, predicateAdder: m}
}

// DivisionCodeFilter provides a generic filtering capability at runtime for DivisionCodeQuery.
type DivisionCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DivisionCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DivisionCodeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(divisioncode.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *DivisionCodeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(divisioncode.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *DivisionCodeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(divisioncode.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DivisionCodeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(divisioncode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DivisionCodeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(divisioncode.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *DivisionCodeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(divisioncode.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *DivisionCodeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(divisioncode.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *DivisionCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(divisioncode.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DivisionCodeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(divisioncode.FieldDescription))
}

// WhereCashAccountID applies the entql [16]byte predicate on the cash_account_id field.
func (f *DivisionCodeFilter) WhereCashAccountID(p entql.ValueP) {
	f.Where(p.Field(divisioncode.FieldCashAccountID))
}

// WhereApAccountID applies the entql [16]byte predicate on the ap_account_id field.
func (f *DivisionCodeFilter) WhereApAccountID(p entql.ValueP) {
	f.Where(p.Field(divisioncode.FieldApAccountID))
}

// WhereExpenseAccountID applies the entql [16]byte predicate on the expense_account_id field.
func (f *DivisionCodeFilter) WhereExpenseAccountID(p entql.ValueP) {
	f.Where(p.Field(divisioncode.FieldExpenseAccountID))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *DivisionCodeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *DivisionCodeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *DivisionCodeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *DivisionCodeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCashAccount applies a predicate to check if query has an edge cash_account.
func (f *DivisionCodeFilter) WhereHasCashAccount() {
	f.Where(entql.HasEdge("cash_account"))
}

// WhereHasCashAccountWith applies a predicate to check if query has an edge cash_account with a given conditions (other predicates).
func (f *DivisionCodeFilter) WhereHasCashAccountWith(preds ...predicate.GeneralLedgerAccount) {
	f.Where(entql.HasEdgeWith("cash_account", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApAccount applies a predicate to check if query has an edge ap_account.
func (f *DivisionCodeFilter) WhereHasApAccount() {
	f.Where(entql.HasEdge("ap_account"))
}

// WhereHasApAccountWith applies a predicate to check if query has an edge ap_account with a given conditions (other predicates).
func (f *DivisionCodeFilter) WhereHasApAccountWith(preds ...predicate.GeneralLedgerAccount) {
	f.Where(entql.HasEdgeWith("ap_account", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExpenseAccount applies a predicate to check if query has an edge expense_account.
func (f *DivisionCodeFilter) WhereHasExpenseAccount() {
	f.Where(entql.HasEdge("expense_account"))
}

// WhereHasExpenseAccountWith applies a predicate to check if query has an edge expense_account with a given conditions (other predicates).
func (f *DivisionCodeFilter) WhereHasExpenseAccountWith(preds ...predicate.GeneralLedgerAccount) {
	f.Where(entql.HasEdgeWith("expense_account", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dcq *DocumentClassificationQuery) addPredicate(pred func(s *sql.Selector)) {
	dcq.predicates = append(dcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentClassificationQuery builder.
func (dcq *DocumentClassificationQuery) Filter() *DocumentClassificationFilter {
	return &DocumentClassificationFilter{config: dcq.config, predicateAdder: dcq}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentClassificationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentClassificationMutation builder.
func (m *DocumentClassificationMutation) Filter() *DocumentClassificationFilter {
	return &DocumentClassificationFilter{config: m.config, predicateAdder: m}
}

// DocumentClassificationFilter provides a generic filtering capability at runtime for DocumentClassificationQuery.
type DocumentClassificationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentClassificationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DocumentClassificationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(documentclassification.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *DocumentClassificationFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(documentclassification.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *DocumentClassificationFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(documentclassification.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DocumentClassificationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(documentclassification.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DocumentClassificationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(documentclassification.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *DocumentClassificationFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(documentclassification.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *DocumentClassificationFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(documentclassification.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *DocumentClassificationFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(documentclassification.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DocumentClassificationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(documentclassification.FieldDescription))
}

// WhereColor applies the entql string predicate on the color field.
func (f *DocumentClassificationFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(documentclassification.FieldColor))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *DocumentClassificationFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *DocumentClassificationFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *DocumentClassificationFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *DocumentClassificationFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ecq *EmailControlQuery) addPredicate(pred func(s *sql.Selector)) {
	ecq.predicates = append(ecq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailControlQuery builder.
func (ecq *EmailControlQuery) Filter() *EmailControlFilter {
	return &EmailControlFilter{config: ecq.config, predicateAdder: ecq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailControlMutation builder.
func (m *EmailControlMutation) Filter() *EmailControlFilter {
	return &EmailControlFilter{config: m.config, predicateAdder: m}
}

// EmailControlFilter provides a generic filtering capability at runtime for EmailControlQuery.
type EmailControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmailControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EmailControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(emailcontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmailControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(emailcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmailControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(emailcontrol.FieldUpdatedAt))
}

// WhereBillingEmailProfileID applies the entql [16]byte predicate on the billing_email_profile_id field.
func (f *EmailControlFilter) WhereBillingEmailProfileID(p entql.ValueP) {
	f.Where(p.Field(emailcontrol.FieldBillingEmailProfileID))
}

// WhereRateExpirtationEmailProfileID applies the entql [16]byte predicate on the rate_expirtation_email_profile_id field.
func (f *EmailControlFilter) WhereRateExpirtationEmailProfileID(p entql.ValueP) {
	f.Where(p.Field(emailcontrol.FieldRateExpirtationEmailProfileID))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *EmailControlFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *EmailControlFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *EmailControlFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *EmailControlFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBillingEmailProfile applies a predicate to check if query has an edge billing_email_profile.
func (f *EmailControlFilter) WhereHasBillingEmailProfile() {
	f.Where(entql.HasEdge("billing_email_profile"))
}

// WhereHasBillingEmailProfileWith applies a predicate to check if query has an edge billing_email_profile with a given conditions (other predicates).
func (f *EmailControlFilter) WhereHasBillingEmailProfileWith(preds ...predicate.EmailProfile) {
	f.Where(entql.HasEdgeWith("billing_email_profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRateEmailProfile applies a predicate to check if query has an edge rate_email_profile.
func (f *EmailControlFilter) WhereHasRateEmailProfile() {
	f.Where(entql.HasEdge("rate_email_profile"))
}

// WhereHasRateEmailProfileWith applies a predicate to check if query has an edge rate_email_profile with a given conditions (other predicates).
func (f *EmailControlFilter) WhereHasRateEmailProfileWith(preds ...predicate.EmailProfile) {
	f.Where(entql.HasEdgeWith("rate_email_profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (epq *EmailProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	epq.predicates = append(epq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailProfileQuery builder.
func (epq *EmailProfileQuery) Filter() *EmailProfileFilter {
	return &EmailProfileFilter{config: epq.config, predicateAdder: epq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailProfileMutation builder.
func (m *EmailProfileMutation) Filter() *EmailProfileFilter {
	return &EmailProfileFilter{config: m.config, predicateAdder: m}
}

// EmailProfileFilter provides a generic filtering capability at runtime for EmailProfileQuery.
type EmailProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmailProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EmailProfileFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(emailprofile.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *EmailProfileFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(emailprofile.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *EmailProfileFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(emailprofile.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmailProfileFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(emailprofile.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmailProfileFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(emailprofile.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *EmailProfileFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(emailprofile.FieldVersion))
}

// WhereName applies the entql string predicate on the name field.
func (f *EmailProfileFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(emailprofile.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *EmailProfileFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(emailprofile.FieldEmail))
}

// WhereProtocol applies the entql string predicate on the protocol field.
func (f *EmailProfileFilter) WhereProtocol(p entql.StringP) {
	f.Where(p.Field(emailprofile.FieldProtocol))
}

// WhereHost applies the entql string predicate on the host field.
func (f *EmailProfileFilter) WhereHost(p entql.StringP) {
	f.Where(p.Field(emailprofile.FieldHost))
}

// WherePort applies the entql int16 predicate on the port field.
func (f *EmailProfileFilter) WherePort(p entql.Int16P) {
	f.Where(p.Field(emailprofile.FieldPort))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *EmailProfileFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(emailprofile.FieldUsername))
}

// WherePassword applies the entql string predicate on the password field.
func (f *EmailProfileFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(emailprofile.FieldPassword))
}

// WhereIsDefault applies the entql bool predicate on the is_default field.
func (f *EmailProfileFilter) WhereIsDefault(p entql.BoolP) {
	f.Where(p.Field(emailprofile.FieldIsDefault))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *EmailProfileFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *EmailProfileFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *EmailProfileFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *EmailProfileFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (emq *EquipmentManufactuerQuery) addPredicate(pred func(s *sql.Selector)) {
	emq.predicates = append(emq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EquipmentManufactuerQuery builder.
func (emq *EquipmentManufactuerQuery) Filter() *EquipmentManufactuerFilter {
	return &EquipmentManufactuerFilter{config: emq.config, predicateAdder: emq}
}

// addPredicate implements the predicateAdder interface.
func (m *EquipmentManufactuerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EquipmentManufactuerMutation builder.
func (m *EquipmentManufactuerMutation) Filter() *EquipmentManufactuerFilter {
	return &EquipmentManufactuerFilter{config: m.config, predicateAdder: m}
}

// EquipmentManufactuerFilter provides a generic filtering capability at runtime for EquipmentManufactuerQuery.
type EquipmentManufactuerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EquipmentManufactuerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EquipmentManufactuerFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(equipmentmanufactuer.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *EquipmentManufactuerFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(equipmentmanufactuer.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *EquipmentManufactuerFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(equipmentmanufactuer.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EquipmentManufactuerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(equipmentmanufactuer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EquipmentManufactuerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(equipmentmanufactuer.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *EquipmentManufactuerFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(equipmentmanufactuer.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EquipmentManufactuerFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(equipmentmanufactuer.FieldStatus))
}

// WhereName applies the entql string predicate on the name field.
func (f *EquipmentManufactuerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(equipmentmanufactuer.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EquipmentManufactuerFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(equipmentmanufactuer.FieldDescription))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *EquipmentManufactuerFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *EquipmentManufactuerFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *EquipmentManufactuerFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *EquipmentManufactuerFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (etq *EquipmentTypeQuery) addPredicate(pred func(s *sql.Selector)) {
	etq.predicates = append(etq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EquipmentTypeQuery builder.
func (etq *EquipmentTypeQuery) Filter() *EquipmentTypeFilter {
	return &EquipmentTypeFilter{config: etq.config, predicateAdder: etq}
}

// addPredicate implements the predicateAdder interface.
func (m *EquipmentTypeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EquipmentTypeMutation builder.
func (m *EquipmentTypeMutation) Filter() *EquipmentTypeFilter {
	return &EquipmentTypeFilter{config: m.config, predicateAdder: m}
}

// EquipmentTypeFilter provides a generic filtering capability at runtime for EquipmentTypeQuery.
type EquipmentTypeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EquipmentTypeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EquipmentTypeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(equipmenttype.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *EquipmentTypeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(equipmenttype.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *EquipmentTypeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(equipmenttype.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EquipmentTypeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(equipmenttype.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EquipmentTypeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(equipmenttype.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *EquipmentTypeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(equipmenttype.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EquipmentTypeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(equipmenttype.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *EquipmentTypeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(equipmenttype.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EquipmentTypeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(equipmenttype.FieldDescription))
}

// WhereCostPerMile applies the entql float64 predicate on the cost_per_mile field.
func (f *EquipmentTypeFilter) WhereCostPerMile(p entql.Float64P) {
	f.Where(p.Field(equipmenttype.FieldCostPerMile))
}

// WhereEquipmentClass applies the entql string predicate on the equipment_class field.
func (f *EquipmentTypeFilter) WhereEquipmentClass(p entql.StringP) {
	f.Where(p.Field(equipmenttype.FieldEquipmentClass))
}

// WhereFixedCost applies the entql float64 predicate on the fixed_cost field.
func (f *EquipmentTypeFilter) WhereFixedCost(p entql.Float64P) {
	f.Where(p.Field(equipmenttype.FieldFixedCost))
}

// WhereVariableCost applies the entql float64 predicate on the variable_cost field.
func (f *EquipmentTypeFilter) WhereVariableCost(p entql.Float64P) {
	f.Where(p.Field(equipmenttype.FieldVariableCost))
}

// WhereHeight applies the entql float64 predicate on the height field.
func (f *EquipmentTypeFilter) WhereHeight(p entql.Float64P) {
	f.Where(p.Field(equipmenttype.FieldHeight))
}

// WhereLength applies the entql float64 predicate on the length field.
func (f *EquipmentTypeFilter) WhereLength(p entql.Float64P) {
	f.Where(p.Field(equipmenttype.FieldLength))
}

// WhereWidth applies the entql float64 predicate on the width field.
func (f *EquipmentTypeFilter) WhereWidth(p entql.Float64P) {
	f.Where(p.Field(equipmenttype.FieldWidth))
}

// WhereWeight applies the entql float64 predicate on the weight field.
func (f *EquipmentTypeFilter) WhereWeight(p entql.Float64P) {
	f.Where(p.Field(equipmenttype.FieldWeight))
}

// WhereIdlingFuelUsage applies the entql float64 predicate on the idling_fuel_usage field.
func (f *EquipmentTypeFilter) WhereIdlingFuelUsage(p entql.Float64P) {
	f.Where(p.Field(equipmenttype.FieldIdlingFuelUsage))
}

// WhereExemptFromTolls applies the entql bool predicate on the exempt_from_tolls field.
func (f *EquipmentTypeFilter) WhereExemptFromTolls(p entql.BoolP) {
	f.Where(p.Field(equipmenttype.FieldExemptFromTolls))
}

// WhereColor applies the entql string predicate on the color field.
func (f *EquipmentTypeFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(equipmenttype.FieldColor))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *EquipmentTypeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *EquipmentTypeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *EquipmentTypeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *EquipmentTypeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ftcq *FeasibilityToolControlQuery) addPredicate(pred func(s *sql.Selector)) {
	ftcq.predicates = append(ftcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FeasibilityToolControlQuery builder.
func (ftcq *FeasibilityToolControlQuery) Filter() *FeasibilityToolControlFilter {
	return &FeasibilityToolControlFilter{config: ftcq.config, predicateAdder: ftcq}
}

// addPredicate implements the predicateAdder interface.
func (m *FeasibilityToolControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FeasibilityToolControlMutation builder.
func (m *FeasibilityToolControlMutation) Filter() *FeasibilityToolControlFilter {
	return &FeasibilityToolControlFilter{config: m.config, predicateAdder: m}
}

// FeasibilityToolControlFilter provides a generic filtering capability at runtime for FeasibilityToolControlQuery.
type FeasibilityToolControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FeasibilityToolControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *FeasibilityToolControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FeasibilityToolControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FeasibilityToolControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldUpdatedAt))
}

// WhereOtpOperator applies the entql string predicate on the otp_operator field.
func (f *FeasibilityToolControlFilter) WhereOtpOperator(p entql.StringP) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldOtpOperator))
}

// WhereOtpValue applies the entql float64 predicate on the otp_value field.
func (f *FeasibilityToolControlFilter) WhereOtpValue(p entql.Float64P) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldOtpValue))
}

// WhereMpwOperator applies the entql string predicate on the mpw_operator field.
func (f *FeasibilityToolControlFilter) WhereMpwOperator(p entql.StringP) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldMpwOperator))
}

// WhereMpwValue applies the entql float64 predicate on the mpw_value field.
func (f *FeasibilityToolControlFilter) WhereMpwValue(p entql.Float64P) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldMpwValue))
}

// WhereMpdOperator applies the entql string predicate on the mpd_operator field.
func (f *FeasibilityToolControlFilter) WhereMpdOperator(p entql.StringP) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldMpdOperator))
}

// WhereMpdValue applies the entql float64 predicate on the mpd_value field.
func (f *FeasibilityToolControlFilter) WhereMpdValue(p entql.Float64P) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldMpdValue))
}

// WhereMpgOperator applies the entql string predicate on the mpg_operator field.
func (f *FeasibilityToolControlFilter) WhereMpgOperator(p entql.StringP) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldMpgOperator))
}

// WhereMpgValue applies the entql float64 predicate on the mpg_value field.
func (f *FeasibilityToolControlFilter) WhereMpgValue(p entql.Float64P) {
	f.Where(p.Field(feasibilitytoolcontrol.FieldMpgValue))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *FeasibilityToolControlFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *FeasibilityToolControlFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *FeasibilityToolControlFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *FeasibilityToolControlFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ffq *FeatureFlagQuery) addPredicate(pred func(s *sql.Selector)) {
	ffq.predicates = append(ffq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FeatureFlagQuery builder.
func (ffq *FeatureFlagQuery) Filter() *FeatureFlagFilter {
	return &FeatureFlagFilter{config: ffq.config, predicateAdder: ffq}
}

// addPredicate implements the predicateAdder interface.
func (m *FeatureFlagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FeatureFlagMutation builder.
func (m *FeatureFlagMutation) Filter() *FeatureFlagFilter {
	return &FeatureFlagFilter{config: m.config, predicateAdder: m}
}

// FeatureFlagFilter provides a generic filtering capability at runtime for FeatureFlagQuery.
type FeatureFlagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FeatureFlagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *FeatureFlagFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(featureflag.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FeatureFlagFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(featureflag.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FeatureFlagFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(featureflag.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *FeatureFlagFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *FeatureFlagFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldCode))
}

// WhereBeta applies the entql bool predicate on the beta field.
func (f *FeatureFlagFilter) WhereBeta(p entql.BoolP) {
	f.Where(p.Field(featureflag.FieldBeta))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *FeatureFlagFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldDescription))
}

// WherePreviewPictureURL applies the entql string predicate on the preview_picture_url field.
func (f *FeatureFlagFilter) WherePreviewPictureURL(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldPreviewPictureURL))
}

// WhereHasOrganizationFeatureFlag applies a predicate to check if query has an edge organization_feature_flag.
func (f *FeatureFlagFilter) WhereHasOrganizationFeatureFlag() {
	f.Where(entql.HasEdge("organization_feature_flag"))
}

// WhereHasOrganizationFeatureFlagWith applies a predicate to check if query has an edge organization_feature_flag with a given conditions (other predicates).
func (f *FeatureFlagFilter) WhereHasOrganizationFeatureFlagWith(preds ...predicate.OrganizationFeatureFlag) {
	f.Where(entql.HasEdgeWith("organization_feature_flag", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (fcq *FleetCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	fcq.predicates = append(fcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FleetCodeQuery builder.
func (fcq *FleetCodeQuery) Filter() *FleetCodeFilter {
	return &FleetCodeFilter{config: fcq.config, predicateAdder: fcq}
}

// addPredicate implements the predicateAdder interface.
func (m *FleetCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FleetCodeMutation builder.
func (m *FleetCodeMutation) Filter() *FleetCodeFilter {
	return &FleetCodeFilter{config: m.config, predicateAdder: m}
}

// FleetCodeFilter provides a generic filtering capability at runtime for FleetCodeQuery.
type FleetCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FleetCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *FleetCodeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(fleetcode.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *FleetCodeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(fleetcode.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *FleetCodeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(fleetcode.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FleetCodeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(fleetcode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FleetCodeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(fleetcode.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *FleetCodeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(fleetcode.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *FleetCodeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(fleetcode.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *FleetCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(fleetcode.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *FleetCodeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(fleetcode.FieldDescription))
}

// WhereRevenueGoal applies the entql float64 predicate on the revenue_goal field.
func (f *FleetCodeFilter) WhereRevenueGoal(p entql.Float64P) {
	f.Where(p.Field(fleetcode.FieldRevenueGoal))
}

// WhereDeadheadGoal applies the entql float64 predicate on the deadhead_goal field.
func (f *FleetCodeFilter) WhereDeadheadGoal(p entql.Float64P) {
	f.Where(p.Field(fleetcode.FieldDeadheadGoal))
}

// WhereMileageGoal applies the entql float64 predicate on the mileage_goal field.
func (f *FleetCodeFilter) WhereMileageGoal(p entql.Float64P) {
	f.Where(p.Field(fleetcode.FieldMileageGoal))
}

// WhereManagerID applies the entql [16]byte predicate on the manager_id field.
func (f *FleetCodeFilter) WhereManagerID(p entql.ValueP) {
	f.Where(p.Field(fleetcode.FieldManagerID))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *FleetCodeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *FleetCodeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *FleetCodeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *FleetCodeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *FleetCodeFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *FleetCodeFilter) WhereHasManagerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (glaq *GeneralLedgerAccountQuery) addPredicate(pred func(s *sql.Selector)) {
	glaq.predicates = append(glaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GeneralLedgerAccountQuery builder.
func (glaq *GeneralLedgerAccountQuery) Filter() *GeneralLedgerAccountFilter {
	return &GeneralLedgerAccountFilter{config: glaq.config, predicateAdder: glaq}
}

// addPredicate implements the predicateAdder interface.
func (m *GeneralLedgerAccountMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GeneralLedgerAccountMutation builder.
func (m *GeneralLedgerAccountMutation) Filter() *GeneralLedgerAccountFilter {
	return &GeneralLedgerAccountFilter{config: m.config, predicateAdder: m}
}

// GeneralLedgerAccountFilter provides a generic filtering capability at runtime for GeneralLedgerAccountQuery.
type GeneralLedgerAccountFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GeneralLedgerAccountFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GeneralLedgerAccountFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(generalledgeraccount.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *GeneralLedgerAccountFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(generalledgeraccount.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *GeneralLedgerAccountFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(generalledgeraccount.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GeneralLedgerAccountFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(generalledgeraccount.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GeneralLedgerAccountFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(generalledgeraccount.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *GeneralLedgerAccountFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(generalledgeraccount.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *GeneralLedgerAccountFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(generalledgeraccount.FieldStatus))
}

// WhereAccountNumber applies the entql string predicate on the account_number field.
func (f *GeneralLedgerAccountFilter) WhereAccountNumber(p entql.StringP) {
	f.Where(p.Field(generalledgeraccount.FieldAccountNumber))
}

// WhereAccountType applies the entql string predicate on the account_type field.
func (f *GeneralLedgerAccountFilter) WhereAccountType(p entql.StringP) {
	f.Where(p.Field(generalledgeraccount.FieldAccountType))
}

// WhereCashFlowType applies the entql string predicate on the cash_flow_type field.
func (f *GeneralLedgerAccountFilter) WhereCashFlowType(p entql.StringP) {
	f.Where(p.Field(generalledgeraccount.FieldCashFlowType))
}

// WhereAccountSubType applies the entql string predicate on the account_sub_type field.
func (f *GeneralLedgerAccountFilter) WhereAccountSubType(p entql.StringP) {
	f.Where(p.Field(generalledgeraccount.FieldAccountSubType))
}

// WhereAccountClass applies the entql string predicate on the account_class field.
func (f *GeneralLedgerAccountFilter) WhereAccountClass(p entql.StringP) {
	f.Where(p.Field(generalledgeraccount.FieldAccountClass))
}

// WhereBalance applies the entql float64 predicate on the balance field.
func (f *GeneralLedgerAccountFilter) WhereBalance(p entql.Float64P) {
	f.Where(p.Field(generalledgeraccount.FieldBalance))
}

// WhereInterestRate applies the entql float64 predicate on the interest_rate field.
func (f *GeneralLedgerAccountFilter) WhereInterestRate(p entql.Float64P) {
	f.Where(p.Field(generalledgeraccount.FieldInterestRate))
}

// WhereDateOpened applies the entql other predicate on the date_opened field.
func (f *GeneralLedgerAccountFilter) WhereDateOpened(p entql.OtherP) {
	f.Where(p.Field(generalledgeraccount.FieldDateOpened))
}

// WhereDateClosed applies the entql other predicate on the date_closed field.
func (f *GeneralLedgerAccountFilter) WhereDateClosed(p entql.OtherP) {
	f.Where(p.Field(generalledgeraccount.FieldDateClosed))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *GeneralLedgerAccountFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(generalledgeraccount.FieldNotes))
}

// WhereIsTaxRelevant applies the entql bool predicate on the is_tax_relevant field.
func (f *GeneralLedgerAccountFilter) WhereIsTaxRelevant(p entql.BoolP) {
	f.Where(p.Field(generalledgeraccount.FieldIsTaxRelevant))
}

// WhereIsReconciled applies the entql bool predicate on the is_reconciled field.
func (f *GeneralLedgerAccountFilter) WhereIsReconciled(p entql.BoolP) {
	f.Where(p.Field(generalledgeraccount.FieldIsReconciled))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *GeneralLedgerAccountFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *GeneralLedgerAccountFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *GeneralLedgerAccountFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *GeneralLedgerAccountFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTags applies a predicate to check if query has an edge tags.
func (f *GeneralLedgerAccountFilter) WhereHasTags() {
	f.Where(entql.HasEdge("tags"))
}

// WhereHasTagsWith applies a predicate to check if query has an edge tags with a given conditions (other predicates).
func (f *GeneralLedgerAccountFilter) WhereHasTagsWith(preds ...predicate.Tag) {
	f.Where(entql.HasEdgeWith("tags", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (gaq *GoogleApiQuery) addPredicate(pred func(s *sql.Selector)) {
	gaq.predicates = append(gaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoogleApiQuery builder.
func (gaq *GoogleApiQuery) Filter() *GoogleApiFilter {
	return &GoogleApiFilter{config: gaq.config, predicateAdder: gaq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoogleApiMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoogleApiMutation builder.
func (m *GoogleApiMutation) Filter() *GoogleApiFilter {
	return &GoogleApiFilter{config: m.config, predicateAdder: m}
}

// GoogleApiFilter provides a generic filtering capability at runtime for GoogleApiQuery.
type GoogleApiFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoogleApiFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GoogleApiFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(googleapi.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GoogleApiFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(googleapi.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GoogleApiFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(googleapi.FieldUpdatedAt))
}

// WhereAPIKey applies the entql string predicate on the api_key field.
func (f *GoogleApiFilter) WhereAPIKey(p entql.StringP) {
	f.Where(p.Field(googleapi.FieldAPIKey))
}

// WhereMileageUnit applies the entql string predicate on the mileage_unit field.
func (f *GoogleApiFilter) WhereMileageUnit(p entql.StringP) {
	f.Where(p.Field(googleapi.FieldMileageUnit))
}

// WhereAddCustomerLocation applies the entql bool predicate on the add_customer_location field.
func (f *GoogleApiFilter) WhereAddCustomerLocation(p entql.BoolP) {
	f.Where(p.Field(googleapi.FieldAddCustomerLocation))
}

// WhereAutoGeocode applies the entql bool predicate on the auto_geocode field.
func (f *GoogleApiFilter) WhereAutoGeocode(p entql.BoolP) {
	f.Where(p.Field(googleapi.FieldAutoGeocode))
}

// WhereAddLocation applies the entql bool predicate on the add_location field.
func (f *GoogleApiFilter) WhereAddLocation(p entql.BoolP) {
	f.Where(p.Field(googleapi.FieldAddLocation))
}

// WhereTrafficModel applies the entql string predicate on the traffic_model field.
func (f *GoogleApiFilter) WhereTrafficModel(p entql.StringP) {
	f.Where(p.Field(googleapi.FieldTrafficModel))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *GoogleApiFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *GoogleApiFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *GoogleApiFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *GoogleApiFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hmq *HazardousMaterialQuery) addPredicate(pred func(s *sql.Selector)) {
	hmq.predicates = append(hmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HazardousMaterialQuery builder.
func (hmq *HazardousMaterialQuery) Filter() *HazardousMaterialFilter {
	return &HazardousMaterialFilter{config: hmq.config, predicateAdder: hmq}
}

// addPredicate implements the predicateAdder interface.
func (m *HazardousMaterialMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HazardousMaterialMutation builder.
func (m *HazardousMaterialMutation) Filter() *HazardousMaterialFilter {
	return &HazardousMaterialFilter{config: m.config, predicateAdder: m}
}

// HazardousMaterialFilter provides a generic filtering capability at runtime for HazardousMaterialQuery.
type HazardousMaterialFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HazardousMaterialFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *HazardousMaterialFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(hazardousmaterial.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *HazardousMaterialFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(hazardousmaterial.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *HazardousMaterialFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(hazardousmaterial.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HazardousMaterialFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hazardousmaterial.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HazardousMaterialFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hazardousmaterial.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *HazardousMaterialFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(hazardousmaterial.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *HazardousMaterialFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(hazardousmaterial.FieldStatus))
}

// WhereName applies the entql string predicate on the name field.
func (f *HazardousMaterialFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hazardousmaterial.FieldName))
}

// WhereHazardClass applies the entql string predicate on the hazard_class field.
func (f *HazardousMaterialFilter) WhereHazardClass(p entql.StringP) {
	f.Where(p.Field(hazardousmaterial.FieldHazardClass))
}

// WhereErgNumber applies the entql string predicate on the erg_number field.
func (f *HazardousMaterialFilter) WhereErgNumber(p entql.StringP) {
	f.Where(p.Field(hazardousmaterial.FieldErgNumber))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *HazardousMaterialFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(hazardousmaterial.FieldDescription))
}

// WherePackingGroup applies the entql string predicate on the packing_group field.
func (f *HazardousMaterialFilter) WherePackingGroup(p entql.StringP) {
	f.Where(p.Field(hazardousmaterial.FieldPackingGroup))
}

// WhereProperShippingName applies the entql string predicate on the proper_shipping_name field.
func (f *HazardousMaterialFilter) WhereProperShippingName(p entql.StringP) {
	f.Where(p.Field(hazardousmaterial.FieldProperShippingName))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *HazardousMaterialFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *HazardousMaterialFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *HazardousMaterialFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *HazardousMaterialFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hmsq *HazardousMaterialSegregationQuery) addPredicate(pred func(s *sql.Selector)) {
	hmsq.predicates = append(hmsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HazardousMaterialSegregationQuery builder.
func (hmsq *HazardousMaterialSegregationQuery) Filter() *HazardousMaterialSegregationFilter {
	return &HazardousMaterialSegregationFilter{config: hmsq.config, predicateAdder: hmsq}
}

// addPredicate implements the predicateAdder interface.
func (m *HazardousMaterialSegregationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HazardousMaterialSegregationMutation builder.
func (m *HazardousMaterialSegregationMutation) Filter() *HazardousMaterialSegregationFilter {
	return &HazardousMaterialSegregationFilter{config: m.config, predicateAdder: m}
}

// HazardousMaterialSegregationFilter provides a generic filtering capability at runtime for HazardousMaterialSegregationQuery.
type HazardousMaterialSegregationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HazardousMaterialSegregationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *HazardousMaterialSegregationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(hazardousmaterialsegregation.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *HazardousMaterialSegregationFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(hazardousmaterialsegregation.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *HazardousMaterialSegregationFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(hazardousmaterialsegregation.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HazardousMaterialSegregationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hazardousmaterialsegregation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HazardousMaterialSegregationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hazardousmaterialsegregation.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *HazardousMaterialSegregationFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(hazardousmaterialsegregation.FieldVersion))
}

// WhereClassA applies the entql string predicate on the class_a field.
func (f *HazardousMaterialSegregationFilter) WhereClassA(p entql.StringP) {
	f.Where(p.Field(hazardousmaterialsegregation.FieldClassA))
}

// WhereClassB applies the entql string predicate on the class_b field.
func (f *HazardousMaterialSegregationFilter) WhereClassB(p entql.StringP) {
	f.Where(p.Field(hazardousmaterialsegregation.FieldClassB))
}

// WhereSegregationType applies the entql string predicate on the segregation_type field.
func (f *HazardousMaterialSegregationFilter) WhereSegregationType(p entql.StringP) {
	f.Where(p.Field(hazardousmaterialsegregation.FieldSegregationType))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *HazardousMaterialSegregationFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *HazardousMaterialSegregationFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *HazardousMaterialSegregationFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *HazardousMaterialSegregationFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (icq *InvoiceControlQuery) addPredicate(pred func(s *sql.Selector)) {
	icq.predicates = append(icq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InvoiceControlQuery builder.
func (icq *InvoiceControlQuery) Filter() *InvoiceControlFilter {
	return &InvoiceControlFilter{config: icq.config, predicateAdder: icq}
}

// addPredicate implements the predicateAdder interface.
func (m *InvoiceControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InvoiceControlMutation builder.
func (m *InvoiceControlMutation) Filter() *InvoiceControlFilter {
	return &InvoiceControlFilter{config: m.config, predicateAdder: m}
}

// InvoiceControlFilter provides a generic filtering capability at runtime for InvoiceControlQuery.
type InvoiceControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InvoiceControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *InvoiceControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(invoicecontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InvoiceControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(invoicecontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InvoiceControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(invoicecontrol.FieldUpdatedAt))
}

// WhereInvoiceNumberPrefix applies the entql string predicate on the invoice_number_prefix field.
func (f *InvoiceControlFilter) WhereInvoiceNumberPrefix(p entql.StringP) {
	f.Where(p.Field(invoicecontrol.FieldInvoiceNumberPrefix))
}

// WhereCreditMemoNumberPrefix applies the entql string predicate on the credit_memo_number_prefix field.
func (f *InvoiceControlFilter) WhereCreditMemoNumberPrefix(p entql.StringP) {
	f.Where(p.Field(invoicecontrol.FieldCreditMemoNumberPrefix))
}

// WhereInvoiceTerms applies the entql string predicate on the invoice_terms field.
func (f *InvoiceControlFilter) WhereInvoiceTerms(p entql.StringP) {
	f.Where(p.Field(invoicecontrol.FieldInvoiceTerms))
}

// WhereInvoiceFooter applies the entql string predicate on the invoice_footer field.
func (f *InvoiceControlFilter) WhereInvoiceFooter(p entql.StringP) {
	f.Where(p.Field(invoicecontrol.FieldInvoiceFooter))
}

// WhereInvoiceLogoURL applies the entql string predicate on the invoice_logo_url field.
func (f *InvoiceControlFilter) WhereInvoiceLogoURL(p entql.StringP) {
	f.Where(p.Field(invoicecontrol.FieldInvoiceLogoURL))
}

// WhereInvoiceDateFormat applies the entql string predicate on the invoice_date_format field.
func (f *InvoiceControlFilter) WhereInvoiceDateFormat(p entql.StringP) {
	f.Where(p.Field(invoicecontrol.FieldInvoiceDateFormat))
}

// WhereInvoiceDueAfterDays applies the entql uint8 predicate on the invoice_due_after_days field.
func (f *InvoiceControlFilter) WhereInvoiceDueAfterDays(p entql.Uint8P) {
	f.Where(p.Field(invoicecontrol.FieldInvoiceDueAfterDays))
}

// WhereInvoiceLogoWidth applies the entql uint16 predicate on the invoice_logo_width field.
func (f *InvoiceControlFilter) WhereInvoiceLogoWidth(p entql.Uint16P) {
	f.Where(p.Field(invoicecontrol.FieldInvoiceLogoWidth))
}

// WhereShowAmountDue applies the entql bool predicate on the show_amount_due field.
func (f *InvoiceControlFilter) WhereShowAmountDue(p entql.BoolP) {
	f.Where(p.Field(invoicecontrol.FieldShowAmountDue))
}

// WhereAttachPdf applies the entql bool predicate on the attach_pdf field.
func (f *InvoiceControlFilter) WhereAttachPdf(p entql.BoolP) {
	f.Where(p.Field(invoicecontrol.FieldAttachPdf))
}

// WhereShowInvoiceDueDate applies the entql bool predicate on the show_invoice_due_date field.
func (f *InvoiceControlFilter) WhereShowInvoiceDueDate(p entql.BoolP) {
	f.Where(p.Field(invoicecontrol.FieldShowInvoiceDueDate))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *InvoiceControlFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *InvoiceControlFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *InvoiceControlFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *InvoiceControlFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (lq *LocationQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LocationQuery builder.
func (lq *LocationQuery) Filter() *LocationFilter {
	return &LocationFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LocationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LocationMutation builder.
func (m *LocationMutation) Filter() *LocationFilter {
	return &LocationFilter{config: m.config, predicateAdder: m}
}

// LocationFilter provides a generic filtering capability at runtime for LocationQuery.
type LocationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LocationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *LocationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(location.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *LocationFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(location.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *LocationFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(location.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *LocationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(location.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *LocationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(location.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *LocationFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(location.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *LocationFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(location.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *LocationFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(location.FieldCode))
}

// WhereLocationCategoryID applies the entql [16]byte predicate on the location_category_id field.
func (f *LocationFilter) WhereLocationCategoryID(p entql.ValueP) {
	f.Where(p.Field(location.FieldLocationCategoryID))
}

// WhereName applies the entql string predicate on the name field.
func (f *LocationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(location.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *LocationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(location.FieldDescription))
}

// WhereAddressLine1 applies the entql string predicate on the address_line_1 field.
func (f *LocationFilter) WhereAddressLine1(p entql.StringP) {
	f.Where(p.Field(location.FieldAddressLine1))
}

// WhereAddressLine2 applies the entql string predicate on the address_line_2 field.
func (f *LocationFilter) WhereAddressLine2(p entql.StringP) {
	f.Where(p.Field(location.FieldAddressLine2))
}

// WhereCity applies the entql string predicate on the city field.
func (f *LocationFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(location.FieldCity))
}

// WhereStateID applies the entql [16]byte predicate on the state_id field.
func (f *LocationFilter) WhereStateID(p entql.ValueP) {
	f.Where(p.Field(location.FieldStateID))
}

// WherePostalCode applies the entql string predicate on the postal_code field.
func (f *LocationFilter) WherePostalCode(p entql.StringP) {
	f.Where(p.Field(location.FieldPostalCode))
}

// WhereLongitude applies the entql float64 predicate on the longitude field.
func (f *LocationFilter) WhereLongitude(p entql.Float64P) {
	f.Where(p.Field(location.FieldLongitude))
}

// WhereLatitude applies the entql float64 predicate on the latitude field.
func (f *LocationFilter) WhereLatitude(p entql.Float64P) {
	f.Where(p.Field(location.FieldLatitude))
}

// WherePlaceID applies the entql string predicate on the place_id field.
func (f *LocationFilter) WherePlaceID(p entql.StringP) {
	f.Where(p.Field(location.FieldPlaceID))
}

// WhereIsGeocoded applies the entql bool predicate on the is_geocoded field.
func (f *LocationFilter) WhereIsGeocoded(p entql.BoolP) {
	f.Where(p.Field(location.FieldIsGeocoded))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *LocationFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *LocationFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *LocationFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *LocationFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLocationCategory applies a predicate to check if query has an edge location_category.
func (f *LocationFilter) WhereHasLocationCategory() {
	f.Where(entql.HasEdge("location_category"))
}

// WhereHasLocationCategoryWith applies a predicate to check if query has an edge location_category with a given conditions (other predicates).
func (f *LocationFilter) WhereHasLocationCategoryWith(preds ...predicate.LocationCategory) {
	f.Where(entql.HasEdgeWith("location_category", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasState applies a predicate to check if query has an edge state.
func (f *LocationFilter) WhereHasState() {
	f.Where(entql.HasEdge("state"))
}

// WhereHasStateWith applies a predicate to check if query has an edge state with a given conditions (other predicates).
func (f *LocationFilter) WhereHasStateWith(preds ...predicate.UsState) {
	f.Where(entql.HasEdgeWith("state", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasComments applies a predicate to check if query has an edge comments.
func (f *LocationFilter) WhereHasComments() {
	f.Where(entql.HasEdge("comments"))
}

// WhereHasCommentsWith applies a predicate to check if query has an edge comments with a given conditions (other predicates).
func (f *LocationFilter) WhereHasCommentsWith(preds ...predicate.LocationComment) {
	f.Where(entql.HasEdgeWith("comments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContacts applies a predicate to check if query has an edge contacts.
func (f *LocationFilter) WhereHasContacts() {
	f.Where(entql.HasEdge("contacts"))
}

// WhereHasContactsWith applies a predicate to check if query has an edge contacts with a given conditions (other predicates).
func (f *LocationFilter) WhereHasContactsWith(preds ...predicate.LocationContact) {
	f.Where(entql.HasEdgeWith("contacts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (lcq *LocationCategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	lcq.predicates = append(lcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LocationCategoryQuery builder.
func (lcq *LocationCategoryQuery) Filter() *LocationCategoryFilter {
	return &LocationCategoryFilter{config: lcq.config, predicateAdder: lcq}
}

// addPredicate implements the predicateAdder interface.
func (m *LocationCategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LocationCategoryMutation builder.
func (m *LocationCategoryMutation) Filter() *LocationCategoryFilter {
	return &LocationCategoryFilter{config: m.config, predicateAdder: m}
}

// LocationCategoryFilter provides a generic filtering capability at runtime for LocationCategoryQuery.
type LocationCategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LocationCategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *LocationCategoryFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(locationcategory.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *LocationCategoryFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(locationcategory.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *LocationCategoryFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(locationcategory.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *LocationCategoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(locationcategory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *LocationCategoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(locationcategory.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *LocationCategoryFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(locationcategory.FieldVersion))
}

// WhereName applies the entql string predicate on the name field.
func (f *LocationCategoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(locationcategory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *LocationCategoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(locationcategory.FieldDescription))
}

// WhereColor applies the entql string predicate on the color field.
func (f *LocationCategoryFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(locationcategory.FieldColor))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *LocationCategoryFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *LocationCategoryFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *LocationCategoryFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *LocationCategoryFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (lcq *LocationCommentQuery) addPredicate(pred func(s *sql.Selector)) {
	lcq.predicates = append(lcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LocationCommentQuery builder.
func (lcq *LocationCommentQuery) Filter() *LocationCommentFilter {
	return &LocationCommentFilter{config: lcq.config, predicateAdder: lcq}
}

// addPredicate implements the predicateAdder interface.
func (m *LocationCommentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LocationCommentMutation builder.
func (m *LocationCommentMutation) Filter() *LocationCommentFilter {
	return &LocationCommentFilter{config: m.config, predicateAdder: m}
}

// LocationCommentFilter provides a generic filtering capability at runtime for LocationCommentQuery.
type LocationCommentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LocationCommentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *LocationCommentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(locationcomment.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *LocationCommentFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(locationcomment.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *LocationCommentFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(locationcomment.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *LocationCommentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(locationcomment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *LocationCommentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(locationcomment.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *LocationCommentFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(locationcomment.FieldVersion))
}

// WhereLocationID applies the entql [16]byte predicate on the location_id field.
func (f *LocationCommentFilter) WhereLocationID(p entql.ValueP) {
	f.Where(p.Field(locationcomment.FieldLocationID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *LocationCommentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(locationcomment.FieldUserID))
}

// WhereCommentTypeID applies the entql [16]byte predicate on the comment_type_id field.
func (f *LocationCommentFilter) WhereCommentTypeID(p entql.ValueP) {
	f.Where(p.Field(locationcomment.FieldCommentTypeID))
}

// WhereComment applies the entql string predicate on the comment field.
func (f *LocationCommentFilter) WhereComment(p entql.StringP) {
	f.Where(p.Field(locationcomment.FieldComment))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *LocationCommentFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *LocationCommentFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *LocationCommentFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *LocationCommentFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLocation applies a predicate to check if query has an edge location.
func (f *LocationCommentFilter) WhereHasLocation() {
	f.Where(entql.HasEdge("location"))
}

// WhereHasLocationWith applies a predicate to check if query has an edge location with a given conditions (other predicates).
func (f *LocationCommentFilter) WhereHasLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *LocationCommentFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *LocationCommentFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCommentType applies a predicate to check if query has an edge comment_type.
func (f *LocationCommentFilter) WhereHasCommentType() {
	f.Where(entql.HasEdge("comment_type"))
}

// WhereHasCommentTypeWith applies a predicate to check if query has an edge comment_type with a given conditions (other predicates).
func (f *LocationCommentFilter) WhereHasCommentTypeWith(preds ...predicate.CommentType) {
	f.Where(entql.HasEdgeWith("comment_type", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (lcq *LocationContactQuery) addPredicate(pred func(s *sql.Selector)) {
	lcq.predicates = append(lcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LocationContactQuery builder.
func (lcq *LocationContactQuery) Filter() *LocationContactFilter {
	return &LocationContactFilter{config: lcq.config, predicateAdder: lcq}
}

// addPredicate implements the predicateAdder interface.
func (m *LocationContactMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LocationContactMutation builder.
func (m *LocationContactMutation) Filter() *LocationContactFilter {
	return &LocationContactFilter{config: m.config, predicateAdder: m}
}

// LocationContactFilter provides a generic filtering capability at runtime for LocationContactQuery.
type LocationContactFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LocationContactFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *LocationContactFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(locationcontact.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *LocationContactFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(locationcontact.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *LocationContactFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(locationcontact.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *LocationContactFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(locationcontact.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *LocationContactFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(locationcontact.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *LocationContactFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(locationcontact.FieldVersion))
}

// WhereLocationID applies the entql [16]byte predicate on the location_id field.
func (f *LocationContactFilter) WhereLocationID(p entql.ValueP) {
	f.Where(p.Field(locationcontact.FieldLocationID))
}

// WhereName applies the entql string predicate on the name field.
func (f *LocationContactFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(locationcontact.FieldName))
}

// WhereEmailAddress applies the entql string predicate on the email_address field.
func (f *LocationContactFilter) WhereEmailAddress(p entql.StringP) {
	f.Where(p.Field(locationcontact.FieldEmailAddress))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *LocationContactFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(locationcontact.FieldPhoneNumber))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *LocationContactFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *LocationContactFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *LocationContactFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *LocationContactFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLocation applies a predicate to check if query has an edge location.
func (f *LocationContactFilter) WhereHasLocation() {
	f.Where(entql.HasEdge("location"))
}

// WhereHasLocationWith applies a predicate to check if query has an edge location with a given conditions (other predicates).
func (f *LocationContactFilter) WhereHasLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (oq *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: m.config, predicateAdder: m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(organization.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdatedAt))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *OrganizationFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(organization.FieldBusinessUnitID))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WhereScacCode applies the entql string predicate on the scac_code field.
func (f *OrganizationFilter) WhereScacCode(p entql.StringP) {
	f.Where(p.Field(organization.FieldScacCode))
}

// WhereDotNumber applies the entql string predicate on the dot_number field.
func (f *OrganizationFilter) WhereDotNumber(p entql.StringP) {
	f.Where(p.Field(organization.FieldDotNumber))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *OrganizationFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(organization.FieldLogoURL))
}

// WhereOrgType applies the entql string predicate on the org_type field.
func (f *OrganizationFilter) WhereOrgType(p entql.StringP) {
	f.Where(p.Field(organization.FieldOrgType))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *OrganizationFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(organization.FieldTimezone))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *OrganizationFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizationFeatureFlag applies a predicate to check if query has an edge organization_feature_flag.
func (f *OrganizationFilter) WhereHasOrganizationFeatureFlag() {
	f.Where(entql.HasEdge("organization_feature_flag"))
}

// WhereHasOrganizationFeatureFlagWith applies a predicate to check if query has an edge organization_feature_flag with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOrganizationFeatureFlagWith(preds ...predicate.OrganizationFeatureFlag) {
	f.Where(entql.HasEdgeWith("organization_feature_flag", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAccountingControl applies a predicate to check if query has an edge accounting_control.
func (f *OrganizationFilter) WhereHasAccountingControl() {
	f.Where(entql.HasEdge("accounting_control"))
}

// WhereHasAccountingControlWith applies a predicate to check if query has an edge accounting_control with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasAccountingControlWith(preds ...predicate.AccountingControl) {
	f.Where(entql.HasEdgeWith("accounting_control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBillingControl applies a predicate to check if query has an edge billing_control.
func (f *OrganizationFilter) WhereHasBillingControl() {
	f.Where(entql.HasEdge("billing_control"))
}

// WhereHasBillingControlWith applies a predicate to check if query has an edge billing_control with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasBillingControlWith(preds ...predicate.BillingControl) {
	f.Where(entql.HasEdgeWith("billing_control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDispatchControl applies a predicate to check if query has an edge dispatch_control.
func (f *OrganizationFilter) WhereHasDispatchControl() {
	f.Where(entql.HasEdge("dispatch_control"))
}

// WhereHasDispatchControlWith applies a predicate to check if query has an edge dispatch_control with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasDispatchControlWith(preds ...predicate.DispatchControl) {
	f.Where(entql.HasEdgeWith("dispatch_control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeasibilityToolControl applies a predicate to check if query has an edge feasibility_tool_control.
func (f *OrganizationFilter) WhereHasFeasibilityToolControl() {
	f.Where(entql.HasEdge("feasibility_tool_control"))
}

// WhereHasFeasibilityToolControlWith applies a predicate to check if query has an edge feasibility_tool_control with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasFeasibilityToolControlWith(preds ...predicate.FeasibilityToolControl) {
	f.Where(entql.HasEdgeWith("feasibility_tool_control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInvoiceControl applies a predicate to check if query has an edge invoice_control.
func (f *OrganizationFilter) WhereHasInvoiceControl() {
	f.Where(entql.HasEdge("invoice_control"))
}

// WhereHasInvoiceControlWith applies a predicate to check if query has an edge invoice_control with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasInvoiceControlWith(preds ...predicate.InvoiceControl) {
	f.Where(entql.HasEdgeWith("invoice_control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRouteControl applies a predicate to check if query has an edge route_control.
func (f *OrganizationFilter) WhereHasRouteControl() {
	f.Where(entql.HasEdge("route_control"))
}

// WhereHasRouteControlWith applies a predicate to check if query has an edge route_control with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasRouteControlWith(preds ...predicate.RouteControl) {
	f.Where(entql.HasEdgeWith("route_control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentControl applies a predicate to check if query has an edge shipment_control.
func (f *OrganizationFilter) WhereHasShipmentControl() {
	f.Where(entql.HasEdge("shipment_control"))
}

// WhereHasShipmentControlWith applies a predicate to check if query has an edge shipment_control with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasShipmentControlWith(preds ...predicate.ShipmentControl) {
	f.Where(entql.HasEdgeWith("shipment_control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailControl applies a predicate to check if query has an edge email_control.
func (f *OrganizationFilter) WhereHasEmailControl() {
	f.Where(entql.HasEdge("email_control"))
}

// WhereHasEmailControlWith applies a predicate to check if query has an edge email_control with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEmailControlWith(preds ...predicate.EmailControl) {
	f.Where(entql.HasEdgeWith("email_control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGoogleAPI applies a predicate to check if query has an edge google_api.
func (f *OrganizationFilter) WhereHasGoogleAPI() {
	f.Where(entql.HasEdge("google_api"))
}

// WhereHasGoogleAPIWith applies a predicate to check if query has an edge google_api with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasGoogleAPIWith(preds ...predicate.GoogleApi) {
	f.Where(entql.HasEdgeWith("google_api", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (offq *OrganizationFeatureFlagQuery) addPredicate(pred func(s *sql.Selector)) {
	offq.predicates = append(offq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationFeatureFlagQuery builder.
func (offq *OrganizationFeatureFlagQuery) Filter() *OrganizationFeatureFlagFilter {
	return &OrganizationFeatureFlagFilter{config: offq.config, predicateAdder: offq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationFeatureFlagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationFeatureFlagMutation builder.
func (m *OrganizationFeatureFlagMutation) Filter() *OrganizationFeatureFlagFilter {
	return &OrganizationFeatureFlagFilter{config: m.config, predicateAdder: m}
}

// OrganizationFeatureFlagFilter provides a generic filtering capability at runtime for OrganizationFeatureFlagQuery.
type OrganizationFeatureFlagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFeatureFlagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OrganizationFeatureFlagFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(organizationfeatureflag.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFeatureFlagFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationfeatureflag.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFeatureFlagFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationfeatureflag.FieldUpdatedAt))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *OrganizationFeatureFlagFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(organizationfeatureflag.FieldOrganizationID))
}

// WhereFeatureFlagID applies the entql [16]byte predicate on the feature_flag_id field.
func (f *OrganizationFeatureFlagFilter) WhereFeatureFlagID(p entql.ValueP) {
	f.Where(p.Field(organizationfeatureflag.FieldFeatureFlagID))
}

// WhereIsEnabled applies the entql bool predicate on the is_enabled field.
func (f *OrganizationFeatureFlagFilter) WhereIsEnabled(p entql.BoolP) {
	f.Where(p.Field(organizationfeatureflag.FieldIsEnabled))
}

// WhereHasFeatureFlag applies a predicate to check if query has an edge feature_flag.
func (f *OrganizationFeatureFlagFilter) WhereHasFeatureFlag() {
	f.Where(entql.HasEdge("feature_flag"))
}

// WhereHasFeatureFlagWith applies a predicate to check if query has an edge feature_flag with a given conditions (other predicates).
func (f *OrganizationFeatureFlagFilter) WhereHasFeatureFlagWith(preds ...predicate.FeatureFlag) {
	f.Where(entql.HasEdgeWith("feature_flag", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrganizationFeatureFlagFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrganizationFeatureFlagFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (qcq *QualifierCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	qcq.predicates = append(qcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the QualifierCodeQuery builder.
func (qcq *QualifierCodeQuery) Filter() *QualifierCodeFilter {
	return &QualifierCodeFilter{config: qcq.config, predicateAdder: qcq}
}

// addPredicate implements the predicateAdder interface.
func (m *QualifierCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the QualifierCodeMutation builder.
func (m *QualifierCodeMutation) Filter() *QualifierCodeFilter {
	return &QualifierCodeFilter{config: m.config, predicateAdder: m}
}

// QualifierCodeFilter provides a generic filtering capability at runtime for QualifierCodeQuery.
type QualifierCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *QualifierCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *QualifierCodeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(qualifiercode.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *QualifierCodeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(qualifiercode.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *QualifierCodeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(qualifiercode.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *QualifierCodeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(qualifiercode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *QualifierCodeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(qualifiercode.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *QualifierCodeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(qualifiercode.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *QualifierCodeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(qualifiercode.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *QualifierCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(qualifiercode.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *QualifierCodeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(qualifiercode.FieldDescription))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *QualifierCodeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *QualifierCodeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *QualifierCodeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *QualifierCodeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rcq *ReasonCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	rcq.predicates = append(rcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReasonCodeQuery builder.
func (rcq *ReasonCodeQuery) Filter() *ReasonCodeFilter {
	return &ReasonCodeFilter{config: rcq.config, predicateAdder: rcq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReasonCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReasonCodeMutation builder.
func (m *ReasonCodeMutation) Filter() *ReasonCodeFilter {
	return &ReasonCodeFilter{config: m.config, predicateAdder: m}
}

// ReasonCodeFilter provides a generic filtering capability at runtime for ReasonCodeQuery.
type ReasonCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReasonCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ReasonCodeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(reasoncode.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *ReasonCodeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(reasoncode.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *ReasonCodeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(reasoncode.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ReasonCodeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(reasoncode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ReasonCodeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(reasoncode.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *ReasonCodeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(reasoncode.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ReasonCodeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(reasoncode.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *ReasonCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(reasoncode.FieldCode))
}

// WhereCodeType applies the entql string predicate on the code_type field.
func (f *ReasonCodeFilter) WhereCodeType(p entql.StringP) {
	f.Where(p.Field(reasoncode.FieldCodeType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ReasonCodeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(reasoncode.FieldDescription))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *ReasonCodeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *ReasonCodeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *ReasonCodeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *ReasonCodeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rcq *RevenueCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	rcq.predicates = append(rcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RevenueCodeQuery builder.
func (rcq *RevenueCodeQuery) Filter() *RevenueCodeFilter {
	return &RevenueCodeFilter{config: rcq.config, predicateAdder: rcq}
}

// addPredicate implements the predicateAdder interface.
func (m *RevenueCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RevenueCodeMutation builder.
func (m *RevenueCodeMutation) Filter() *RevenueCodeFilter {
	return &RevenueCodeFilter{config: m.config, predicateAdder: m}
}

// RevenueCodeFilter provides a generic filtering capability at runtime for RevenueCodeQuery.
type RevenueCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RevenueCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RevenueCodeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(revenuecode.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *RevenueCodeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(revenuecode.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *RevenueCodeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(revenuecode.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RevenueCodeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(revenuecode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RevenueCodeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(revenuecode.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *RevenueCodeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(revenuecode.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *RevenueCodeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(revenuecode.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *RevenueCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(revenuecode.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *RevenueCodeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(revenuecode.FieldDescription))
}

// WhereExpenseAccountID applies the entql [16]byte predicate on the expense_account_id field.
func (f *RevenueCodeFilter) WhereExpenseAccountID(p entql.ValueP) {
	f.Where(p.Field(revenuecode.FieldExpenseAccountID))
}

// WhereRevenueAccountID applies the entql [16]byte predicate on the revenue_account_id field.
func (f *RevenueCodeFilter) WhereRevenueAccountID(p entql.ValueP) {
	f.Where(p.Field(revenuecode.FieldRevenueAccountID))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *RevenueCodeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *RevenueCodeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *RevenueCodeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *RevenueCodeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExpenseAccount applies a predicate to check if query has an edge expense_account.
func (f *RevenueCodeFilter) WhereHasExpenseAccount() {
	f.Where(entql.HasEdge("expense_account"))
}

// WhereHasExpenseAccountWith applies a predicate to check if query has an edge expense_account with a given conditions (other predicates).
func (f *RevenueCodeFilter) WhereHasExpenseAccountWith(preds ...predicate.GeneralLedgerAccount) {
	f.Where(entql.HasEdgeWith("expense_account", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRevenueAccount applies a predicate to check if query has an edge revenue_account.
func (f *RevenueCodeFilter) WhereHasRevenueAccount() {
	f.Where(entql.HasEdge("revenue_account"))
}

// WhereHasRevenueAccountWith applies a predicate to check if query has an edge revenue_account with a given conditions (other predicates).
func (f *RevenueCodeFilter) WhereHasRevenueAccountWith(preds ...predicate.GeneralLedgerAccount) {
	f.Where(entql.HasEdgeWith("revenue_account", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rcq *RouteControlQuery) addPredicate(pred func(s *sql.Selector)) {
	rcq.predicates = append(rcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RouteControlQuery builder.
func (rcq *RouteControlQuery) Filter() *RouteControlFilter {
	return &RouteControlFilter{config: rcq.config, predicateAdder: rcq}
}

// addPredicate implements the predicateAdder interface.
func (m *RouteControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RouteControlMutation builder.
func (m *RouteControlMutation) Filter() *RouteControlFilter {
	return &RouteControlFilter{config: m.config, predicateAdder: m}
}

// RouteControlFilter provides a generic filtering capability at runtime for RouteControlQuery.
type RouteControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RouteControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RouteControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(routecontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RouteControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(routecontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RouteControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(routecontrol.FieldUpdatedAt))
}

// WhereDistanceMethod applies the entql string predicate on the distance_method field.
func (f *RouteControlFilter) WhereDistanceMethod(p entql.StringP) {
	f.Where(p.Field(routecontrol.FieldDistanceMethod))
}

// WhereMileageUnit applies the entql string predicate on the mileage_unit field.
func (f *RouteControlFilter) WhereMileageUnit(p entql.StringP) {
	f.Where(p.Field(routecontrol.FieldMileageUnit))
}

// WhereGenerateRoutes applies the entql bool predicate on the generate_routes field.
func (f *RouteControlFilter) WhereGenerateRoutes(p entql.BoolP) {
	f.Where(p.Field(routecontrol.FieldGenerateRoutes))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *RouteControlFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *RouteControlFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *RouteControlFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *RouteControlFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (stq *ServiceTypeQuery) addPredicate(pred func(s *sql.Selector)) {
	stq.predicates = append(stq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ServiceTypeQuery builder.
func (stq *ServiceTypeQuery) Filter() *ServiceTypeFilter {
	return &ServiceTypeFilter{config: stq.config, predicateAdder: stq}
}

// addPredicate implements the predicateAdder interface.
func (m *ServiceTypeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ServiceTypeMutation builder.
func (m *ServiceTypeMutation) Filter() *ServiceTypeFilter {
	return &ServiceTypeFilter{config: m.config, predicateAdder: m}
}

// ServiceTypeFilter provides a generic filtering capability at runtime for ServiceTypeQuery.
type ServiceTypeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ServiceTypeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ServiceTypeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(servicetype.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *ServiceTypeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(servicetype.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *ServiceTypeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(servicetype.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ServiceTypeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(servicetype.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ServiceTypeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(servicetype.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *ServiceTypeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(servicetype.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ServiceTypeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(servicetype.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *ServiceTypeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(servicetype.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ServiceTypeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(servicetype.FieldDescription))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *ServiceTypeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *ServiceTypeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *ServiceTypeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *ServiceTypeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SessionQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SessionQuery builder.
func (sq *SessionQuery) Filter() *SessionFilter {
	return &SessionFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SessionMutation builder.
func (m *SessionMutation) Filter() *SessionFilter {
	return &SessionFilter{config: m.config, predicateAdder: m}
}

// SessionFilter provides a generic filtering capability at runtime for SessionQuery.
type SessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SessionFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(session.FieldID))
}

// WhereData applies the entql string predicate on the data field.
func (f *SessionFilter) WhereData(p entql.StringP) {
	f.Where(p.Field(session.FieldData))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SessionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SessionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldUpdatedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *SessionFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldExpiresAt))
}

// addPredicate implements the predicateAdder interface.
func (scq *ShipmentControlQuery) addPredicate(pred func(s *sql.Selector)) {
	scq.predicates = append(scq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentControlQuery builder.
func (scq *ShipmentControlQuery) Filter() *ShipmentControlFilter {
	return &ShipmentControlFilter{config: scq.config, predicateAdder: scq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentControlMutation builder.
func (m *ShipmentControlMutation) Filter() *ShipmentControlFilter {
	return &ShipmentControlFilter{config: m.config, predicateAdder: m}
}

// ShipmentControlFilter provides a generic filtering capability at runtime for ShipmentControlQuery.
type ShipmentControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[36].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ShipmentControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(shipmentcontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ShipmentControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(shipmentcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ShipmentControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(shipmentcontrol.FieldUpdatedAt))
}

// WhereAutoRateShipment applies the entql bool predicate on the auto_rate_shipment field.
func (f *ShipmentControlFilter) WhereAutoRateShipment(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldAutoRateShipment))
}

// WhereCalculateDistance applies the entql bool predicate on the calculate_distance field.
func (f *ShipmentControlFilter) WhereCalculateDistance(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldCalculateDistance))
}

// WhereEnforceRevCode applies the entql bool predicate on the enforce_rev_code field.
func (f *ShipmentControlFilter) WhereEnforceRevCode(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldEnforceRevCode))
}

// WhereEnforceVoidedComm applies the entql bool predicate on the enforce_voided_comm field.
func (f *ShipmentControlFilter) WhereEnforceVoidedComm(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldEnforceVoidedComm))
}

// WhereGenerateRoutes applies the entql bool predicate on the generate_routes field.
func (f *ShipmentControlFilter) WhereGenerateRoutes(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldGenerateRoutes))
}

// WhereEnforceCommodity applies the entql bool predicate on the enforce_commodity field.
func (f *ShipmentControlFilter) WhereEnforceCommodity(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldEnforceCommodity))
}

// WhereAutoSequenceStops applies the entql bool predicate on the auto_sequence_stops field.
func (f *ShipmentControlFilter) WhereAutoSequenceStops(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldAutoSequenceStops))
}

// WhereAutoShipmentTotal applies the entql bool predicate on the auto_shipment_total field.
func (f *ShipmentControlFilter) WhereAutoShipmentTotal(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldAutoShipmentTotal))
}

// WhereEnforceOriginDestination applies the entql bool predicate on the enforce_origin_destination field.
func (f *ShipmentControlFilter) WhereEnforceOriginDestination(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldEnforceOriginDestination))
}

// WhereCheckForDuplicateBol applies the entql bool predicate on the check_for_duplicate_bol field.
func (f *ShipmentControlFilter) WhereCheckForDuplicateBol(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldCheckForDuplicateBol))
}

// WhereSendPlacardInfo applies the entql bool predicate on the send_placard_info field.
func (f *ShipmentControlFilter) WhereSendPlacardInfo(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldSendPlacardInfo))
}

// WhereEnforceHazmatSegRules applies the entql bool predicate on the enforce_hazmat_seg_rules field.
func (f *ShipmentControlFilter) WhereEnforceHazmatSegRules(p entql.BoolP) {
	f.Where(p.Field(shipmentcontrol.FieldEnforceHazmatSegRules))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *ShipmentControlFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *ShipmentControlFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *ShipmentControlFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *ShipmentControlFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (stq *ShipmentTypeQuery) addPredicate(pred func(s *sql.Selector)) {
	stq.predicates = append(stq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentTypeQuery builder.
func (stq *ShipmentTypeQuery) Filter() *ShipmentTypeFilter {
	return &ShipmentTypeFilter{config: stq.config, predicateAdder: stq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentTypeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentTypeMutation builder.
func (m *ShipmentTypeMutation) Filter() *ShipmentTypeFilter {
	return &ShipmentTypeFilter{config: m.config, predicateAdder: m}
}

// ShipmentTypeFilter provides a generic filtering capability at runtime for ShipmentTypeQuery.
type ShipmentTypeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentTypeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[37].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ShipmentTypeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(shipmenttype.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *ShipmentTypeFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(shipmenttype.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *ShipmentTypeFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(shipmenttype.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ShipmentTypeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(shipmenttype.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ShipmentTypeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(shipmenttype.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *ShipmentTypeFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(shipmenttype.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ShipmentTypeFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(shipmenttype.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *ShipmentTypeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(shipmenttype.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ShipmentTypeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(shipmenttype.FieldDescription))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *ShipmentTypeFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *ShipmentTypeFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *ShipmentTypeFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *ShipmentTypeFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tcaq *TableChangeAlertQuery) addPredicate(pred func(s *sql.Selector)) {
	tcaq.predicates = append(tcaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TableChangeAlertQuery builder.
func (tcaq *TableChangeAlertQuery) Filter() *TableChangeAlertFilter {
	return &TableChangeAlertFilter{config: tcaq.config, predicateAdder: tcaq}
}

// addPredicate implements the predicateAdder interface.
func (m *TableChangeAlertMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TableChangeAlertMutation builder.
func (m *TableChangeAlertMutation) Filter() *TableChangeAlertFilter {
	return &TableChangeAlertFilter{config: m.config, predicateAdder: m}
}

// TableChangeAlertFilter provides a generic filtering capability at runtime for TableChangeAlertQuery.
type TableChangeAlertFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TableChangeAlertFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[38].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TableChangeAlertFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(tablechangealert.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *TableChangeAlertFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(tablechangealert.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *TableChangeAlertFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(tablechangealert.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TableChangeAlertFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tablechangealert.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TableChangeAlertFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tablechangealert.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *TableChangeAlertFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(tablechangealert.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *TableChangeAlertFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldStatus))
}

// WhereName applies the entql string predicate on the name field.
func (f *TableChangeAlertFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldName))
}

// WhereDatabaseAction applies the entql string predicate on the database_action field.
func (f *TableChangeAlertFilter) WhereDatabaseAction(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldDatabaseAction))
}

// WhereSource applies the entql string predicate on the source field.
func (f *TableChangeAlertFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldSource))
}

// WhereTableName applies the entql string predicate on the table_name field.
func (f *TableChangeAlertFilter) WhereTableName(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldTableName))
}

// WhereTopicName applies the entql string predicate on the topic_name field.
func (f *TableChangeAlertFilter) WhereTopicName(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldTopicName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *TableChangeAlertFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldDescription))
}

// WhereCustomSubject applies the entql string predicate on the custom_subject field.
func (f *TableChangeAlertFilter) WhereCustomSubject(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldCustomSubject))
}

// WhereFunctionName applies the entql string predicate on the function_name field.
func (f *TableChangeAlertFilter) WhereFunctionName(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldFunctionName))
}

// WhereTriggerName applies the entql string predicate on the trigger_name field.
func (f *TableChangeAlertFilter) WhereTriggerName(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldTriggerName))
}

// WhereListenerName applies the entql string predicate on the listener_name field.
func (f *TableChangeAlertFilter) WhereListenerName(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldListenerName))
}

// WhereEmailRecipients applies the entql string predicate on the email_recipients field.
func (f *TableChangeAlertFilter) WhereEmailRecipients(p entql.StringP) {
	f.Where(p.Field(tablechangealert.FieldEmailRecipients))
}

// WhereEffectiveDate applies the entql other predicate on the effective_date field.
func (f *TableChangeAlertFilter) WhereEffectiveDate(p entql.OtherP) {
	f.Where(p.Field(tablechangealert.FieldEffectiveDate))
}

// WhereExpirationDate applies the entql other predicate on the expiration_date field.
func (f *TableChangeAlertFilter) WhereExpirationDate(p entql.OtherP) {
	f.Where(p.Field(tablechangealert.FieldExpirationDate))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *TableChangeAlertFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *TableChangeAlertFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *TableChangeAlertFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *TableChangeAlertFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TagQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TagQuery builder.
func (tq *TagQuery) Filter() *TagFilter {
	return &TagFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TagMutation builder.
func (m *TagMutation) Filter() *TagFilter {
	return &TagFilter{config: m.config, predicateAdder: m}
}

// TagFilter provides a generic filtering capability at runtime for TagQuery.
type TagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[39].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TagFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(tag.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *TagFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(tag.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *TagFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(tag.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TagFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tag.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TagFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tag.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *TagFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(tag.FieldVersion))
}

// WhereName applies the entql string predicate on the name field.
func (f *TagFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tag.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *TagFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(tag.FieldDescription))
}

// WhereColor applies the entql string predicate on the color field.
func (f *TagFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(tag.FieldColor))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *TagFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *TagFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *TagFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *TagFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGeneralLedgerAccount applies a predicate to check if query has an edge general_ledger_account.
func (f *TagFilter) WhereHasGeneralLedgerAccount() {
	f.Where(entql.HasEdge("general_ledger_account"))
}

// WhereHasGeneralLedgerAccountWith applies a predicate to check if query has an edge general_ledger_account with a given conditions (other predicates).
func (f *TagFilter) WhereHasGeneralLedgerAccountWith(preds ...predicate.GeneralLedgerAccount) {
	f.Where(entql.HasEdgeWith("general_ledger_account", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TractorQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TractorQuery builder.
func (tq *TractorQuery) Filter() *TractorFilter {
	return &TractorFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TractorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TractorMutation builder.
func (m *TractorMutation) Filter() *TractorFilter {
	return &TractorFilter{config: m.config, predicateAdder: m}
}

// TractorFilter provides a generic filtering capability at runtime for TractorQuery.
type TractorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TractorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[40].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TractorFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(tractor.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *TractorFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(tractor.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *TractorFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(tractor.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TractorFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tractor.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TractorFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tractor.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *TractorFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(tractor.FieldVersion))
}

// WhereCode applies the entql string predicate on the code field.
func (f *TractorFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(tractor.FieldCode))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *TractorFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(tractor.FieldStatus))
}

// WhereEquipmentTypeID applies the entql [16]byte predicate on the equipment_type_id field.
func (f *TractorFilter) WhereEquipmentTypeID(p entql.ValueP) {
	f.Where(p.Field(tractor.FieldEquipmentTypeID))
}

// WhereLicensePlateNumber applies the entql string predicate on the license_plate_number field.
func (f *TractorFilter) WhereLicensePlateNumber(p entql.StringP) {
	f.Where(p.Field(tractor.FieldLicensePlateNumber))
}

// WhereVin applies the entql string predicate on the vin field.
func (f *TractorFilter) WhereVin(p entql.StringP) {
	f.Where(p.Field(tractor.FieldVin))
}

// WhereEquipmentManufacturerID applies the entql [16]byte predicate on the equipment_manufacturer_id field.
func (f *TractorFilter) WhereEquipmentManufacturerID(p entql.ValueP) {
	f.Where(p.Field(tractor.FieldEquipmentManufacturerID))
}

// WhereModel applies the entql string predicate on the model field.
func (f *TractorFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(tractor.FieldModel))
}

// WhereYear applies the entql int16 predicate on the year field.
func (f *TractorFilter) WhereYear(p entql.Int16P) {
	f.Where(p.Field(tractor.FieldYear))
}

// WhereStateID applies the entql [16]byte predicate on the state_id field.
func (f *TractorFilter) WhereStateID(p entql.ValueP) {
	f.Where(p.Field(tractor.FieldStateID))
}

// WhereLeased applies the entql bool predicate on the leased field.
func (f *TractorFilter) WhereLeased(p entql.BoolP) {
	f.Where(p.Field(tractor.FieldLeased))
}

// WhereLeasedDate applies the entql other predicate on the leased_date field.
func (f *TractorFilter) WhereLeasedDate(p entql.OtherP) {
	f.Where(p.Field(tractor.FieldLeasedDate))
}

// WherePrimaryWorkerID applies the entql [16]byte predicate on the primary_worker_id field.
func (f *TractorFilter) WherePrimaryWorkerID(p entql.ValueP) {
	f.Where(p.Field(tractor.FieldPrimaryWorkerID))
}

// WhereSecondaryWorkerID applies the entql [16]byte predicate on the secondary_worker_id field.
func (f *TractorFilter) WhereSecondaryWorkerID(p entql.ValueP) {
	f.Where(p.Field(tractor.FieldSecondaryWorkerID))
}

// WhereFleetCodeID applies the entql [16]byte predicate on the fleet_code_id field.
func (f *TractorFilter) WhereFleetCodeID(p entql.ValueP) {
	f.Where(p.Field(tractor.FieldFleetCodeID))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *TractorFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *TractorFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *TractorFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *TractorFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEquipmentType applies a predicate to check if query has an edge equipment_type.
func (f *TractorFilter) WhereHasEquipmentType() {
	f.Where(entql.HasEdge("equipment_type"))
}

// WhereHasEquipmentTypeWith applies a predicate to check if query has an edge equipment_type with a given conditions (other predicates).
func (f *TractorFilter) WhereHasEquipmentTypeWith(preds ...predicate.EquipmentType) {
	f.Where(entql.HasEdgeWith("equipment_type", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEquipmentManufacturer applies a predicate to check if query has an edge equipment_manufacturer.
func (f *TractorFilter) WhereHasEquipmentManufacturer() {
	f.Where(entql.HasEdge("equipment_manufacturer"))
}

// WhereHasEquipmentManufacturerWith applies a predicate to check if query has an edge equipment_manufacturer with a given conditions (other predicates).
func (f *TractorFilter) WhereHasEquipmentManufacturerWith(preds ...predicate.EquipmentManufactuer) {
	f.Where(entql.HasEdgeWith("equipment_manufacturer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasState applies a predicate to check if query has an edge state.
func (f *TractorFilter) WhereHasState() {
	f.Where(entql.HasEdge("state"))
}

// WhereHasStateWith applies a predicate to check if query has an edge state with a given conditions (other predicates).
func (f *TractorFilter) WhereHasStateWith(preds ...predicate.UsState) {
	f.Where(entql.HasEdgeWith("state", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrimaryWorker applies a predicate to check if query has an edge primary_worker.
func (f *TractorFilter) WhereHasPrimaryWorker() {
	f.Where(entql.HasEdge("primary_worker"))
}

// WhereHasPrimaryWorkerWith applies a predicate to check if query has an edge primary_worker with a given conditions (other predicates).
func (f *TractorFilter) WhereHasPrimaryWorkerWith(preds ...predicate.Worker) {
	f.Where(entql.HasEdgeWith("primary_worker", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSecondaryWorker applies a predicate to check if query has an edge secondary_worker.
func (f *TractorFilter) WhereHasSecondaryWorker() {
	f.Where(entql.HasEdge("secondary_worker"))
}

// WhereHasSecondaryWorkerWith applies a predicate to check if query has an edge secondary_worker with a given conditions (other predicates).
func (f *TractorFilter) WhereHasSecondaryWorkerWith(preds ...predicate.Worker) {
	f.Where(entql.HasEdgeWith("secondary_worker", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFleetCode applies a predicate to check if query has an edge fleet_code.
func (f *TractorFilter) WhereHasFleetCode() {
	f.Where(entql.HasEdge("fleet_code"))
}

// WhereHasFleetCodeWith applies a predicate to check if query has an edge fleet_code with a given conditions (other predicates).
func (f *TractorFilter) WhereHasFleetCodeWith(preds ...predicate.FleetCode) {
	f.Where(entql.HasEdgeWith("fleet_code", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TrailerQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrailerQuery builder.
func (tq *TrailerQuery) Filter() *TrailerFilter {
	return &TrailerFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TrailerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrailerMutation builder.
func (m *TrailerMutation) Filter() *TrailerFilter {
	return &TrailerFilter{config: m.config, predicateAdder: m}
}

// TrailerFilter provides a generic filtering capability at runtime for TrailerQuery.
type TrailerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrailerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[41].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TrailerFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(trailer.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *TrailerFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(trailer.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *TrailerFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(trailer.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrailerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trailer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrailerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trailer.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *TrailerFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(trailer.FieldVersion))
}

// WhereCode applies the entql string predicate on the code field.
func (f *TrailerFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(trailer.FieldCode))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *TrailerFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(trailer.FieldStatus))
}

// WhereEquipmentTypeID applies the entql [16]byte predicate on the equipment_type_id field.
func (f *TrailerFilter) WhereEquipmentTypeID(p entql.ValueP) {
	f.Where(p.Field(trailer.FieldEquipmentTypeID))
}

// WhereVin applies the entql string predicate on the vin field.
func (f *TrailerFilter) WhereVin(p entql.StringP) {
	f.Where(p.Field(trailer.FieldVin))
}

// WhereEquipmentManufacturerID applies the entql [16]byte predicate on the equipment_manufacturer_id field.
func (f *TrailerFilter) WhereEquipmentManufacturerID(p entql.ValueP) {
	f.Where(p.Field(trailer.FieldEquipmentManufacturerID))
}

// WhereModel applies the entql string predicate on the model field.
func (f *TrailerFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(trailer.FieldModel))
}

// WhereYear applies the entql int16 predicate on the year field.
func (f *TrailerFilter) WhereYear(p entql.Int16P) {
	f.Where(p.Field(trailer.FieldYear))
}

// WhereLicensePlateNumber applies the entql string predicate on the license_plate_number field.
func (f *TrailerFilter) WhereLicensePlateNumber(p entql.StringP) {
	f.Where(p.Field(trailer.FieldLicensePlateNumber))
}

// WhereStateID applies the entql [16]byte predicate on the state_id field.
func (f *TrailerFilter) WhereStateID(p entql.ValueP) {
	f.Where(p.Field(trailer.FieldStateID))
}

// WhereFleetCodeID applies the entql [16]byte predicate on the fleet_code_id field.
func (f *TrailerFilter) WhereFleetCodeID(p entql.ValueP) {
	f.Where(p.Field(trailer.FieldFleetCodeID))
}

// WhereLastInspectionDate applies the entql other predicate on the last_inspection_date field.
func (f *TrailerFilter) WhereLastInspectionDate(p entql.OtherP) {
	f.Where(p.Field(trailer.FieldLastInspectionDate))
}

// WhereRegistrationNumber applies the entql string predicate on the registration_number field.
func (f *TrailerFilter) WhereRegistrationNumber(p entql.StringP) {
	f.Where(p.Field(trailer.FieldRegistrationNumber))
}

// WhereRegistrationStateID applies the entql [16]byte predicate on the registration_state_id field.
func (f *TrailerFilter) WhereRegistrationStateID(p entql.ValueP) {
	f.Where(p.Field(trailer.FieldRegistrationStateID))
}

// WhereRegistrationExpirationDate applies the entql other predicate on the registration_expiration_date field.
func (f *TrailerFilter) WhereRegistrationExpirationDate(p entql.OtherP) {
	f.Where(p.Field(trailer.FieldRegistrationExpirationDate))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *TrailerFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *TrailerFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *TrailerFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *TrailerFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEquipmentType applies a predicate to check if query has an edge equipment_type.
func (f *TrailerFilter) WhereHasEquipmentType() {
	f.Where(entql.HasEdge("equipment_type"))
}

// WhereHasEquipmentTypeWith applies a predicate to check if query has an edge equipment_type with a given conditions (other predicates).
func (f *TrailerFilter) WhereHasEquipmentTypeWith(preds ...predicate.EquipmentType) {
	f.Where(entql.HasEdgeWith("equipment_type", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEquipmentManufacturer applies a predicate to check if query has an edge equipment_manufacturer.
func (f *TrailerFilter) WhereHasEquipmentManufacturer() {
	f.Where(entql.HasEdge("equipment_manufacturer"))
}

// WhereHasEquipmentManufacturerWith applies a predicate to check if query has an edge equipment_manufacturer with a given conditions (other predicates).
func (f *TrailerFilter) WhereHasEquipmentManufacturerWith(preds ...predicate.EquipmentManufactuer) {
	f.Where(entql.HasEdgeWith("equipment_manufacturer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasState applies a predicate to check if query has an edge state.
func (f *TrailerFilter) WhereHasState() {
	f.Where(entql.HasEdge("state"))
}

// WhereHasStateWith applies a predicate to check if query has an edge state with a given conditions (other predicates).
func (f *TrailerFilter) WhereHasStateWith(preds ...predicate.UsState) {
	f.Where(entql.HasEdgeWith("state", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRegistrationState applies a predicate to check if query has an edge registration_state.
func (f *TrailerFilter) WhereHasRegistrationState() {
	f.Where(entql.HasEdge("registration_state"))
}

// WhereHasRegistrationStateWith applies a predicate to check if query has an edge registration_state with a given conditions (other predicates).
func (f *TrailerFilter) WhereHasRegistrationStateWith(preds ...predicate.UsState) {
	f.Where(entql.HasEdgeWith("registration_state", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFleetCode applies a predicate to check if query has an edge fleet_code.
func (f *TrailerFilter) WhereHasFleetCode() {
	f.Where(entql.HasEdge("fleet_code"))
}

// WhereHasFleetCodeWith applies a predicate to check if query has an edge fleet_code with a given conditions (other predicates).
func (f *TrailerFilter) WhereHasFleetCodeWith(preds ...predicate.FleetCode) {
	f.Where(entql.HasEdgeWith("fleet_code", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (usq *UsStateQuery) addPredicate(pred func(s *sql.Selector)) {
	usq.predicates = append(usq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UsStateQuery builder.
func (usq *UsStateQuery) Filter() *UsStateFilter {
	return &UsStateFilter{config: usq.config, predicateAdder: usq}
}

// addPredicate implements the predicateAdder interface.
func (m *UsStateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UsStateMutation builder.
func (m *UsStateMutation) Filter() *UsStateFilter {
	return &UsStateFilter{config: m.config, predicateAdder: m}
}

// UsStateFilter provides a generic filtering capability at runtime for UsStateQuery.
type UsStateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UsStateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[42].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UsStateFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(usstate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UsStateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usstate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UsStateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(usstate.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *UsStateFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(usstate.FieldName))
}

// WhereAbbreviation applies the entql string predicate on the abbreviation field.
func (f *UsStateFilter) WhereAbbreviation(p entql.StringP) {
	f.Where(p.Field(usstate.FieldAbbreviation))
}

// WhereCountryName applies the entql string predicate on the country_name field.
func (f *UsStateFilter) WhereCountryName(p entql.StringP) {
	f.Where(p.Field(usstate.FieldCountryName))
}

// WhereCountryIso3 applies the entql string predicate on the country_iso3 field.
func (f *UsStateFilter) WhereCountryIso3(p entql.StringP) {
	f.Where(p.Field(usstate.FieldCountryIso3))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[43].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(user.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *UserFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(user.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *UserFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(user.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *UserFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(user.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(user.FieldStatus))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *UserFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(user.FieldTimezone))
}

// WhereProfilePicURL applies the entql string predicate on the profile_pic_url field.
func (f *UserFilter) WhereProfilePicURL(p entql.StringP) {
	f.Where(p.Field(user.FieldProfilePicURL))
}

// WhereThumbnailURL applies the entql string predicate on the thumbnail_url field.
func (f *UserFilter) WhereThumbnailURL(p entql.StringP) {
	f.Where(p.Field(user.FieldThumbnailURL))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(user.FieldPhoneNumber))
}

// WhereIsAdmin applies the entql bool predicate on the is_admin field.
func (f *UserFilter) WhereIsAdmin(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsAdmin))
}

// WhereIsSuperAdmin applies the entql bool predicate on the is_super_admin field.
func (f *UserFilter) WhereIsSuperAdmin(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsSuperAdmin))
}

// WhereLastLogin applies the entql time.Time predicate on the last_login field.
func (f *UserFilter) WhereLastLogin(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastLogin))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *UserFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *UserFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *UserFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserFavorites applies a predicate to check if query has an edge user_favorites.
func (f *UserFilter) WhereHasUserFavorites() {
	f.Where(entql.HasEdge("user_favorites"))
}

// WhereHasUserFavoritesWith applies a predicate to check if query has an edge user_favorites with a given conditions (other predicates).
func (f *UserFilter) WhereHasUserFavoritesWith(preds ...predicate.UserFavorite) {
	f.Where(entql.HasEdgeWith("user_favorites", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ufq *UserFavoriteQuery) addPredicate(pred func(s *sql.Selector)) {
	ufq.predicates = append(ufq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserFavoriteQuery builder.
func (ufq *UserFavoriteQuery) Filter() *UserFavoriteFilter {
	return &UserFavoriteFilter{config: ufq.config, predicateAdder: ufq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserFavoriteMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserFavoriteMutation builder.
func (m *UserFavoriteMutation) Filter() *UserFavoriteFilter {
	return &UserFavoriteFilter{config: m.config, predicateAdder: m}
}

// UserFavoriteFilter provides a generic filtering capability at runtime for UserFavoriteQuery.
type UserFavoriteFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFavoriteFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[44].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserFavoriteFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(userfavorite.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *UserFavoriteFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(userfavorite.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *UserFavoriteFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(userfavorite.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFavoriteFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userfavorite.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFavoriteFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userfavorite.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *UserFavoriteFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(userfavorite.FieldVersion))
}

// WherePageLink applies the entql string predicate on the page_link field.
func (f *UserFavoriteFilter) WherePageLink(p entql.StringP) {
	f.Where(p.Field(userfavorite.FieldPageLink))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *UserFavoriteFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(userfavorite.FieldUserID))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *UserFavoriteFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *UserFavoriteFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *UserFavoriteFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *UserFavoriteFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserFavoriteFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserFavoriteFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wq *WorkerQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WorkerQuery builder.
func (wq *WorkerQuery) Filter() *WorkerFilter {
	return &WorkerFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WorkerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WorkerMutation builder.
func (m *WorkerMutation) Filter() *WorkerFilter {
	return &WorkerFilter{config: m.config, predicateAdder: m}
}

// WorkerFilter provides a generic filtering capability at runtime for WorkerQuery.
type WorkerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WorkerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[45].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *WorkerFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(worker.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *WorkerFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(worker.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *WorkerFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(worker.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WorkerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(worker.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WorkerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(worker.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *WorkerFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(worker.FieldVersion))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *WorkerFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(worker.FieldStatus))
}

// WhereCode applies the entql string predicate on the code field.
func (f *WorkerFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(worker.FieldCode))
}

// WhereProfilePictureURL applies the entql string predicate on the profile_picture_url field.
func (f *WorkerFilter) WhereProfilePictureURL(p entql.StringP) {
	f.Where(p.Field(worker.FieldProfilePictureURL))
}

// WhereWorkerType applies the entql string predicate on the worker_type field.
func (f *WorkerFilter) WhereWorkerType(p entql.StringP) {
	f.Where(p.Field(worker.FieldWorkerType))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *WorkerFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(worker.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *WorkerFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(worker.FieldLastName))
}

// WhereAddressLine1 applies the entql string predicate on the address_line_1 field.
func (f *WorkerFilter) WhereAddressLine1(p entql.StringP) {
	f.Where(p.Field(worker.FieldAddressLine1))
}

// WhereAddressLine2 applies the entql string predicate on the address_line_2 field.
func (f *WorkerFilter) WhereAddressLine2(p entql.StringP) {
	f.Where(p.Field(worker.FieldAddressLine2))
}

// WhereCity applies the entql string predicate on the city field.
func (f *WorkerFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(worker.FieldCity))
}

// WherePostalCode applies the entql string predicate on the postal_code field.
func (f *WorkerFilter) WherePostalCode(p entql.StringP) {
	f.Where(p.Field(worker.FieldPostalCode))
}

// WhereStateID applies the entql [16]byte predicate on the state_id field.
func (f *WorkerFilter) WhereStateID(p entql.ValueP) {
	f.Where(p.Field(worker.FieldStateID))
}

// WhereFleetCodeID applies the entql [16]byte predicate on the fleet_code_id field.
func (f *WorkerFilter) WhereFleetCodeID(p entql.ValueP) {
	f.Where(p.Field(worker.FieldFleetCodeID))
}

// WhereManagerID applies the entql [16]byte predicate on the manager_id field.
func (f *WorkerFilter) WhereManagerID(p entql.ValueP) {
	f.Where(p.Field(worker.FieldManagerID))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *WorkerFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *WorkerFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasState applies a predicate to check if query has an edge state.
func (f *WorkerFilter) WhereHasState() {
	f.Where(entql.HasEdge("state"))
}

// WhereHasStateWith applies a predicate to check if query has an edge state with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasStateWith(preds ...predicate.UsState) {
	f.Where(entql.HasEdgeWith("state", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFleetCode applies a predicate to check if query has an edge fleet_code.
func (f *WorkerFilter) WhereHasFleetCode() {
	f.Where(entql.HasEdge("fleet_code"))
}

// WhereHasFleetCodeWith applies a predicate to check if query has an edge fleet_code with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasFleetCodeWith(preds ...predicate.FleetCode) {
	f.Where(entql.HasEdgeWith("fleet_code", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *WorkerFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasManagerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrimaryTractor applies a predicate to check if query has an edge primary_tractor.
func (f *WorkerFilter) WhereHasPrimaryTractor() {
	f.Where(entql.HasEdge("primary_tractor"))
}

// WhereHasPrimaryTractorWith applies a predicate to check if query has an edge primary_tractor with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasPrimaryTractorWith(preds ...predicate.Tractor) {
	f.Where(entql.HasEdgeWith("primary_tractor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSecondaryTractor applies a predicate to check if query has an edge secondary_tractor.
func (f *WorkerFilter) WhereHasSecondaryTractor() {
	f.Where(entql.HasEdge("secondary_tractor"))
}

// WhereHasSecondaryTractorWith applies a predicate to check if query has an edge secondary_tractor with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasSecondaryTractorWith(preds ...predicate.Tractor) {
	f.Where(entql.HasEdgeWith("secondary_tractor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorkerProfile applies a predicate to check if query has an edge worker_profile.
func (f *WorkerFilter) WhereHasWorkerProfile() {
	f.Where(entql.HasEdge("worker_profile"))
}

// WhereHasWorkerProfileWith applies a predicate to check if query has an edge worker_profile with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasWorkerProfileWith(preds ...predicate.WorkerProfile) {
	f.Where(entql.HasEdgeWith("worker_profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorkerComments applies a predicate to check if query has an edge worker_comments.
func (f *WorkerFilter) WhereHasWorkerComments() {
	f.Where(entql.HasEdge("worker_comments"))
}

// WhereHasWorkerCommentsWith applies a predicate to check if query has an edge worker_comments with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasWorkerCommentsWith(preds ...predicate.WorkerComment) {
	f.Where(entql.HasEdgeWith("worker_comments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorkerContacts applies a predicate to check if query has an edge worker_contacts.
func (f *WorkerFilter) WhereHasWorkerContacts() {
	f.Where(entql.HasEdge("worker_contacts"))
}

// WhereHasWorkerContactsWith applies a predicate to check if query has an edge worker_contacts with a given conditions (other predicates).
func (f *WorkerFilter) WhereHasWorkerContactsWith(preds ...predicate.WorkerContact) {
	f.Where(entql.HasEdgeWith("worker_contacts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wcq *WorkerCommentQuery) addPredicate(pred func(s *sql.Selector)) {
	wcq.predicates = append(wcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WorkerCommentQuery builder.
func (wcq *WorkerCommentQuery) Filter() *WorkerCommentFilter {
	return &WorkerCommentFilter{config: wcq.config, predicateAdder: wcq}
}

// addPredicate implements the predicateAdder interface.
func (m *WorkerCommentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WorkerCommentMutation builder.
func (m *WorkerCommentMutation) Filter() *WorkerCommentFilter {
	return &WorkerCommentFilter{config: m.config, predicateAdder: m}
}

// WorkerCommentFilter provides a generic filtering capability at runtime for WorkerCommentQuery.
type WorkerCommentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WorkerCommentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[46].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *WorkerCommentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(workercomment.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *WorkerCommentFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(workercomment.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *WorkerCommentFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(workercomment.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WorkerCommentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(workercomment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WorkerCommentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(workercomment.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *WorkerCommentFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(workercomment.FieldVersion))
}

// WhereWorkerID applies the entql [16]byte predicate on the worker_id field.
func (f *WorkerCommentFilter) WhereWorkerID(p entql.ValueP) {
	f.Where(p.Field(workercomment.FieldWorkerID))
}

// WhereCommentTypeID applies the entql [16]byte predicate on the comment_type_id field.
func (f *WorkerCommentFilter) WhereCommentTypeID(p entql.ValueP) {
	f.Where(p.Field(workercomment.FieldCommentTypeID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *WorkerCommentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(workercomment.FieldUserID))
}

// WhereComment applies the entql string predicate on the comment field.
func (f *WorkerCommentFilter) WhereComment(p entql.StringP) {
	f.Where(p.Field(workercomment.FieldComment))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *WorkerCommentFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *WorkerCommentFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *WorkerCommentFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *WorkerCommentFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorker applies a predicate to check if query has an edge worker.
func (f *WorkerCommentFilter) WhereHasWorker() {
	f.Where(entql.HasEdge("worker"))
}

// WhereHasWorkerWith applies a predicate to check if query has an edge worker with a given conditions (other predicates).
func (f *WorkerCommentFilter) WhereHasWorkerWith(preds ...predicate.Worker) {
	f.Where(entql.HasEdgeWith("worker", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCommentType applies a predicate to check if query has an edge comment_type.
func (f *WorkerCommentFilter) WhereHasCommentType() {
	f.Where(entql.HasEdge("comment_type"))
}

// WhereHasCommentTypeWith applies a predicate to check if query has an edge comment_type with a given conditions (other predicates).
func (f *WorkerCommentFilter) WhereHasCommentTypeWith(preds ...predicate.CommentType) {
	f.Where(entql.HasEdgeWith("comment_type", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *WorkerCommentFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *WorkerCommentFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wcq *WorkerContactQuery) addPredicate(pred func(s *sql.Selector)) {
	wcq.predicates = append(wcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WorkerContactQuery builder.
func (wcq *WorkerContactQuery) Filter() *WorkerContactFilter {
	return &WorkerContactFilter{config: wcq.config, predicateAdder: wcq}
}

// addPredicate implements the predicateAdder interface.
func (m *WorkerContactMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WorkerContactMutation builder.
func (m *WorkerContactMutation) Filter() *WorkerContactFilter {
	return &WorkerContactFilter{config: m.config, predicateAdder: m}
}

// WorkerContactFilter provides a generic filtering capability at runtime for WorkerContactQuery.
type WorkerContactFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WorkerContactFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[47].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *WorkerContactFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(workercontact.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *WorkerContactFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(workercontact.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *WorkerContactFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(workercontact.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WorkerContactFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(workercontact.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WorkerContactFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(workercontact.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *WorkerContactFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(workercontact.FieldVersion))
}

// WhereWorkerID applies the entql [16]byte predicate on the worker_id field.
func (f *WorkerContactFilter) WhereWorkerID(p entql.ValueP) {
	f.Where(p.Field(workercontact.FieldWorkerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *WorkerContactFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(workercontact.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *WorkerContactFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(workercontact.FieldEmail))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *WorkerContactFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(workercontact.FieldPhone))
}

// WhereRelationship applies the entql string predicate on the relationship field.
func (f *WorkerContactFilter) WhereRelationship(p entql.StringP) {
	f.Where(p.Field(workercontact.FieldRelationship))
}

// WhereIsPrimary applies the entql bool predicate on the is_primary field.
func (f *WorkerContactFilter) WhereIsPrimary(p entql.BoolP) {
	f.Where(p.Field(workercontact.FieldIsPrimary))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *WorkerContactFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *WorkerContactFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *WorkerContactFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *WorkerContactFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorker applies a predicate to check if query has an edge worker.
func (f *WorkerContactFilter) WhereHasWorker() {
	f.Where(entql.HasEdge("worker"))
}

// WhereHasWorkerWith applies a predicate to check if query has an edge worker with a given conditions (other predicates).
func (f *WorkerContactFilter) WhereHasWorkerWith(preds ...predicate.Worker) {
	f.Where(entql.HasEdgeWith("worker", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wpq *WorkerProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	wpq.predicates = append(wpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WorkerProfileQuery builder.
func (wpq *WorkerProfileQuery) Filter() *WorkerProfileFilter {
	return &WorkerProfileFilter{config: wpq.config, predicateAdder: wpq}
}

// addPredicate implements the predicateAdder interface.
func (m *WorkerProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WorkerProfileMutation builder.
func (m *WorkerProfileMutation) Filter() *WorkerProfileFilter {
	return &WorkerProfileFilter{config: m.config, predicateAdder: m}
}

// WorkerProfileFilter provides a generic filtering capability at runtime for WorkerProfileQuery.
type WorkerProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WorkerProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[48].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *WorkerProfileFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(workerprofile.FieldID))
}

// WhereBusinessUnitID applies the entql [16]byte predicate on the business_unit_id field.
func (f *WorkerProfileFilter) WhereBusinessUnitID(p entql.ValueP) {
	f.Where(p.Field(workerprofile.FieldBusinessUnitID))
}

// WhereOrganizationID applies the entql [16]byte predicate on the organization_id field.
func (f *WorkerProfileFilter) WhereOrganizationID(p entql.ValueP) {
	f.Where(p.Field(workerprofile.FieldOrganizationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WorkerProfileFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(workerprofile.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WorkerProfileFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(workerprofile.FieldUpdatedAt))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *WorkerProfileFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(workerprofile.FieldVersion))
}

// WhereWorkerID applies the entql [16]byte predicate on the worker_id field.
func (f *WorkerProfileFilter) WhereWorkerID(p entql.ValueP) {
	f.Where(p.Field(workerprofile.FieldWorkerID))
}

// WhereRace applies the entql string predicate on the race field.
func (f *WorkerProfileFilter) WhereRace(p entql.StringP) {
	f.Where(p.Field(workerprofile.FieldRace))
}

// WhereSex applies the entql string predicate on the sex field.
func (f *WorkerProfileFilter) WhereSex(p entql.StringP) {
	f.Where(p.Field(workerprofile.FieldSex))
}

// WhereDateOfBirth applies the entql other predicate on the date_of_birth field.
func (f *WorkerProfileFilter) WhereDateOfBirth(p entql.OtherP) {
	f.Where(p.Field(workerprofile.FieldDateOfBirth))
}

// WhereLicenseNumber applies the entql string predicate on the license_number field.
func (f *WorkerProfileFilter) WhereLicenseNumber(p entql.StringP) {
	f.Where(p.Field(workerprofile.FieldLicenseNumber))
}

// WhereLicenseStateID applies the entql [16]byte predicate on the license_state_id field.
func (f *WorkerProfileFilter) WhereLicenseStateID(p entql.ValueP) {
	f.Where(p.Field(workerprofile.FieldLicenseStateID))
}

// WhereLicenseExpirationDate applies the entql other predicate on the license_expiration_date field.
func (f *WorkerProfileFilter) WhereLicenseExpirationDate(p entql.OtherP) {
	f.Where(p.Field(workerprofile.FieldLicenseExpirationDate))
}

// WhereEndorsements applies the entql string predicate on the endorsements field.
func (f *WorkerProfileFilter) WhereEndorsements(p entql.StringP) {
	f.Where(p.Field(workerprofile.FieldEndorsements))
}

// WhereHazmatExpirationDate applies the entql other predicate on the hazmat_expiration_date field.
func (f *WorkerProfileFilter) WhereHazmatExpirationDate(p entql.OtherP) {
	f.Where(p.Field(workerprofile.FieldHazmatExpirationDate))
}

// WhereHireDate applies the entql other predicate on the hire_date field.
func (f *WorkerProfileFilter) WhereHireDate(p entql.OtherP) {
	f.Where(p.Field(workerprofile.FieldHireDate))
}

// WhereTerminationDate applies the entql other predicate on the termination_date field.
func (f *WorkerProfileFilter) WhereTerminationDate(p entql.OtherP) {
	f.Where(p.Field(workerprofile.FieldTerminationDate))
}

// WherePhysicalDueDate applies the entql other predicate on the physical_due_date field.
func (f *WorkerProfileFilter) WherePhysicalDueDate(p entql.OtherP) {
	f.Where(p.Field(workerprofile.FieldPhysicalDueDate))
}

// WhereMedicalCertDate applies the entql other predicate on the medical_cert_date field.
func (f *WorkerProfileFilter) WhereMedicalCertDate(p entql.OtherP) {
	f.Where(p.Field(workerprofile.FieldMedicalCertDate))
}

// WhereMvrDueDate applies the entql other predicate on the mvr_due_date field.
func (f *WorkerProfileFilter) WhereMvrDueDate(p entql.OtherP) {
	f.Where(p.Field(workerprofile.FieldMvrDueDate))
}

// WhereHasBusinessUnit applies a predicate to check if query has an edge business_unit.
func (f *WorkerProfileFilter) WhereHasBusinessUnit() {
	f.Where(entql.HasEdge("business_unit"))
}

// WhereHasBusinessUnitWith applies a predicate to check if query has an edge business_unit with a given conditions (other predicates).
func (f *WorkerProfileFilter) WhereHasBusinessUnitWith(preds ...predicate.BusinessUnit) {
	f.Where(entql.HasEdgeWith("business_unit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *WorkerProfileFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *WorkerProfileFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorker applies a predicate to check if query has an edge worker.
func (f *WorkerProfileFilter) WhereHasWorker() {
	f.Where(entql.HasEdge("worker"))
}

// WhereHasWorkerWith applies a predicate to check if query has an edge worker with a given conditions (other predicates).
func (f *WorkerProfileFilter) WhereHasWorkerWith(preds ...predicate.Worker) {
	f.Where(entql.HasEdgeWith("worker", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasState applies a predicate to check if query has an edge state.
func (f *WorkerProfileFilter) WhereHasState() {
	f.Where(entql.HasEdge("state"))
}

// WhereHasStateWith applies a predicate to check if query has an edge state with a given conditions (other predicates).
func (f *WorkerProfileFilter) WhereHasStateWith(preds ...predicate.UsState) {
	f.Where(entql.HasEdgeWith("state", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
