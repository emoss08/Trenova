// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/billingcontrol"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// BillingControl is the model entity for the BillingControl schema.
type BillingControl struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// RemoveBillingHistory holds the value of the "remove_billing_history" field.
	RemoveBillingHistory bool `json:"removeBillingHistory" validate:"omitempty"`
	// AutoBillShipment holds the value of the "auto_bill_shipment" field.
	AutoBillShipment bool `json:"autoBillShipment" validate:"omitempty"`
	// AutoMarkReadyToBill holds the value of the "auto_mark_ready_to_bill" field.
	AutoMarkReadyToBill bool `json:"autoMarkReadyToBill" validate:"omitempty"`
	// ValidateCustomerRates holds the value of the "validate_customer_rates" field.
	ValidateCustomerRates bool `json:"validateCustomerRates" validate:"omitempty"`
	// AutoBillCriteria holds the value of the "auto_bill_criteria" field.
	AutoBillCriteria billingcontrol.AutoBillCriteria `json:"autoBillCriteria" validate:"omitempty"`
	// ShipmentTransferCriteria holds the value of the "shipment_transfer_criteria" field.
	ShipmentTransferCriteria billingcontrol.ShipmentTransferCriteria `json:"shipmentTransferCriteria" validate:"omitempty"`
	// EnforceCustomerBilling holds the value of the "enforce_customer_billing" field.
	EnforceCustomerBilling bool `json:"enforceCustomerBilling" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingControlQuery when eager-loading is set.
	Edges            BillingControlEdges `json:"edges"`
	business_unit_id *uuid.UUID
	organization_id  *uuid.UUID
	selectValues     sql.SelectValues
}

// BillingControlEdges holds the relations/edges for other nodes in the graph.
type BillingControlEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingControlEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingControlEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingControl) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingcontrol.FieldRemoveBillingHistory, billingcontrol.FieldAutoBillShipment, billingcontrol.FieldAutoMarkReadyToBill, billingcontrol.FieldValidateCustomerRates, billingcontrol.FieldEnforceCustomerBilling:
			values[i] = new(sql.NullBool)
		case billingcontrol.FieldAutoBillCriteria, billingcontrol.FieldShipmentTransferCriteria:
			values[i] = new(sql.NullString)
		case billingcontrol.FieldCreatedAt, billingcontrol.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case billingcontrol.FieldID:
			values[i] = new(uuid.UUID)
		case billingcontrol.ForeignKeys[0]: // business_unit_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case billingcontrol.ForeignKeys[1]: // organization_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingControl fields.
func (bc *BillingControl) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingcontrol.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bc.ID = *value
			}
		case billingcontrol.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bc.CreatedAt = value.Time
			}
		case billingcontrol.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bc.UpdatedAt = value.Time
			}
		case billingcontrol.FieldRemoveBillingHistory:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field remove_billing_history", values[i])
			} else if value.Valid {
				bc.RemoveBillingHistory = value.Bool
			}
		case billingcontrol.FieldAutoBillShipment:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_bill_shipment", values[i])
			} else if value.Valid {
				bc.AutoBillShipment = value.Bool
			}
		case billingcontrol.FieldAutoMarkReadyToBill:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_mark_ready_to_bill", values[i])
			} else if value.Valid {
				bc.AutoMarkReadyToBill = value.Bool
			}
		case billingcontrol.FieldValidateCustomerRates:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field validate_customer_rates", values[i])
			} else if value.Valid {
				bc.ValidateCustomerRates = value.Bool
			}
		case billingcontrol.FieldAutoBillCriteria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_bill_criteria", values[i])
			} else if value.Valid {
				bc.AutoBillCriteria = billingcontrol.AutoBillCriteria(value.String)
			}
		case billingcontrol.FieldShipmentTransferCriteria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_transfer_criteria", values[i])
			} else if value.Valid {
				bc.ShipmentTransferCriteria = billingcontrol.ShipmentTransferCriteria(value.String)
			}
		case billingcontrol.FieldEnforceCustomerBilling:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enforce_customer_billing", values[i])
			} else if value.Valid {
				bc.EnforceCustomerBilling = value.Bool
			}
		case billingcontrol.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value.Valid {
				bc.business_unit_id = new(uuid.UUID)
				*bc.business_unit_id = *value.S.(*uuid.UUID)
			}
		case billingcontrol.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				bc.organization_id = new(uuid.UUID)
				*bc.organization_id = *value.S.(*uuid.UUID)
			}
		default:
			bc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingControl.
// This includes values selected through modifiers, order, etc.
func (bc *BillingControl) Value(name string) (ent.Value, error) {
	return bc.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the BillingControl entity.
func (bc *BillingControl) QueryOrganization() *OrganizationQuery {
	return NewBillingControlClient(bc.config).QueryOrganization(bc)
}

// QueryBusinessUnit queries the "business_unit" edge of the BillingControl entity.
func (bc *BillingControl) QueryBusinessUnit() *BusinessUnitQuery {
	return NewBillingControlClient(bc.config).QueryBusinessUnit(bc)
}

// Update returns a builder for updating this BillingControl.
// Note that you need to call BillingControl.Unwrap() before calling this method if this BillingControl
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BillingControl) Update() *BillingControlUpdateOne {
	return NewBillingControlClient(bc.config).UpdateOne(bc)
}

// Unwrap unwraps the BillingControl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BillingControl) Unwrap() *BillingControl {
	_tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BillingControl is not a transactional entity")
	}
	bc.config.driver = _tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BillingControl) String() string {
	var builder strings.Builder
	builder.WriteString("BillingControl(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remove_billing_history=")
	builder.WriteString(fmt.Sprintf("%v", bc.RemoveBillingHistory))
	builder.WriteString(", ")
	builder.WriteString("auto_bill_shipment=")
	builder.WriteString(fmt.Sprintf("%v", bc.AutoBillShipment))
	builder.WriteString(", ")
	builder.WriteString("auto_mark_ready_to_bill=")
	builder.WriteString(fmt.Sprintf("%v", bc.AutoMarkReadyToBill))
	builder.WriteString(", ")
	builder.WriteString("validate_customer_rates=")
	builder.WriteString(fmt.Sprintf("%v", bc.ValidateCustomerRates))
	builder.WriteString(", ")
	builder.WriteString("auto_bill_criteria=")
	builder.WriteString(fmt.Sprintf("%v", bc.AutoBillCriteria))
	builder.WriteString(", ")
	builder.WriteString("shipment_transfer_criteria=")
	builder.WriteString(fmt.Sprintf("%v", bc.ShipmentTransferCriteria))
	builder.WriteString(", ")
	builder.WriteString("enforce_customer_billing=")
	builder.WriteString(fmt.Sprintf("%v", bc.EnforceCustomerBilling))
	builder.WriteByte(')')
	return builder.String()
}

// BillingControls is a parsable slice of BillingControl.
type BillingControls []*BillingControl
