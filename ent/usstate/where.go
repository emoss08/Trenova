// Code generated by ent, DO NOT EDIT.

package usstate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UsState {
	return predicate.UsState(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UsState {
	return predicate.UsState(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UsState {
	return predicate.UsState(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UsState {
	return predicate.UsState(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UsState {
	return predicate.UsState(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UsState {
	return predicate.UsState(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UsState {
	return predicate.UsState(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldName, v))
}

// Abbreviation applies equality check predicate on the "abbreviation" field. It's identical to AbbreviationEQ.
func Abbreviation(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldAbbreviation, v))
}

// CountryName applies equality check predicate on the "country_name" field. It's identical to CountryNameEQ.
func CountryName(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldCountryName, v))
}

// CountryIso3 applies equality check predicate on the "country_iso3" field. It's identical to CountryIso3EQ.
func CountryIso3(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldCountryIso3, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UsState {
	return predicate.UsState(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UsState {
	return predicate.UsState(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UsState {
	return predicate.UsState(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UsState {
	return predicate.UsState(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UsState {
	return predicate.UsState(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UsState {
	return predicate.UsState(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UsState {
	return predicate.UsState(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UsState {
	return predicate.UsState(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UsState {
	return predicate.UsState(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UsState {
	return predicate.UsState(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UsState {
	return predicate.UsState(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UsState {
	return predicate.UsState(sql.FieldContainsFold(FieldName, v))
}

// AbbreviationEQ applies the EQ predicate on the "abbreviation" field.
func AbbreviationEQ(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldAbbreviation, v))
}

// AbbreviationNEQ applies the NEQ predicate on the "abbreviation" field.
func AbbreviationNEQ(v string) predicate.UsState {
	return predicate.UsState(sql.FieldNEQ(FieldAbbreviation, v))
}

// AbbreviationIn applies the In predicate on the "abbreviation" field.
func AbbreviationIn(vs ...string) predicate.UsState {
	return predicate.UsState(sql.FieldIn(FieldAbbreviation, vs...))
}

// AbbreviationNotIn applies the NotIn predicate on the "abbreviation" field.
func AbbreviationNotIn(vs ...string) predicate.UsState {
	return predicate.UsState(sql.FieldNotIn(FieldAbbreviation, vs...))
}

// AbbreviationGT applies the GT predicate on the "abbreviation" field.
func AbbreviationGT(v string) predicate.UsState {
	return predicate.UsState(sql.FieldGT(FieldAbbreviation, v))
}

// AbbreviationGTE applies the GTE predicate on the "abbreviation" field.
func AbbreviationGTE(v string) predicate.UsState {
	return predicate.UsState(sql.FieldGTE(FieldAbbreviation, v))
}

// AbbreviationLT applies the LT predicate on the "abbreviation" field.
func AbbreviationLT(v string) predicate.UsState {
	return predicate.UsState(sql.FieldLT(FieldAbbreviation, v))
}

// AbbreviationLTE applies the LTE predicate on the "abbreviation" field.
func AbbreviationLTE(v string) predicate.UsState {
	return predicate.UsState(sql.FieldLTE(FieldAbbreviation, v))
}

// AbbreviationContains applies the Contains predicate on the "abbreviation" field.
func AbbreviationContains(v string) predicate.UsState {
	return predicate.UsState(sql.FieldContains(FieldAbbreviation, v))
}

// AbbreviationHasPrefix applies the HasPrefix predicate on the "abbreviation" field.
func AbbreviationHasPrefix(v string) predicate.UsState {
	return predicate.UsState(sql.FieldHasPrefix(FieldAbbreviation, v))
}

// AbbreviationHasSuffix applies the HasSuffix predicate on the "abbreviation" field.
func AbbreviationHasSuffix(v string) predicate.UsState {
	return predicate.UsState(sql.FieldHasSuffix(FieldAbbreviation, v))
}

// AbbreviationEqualFold applies the EqualFold predicate on the "abbreviation" field.
func AbbreviationEqualFold(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEqualFold(FieldAbbreviation, v))
}

// AbbreviationContainsFold applies the ContainsFold predicate on the "abbreviation" field.
func AbbreviationContainsFold(v string) predicate.UsState {
	return predicate.UsState(sql.FieldContainsFold(FieldAbbreviation, v))
}

// CountryNameEQ applies the EQ predicate on the "country_name" field.
func CountryNameEQ(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldCountryName, v))
}

// CountryNameNEQ applies the NEQ predicate on the "country_name" field.
func CountryNameNEQ(v string) predicate.UsState {
	return predicate.UsState(sql.FieldNEQ(FieldCountryName, v))
}

// CountryNameIn applies the In predicate on the "country_name" field.
func CountryNameIn(vs ...string) predicate.UsState {
	return predicate.UsState(sql.FieldIn(FieldCountryName, vs...))
}

// CountryNameNotIn applies the NotIn predicate on the "country_name" field.
func CountryNameNotIn(vs ...string) predicate.UsState {
	return predicate.UsState(sql.FieldNotIn(FieldCountryName, vs...))
}

// CountryNameGT applies the GT predicate on the "country_name" field.
func CountryNameGT(v string) predicate.UsState {
	return predicate.UsState(sql.FieldGT(FieldCountryName, v))
}

// CountryNameGTE applies the GTE predicate on the "country_name" field.
func CountryNameGTE(v string) predicate.UsState {
	return predicate.UsState(sql.FieldGTE(FieldCountryName, v))
}

// CountryNameLT applies the LT predicate on the "country_name" field.
func CountryNameLT(v string) predicate.UsState {
	return predicate.UsState(sql.FieldLT(FieldCountryName, v))
}

// CountryNameLTE applies the LTE predicate on the "country_name" field.
func CountryNameLTE(v string) predicate.UsState {
	return predicate.UsState(sql.FieldLTE(FieldCountryName, v))
}

// CountryNameContains applies the Contains predicate on the "country_name" field.
func CountryNameContains(v string) predicate.UsState {
	return predicate.UsState(sql.FieldContains(FieldCountryName, v))
}

// CountryNameHasPrefix applies the HasPrefix predicate on the "country_name" field.
func CountryNameHasPrefix(v string) predicate.UsState {
	return predicate.UsState(sql.FieldHasPrefix(FieldCountryName, v))
}

// CountryNameHasSuffix applies the HasSuffix predicate on the "country_name" field.
func CountryNameHasSuffix(v string) predicate.UsState {
	return predicate.UsState(sql.FieldHasSuffix(FieldCountryName, v))
}

// CountryNameEqualFold applies the EqualFold predicate on the "country_name" field.
func CountryNameEqualFold(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEqualFold(FieldCountryName, v))
}

// CountryNameContainsFold applies the ContainsFold predicate on the "country_name" field.
func CountryNameContainsFold(v string) predicate.UsState {
	return predicate.UsState(sql.FieldContainsFold(FieldCountryName, v))
}

// CountryIso3EQ applies the EQ predicate on the "country_iso3" field.
func CountryIso3EQ(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEQ(FieldCountryIso3, v))
}

// CountryIso3NEQ applies the NEQ predicate on the "country_iso3" field.
func CountryIso3NEQ(v string) predicate.UsState {
	return predicate.UsState(sql.FieldNEQ(FieldCountryIso3, v))
}

// CountryIso3In applies the In predicate on the "country_iso3" field.
func CountryIso3In(vs ...string) predicate.UsState {
	return predicate.UsState(sql.FieldIn(FieldCountryIso3, vs...))
}

// CountryIso3NotIn applies the NotIn predicate on the "country_iso3" field.
func CountryIso3NotIn(vs ...string) predicate.UsState {
	return predicate.UsState(sql.FieldNotIn(FieldCountryIso3, vs...))
}

// CountryIso3GT applies the GT predicate on the "country_iso3" field.
func CountryIso3GT(v string) predicate.UsState {
	return predicate.UsState(sql.FieldGT(FieldCountryIso3, v))
}

// CountryIso3GTE applies the GTE predicate on the "country_iso3" field.
func CountryIso3GTE(v string) predicate.UsState {
	return predicate.UsState(sql.FieldGTE(FieldCountryIso3, v))
}

// CountryIso3LT applies the LT predicate on the "country_iso3" field.
func CountryIso3LT(v string) predicate.UsState {
	return predicate.UsState(sql.FieldLT(FieldCountryIso3, v))
}

// CountryIso3LTE applies the LTE predicate on the "country_iso3" field.
func CountryIso3LTE(v string) predicate.UsState {
	return predicate.UsState(sql.FieldLTE(FieldCountryIso3, v))
}

// CountryIso3Contains applies the Contains predicate on the "country_iso3" field.
func CountryIso3Contains(v string) predicate.UsState {
	return predicate.UsState(sql.FieldContains(FieldCountryIso3, v))
}

// CountryIso3HasPrefix applies the HasPrefix predicate on the "country_iso3" field.
func CountryIso3HasPrefix(v string) predicate.UsState {
	return predicate.UsState(sql.FieldHasPrefix(FieldCountryIso3, v))
}

// CountryIso3HasSuffix applies the HasSuffix predicate on the "country_iso3" field.
func CountryIso3HasSuffix(v string) predicate.UsState {
	return predicate.UsState(sql.FieldHasSuffix(FieldCountryIso3, v))
}

// CountryIso3EqualFold applies the EqualFold predicate on the "country_iso3" field.
func CountryIso3EqualFold(v string) predicate.UsState {
	return predicate.UsState(sql.FieldEqualFold(FieldCountryIso3, v))
}

// CountryIso3ContainsFold applies the ContainsFold predicate on the "country_iso3" field.
func CountryIso3ContainsFold(v string) predicate.UsState {
	return predicate.UsState(sql.FieldContainsFold(FieldCountryIso3, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UsState) predicate.UsState {
	return predicate.UsState(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UsState) predicate.UsState {
	return predicate.UsState(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UsState) predicate.UsState {
	return predicate.UsState(sql.NotPredicates(p))
}
