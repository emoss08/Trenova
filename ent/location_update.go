// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/location"
	"github.com/emoss08/trenova/ent/locationcategory"
	"github.com/emoss08/trenova/ent/locationcomment"
	"github.com/emoss08/trenova/ent/locationcontact"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/usstate"
	"github.com/google/uuid"
)

// LocationUpdate is the builder for updating Location entities.
type LocationUpdate struct {
	config
	hooks     []Hook
	mutation  *LocationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LocationUpdate builder.
func (lu *LocationUpdate) Where(ps ...predicate.Location) *LocationUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LocationUpdate) SetUpdatedAt(t time.Time) *LocationUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetVersion sets the "version" field.
func (lu *LocationUpdate) SetVersion(i int) *LocationUpdate {
	lu.mutation.ResetVersion()
	lu.mutation.SetVersion(i)
	return lu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableVersion(i *int) *LocationUpdate {
	if i != nil {
		lu.SetVersion(*i)
	}
	return lu
}

// AddVersion adds i to the "version" field.
func (lu *LocationUpdate) AddVersion(i int) *LocationUpdate {
	lu.mutation.AddVersion(i)
	return lu
}

// SetStatus sets the "status" field.
func (lu *LocationUpdate) SetStatus(l location.Status) *LocationUpdate {
	lu.mutation.SetStatus(l)
	return lu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableStatus(l *location.Status) *LocationUpdate {
	if l != nil {
		lu.SetStatus(*l)
	}
	return lu
}

// SetCode sets the "code" field.
func (lu *LocationUpdate) SetCode(s string) *LocationUpdate {
	lu.mutation.SetCode(s)
	return lu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableCode(s *string) *LocationUpdate {
	if s != nil {
		lu.SetCode(*s)
	}
	return lu
}

// SetLocationCategoryID sets the "location_category_id" field.
func (lu *LocationUpdate) SetLocationCategoryID(u uuid.UUID) *LocationUpdate {
	lu.mutation.SetLocationCategoryID(u)
	return lu
}

// SetNillableLocationCategoryID sets the "location_category_id" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableLocationCategoryID(u *uuid.UUID) *LocationUpdate {
	if u != nil {
		lu.SetLocationCategoryID(*u)
	}
	return lu
}

// ClearLocationCategoryID clears the value of the "location_category_id" field.
func (lu *LocationUpdate) ClearLocationCategoryID() *LocationUpdate {
	lu.mutation.ClearLocationCategoryID()
	return lu
}

// SetName sets the "name" field.
func (lu *LocationUpdate) SetName(s string) *LocationUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableName(s *string) *LocationUpdate {
	if s != nil {
		lu.SetName(*s)
	}
	return lu
}

// SetDescription sets the "description" field.
func (lu *LocationUpdate) SetDescription(s string) *LocationUpdate {
	lu.mutation.SetDescription(s)
	return lu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableDescription(s *string) *LocationUpdate {
	if s != nil {
		lu.SetDescription(*s)
	}
	return lu
}

// ClearDescription clears the value of the "description" field.
func (lu *LocationUpdate) ClearDescription() *LocationUpdate {
	lu.mutation.ClearDescription()
	return lu
}

// SetAddressLine1 sets the "address_line_1" field.
func (lu *LocationUpdate) SetAddressLine1(s string) *LocationUpdate {
	lu.mutation.SetAddressLine1(s)
	return lu
}

// SetNillableAddressLine1 sets the "address_line_1" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableAddressLine1(s *string) *LocationUpdate {
	if s != nil {
		lu.SetAddressLine1(*s)
	}
	return lu
}

// SetAddressLine2 sets the "address_line_2" field.
func (lu *LocationUpdate) SetAddressLine2(s string) *LocationUpdate {
	lu.mutation.SetAddressLine2(s)
	return lu
}

// SetNillableAddressLine2 sets the "address_line_2" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableAddressLine2(s *string) *LocationUpdate {
	if s != nil {
		lu.SetAddressLine2(*s)
	}
	return lu
}

// ClearAddressLine2 clears the value of the "address_line_2" field.
func (lu *LocationUpdate) ClearAddressLine2() *LocationUpdate {
	lu.mutation.ClearAddressLine2()
	return lu
}

// SetCity sets the "city" field.
func (lu *LocationUpdate) SetCity(s string) *LocationUpdate {
	lu.mutation.SetCity(s)
	return lu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableCity(s *string) *LocationUpdate {
	if s != nil {
		lu.SetCity(*s)
	}
	return lu
}

// SetStateID sets the "state_id" field.
func (lu *LocationUpdate) SetStateID(u uuid.UUID) *LocationUpdate {
	lu.mutation.SetStateID(u)
	return lu
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableStateID(u *uuid.UUID) *LocationUpdate {
	if u != nil {
		lu.SetStateID(*u)
	}
	return lu
}

// SetPostalCode sets the "postal_code" field.
func (lu *LocationUpdate) SetPostalCode(s string) *LocationUpdate {
	lu.mutation.SetPostalCode(s)
	return lu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (lu *LocationUpdate) SetNillablePostalCode(s *string) *LocationUpdate {
	if s != nil {
		lu.SetPostalCode(*s)
	}
	return lu
}

// SetLongitude sets the "longitude" field.
func (lu *LocationUpdate) SetLongitude(f float64) *LocationUpdate {
	lu.mutation.ResetLongitude()
	lu.mutation.SetLongitude(f)
	return lu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableLongitude(f *float64) *LocationUpdate {
	if f != nil {
		lu.SetLongitude(*f)
	}
	return lu
}

// AddLongitude adds f to the "longitude" field.
func (lu *LocationUpdate) AddLongitude(f float64) *LocationUpdate {
	lu.mutation.AddLongitude(f)
	return lu
}

// ClearLongitude clears the value of the "longitude" field.
func (lu *LocationUpdate) ClearLongitude() *LocationUpdate {
	lu.mutation.ClearLongitude()
	return lu
}

// SetLatitude sets the "latitude" field.
func (lu *LocationUpdate) SetLatitude(f float64) *LocationUpdate {
	lu.mutation.ResetLatitude()
	lu.mutation.SetLatitude(f)
	return lu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableLatitude(f *float64) *LocationUpdate {
	if f != nil {
		lu.SetLatitude(*f)
	}
	return lu
}

// AddLatitude adds f to the "latitude" field.
func (lu *LocationUpdate) AddLatitude(f float64) *LocationUpdate {
	lu.mutation.AddLatitude(f)
	return lu
}

// ClearLatitude clears the value of the "latitude" field.
func (lu *LocationUpdate) ClearLatitude() *LocationUpdate {
	lu.mutation.ClearLatitude()
	return lu
}

// SetPlaceID sets the "place_id" field.
func (lu *LocationUpdate) SetPlaceID(s string) *LocationUpdate {
	lu.mutation.SetPlaceID(s)
	return lu
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (lu *LocationUpdate) SetNillablePlaceID(s *string) *LocationUpdate {
	if s != nil {
		lu.SetPlaceID(*s)
	}
	return lu
}

// ClearPlaceID clears the value of the "place_id" field.
func (lu *LocationUpdate) ClearPlaceID() *LocationUpdate {
	lu.mutation.ClearPlaceID()
	return lu
}

// SetIsGeocoded sets the "is_geocoded" field.
func (lu *LocationUpdate) SetIsGeocoded(b bool) *LocationUpdate {
	lu.mutation.SetIsGeocoded(b)
	return lu
}

// SetNillableIsGeocoded sets the "is_geocoded" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableIsGeocoded(b *bool) *LocationUpdate {
	if b != nil {
		lu.SetIsGeocoded(*b)
	}
	return lu
}

// SetLocationCategory sets the "location_category" edge to the LocationCategory entity.
func (lu *LocationUpdate) SetLocationCategory(l *LocationCategory) *LocationUpdate {
	return lu.SetLocationCategoryID(l.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (lu *LocationUpdate) SetState(u *UsState) *LocationUpdate {
	return lu.SetStateID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the LocationComment entity by IDs.
func (lu *LocationUpdate) AddCommentIDs(ids ...uuid.UUID) *LocationUpdate {
	lu.mutation.AddCommentIDs(ids...)
	return lu
}

// AddComments adds the "comments" edges to the LocationComment entity.
func (lu *LocationUpdate) AddComments(l ...*LocationComment) *LocationUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddCommentIDs(ids...)
}

// SetContactsID sets the "contacts" edge to the LocationContact entity by ID.
func (lu *LocationUpdate) SetContactsID(id uuid.UUID) *LocationUpdate {
	lu.mutation.SetContactsID(id)
	return lu
}

// SetNillableContactsID sets the "contacts" edge to the LocationContact entity by ID if the given value is not nil.
func (lu *LocationUpdate) SetNillableContactsID(id *uuid.UUID) *LocationUpdate {
	if id != nil {
		lu = lu.SetContactsID(*id)
	}
	return lu
}

// SetContacts sets the "contacts" edge to the LocationContact entity.
func (lu *LocationUpdate) SetContacts(l *LocationContact) *LocationUpdate {
	return lu.SetContactsID(l.ID)
}

// Mutation returns the LocationMutation object of the builder.
func (lu *LocationUpdate) Mutation() *LocationMutation {
	return lu.mutation
}

// ClearLocationCategory clears the "location_category" edge to the LocationCategory entity.
func (lu *LocationUpdate) ClearLocationCategory() *LocationUpdate {
	lu.mutation.ClearLocationCategory()
	return lu
}

// ClearState clears the "state" edge to the UsState entity.
func (lu *LocationUpdate) ClearState() *LocationUpdate {
	lu.mutation.ClearState()
	return lu
}

// ClearComments clears all "comments" edges to the LocationComment entity.
func (lu *LocationUpdate) ClearComments() *LocationUpdate {
	lu.mutation.ClearComments()
	return lu
}

// RemoveCommentIDs removes the "comments" edge to LocationComment entities by IDs.
func (lu *LocationUpdate) RemoveCommentIDs(ids ...uuid.UUID) *LocationUpdate {
	lu.mutation.RemoveCommentIDs(ids...)
	return lu
}

// RemoveComments removes "comments" edges to LocationComment entities.
func (lu *LocationUpdate) RemoveComments(l ...*LocationComment) *LocationUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveCommentIDs(ids...)
}

// ClearContacts clears the "contacts" edge to the LocationContact entity.
func (lu *LocationUpdate) ClearContacts() *LocationUpdate {
	lu.mutation.ClearContacts()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LocationUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LocationUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LocationUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LocationUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LocationUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := location.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LocationUpdate) check() error {
	if v, ok := lu.mutation.Status(); ok {
		if err := location.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Location.status": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Code(); ok {
		if err := location.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Location.code": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Name(); ok {
		if err := location.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Location.name": %w`, err)}
		}
	}
	if v, ok := lu.mutation.AddressLine1(); ok {
		if err := location.AddressLine1Validator(v); err != nil {
			return &ValidationError{Name: "address_line_1", err: fmt.Errorf(`ent: validator failed for field "Location.address_line_1": %w`, err)}
		}
	}
	if v, ok := lu.mutation.AddressLine2(); ok {
		if err := location.AddressLine2Validator(v); err != nil {
			return &ValidationError{Name: "address_line_2", err: fmt.Errorf(`ent: validator failed for field "Location.address_line_2": %w`, err)}
		}
	}
	if v, ok := lu.mutation.City(); ok {
		if err := location.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Location.city": %w`, err)}
		}
	}
	if v, ok := lu.mutation.PostalCode(); ok {
		if err := location.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Location.postal_code": %w`, err)}
		}
	}
	if v, ok := lu.mutation.PlaceID(); ok {
		if err := location.PlaceIDValidator(v); err != nil {
			return &ValidationError{Name: "place_id", err: fmt.Errorf(`ent: validator failed for field "Location.place_id": %w`, err)}
		}
	}
	if _, ok := lu.mutation.BusinessUnitID(); lu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Location.business_unit"`)
	}
	if _, ok := lu.mutation.OrganizationID(); lu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Location.organization"`)
	}
	if _, ok := lu.mutation.StateID(); lu.mutation.StateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Location.state"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lu *LocationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LocationUpdate {
	lu.modifiers = append(lu.modifiers, modifiers...)
	return lu
}

func (lu *LocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(location.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Version(); ok {
		_spec.SetField(location.FieldVersion, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedVersion(); ok {
		_spec.AddField(location.FieldVersion, field.TypeInt, value)
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.SetField(location.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.Code(); ok {
		_spec.SetField(location.FieldCode, field.TypeString, value)
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
	}
	if value, ok := lu.mutation.Description(); ok {
		_spec.SetField(location.FieldDescription, field.TypeString, value)
	}
	if lu.mutation.DescriptionCleared() {
		_spec.ClearField(location.FieldDescription, field.TypeString)
	}
	if value, ok := lu.mutation.AddressLine1(); ok {
		_spec.SetField(location.FieldAddressLine1, field.TypeString, value)
	}
	if value, ok := lu.mutation.AddressLine2(); ok {
		_spec.SetField(location.FieldAddressLine2, field.TypeString, value)
	}
	if lu.mutation.AddressLine2Cleared() {
		_spec.ClearField(location.FieldAddressLine2, field.TypeString)
	}
	if value, ok := lu.mutation.City(); ok {
		_spec.SetField(location.FieldCity, field.TypeString, value)
	}
	if value, ok := lu.mutation.PostalCode(); ok {
		_spec.SetField(location.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := lu.mutation.Longitude(); ok {
		_spec.SetField(location.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedLongitude(); ok {
		_spec.AddField(location.FieldLongitude, field.TypeFloat64, value)
	}
	if lu.mutation.LongitudeCleared() {
		_spec.ClearField(location.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := lu.mutation.Latitude(); ok {
		_spec.SetField(location.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedLatitude(); ok {
		_spec.AddField(location.FieldLatitude, field.TypeFloat64, value)
	}
	if lu.mutation.LatitudeCleared() {
		_spec.ClearField(location.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := lu.mutation.PlaceID(); ok {
		_spec.SetField(location.FieldPlaceID, field.TypeString, value)
	}
	if lu.mutation.PlaceIDCleared() {
		_spec.ClearField(location.FieldPlaceID, field.TypeString)
	}
	if value, ok := lu.mutation.IsGeocoded(); ok {
		_spec.SetField(location.FieldIsGeocoded, field.TypeBool, value)
	}
	if lu.mutation.LocationCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.LocationCategoryTable,
			Columns: []string{location.LocationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LocationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.LocationCategoryTable,
			Columns: []string{location.LocationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.StateTable,
			Columns: []string{location.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.StateTable,
			Columns: []string{location.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.CommentsTable,
			Columns: []string{location.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !lu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.CommentsTable,
			Columns: []string{location.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.CommentsTable,
			Columns: []string{location.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   location.ContactsTable,
			Columns: []string{location.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcontact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   location.ContactsTable,
			Columns: []string{location.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LocationUpdateOne is the builder for updating a single Location entity.
type LocationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LocationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LocationUpdateOne) SetUpdatedAt(t time.Time) *LocationUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetVersion sets the "version" field.
func (luo *LocationUpdateOne) SetVersion(i int) *LocationUpdateOne {
	luo.mutation.ResetVersion()
	luo.mutation.SetVersion(i)
	return luo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableVersion(i *int) *LocationUpdateOne {
	if i != nil {
		luo.SetVersion(*i)
	}
	return luo
}

// AddVersion adds i to the "version" field.
func (luo *LocationUpdateOne) AddVersion(i int) *LocationUpdateOne {
	luo.mutation.AddVersion(i)
	return luo
}

// SetStatus sets the "status" field.
func (luo *LocationUpdateOne) SetStatus(l location.Status) *LocationUpdateOne {
	luo.mutation.SetStatus(l)
	return luo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableStatus(l *location.Status) *LocationUpdateOne {
	if l != nil {
		luo.SetStatus(*l)
	}
	return luo
}

// SetCode sets the "code" field.
func (luo *LocationUpdateOne) SetCode(s string) *LocationUpdateOne {
	luo.mutation.SetCode(s)
	return luo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableCode(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetCode(*s)
	}
	return luo
}

// SetLocationCategoryID sets the "location_category_id" field.
func (luo *LocationUpdateOne) SetLocationCategoryID(u uuid.UUID) *LocationUpdateOne {
	luo.mutation.SetLocationCategoryID(u)
	return luo
}

// SetNillableLocationCategoryID sets the "location_category_id" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableLocationCategoryID(u *uuid.UUID) *LocationUpdateOne {
	if u != nil {
		luo.SetLocationCategoryID(*u)
	}
	return luo
}

// ClearLocationCategoryID clears the value of the "location_category_id" field.
func (luo *LocationUpdateOne) ClearLocationCategoryID() *LocationUpdateOne {
	luo.mutation.ClearLocationCategoryID()
	return luo
}

// SetName sets the "name" field.
func (luo *LocationUpdateOne) SetName(s string) *LocationUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableName(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetName(*s)
	}
	return luo
}

// SetDescription sets the "description" field.
func (luo *LocationUpdateOne) SetDescription(s string) *LocationUpdateOne {
	luo.mutation.SetDescription(s)
	return luo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableDescription(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetDescription(*s)
	}
	return luo
}

// ClearDescription clears the value of the "description" field.
func (luo *LocationUpdateOne) ClearDescription() *LocationUpdateOne {
	luo.mutation.ClearDescription()
	return luo
}

// SetAddressLine1 sets the "address_line_1" field.
func (luo *LocationUpdateOne) SetAddressLine1(s string) *LocationUpdateOne {
	luo.mutation.SetAddressLine1(s)
	return luo
}

// SetNillableAddressLine1 sets the "address_line_1" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableAddressLine1(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetAddressLine1(*s)
	}
	return luo
}

// SetAddressLine2 sets the "address_line_2" field.
func (luo *LocationUpdateOne) SetAddressLine2(s string) *LocationUpdateOne {
	luo.mutation.SetAddressLine2(s)
	return luo
}

// SetNillableAddressLine2 sets the "address_line_2" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableAddressLine2(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetAddressLine2(*s)
	}
	return luo
}

// ClearAddressLine2 clears the value of the "address_line_2" field.
func (luo *LocationUpdateOne) ClearAddressLine2() *LocationUpdateOne {
	luo.mutation.ClearAddressLine2()
	return luo
}

// SetCity sets the "city" field.
func (luo *LocationUpdateOne) SetCity(s string) *LocationUpdateOne {
	luo.mutation.SetCity(s)
	return luo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableCity(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetCity(*s)
	}
	return luo
}

// SetStateID sets the "state_id" field.
func (luo *LocationUpdateOne) SetStateID(u uuid.UUID) *LocationUpdateOne {
	luo.mutation.SetStateID(u)
	return luo
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableStateID(u *uuid.UUID) *LocationUpdateOne {
	if u != nil {
		luo.SetStateID(*u)
	}
	return luo
}

// SetPostalCode sets the "postal_code" field.
func (luo *LocationUpdateOne) SetPostalCode(s string) *LocationUpdateOne {
	luo.mutation.SetPostalCode(s)
	return luo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillablePostalCode(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetPostalCode(*s)
	}
	return luo
}

// SetLongitude sets the "longitude" field.
func (luo *LocationUpdateOne) SetLongitude(f float64) *LocationUpdateOne {
	luo.mutation.ResetLongitude()
	luo.mutation.SetLongitude(f)
	return luo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableLongitude(f *float64) *LocationUpdateOne {
	if f != nil {
		luo.SetLongitude(*f)
	}
	return luo
}

// AddLongitude adds f to the "longitude" field.
func (luo *LocationUpdateOne) AddLongitude(f float64) *LocationUpdateOne {
	luo.mutation.AddLongitude(f)
	return luo
}

// ClearLongitude clears the value of the "longitude" field.
func (luo *LocationUpdateOne) ClearLongitude() *LocationUpdateOne {
	luo.mutation.ClearLongitude()
	return luo
}

// SetLatitude sets the "latitude" field.
func (luo *LocationUpdateOne) SetLatitude(f float64) *LocationUpdateOne {
	luo.mutation.ResetLatitude()
	luo.mutation.SetLatitude(f)
	return luo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableLatitude(f *float64) *LocationUpdateOne {
	if f != nil {
		luo.SetLatitude(*f)
	}
	return luo
}

// AddLatitude adds f to the "latitude" field.
func (luo *LocationUpdateOne) AddLatitude(f float64) *LocationUpdateOne {
	luo.mutation.AddLatitude(f)
	return luo
}

// ClearLatitude clears the value of the "latitude" field.
func (luo *LocationUpdateOne) ClearLatitude() *LocationUpdateOne {
	luo.mutation.ClearLatitude()
	return luo
}

// SetPlaceID sets the "place_id" field.
func (luo *LocationUpdateOne) SetPlaceID(s string) *LocationUpdateOne {
	luo.mutation.SetPlaceID(s)
	return luo
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillablePlaceID(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetPlaceID(*s)
	}
	return luo
}

// ClearPlaceID clears the value of the "place_id" field.
func (luo *LocationUpdateOne) ClearPlaceID() *LocationUpdateOne {
	luo.mutation.ClearPlaceID()
	return luo
}

// SetIsGeocoded sets the "is_geocoded" field.
func (luo *LocationUpdateOne) SetIsGeocoded(b bool) *LocationUpdateOne {
	luo.mutation.SetIsGeocoded(b)
	return luo
}

// SetNillableIsGeocoded sets the "is_geocoded" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableIsGeocoded(b *bool) *LocationUpdateOne {
	if b != nil {
		luo.SetIsGeocoded(*b)
	}
	return luo
}

// SetLocationCategory sets the "location_category" edge to the LocationCategory entity.
func (luo *LocationUpdateOne) SetLocationCategory(l *LocationCategory) *LocationUpdateOne {
	return luo.SetLocationCategoryID(l.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (luo *LocationUpdateOne) SetState(u *UsState) *LocationUpdateOne {
	return luo.SetStateID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the LocationComment entity by IDs.
func (luo *LocationUpdateOne) AddCommentIDs(ids ...uuid.UUID) *LocationUpdateOne {
	luo.mutation.AddCommentIDs(ids...)
	return luo
}

// AddComments adds the "comments" edges to the LocationComment entity.
func (luo *LocationUpdateOne) AddComments(l ...*LocationComment) *LocationUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddCommentIDs(ids...)
}

// SetContactsID sets the "contacts" edge to the LocationContact entity by ID.
func (luo *LocationUpdateOne) SetContactsID(id uuid.UUID) *LocationUpdateOne {
	luo.mutation.SetContactsID(id)
	return luo
}

// SetNillableContactsID sets the "contacts" edge to the LocationContact entity by ID if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableContactsID(id *uuid.UUID) *LocationUpdateOne {
	if id != nil {
		luo = luo.SetContactsID(*id)
	}
	return luo
}

// SetContacts sets the "contacts" edge to the LocationContact entity.
func (luo *LocationUpdateOne) SetContacts(l *LocationContact) *LocationUpdateOne {
	return luo.SetContactsID(l.ID)
}

// Mutation returns the LocationMutation object of the builder.
func (luo *LocationUpdateOne) Mutation() *LocationMutation {
	return luo.mutation
}

// ClearLocationCategory clears the "location_category" edge to the LocationCategory entity.
func (luo *LocationUpdateOne) ClearLocationCategory() *LocationUpdateOne {
	luo.mutation.ClearLocationCategory()
	return luo
}

// ClearState clears the "state" edge to the UsState entity.
func (luo *LocationUpdateOne) ClearState() *LocationUpdateOne {
	luo.mutation.ClearState()
	return luo
}

// ClearComments clears all "comments" edges to the LocationComment entity.
func (luo *LocationUpdateOne) ClearComments() *LocationUpdateOne {
	luo.mutation.ClearComments()
	return luo
}

// RemoveCommentIDs removes the "comments" edge to LocationComment entities by IDs.
func (luo *LocationUpdateOne) RemoveCommentIDs(ids ...uuid.UUID) *LocationUpdateOne {
	luo.mutation.RemoveCommentIDs(ids...)
	return luo
}

// RemoveComments removes "comments" edges to LocationComment entities.
func (luo *LocationUpdateOne) RemoveComments(l ...*LocationComment) *LocationUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveCommentIDs(ids...)
}

// ClearContacts clears the "contacts" edge to the LocationContact entity.
func (luo *LocationUpdateOne) ClearContacts() *LocationUpdateOne {
	luo.mutation.ClearContacts()
	return luo
}

// Where appends a list predicates to the LocationUpdate builder.
func (luo *LocationUpdateOne) Where(ps ...predicate.Location) *LocationUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LocationUpdateOne) Select(field string, fields ...string) *LocationUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Location entity.
func (luo *LocationUpdateOne) Save(ctx context.Context) (*Location, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LocationUpdateOne) SaveX(ctx context.Context) *Location {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LocationUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LocationUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LocationUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := location.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LocationUpdateOne) check() error {
	if v, ok := luo.mutation.Status(); ok {
		if err := location.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Location.status": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Code(); ok {
		if err := location.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Location.code": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Name(); ok {
		if err := location.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Location.name": %w`, err)}
		}
	}
	if v, ok := luo.mutation.AddressLine1(); ok {
		if err := location.AddressLine1Validator(v); err != nil {
			return &ValidationError{Name: "address_line_1", err: fmt.Errorf(`ent: validator failed for field "Location.address_line_1": %w`, err)}
		}
	}
	if v, ok := luo.mutation.AddressLine2(); ok {
		if err := location.AddressLine2Validator(v); err != nil {
			return &ValidationError{Name: "address_line_2", err: fmt.Errorf(`ent: validator failed for field "Location.address_line_2": %w`, err)}
		}
	}
	if v, ok := luo.mutation.City(); ok {
		if err := location.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Location.city": %w`, err)}
		}
	}
	if v, ok := luo.mutation.PostalCode(); ok {
		if err := location.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Location.postal_code": %w`, err)}
		}
	}
	if v, ok := luo.mutation.PlaceID(); ok {
		if err := location.PlaceIDValidator(v); err != nil {
			return &ValidationError{Name: "place_id", err: fmt.Errorf(`ent: validator failed for field "Location.place_id": %w`, err)}
		}
	}
	if _, ok := luo.mutation.BusinessUnitID(); luo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Location.business_unit"`)
	}
	if _, ok := luo.mutation.OrganizationID(); luo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Location.organization"`)
	}
	if _, ok := luo.mutation.StateID(); luo.mutation.StateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Location.state"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (luo *LocationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LocationUpdateOne {
	luo.modifiers = append(luo.modifiers, modifiers...)
	return luo
}

func (luo *LocationUpdateOne) sqlSave(ctx context.Context) (_node *Location, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Location.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, location.FieldID)
		for _, f := range fields {
			if !location.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != location.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(location.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Version(); ok {
		_spec.SetField(location.FieldVersion, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedVersion(); ok {
		_spec.AddField(location.FieldVersion, field.TypeInt, value)
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.SetField(location.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.Code(); ok {
		_spec.SetField(location.FieldCode, field.TypeString, value)
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
	}
	if value, ok := luo.mutation.Description(); ok {
		_spec.SetField(location.FieldDescription, field.TypeString, value)
	}
	if luo.mutation.DescriptionCleared() {
		_spec.ClearField(location.FieldDescription, field.TypeString)
	}
	if value, ok := luo.mutation.AddressLine1(); ok {
		_spec.SetField(location.FieldAddressLine1, field.TypeString, value)
	}
	if value, ok := luo.mutation.AddressLine2(); ok {
		_spec.SetField(location.FieldAddressLine2, field.TypeString, value)
	}
	if luo.mutation.AddressLine2Cleared() {
		_spec.ClearField(location.FieldAddressLine2, field.TypeString)
	}
	if value, ok := luo.mutation.City(); ok {
		_spec.SetField(location.FieldCity, field.TypeString, value)
	}
	if value, ok := luo.mutation.PostalCode(); ok {
		_spec.SetField(location.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := luo.mutation.Longitude(); ok {
		_spec.SetField(location.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedLongitude(); ok {
		_spec.AddField(location.FieldLongitude, field.TypeFloat64, value)
	}
	if luo.mutation.LongitudeCleared() {
		_spec.ClearField(location.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := luo.mutation.Latitude(); ok {
		_spec.SetField(location.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedLatitude(); ok {
		_spec.AddField(location.FieldLatitude, field.TypeFloat64, value)
	}
	if luo.mutation.LatitudeCleared() {
		_spec.ClearField(location.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := luo.mutation.PlaceID(); ok {
		_spec.SetField(location.FieldPlaceID, field.TypeString, value)
	}
	if luo.mutation.PlaceIDCleared() {
		_spec.ClearField(location.FieldPlaceID, field.TypeString)
	}
	if value, ok := luo.mutation.IsGeocoded(); ok {
		_spec.SetField(location.FieldIsGeocoded, field.TypeBool, value)
	}
	if luo.mutation.LocationCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.LocationCategoryTable,
			Columns: []string{location.LocationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LocationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.LocationCategoryTable,
			Columns: []string{location.LocationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.StateTable,
			Columns: []string{location.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.StateTable,
			Columns: []string{location.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.CommentsTable,
			Columns: []string{location.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !luo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.CommentsTable,
			Columns: []string{location.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.CommentsTable,
			Columns: []string{location.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   location.ContactsTable,
			Columns: []string{location.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcontact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   location.ContactsTable,
			Columns: []string{location.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(luo.modifiers...)
	_node = &Location{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
