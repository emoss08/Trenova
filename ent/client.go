// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/emoss08/trenova/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/accountingcontrol"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/tag"
	"github.com/emoss08/trenova/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccountingControl is the client for interacting with the AccountingControl builders.
	AccountingControl *AccountingControlClient
	// BusinessUnit is the client for interacting with the BusinessUnit builders.
	BusinessUnit *BusinessUnitClient
	// GeneralLedgerAccount is the client for interacting with the GeneralLedgerAccount builders.
	GeneralLedgerAccount *GeneralLedgerAccountClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccountingControl = NewAccountingControlClient(c.config)
	c.BusinessUnit = NewBusinessUnitClient(c.config)
	c.GeneralLedgerAccount = NewGeneralLedgerAccountClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		AccountingControl:    NewAccountingControlClient(cfg),
		BusinessUnit:         NewBusinessUnitClient(cfg),
		GeneralLedgerAccount: NewGeneralLedgerAccountClient(cfg),
		Organization:         NewOrganizationClient(cfg),
		Tag:                  NewTagClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		AccountingControl:    NewAccountingControlClient(cfg),
		BusinessUnit:         NewBusinessUnitClient(cfg),
		GeneralLedgerAccount: NewGeneralLedgerAccountClient(cfg),
		Organization:         NewOrganizationClient(cfg),
		Tag:                  NewTagClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccountingControl.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AccountingControl, c.BusinessUnit, c.GeneralLedgerAccount, c.Organization,
		c.Tag, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AccountingControl, c.BusinessUnit, c.GeneralLedgerAccount, c.Organization,
		c.Tag, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountingControlMutation:
		return c.AccountingControl.mutate(ctx, m)
	case *BusinessUnitMutation:
		return c.BusinessUnit.mutate(ctx, m)
	case *GeneralLedgerAccountMutation:
		return c.GeneralLedgerAccount.mutate(ctx, m)
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *TagMutation:
		return c.Tag.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountingControlClient is a client for the AccountingControl schema.
type AccountingControlClient struct {
	config
}

// NewAccountingControlClient returns a client for the AccountingControl from the given config.
func NewAccountingControlClient(c config) *AccountingControlClient {
	return &AccountingControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accountingcontrol.Hooks(f(g(h())))`.
func (c *AccountingControlClient) Use(hooks ...Hook) {
	c.hooks.AccountingControl = append(c.hooks.AccountingControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accountingcontrol.Intercept(f(g(h())))`.
func (c *AccountingControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.AccountingControl = append(c.inters.AccountingControl, interceptors...)
}

// Create returns a builder for creating a AccountingControl entity.
func (c *AccountingControlClient) Create() *AccountingControlCreate {
	mutation := newAccountingControlMutation(c.config, OpCreate)
	return &AccountingControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccountingControl entities.
func (c *AccountingControlClient) CreateBulk(builders ...*AccountingControlCreate) *AccountingControlCreateBulk {
	return &AccountingControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountingControlClient) MapCreateBulk(slice any, setFunc func(*AccountingControlCreate, int)) *AccountingControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountingControlCreateBulk{err: fmt.Errorf("calling to AccountingControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountingControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountingControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccountingControl.
func (c *AccountingControlClient) Update() *AccountingControlUpdate {
	mutation := newAccountingControlMutation(c.config, OpUpdate)
	return &AccountingControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountingControlClient) UpdateOne(ac *AccountingControl) *AccountingControlUpdateOne {
	mutation := newAccountingControlMutation(c.config, OpUpdateOne, withAccountingControl(ac))
	return &AccountingControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountingControlClient) UpdateOneID(id uuid.UUID) *AccountingControlUpdateOne {
	mutation := newAccountingControlMutation(c.config, OpUpdateOne, withAccountingControlID(id))
	return &AccountingControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccountingControl.
func (c *AccountingControlClient) Delete() *AccountingControlDelete {
	mutation := newAccountingControlMutation(c.config, OpDelete)
	return &AccountingControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountingControlClient) DeleteOne(ac *AccountingControl) *AccountingControlDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountingControlClient) DeleteOneID(id uuid.UUID) *AccountingControlDeleteOne {
	builder := c.Delete().Where(accountingcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountingControlDeleteOne{builder}
}

// Query returns a query builder for AccountingControl.
func (c *AccountingControlClient) Query() *AccountingControlQuery {
	return &AccountingControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccountingControl},
		inters: c.Interceptors(),
	}
}

// Get returns a AccountingControl entity by its id.
func (c *AccountingControlClient) Get(ctx context.Context, id uuid.UUID) (*AccountingControl, error) {
	return c.Query().Where(accountingcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountingControlClient) GetX(ctx context.Context, id uuid.UUID) *AccountingControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a AccountingControl.
func (c *AccountingControlClient) QueryOrganization(ac *AccountingControl) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountingcontrol.Table, accountingcontrol.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountingcontrol.OrganizationTable, accountingcontrol.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessUnit queries the business_unit edge of a AccountingControl.
func (c *AccountingControlClient) QueryBusinessUnit(ac *AccountingControl) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountingcontrol.Table, accountingcontrol.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountingcontrol.BusinessUnitTable, accountingcontrol.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultRevAccount queries the default_rev_account edge of a AccountingControl.
func (c *AccountingControlClient) QueryDefaultRevAccount(ac *AccountingControl) *GeneralLedgerAccountQuery {
	query := (&GeneralLedgerAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountingcontrol.Table, accountingcontrol.FieldID, id),
			sqlgraph.To(generalledgeraccount.Table, generalledgeraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountingcontrol.DefaultRevAccountTable, accountingcontrol.DefaultRevAccountColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultExpAccount queries the default_exp_account edge of a AccountingControl.
func (c *AccountingControlClient) QueryDefaultExpAccount(ac *AccountingControl) *GeneralLedgerAccountQuery {
	query := (&GeneralLedgerAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountingcontrol.Table, accountingcontrol.FieldID, id),
			sqlgraph.To(generalledgeraccount.Table, generalledgeraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountingcontrol.DefaultExpAccountTable, accountingcontrol.DefaultExpAccountColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountingControlClient) Hooks() []Hook {
	return c.hooks.AccountingControl
}

// Interceptors returns the client interceptors.
func (c *AccountingControlClient) Interceptors() []Interceptor {
	return c.inters.AccountingControl
}

func (c *AccountingControlClient) mutate(ctx context.Context, m *AccountingControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountingControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountingControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountingControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountingControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AccountingControl mutation op: %q", m.Op())
	}
}

// BusinessUnitClient is a client for the BusinessUnit schema.
type BusinessUnitClient struct {
	config
}

// NewBusinessUnitClient returns a client for the BusinessUnit from the given config.
func NewBusinessUnitClient(c config) *BusinessUnitClient {
	return &BusinessUnitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `businessunit.Hooks(f(g(h())))`.
func (c *BusinessUnitClient) Use(hooks ...Hook) {
	c.hooks.BusinessUnit = append(c.hooks.BusinessUnit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `businessunit.Intercept(f(g(h())))`.
func (c *BusinessUnitClient) Intercept(interceptors ...Interceptor) {
	c.inters.BusinessUnit = append(c.inters.BusinessUnit, interceptors...)
}

// Create returns a builder for creating a BusinessUnit entity.
func (c *BusinessUnitClient) Create() *BusinessUnitCreate {
	mutation := newBusinessUnitMutation(c.config, OpCreate)
	return &BusinessUnitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BusinessUnit entities.
func (c *BusinessUnitClient) CreateBulk(builders ...*BusinessUnitCreate) *BusinessUnitCreateBulk {
	return &BusinessUnitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BusinessUnitClient) MapCreateBulk(slice any, setFunc func(*BusinessUnitCreate, int)) *BusinessUnitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BusinessUnitCreateBulk{err: fmt.Errorf("calling to BusinessUnitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BusinessUnitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BusinessUnitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BusinessUnit.
func (c *BusinessUnitClient) Update() *BusinessUnitUpdate {
	mutation := newBusinessUnitMutation(c.config, OpUpdate)
	return &BusinessUnitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusinessUnitClient) UpdateOne(bu *BusinessUnit) *BusinessUnitUpdateOne {
	mutation := newBusinessUnitMutation(c.config, OpUpdateOne, withBusinessUnit(bu))
	return &BusinessUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusinessUnitClient) UpdateOneID(id uuid.UUID) *BusinessUnitUpdateOne {
	mutation := newBusinessUnitMutation(c.config, OpUpdateOne, withBusinessUnitID(id))
	return &BusinessUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BusinessUnit.
func (c *BusinessUnitClient) Delete() *BusinessUnitDelete {
	mutation := newBusinessUnitMutation(c.config, OpDelete)
	return &BusinessUnitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusinessUnitClient) DeleteOne(bu *BusinessUnit) *BusinessUnitDeleteOne {
	return c.DeleteOneID(bu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusinessUnitClient) DeleteOneID(id uuid.UUID) *BusinessUnitDeleteOne {
	builder := c.Delete().Where(businessunit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusinessUnitDeleteOne{builder}
}

// Query returns a query builder for BusinessUnit.
func (c *BusinessUnitClient) Query() *BusinessUnitQuery {
	return &BusinessUnitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBusinessUnit},
		inters: c.Interceptors(),
	}
}

// Get returns a BusinessUnit entity by its id.
func (c *BusinessUnitClient) Get(ctx context.Context, id uuid.UUID) (*BusinessUnit, error) {
	return c.Query().Where(businessunit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusinessUnitClient) GetX(ctx context.Context, id uuid.UUID) *BusinessUnit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrev queries the prev edge of a BusinessUnit.
func (c *BusinessUnitClient) QueryPrev(bu *BusinessUnit) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(businessunit.Table, businessunit.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, businessunit.PrevTable, businessunit.PrevColumn),
		)
		fromV = sqlgraph.Neighbors(bu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNext queries the next edge of a BusinessUnit.
func (c *BusinessUnitClient) QueryNext(bu *BusinessUnit) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(businessunit.Table, businessunit.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, businessunit.NextTable, businessunit.NextColumn),
		)
		fromV = sqlgraph.Neighbors(bu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizations queries the organizations edge of a BusinessUnit.
func (c *BusinessUnitClient) QueryOrganizations(bu *BusinessUnit) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(businessunit.Table, businessunit.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, businessunit.OrganizationsTable, businessunit.OrganizationsColumn),
		)
		fromV = sqlgraph.Neighbors(bu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusinessUnitClient) Hooks() []Hook {
	return c.hooks.BusinessUnit
}

// Interceptors returns the client interceptors.
func (c *BusinessUnitClient) Interceptors() []Interceptor {
	return c.inters.BusinessUnit
}

func (c *BusinessUnitClient) mutate(ctx context.Context, m *BusinessUnitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusinessUnitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusinessUnitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusinessUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusinessUnitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BusinessUnit mutation op: %q", m.Op())
	}
}

// GeneralLedgerAccountClient is a client for the GeneralLedgerAccount schema.
type GeneralLedgerAccountClient struct {
	config
}

// NewGeneralLedgerAccountClient returns a client for the GeneralLedgerAccount from the given config.
func NewGeneralLedgerAccountClient(c config) *GeneralLedgerAccountClient {
	return &GeneralLedgerAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `generalledgeraccount.Hooks(f(g(h())))`.
func (c *GeneralLedgerAccountClient) Use(hooks ...Hook) {
	c.hooks.GeneralLedgerAccount = append(c.hooks.GeneralLedgerAccount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `generalledgeraccount.Intercept(f(g(h())))`.
func (c *GeneralLedgerAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.GeneralLedgerAccount = append(c.inters.GeneralLedgerAccount, interceptors...)
}

// Create returns a builder for creating a GeneralLedgerAccount entity.
func (c *GeneralLedgerAccountClient) Create() *GeneralLedgerAccountCreate {
	mutation := newGeneralLedgerAccountMutation(c.config, OpCreate)
	return &GeneralLedgerAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GeneralLedgerAccount entities.
func (c *GeneralLedgerAccountClient) CreateBulk(builders ...*GeneralLedgerAccountCreate) *GeneralLedgerAccountCreateBulk {
	return &GeneralLedgerAccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GeneralLedgerAccountClient) MapCreateBulk(slice any, setFunc func(*GeneralLedgerAccountCreate, int)) *GeneralLedgerAccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GeneralLedgerAccountCreateBulk{err: fmt.Errorf("calling to GeneralLedgerAccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GeneralLedgerAccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GeneralLedgerAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) Update() *GeneralLedgerAccountUpdate {
	mutation := newGeneralLedgerAccountMutation(c.config, OpUpdate)
	return &GeneralLedgerAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GeneralLedgerAccountClient) UpdateOne(gla *GeneralLedgerAccount) *GeneralLedgerAccountUpdateOne {
	mutation := newGeneralLedgerAccountMutation(c.config, OpUpdateOne, withGeneralLedgerAccount(gla))
	return &GeneralLedgerAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GeneralLedgerAccountClient) UpdateOneID(id uuid.UUID) *GeneralLedgerAccountUpdateOne {
	mutation := newGeneralLedgerAccountMutation(c.config, OpUpdateOne, withGeneralLedgerAccountID(id))
	return &GeneralLedgerAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) Delete() *GeneralLedgerAccountDelete {
	mutation := newGeneralLedgerAccountMutation(c.config, OpDelete)
	return &GeneralLedgerAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GeneralLedgerAccountClient) DeleteOne(gla *GeneralLedgerAccount) *GeneralLedgerAccountDeleteOne {
	return c.DeleteOneID(gla.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GeneralLedgerAccountClient) DeleteOneID(id uuid.UUID) *GeneralLedgerAccountDeleteOne {
	builder := c.Delete().Where(generalledgeraccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GeneralLedgerAccountDeleteOne{builder}
}

// Query returns a query builder for GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) Query() *GeneralLedgerAccountQuery {
	return &GeneralLedgerAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGeneralLedgerAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a GeneralLedgerAccount entity by its id.
func (c *GeneralLedgerAccountClient) Get(ctx context.Context, id uuid.UUID) (*GeneralLedgerAccount, error) {
	return c.Query().Where(generalledgeraccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GeneralLedgerAccountClient) GetX(ctx context.Context, id uuid.UUID) *GeneralLedgerAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) QueryBusinessUnit(gla *GeneralLedgerAccount) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gla.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalledgeraccount.Table, generalledgeraccount.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, generalledgeraccount.BusinessUnitTable, generalledgeraccount.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(gla.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) QueryOrganization(gla *GeneralLedgerAccount) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gla.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalledgeraccount.Table, generalledgeraccount.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, generalledgeraccount.OrganizationTable, generalledgeraccount.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(gla.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) QueryTags(gla *GeneralLedgerAccount) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gla.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalledgeraccount.Table, generalledgeraccount.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, generalledgeraccount.TagsTable, generalledgeraccount.TagsColumn),
		)
		fromV = sqlgraph.Neighbors(gla.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GeneralLedgerAccountClient) Hooks() []Hook {
	return c.hooks.GeneralLedgerAccount
}

// Interceptors returns the client interceptors.
func (c *GeneralLedgerAccountClient) Interceptors() []Interceptor {
	return c.inters.GeneralLedgerAccount
}

func (c *GeneralLedgerAccountClient) mutate(ctx context.Context, m *GeneralLedgerAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GeneralLedgerAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GeneralLedgerAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GeneralLedgerAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GeneralLedgerAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GeneralLedgerAccount mutation op: %q", m.Op())
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationClient) MapCreateBulk(slice any, setFunc func(*OrganizationCreate, int)) *OrganizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationCreateBulk{err: fmt.Errorf("calling to OrganizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id uuid.UUID) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id uuid.UUID) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id uuid.UUID) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id uuid.UUID) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a Organization.
func (c *OrganizationClient) QueryBusinessUnit(o *Organization) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organization.BusinessUnitTable, organization.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccountingControl queries the accounting_control edge of a Organization.
func (c *OrganizationClient) QueryAccountingControl(o *Organization) *AccountingControlQuery {
	query := (&AccountingControlClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(accountingcontrol.Table, accountingcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organization.AccountingControlTable, organization.AccountingControlColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	return c.inters.Organization
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Organization mutation op: %q", m.Op())
	}
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tag.Intercept(f(g(h())))`.
func (c *TagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tag = append(c.inters.Tag, interceptors...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagClient) MapCreateBulk(slice any, setFunc func(*TagCreate, int)) *TagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagCreateBulk{err: fmt.Errorf("calling to TagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id uuid.UUID) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id uuid.UUID) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id uuid.UUID) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id uuid.UUID) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a Tag.
func (c *TagClient) QueryBusinessUnit(t *Tag) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tag.BusinessUnitTable, tag.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Tag.
func (c *TagClient) QueryOrganization(t *Tag) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tag.OrganizationTable, tag.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// Interceptors returns the client interceptors.
func (c *TagClient) Interceptors() []Interceptor {
	return c.inters.Tag
}

func (c *TagClient) mutate(ctx context.Context, m *TagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tag mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a User.
func (c *UserClient) QueryBusinessUnit(u *User) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.BusinessUnitTable, user.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a User.
func (c *UserClient) QueryOrganization(u *User) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.OrganizationTable, user.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AccountingControl, BusinessUnit, GeneralLedgerAccount, Organization, Tag,
		User []ent.Hook
	}
	inters struct {
		AccountingControl, BusinessUnit, GeneralLedgerAccount, Organization, Tag,
		User []ent.Interceptor
	}
)
