// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/emoss08/trenova/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/accessorialcharge"
	"github.com/emoss08/trenova/ent/accountingcontrol"
	"github.com/emoss08/trenova/ent/billingcontrol"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/chargetype"
	"github.com/emoss08/trenova/ent/commenttype"
	"github.com/emoss08/trenova/ent/commodity"
	"github.com/emoss08/trenova/ent/customer"
	"github.com/emoss08/trenova/ent/delaycode"
	"github.com/emoss08/trenova/ent/dispatchcontrol"
	"github.com/emoss08/trenova/ent/divisioncode"
	"github.com/emoss08/trenova/ent/emailcontrol"
	"github.com/emoss08/trenova/ent/emailprofile"
	"github.com/emoss08/trenova/ent/equipmentmanufactuer"
	"github.com/emoss08/trenova/ent/equipmenttype"
	"github.com/emoss08/trenova/ent/feasibilitytoolcontrol"
	"github.com/emoss08/trenova/ent/fleetcode"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/hazardousmaterial"
	"github.com/emoss08/trenova/ent/invoicecontrol"
	"github.com/emoss08/trenova/ent/locationcategory"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/qualifiercode"
	"github.com/emoss08/trenova/ent/revenuecode"
	"github.com/emoss08/trenova/ent/routecontrol"
	"github.com/emoss08/trenova/ent/servicetype"
	"github.com/emoss08/trenova/ent/session"
	"github.com/emoss08/trenova/ent/shipmentcontrol"
	"github.com/emoss08/trenova/ent/shipmenttype"
	"github.com/emoss08/trenova/ent/tablechangealert"
	"github.com/emoss08/trenova/ent/tag"
	"github.com/emoss08/trenova/ent/user"
	"github.com/emoss08/trenova/ent/userfavorite"
	"github.com/emoss08/trenova/ent/usstate"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccessorialCharge is the client for interacting with the AccessorialCharge builders.
	AccessorialCharge *AccessorialChargeClient
	// AccountingControl is the client for interacting with the AccountingControl builders.
	AccountingControl *AccountingControlClient
	// BillingControl is the client for interacting with the BillingControl builders.
	BillingControl *BillingControlClient
	// BusinessUnit is the client for interacting with the BusinessUnit builders.
	BusinessUnit *BusinessUnitClient
	// ChargeType is the client for interacting with the ChargeType builders.
	ChargeType *ChargeTypeClient
	// CommentType is the client for interacting with the CommentType builders.
	CommentType *CommentTypeClient
	// Commodity is the client for interacting with the Commodity builders.
	Commodity *CommodityClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// DelayCode is the client for interacting with the DelayCode builders.
	DelayCode *DelayCodeClient
	// DispatchControl is the client for interacting with the DispatchControl builders.
	DispatchControl *DispatchControlClient
	// DivisionCode is the client for interacting with the DivisionCode builders.
	DivisionCode *DivisionCodeClient
	// EmailControl is the client for interacting with the EmailControl builders.
	EmailControl *EmailControlClient
	// EmailProfile is the client for interacting with the EmailProfile builders.
	EmailProfile *EmailProfileClient
	// EquipmentManufactuer is the client for interacting with the EquipmentManufactuer builders.
	EquipmentManufactuer *EquipmentManufactuerClient
	// EquipmentType is the client for interacting with the EquipmentType builders.
	EquipmentType *EquipmentTypeClient
	// FeasibilityToolControl is the client for interacting with the FeasibilityToolControl builders.
	FeasibilityToolControl *FeasibilityToolControlClient
	// FleetCode is the client for interacting with the FleetCode builders.
	FleetCode *FleetCodeClient
	// GeneralLedgerAccount is the client for interacting with the GeneralLedgerAccount builders.
	GeneralLedgerAccount *GeneralLedgerAccountClient
	// HazardousMaterial is the client for interacting with the HazardousMaterial builders.
	HazardousMaterial *HazardousMaterialClient
	// InvoiceControl is the client for interacting with the InvoiceControl builders.
	InvoiceControl *InvoiceControlClient
	// LocationCategory is the client for interacting with the LocationCategory builders.
	LocationCategory *LocationCategoryClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// QualifierCode is the client for interacting with the QualifierCode builders.
	QualifierCode *QualifierCodeClient
	// RevenueCode is the client for interacting with the RevenueCode builders.
	RevenueCode *RevenueCodeClient
	// RouteControl is the client for interacting with the RouteControl builders.
	RouteControl *RouteControlClient
	// ServiceType is the client for interacting with the ServiceType builders.
	ServiceType *ServiceTypeClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// ShipmentControl is the client for interacting with the ShipmentControl builders.
	ShipmentControl *ShipmentControlClient
	// ShipmentType is the client for interacting with the ShipmentType builders.
	ShipmentType *ShipmentTypeClient
	// TableChangeAlert is the client for interacting with the TableChangeAlert builders.
	TableChangeAlert *TableChangeAlertClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// UsState is the client for interacting with the UsState builders.
	UsState *UsStateClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserFavorite is the client for interacting with the UserFavorite builders.
	UserFavorite *UserFavoriteClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccessorialCharge = NewAccessorialChargeClient(c.config)
	c.AccountingControl = NewAccountingControlClient(c.config)
	c.BillingControl = NewBillingControlClient(c.config)
	c.BusinessUnit = NewBusinessUnitClient(c.config)
	c.ChargeType = NewChargeTypeClient(c.config)
	c.CommentType = NewCommentTypeClient(c.config)
	c.Commodity = NewCommodityClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.DelayCode = NewDelayCodeClient(c.config)
	c.DispatchControl = NewDispatchControlClient(c.config)
	c.DivisionCode = NewDivisionCodeClient(c.config)
	c.EmailControl = NewEmailControlClient(c.config)
	c.EmailProfile = NewEmailProfileClient(c.config)
	c.EquipmentManufactuer = NewEquipmentManufactuerClient(c.config)
	c.EquipmentType = NewEquipmentTypeClient(c.config)
	c.FeasibilityToolControl = NewFeasibilityToolControlClient(c.config)
	c.FleetCode = NewFleetCodeClient(c.config)
	c.GeneralLedgerAccount = NewGeneralLedgerAccountClient(c.config)
	c.HazardousMaterial = NewHazardousMaterialClient(c.config)
	c.InvoiceControl = NewInvoiceControlClient(c.config)
	c.LocationCategory = NewLocationCategoryClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.QualifierCode = NewQualifierCodeClient(c.config)
	c.RevenueCode = NewRevenueCodeClient(c.config)
	c.RouteControl = NewRouteControlClient(c.config)
	c.ServiceType = NewServiceTypeClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.ShipmentControl = NewShipmentControlClient(c.config)
	c.ShipmentType = NewShipmentTypeClient(c.config)
	c.TableChangeAlert = NewTableChangeAlertClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.UsState = NewUsStateClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserFavorite = NewUserFavoriteClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		AccessorialCharge:      NewAccessorialChargeClient(cfg),
		AccountingControl:      NewAccountingControlClient(cfg),
		BillingControl:         NewBillingControlClient(cfg),
		BusinessUnit:           NewBusinessUnitClient(cfg),
		ChargeType:             NewChargeTypeClient(cfg),
		CommentType:            NewCommentTypeClient(cfg),
		Commodity:              NewCommodityClient(cfg),
		Customer:               NewCustomerClient(cfg),
		DelayCode:              NewDelayCodeClient(cfg),
		DispatchControl:        NewDispatchControlClient(cfg),
		DivisionCode:           NewDivisionCodeClient(cfg),
		EmailControl:           NewEmailControlClient(cfg),
		EmailProfile:           NewEmailProfileClient(cfg),
		EquipmentManufactuer:   NewEquipmentManufactuerClient(cfg),
		EquipmentType:          NewEquipmentTypeClient(cfg),
		FeasibilityToolControl: NewFeasibilityToolControlClient(cfg),
		FleetCode:              NewFleetCodeClient(cfg),
		GeneralLedgerAccount:   NewGeneralLedgerAccountClient(cfg),
		HazardousMaterial:      NewHazardousMaterialClient(cfg),
		InvoiceControl:         NewInvoiceControlClient(cfg),
		LocationCategory:       NewLocationCategoryClient(cfg),
		Organization:           NewOrganizationClient(cfg),
		QualifierCode:          NewQualifierCodeClient(cfg),
		RevenueCode:            NewRevenueCodeClient(cfg),
		RouteControl:           NewRouteControlClient(cfg),
		ServiceType:            NewServiceTypeClient(cfg),
		Session:                NewSessionClient(cfg),
		ShipmentControl:        NewShipmentControlClient(cfg),
		ShipmentType:           NewShipmentTypeClient(cfg),
		TableChangeAlert:       NewTableChangeAlertClient(cfg),
		Tag:                    NewTagClient(cfg),
		UsState:                NewUsStateClient(cfg),
		User:                   NewUserClient(cfg),
		UserFavorite:           NewUserFavoriteClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		AccessorialCharge:      NewAccessorialChargeClient(cfg),
		AccountingControl:      NewAccountingControlClient(cfg),
		BillingControl:         NewBillingControlClient(cfg),
		BusinessUnit:           NewBusinessUnitClient(cfg),
		ChargeType:             NewChargeTypeClient(cfg),
		CommentType:            NewCommentTypeClient(cfg),
		Commodity:              NewCommodityClient(cfg),
		Customer:               NewCustomerClient(cfg),
		DelayCode:              NewDelayCodeClient(cfg),
		DispatchControl:        NewDispatchControlClient(cfg),
		DivisionCode:           NewDivisionCodeClient(cfg),
		EmailControl:           NewEmailControlClient(cfg),
		EmailProfile:           NewEmailProfileClient(cfg),
		EquipmentManufactuer:   NewEquipmentManufactuerClient(cfg),
		EquipmentType:          NewEquipmentTypeClient(cfg),
		FeasibilityToolControl: NewFeasibilityToolControlClient(cfg),
		FleetCode:              NewFleetCodeClient(cfg),
		GeneralLedgerAccount:   NewGeneralLedgerAccountClient(cfg),
		HazardousMaterial:      NewHazardousMaterialClient(cfg),
		InvoiceControl:         NewInvoiceControlClient(cfg),
		LocationCategory:       NewLocationCategoryClient(cfg),
		Organization:           NewOrganizationClient(cfg),
		QualifierCode:          NewQualifierCodeClient(cfg),
		RevenueCode:            NewRevenueCodeClient(cfg),
		RouteControl:           NewRouteControlClient(cfg),
		ServiceType:            NewServiceTypeClient(cfg),
		Session:                NewSessionClient(cfg),
		ShipmentControl:        NewShipmentControlClient(cfg),
		ShipmentType:           NewShipmentTypeClient(cfg),
		TableChangeAlert:       NewTableChangeAlertClient(cfg),
		Tag:                    NewTagClient(cfg),
		UsState:                NewUsStateClient(cfg),
		User:                   NewUserClient(cfg),
		UserFavorite:           NewUserFavoriteClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccessorialCharge.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AccessorialCharge, c.AccountingControl, c.BillingControl, c.BusinessUnit,
		c.ChargeType, c.CommentType, c.Commodity, c.Customer, c.DelayCode,
		c.DispatchControl, c.DivisionCode, c.EmailControl, c.EmailProfile,
		c.EquipmentManufactuer, c.EquipmentType, c.FeasibilityToolControl, c.FleetCode,
		c.GeneralLedgerAccount, c.HazardousMaterial, c.InvoiceControl,
		c.LocationCategory, c.Organization, c.QualifierCode, c.RevenueCode,
		c.RouteControl, c.ServiceType, c.Session, c.ShipmentControl, c.ShipmentType,
		c.TableChangeAlert, c.Tag, c.UsState, c.User, c.UserFavorite,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AccessorialCharge, c.AccountingControl, c.BillingControl, c.BusinessUnit,
		c.ChargeType, c.CommentType, c.Commodity, c.Customer, c.DelayCode,
		c.DispatchControl, c.DivisionCode, c.EmailControl, c.EmailProfile,
		c.EquipmentManufactuer, c.EquipmentType, c.FeasibilityToolControl, c.FleetCode,
		c.GeneralLedgerAccount, c.HazardousMaterial, c.InvoiceControl,
		c.LocationCategory, c.Organization, c.QualifierCode, c.RevenueCode,
		c.RouteControl, c.ServiceType, c.Session, c.ShipmentControl, c.ShipmentType,
		c.TableChangeAlert, c.Tag, c.UsState, c.User, c.UserFavorite,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccessorialChargeMutation:
		return c.AccessorialCharge.mutate(ctx, m)
	case *AccountingControlMutation:
		return c.AccountingControl.mutate(ctx, m)
	case *BillingControlMutation:
		return c.BillingControl.mutate(ctx, m)
	case *BusinessUnitMutation:
		return c.BusinessUnit.mutate(ctx, m)
	case *ChargeTypeMutation:
		return c.ChargeType.mutate(ctx, m)
	case *CommentTypeMutation:
		return c.CommentType.mutate(ctx, m)
	case *CommodityMutation:
		return c.Commodity.mutate(ctx, m)
	case *CustomerMutation:
		return c.Customer.mutate(ctx, m)
	case *DelayCodeMutation:
		return c.DelayCode.mutate(ctx, m)
	case *DispatchControlMutation:
		return c.DispatchControl.mutate(ctx, m)
	case *DivisionCodeMutation:
		return c.DivisionCode.mutate(ctx, m)
	case *EmailControlMutation:
		return c.EmailControl.mutate(ctx, m)
	case *EmailProfileMutation:
		return c.EmailProfile.mutate(ctx, m)
	case *EquipmentManufactuerMutation:
		return c.EquipmentManufactuer.mutate(ctx, m)
	case *EquipmentTypeMutation:
		return c.EquipmentType.mutate(ctx, m)
	case *FeasibilityToolControlMutation:
		return c.FeasibilityToolControl.mutate(ctx, m)
	case *FleetCodeMutation:
		return c.FleetCode.mutate(ctx, m)
	case *GeneralLedgerAccountMutation:
		return c.GeneralLedgerAccount.mutate(ctx, m)
	case *HazardousMaterialMutation:
		return c.HazardousMaterial.mutate(ctx, m)
	case *InvoiceControlMutation:
		return c.InvoiceControl.mutate(ctx, m)
	case *LocationCategoryMutation:
		return c.LocationCategory.mutate(ctx, m)
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *QualifierCodeMutation:
		return c.QualifierCode.mutate(ctx, m)
	case *RevenueCodeMutation:
		return c.RevenueCode.mutate(ctx, m)
	case *RouteControlMutation:
		return c.RouteControl.mutate(ctx, m)
	case *ServiceTypeMutation:
		return c.ServiceType.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *ShipmentControlMutation:
		return c.ShipmentControl.mutate(ctx, m)
	case *ShipmentTypeMutation:
		return c.ShipmentType.mutate(ctx, m)
	case *TableChangeAlertMutation:
		return c.TableChangeAlert.mutate(ctx, m)
	case *TagMutation:
		return c.Tag.mutate(ctx, m)
	case *UsStateMutation:
		return c.UsState.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserFavoriteMutation:
		return c.UserFavorite.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccessorialChargeClient is a client for the AccessorialCharge schema.
type AccessorialChargeClient struct {
	config
}

// NewAccessorialChargeClient returns a client for the AccessorialCharge from the given config.
func NewAccessorialChargeClient(c config) *AccessorialChargeClient {
	return &AccessorialChargeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accessorialcharge.Hooks(f(g(h())))`.
func (c *AccessorialChargeClient) Use(hooks ...Hook) {
	c.hooks.AccessorialCharge = append(c.hooks.AccessorialCharge, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accessorialcharge.Intercept(f(g(h())))`.
func (c *AccessorialChargeClient) Intercept(interceptors ...Interceptor) {
	c.inters.AccessorialCharge = append(c.inters.AccessorialCharge, interceptors...)
}

// Create returns a builder for creating a AccessorialCharge entity.
func (c *AccessorialChargeClient) Create() *AccessorialChargeCreate {
	mutation := newAccessorialChargeMutation(c.config, OpCreate)
	return &AccessorialChargeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccessorialCharge entities.
func (c *AccessorialChargeClient) CreateBulk(builders ...*AccessorialChargeCreate) *AccessorialChargeCreateBulk {
	return &AccessorialChargeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccessorialChargeClient) MapCreateBulk(slice any, setFunc func(*AccessorialChargeCreate, int)) *AccessorialChargeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccessorialChargeCreateBulk{err: fmt.Errorf("calling to AccessorialChargeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccessorialChargeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccessorialChargeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccessorialCharge.
func (c *AccessorialChargeClient) Update() *AccessorialChargeUpdate {
	mutation := newAccessorialChargeMutation(c.config, OpUpdate)
	return &AccessorialChargeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessorialChargeClient) UpdateOne(ac *AccessorialCharge) *AccessorialChargeUpdateOne {
	mutation := newAccessorialChargeMutation(c.config, OpUpdateOne, withAccessorialCharge(ac))
	return &AccessorialChargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessorialChargeClient) UpdateOneID(id uuid.UUID) *AccessorialChargeUpdateOne {
	mutation := newAccessorialChargeMutation(c.config, OpUpdateOne, withAccessorialChargeID(id))
	return &AccessorialChargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccessorialCharge.
func (c *AccessorialChargeClient) Delete() *AccessorialChargeDelete {
	mutation := newAccessorialChargeMutation(c.config, OpDelete)
	return &AccessorialChargeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccessorialChargeClient) DeleteOne(ac *AccessorialCharge) *AccessorialChargeDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccessorialChargeClient) DeleteOneID(id uuid.UUID) *AccessorialChargeDeleteOne {
	builder := c.Delete().Where(accessorialcharge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessorialChargeDeleteOne{builder}
}

// Query returns a query builder for AccessorialCharge.
func (c *AccessorialChargeClient) Query() *AccessorialChargeQuery {
	return &AccessorialChargeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccessorialCharge},
		inters: c.Interceptors(),
	}
}

// Get returns a AccessorialCharge entity by its id.
func (c *AccessorialChargeClient) Get(ctx context.Context, id uuid.UUID) (*AccessorialCharge, error) {
	return c.Query().Where(accessorialcharge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessorialChargeClient) GetX(ctx context.Context, id uuid.UUID) *AccessorialCharge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a AccessorialCharge.
func (c *AccessorialChargeClient) QueryBusinessUnit(ac *AccessorialCharge) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accessorialcharge.Table, accessorialcharge.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accessorialcharge.BusinessUnitTable, accessorialcharge.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a AccessorialCharge.
func (c *AccessorialChargeClient) QueryOrganization(ac *AccessorialCharge) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accessorialcharge.Table, accessorialcharge.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accessorialcharge.OrganizationTable, accessorialcharge.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccessorialChargeClient) Hooks() []Hook {
	return c.hooks.AccessorialCharge
}

// Interceptors returns the client interceptors.
func (c *AccessorialChargeClient) Interceptors() []Interceptor {
	return c.inters.AccessorialCharge
}

func (c *AccessorialChargeClient) mutate(ctx context.Context, m *AccessorialChargeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccessorialChargeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccessorialChargeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccessorialChargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccessorialChargeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AccessorialCharge mutation op: %q", m.Op())
	}
}

// AccountingControlClient is a client for the AccountingControl schema.
type AccountingControlClient struct {
	config
}

// NewAccountingControlClient returns a client for the AccountingControl from the given config.
func NewAccountingControlClient(c config) *AccountingControlClient {
	return &AccountingControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accountingcontrol.Hooks(f(g(h())))`.
func (c *AccountingControlClient) Use(hooks ...Hook) {
	c.hooks.AccountingControl = append(c.hooks.AccountingControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accountingcontrol.Intercept(f(g(h())))`.
func (c *AccountingControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.AccountingControl = append(c.inters.AccountingControl, interceptors...)
}

// Create returns a builder for creating a AccountingControl entity.
func (c *AccountingControlClient) Create() *AccountingControlCreate {
	mutation := newAccountingControlMutation(c.config, OpCreate)
	return &AccountingControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccountingControl entities.
func (c *AccountingControlClient) CreateBulk(builders ...*AccountingControlCreate) *AccountingControlCreateBulk {
	return &AccountingControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountingControlClient) MapCreateBulk(slice any, setFunc func(*AccountingControlCreate, int)) *AccountingControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountingControlCreateBulk{err: fmt.Errorf("calling to AccountingControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountingControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountingControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccountingControl.
func (c *AccountingControlClient) Update() *AccountingControlUpdate {
	mutation := newAccountingControlMutation(c.config, OpUpdate)
	return &AccountingControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountingControlClient) UpdateOne(ac *AccountingControl) *AccountingControlUpdateOne {
	mutation := newAccountingControlMutation(c.config, OpUpdateOne, withAccountingControl(ac))
	return &AccountingControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountingControlClient) UpdateOneID(id uuid.UUID) *AccountingControlUpdateOne {
	mutation := newAccountingControlMutation(c.config, OpUpdateOne, withAccountingControlID(id))
	return &AccountingControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccountingControl.
func (c *AccountingControlClient) Delete() *AccountingControlDelete {
	mutation := newAccountingControlMutation(c.config, OpDelete)
	return &AccountingControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountingControlClient) DeleteOne(ac *AccountingControl) *AccountingControlDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountingControlClient) DeleteOneID(id uuid.UUID) *AccountingControlDeleteOne {
	builder := c.Delete().Where(accountingcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountingControlDeleteOne{builder}
}

// Query returns a query builder for AccountingControl.
func (c *AccountingControlClient) Query() *AccountingControlQuery {
	return &AccountingControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccountingControl},
		inters: c.Interceptors(),
	}
}

// Get returns a AccountingControl entity by its id.
func (c *AccountingControlClient) Get(ctx context.Context, id uuid.UUID) (*AccountingControl, error) {
	return c.Query().Where(accountingcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountingControlClient) GetX(ctx context.Context, id uuid.UUID) *AccountingControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a AccountingControl.
func (c *AccountingControlClient) QueryOrganization(ac *AccountingControl) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountingcontrol.Table, accountingcontrol.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, accountingcontrol.OrganizationTable, accountingcontrol.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessUnit queries the business_unit edge of a AccountingControl.
func (c *AccountingControlClient) QueryBusinessUnit(ac *AccountingControl) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountingcontrol.Table, accountingcontrol.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountingcontrol.BusinessUnitTable, accountingcontrol.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultRevAccount queries the default_rev_account edge of a AccountingControl.
func (c *AccountingControlClient) QueryDefaultRevAccount(ac *AccountingControl) *GeneralLedgerAccountQuery {
	query := (&GeneralLedgerAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountingcontrol.Table, accountingcontrol.FieldID, id),
			sqlgraph.To(generalledgeraccount.Table, generalledgeraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountingcontrol.DefaultRevAccountTable, accountingcontrol.DefaultRevAccountColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultExpAccount queries the default_exp_account edge of a AccountingControl.
func (c *AccountingControlClient) QueryDefaultExpAccount(ac *AccountingControl) *GeneralLedgerAccountQuery {
	query := (&GeneralLedgerAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountingcontrol.Table, accountingcontrol.FieldID, id),
			sqlgraph.To(generalledgeraccount.Table, generalledgeraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountingcontrol.DefaultExpAccountTable, accountingcontrol.DefaultExpAccountColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountingControlClient) Hooks() []Hook {
	return c.hooks.AccountingControl
}

// Interceptors returns the client interceptors.
func (c *AccountingControlClient) Interceptors() []Interceptor {
	return c.inters.AccountingControl
}

func (c *AccountingControlClient) mutate(ctx context.Context, m *AccountingControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountingControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountingControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountingControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountingControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AccountingControl mutation op: %q", m.Op())
	}
}

// BillingControlClient is a client for the BillingControl schema.
type BillingControlClient struct {
	config
}

// NewBillingControlClient returns a client for the BillingControl from the given config.
func NewBillingControlClient(c config) *BillingControlClient {
	return &BillingControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingcontrol.Hooks(f(g(h())))`.
func (c *BillingControlClient) Use(hooks ...Hook) {
	c.hooks.BillingControl = append(c.hooks.BillingControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingcontrol.Intercept(f(g(h())))`.
func (c *BillingControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingControl = append(c.inters.BillingControl, interceptors...)
}

// Create returns a builder for creating a BillingControl entity.
func (c *BillingControlClient) Create() *BillingControlCreate {
	mutation := newBillingControlMutation(c.config, OpCreate)
	return &BillingControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingControl entities.
func (c *BillingControlClient) CreateBulk(builders ...*BillingControlCreate) *BillingControlCreateBulk {
	return &BillingControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingControlClient) MapCreateBulk(slice any, setFunc func(*BillingControlCreate, int)) *BillingControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingControlCreateBulk{err: fmt.Errorf("calling to BillingControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingControl.
func (c *BillingControlClient) Update() *BillingControlUpdate {
	mutation := newBillingControlMutation(c.config, OpUpdate)
	return &BillingControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingControlClient) UpdateOne(bc *BillingControl) *BillingControlUpdateOne {
	mutation := newBillingControlMutation(c.config, OpUpdateOne, withBillingControl(bc))
	return &BillingControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingControlClient) UpdateOneID(id uuid.UUID) *BillingControlUpdateOne {
	mutation := newBillingControlMutation(c.config, OpUpdateOne, withBillingControlID(id))
	return &BillingControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingControl.
func (c *BillingControlClient) Delete() *BillingControlDelete {
	mutation := newBillingControlMutation(c.config, OpDelete)
	return &BillingControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingControlClient) DeleteOne(bc *BillingControl) *BillingControlDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingControlClient) DeleteOneID(id uuid.UUID) *BillingControlDeleteOne {
	builder := c.Delete().Where(billingcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingControlDeleteOne{builder}
}

// Query returns a query builder for BillingControl.
func (c *BillingControlClient) Query() *BillingControlQuery {
	return &BillingControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingControl},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingControl entity by its id.
func (c *BillingControlClient) Get(ctx context.Context, id uuid.UUID) (*BillingControl, error) {
	return c.Query().Where(billingcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingControlClient) GetX(ctx context.Context, id uuid.UUID) *BillingControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a BillingControl.
func (c *BillingControlClient) QueryOrganization(bc *BillingControl) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingcontrol.Table, billingcontrol.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, billingcontrol.OrganizationTable, billingcontrol.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessUnit queries the business_unit edge of a BillingControl.
func (c *BillingControlClient) QueryBusinessUnit(bc *BillingControl) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingcontrol.Table, billingcontrol.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, billingcontrol.BusinessUnitTable, billingcontrol.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingControlClient) Hooks() []Hook {
	return c.hooks.BillingControl
}

// Interceptors returns the client interceptors.
func (c *BillingControlClient) Interceptors() []Interceptor {
	return c.inters.BillingControl
}

func (c *BillingControlClient) mutate(ctx context.Context, m *BillingControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BillingControl mutation op: %q", m.Op())
	}
}

// BusinessUnitClient is a client for the BusinessUnit schema.
type BusinessUnitClient struct {
	config
}

// NewBusinessUnitClient returns a client for the BusinessUnit from the given config.
func NewBusinessUnitClient(c config) *BusinessUnitClient {
	return &BusinessUnitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `businessunit.Hooks(f(g(h())))`.
func (c *BusinessUnitClient) Use(hooks ...Hook) {
	c.hooks.BusinessUnit = append(c.hooks.BusinessUnit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `businessunit.Intercept(f(g(h())))`.
func (c *BusinessUnitClient) Intercept(interceptors ...Interceptor) {
	c.inters.BusinessUnit = append(c.inters.BusinessUnit, interceptors...)
}

// Create returns a builder for creating a BusinessUnit entity.
func (c *BusinessUnitClient) Create() *BusinessUnitCreate {
	mutation := newBusinessUnitMutation(c.config, OpCreate)
	return &BusinessUnitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BusinessUnit entities.
func (c *BusinessUnitClient) CreateBulk(builders ...*BusinessUnitCreate) *BusinessUnitCreateBulk {
	return &BusinessUnitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BusinessUnitClient) MapCreateBulk(slice any, setFunc func(*BusinessUnitCreate, int)) *BusinessUnitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BusinessUnitCreateBulk{err: fmt.Errorf("calling to BusinessUnitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BusinessUnitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BusinessUnitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BusinessUnit.
func (c *BusinessUnitClient) Update() *BusinessUnitUpdate {
	mutation := newBusinessUnitMutation(c.config, OpUpdate)
	return &BusinessUnitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusinessUnitClient) UpdateOne(bu *BusinessUnit) *BusinessUnitUpdateOne {
	mutation := newBusinessUnitMutation(c.config, OpUpdateOne, withBusinessUnit(bu))
	return &BusinessUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusinessUnitClient) UpdateOneID(id uuid.UUID) *BusinessUnitUpdateOne {
	mutation := newBusinessUnitMutation(c.config, OpUpdateOne, withBusinessUnitID(id))
	return &BusinessUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BusinessUnit.
func (c *BusinessUnitClient) Delete() *BusinessUnitDelete {
	mutation := newBusinessUnitMutation(c.config, OpDelete)
	return &BusinessUnitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusinessUnitClient) DeleteOne(bu *BusinessUnit) *BusinessUnitDeleteOne {
	return c.DeleteOneID(bu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusinessUnitClient) DeleteOneID(id uuid.UUID) *BusinessUnitDeleteOne {
	builder := c.Delete().Where(businessunit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusinessUnitDeleteOne{builder}
}

// Query returns a query builder for BusinessUnit.
func (c *BusinessUnitClient) Query() *BusinessUnitQuery {
	return &BusinessUnitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBusinessUnit},
		inters: c.Interceptors(),
	}
}

// Get returns a BusinessUnit entity by its id.
func (c *BusinessUnitClient) Get(ctx context.Context, id uuid.UUID) (*BusinessUnit, error) {
	return c.Query().Where(businessunit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusinessUnitClient) GetX(ctx context.Context, id uuid.UUID) *BusinessUnit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrev queries the prev edge of a BusinessUnit.
func (c *BusinessUnitClient) QueryPrev(bu *BusinessUnit) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(businessunit.Table, businessunit.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, businessunit.PrevTable, businessunit.PrevColumn),
		)
		fromV = sqlgraph.Neighbors(bu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNext queries the next edge of a BusinessUnit.
func (c *BusinessUnitClient) QueryNext(bu *BusinessUnit) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(businessunit.Table, businessunit.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, businessunit.NextTable, businessunit.NextColumn),
		)
		fromV = sqlgraph.Neighbors(bu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizations queries the organizations edge of a BusinessUnit.
func (c *BusinessUnitClient) QueryOrganizations(bu *BusinessUnit) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(businessunit.Table, businessunit.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, businessunit.OrganizationsTable, businessunit.OrganizationsColumn),
		)
		fromV = sqlgraph.Neighbors(bu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusinessUnitClient) Hooks() []Hook {
	return c.hooks.BusinessUnit
}

// Interceptors returns the client interceptors.
func (c *BusinessUnitClient) Interceptors() []Interceptor {
	return c.inters.BusinessUnit
}

func (c *BusinessUnitClient) mutate(ctx context.Context, m *BusinessUnitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusinessUnitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusinessUnitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusinessUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusinessUnitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BusinessUnit mutation op: %q", m.Op())
	}
}

// ChargeTypeClient is a client for the ChargeType schema.
type ChargeTypeClient struct {
	config
}

// NewChargeTypeClient returns a client for the ChargeType from the given config.
func NewChargeTypeClient(c config) *ChargeTypeClient {
	return &ChargeTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chargetype.Hooks(f(g(h())))`.
func (c *ChargeTypeClient) Use(hooks ...Hook) {
	c.hooks.ChargeType = append(c.hooks.ChargeType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chargetype.Intercept(f(g(h())))`.
func (c *ChargeTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChargeType = append(c.inters.ChargeType, interceptors...)
}

// Create returns a builder for creating a ChargeType entity.
func (c *ChargeTypeClient) Create() *ChargeTypeCreate {
	mutation := newChargeTypeMutation(c.config, OpCreate)
	return &ChargeTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChargeType entities.
func (c *ChargeTypeClient) CreateBulk(builders ...*ChargeTypeCreate) *ChargeTypeCreateBulk {
	return &ChargeTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChargeTypeClient) MapCreateBulk(slice any, setFunc func(*ChargeTypeCreate, int)) *ChargeTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChargeTypeCreateBulk{err: fmt.Errorf("calling to ChargeTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChargeTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChargeTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChargeType.
func (c *ChargeTypeClient) Update() *ChargeTypeUpdate {
	mutation := newChargeTypeMutation(c.config, OpUpdate)
	return &ChargeTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChargeTypeClient) UpdateOne(ct *ChargeType) *ChargeTypeUpdateOne {
	mutation := newChargeTypeMutation(c.config, OpUpdateOne, withChargeType(ct))
	return &ChargeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChargeTypeClient) UpdateOneID(id uuid.UUID) *ChargeTypeUpdateOne {
	mutation := newChargeTypeMutation(c.config, OpUpdateOne, withChargeTypeID(id))
	return &ChargeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChargeType.
func (c *ChargeTypeClient) Delete() *ChargeTypeDelete {
	mutation := newChargeTypeMutation(c.config, OpDelete)
	return &ChargeTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChargeTypeClient) DeleteOne(ct *ChargeType) *ChargeTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChargeTypeClient) DeleteOneID(id uuid.UUID) *ChargeTypeDeleteOne {
	builder := c.Delete().Where(chargetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChargeTypeDeleteOne{builder}
}

// Query returns a query builder for ChargeType.
func (c *ChargeTypeClient) Query() *ChargeTypeQuery {
	return &ChargeTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChargeType},
		inters: c.Interceptors(),
	}
}

// Get returns a ChargeType entity by its id.
func (c *ChargeTypeClient) Get(ctx context.Context, id uuid.UUID) (*ChargeType, error) {
	return c.Query().Where(chargetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChargeTypeClient) GetX(ctx context.Context, id uuid.UUID) *ChargeType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a ChargeType.
func (c *ChargeTypeClient) QueryBusinessUnit(ct *ChargeType) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chargetype.Table, chargetype.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, chargetype.BusinessUnitTable, chargetype.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a ChargeType.
func (c *ChargeTypeClient) QueryOrganization(ct *ChargeType) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chargetype.Table, chargetype.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, chargetype.OrganizationTable, chargetype.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChargeTypeClient) Hooks() []Hook {
	return c.hooks.ChargeType
}

// Interceptors returns the client interceptors.
func (c *ChargeTypeClient) Interceptors() []Interceptor {
	return c.inters.ChargeType
}

func (c *ChargeTypeClient) mutate(ctx context.Context, m *ChargeTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChargeTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChargeTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChargeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChargeTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChargeType mutation op: %q", m.Op())
	}
}

// CommentTypeClient is a client for the CommentType schema.
type CommentTypeClient struct {
	config
}

// NewCommentTypeClient returns a client for the CommentType from the given config.
func NewCommentTypeClient(c config) *CommentTypeClient {
	return &CommentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commenttype.Hooks(f(g(h())))`.
func (c *CommentTypeClient) Use(hooks ...Hook) {
	c.hooks.CommentType = append(c.hooks.CommentType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commenttype.Intercept(f(g(h())))`.
func (c *CommentTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.CommentType = append(c.inters.CommentType, interceptors...)
}

// Create returns a builder for creating a CommentType entity.
func (c *CommentTypeClient) Create() *CommentTypeCreate {
	mutation := newCommentTypeMutation(c.config, OpCreate)
	return &CommentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommentType entities.
func (c *CommentTypeClient) CreateBulk(builders ...*CommentTypeCreate) *CommentTypeCreateBulk {
	return &CommentTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommentTypeClient) MapCreateBulk(slice any, setFunc func(*CommentTypeCreate, int)) *CommentTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommentTypeCreateBulk{err: fmt.Errorf("calling to CommentTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommentTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommentType.
func (c *CommentTypeClient) Update() *CommentTypeUpdate {
	mutation := newCommentTypeMutation(c.config, OpUpdate)
	return &CommentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentTypeClient) UpdateOne(ct *CommentType) *CommentTypeUpdateOne {
	mutation := newCommentTypeMutation(c.config, OpUpdateOne, withCommentType(ct))
	return &CommentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentTypeClient) UpdateOneID(id uuid.UUID) *CommentTypeUpdateOne {
	mutation := newCommentTypeMutation(c.config, OpUpdateOne, withCommentTypeID(id))
	return &CommentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommentType.
func (c *CommentTypeClient) Delete() *CommentTypeDelete {
	mutation := newCommentTypeMutation(c.config, OpDelete)
	return &CommentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentTypeClient) DeleteOne(ct *CommentType) *CommentTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommentTypeClient) DeleteOneID(id uuid.UUID) *CommentTypeDeleteOne {
	builder := c.Delete().Where(commenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentTypeDeleteOne{builder}
}

// Query returns a query builder for CommentType.
func (c *CommentTypeClient) Query() *CommentTypeQuery {
	return &CommentTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommentType},
		inters: c.Interceptors(),
	}
}

// Get returns a CommentType entity by its id.
func (c *CommentTypeClient) Get(ctx context.Context, id uuid.UUID) (*CommentType, error) {
	return c.Query().Where(commenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentTypeClient) GetX(ctx context.Context, id uuid.UUID) *CommentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a CommentType.
func (c *CommentTypeClient) QueryBusinessUnit(ct *CommentType) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commenttype.Table, commenttype.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commenttype.BusinessUnitTable, commenttype.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a CommentType.
func (c *CommentTypeClient) QueryOrganization(ct *CommentType) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commenttype.Table, commenttype.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commenttype.OrganizationTable, commenttype.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommentTypeClient) Hooks() []Hook {
	return c.hooks.CommentType
}

// Interceptors returns the client interceptors.
func (c *CommentTypeClient) Interceptors() []Interceptor {
	return c.inters.CommentType
}

func (c *CommentTypeClient) mutate(ctx context.Context, m *CommentTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CommentType mutation op: %q", m.Op())
	}
}

// CommodityClient is a client for the Commodity schema.
type CommodityClient struct {
	config
}

// NewCommodityClient returns a client for the Commodity from the given config.
func NewCommodityClient(c config) *CommodityClient {
	return &CommodityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commodity.Hooks(f(g(h())))`.
func (c *CommodityClient) Use(hooks ...Hook) {
	c.hooks.Commodity = append(c.hooks.Commodity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commodity.Intercept(f(g(h())))`.
func (c *CommodityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Commodity = append(c.inters.Commodity, interceptors...)
}

// Create returns a builder for creating a Commodity entity.
func (c *CommodityClient) Create() *CommodityCreate {
	mutation := newCommodityMutation(c.config, OpCreate)
	return &CommodityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Commodity entities.
func (c *CommodityClient) CreateBulk(builders ...*CommodityCreate) *CommodityCreateBulk {
	return &CommodityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommodityClient) MapCreateBulk(slice any, setFunc func(*CommodityCreate, int)) *CommodityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommodityCreateBulk{err: fmt.Errorf("calling to CommodityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommodityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommodityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Commodity.
func (c *CommodityClient) Update() *CommodityUpdate {
	mutation := newCommodityMutation(c.config, OpUpdate)
	return &CommodityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommodityClient) UpdateOne(co *Commodity) *CommodityUpdateOne {
	mutation := newCommodityMutation(c.config, OpUpdateOne, withCommodity(co))
	return &CommodityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommodityClient) UpdateOneID(id uuid.UUID) *CommodityUpdateOne {
	mutation := newCommodityMutation(c.config, OpUpdateOne, withCommodityID(id))
	return &CommodityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Commodity.
func (c *CommodityClient) Delete() *CommodityDelete {
	mutation := newCommodityMutation(c.config, OpDelete)
	return &CommodityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommodityClient) DeleteOne(co *Commodity) *CommodityDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommodityClient) DeleteOneID(id uuid.UUID) *CommodityDeleteOne {
	builder := c.Delete().Where(commodity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommodityDeleteOne{builder}
}

// Query returns a query builder for Commodity.
func (c *CommodityClient) Query() *CommodityQuery {
	return &CommodityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommodity},
		inters: c.Interceptors(),
	}
}

// Get returns a Commodity entity by its id.
func (c *CommodityClient) Get(ctx context.Context, id uuid.UUID) (*Commodity, error) {
	return c.Query().Where(commodity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommodityClient) GetX(ctx context.Context, id uuid.UUID) *Commodity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a Commodity.
func (c *CommodityClient) QueryBusinessUnit(co *Commodity) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commodity.Table, commodity.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commodity.BusinessUnitTable, commodity.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Commodity.
func (c *CommodityClient) QueryOrganization(co *Commodity) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commodity.Table, commodity.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commodity.OrganizationTable, commodity.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHazardousMaterial queries the hazardous_material edge of a Commodity.
func (c *CommodityClient) QueryHazardousMaterial(co *Commodity) *HazardousMaterialQuery {
	query := (&HazardousMaterialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commodity.Table, commodity.FieldID, id),
			sqlgraph.To(hazardousmaterial.Table, hazardousmaterial.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commodity.HazardousMaterialTable, commodity.HazardousMaterialColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommodityClient) Hooks() []Hook {
	return c.hooks.Commodity
}

// Interceptors returns the client interceptors.
func (c *CommodityClient) Interceptors() []Interceptor {
	return c.inters.Commodity
}

func (c *CommodityClient) mutate(ctx context.Context, m *CommodityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommodityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommodityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommodityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommodityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Commodity mutation op: %q", m.Op())
	}
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `customer.Intercept(f(g(h())))`.
func (c *CustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Customer = append(c.inters.Customer, interceptors...)
}

// Create returns a builder for creating a Customer entity.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CustomerClient) MapCreateBulk(slice any, setFunc func(*CustomerCreate, int)) *CustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CustomerCreateBulk{err: fmt.Errorf("calling to CustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id uuid.UUID) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomerClient) DeleteOneID(id uuid.UUID) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id uuid.UUID) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id uuid.UUID) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a Customer.
func (c *CustomerClient) QueryBusinessUnit(cu *Customer) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customer.BusinessUnitTable, customer.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Customer.
func (c *CustomerClient) QueryOrganization(cu *Customer) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customer.OrganizationTable, customer.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	hooks := c.hooks.Customer
	return append(hooks[:len(hooks):len(hooks)], customer.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CustomerClient) Interceptors() []Interceptor {
	return c.inters.Customer
}

func (c *CustomerClient) mutate(ctx context.Context, m *CustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Customer mutation op: %q", m.Op())
	}
}

// DelayCodeClient is a client for the DelayCode schema.
type DelayCodeClient struct {
	config
}

// NewDelayCodeClient returns a client for the DelayCode from the given config.
func NewDelayCodeClient(c config) *DelayCodeClient {
	return &DelayCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `delaycode.Hooks(f(g(h())))`.
func (c *DelayCodeClient) Use(hooks ...Hook) {
	c.hooks.DelayCode = append(c.hooks.DelayCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `delaycode.Intercept(f(g(h())))`.
func (c *DelayCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.DelayCode = append(c.inters.DelayCode, interceptors...)
}

// Create returns a builder for creating a DelayCode entity.
func (c *DelayCodeClient) Create() *DelayCodeCreate {
	mutation := newDelayCodeMutation(c.config, OpCreate)
	return &DelayCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DelayCode entities.
func (c *DelayCodeClient) CreateBulk(builders ...*DelayCodeCreate) *DelayCodeCreateBulk {
	return &DelayCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DelayCodeClient) MapCreateBulk(slice any, setFunc func(*DelayCodeCreate, int)) *DelayCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DelayCodeCreateBulk{err: fmt.Errorf("calling to DelayCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DelayCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DelayCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DelayCode.
func (c *DelayCodeClient) Update() *DelayCodeUpdate {
	mutation := newDelayCodeMutation(c.config, OpUpdate)
	return &DelayCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DelayCodeClient) UpdateOne(dc *DelayCode) *DelayCodeUpdateOne {
	mutation := newDelayCodeMutation(c.config, OpUpdateOne, withDelayCode(dc))
	return &DelayCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DelayCodeClient) UpdateOneID(id uuid.UUID) *DelayCodeUpdateOne {
	mutation := newDelayCodeMutation(c.config, OpUpdateOne, withDelayCodeID(id))
	return &DelayCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DelayCode.
func (c *DelayCodeClient) Delete() *DelayCodeDelete {
	mutation := newDelayCodeMutation(c.config, OpDelete)
	return &DelayCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DelayCodeClient) DeleteOne(dc *DelayCode) *DelayCodeDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DelayCodeClient) DeleteOneID(id uuid.UUID) *DelayCodeDeleteOne {
	builder := c.Delete().Where(delaycode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DelayCodeDeleteOne{builder}
}

// Query returns a query builder for DelayCode.
func (c *DelayCodeClient) Query() *DelayCodeQuery {
	return &DelayCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDelayCode},
		inters: c.Interceptors(),
	}
}

// Get returns a DelayCode entity by its id.
func (c *DelayCodeClient) Get(ctx context.Context, id uuid.UUID) (*DelayCode, error) {
	return c.Query().Where(delaycode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DelayCodeClient) GetX(ctx context.Context, id uuid.UUID) *DelayCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a DelayCode.
func (c *DelayCodeClient) QueryBusinessUnit(dc *DelayCode) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(delaycode.Table, delaycode.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, delaycode.BusinessUnitTable, delaycode.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a DelayCode.
func (c *DelayCodeClient) QueryOrganization(dc *DelayCode) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(delaycode.Table, delaycode.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, delaycode.OrganizationTable, delaycode.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DelayCodeClient) Hooks() []Hook {
	return c.hooks.DelayCode
}

// Interceptors returns the client interceptors.
func (c *DelayCodeClient) Interceptors() []Interceptor {
	return c.inters.DelayCode
}

func (c *DelayCodeClient) mutate(ctx context.Context, m *DelayCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DelayCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DelayCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DelayCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DelayCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DelayCode mutation op: %q", m.Op())
	}
}

// DispatchControlClient is a client for the DispatchControl schema.
type DispatchControlClient struct {
	config
}

// NewDispatchControlClient returns a client for the DispatchControl from the given config.
func NewDispatchControlClient(c config) *DispatchControlClient {
	return &DispatchControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dispatchcontrol.Hooks(f(g(h())))`.
func (c *DispatchControlClient) Use(hooks ...Hook) {
	c.hooks.DispatchControl = append(c.hooks.DispatchControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dispatchcontrol.Intercept(f(g(h())))`.
func (c *DispatchControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.DispatchControl = append(c.inters.DispatchControl, interceptors...)
}

// Create returns a builder for creating a DispatchControl entity.
func (c *DispatchControlClient) Create() *DispatchControlCreate {
	mutation := newDispatchControlMutation(c.config, OpCreate)
	return &DispatchControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DispatchControl entities.
func (c *DispatchControlClient) CreateBulk(builders ...*DispatchControlCreate) *DispatchControlCreateBulk {
	return &DispatchControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DispatchControlClient) MapCreateBulk(slice any, setFunc func(*DispatchControlCreate, int)) *DispatchControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DispatchControlCreateBulk{err: fmt.Errorf("calling to DispatchControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DispatchControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DispatchControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DispatchControl.
func (c *DispatchControlClient) Update() *DispatchControlUpdate {
	mutation := newDispatchControlMutation(c.config, OpUpdate)
	return &DispatchControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DispatchControlClient) UpdateOne(dc *DispatchControl) *DispatchControlUpdateOne {
	mutation := newDispatchControlMutation(c.config, OpUpdateOne, withDispatchControl(dc))
	return &DispatchControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DispatchControlClient) UpdateOneID(id uuid.UUID) *DispatchControlUpdateOne {
	mutation := newDispatchControlMutation(c.config, OpUpdateOne, withDispatchControlID(id))
	return &DispatchControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DispatchControl.
func (c *DispatchControlClient) Delete() *DispatchControlDelete {
	mutation := newDispatchControlMutation(c.config, OpDelete)
	return &DispatchControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DispatchControlClient) DeleteOne(dc *DispatchControl) *DispatchControlDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DispatchControlClient) DeleteOneID(id uuid.UUID) *DispatchControlDeleteOne {
	builder := c.Delete().Where(dispatchcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DispatchControlDeleteOne{builder}
}

// Query returns a query builder for DispatchControl.
func (c *DispatchControlClient) Query() *DispatchControlQuery {
	return &DispatchControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDispatchControl},
		inters: c.Interceptors(),
	}
}

// Get returns a DispatchControl entity by its id.
func (c *DispatchControlClient) Get(ctx context.Context, id uuid.UUID) (*DispatchControl, error) {
	return c.Query().Where(dispatchcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DispatchControlClient) GetX(ctx context.Context, id uuid.UUID) *DispatchControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a DispatchControl.
func (c *DispatchControlClient) QueryOrganization(dc *DispatchControl) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dispatchcontrol.Table, dispatchcontrol.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, dispatchcontrol.OrganizationTable, dispatchcontrol.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessUnit queries the business_unit edge of a DispatchControl.
func (c *DispatchControlClient) QueryBusinessUnit(dc *DispatchControl) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dispatchcontrol.Table, dispatchcontrol.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dispatchcontrol.BusinessUnitTable, dispatchcontrol.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DispatchControlClient) Hooks() []Hook {
	return c.hooks.DispatchControl
}

// Interceptors returns the client interceptors.
func (c *DispatchControlClient) Interceptors() []Interceptor {
	return c.inters.DispatchControl
}

func (c *DispatchControlClient) mutate(ctx context.Context, m *DispatchControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DispatchControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DispatchControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DispatchControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DispatchControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DispatchControl mutation op: %q", m.Op())
	}
}

// DivisionCodeClient is a client for the DivisionCode schema.
type DivisionCodeClient struct {
	config
}

// NewDivisionCodeClient returns a client for the DivisionCode from the given config.
func NewDivisionCodeClient(c config) *DivisionCodeClient {
	return &DivisionCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `divisioncode.Hooks(f(g(h())))`.
func (c *DivisionCodeClient) Use(hooks ...Hook) {
	c.hooks.DivisionCode = append(c.hooks.DivisionCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `divisioncode.Intercept(f(g(h())))`.
func (c *DivisionCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.DivisionCode = append(c.inters.DivisionCode, interceptors...)
}

// Create returns a builder for creating a DivisionCode entity.
func (c *DivisionCodeClient) Create() *DivisionCodeCreate {
	mutation := newDivisionCodeMutation(c.config, OpCreate)
	return &DivisionCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DivisionCode entities.
func (c *DivisionCodeClient) CreateBulk(builders ...*DivisionCodeCreate) *DivisionCodeCreateBulk {
	return &DivisionCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DivisionCodeClient) MapCreateBulk(slice any, setFunc func(*DivisionCodeCreate, int)) *DivisionCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DivisionCodeCreateBulk{err: fmt.Errorf("calling to DivisionCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DivisionCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DivisionCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DivisionCode.
func (c *DivisionCodeClient) Update() *DivisionCodeUpdate {
	mutation := newDivisionCodeMutation(c.config, OpUpdate)
	return &DivisionCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivisionCodeClient) UpdateOne(dc *DivisionCode) *DivisionCodeUpdateOne {
	mutation := newDivisionCodeMutation(c.config, OpUpdateOne, withDivisionCode(dc))
	return &DivisionCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivisionCodeClient) UpdateOneID(id uuid.UUID) *DivisionCodeUpdateOne {
	mutation := newDivisionCodeMutation(c.config, OpUpdateOne, withDivisionCodeID(id))
	return &DivisionCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DivisionCode.
func (c *DivisionCodeClient) Delete() *DivisionCodeDelete {
	mutation := newDivisionCodeMutation(c.config, OpDelete)
	return &DivisionCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DivisionCodeClient) DeleteOne(dc *DivisionCode) *DivisionCodeDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DivisionCodeClient) DeleteOneID(id uuid.UUID) *DivisionCodeDeleteOne {
	builder := c.Delete().Where(divisioncode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivisionCodeDeleteOne{builder}
}

// Query returns a query builder for DivisionCode.
func (c *DivisionCodeClient) Query() *DivisionCodeQuery {
	return &DivisionCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDivisionCode},
		inters: c.Interceptors(),
	}
}

// Get returns a DivisionCode entity by its id.
func (c *DivisionCodeClient) Get(ctx context.Context, id uuid.UUID) (*DivisionCode, error) {
	return c.Query().Where(divisioncode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivisionCodeClient) GetX(ctx context.Context, id uuid.UUID) *DivisionCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a DivisionCode.
func (c *DivisionCodeClient) QueryBusinessUnit(dc *DivisionCode) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(divisioncode.Table, divisioncode.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, divisioncode.BusinessUnitTable, divisioncode.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a DivisionCode.
func (c *DivisionCodeClient) QueryOrganization(dc *DivisionCode) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(divisioncode.Table, divisioncode.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, divisioncode.OrganizationTable, divisioncode.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCashAccount queries the cash_account edge of a DivisionCode.
func (c *DivisionCodeClient) QueryCashAccount(dc *DivisionCode) *GeneralLedgerAccountQuery {
	query := (&GeneralLedgerAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(divisioncode.Table, divisioncode.FieldID, id),
			sqlgraph.To(generalledgeraccount.Table, generalledgeraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, divisioncode.CashAccountTable, divisioncode.CashAccountColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApAccount queries the ap_account edge of a DivisionCode.
func (c *DivisionCodeClient) QueryApAccount(dc *DivisionCode) *GeneralLedgerAccountQuery {
	query := (&GeneralLedgerAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(divisioncode.Table, divisioncode.FieldID, id),
			sqlgraph.To(generalledgeraccount.Table, generalledgeraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, divisioncode.ApAccountTable, divisioncode.ApAccountColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExpenseAccount queries the expense_account edge of a DivisionCode.
func (c *DivisionCodeClient) QueryExpenseAccount(dc *DivisionCode) *GeneralLedgerAccountQuery {
	query := (&GeneralLedgerAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(divisioncode.Table, divisioncode.FieldID, id),
			sqlgraph.To(generalledgeraccount.Table, generalledgeraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, divisioncode.ExpenseAccountTable, divisioncode.ExpenseAccountColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DivisionCodeClient) Hooks() []Hook {
	return c.hooks.DivisionCode
}

// Interceptors returns the client interceptors.
func (c *DivisionCodeClient) Interceptors() []Interceptor {
	return c.inters.DivisionCode
}

func (c *DivisionCodeClient) mutate(ctx context.Context, m *DivisionCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DivisionCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DivisionCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DivisionCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DivisionCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DivisionCode mutation op: %q", m.Op())
	}
}

// EmailControlClient is a client for the EmailControl schema.
type EmailControlClient struct {
	config
}

// NewEmailControlClient returns a client for the EmailControl from the given config.
func NewEmailControlClient(c config) *EmailControlClient {
	return &EmailControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailcontrol.Hooks(f(g(h())))`.
func (c *EmailControlClient) Use(hooks ...Hook) {
	c.hooks.EmailControl = append(c.hooks.EmailControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailcontrol.Intercept(f(g(h())))`.
func (c *EmailControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailControl = append(c.inters.EmailControl, interceptors...)
}

// Create returns a builder for creating a EmailControl entity.
func (c *EmailControlClient) Create() *EmailControlCreate {
	mutation := newEmailControlMutation(c.config, OpCreate)
	return &EmailControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailControl entities.
func (c *EmailControlClient) CreateBulk(builders ...*EmailControlCreate) *EmailControlCreateBulk {
	return &EmailControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailControlClient) MapCreateBulk(slice any, setFunc func(*EmailControlCreate, int)) *EmailControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailControlCreateBulk{err: fmt.Errorf("calling to EmailControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailControl.
func (c *EmailControlClient) Update() *EmailControlUpdate {
	mutation := newEmailControlMutation(c.config, OpUpdate)
	return &EmailControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailControlClient) UpdateOne(ec *EmailControl) *EmailControlUpdateOne {
	mutation := newEmailControlMutation(c.config, OpUpdateOne, withEmailControl(ec))
	return &EmailControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailControlClient) UpdateOneID(id uuid.UUID) *EmailControlUpdateOne {
	mutation := newEmailControlMutation(c.config, OpUpdateOne, withEmailControlID(id))
	return &EmailControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailControl.
func (c *EmailControlClient) Delete() *EmailControlDelete {
	mutation := newEmailControlMutation(c.config, OpDelete)
	return &EmailControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailControlClient) DeleteOne(ec *EmailControl) *EmailControlDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailControlClient) DeleteOneID(id uuid.UUID) *EmailControlDeleteOne {
	builder := c.Delete().Where(emailcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailControlDeleteOne{builder}
}

// Query returns a query builder for EmailControl.
func (c *EmailControlClient) Query() *EmailControlQuery {
	return &EmailControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailControl},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailControl entity by its id.
func (c *EmailControlClient) Get(ctx context.Context, id uuid.UUID) (*EmailControl, error) {
	return c.Query().Where(emailcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailControlClient) GetX(ctx context.Context, id uuid.UUID) *EmailControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a EmailControl.
func (c *EmailControlClient) QueryOrganization(ec *EmailControl) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailcontrol.Table, emailcontrol.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, emailcontrol.OrganizationTable, emailcontrol.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessUnit queries the business_unit edge of a EmailControl.
func (c *EmailControlClient) QueryBusinessUnit(ec *EmailControl) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailcontrol.Table, emailcontrol.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailcontrol.BusinessUnitTable, emailcontrol.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingEmailProfile queries the billing_email_profile edge of a EmailControl.
func (c *EmailControlClient) QueryBillingEmailProfile(ec *EmailControl) *EmailProfileQuery {
	query := (&EmailProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailcontrol.Table, emailcontrol.FieldID, id),
			sqlgraph.To(emailprofile.Table, emailprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailcontrol.BillingEmailProfileTable, emailcontrol.BillingEmailProfileColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRateEmailProfile queries the rate_email_profile edge of a EmailControl.
func (c *EmailControlClient) QueryRateEmailProfile(ec *EmailControl) *EmailProfileQuery {
	query := (&EmailProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailcontrol.Table, emailcontrol.FieldID, id),
			sqlgraph.To(emailprofile.Table, emailprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailcontrol.RateEmailProfileTable, emailcontrol.RateEmailProfileColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailControlClient) Hooks() []Hook {
	return c.hooks.EmailControl
}

// Interceptors returns the client interceptors.
func (c *EmailControlClient) Interceptors() []Interceptor {
	return c.inters.EmailControl
}

func (c *EmailControlClient) mutate(ctx context.Context, m *EmailControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmailControl mutation op: %q", m.Op())
	}
}

// EmailProfileClient is a client for the EmailProfile schema.
type EmailProfileClient struct {
	config
}

// NewEmailProfileClient returns a client for the EmailProfile from the given config.
func NewEmailProfileClient(c config) *EmailProfileClient {
	return &EmailProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailprofile.Hooks(f(g(h())))`.
func (c *EmailProfileClient) Use(hooks ...Hook) {
	c.hooks.EmailProfile = append(c.hooks.EmailProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailprofile.Intercept(f(g(h())))`.
func (c *EmailProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailProfile = append(c.inters.EmailProfile, interceptors...)
}

// Create returns a builder for creating a EmailProfile entity.
func (c *EmailProfileClient) Create() *EmailProfileCreate {
	mutation := newEmailProfileMutation(c.config, OpCreate)
	return &EmailProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailProfile entities.
func (c *EmailProfileClient) CreateBulk(builders ...*EmailProfileCreate) *EmailProfileCreateBulk {
	return &EmailProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailProfileClient) MapCreateBulk(slice any, setFunc func(*EmailProfileCreate, int)) *EmailProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailProfileCreateBulk{err: fmt.Errorf("calling to EmailProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailProfile.
func (c *EmailProfileClient) Update() *EmailProfileUpdate {
	mutation := newEmailProfileMutation(c.config, OpUpdate)
	return &EmailProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailProfileClient) UpdateOne(ep *EmailProfile) *EmailProfileUpdateOne {
	mutation := newEmailProfileMutation(c.config, OpUpdateOne, withEmailProfile(ep))
	return &EmailProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailProfileClient) UpdateOneID(id uuid.UUID) *EmailProfileUpdateOne {
	mutation := newEmailProfileMutation(c.config, OpUpdateOne, withEmailProfileID(id))
	return &EmailProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailProfile.
func (c *EmailProfileClient) Delete() *EmailProfileDelete {
	mutation := newEmailProfileMutation(c.config, OpDelete)
	return &EmailProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailProfileClient) DeleteOne(ep *EmailProfile) *EmailProfileDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailProfileClient) DeleteOneID(id uuid.UUID) *EmailProfileDeleteOne {
	builder := c.Delete().Where(emailprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailProfileDeleteOne{builder}
}

// Query returns a query builder for EmailProfile.
func (c *EmailProfileClient) Query() *EmailProfileQuery {
	return &EmailProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailProfile entity by its id.
func (c *EmailProfileClient) Get(ctx context.Context, id uuid.UUID) (*EmailProfile, error) {
	return c.Query().Where(emailprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailProfileClient) GetX(ctx context.Context, id uuid.UUID) *EmailProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a EmailProfile.
func (c *EmailProfileClient) QueryBusinessUnit(ep *EmailProfile) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailprofile.Table, emailprofile.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailprofile.BusinessUnitTable, emailprofile.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a EmailProfile.
func (c *EmailProfileClient) QueryOrganization(ep *EmailProfile) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailprofile.Table, emailprofile.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailprofile.OrganizationTable, emailprofile.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailProfileClient) Hooks() []Hook {
	hooks := c.hooks.EmailProfile
	return append(hooks[:len(hooks):len(hooks)], emailprofile.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EmailProfileClient) Interceptors() []Interceptor {
	return c.inters.EmailProfile
}

func (c *EmailProfileClient) mutate(ctx context.Context, m *EmailProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmailProfile mutation op: %q", m.Op())
	}
}

// EquipmentManufactuerClient is a client for the EquipmentManufactuer schema.
type EquipmentManufactuerClient struct {
	config
}

// NewEquipmentManufactuerClient returns a client for the EquipmentManufactuer from the given config.
func NewEquipmentManufactuerClient(c config) *EquipmentManufactuerClient {
	return &EquipmentManufactuerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentmanufactuer.Hooks(f(g(h())))`.
func (c *EquipmentManufactuerClient) Use(hooks ...Hook) {
	c.hooks.EquipmentManufactuer = append(c.hooks.EquipmentManufactuer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `equipmentmanufactuer.Intercept(f(g(h())))`.
func (c *EquipmentManufactuerClient) Intercept(interceptors ...Interceptor) {
	c.inters.EquipmentManufactuer = append(c.inters.EquipmentManufactuer, interceptors...)
}

// Create returns a builder for creating a EquipmentManufactuer entity.
func (c *EquipmentManufactuerClient) Create() *EquipmentManufactuerCreate {
	mutation := newEquipmentManufactuerMutation(c.config, OpCreate)
	return &EquipmentManufactuerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentManufactuer entities.
func (c *EquipmentManufactuerClient) CreateBulk(builders ...*EquipmentManufactuerCreate) *EquipmentManufactuerCreateBulk {
	return &EquipmentManufactuerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EquipmentManufactuerClient) MapCreateBulk(slice any, setFunc func(*EquipmentManufactuerCreate, int)) *EquipmentManufactuerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EquipmentManufactuerCreateBulk{err: fmt.Errorf("calling to EquipmentManufactuerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EquipmentManufactuerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EquipmentManufactuerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentManufactuer.
func (c *EquipmentManufactuerClient) Update() *EquipmentManufactuerUpdate {
	mutation := newEquipmentManufactuerMutation(c.config, OpUpdate)
	return &EquipmentManufactuerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentManufactuerClient) UpdateOne(em *EquipmentManufactuer) *EquipmentManufactuerUpdateOne {
	mutation := newEquipmentManufactuerMutation(c.config, OpUpdateOne, withEquipmentManufactuer(em))
	return &EquipmentManufactuerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentManufactuerClient) UpdateOneID(id uuid.UUID) *EquipmentManufactuerUpdateOne {
	mutation := newEquipmentManufactuerMutation(c.config, OpUpdateOne, withEquipmentManufactuerID(id))
	return &EquipmentManufactuerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentManufactuer.
func (c *EquipmentManufactuerClient) Delete() *EquipmentManufactuerDelete {
	mutation := newEquipmentManufactuerMutation(c.config, OpDelete)
	return &EquipmentManufactuerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentManufactuerClient) DeleteOne(em *EquipmentManufactuer) *EquipmentManufactuerDeleteOne {
	return c.DeleteOneID(em.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EquipmentManufactuerClient) DeleteOneID(id uuid.UUID) *EquipmentManufactuerDeleteOne {
	builder := c.Delete().Where(equipmentmanufactuer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentManufactuerDeleteOne{builder}
}

// Query returns a query builder for EquipmentManufactuer.
func (c *EquipmentManufactuerClient) Query() *EquipmentManufactuerQuery {
	return &EquipmentManufactuerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEquipmentManufactuer},
		inters: c.Interceptors(),
	}
}

// Get returns a EquipmentManufactuer entity by its id.
func (c *EquipmentManufactuerClient) Get(ctx context.Context, id uuid.UUID) (*EquipmentManufactuer, error) {
	return c.Query().Where(equipmentmanufactuer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentManufactuerClient) GetX(ctx context.Context, id uuid.UUID) *EquipmentManufactuer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a EquipmentManufactuer.
func (c *EquipmentManufactuerClient) QueryBusinessUnit(em *EquipmentManufactuer) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentmanufactuer.Table, equipmentmanufactuer.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmentmanufactuer.BusinessUnitTable, equipmentmanufactuer.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a EquipmentManufactuer.
func (c *EquipmentManufactuerClient) QueryOrganization(em *EquipmentManufactuer) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentmanufactuer.Table, equipmentmanufactuer.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmentmanufactuer.OrganizationTable, equipmentmanufactuer.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentManufactuerClient) Hooks() []Hook {
	return c.hooks.EquipmentManufactuer
}

// Interceptors returns the client interceptors.
func (c *EquipmentManufactuerClient) Interceptors() []Interceptor {
	return c.inters.EquipmentManufactuer
}

func (c *EquipmentManufactuerClient) mutate(ctx context.Context, m *EquipmentManufactuerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EquipmentManufactuerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EquipmentManufactuerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EquipmentManufactuerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EquipmentManufactuerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EquipmentManufactuer mutation op: %q", m.Op())
	}
}

// EquipmentTypeClient is a client for the EquipmentType schema.
type EquipmentTypeClient struct {
	config
}

// NewEquipmentTypeClient returns a client for the EquipmentType from the given config.
func NewEquipmentTypeClient(c config) *EquipmentTypeClient {
	return &EquipmentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmenttype.Hooks(f(g(h())))`.
func (c *EquipmentTypeClient) Use(hooks ...Hook) {
	c.hooks.EquipmentType = append(c.hooks.EquipmentType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `equipmenttype.Intercept(f(g(h())))`.
func (c *EquipmentTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.EquipmentType = append(c.inters.EquipmentType, interceptors...)
}

// Create returns a builder for creating a EquipmentType entity.
func (c *EquipmentTypeClient) Create() *EquipmentTypeCreate {
	mutation := newEquipmentTypeMutation(c.config, OpCreate)
	return &EquipmentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentType entities.
func (c *EquipmentTypeClient) CreateBulk(builders ...*EquipmentTypeCreate) *EquipmentTypeCreateBulk {
	return &EquipmentTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EquipmentTypeClient) MapCreateBulk(slice any, setFunc func(*EquipmentTypeCreate, int)) *EquipmentTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EquipmentTypeCreateBulk{err: fmt.Errorf("calling to EquipmentTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EquipmentTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EquipmentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentType.
func (c *EquipmentTypeClient) Update() *EquipmentTypeUpdate {
	mutation := newEquipmentTypeMutation(c.config, OpUpdate)
	return &EquipmentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentTypeClient) UpdateOne(et *EquipmentType) *EquipmentTypeUpdateOne {
	mutation := newEquipmentTypeMutation(c.config, OpUpdateOne, withEquipmentType(et))
	return &EquipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentTypeClient) UpdateOneID(id uuid.UUID) *EquipmentTypeUpdateOne {
	mutation := newEquipmentTypeMutation(c.config, OpUpdateOne, withEquipmentTypeID(id))
	return &EquipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentType.
func (c *EquipmentTypeClient) Delete() *EquipmentTypeDelete {
	mutation := newEquipmentTypeMutation(c.config, OpDelete)
	return &EquipmentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentTypeClient) DeleteOne(et *EquipmentType) *EquipmentTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EquipmentTypeClient) DeleteOneID(id uuid.UUID) *EquipmentTypeDeleteOne {
	builder := c.Delete().Where(equipmenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentTypeDeleteOne{builder}
}

// Query returns a query builder for EquipmentType.
func (c *EquipmentTypeClient) Query() *EquipmentTypeQuery {
	return &EquipmentTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEquipmentType},
		inters: c.Interceptors(),
	}
}

// Get returns a EquipmentType entity by its id.
func (c *EquipmentTypeClient) Get(ctx context.Context, id uuid.UUID) (*EquipmentType, error) {
	return c.Query().Where(equipmenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentTypeClient) GetX(ctx context.Context, id uuid.UUID) *EquipmentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a EquipmentType.
func (c *EquipmentTypeClient) QueryBusinessUnit(et *EquipmentType) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmenttype.BusinessUnitTable, equipmenttype.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a EquipmentType.
func (c *EquipmentTypeClient) QueryOrganization(et *EquipmentType) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmenttype.OrganizationTable, equipmenttype.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentTypeClient) Hooks() []Hook {
	return c.hooks.EquipmentType
}

// Interceptors returns the client interceptors.
func (c *EquipmentTypeClient) Interceptors() []Interceptor {
	return c.inters.EquipmentType
}

func (c *EquipmentTypeClient) mutate(ctx context.Context, m *EquipmentTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EquipmentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EquipmentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EquipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EquipmentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EquipmentType mutation op: %q", m.Op())
	}
}

// FeasibilityToolControlClient is a client for the FeasibilityToolControl schema.
type FeasibilityToolControlClient struct {
	config
}

// NewFeasibilityToolControlClient returns a client for the FeasibilityToolControl from the given config.
func NewFeasibilityToolControlClient(c config) *FeasibilityToolControlClient {
	return &FeasibilityToolControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feasibilitytoolcontrol.Hooks(f(g(h())))`.
func (c *FeasibilityToolControlClient) Use(hooks ...Hook) {
	c.hooks.FeasibilityToolControl = append(c.hooks.FeasibilityToolControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feasibilitytoolcontrol.Intercept(f(g(h())))`.
func (c *FeasibilityToolControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeasibilityToolControl = append(c.inters.FeasibilityToolControl, interceptors...)
}

// Create returns a builder for creating a FeasibilityToolControl entity.
func (c *FeasibilityToolControlClient) Create() *FeasibilityToolControlCreate {
	mutation := newFeasibilityToolControlMutation(c.config, OpCreate)
	return &FeasibilityToolControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeasibilityToolControl entities.
func (c *FeasibilityToolControlClient) CreateBulk(builders ...*FeasibilityToolControlCreate) *FeasibilityToolControlCreateBulk {
	return &FeasibilityToolControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeasibilityToolControlClient) MapCreateBulk(slice any, setFunc func(*FeasibilityToolControlCreate, int)) *FeasibilityToolControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeasibilityToolControlCreateBulk{err: fmt.Errorf("calling to FeasibilityToolControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeasibilityToolControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeasibilityToolControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeasibilityToolControl.
func (c *FeasibilityToolControlClient) Update() *FeasibilityToolControlUpdate {
	mutation := newFeasibilityToolControlMutation(c.config, OpUpdate)
	return &FeasibilityToolControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeasibilityToolControlClient) UpdateOne(ftc *FeasibilityToolControl) *FeasibilityToolControlUpdateOne {
	mutation := newFeasibilityToolControlMutation(c.config, OpUpdateOne, withFeasibilityToolControl(ftc))
	return &FeasibilityToolControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeasibilityToolControlClient) UpdateOneID(id uuid.UUID) *FeasibilityToolControlUpdateOne {
	mutation := newFeasibilityToolControlMutation(c.config, OpUpdateOne, withFeasibilityToolControlID(id))
	return &FeasibilityToolControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeasibilityToolControl.
func (c *FeasibilityToolControlClient) Delete() *FeasibilityToolControlDelete {
	mutation := newFeasibilityToolControlMutation(c.config, OpDelete)
	return &FeasibilityToolControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeasibilityToolControlClient) DeleteOne(ftc *FeasibilityToolControl) *FeasibilityToolControlDeleteOne {
	return c.DeleteOneID(ftc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeasibilityToolControlClient) DeleteOneID(id uuid.UUID) *FeasibilityToolControlDeleteOne {
	builder := c.Delete().Where(feasibilitytoolcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeasibilityToolControlDeleteOne{builder}
}

// Query returns a query builder for FeasibilityToolControl.
func (c *FeasibilityToolControlClient) Query() *FeasibilityToolControlQuery {
	return &FeasibilityToolControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeasibilityToolControl},
		inters: c.Interceptors(),
	}
}

// Get returns a FeasibilityToolControl entity by its id.
func (c *FeasibilityToolControlClient) Get(ctx context.Context, id uuid.UUID) (*FeasibilityToolControl, error) {
	return c.Query().Where(feasibilitytoolcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeasibilityToolControlClient) GetX(ctx context.Context, id uuid.UUID) *FeasibilityToolControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a FeasibilityToolControl.
func (c *FeasibilityToolControlClient) QueryOrganization(ftc *FeasibilityToolControl) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ftc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feasibilitytoolcontrol.Table, feasibilitytoolcontrol.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, feasibilitytoolcontrol.OrganizationTable, feasibilitytoolcontrol.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ftc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessUnit queries the business_unit edge of a FeasibilityToolControl.
func (c *FeasibilityToolControlClient) QueryBusinessUnit(ftc *FeasibilityToolControl) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ftc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feasibilitytoolcontrol.Table, feasibilitytoolcontrol.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feasibilitytoolcontrol.BusinessUnitTable, feasibilitytoolcontrol.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(ftc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeasibilityToolControlClient) Hooks() []Hook {
	return c.hooks.FeasibilityToolControl
}

// Interceptors returns the client interceptors.
func (c *FeasibilityToolControlClient) Interceptors() []Interceptor {
	return c.inters.FeasibilityToolControl
}

func (c *FeasibilityToolControlClient) mutate(ctx context.Context, m *FeasibilityToolControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeasibilityToolControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeasibilityToolControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeasibilityToolControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeasibilityToolControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeasibilityToolControl mutation op: %q", m.Op())
	}
}

// FleetCodeClient is a client for the FleetCode schema.
type FleetCodeClient struct {
	config
}

// NewFleetCodeClient returns a client for the FleetCode from the given config.
func NewFleetCodeClient(c config) *FleetCodeClient {
	return &FleetCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fleetcode.Hooks(f(g(h())))`.
func (c *FleetCodeClient) Use(hooks ...Hook) {
	c.hooks.FleetCode = append(c.hooks.FleetCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fleetcode.Intercept(f(g(h())))`.
func (c *FleetCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.FleetCode = append(c.inters.FleetCode, interceptors...)
}

// Create returns a builder for creating a FleetCode entity.
func (c *FleetCodeClient) Create() *FleetCodeCreate {
	mutation := newFleetCodeMutation(c.config, OpCreate)
	return &FleetCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FleetCode entities.
func (c *FleetCodeClient) CreateBulk(builders ...*FleetCodeCreate) *FleetCodeCreateBulk {
	return &FleetCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FleetCodeClient) MapCreateBulk(slice any, setFunc func(*FleetCodeCreate, int)) *FleetCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FleetCodeCreateBulk{err: fmt.Errorf("calling to FleetCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FleetCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FleetCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FleetCode.
func (c *FleetCodeClient) Update() *FleetCodeUpdate {
	mutation := newFleetCodeMutation(c.config, OpUpdate)
	return &FleetCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FleetCodeClient) UpdateOne(fc *FleetCode) *FleetCodeUpdateOne {
	mutation := newFleetCodeMutation(c.config, OpUpdateOne, withFleetCode(fc))
	return &FleetCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FleetCodeClient) UpdateOneID(id uuid.UUID) *FleetCodeUpdateOne {
	mutation := newFleetCodeMutation(c.config, OpUpdateOne, withFleetCodeID(id))
	return &FleetCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FleetCode.
func (c *FleetCodeClient) Delete() *FleetCodeDelete {
	mutation := newFleetCodeMutation(c.config, OpDelete)
	return &FleetCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FleetCodeClient) DeleteOne(fc *FleetCode) *FleetCodeDeleteOne {
	return c.DeleteOneID(fc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FleetCodeClient) DeleteOneID(id uuid.UUID) *FleetCodeDeleteOne {
	builder := c.Delete().Where(fleetcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FleetCodeDeleteOne{builder}
}

// Query returns a query builder for FleetCode.
func (c *FleetCodeClient) Query() *FleetCodeQuery {
	return &FleetCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFleetCode},
		inters: c.Interceptors(),
	}
}

// Get returns a FleetCode entity by its id.
func (c *FleetCodeClient) Get(ctx context.Context, id uuid.UUID) (*FleetCode, error) {
	return c.Query().Where(fleetcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FleetCodeClient) GetX(ctx context.Context, id uuid.UUID) *FleetCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a FleetCode.
func (c *FleetCodeClient) QueryBusinessUnit(fc *FleetCode) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fleetcode.Table, fleetcode.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fleetcode.BusinessUnitTable, fleetcode.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a FleetCode.
func (c *FleetCodeClient) QueryOrganization(fc *FleetCode) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fleetcode.Table, fleetcode.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fleetcode.OrganizationTable, fleetcode.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManager queries the manager edge of a FleetCode.
func (c *FleetCodeClient) QueryManager(fc *FleetCode) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fleetcode.Table, fleetcode.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fleetcode.ManagerTable, fleetcode.ManagerColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FleetCodeClient) Hooks() []Hook {
	return c.hooks.FleetCode
}

// Interceptors returns the client interceptors.
func (c *FleetCodeClient) Interceptors() []Interceptor {
	return c.inters.FleetCode
}

func (c *FleetCodeClient) mutate(ctx context.Context, m *FleetCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FleetCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FleetCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FleetCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FleetCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FleetCode mutation op: %q", m.Op())
	}
}

// GeneralLedgerAccountClient is a client for the GeneralLedgerAccount schema.
type GeneralLedgerAccountClient struct {
	config
}

// NewGeneralLedgerAccountClient returns a client for the GeneralLedgerAccount from the given config.
func NewGeneralLedgerAccountClient(c config) *GeneralLedgerAccountClient {
	return &GeneralLedgerAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `generalledgeraccount.Hooks(f(g(h())))`.
func (c *GeneralLedgerAccountClient) Use(hooks ...Hook) {
	c.hooks.GeneralLedgerAccount = append(c.hooks.GeneralLedgerAccount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `generalledgeraccount.Intercept(f(g(h())))`.
func (c *GeneralLedgerAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.GeneralLedgerAccount = append(c.inters.GeneralLedgerAccount, interceptors...)
}

// Create returns a builder for creating a GeneralLedgerAccount entity.
func (c *GeneralLedgerAccountClient) Create() *GeneralLedgerAccountCreate {
	mutation := newGeneralLedgerAccountMutation(c.config, OpCreate)
	return &GeneralLedgerAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GeneralLedgerAccount entities.
func (c *GeneralLedgerAccountClient) CreateBulk(builders ...*GeneralLedgerAccountCreate) *GeneralLedgerAccountCreateBulk {
	return &GeneralLedgerAccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GeneralLedgerAccountClient) MapCreateBulk(slice any, setFunc func(*GeneralLedgerAccountCreate, int)) *GeneralLedgerAccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GeneralLedgerAccountCreateBulk{err: fmt.Errorf("calling to GeneralLedgerAccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GeneralLedgerAccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GeneralLedgerAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) Update() *GeneralLedgerAccountUpdate {
	mutation := newGeneralLedgerAccountMutation(c.config, OpUpdate)
	return &GeneralLedgerAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GeneralLedgerAccountClient) UpdateOne(gla *GeneralLedgerAccount) *GeneralLedgerAccountUpdateOne {
	mutation := newGeneralLedgerAccountMutation(c.config, OpUpdateOne, withGeneralLedgerAccount(gla))
	return &GeneralLedgerAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GeneralLedgerAccountClient) UpdateOneID(id uuid.UUID) *GeneralLedgerAccountUpdateOne {
	mutation := newGeneralLedgerAccountMutation(c.config, OpUpdateOne, withGeneralLedgerAccountID(id))
	return &GeneralLedgerAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) Delete() *GeneralLedgerAccountDelete {
	mutation := newGeneralLedgerAccountMutation(c.config, OpDelete)
	return &GeneralLedgerAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GeneralLedgerAccountClient) DeleteOne(gla *GeneralLedgerAccount) *GeneralLedgerAccountDeleteOne {
	return c.DeleteOneID(gla.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GeneralLedgerAccountClient) DeleteOneID(id uuid.UUID) *GeneralLedgerAccountDeleteOne {
	builder := c.Delete().Where(generalledgeraccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GeneralLedgerAccountDeleteOne{builder}
}

// Query returns a query builder for GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) Query() *GeneralLedgerAccountQuery {
	return &GeneralLedgerAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGeneralLedgerAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a GeneralLedgerAccount entity by its id.
func (c *GeneralLedgerAccountClient) Get(ctx context.Context, id uuid.UUID) (*GeneralLedgerAccount, error) {
	return c.Query().Where(generalledgeraccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GeneralLedgerAccountClient) GetX(ctx context.Context, id uuid.UUID) *GeneralLedgerAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) QueryBusinessUnit(gla *GeneralLedgerAccount) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gla.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalledgeraccount.Table, generalledgeraccount.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, generalledgeraccount.BusinessUnitTable, generalledgeraccount.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(gla.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) QueryOrganization(gla *GeneralLedgerAccount) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gla.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalledgeraccount.Table, generalledgeraccount.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, generalledgeraccount.OrganizationTable, generalledgeraccount.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(gla.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a GeneralLedgerAccount.
func (c *GeneralLedgerAccountClient) QueryTags(gla *GeneralLedgerAccount) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gla.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generalledgeraccount.Table, generalledgeraccount.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, generalledgeraccount.TagsTable, generalledgeraccount.TagsColumn),
		)
		fromV = sqlgraph.Neighbors(gla.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GeneralLedgerAccountClient) Hooks() []Hook {
	return c.hooks.GeneralLedgerAccount
}

// Interceptors returns the client interceptors.
func (c *GeneralLedgerAccountClient) Interceptors() []Interceptor {
	return c.inters.GeneralLedgerAccount
}

func (c *GeneralLedgerAccountClient) mutate(ctx context.Context, m *GeneralLedgerAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GeneralLedgerAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GeneralLedgerAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GeneralLedgerAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GeneralLedgerAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GeneralLedgerAccount mutation op: %q", m.Op())
	}
}

// HazardousMaterialClient is a client for the HazardousMaterial schema.
type HazardousMaterialClient struct {
	config
}

// NewHazardousMaterialClient returns a client for the HazardousMaterial from the given config.
func NewHazardousMaterialClient(c config) *HazardousMaterialClient {
	return &HazardousMaterialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hazardousmaterial.Hooks(f(g(h())))`.
func (c *HazardousMaterialClient) Use(hooks ...Hook) {
	c.hooks.HazardousMaterial = append(c.hooks.HazardousMaterial, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hazardousmaterial.Intercept(f(g(h())))`.
func (c *HazardousMaterialClient) Intercept(interceptors ...Interceptor) {
	c.inters.HazardousMaterial = append(c.inters.HazardousMaterial, interceptors...)
}

// Create returns a builder for creating a HazardousMaterial entity.
func (c *HazardousMaterialClient) Create() *HazardousMaterialCreate {
	mutation := newHazardousMaterialMutation(c.config, OpCreate)
	return &HazardousMaterialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HazardousMaterial entities.
func (c *HazardousMaterialClient) CreateBulk(builders ...*HazardousMaterialCreate) *HazardousMaterialCreateBulk {
	return &HazardousMaterialCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HazardousMaterialClient) MapCreateBulk(slice any, setFunc func(*HazardousMaterialCreate, int)) *HazardousMaterialCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HazardousMaterialCreateBulk{err: fmt.Errorf("calling to HazardousMaterialClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HazardousMaterialCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HazardousMaterialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HazardousMaterial.
func (c *HazardousMaterialClient) Update() *HazardousMaterialUpdate {
	mutation := newHazardousMaterialMutation(c.config, OpUpdate)
	return &HazardousMaterialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HazardousMaterialClient) UpdateOne(hm *HazardousMaterial) *HazardousMaterialUpdateOne {
	mutation := newHazardousMaterialMutation(c.config, OpUpdateOne, withHazardousMaterial(hm))
	return &HazardousMaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HazardousMaterialClient) UpdateOneID(id uuid.UUID) *HazardousMaterialUpdateOne {
	mutation := newHazardousMaterialMutation(c.config, OpUpdateOne, withHazardousMaterialID(id))
	return &HazardousMaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HazardousMaterial.
func (c *HazardousMaterialClient) Delete() *HazardousMaterialDelete {
	mutation := newHazardousMaterialMutation(c.config, OpDelete)
	return &HazardousMaterialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HazardousMaterialClient) DeleteOne(hm *HazardousMaterial) *HazardousMaterialDeleteOne {
	return c.DeleteOneID(hm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HazardousMaterialClient) DeleteOneID(id uuid.UUID) *HazardousMaterialDeleteOne {
	builder := c.Delete().Where(hazardousmaterial.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HazardousMaterialDeleteOne{builder}
}

// Query returns a query builder for HazardousMaterial.
func (c *HazardousMaterialClient) Query() *HazardousMaterialQuery {
	return &HazardousMaterialQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHazardousMaterial},
		inters: c.Interceptors(),
	}
}

// Get returns a HazardousMaterial entity by its id.
func (c *HazardousMaterialClient) Get(ctx context.Context, id uuid.UUID) (*HazardousMaterial, error) {
	return c.Query().Where(hazardousmaterial.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HazardousMaterialClient) GetX(ctx context.Context, id uuid.UUID) *HazardousMaterial {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a HazardousMaterial.
func (c *HazardousMaterialClient) QueryBusinessUnit(hm *HazardousMaterial) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hazardousmaterial.Table, hazardousmaterial.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hazardousmaterial.BusinessUnitTable, hazardousmaterial.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a HazardousMaterial.
func (c *HazardousMaterialClient) QueryOrganization(hm *HazardousMaterial) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hazardousmaterial.Table, hazardousmaterial.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hazardousmaterial.OrganizationTable, hazardousmaterial.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HazardousMaterialClient) Hooks() []Hook {
	return c.hooks.HazardousMaterial
}

// Interceptors returns the client interceptors.
func (c *HazardousMaterialClient) Interceptors() []Interceptor {
	return c.inters.HazardousMaterial
}

func (c *HazardousMaterialClient) mutate(ctx context.Context, m *HazardousMaterialMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HazardousMaterialCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HazardousMaterialUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HazardousMaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HazardousMaterialDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HazardousMaterial mutation op: %q", m.Op())
	}
}

// InvoiceControlClient is a client for the InvoiceControl schema.
type InvoiceControlClient struct {
	config
}

// NewInvoiceControlClient returns a client for the InvoiceControl from the given config.
func NewInvoiceControlClient(c config) *InvoiceControlClient {
	return &InvoiceControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoicecontrol.Hooks(f(g(h())))`.
func (c *InvoiceControlClient) Use(hooks ...Hook) {
	c.hooks.InvoiceControl = append(c.hooks.InvoiceControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoicecontrol.Intercept(f(g(h())))`.
func (c *InvoiceControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.InvoiceControl = append(c.inters.InvoiceControl, interceptors...)
}

// Create returns a builder for creating a InvoiceControl entity.
func (c *InvoiceControlClient) Create() *InvoiceControlCreate {
	mutation := newInvoiceControlMutation(c.config, OpCreate)
	return &InvoiceControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvoiceControl entities.
func (c *InvoiceControlClient) CreateBulk(builders ...*InvoiceControlCreate) *InvoiceControlCreateBulk {
	return &InvoiceControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InvoiceControlClient) MapCreateBulk(slice any, setFunc func(*InvoiceControlCreate, int)) *InvoiceControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InvoiceControlCreateBulk{err: fmt.Errorf("calling to InvoiceControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InvoiceControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InvoiceControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvoiceControl.
func (c *InvoiceControlClient) Update() *InvoiceControlUpdate {
	mutation := newInvoiceControlMutation(c.config, OpUpdate)
	return &InvoiceControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoiceControlClient) UpdateOne(ic *InvoiceControl) *InvoiceControlUpdateOne {
	mutation := newInvoiceControlMutation(c.config, OpUpdateOne, withInvoiceControl(ic))
	return &InvoiceControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoiceControlClient) UpdateOneID(id uuid.UUID) *InvoiceControlUpdateOne {
	mutation := newInvoiceControlMutation(c.config, OpUpdateOne, withInvoiceControlID(id))
	return &InvoiceControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvoiceControl.
func (c *InvoiceControlClient) Delete() *InvoiceControlDelete {
	mutation := newInvoiceControlMutation(c.config, OpDelete)
	return &InvoiceControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoiceControlClient) DeleteOne(ic *InvoiceControl) *InvoiceControlDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoiceControlClient) DeleteOneID(id uuid.UUID) *InvoiceControlDeleteOne {
	builder := c.Delete().Where(invoicecontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoiceControlDeleteOne{builder}
}

// Query returns a query builder for InvoiceControl.
func (c *InvoiceControlClient) Query() *InvoiceControlQuery {
	return &InvoiceControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoiceControl},
		inters: c.Interceptors(),
	}
}

// Get returns a InvoiceControl entity by its id.
func (c *InvoiceControlClient) Get(ctx context.Context, id uuid.UUID) (*InvoiceControl, error) {
	return c.Query().Where(invoicecontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoiceControlClient) GetX(ctx context.Context, id uuid.UUID) *InvoiceControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a InvoiceControl.
func (c *InvoiceControlClient) QueryOrganization(ic *InvoiceControl) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoicecontrol.Table, invoicecontrol.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, invoicecontrol.OrganizationTable, invoicecontrol.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessUnit queries the business_unit edge of a InvoiceControl.
func (c *InvoiceControlClient) QueryBusinessUnit(ic *InvoiceControl) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoicecontrol.Table, invoicecontrol.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invoicecontrol.BusinessUnitTable, invoicecontrol.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvoiceControlClient) Hooks() []Hook {
	return c.hooks.InvoiceControl
}

// Interceptors returns the client interceptors.
func (c *InvoiceControlClient) Interceptors() []Interceptor {
	return c.inters.InvoiceControl
}

func (c *InvoiceControlClient) mutate(ctx context.Context, m *InvoiceControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoiceControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoiceControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoiceControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoiceControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InvoiceControl mutation op: %q", m.Op())
	}
}

// LocationCategoryClient is a client for the LocationCategory schema.
type LocationCategoryClient struct {
	config
}

// NewLocationCategoryClient returns a client for the LocationCategory from the given config.
func NewLocationCategoryClient(c config) *LocationCategoryClient {
	return &LocationCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `locationcategory.Hooks(f(g(h())))`.
func (c *LocationCategoryClient) Use(hooks ...Hook) {
	c.hooks.LocationCategory = append(c.hooks.LocationCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `locationcategory.Intercept(f(g(h())))`.
func (c *LocationCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.LocationCategory = append(c.inters.LocationCategory, interceptors...)
}

// Create returns a builder for creating a LocationCategory entity.
func (c *LocationCategoryClient) Create() *LocationCategoryCreate {
	mutation := newLocationCategoryMutation(c.config, OpCreate)
	return &LocationCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LocationCategory entities.
func (c *LocationCategoryClient) CreateBulk(builders ...*LocationCategoryCreate) *LocationCategoryCreateBulk {
	return &LocationCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LocationCategoryClient) MapCreateBulk(slice any, setFunc func(*LocationCategoryCreate, int)) *LocationCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LocationCategoryCreateBulk{err: fmt.Errorf("calling to LocationCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LocationCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LocationCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LocationCategory.
func (c *LocationCategoryClient) Update() *LocationCategoryUpdate {
	mutation := newLocationCategoryMutation(c.config, OpUpdate)
	return &LocationCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationCategoryClient) UpdateOne(lc *LocationCategory) *LocationCategoryUpdateOne {
	mutation := newLocationCategoryMutation(c.config, OpUpdateOne, withLocationCategory(lc))
	return &LocationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationCategoryClient) UpdateOneID(id uuid.UUID) *LocationCategoryUpdateOne {
	mutation := newLocationCategoryMutation(c.config, OpUpdateOne, withLocationCategoryID(id))
	return &LocationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LocationCategory.
func (c *LocationCategoryClient) Delete() *LocationCategoryDelete {
	mutation := newLocationCategoryMutation(c.config, OpDelete)
	return &LocationCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocationCategoryClient) DeleteOne(lc *LocationCategory) *LocationCategoryDeleteOne {
	return c.DeleteOneID(lc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocationCategoryClient) DeleteOneID(id uuid.UUID) *LocationCategoryDeleteOne {
	builder := c.Delete().Where(locationcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationCategoryDeleteOne{builder}
}

// Query returns a query builder for LocationCategory.
func (c *LocationCategoryClient) Query() *LocationCategoryQuery {
	return &LocationCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocationCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a LocationCategory entity by its id.
func (c *LocationCategoryClient) Get(ctx context.Context, id uuid.UUID) (*LocationCategory, error) {
	return c.Query().Where(locationcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationCategoryClient) GetX(ctx context.Context, id uuid.UUID) *LocationCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a LocationCategory.
func (c *LocationCategoryClient) QueryBusinessUnit(lc *LocationCategory) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(locationcategory.Table, locationcategory.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, locationcategory.BusinessUnitTable, locationcategory.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(lc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a LocationCategory.
func (c *LocationCategoryClient) QueryOrganization(lc *LocationCategory) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(locationcategory.Table, locationcategory.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, locationcategory.OrganizationTable, locationcategory.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(lc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocationCategoryClient) Hooks() []Hook {
	return c.hooks.LocationCategory
}

// Interceptors returns the client interceptors.
func (c *LocationCategoryClient) Interceptors() []Interceptor {
	return c.inters.LocationCategory
}

func (c *LocationCategoryClient) mutate(ctx context.Context, m *LocationCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocationCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocationCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocationCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LocationCategory mutation op: %q", m.Op())
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationClient) MapCreateBulk(slice any, setFunc func(*OrganizationCreate, int)) *OrganizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationCreateBulk{err: fmt.Errorf("calling to OrganizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id uuid.UUID) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id uuid.UUID) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id uuid.UUID) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id uuid.UUID) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a Organization.
func (c *OrganizationClient) QueryBusinessUnit(o *Organization) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organization.BusinessUnitTable, organization.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccountingControl queries the accounting_control edge of a Organization.
func (c *OrganizationClient) QueryAccountingControl(o *Organization) *AccountingControlQuery {
	query := (&AccountingControlClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(accountingcontrol.Table, accountingcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.AccountingControlTable, organization.AccountingControlColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingControl queries the billing_control edge of a Organization.
func (c *OrganizationClient) QueryBillingControl(o *Organization) *BillingControlQuery {
	query := (&BillingControlClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(billingcontrol.Table, billingcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.BillingControlTable, organization.BillingControlColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDispatchControl queries the dispatch_control edge of a Organization.
func (c *OrganizationClient) QueryDispatchControl(o *Organization) *DispatchControlQuery {
	query := (&DispatchControlClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(dispatchcontrol.Table, dispatchcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.DispatchControlTable, organization.DispatchControlColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeasibilityToolControl queries the feasibility_tool_control edge of a Organization.
func (c *OrganizationClient) QueryFeasibilityToolControl(o *Organization) *FeasibilityToolControlQuery {
	query := (&FeasibilityToolControlClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(feasibilitytoolcontrol.Table, feasibilitytoolcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.FeasibilityToolControlTable, organization.FeasibilityToolControlColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvoiceControl queries the invoice_control edge of a Organization.
func (c *OrganizationClient) QueryInvoiceControl(o *Organization) *InvoiceControlQuery {
	query := (&InvoiceControlClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(invoicecontrol.Table, invoicecontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.InvoiceControlTable, organization.InvoiceControlColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRouteControl queries the route_control edge of a Organization.
func (c *OrganizationClient) QueryRouteControl(o *Organization) *RouteControlQuery {
	query := (&RouteControlClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(routecontrol.Table, routecontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.RouteControlTable, organization.RouteControlColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentControl queries the shipment_control edge of a Organization.
func (c *OrganizationClient) QueryShipmentControl(o *Organization) *ShipmentControlQuery {
	query := (&ShipmentControlClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(shipmentcontrol.Table, shipmentcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.ShipmentControlTable, organization.ShipmentControlColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailControl queries the email_control edge of a Organization.
func (c *OrganizationClient) QueryEmailControl(o *Organization) *EmailControlQuery {
	query := (&EmailControlClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(emailcontrol.Table, emailcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.EmailControlTable, organization.EmailControlColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	return c.inters.Organization
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Organization mutation op: %q", m.Op())
	}
}

// QualifierCodeClient is a client for the QualifierCode schema.
type QualifierCodeClient struct {
	config
}

// NewQualifierCodeClient returns a client for the QualifierCode from the given config.
func NewQualifierCodeClient(c config) *QualifierCodeClient {
	return &QualifierCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `qualifiercode.Hooks(f(g(h())))`.
func (c *QualifierCodeClient) Use(hooks ...Hook) {
	c.hooks.QualifierCode = append(c.hooks.QualifierCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `qualifiercode.Intercept(f(g(h())))`.
func (c *QualifierCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.QualifierCode = append(c.inters.QualifierCode, interceptors...)
}

// Create returns a builder for creating a QualifierCode entity.
func (c *QualifierCodeClient) Create() *QualifierCodeCreate {
	mutation := newQualifierCodeMutation(c.config, OpCreate)
	return &QualifierCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QualifierCode entities.
func (c *QualifierCodeClient) CreateBulk(builders ...*QualifierCodeCreate) *QualifierCodeCreateBulk {
	return &QualifierCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QualifierCodeClient) MapCreateBulk(slice any, setFunc func(*QualifierCodeCreate, int)) *QualifierCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QualifierCodeCreateBulk{err: fmt.Errorf("calling to QualifierCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QualifierCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QualifierCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QualifierCode.
func (c *QualifierCodeClient) Update() *QualifierCodeUpdate {
	mutation := newQualifierCodeMutation(c.config, OpUpdate)
	return &QualifierCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QualifierCodeClient) UpdateOne(qc *QualifierCode) *QualifierCodeUpdateOne {
	mutation := newQualifierCodeMutation(c.config, OpUpdateOne, withQualifierCode(qc))
	return &QualifierCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QualifierCodeClient) UpdateOneID(id uuid.UUID) *QualifierCodeUpdateOne {
	mutation := newQualifierCodeMutation(c.config, OpUpdateOne, withQualifierCodeID(id))
	return &QualifierCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QualifierCode.
func (c *QualifierCodeClient) Delete() *QualifierCodeDelete {
	mutation := newQualifierCodeMutation(c.config, OpDelete)
	return &QualifierCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QualifierCodeClient) DeleteOne(qc *QualifierCode) *QualifierCodeDeleteOne {
	return c.DeleteOneID(qc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QualifierCodeClient) DeleteOneID(id uuid.UUID) *QualifierCodeDeleteOne {
	builder := c.Delete().Where(qualifiercode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QualifierCodeDeleteOne{builder}
}

// Query returns a query builder for QualifierCode.
func (c *QualifierCodeClient) Query() *QualifierCodeQuery {
	return &QualifierCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQualifierCode},
		inters: c.Interceptors(),
	}
}

// Get returns a QualifierCode entity by its id.
func (c *QualifierCodeClient) Get(ctx context.Context, id uuid.UUID) (*QualifierCode, error) {
	return c.Query().Where(qualifiercode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QualifierCodeClient) GetX(ctx context.Context, id uuid.UUID) *QualifierCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a QualifierCode.
func (c *QualifierCodeClient) QueryBusinessUnit(qc *QualifierCode) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(qualifiercode.Table, qualifiercode.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, qualifiercode.BusinessUnitTable, qualifiercode.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(qc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a QualifierCode.
func (c *QualifierCodeClient) QueryOrganization(qc *QualifierCode) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(qualifiercode.Table, qualifiercode.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, qualifiercode.OrganizationTable, qualifiercode.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(qc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QualifierCodeClient) Hooks() []Hook {
	return c.hooks.QualifierCode
}

// Interceptors returns the client interceptors.
func (c *QualifierCodeClient) Interceptors() []Interceptor {
	return c.inters.QualifierCode
}

func (c *QualifierCodeClient) mutate(ctx context.Context, m *QualifierCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QualifierCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QualifierCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QualifierCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QualifierCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown QualifierCode mutation op: %q", m.Op())
	}
}

// RevenueCodeClient is a client for the RevenueCode schema.
type RevenueCodeClient struct {
	config
}

// NewRevenueCodeClient returns a client for the RevenueCode from the given config.
func NewRevenueCodeClient(c config) *RevenueCodeClient {
	return &RevenueCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `revenuecode.Hooks(f(g(h())))`.
func (c *RevenueCodeClient) Use(hooks ...Hook) {
	c.hooks.RevenueCode = append(c.hooks.RevenueCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `revenuecode.Intercept(f(g(h())))`.
func (c *RevenueCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.RevenueCode = append(c.inters.RevenueCode, interceptors...)
}

// Create returns a builder for creating a RevenueCode entity.
func (c *RevenueCodeClient) Create() *RevenueCodeCreate {
	mutation := newRevenueCodeMutation(c.config, OpCreate)
	return &RevenueCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RevenueCode entities.
func (c *RevenueCodeClient) CreateBulk(builders ...*RevenueCodeCreate) *RevenueCodeCreateBulk {
	return &RevenueCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RevenueCodeClient) MapCreateBulk(slice any, setFunc func(*RevenueCodeCreate, int)) *RevenueCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RevenueCodeCreateBulk{err: fmt.Errorf("calling to RevenueCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RevenueCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RevenueCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RevenueCode.
func (c *RevenueCodeClient) Update() *RevenueCodeUpdate {
	mutation := newRevenueCodeMutation(c.config, OpUpdate)
	return &RevenueCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RevenueCodeClient) UpdateOne(rc *RevenueCode) *RevenueCodeUpdateOne {
	mutation := newRevenueCodeMutation(c.config, OpUpdateOne, withRevenueCode(rc))
	return &RevenueCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RevenueCodeClient) UpdateOneID(id uuid.UUID) *RevenueCodeUpdateOne {
	mutation := newRevenueCodeMutation(c.config, OpUpdateOne, withRevenueCodeID(id))
	return &RevenueCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RevenueCode.
func (c *RevenueCodeClient) Delete() *RevenueCodeDelete {
	mutation := newRevenueCodeMutation(c.config, OpDelete)
	return &RevenueCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RevenueCodeClient) DeleteOne(rc *RevenueCode) *RevenueCodeDeleteOne {
	return c.DeleteOneID(rc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RevenueCodeClient) DeleteOneID(id uuid.UUID) *RevenueCodeDeleteOne {
	builder := c.Delete().Where(revenuecode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RevenueCodeDeleteOne{builder}
}

// Query returns a query builder for RevenueCode.
func (c *RevenueCodeClient) Query() *RevenueCodeQuery {
	return &RevenueCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRevenueCode},
		inters: c.Interceptors(),
	}
}

// Get returns a RevenueCode entity by its id.
func (c *RevenueCodeClient) Get(ctx context.Context, id uuid.UUID) (*RevenueCode, error) {
	return c.Query().Where(revenuecode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RevenueCodeClient) GetX(ctx context.Context, id uuid.UUID) *RevenueCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a RevenueCode.
func (c *RevenueCodeClient) QueryBusinessUnit(rc *RevenueCode) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revenuecode.Table, revenuecode.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, revenuecode.BusinessUnitTable, revenuecode.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a RevenueCode.
func (c *RevenueCodeClient) QueryOrganization(rc *RevenueCode) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revenuecode.Table, revenuecode.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, revenuecode.OrganizationTable, revenuecode.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExpenseAccount queries the expense_account edge of a RevenueCode.
func (c *RevenueCodeClient) QueryExpenseAccount(rc *RevenueCode) *GeneralLedgerAccountQuery {
	query := (&GeneralLedgerAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revenuecode.Table, revenuecode.FieldID, id),
			sqlgraph.To(generalledgeraccount.Table, generalledgeraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, revenuecode.ExpenseAccountTable, revenuecode.ExpenseAccountColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRevenueAccount queries the revenue_account edge of a RevenueCode.
func (c *RevenueCodeClient) QueryRevenueAccount(rc *RevenueCode) *GeneralLedgerAccountQuery {
	query := (&GeneralLedgerAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revenuecode.Table, revenuecode.FieldID, id),
			sqlgraph.To(generalledgeraccount.Table, generalledgeraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, revenuecode.RevenueAccountTable, revenuecode.RevenueAccountColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RevenueCodeClient) Hooks() []Hook {
	hooks := c.hooks.RevenueCode
	return append(hooks[:len(hooks):len(hooks)], revenuecode.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *RevenueCodeClient) Interceptors() []Interceptor {
	return c.inters.RevenueCode
}

func (c *RevenueCodeClient) mutate(ctx context.Context, m *RevenueCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RevenueCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RevenueCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RevenueCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RevenueCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RevenueCode mutation op: %q", m.Op())
	}
}

// RouteControlClient is a client for the RouteControl schema.
type RouteControlClient struct {
	config
}

// NewRouteControlClient returns a client for the RouteControl from the given config.
func NewRouteControlClient(c config) *RouteControlClient {
	return &RouteControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `routecontrol.Hooks(f(g(h())))`.
func (c *RouteControlClient) Use(hooks ...Hook) {
	c.hooks.RouteControl = append(c.hooks.RouteControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `routecontrol.Intercept(f(g(h())))`.
func (c *RouteControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.RouteControl = append(c.inters.RouteControl, interceptors...)
}

// Create returns a builder for creating a RouteControl entity.
func (c *RouteControlClient) Create() *RouteControlCreate {
	mutation := newRouteControlMutation(c.config, OpCreate)
	return &RouteControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RouteControl entities.
func (c *RouteControlClient) CreateBulk(builders ...*RouteControlCreate) *RouteControlCreateBulk {
	return &RouteControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RouteControlClient) MapCreateBulk(slice any, setFunc func(*RouteControlCreate, int)) *RouteControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RouteControlCreateBulk{err: fmt.Errorf("calling to RouteControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RouteControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RouteControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RouteControl.
func (c *RouteControlClient) Update() *RouteControlUpdate {
	mutation := newRouteControlMutation(c.config, OpUpdate)
	return &RouteControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RouteControlClient) UpdateOne(rc *RouteControl) *RouteControlUpdateOne {
	mutation := newRouteControlMutation(c.config, OpUpdateOne, withRouteControl(rc))
	return &RouteControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RouteControlClient) UpdateOneID(id uuid.UUID) *RouteControlUpdateOne {
	mutation := newRouteControlMutation(c.config, OpUpdateOne, withRouteControlID(id))
	return &RouteControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RouteControl.
func (c *RouteControlClient) Delete() *RouteControlDelete {
	mutation := newRouteControlMutation(c.config, OpDelete)
	return &RouteControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RouteControlClient) DeleteOne(rc *RouteControl) *RouteControlDeleteOne {
	return c.DeleteOneID(rc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RouteControlClient) DeleteOneID(id uuid.UUID) *RouteControlDeleteOne {
	builder := c.Delete().Where(routecontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RouteControlDeleteOne{builder}
}

// Query returns a query builder for RouteControl.
func (c *RouteControlClient) Query() *RouteControlQuery {
	return &RouteControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRouteControl},
		inters: c.Interceptors(),
	}
}

// Get returns a RouteControl entity by its id.
func (c *RouteControlClient) Get(ctx context.Context, id uuid.UUID) (*RouteControl, error) {
	return c.Query().Where(routecontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RouteControlClient) GetX(ctx context.Context, id uuid.UUID) *RouteControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a RouteControl.
func (c *RouteControlClient) QueryOrganization(rc *RouteControl) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(routecontrol.Table, routecontrol.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, routecontrol.OrganizationTable, routecontrol.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessUnit queries the business_unit edge of a RouteControl.
func (c *RouteControlClient) QueryBusinessUnit(rc *RouteControl) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(routecontrol.Table, routecontrol.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, routecontrol.BusinessUnitTable, routecontrol.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RouteControlClient) Hooks() []Hook {
	return c.hooks.RouteControl
}

// Interceptors returns the client interceptors.
func (c *RouteControlClient) Interceptors() []Interceptor {
	return c.inters.RouteControl
}

func (c *RouteControlClient) mutate(ctx context.Context, m *RouteControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RouteControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RouteControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RouteControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RouteControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RouteControl mutation op: %q", m.Op())
	}
}

// ServiceTypeClient is a client for the ServiceType schema.
type ServiceTypeClient struct {
	config
}

// NewServiceTypeClient returns a client for the ServiceType from the given config.
func NewServiceTypeClient(c config) *ServiceTypeClient {
	return &ServiceTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicetype.Hooks(f(g(h())))`.
func (c *ServiceTypeClient) Use(hooks ...Hook) {
	c.hooks.ServiceType = append(c.hooks.ServiceType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicetype.Intercept(f(g(h())))`.
func (c *ServiceTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceType = append(c.inters.ServiceType, interceptors...)
}

// Create returns a builder for creating a ServiceType entity.
func (c *ServiceTypeClient) Create() *ServiceTypeCreate {
	mutation := newServiceTypeMutation(c.config, OpCreate)
	return &ServiceTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceType entities.
func (c *ServiceTypeClient) CreateBulk(builders ...*ServiceTypeCreate) *ServiceTypeCreateBulk {
	return &ServiceTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServiceTypeClient) MapCreateBulk(slice any, setFunc func(*ServiceTypeCreate, int)) *ServiceTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServiceTypeCreateBulk{err: fmt.Errorf("calling to ServiceTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServiceTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServiceTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceType.
func (c *ServiceTypeClient) Update() *ServiceTypeUpdate {
	mutation := newServiceTypeMutation(c.config, OpUpdate)
	return &ServiceTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceTypeClient) UpdateOne(st *ServiceType) *ServiceTypeUpdateOne {
	mutation := newServiceTypeMutation(c.config, OpUpdateOne, withServiceType(st))
	return &ServiceTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceTypeClient) UpdateOneID(id uuid.UUID) *ServiceTypeUpdateOne {
	mutation := newServiceTypeMutation(c.config, OpUpdateOne, withServiceTypeID(id))
	return &ServiceTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceType.
func (c *ServiceTypeClient) Delete() *ServiceTypeDelete {
	mutation := newServiceTypeMutation(c.config, OpDelete)
	return &ServiceTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceTypeClient) DeleteOne(st *ServiceType) *ServiceTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceTypeClient) DeleteOneID(id uuid.UUID) *ServiceTypeDeleteOne {
	builder := c.Delete().Where(servicetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceTypeDeleteOne{builder}
}

// Query returns a query builder for ServiceType.
func (c *ServiceTypeClient) Query() *ServiceTypeQuery {
	return &ServiceTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceType entity by its id.
func (c *ServiceTypeClient) Get(ctx context.Context, id uuid.UUID) (*ServiceType, error) {
	return c.Query().Where(servicetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceTypeClient) GetX(ctx context.Context, id uuid.UUID) *ServiceType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a ServiceType.
func (c *ServiceTypeClient) QueryBusinessUnit(st *ServiceType) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicetype.Table, servicetype.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servicetype.BusinessUnitTable, servicetype.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a ServiceType.
func (c *ServiceTypeClient) QueryOrganization(st *ServiceType) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicetype.Table, servicetype.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servicetype.OrganizationTable, servicetype.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceTypeClient) Hooks() []Hook {
	return c.hooks.ServiceType
}

// Interceptors returns the client interceptors.
func (c *ServiceTypeClient) Interceptors() []Interceptor {
	return c.inters.ServiceType
}

func (c *ServiceTypeClient) mutate(ctx context.Context, m *ServiceTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceType mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionClient) MapCreateBulk(slice any, setFunc func(*SessionCreate, int)) *SessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionCreateBulk{err: fmt.Errorf("calling to SessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id string) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id string) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id string) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id string) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// ShipmentControlClient is a client for the ShipmentControl schema.
type ShipmentControlClient struct {
	config
}

// NewShipmentControlClient returns a client for the ShipmentControl from the given config.
func NewShipmentControlClient(c config) *ShipmentControlClient {
	return &ShipmentControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentcontrol.Hooks(f(g(h())))`.
func (c *ShipmentControlClient) Use(hooks ...Hook) {
	c.hooks.ShipmentControl = append(c.hooks.ShipmentControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentcontrol.Intercept(f(g(h())))`.
func (c *ShipmentControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentControl = append(c.inters.ShipmentControl, interceptors...)
}

// Create returns a builder for creating a ShipmentControl entity.
func (c *ShipmentControlClient) Create() *ShipmentControlCreate {
	mutation := newShipmentControlMutation(c.config, OpCreate)
	return &ShipmentControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentControl entities.
func (c *ShipmentControlClient) CreateBulk(builders ...*ShipmentControlCreate) *ShipmentControlCreateBulk {
	return &ShipmentControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentControlClient) MapCreateBulk(slice any, setFunc func(*ShipmentControlCreate, int)) *ShipmentControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentControlCreateBulk{err: fmt.Errorf("calling to ShipmentControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentControl.
func (c *ShipmentControlClient) Update() *ShipmentControlUpdate {
	mutation := newShipmentControlMutation(c.config, OpUpdate)
	return &ShipmentControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentControlClient) UpdateOne(sc *ShipmentControl) *ShipmentControlUpdateOne {
	mutation := newShipmentControlMutation(c.config, OpUpdateOne, withShipmentControl(sc))
	return &ShipmentControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentControlClient) UpdateOneID(id uuid.UUID) *ShipmentControlUpdateOne {
	mutation := newShipmentControlMutation(c.config, OpUpdateOne, withShipmentControlID(id))
	return &ShipmentControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentControl.
func (c *ShipmentControlClient) Delete() *ShipmentControlDelete {
	mutation := newShipmentControlMutation(c.config, OpDelete)
	return &ShipmentControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentControlClient) DeleteOne(sc *ShipmentControl) *ShipmentControlDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentControlClient) DeleteOneID(id uuid.UUID) *ShipmentControlDeleteOne {
	builder := c.Delete().Where(shipmentcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentControlDeleteOne{builder}
}

// Query returns a query builder for ShipmentControl.
func (c *ShipmentControlClient) Query() *ShipmentControlQuery {
	return &ShipmentControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentControl},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentControl entity by its id.
func (c *ShipmentControlClient) Get(ctx context.Context, id uuid.UUID) (*ShipmentControl, error) {
	return c.Query().Where(shipmentcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentControlClient) GetX(ctx context.Context, id uuid.UUID) *ShipmentControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a ShipmentControl.
func (c *ShipmentControlClient) QueryOrganization(sc *ShipmentControl) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentcontrol.Table, shipmentcontrol.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentcontrol.OrganizationTable, shipmentcontrol.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessUnit queries the business_unit edge of a ShipmentControl.
func (c *ShipmentControlClient) QueryBusinessUnit(sc *ShipmentControl) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentcontrol.Table, shipmentcontrol.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentcontrol.BusinessUnitTable, shipmentcontrol.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentControlClient) Hooks() []Hook {
	return c.hooks.ShipmentControl
}

// Interceptors returns the client interceptors.
func (c *ShipmentControlClient) Interceptors() []Interceptor {
	return c.inters.ShipmentControl
}

func (c *ShipmentControlClient) mutate(ctx context.Context, m *ShipmentControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentControl mutation op: %q", m.Op())
	}
}

// ShipmentTypeClient is a client for the ShipmentType schema.
type ShipmentTypeClient struct {
	config
}

// NewShipmentTypeClient returns a client for the ShipmentType from the given config.
func NewShipmentTypeClient(c config) *ShipmentTypeClient {
	return &ShipmentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmenttype.Hooks(f(g(h())))`.
func (c *ShipmentTypeClient) Use(hooks ...Hook) {
	c.hooks.ShipmentType = append(c.hooks.ShipmentType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmenttype.Intercept(f(g(h())))`.
func (c *ShipmentTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentType = append(c.inters.ShipmentType, interceptors...)
}

// Create returns a builder for creating a ShipmentType entity.
func (c *ShipmentTypeClient) Create() *ShipmentTypeCreate {
	mutation := newShipmentTypeMutation(c.config, OpCreate)
	return &ShipmentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentType entities.
func (c *ShipmentTypeClient) CreateBulk(builders ...*ShipmentTypeCreate) *ShipmentTypeCreateBulk {
	return &ShipmentTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentTypeClient) MapCreateBulk(slice any, setFunc func(*ShipmentTypeCreate, int)) *ShipmentTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentTypeCreateBulk{err: fmt.Errorf("calling to ShipmentTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentType.
func (c *ShipmentTypeClient) Update() *ShipmentTypeUpdate {
	mutation := newShipmentTypeMutation(c.config, OpUpdate)
	return &ShipmentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentTypeClient) UpdateOne(st *ShipmentType) *ShipmentTypeUpdateOne {
	mutation := newShipmentTypeMutation(c.config, OpUpdateOne, withShipmentType(st))
	return &ShipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentTypeClient) UpdateOneID(id uuid.UUID) *ShipmentTypeUpdateOne {
	mutation := newShipmentTypeMutation(c.config, OpUpdateOne, withShipmentTypeID(id))
	return &ShipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentType.
func (c *ShipmentTypeClient) Delete() *ShipmentTypeDelete {
	mutation := newShipmentTypeMutation(c.config, OpDelete)
	return &ShipmentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentTypeClient) DeleteOne(st *ShipmentType) *ShipmentTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentTypeClient) DeleteOneID(id uuid.UUID) *ShipmentTypeDeleteOne {
	builder := c.Delete().Where(shipmenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentTypeDeleteOne{builder}
}

// Query returns a query builder for ShipmentType.
func (c *ShipmentTypeClient) Query() *ShipmentTypeQuery {
	return &ShipmentTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentType},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentType entity by its id.
func (c *ShipmentTypeClient) Get(ctx context.Context, id uuid.UUID) (*ShipmentType, error) {
	return c.Query().Where(shipmenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentTypeClient) GetX(ctx context.Context, id uuid.UUID) *ShipmentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a ShipmentType.
func (c *ShipmentTypeClient) QueryBusinessUnit(st *ShipmentType) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenttype.Table, shipmenttype.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmenttype.BusinessUnitTable, shipmenttype.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a ShipmentType.
func (c *ShipmentTypeClient) QueryOrganization(st *ShipmentType) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenttype.Table, shipmenttype.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmenttype.OrganizationTable, shipmenttype.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentTypeClient) Hooks() []Hook {
	return c.hooks.ShipmentType
}

// Interceptors returns the client interceptors.
func (c *ShipmentTypeClient) Interceptors() []Interceptor {
	return c.inters.ShipmentType
}

func (c *ShipmentTypeClient) mutate(ctx context.Context, m *ShipmentTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentType mutation op: %q", m.Op())
	}
}

// TableChangeAlertClient is a client for the TableChangeAlert schema.
type TableChangeAlertClient struct {
	config
}

// NewTableChangeAlertClient returns a client for the TableChangeAlert from the given config.
func NewTableChangeAlertClient(c config) *TableChangeAlertClient {
	return &TableChangeAlertClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tablechangealert.Hooks(f(g(h())))`.
func (c *TableChangeAlertClient) Use(hooks ...Hook) {
	c.hooks.TableChangeAlert = append(c.hooks.TableChangeAlert, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tablechangealert.Intercept(f(g(h())))`.
func (c *TableChangeAlertClient) Intercept(interceptors ...Interceptor) {
	c.inters.TableChangeAlert = append(c.inters.TableChangeAlert, interceptors...)
}

// Create returns a builder for creating a TableChangeAlert entity.
func (c *TableChangeAlertClient) Create() *TableChangeAlertCreate {
	mutation := newTableChangeAlertMutation(c.config, OpCreate)
	return &TableChangeAlertCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TableChangeAlert entities.
func (c *TableChangeAlertClient) CreateBulk(builders ...*TableChangeAlertCreate) *TableChangeAlertCreateBulk {
	return &TableChangeAlertCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TableChangeAlertClient) MapCreateBulk(slice any, setFunc func(*TableChangeAlertCreate, int)) *TableChangeAlertCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TableChangeAlertCreateBulk{err: fmt.Errorf("calling to TableChangeAlertClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TableChangeAlertCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TableChangeAlertCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TableChangeAlert.
func (c *TableChangeAlertClient) Update() *TableChangeAlertUpdate {
	mutation := newTableChangeAlertMutation(c.config, OpUpdate)
	return &TableChangeAlertUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TableChangeAlertClient) UpdateOne(tca *TableChangeAlert) *TableChangeAlertUpdateOne {
	mutation := newTableChangeAlertMutation(c.config, OpUpdateOne, withTableChangeAlert(tca))
	return &TableChangeAlertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TableChangeAlertClient) UpdateOneID(id uuid.UUID) *TableChangeAlertUpdateOne {
	mutation := newTableChangeAlertMutation(c.config, OpUpdateOne, withTableChangeAlertID(id))
	return &TableChangeAlertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TableChangeAlert.
func (c *TableChangeAlertClient) Delete() *TableChangeAlertDelete {
	mutation := newTableChangeAlertMutation(c.config, OpDelete)
	return &TableChangeAlertDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TableChangeAlertClient) DeleteOne(tca *TableChangeAlert) *TableChangeAlertDeleteOne {
	return c.DeleteOneID(tca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TableChangeAlertClient) DeleteOneID(id uuid.UUID) *TableChangeAlertDeleteOne {
	builder := c.Delete().Where(tablechangealert.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TableChangeAlertDeleteOne{builder}
}

// Query returns a query builder for TableChangeAlert.
func (c *TableChangeAlertClient) Query() *TableChangeAlertQuery {
	return &TableChangeAlertQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTableChangeAlert},
		inters: c.Interceptors(),
	}
}

// Get returns a TableChangeAlert entity by its id.
func (c *TableChangeAlertClient) Get(ctx context.Context, id uuid.UUID) (*TableChangeAlert, error) {
	return c.Query().Where(tablechangealert.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TableChangeAlertClient) GetX(ctx context.Context, id uuid.UUID) *TableChangeAlert {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a TableChangeAlert.
func (c *TableChangeAlertClient) QueryBusinessUnit(tca *TableChangeAlert) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tablechangealert.Table, tablechangealert.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tablechangealert.BusinessUnitTable, tablechangealert.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(tca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a TableChangeAlert.
func (c *TableChangeAlertClient) QueryOrganization(tca *TableChangeAlert) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tablechangealert.Table, tablechangealert.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tablechangealert.OrganizationTable, tablechangealert.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(tca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TableChangeAlertClient) Hooks() []Hook {
	return c.hooks.TableChangeAlert
}

// Interceptors returns the client interceptors.
func (c *TableChangeAlertClient) Interceptors() []Interceptor {
	return c.inters.TableChangeAlert
}

func (c *TableChangeAlertClient) mutate(ctx context.Context, m *TableChangeAlertMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TableChangeAlertCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TableChangeAlertUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TableChangeAlertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TableChangeAlertDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TableChangeAlert mutation op: %q", m.Op())
	}
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tag.Intercept(f(g(h())))`.
func (c *TagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tag = append(c.inters.Tag, interceptors...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagClient) MapCreateBulk(slice any, setFunc func(*TagCreate, int)) *TagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagCreateBulk{err: fmt.Errorf("calling to TagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id uuid.UUID) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id uuid.UUID) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id uuid.UUID) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id uuid.UUID) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a Tag.
func (c *TagClient) QueryBusinessUnit(t *Tag) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tag.BusinessUnitTable, tag.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Tag.
func (c *TagClient) QueryOrganization(t *Tag) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tag.OrganizationTable, tag.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// Interceptors returns the client interceptors.
func (c *TagClient) Interceptors() []Interceptor {
	return c.inters.Tag
}

func (c *TagClient) mutate(ctx context.Context, m *TagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tag mutation op: %q", m.Op())
	}
}

// UsStateClient is a client for the UsState schema.
type UsStateClient struct {
	config
}

// NewUsStateClient returns a client for the UsState from the given config.
func NewUsStateClient(c config) *UsStateClient {
	return &UsStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usstate.Hooks(f(g(h())))`.
func (c *UsStateClient) Use(hooks ...Hook) {
	c.hooks.UsState = append(c.hooks.UsState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usstate.Intercept(f(g(h())))`.
func (c *UsStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.UsState = append(c.inters.UsState, interceptors...)
}

// Create returns a builder for creating a UsState entity.
func (c *UsStateClient) Create() *UsStateCreate {
	mutation := newUsStateMutation(c.config, OpCreate)
	return &UsStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UsState entities.
func (c *UsStateClient) CreateBulk(builders ...*UsStateCreate) *UsStateCreateBulk {
	return &UsStateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsStateClient) MapCreateBulk(slice any, setFunc func(*UsStateCreate, int)) *UsStateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsStateCreateBulk{err: fmt.Errorf("calling to UsStateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsStateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UsState.
func (c *UsStateClient) Update() *UsStateUpdate {
	mutation := newUsStateMutation(c.config, OpUpdate)
	return &UsStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsStateClient) UpdateOne(us *UsState) *UsStateUpdateOne {
	mutation := newUsStateMutation(c.config, OpUpdateOne, withUsState(us))
	return &UsStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsStateClient) UpdateOneID(id uuid.UUID) *UsStateUpdateOne {
	mutation := newUsStateMutation(c.config, OpUpdateOne, withUsStateID(id))
	return &UsStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UsState.
func (c *UsStateClient) Delete() *UsStateDelete {
	mutation := newUsStateMutation(c.config, OpDelete)
	return &UsStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsStateClient) DeleteOne(us *UsState) *UsStateDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsStateClient) DeleteOneID(id uuid.UUID) *UsStateDeleteOne {
	builder := c.Delete().Where(usstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsStateDeleteOne{builder}
}

// Query returns a query builder for UsState.
func (c *UsStateClient) Query() *UsStateQuery {
	return &UsStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsState},
		inters: c.Interceptors(),
	}
}

// Get returns a UsState entity by its id.
func (c *UsStateClient) Get(ctx context.Context, id uuid.UUID) (*UsState, error) {
	return c.Query().Where(usstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsStateClient) GetX(ctx context.Context, id uuid.UUID) *UsState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UsStateClient) Hooks() []Hook {
	return c.hooks.UsState
}

// Interceptors returns the client interceptors.
func (c *UsStateClient) Interceptors() []Interceptor {
	return c.inters.UsState
}

func (c *UsStateClient) mutate(ctx context.Context, m *UsStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UsState mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a User.
func (c *UserClient) QueryBusinessUnit(u *User) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.BusinessUnitTable, user.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a User.
func (c *UserClient) QueryOrganization(u *User) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.OrganizationTable, user.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserFavorites queries the user_favorites edge of a User.
func (c *UserClient) QueryUserFavorites(u *User) *UserFavoriteQuery {
	query := (&UserFavoriteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userfavorite.Table, userfavorite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserFavoritesTable, user.UserFavoritesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserFavoriteClient is a client for the UserFavorite schema.
type UserFavoriteClient struct {
	config
}

// NewUserFavoriteClient returns a client for the UserFavorite from the given config.
func NewUserFavoriteClient(c config) *UserFavoriteClient {
	return &UserFavoriteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userfavorite.Hooks(f(g(h())))`.
func (c *UserFavoriteClient) Use(hooks ...Hook) {
	c.hooks.UserFavorite = append(c.hooks.UserFavorite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userfavorite.Intercept(f(g(h())))`.
func (c *UserFavoriteClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserFavorite = append(c.inters.UserFavorite, interceptors...)
}

// Create returns a builder for creating a UserFavorite entity.
func (c *UserFavoriteClient) Create() *UserFavoriteCreate {
	mutation := newUserFavoriteMutation(c.config, OpCreate)
	return &UserFavoriteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserFavorite entities.
func (c *UserFavoriteClient) CreateBulk(builders ...*UserFavoriteCreate) *UserFavoriteCreateBulk {
	return &UserFavoriteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserFavoriteClient) MapCreateBulk(slice any, setFunc func(*UserFavoriteCreate, int)) *UserFavoriteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserFavoriteCreateBulk{err: fmt.Errorf("calling to UserFavoriteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserFavoriteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserFavoriteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserFavorite.
func (c *UserFavoriteClient) Update() *UserFavoriteUpdate {
	mutation := newUserFavoriteMutation(c.config, OpUpdate)
	return &UserFavoriteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserFavoriteClient) UpdateOne(uf *UserFavorite) *UserFavoriteUpdateOne {
	mutation := newUserFavoriteMutation(c.config, OpUpdateOne, withUserFavorite(uf))
	return &UserFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserFavoriteClient) UpdateOneID(id uuid.UUID) *UserFavoriteUpdateOne {
	mutation := newUserFavoriteMutation(c.config, OpUpdateOne, withUserFavoriteID(id))
	return &UserFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserFavorite.
func (c *UserFavoriteClient) Delete() *UserFavoriteDelete {
	mutation := newUserFavoriteMutation(c.config, OpDelete)
	return &UserFavoriteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserFavoriteClient) DeleteOne(uf *UserFavorite) *UserFavoriteDeleteOne {
	return c.DeleteOneID(uf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserFavoriteClient) DeleteOneID(id uuid.UUID) *UserFavoriteDeleteOne {
	builder := c.Delete().Where(userfavorite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserFavoriteDeleteOne{builder}
}

// Query returns a query builder for UserFavorite.
func (c *UserFavoriteClient) Query() *UserFavoriteQuery {
	return &UserFavoriteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserFavorite},
		inters: c.Interceptors(),
	}
}

// Get returns a UserFavorite entity by its id.
func (c *UserFavoriteClient) Get(ctx context.Context, id uuid.UUID) (*UserFavorite, error) {
	return c.Query().Where(userfavorite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserFavoriteClient) GetX(ctx context.Context, id uuid.UUID) *UserFavorite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusinessUnit queries the business_unit edge of a UserFavorite.
func (c *UserFavoriteClient) QueryBusinessUnit(uf *UserFavorite) *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfavorite.Table, userfavorite.FieldID, id),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userfavorite.BusinessUnitTable, userfavorite.BusinessUnitColumn),
		)
		fromV = sqlgraph.Neighbors(uf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a UserFavorite.
func (c *UserFavoriteClient) QueryOrganization(uf *UserFavorite) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfavorite.Table, userfavorite.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userfavorite.OrganizationTable, userfavorite.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(uf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserFavorite.
func (c *UserFavoriteClient) QueryUser(uf *UserFavorite) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfavorite.Table, userfavorite.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userfavorite.UserTable, userfavorite.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserFavoriteClient) Hooks() []Hook {
	return c.hooks.UserFavorite
}

// Interceptors returns the client interceptors.
func (c *UserFavoriteClient) Interceptors() []Interceptor {
	return c.inters.UserFavorite
}

func (c *UserFavoriteClient) mutate(ctx context.Context, m *UserFavoriteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserFavoriteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserFavoriteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserFavoriteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserFavorite mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AccessorialCharge, AccountingControl, BillingControl, BusinessUnit, ChargeType,
		CommentType, Commodity, Customer, DelayCode, DispatchControl, DivisionCode,
		EmailControl, EmailProfile, EquipmentManufactuer, EquipmentType,
		FeasibilityToolControl, FleetCode, GeneralLedgerAccount, HazardousMaterial,
		InvoiceControl, LocationCategory, Organization, QualifierCode, RevenueCode,
		RouteControl, ServiceType, Session, ShipmentControl, ShipmentType,
		TableChangeAlert, Tag, UsState, User, UserFavorite []ent.Hook
	}
	inters struct {
		AccessorialCharge, AccountingControl, BillingControl, BusinessUnit, ChargeType,
		CommentType, Commodity, Customer, DelayCode, DispatchControl, DivisionCode,
		EmailControl, EmailProfile, EquipmentManufactuer, EquipmentType,
		FeasibilityToolControl, FleetCode, GeneralLedgerAccount, HazardousMaterial,
		InvoiceControl, LocationCategory, Organization, QualifierCode, RevenueCode,
		RouteControl, ServiceType, Session, ShipmentControl, ShipmentType,
		TableChangeAlert, Tag, UsState, User, UserFavorite []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
