// Code generated by ent, DO NOT EDIT.

package billingcontrol

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the billingcontrol type in the database.
	Label = "billing_control"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRemoveBillingHistory holds the string denoting the remove_billing_history field in the database.
	FieldRemoveBillingHistory = "remove_billing_history"
	// FieldAutoBillShipment holds the string denoting the auto_bill_shipment field in the database.
	FieldAutoBillShipment = "auto_bill_shipment"
	// FieldAutoMarkReadyToBill holds the string denoting the auto_mark_ready_to_bill field in the database.
	FieldAutoMarkReadyToBill = "auto_mark_ready_to_bill"
	// FieldValidateCustomerRates holds the string denoting the validate_customer_rates field in the database.
	FieldValidateCustomerRates = "validate_customer_rates"
	// FieldAutoBillCriteria holds the string denoting the auto_bill_criteria field in the database.
	FieldAutoBillCriteria = "auto_bill_criteria"
	// FieldShipmentTransferCriteria holds the string denoting the shipment_transfer_criteria field in the database.
	FieldShipmentTransferCriteria = "shipment_transfer_criteria"
	// FieldEnforceCustomerBilling holds the string denoting the enforce_customer_billing field in the database.
	FieldEnforceCustomerBilling = "enforce_customer_billing"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// Table holds the table name of the billingcontrol in the database.
	Table = "billing_controls"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "billing_controls"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "billing_controls"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
)

// Columns holds all SQL columns for billingcontrol fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRemoveBillingHistory,
	FieldAutoBillShipment,
	FieldAutoMarkReadyToBill,
	FieldValidateCustomerRates,
	FieldAutoBillCriteria,
	FieldShipmentTransferCriteria,
	FieldEnforceCustomerBilling,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "billing_controls"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"business_unit_id",
	"organization_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultRemoveBillingHistory holds the default value on creation for the "remove_billing_history" field.
	DefaultRemoveBillingHistory bool
	// DefaultAutoBillShipment holds the default value on creation for the "auto_bill_shipment" field.
	DefaultAutoBillShipment bool
	// DefaultAutoMarkReadyToBill holds the default value on creation for the "auto_mark_ready_to_bill" field.
	DefaultAutoMarkReadyToBill bool
	// DefaultValidateCustomerRates holds the default value on creation for the "validate_customer_rates" field.
	DefaultValidateCustomerRates bool
	// DefaultEnforceCustomerBilling holds the default value on creation for the "enforce_customer_billing" field.
	DefaultEnforceCustomerBilling bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// AutoBillCriteria defines the type for the "auto_bill_criteria" enum field.
type AutoBillCriteria string

// AutoBillCriteriaMarkedReadyToBill is the default value of the AutoBillCriteria enum.
const DefaultAutoBillCriteria = AutoBillCriteriaMarkedReadyToBill

// AutoBillCriteria values.
const (
	AutoBillCriteriaDelivered            AutoBillCriteria = "Delivered"
	AutoBillCriteriaTransferredToBilling AutoBillCriteria = "TransferredToBilling"
	AutoBillCriteriaMarkedReadyToBill    AutoBillCriteria = "MarkedReadyToBill"
)

func (abc AutoBillCriteria) String() string {
	return string(abc)
}

// AutoBillCriteriaValidator is a validator for the "auto_bill_criteria" field enum values. It is called by the builders before save.
func AutoBillCriteriaValidator(abc AutoBillCriteria) error {
	switch abc {
	case AutoBillCriteriaDelivered, AutoBillCriteriaTransferredToBilling, AutoBillCriteriaMarkedReadyToBill:
		return nil
	default:
		return fmt.Errorf("billingcontrol: invalid enum value for auto_bill_criteria field: %q", abc)
	}
}

// ShipmentTransferCriteria defines the type for the "shipment_transfer_criteria" enum field.
type ShipmentTransferCriteria string

// ShipmentTransferCriteriaReadyToBill is the default value of the ShipmentTransferCriteria enum.
const DefaultShipmentTransferCriteria = ShipmentTransferCriteriaReadyToBill

// ShipmentTransferCriteria values.
const (
	ShipmentTransferCriteriaReadyAndCompleted ShipmentTransferCriteria = "ReadyAndCompleted"
	ShipmentTransferCriteriaCompleted         ShipmentTransferCriteria = "Completed"
	ShipmentTransferCriteriaReadyToBill       ShipmentTransferCriteria = "ReadyToBill"
)

func (stc ShipmentTransferCriteria) String() string {
	return string(stc)
}

// ShipmentTransferCriteriaValidator is a validator for the "shipment_transfer_criteria" field enum values. It is called by the builders before save.
func ShipmentTransferCriteriaValidator(stc ShipmentTransferCriteria) error {
	switch stc {
	case ShipmentTransferCriteriaReadyAndCompleted, ShipmentTransferCriteriaCompleted, ShipmentTransferCriteriaReadyToBill:
		return nil
	default:
		return fmt.Errorf("billingcontrol: invalid enum value for shipment_transfer_criteria field: %q", stc)
	}
}

// OrderOption defines the ordering options for the BillingControl queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRemoveBillingHistory orders the results by the remove_billing_history field.
func ByRemoveBillingHistory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemoveBillingHistory, opts...).ToFunc()
}

// ByAutoBillShipment orders the results by the auto_bill_shipment field.
func ByAutoBillShipment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoBillShipment, opts...).ToFunc()
}

// ByAutoMarkReadyToBill orders the results by the auto_mark_ready_to_bill field.
func ByAutoMarkReadyToBill(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoMarkReadyToBill, opts...).ToFunc()
}

// ByValidateCustomerRates orders the results by the validate_customer_rates field.
func ByValidateCustomerRates(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidateCustomerRates, opts...).ToFunc()
}

// ByAutoBillCriteria orders the results by the auto_bill_criteria field.
func ByAutoBillCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoBillCriteria, opts...).ToFunc()
}

// ByShipmentTransferCriteria orders the results by the shipment_transfer_criteria field.
func ByShipmentTransferCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmentTransferCriteria, opts...).ToFunc()
}

// ByEnforceCustomerBilling orders the results by the enforce_customer_billing field.
func ByEnforceCustomerBilling(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnforceCustomerBilling, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
	)
}
