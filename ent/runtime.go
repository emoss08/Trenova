// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/schema"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	businessunitMixin := schema.BusinessUnit{}.Mixin()
	businessunitMixinFields0 := businessunitMixin[0].Fields()
	_ = businessunitMixinFields0
	businessunitFields := schema.BusinessUnit{}.Fields()
	_ = businessunitFields
	// businessunitDescCreatedAt is the schema descriptor for created_at field.
	businessunitDescCreatedAt := businessunitMixinFields0[1].Descriptor()
	// businessunit.DefaultCreatedAt holds the default value on creation for the created_at field.
	businessunit.DefaultCreatedAt = businessunitDescCreatedAt.Default.(time.Time)
	// businessunitDescUpdatedAt is the schema descriptor for updated_at field.
	businessunitDescUpdatedAt := businessunitMixinFields0[2].Descriptor()
	// businessunit.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	businessunit.DefaultUpdatedAt = businessunitDescUpdatedAt.Default.(time.Time)
	// businessunit.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	businessunit.UpdateDefaultUpdatedAt = businessunitDescUpdatedAt.UpdateDefault.(func() time.Time)
	// businessunitDescName is the schema descriptor for name field.
	businessunitDescName := businessunitFields[1].Descriptor()
	// businessunit.NameValidator is a validator for the "name" field. It is called by the builders before save.
	businessunit.NameValidator = func() func(string) error {
		validators := businessunitDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// businessunitDescEntityKey is the schema descriptor for entity_key field.
	businessunitDescEntityKey := businessunitFields[2].Descriptor()
	// businessunit.EntityKeyValidator is a validator for the "entity_key" field. It is called by the builders before save.
	businessunit.EntityKeyValidator = func() func(string) error {
		validators := businessunitDescEntityKey.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(entity_key string) error {
			for _, fn := range fns {
				if err := fn(entity_key); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// businessunitDescPhoneNumber is the schema descriptor for phone_number field.
	businessunitDescPhoneNumber := businessunitFields[3].Descriptor()
	// businessunit.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	businessunit.PhoneNumberValidator = businessunitDescPhoneNumber.Validators[0].(func(string) error)
	// businessunitDescCity is the schema descriptor for city field.
	businessunitDescCity := businessunitFields[5].Descriptor()
	// businessunit.CityValidator is a validator for the "city" field. It is called by the builders before save.
	businessunit.CityValidator = businessunitDescCity.Validators[0].(func(string) error)
	// businessunitDescState is the schema descriptor for state field.
	businessunitDescState := businessunitFields[6].Descriptor()
	// businessunit.StateValidator is a validator for the "state" field. It is called by the builders before save.
	businessunit.StateValidator = businessunitDescState.Validators[0].(func(string) error)
	// businessunitDescCountry is the schema descriptor for country field.
	businessunitDescCountry := businessunitFields[7].Descriptor()
	// businessunit.CountryValidator is a validator for the "country" field. It is called by the builders before save.
	businessunit.CountryValidator = businessunitDescCountry.Validators[0].(func(string) error)
	// businessunitDescPostalCode is the schema descriptor for postal_code field.
	businessunitDescPostalCode := businessunitFields[8].Descriptor()
	// businessunit.PostalCodeValidator is a validator for the "postal_code" field. It is called by the builders before save.
	businessunit.PostalCodeValidator = businessunitDescPostalCode.Validators[0].(func(string) error)
	// businessunitDescTaxID is the schema descriptor for tax_id field.
	businessunitDescTaxID := businessunitFields[9].Descriptor()
	// businessunit.TaxIDValidator is a validator for the "tax_id" field. It is called by the builders before save.
	businessunit.TaxIDValidator = businessunitDescTaxID.Validators[0].(func(string) error)
	// businessunitDescSubscriptionPlan is the schema descriptor for subscription_plan field.
	businessunitDescSubscriptionPlan := businessunitFields[10].Descriptor()
	// businessunit.SubscriptionPlanValidator is a validator for the "subscription_plan" field. It is called by the builders before save.
	businessunit.SubscriptionPlanValidator = businessunitDescSubscriptionPlan.Validators[0].(func(string) error)
	// businessunitDescLegalName is the schema descriptor for legal_name field.
	businessunitDescLegalName := businessunitFields[12].Descriptor()
	// businessunit.LegalNameValidator is a validator for the "legal_name" field. It is called by the builders before save.
	businessunit.LegalNameValidator = businessunitDescLegalName.Validators[0].(func(string) error)
	// businessunitDescFreeTrial is the schema descriptor for free_trial field.
	businessunitDescFreeTrial := businessunitFields[17].Descriptor()
	// businessunit.DefaultFreeTrial holds the default value on creation for the free_trial field.
	businessunit.DefaultFreeTrial = businessunitDescFreeTrial.Default.(bool)
	// businessunitDescID is the schema descriptor for id field.
	businessunitDescID := businessunitMixinFields0[0].Descriptor()
	// businessunit.DefaultID holds the default value on creation for the id field.
	businessunit.DefaultID = businessunitDescID.Default.(func() uuid.UUID)
	organizationMixin := schema.Organization{}.Mixin()
	organizationMixinFields0 := organizationMixin[0].Fields()
	_ = organizationMixinFields0
	organizationFields := schema.Organization{}.Fields()
	_ = organizationFields
	// organizationDescCreatedAt is the schema descriptor for created_at field.
	organizationDescCreatedAt := organizationMixinFields0[1].Descriptor()
	// organization.DefaultCreatedAt holds the default value on creation for the created_at field.
	organization.DefaultCreatedAt = organizationDescCreatedAt.Default.(time.Time)
	// organizationDescUpdatedAt is the schema descriptor for updated_at field.
	organizationDescUpdatedAt := organizationMixinFields0[2].Descriptor()
	// organization.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	organization.DefaultUpdatedAt = organizationDescUpdatedAt.Default.(time.Time)
	// organization.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	organization.UpdateDefaultUpdatedAt = organizationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// organizationDescID is the schema descriptor for id field.
	organizationDescID := organizationMixinFields0[0].Descriptor()
	// organization.DefaultID holds the default value on creation for the id field.
	organization.DefaultID = organizationDescID.Default.(func() uuid.UUID)
}
