// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/commenttype"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/worker"
	"github.com/emoss08/trenova/ent/workercomment"
	"github.com/google/uuid"
)

// WorkerCommentCreate is the builder for creating a WorkerComment entity.
type WorkerCommentCreate struct {
	config
	mutation *WorkerCommentMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (wcc *WorkerCommentCreate) SetBusinessUnitID(u uuid.UUID) *WorkerCommentCreate {
	wcc.mutation.SetBusinessUnitID(u)
	return wcc
}

// SetOrganizationID sets the "organization_id" field.
func (wcc *WorkerCommentCreate) SetOrganizationID(u uuid.UUID) *WorkerCommentCreate {
	wcc.mutation.SetOrganizationID(u)
	return wcc
}

// SetCreatedAt sets the "created_at" field.
func (wcc *WorkerCommentCreate) SetCreatedAt(t time.Time) *WorkerCommentCreate {
	wcc.mutation.SetCreatedAt(t)
	return wcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcc *WorkerCommentCreate) SetNillableCreatedAt(t *time.Time) *WorkerCommentCreate {
	if t != nil {
		wcc.SetCreatedAt(*t)
	}
	return wcc
}

// SetUpdatedAt sets the "updated_at" field.
func (wcc *WorkerCommentCreate) SetUpdatedAt(t time.Time) *WorkerCommentCreate {
	wcc.mutation.SetUpdatedAt(t)
	return wcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wcc *WorkerCommentCreate) SetNillableUpdatedAt(t *time.Time) *WorkerCommentCreate {
	if t != nil {
		wcc.SetUpdatedAt(*t)
	}
	return wcc
}

// SetWorkerID sets the "worker_id" field.
func (wcc *WorkerCommentCreate) SetWorkerID(u uuid.UUID) *WorkerCommentCreate {
	wcc.mutation.SetWorkerID(u)
	return wcc
}

// SetCommentTypeID sets the "comment_type_id" field.
func (wcc *WorkerCommentCreate) SetCommentTypeID(u uuid.UUID) *WorkerCommentCreate {
	wcc.mutation.SetCommentTypeID(u)
	return wcc
}

// SetComment sets the "comment" field.
func (wcc *WorkerCommentCreate) SetComment(s string) *WorkerCommentCreate {
	wcc.mutation.SetComment(s)
	return wcc
}

// SetEnteredBy sets the "entered_by" field.
func (wcc *WorkerCommentCreate) SetEnteredBy(u uuid.UUID) *WorkerCommentCreate {
	wcc.mutation.SetEnteredBy(u)
	return wcc
}

// SetID sets the "id" field.
func (wcc *WorkerCommentCreate) SetID(u uuid.UUID) *WorkerCommentCreate {
	wcc.mutation.SetID(u)
	return wcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wcc *WorkerCommentCreate) SetNillableID(u *uuid.UUID) *WorkerCommentCreate {
	if u != nil {
		wcc.SetID(*u)
	}
	return wcc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (wcc *WorkerCommentCreate) SetBusinessUnit(b *BusinessUnit) *WorkerCommentCreate {
	return wcc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (wcc *WorkerCommentCreate) SetOrganization(o *Organization) *WorkerCommentCreate {
	return wcc.SetOrganizationID(o.ID)
}

// SetWorker sets the "worker" edge to the Worker entity.
func (wcc *WorkerCommentCreate) SetWorker(w *Worker) *WorkerCommentCreate {
	return wcc.SetWorkerID(w.ID)
}

// SetCommentType sets the "comment_type" edge to the CommentType entity.
func (wcc *WorkerCommentCreate) SetCommentType(c *CommentType) *WorkerCommentCreate {
	return wcc.SetCommentTypeID(c.ID)
}

// Mutation returns the WorkerCommentMutation object of the builder.
func (wcc *WorkerCommentCreate) Mutation() *WorkerCommentMutation {
	return wcc.mutation
}

// Save creates the WorkerComment in the database.
func (wcc *WorkerCommentCreate) Save(ctx context.Context) (*WorkerComment, error) {
	wcc.defaults()
	return withHooks(ctx, wcc.sqlSave, wcc.mutation, wcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wcc *WorkerCommentCreate) SaveX(ctx context.Context) *WorkerComment {
	v, err := wcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcc *WorkerCommentCreate) Exec(ctx context.Context) error {
	_, err := wcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcc *WorkerCommentCreate) ExecX(ctx context.Context) {
	if err := wcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcc *WorkerCommentCreate) defaults() {
	if _, ok := wcc.mutation.CreatedAt(); !ok {
		v := workercomment.DefaultCreatedAt()
		wcc.mutation.SetCreatedAt(v)
	}
	if _, ok := wcc.mutation.UpdatedAt(); !ok {
		v := workercomment.DefaultUpdatedAt()
		wcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wcc.mutation.ID(); !ok {
		v := workercomment.DefaultID()
		wcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcc *WorkerCommentCreate) check() error {
	if _, ok := wcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "WorkerComment.business_unit_id"`)}
	}
	if _, ok := wcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "WorkerComment.organization_id"`)}
	}
	if _, ok := wcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkerComment.created_at"`)}
	}
	if _, ok := wcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkerComment.updated_at"`)}
	}
	if _, ok := wcc.mutation.WorkerID(); !ok {
		return &ValidationError{Name: "worker_id", err: errors.New(`ent: missing required field "WorkerComment.worker_id"`)}
	}
	if _, ok := wcc.mutation.CommentTypeID(); !ok {
		return &ValidationError{Name: "comment_type_id", err: errors.New(`ent: missing required field "WorkerComment.comment_type_id"`)}
	}
	if _, ok := wcc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "WorkerComment.comment"`)}
	}
	if v, ok := wcc.mutation.Comment(); ok {
		if err := workercomment.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "WorkerComment.comment": %w`, err)}
		}
	}
	if _, ok := wcc.mutation.EnteredBy(); !ok {
		return &ValidationError{Name: "entered_by", err: errors.New(`ent: missing required field "WorkerComment.entered_by"`)}
	}
	if _, ok := wcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "WorkerComment.business_unit"`)}
	}
	if _, ok := wcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "WorkerComment.organization"`)}
	}
	if _, ok := wcc.mutation.WorkerID(); !ok {
		return &ValidationError{Name: "worker", err: errors.New(`ent: missing required edge "WorkerComment.worker"`)}
	}
	if _, ok := wcc.mutation.CommentTypeID(); !ok {
		return &ValidationError{Name: "comment_type", err: errors.New(`ent: missing required edge "WorkerComment.comment_type"`)}
	}
	return nil
}

func (wcc *WorkerCommentCreate) sqlSave(ctx context.Context) (*WorkerComment, error) {
	if err := wcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wcc.mutation.id = &_node.ID
	wcc.mutation.done = true
	return _node, nil
}

func (wcc *WorkerCommentCreate) createSpec() (*WorkerComment, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkerComment{config: wcc.config}
		_spec = sqlgraph.NewCreateSpec(workercomment.Table, sqlgraph.NewFieldSpec(workercomment.FieldID, field.TypeUUID))
	)
	if id, ok := wcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wcc.mutation.CreatedAt(); ok {
		_spec.SetField(workercomment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wcc.mutation.UpdatedAt(); ok {
		_spec.SetField(workercomment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wcc.mutation.Comment(); ok {
		_spec.SetField(workercomment.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := wcc.mutation.EnteredBy(); ok {
		_spec.SetField(workercomment.FieldEnteredBy, field.TypeUUID, value)
		_node.EnteredBy = value
	}
	if nodes := wcc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workercomment.BusinessUnitTable,
			Columns: []string{workercomment.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wcc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workercomment.OrganizationTable,
			Columns: []string{workercomment.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wcc.mutation.WorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workercomment.WorkerTable,
			Columns: []string{workercomment.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wcc.mutation.CommentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workercomment.CommentTypeTable,
			Columns: []string{workercomment.CommentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommentTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkerCommentCreateBulk is the builder for creating many WorkerComment entities in bulk.
type WorkerCommentCreateBulk struct {
	config
	err      error
	builders []*WorkerCommentCreate
}

// Save creates the WorkerComment entities in the database.
func (wccb *WorkerCommentCreateBulk) Save(ctx context.Context) ([]*WorkerComment, error) {
	if wccb.err != nil {
		return nil, wccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wccb.builders))
	nodes := make([]*WorkerComment, len(wccb.builders))
	mutators := make([]Mutator, len(wccb.builders))
	for i := range wccb.builders {
		func(i int, root context.Context) {
			builder := wccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkerCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wccb *WorkerCommentCreateBulk) SaveX(ctx context.Context) []*WorkerComment {
	v, err := wccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wccb *WorkerCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := wccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccb *WorkerCommentCreateBulk) ExecX(ctx context.Context) {
	if err := wccb.Exec(ctx); err != nil {
		panic(err)
	}
}
