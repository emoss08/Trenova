// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/googleapi"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// GoogleApiUpdate is the builder for updating GoogleApi entities.
type GoogleApiUpdate struct {
	config
	hooks     []Hook
	mutation  *GoogleApiMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoogleApiUpdate builder.
func (gau *GoogleApiUpdate) Where(ps ...predicate.GoogleApi) *GoogleApiUpdate {
	gau.mutation.Where(ps...)
	return gau
}

// SetUpdatedAt sets the "updated_at" field.
func (gau *GoogleApiUpdate) SetUpdatedAt(t time.Time) *GoogleApiUpdate {
	gau.mutation.SetUpdatedAt(t)
	return gau
}

// SetAPIKey sets the "api_key" field.
func (gau *GoogleApiUpdate) SetAPIKey(s string) *GoogleApiUpdate {
	gau.mutation.SetAPIKey(s)
	return gau
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (gau *GoogleApiUpdate) SetNillableAPIKey(s *string) *GoogleApiUpdate {
	if s != nil {
		gau.SetAPIKey(*s)
	}
	return gau
}

// SetMileageUnit sets the "mileage_unit" field.
func (gau *GoogleApiUpdate) SetMileageUnit(gu googleapi.MileageUnit) *GoogleApiUpdate {
	gau.mutation.SetMileageUnit(gu)
	return gau
}

// SetNillableMileageUnit sets the "mileage_unit" field if the given value is not nil.
func (gau *GoogleApiUpdate) SetNillableMileageUnit(gu *googleapi.MileageUnit) *GoogleApiUpdate {
	if gu != nil {
		gau.SetMileageUnit(*gu)
	}
	return gau
}

// SetAddCustomerLocation sets the "add_customer_location" field.
func (gau *GoogleApiUpdate) SetAddCustomerLocation(b bool) *GoogleApiUpdate {
	gau.mutation.SetAddCustomerLocation(b)
	return gau
}

// SetNillableAddCustomerLocation sets the "add_customer_location" field if the given value is not nil.
func (gau *GoogleApiUpdate) SetNillableAddCustomerLocation(b *bool) *GoogleApiUpdate {
	if b != nil {
		gau.SetAddCustomerLocation(*b)
	}
	return gau
}

// SetAutoGeocode sets the "auto_geocode" field.
func (gau *GoogleApiUpdate) SetAutoGeocode(b bool) *GoogleApiUpdate {
	gau.mutation.SetAutoGeocode(b)
	return gau
}

// SetNillableAutoGeocode sets the "auto_geocode" field if the given value is not nil.
func (gau *GoogleApiUpdate) SetNillableAutoGeocode(b *bool) *GoogleApiUpdate {
	if b != nil {
		gau.SetAutoGeocode(*b)
	}
	return gau
}

// SetAddLocation sets the "add_location" field.
func (gau *GoogleApiUpdate) SetAddLocation(b bool) *GoogleApiUpdate {
	gau.mutation.SetAddLocation(b)
	return gau
}

// SetNillableAddLocation sets the "add_location" field if the given value is not nil.
func (gau *GoogleApiUpdate) SetNillableAddLocation(b *bool) *GoogleApiUpdate {
	if b != nil {
		gau.SetAddLocation(*b)
	}
	return gau
}

// SetTrafficModel sets the "traffic_model" field.
func (gau *GoogleApiUpdate) SetTrafficModel(gm googleapi.TrafficModel) *GoogleApiUpdate {
	gau.mutation.SetTrafficModel(gm)
	return gau
}

// SetNillableTrafficModel sets the "traffic_model" field if the given value is not nil.
func (gau *GoogleApiUpdate) SetNillableTrafficModel(gm *googleapi.TrafficModel) *GoogleApiUpdate {
	if gm != nil {
		gau.SetTrafficModel(*gm)
	}
	return gau
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (gau *GoogleApiUpdate) SetOrganizationID(id uuid.UUID) *GoogleApiUpdate {
	gau.mutation.SetOrganizationID(id)
	return gau
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (gau *GoogleApiUpdate) SetOrganization(o *Organization) *GoogleApiUpdate {
	return gau.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (gau *GoogleApiUpdate) SetBusinessUnitID(id uuid.UUID) *GoogleApiUpdate {
	gau.mutation.SetBusinessUnitID(id)
	return gau
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (gau *GoogleApiUpdate) SetBusinessUnit(b *BusinessUnit) *GoogleApiUpdate {
	return gau.SetBusinessUnitID(b.ID)
}

// Mutation returns the GoogleApiMutation object of the builder.
func (gau *GoogleApiUpdate) Mutation() *GoogleApiMutation {
	return gau.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (gau *GoogleApiUpdate) ClearOrganization() *GoogleApiUpdate {
	gau.mutation.ClearOrganization()
	return gau
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (gau *GoogleApiUpdate) ClearBusinessUnit() *GoogleApiUpdate {
	gau.mutation.ClearBusinessUnit()
	return gau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gau *GoogleApiUpdate) Save(ctx context.Context) (int, error) {
	gau.defaults()
	return withHooks(ctx, gau.sqlSave, gau.mutation, gau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gau *GoogleApiUpdate) SaveX(ctx context.Context) int {
	affected, err := gau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gau *GoogleApiUpdate) Exec(ctx context.Context) error {
	_, err := gau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gau *GoogleApiUpdate) ExecX(ctx context.Context) {
	if err := gau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gau *GoogleApiUpdate) defaults() {
	if _, ok := gau.mutation.UpdatedAt(); !ok {
		v := googleapi.UpdateDefaultUpdatedAt()
		gau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gau *GoogleApiUpdate) check() error {
	if v, ok := gau.mutation.APIKey(); ok {
		if err := googleapi.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "GoogleApi.api_key": %w`, err)}
		}
	}
	if v, ok := gau.mutation.MileageUnit(); ok {
		if err := googleapi.MileageUnitValidator(v); err != nil {
			return &ValidationError{Name: "mileage_unit", err: fmt.Errorf(`ent: validator failed for field "GoogleApi.mileage_unit": %w`, err)}
		}
	}
	if v, ok := gau.mutation.TrafficModel(); ok {
		if err := googleapi.TrafficModelValidator(v); err != nil {
			return &ValidationError{Name: "traffic_model", err: fmt.Errorf(`ent: validator failed for field "GoogleApi.traffic_model": %w`, err)}
		}
	}
	if _, ok := gau.mutation.OrganizationID(); gau.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GoogleApi.organization"`)
	}
	if _, ok := gau.mutation.BusinessUnitID(); gau.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GoogleApi.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gau *GoogleApiUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoogleApiUpdate {
	gau.modifiers = append(gau.modifiers, modifiers...)
	return gau
}

func (gau *GoogleApiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(googleapi.Table, googleapi.Columns, sqlgraph.NewFieldSpec(googleapi.FieldID, field.TypeUUID))
	if ps := gau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gau.mutation.UpdatedAt(); ok {
		_spec.SetField(googleapi.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gau.mutation.APIKey(); ok {
		_spec.SetField(googleapi.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := gau.mutation.MileageUnit(); ok {
		_spec.SetField(googleapi.FieldMileageUnit, field.TypeEnum, value)
	}
	if value, ok := gau.mutation.AddCustomerLocation(); ok {
		_spec.SetField(googleapi.FieldAddCustomerLocation, field.TypeBool, value)
	}
	if value, ok := gau.mutation.AutoGeocode(); ok {
		_spec.SetField(googleapi.FieldAutoGeocode, field.TypeBool, value)
	}
	if value, ok := gau.mutation.AddLocation(); ok {
		_spec.SetField(googleapi.FieldAddLocation, field.TypeBool, value)
	}
	if value, ok := gau.mutation.TrafficModel(); ok {
		_spec.SetField(googleapi.FieldTrafficModel, field.TypeEnum, value)
	}
	if gau.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleapi.OrganizationTable,
			Columns: []string{googleapi.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleapi.OrganizationTable,
			Columns: []string{googleapi.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gau.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   googleapi.BusinessUnitTable,
			Columns: []string{googleapi.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   googleapi.BusinessUnitTable,
			Columns: []string{googleapi.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleapi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gau.mutation.done = true
	return n, nil
}

// GoogleApiUpdateOne is the builder for updating a single GoogleApi entity.
type GoogleApiUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoogleApiMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (gauo *GoogleApiUpdateOne) SetUpdatedAt(t time.Time) *GoogleApiUpdateOne {
	gauo.mutation.SetUpdatedAt(t)
	return gauo
}

// SetAPIKey sets the "api_key" field.
func (gauo *GoogleApiUpdateOne) SetAPIKey(s string) *GoogleApiUpdateOne {
	gauo.mutation.SetAPIKey(s)
	return gauo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (gauo *GoogleApiUpdateOne) SetNillableAPIKey(s *string) *GoogleApiUpdateOne {
	if s != nil {
		gauo.SetAPIKey(*s)
	}
	return gauo
}

// SetMileageUnit sets the "mileage_unit" field.
func (gauo *GoogleApiUpdateOne) SetMileageUnit(gu googleapi.MileageUnit) *GoogleApiUpdateOne {
	gauo.mutation.SetMileageUnit(gu)
	return gauo
}

// SetNillableMileageUnit sets the "mileage_unit" field if the given value is not nil.
func (gauo *GoogleApiUpdateOne) SetNillableMileageUnit(gu *googleapi.MileageUnit) *GoogleApiUpdateOne {
	if gu != nil {
		gauo.SetMileageUnit(*gu)
	}
	return gauo
}

// SetAddCustomerLocation sets the "add_customer_location" field.
func (gauo *GoogleApiUpdateOne) SetAddCustomerLocation(b bool) *GoogleApiUpdateOne {
	gauo.mutation.SetAddCustomerLocation(b)
	return gauo
}

// SetNillableAddCustomerLocation sets the "add_customer_location" field if the given value is not nil.
func (gauo *GoogleApiUpdateOne) SetNillableAddCustomerLocation(b *bool) *GoogleApiUpdateOne {
	if b != nil {
		gauo.SetAddCustomerLocation(*b)
	}
	return gauo
}

// SetAutoGeocode sets the "auto_geocode" field.
func (gauo *GoogleApiUpdateOne) SetAutoGeocode(b bool) *GoogleApiUpdateOne {
	gauo.mutation.SetAutoGeocode(b)
	return gauo
}

// SetNillableAutoGeocode sets the "auto_geocode" field if the given value is not nil.
func (gauo *GoogleApiUpdateOne) SetNillableAutoGeocode(b *bool) *GoogleApiUpdateOne {
	if b != nil {
		gauo.SetAutoGeocode(*b)
	}
	return gauo
}

// SetAddLocation sets the "add_location" field.
func (gauo *GoogleApiUpdateOne) SetAddLocation(b bool) *GoogleApiUpdateOne {
	gauo.mutation.SetAddLocation(b)
	return gauo
}

// SetNillableAddLocation sets the "add_location" field if the given value is not nil.
func (gauo *GoogleApiUpdateOne) SetNillableAddLocation(b *bool) *GoogleApiUpdateOne {
	if b != nil {
		gauo.SetAddLocation(*b)
	}
	return gauo
}

// SetTrafficModel sets the "traffic_model" field.
func (gauo *GoogleApiUpdateOne) SetTrafficModel(gm googleapi.TrafficModel) *GoogleApiUpdateOne {
	gauo.mutation.SetTrafficModel(gm)
	return gauo
}

// SetNillableTrafficModel sets the "traffic_model" field if the given value is not nil.
func (gauo *GoogleApiUpdateOne) SetNillableTrafficModel(gm *googleapi.TrafficModel) *GoogleApiUpdateOne {
	if gm != nil {
		gauo.SetTrafficModel(*gm)
	}
	return gauo
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (gauo *GoogleApiUpdateOne) SetOrganizationID(id uuid.UUID) *GoogleApiUpdateOne {
	gauo.mutation.SetOrganizationID(id)
	return gauo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (gauo *GoogleApiUpdateOne) SetOrganization(o *Organization) *GoogleApiUpdateOne {
	return gauo.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (gauo *GoogleApiUpdateOne) SetBusinessUnitID(id uuid.UUID) *GoogleApiUpdateOne {
	gauo.mutation.SetBusinessUnitID(id)
	return gauo
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (gauo *GoogleApiUpdateOne) SetBusinessUnit(b *BusinessUnit) *GoogleApiUpdateOne {
	return gauo.SetBusinessUnitID(b.ID)
}

// Mutation returns the GoogleApiMutation object of the builder.
func (gauo *GoogleApiUpdateOne) Mutation() *GoogleApiMutation {
	return gauo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (gauo *GoogleApiUpdateOne) ClearOrganization() *GoogleApiUpdateOne {
	gauo.mutation.ClearOrganization()
	return gauo
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (gauo *GoogleApiUpdateOne) ClearBusinessUnit() *GoogleApiUpdateOne {
	gauo.mutation.ClearBusinessUnit()
	return gauo
}

// Where appends a list predicates to the GoogleApiUpdate builder.
func (gauo *GoogleApiUpdateOne) Where(ps ...predicate.GoogleApi) *GoogleApiUpdateOne {
	gauo.mutation.Where(ps...)
	return gauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gauo *GoogleApiUpdateOne) Select(field string, fields ...string) *GoogleApiUpdateOne {
	gauo.fields = append([]string{field}, fields...)
	return gauo
}

// Save executes the query and returns the updated GoogleApi entity.
func (gauo *GoogleApiUpdateOne) Save(ctx context.Context) (*GoogleApi, error) {
	gauo.defaults()
	return withHooks(ctx, gauo.sqlSave, gauo.mutation, gauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gauo *GoogleApiUpdateOne) SaveX(ctx context.Context) *GoogleApi {
	node, err := gauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gauo *GoogleApiUpdateOne) Exec(ctx context.Context) error {
	_, err := gauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gauo *GoogleApiUpdateOne) ExecX(ctx context.Context) {
	if err := gauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gauo *GoogleApiUpdateOne) defaults() {
	if _, ok := gauo.mutation.UpdatedAt(); !ok {
		v := googleapi.UpdateDefaultUpdatedAt()
		gauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gauo *GoogleApiUpdateOne) check() error {
	if v, ok := gauo.mutation.APIKey(); ok {
		if err := googleapi.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "GoogleApi.api_key": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.MileageUnit(); ok {
		if err := googleapi.MileageUnitValidator(v); err != nil {
			return &ValidationError{Name: "mileage_unit", err: fmt.Errorf(`ent: validator failed for field "GoogleApi.mileage_unit": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.TrafficModel(); ok {
		if err := googleapi.TrafficModelValidator(v); err != nil {
			return &ValidationError{Name: "traffic_model", err: fmt.Errorf(`ent: validator failed for field "GoogleApi.traffic_model": %w`, err)}
		}
	}
	if _, ok := gauo.mutation.OrganizationID(); gauo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GoogleApi.organization"`)
	}
	if _, ok := gauo.mutation.BusinessUnitID(); gauo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GoogleApi.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gauo *GoogleApiUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoogleApiUpdateOne {
	gauo.modifiers = append(gauo.modifiers, modifiers...)
	return gauo
}

func (gauo *GoogleApiUpdateOne) sqlSave(ctx context.Context) (_node *GoogleApi, err error) {
	if err := gauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(googleapi.Table, googleapi.Columns, sqlgraph.NewFieldSpec(googleapi.FieldID, field.TypeUUID))
	id, ok := gauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoogleApi.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, googleapi.FieldID)
		for _, f := range fields {
			if !googleapi.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != googleapi.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gauo.mutation.UpdatedAt(); ok {
		_spec.SetField(googleapi.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gauo.mutation.APIKey(); ok {
		_spec.SetField(googleapi.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := gauo.mutation.MileageUnit(); ok {
		_spec.SetField(googleapi.FieldMileageUnit, field.TypeEnum, value)
	}
	if value, ok := gauo.mutation.AddCustomerLocation(); ok {
		_spec.SetField(googleapi.FieldAddCustomerLocation, field.TypeBool, value)
	}
	if value, ok := gauo.mutation.AutoGeocode(); ok {
		_spec.SetField(googleapi.FieldAutoGeocode, field.TypeBool, value)
	}
	if value, ok := gauo.mutation.AddLocation(); ok {
		_spec.SetField(googleapi.FieldAddLocation, field.TypeBool, value)
	}
	if value, ok := gauo.mutation.TrafficModel(); ok {
		_spec.SetField(googleapi.FieldTrafficModel, field.TypeEnum, value)
	}
	if gauo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleapi.OrganizationTable,
			Columns: []string{googleapi.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleapi.OrganizationTable,
			Columns: []string{googleapi.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gauo.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   googleapi.BusinessUnitTable,
			Columns: []string{googleapi.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   googleapi.BusinessUnitTable,
			Columns: []string{googleapi.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gauo.modifiers...)
	_node = &GoogleApi{config: gauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleapi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gauo.mutation.done = true
	return _node, nil
}
