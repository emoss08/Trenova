// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/equipmenttype"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// EquipmentTypeCreate is the builder for creating a EquipmentType entity.
type EquipmentTypeCreate struct {
	config
	mutation *EquipmentTypeMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (etc *EquipmentTypeCreate) SetBusinessUnitID(u uuid.UUID) *EquipmentTypeCreate {
	etc.mutation.SetBusinessUnitID(u)
	return etc
}

// SetOrganizationID sets the "organization_id" field.
func (etc *EquipmentTypeCreate) SetOrganizationID(u uuid.UUID) *EquipmentTypeCreate {
	etc.mutation.SetOrganizationID(u)
	return etc
}

// SetCreatedAt sets the "created_at" field.
func (etc *EquipmentTypeCreate) SetCreatedAt(t time.Time) *EquipmentTypeCreate {
	etc.mutation.SetCreatedAt(t)
	return etc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableCreatedAt(t *time.Time) *EquipmentTypeCreate {
	if t != nil {
		etc.SetCreatedAt(*t)
	}
	return etc
}

// SetUpdatedAt sets the "updated_at" field.
func (etc *EquipmentTypeCreate) SetUpdatedAt(t time.Time) *EquipmentTypeCreate {
	etc.mutation.SetUpdatedAt(t)
	return etc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableUpdatedAt(t *time.Time) *EquipmentTypeCreate {
	if t != nil {
		etc.SetUpdatedAt(*t)
	}
	return etc
}

// SetStatus sets the "status" field.
func (etc *EquipmentTypeCreate) SetStatus(e equipmenttype.Status) *EquipmentTypeCreate {
	etc.mutation.SetStatus(e)
	return etc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableStatus(e *equipmenttype.Status) *EquipmentTypeCreate {
	if e != nil {
		etc.SetStatus(*e)
	}
	return etc
}

// SetName sets the "name" field.
func (etc *EquipmentTypeCreate) SetName(s string) *EquipmentTypeCreate {
	etc.mutation.SetName(s)
	return etc
}

// SetDescription sets the "description" field.
func (etc *EquipmentTypeCreate) SetDescription(s string) *EquipmentTypeCreate {
	etc.mutation.SetDescription(s)
	return etc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableDescription(s *string) *EquipmentTypeCreate {
	if s != nil {
		etc.SetDescription(*s)
	}
	return etc
}

// SetCostPerMile sets the "cost_per_mile" field.
func (etc *EquipmentTypeCreate) SetCostPerMile(f float64) *EquipmentTypeCreate {
	etc.mutation.SetCostPerMile(f)
	return etc
}

// SetNillableCostPerMile sets the "cost_per_mile" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableCostPerMile(f *float64) *EquipmentTypeCreate {
	if f != nil {
		etc.SetCostPerMile(*f)
	}
	return etc
}

// SetEquipmentClass sets the "equipment_class" field.
func (etc *EquipmentTypeCreate) SetEquipmentClass(ec equipmenttype.EquipmentClass) *EquipmentTypeCreate {
	etc.mutation.SetEquipmentClass(ec)
	return etc
}

// SetNillableEquipmentClass sets the "equipment_class" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableEquipmentClass(ec *equipmenttype.EquipmentClass) *EquipmentTypeCreate {
	if ec != nil {
		etc.SetEquipmentClass(*ec)
	}
	return etc
}

// SetFixedCost sets the "fixed_cost" field.
func (etc *EquipmentTypeCreate) SetFixedCost(f float64) *EquipmentTypeCreate {
	etc.mutation.SetFixedCost(f)
	return etc
}

// SetNillableFixedCost sets the "fixed_cost" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableFixedCost(f *float64) *EquipmentTypeCreate {
	if f != nil {
		etc.SetFixedCost(*f)
	}
	return etc
}

// SetVariableCost sets the "variable_cost" field.
func (etc *EquipmentTypeCreate) SetVariableCost(f float64) *EquipmentTypeCreate {
	etc.mutation.SetVariableCost(f)
	return etc
}

// SetNillableVariableCost sets the "variable_cost" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableVariableCost(f *float64) *EquipmentTypeCreate {
	if f != nil {
		etc.SetVariableCost(*f)
	}
	return etc
}

// SetHeight sets the "height" field.
func (etc *EquipmentTypeCreate) SetHeight(f float64) *EquipmentTypeCreate {
	etc.mutation.SetHeight(f)
	return etc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableHeight(f *float64) *EquipmentTypeCreate {
	if f != nil {
		etc.SetHeight(*f)
	}
	return etc
}

// SetLength sets the "length" field.
func (etc *EquipmentTypeCreate) SetLength(f float64) *EquipmentTypeCreate {
	etc.mutation.SetLength(f)
	return etc
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableLength(f *float64) *EquipmentTypeCreate {
	if f != nil {
		etc.SetLength(*f)
	}
	return etc
}

// SetWidth sets the "width" field.
func (etc *EquipmentTypeCreate) SetWidth(f float64) *EquipmentTypeCreate {
	etc.mutation.SetWidth(f)
	return etc
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableWidth(f *float64) *EquipmentTypeCreate {
	if f != nil {
		etc.SetWidth(*f)
	}
	return etc
}

// SetWeight sets the "weight" field.
func (etc *EquipmentTypeCreate) SetWeight(f float64) *EquipmentTypeCreate {
	etc.mutation.SetWeight(f)
	return etc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableWeight(f *float64) *EquipmentTypeCreate {
	if f != nil {
		etc.SetWeight(*f)
	}
	return etc
}

// SetIdlingFuelUsage sets the "idling_fuel_usage" field.
func (etc *EquipmentTypeCreate) SetIdlingFuelUsage(f float64) *EquipmentTypeCreate {
	etc.mutation.SetIdlingFuelUsage(f)
	return etc
}

// SetNillableIdlingFuelUsage sets the "idling_fuel_usage" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableIdlingFuelUsage(f *float64) *EquipmentTypeCreate {
	if f != nil {
		etc.SetIdlingFuelUsage(*f)
	}
	return etc
}

// SetExemptFromTolls sets the "exempt_from_tolls" field.
func (etc *EquipmentTypeCreate) SetExemptFromTolls(b bool) *EquipmentTypeCreate {
	etc.mutation.SetExemptFromTolls(b)
	return etc
}

// SetNillableExemptFromTolls sets the "exempt_from_tolls" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableExemptFromTolls(b *bool) *EquipmentTypeCreate {
	if b != nil {
		etc.SetExemptFromTolls(*b)
	}
	return etc
}

// SetID sets the "id" field.
func (etc *EquipmentTypeCreate) SetID(u uuid.UUID) *EquipmentTypeCreate {
	etc.mutation.SetID(u)
	return etc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (etc *EquipmentTypeCreate) SetNillableID(u *uuid.UUID) *EquipmentTypeCreate {
	if u != nil {
		etc.SetID(*u)
	}
	return etc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (etc *EquipmentTypeCreate) SetBusinessUnit(b *BusinessUnit) *EquipmentTypeCreate {
	return etc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (etc *EquipmentTypeCreate) SetOrganization(o *Organization) *EquipmentTypeCreate {
	return etc.SetOrganizationID(o.ID)
}

// Mutation returns the EquipmentTypeMutation object of the builder.
func (etc *EquipmentTypeCreate) Mutation() *EquipmentTypeMutation {
	return etc.mutation
}

// Save creates the EquipmentType in the database.
func (etc *EquipmentTypeCreate) Save(ctx context.Context) (*EquipmentType, error) {
	etc.defaults()
	return withHooks(ctx, etc.sqlSave, etc.mutation, etc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etc *EquipmentTypeCreate) SaveX(ctx context.Context) *EquipmentType {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *EquipmentTypeCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *EquipmentTypeCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etc *EquipmentTypeCreate) defaults() {
	if _, ok := etc.mutation.CreatedAt(); !ok {
		v := equipmenttype.DefaultCreatedAt()
		etc.mutation.SetCreatedAt(v)
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		v := equipmenttype.DefaultUpdatedAt()
		etc.mutation.SetUpdatedAt(v)
	}
	if _, ok := etc.mutation.Status(); !ok {
		v := equipmenttype.DefaultStatus
		etc.mutation.SetStatus(v)
	}
	if _, ok := etc.mutation.EquipmentClass(); !ok {
		v := equipmenttype.DefaultEquipmentClass
		etc.mutation.SetEquipmentClass(v)
	}
	if _, ok := etc.mutation.ExemptFromTolls(); !ok {
		v := equipmenttype.DefaultExemptFromTolls
		etc.mutation.SetExemptFromTolls(v)
	}
	if _, ok := etc.mutation.ID(); !ok {
		v := equipmenttype.DefaultID()
		etc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etc *EquipmentTypeCreate) check() error {
	if _, ok := etc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "EquipmentType.business_unit_id"`)}
	}
	if _, ok := etc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "EquipmentType.organization_id"`)}
	}
	if _, ok := etc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EquipmentType.created_at"`)}
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EquipmentType.updated_at"`)}
	}
	if _, ok := etc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "EquipmentType.status"`)}
	}
	if v, ok := etc.mutation.Status(); ok {
		if err := equipmenttype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EquipmentType.status": %w`, err)}
		}
	}
	if _, ok := etc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EquipmentType.name"`)}
	}
	if v, ok := etc.mutation.Name(); ok {
		if err := equipmenttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EquipmentType.name": %w`, err)}
		}
	}
	if _, ok := etc.mutation.EquipmentClass(); !ok {
		return &ValidationError{Name: "equipment_class", err: errors.New(`ent: missing required field "EquipmentType.equipment_class"`)}
	}
	if v, ok := etc.mutation.EquipmentClass(); ok {
		if err := equipmenttype.EquipmentClassValidator(v); err != nil {
			return &ValidationError{Name: "equipment_class", err: fmt.Errorf(`ent: validator failed for field "EquipmentType.equipment_class": %w`, err)}
		}
	}
	if _, ok := etc.mutation.ExemptFromTolls(); !ok {
		return &ValidationError{Name: "exempt_from_tolls", err: errors.New(`ent: missing required field "EquipmentType.exempt_from_tolls"`)}
	}
	if _, ok := etc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "EquipmentType.business_unit"`)}
	}
	if _, ok := etc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "EquipmentType.organization"`)}
	}
	return nil
}

func (etc *EquipmentTypeCreate) sqlSave(ctx context.Context) (*EquipmentType, error) {
	if err := etc.check(); err != nil {
		return nil, err
	}
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	etc.mutation.id = &_node.ID
	etc.mutation.done = true
	return _node, nil
}

func (etc *EquipmentTypeCreate) createSpec() (*EquipmentType, *sqlgraph.CreateSpec) {
	var (
		_node = &EquipmentType{config: etc.config}
		_spec = sqlgraph.NewCreateSpec(equipmenttype.Table, sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID))
	)
	if id, ok := etc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := etc.mutation.CreatedAt(); ok {
		_spec.SetField(equipmenttype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := etc.mutation.UpdatedAt(); ok {
		_spec.SetField(equipmenttype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := etc.mutation.Status(); ok {
		_spec.SetField(equipmenttype.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := etc.mutation.Name(); ok {
		_spec.SetField(equipmenttype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := etc.mutation.Description(); ok {
		_spec.SetField(equipmenttype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := etc.mutation.CostPerMile(); ok {
		_spec.SetField(equipmenttype.FieldCostPerMile, field.TypeFloat64, value)
		_node.CostPerMile = value
	}
	if value, ok := etc.mutation.EquipmentClass(); ok {
		_spec.SetField(equipmenttype.FieldEquipmentClass, field.TypeEnum, value)
		_node.EquipmentClass = value
	}
	if value, ok := etc.mutation.FixedCost(); ok {
		_spec.SetField(equipmenttype.FieldFixedCost, field.TypeFloat64, value)
		_node.FixedCost = value
	}
	if value, ok := etc.mutation.VariableCost(); ok {
		_spec.SetField(equipmenttype.FieldVariableCost, field.TypeFloat64, value)
		_node.VariableCost = value
	}
	if value, ok := etc.mutation.Height(); ok {
		_spec.SetField(equipmenttype.FieldHeight, field.TypeFloat64, value)
		_node.Height = value
	}
	if value, ok := etc.mutation.Length(); ok {
		_spec.SetField(equipmenttype.FieldLength, field.TypeFloat64, value)
		_node.Length = value
	}
	if value, ok := etc.mutation.Width(); ok {
		_spec.SetField(equipmenttype.FieldWidth, field.TypeFloat64, value)
		_node.Width = value
	}
	if value, ok := etc.mutation.Weight(); ok {
		_spec.SetField(equipmenttype.FieldWeight, field.TypeFloat64, value)
		_node.Weight = value
	}
	if value, ok := etc.mutation.IdlingFuelUsage(); ok {
		_spec.SetField(equipmenttype.FieldIdlingFuelUsage, field.TypeFloat64, value)
		_node.IdlingFuelUsage = value
	}
	if value, ok := etc.mutation.ExemptFromTolls(); ok {
		_spec.SetField(equipmenttype.FieldExemptFromTolls, field.TypeBool, value)
		_node.ExemptFromTolls = value
	}
	if nodes := etc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmenttype.BusinessUnitTable,
			Columns: []string{equipmenttype.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmenttype.OrganizationTable,
			Columns: []string{equipmenttype.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EquipmentTypeCreateBulk is the builder for creating many EquipmentType entities in bulk.
type EquipmentTypeCreateBulk struct {
	config
	err      error
	builders []*EquipmentTypeCreate
}

// Save creates the EquipmentType entities in the database.
func (etcb *EquipmentTypeCreateBulk) Save(ctx context.Context) ([]*EquipmentType, error) {
	if etcb.err != nil {
		return nil, etcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*EquipmentType, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EquipmentTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *EquipmentTypeCreateBulk) SaveX(ctx context.Context) []*EquipmentType {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *EquipmentTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *EquipmentTypeCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}
