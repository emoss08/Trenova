// Code generated by ent, DO NOT EDIT.

package featureflag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldName, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldCode, v))
}

// Beta applies equality check predicate on the "beta" field. It's identical to BetaEQ.
func Beta(v bool) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldBeta, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldDescription, v))
}

// PreviewPictureURL applies equality check predicate on the "preview_picture_url" field. It's identical to PreviewPictureURLEQ.
func PreviewPictureURL(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldPreviewPictureURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldContainsFold(FieldName, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldContainsFold(FieldCode, v))
}

// BetaEQ applies the EQ predicate on the "beta" field.
func BetaEQ(v bool) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldBeta, v))
}

// BetaNEQ applies the NEQ predicate on the "beta" field.
func BetaNEQ(v bool) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNEQ(FieldBeta, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldContainsFold(FieldDescription, v))
}

// PreviewPictureURLEQ applies the EQ predicate on the "preview_picture_url" field.
func PreviewPictureURLEQ(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEQ(FieldPreviewPictureURL, v))
}

// PreviewPictureURLNEQ applies the NEQ predicate on the "preview_picture_url" field.
func PreviewPictureURLNEQ(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNEQ(FieldPreviewPictureURL, v))
}

// PreviewPictureURLIn applies the In predicate on the "preview_picture_url" field.
func PreviewPictureURLIn(vs ...string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldIn(FieldPreviewPictureURL, vs...))
}

// PreviewPictureURLNotIn applies the NotIn predicate on the "preview_picture_url" field.
func PreviewPictureURLNotIn(vs ...string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNotIn(FieldPreviewPictureURL, vs...))
}

// PreviewPictureURLGT applies the GT predicate on the "preview_picture_url" field.
func PreviewPictureURLGT(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGT(FieldPreviewPictureURL, v))
}

// PreviewPictureURLGTE applies the GTE predicate on the "preview_picture_url" field.
func PreviewPictureURLGTE(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldGTE(FieldPreviewPictureURL, v))
}

// PreviewPictureURLLT applies the LT predicate on the "preview_picture_url" field.
func PreviewPictureURLLT(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLT(FieldPreviewPictureURL, v))
}

// PreviewPictureURLLTE applies the LTE predicate on the "preview_picture_url" field.
func PreviewPictureURLLTE(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldLTE(FieldPreviewPictureURL, v))
}

// PreviewPictureURLContains applies the Contains predicate on the "preview_picture_url" field.
func PreviewPictureURLContains(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldContains(FieldPreviewPictureURL, v))
}

// PreviewPictureURLHasPrefix applies the HasPrefix predicate on the "preview_picture_url" field.
func PreviewPictureURLHasPrefix(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldHasPrefix(FieldPreviewPictureURL, v))
}

// PreviewPictureURLHasSuffix applies the HasSuffix predicate on the "preview_picture_url" field.
func PreviewPictureURLHasSuffix(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldHasSuffix(FieldPreviewPictureURL, v))
}

// PreviewPictureURLIsNil applies the IsNil predicate on the "preview_picture_url" field.
func PreviewPictureURLIsNil() predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldIsNull(FieldPreviewPictureURL))
}

// PreviewPictureURLNotNil applies the NotNil predicate on the "preview_picture_url" field.
func PreviewPictureURLNotNil() predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldNotNull(FieldPreviewPictureURL))
}

// PreviewPictureURLEqualFold applies the EqualFold predicate on the "preview_picture_url" field.
func PreviewPictureURLEqualFold(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldEqualFold(FieldPreviewPictureURL, v))
}

// PreviewPictureURLContainsFold applies the ContainsFold predicate on the "preview_picture_url" field.
func PreviewPictureURLContainsFold(v string) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.FieldContainsFold(FieldPreviewPictureURL, v))
}

// HasOrganizationFeatureFlag applies the HasEdge predicate on the "organization_feature_flag" edge.
func HasOrganizationFeatureFlag() predicate.FeatureFlag {
	return predicate.FeatureFlag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrganizationFeatureFlagTable, OrganizationFeatureFlagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationFeatureFlagWith applies the HasEdge predicate on the "organization_feature_flag" edge with a given conditions (other predicates).
func HasOrganizationFeatureFlagWith(preds ...predicate.OrganizationFeatureFlag) predicate.FeatureFlag {
	return predicate.FeatureFlag(func(s *sql.Selector) {
		step := newOrganizationFeatureFlagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FeatureFlag) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FeatureFlag) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FeatureFlag) predicate.FeatureFlag {
	return predicate.FeatureFlag(sql.NotPredicates(p))
}
