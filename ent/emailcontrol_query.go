// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/emailcontrol"
	"github.com/emoss08/trenova/ent/emailprofile"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// EmailControlQuery is the builder for querying EmailControl entities.
type EmailControlQuery struct {
	config
	ctx                     *QueryContext
	order                   []emailcontrol.OrderOption
	inters                  []Interceptor
	predicates              []predicate.EmailControl
	withOrganization        *OrganizationQuery
	withBusinessUnit        *BusinessUnitQuery
	withBillingEmailProfile *EmailProfileQuery
	withRateEmailProfile    *EmailProfileQuery
	withFKs                 bool
	modifiers               []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmailControlQuery builder.
func (ecq *EmailControlQuery) Where(ps ...predicate.EmailControl) *EmailControlQuery {
	ecq.predicates = append(ecq.predicates, ps...)
	return ecq
}

// Limit the number of records to be returned by this query.
func (ecq *EmailControlQuery) Limit(limit int) *EmailControlQuery {
	ecq.ctx.Limit = &limit
	return ecq
}

// Offset to start from.
func (ecq *EmailControlQuery) Offset(offset int) *EmailControlQuery {
	ecq.ctx.Offset = &offset
	return ecq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ecq *EmailControlQuery) Unique(unique bool) *EmailControlQuery {
	ecq.ctx.Unique = &unique
	return ecq
}

// Order specifies how the records should be ordered.
func (ecq *EmailControlQuery) Order(o ...emailcontrol.OrderOption) *EmailControlQuery {
	ecq.order = append(ecq.order, o...)
	return ecq
}

// QueryOrganization chains the current query on the "organization" edge.
func (ecq *EmailControlQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: ecq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ecq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailcontrol.Table, emailcontrol.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, emailcontrol.OrganizationTable, emailcontrol.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(ecq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBusinessUnit chains the current query on the "business_unit" edge.
func (ecq *EmailControlQuery) QueryBusinessUnit() *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: ecq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ecq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailcontrol.Table, emailcontrol.FieldID, selector),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailcontrol.BusinessUnitTable, emailcontrol.BusinessUnitColumn),
		)
		fromU = sqlgraph.SetNeighbors(ecq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingEmailProfile chains the current query on the "billing_email_profile" edge.
func (ecq *EmailControlQuery) QueryBillingEmailProfile() *EmailProfileQuery {
	query := (&EmailProfileClient{config: ecq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ecq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailcontrol.Table, emailcontrol.FieldID, selector),
			sqlgraph.To(emailprofile.Table, emailprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailcontrol.BillingEmailProfileTable, emailcontrol.BillingEmailProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(ecq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRateEmailProfile chains the current query on the "rate_email_profile" edge.
func (ecq *EmailControlQuery) QueryRateEmailProfile() *EmailProfileQuery {
	query := (&EmailProfileClient{config: ecq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ecq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailcontrol.Table, emailcontrol.FieldID, selector),
			sqlgraph.To(emailprofile.Table, emailprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailcontrol.RateEmailProfileTable, emailcontrol.RateEmailProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(ecq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EmailControl entity from the query.
// Returns a *NotFoundError when no EmailControl was found.
func (ecq *EmailControlQuery) First(ctx context.Context) (*EmailControl, error) {
	nodes, err := ecq.Limit(1).All(setContextOp(ctx, ecq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{emailcontrol.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ecq *EmailControlQuery) FirstX(ctx context.Context) *EmailControl {
	node, err := ecq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EmailControl ID from the query.
// Returns a *NotFoundError when no EmailControl ID was found.
func (ecq *EmailControlQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ecq.Limit(1).IDs(setContextOp(ctx, ecq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{emailcontrol.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ecq *EmailControlQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ecq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EmailControl entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EmailControl entity is found.
// Returns a *NotFoundError when no EmailControl entities are found.
func (ecq *EmailControlQuery) Only(ctx context.Context) (*EmailControl, error) {
	nodes, err := ecq.Limit(2).All(setContextOp(ctx, ecq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{emailcontrol.Label}
	default:
		return nil, &NotSingularError{emailcontrol.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ecq *EmailControlQuery) OnlyX(ctx context.Context) *EmailControl {
	node, err := ecq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EmailControl ID in the query.
// Returns a *NotSingularError when more than one EmailControl ID is found.
// Returns a *NotFoundError when no entities are found.
func (ecq *EmailControlQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ecq.Limit(2).IDs(setContextOp(ctx, ecq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{emailcontrol.Label}
	default:
		err = &NotSingularError{emailcontrol.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ecq *EmailControlQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ecq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EmailControls.
func (ecq *EmailControlQuery) All(ctx context.Context) ([]*EmailControl, error) {
	ctx = setContextOp(ctx, ecq.ctx, "All")
	if err := ecq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EmailControl, *EmailControlQuery]()
	return withInterceptors[[]*EmailControl](ctx, ecq, qr, ecq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ecq *EmailControlQuery) AllX(ctx context.Context) []*EmailControl {
	nodes, err := ecq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EmailControl IDs.
func (ecq *EmailControlQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ecq.ctx.Unique == nil && ecq.path != nil {
		ecq.Unique(true)
	}
	ctx = setContextOp(ctx, ecq.ctx, "IDs")
	if err = ecq.Select(emailcontrol.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ecq *EmailControlQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ecq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ecq *EmailControlQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ecq.ctx, "Count")
	if err := ecq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ecq, querierCount[*EmailControlQuery](), ecq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ecq *EmailControlQuery) CountX(ctx context.Context) int {
	count, err := ecq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ecq *EmailControlQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ecq.ctx, "Exist")
	switch _, err := ecq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ecq *EmailControlQuery) ExistX(ctx context.Context) bool {
	exist, err := ecq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmailControlQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ecq *EmailControlQuery) Clone() *EmailControlQuery {
	if ecq == nil {
		return nil
	}
	return &EmailControlQuery{
		config:                  ecq.config,
		ctx:                     ecq.ctx.Clone(),
		order:                   append([]emailcontrol.OrderOption{}, ecq.order...),
		inters:                  append([]Interceptor{}, ecq.inters...),
		predicates:              append([]predicate.EmailControl{}, ecq.predicates...),
		withOrganization:        ecq.withOrganization.Clone(),
		withBusinessUnit:        ecq.withBusinessUnit.Clone(),
		withBillingEmailProfile: ecq.withBillingEmailProfile.Clone(),
		withRateEmailProfile:    ecq.withRateEmailProfile.Clone(),
		// clone intermediate query.
		sql:  ecq.sql.Clone(),
		path: ecq.path,
	}
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (ecq *EmailControlQuery) WithOrganization(opts ...func(*OrganizationQuery)) *EmailControlQuery {
	query := (&OrganizationClient{config: ecq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ecq.withOrganization = query
	return ecq
}

// WithBusinessUnit tells the query-builder to eager-load the nodes that are connected to
// the "business_unit" edge. The optional arguments are used to configure the query builder of the edge.
func (ecq *EmailControlQuery) WithBusinessUnit(opts ...func(*BusinessUnitQuery)) *EmailControlQuery {
	query := (&BusinessUnitClient{config: ecq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ecq.withBusinessUnit = query
	return ecq
}

// WithBillingEmailProfile tells the query-builder to eager-load the nodes that are connected to
// the "billing_email_profile" edge. The optional arguments are used to configure the query builder of the edge.
func (ecq *EmailControlQuery) WithBillingEmailProfile(opts ...func(*EmailProfileQuery)) *EmailControlQuery {
	query := (&EmailProfileClient{config: ecq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ecq.withBillingEmailProfile = query
	return ecq
}

// WithRateEmailProfile tells the query-builder to eager-load the nodes that are connected to
// the "rate_email_profile" edge. The optional arguments are used to configure the query builder of the edge.
func (ecq *EmailControlQuery) WithRateEmailProfile(opts ...func(*EmailProfileQuery)) *EmailControlQuery {
	query := (&EmailProfileClient{config: ecq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ecq.withRateEmailProfile = query
	return ecq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EmailControl.Query().
//		GroupBy(emailcontrol.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ecq *EmailControlQuery) GroupBy(field string, fields ...string) *EmailControlGroupBy {
	ecq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EmailControlGroupBy{build: ecq}
	grbuild.flds = &ecq.ctx.Fields
	grbuild.label = emailcontrol.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.EmailControl.Query().
//		Select(emailcontrol.FieldCreatedAt).
//		Scan(ctx, &v)
func (ecq *EmailControlQuery) Select(fields ...string) *EmailControlSelect {
	ecq.ctx.Fields = append(ecq.ctx.Fields, fields...)
	sbuild := &EmailControlSelect{EmailControlQuery: ecq}
	sbuild.label = emailcontrol.Label
	sbuild.flds, sbuild.scan = &ecq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EmailControlSelect configured with the given aggregations.
func (ecq *EmailControlQuery) Aggregate(fns ...AggregateFunc) *EmailControlSelect {
	return ecq.Select().Aggregate(fns...)
}

func (ecq *EmailControlQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ecq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ecq); err != nil {
				return err
			}
		}
	}
	for _, f := range ecq.ctx.Fields {
		if !emailcontrol.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ecq.path != nil {
		prev, err := ecq.path(ctx)
		if err != nil {
			return err
		}
		ecq.sql = prev
	}
	return nil
}

func (ecq *EmailControlQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EmailControl, error) {
	var (
		nodes       = []*EmailControl{}
		withFKs     = ecq.withFKs
		_spec       = ecq.querySpec()
		loadedTypes = [4]bool{
			ecq.withOrganization != nil,
			ecq.withBusinessUnit != nil,
			ecq.withBillingEmailProfile != nil,
			ecq.withRateEmailProfile != nil,
		}
	)
	if ecq.withOrganization != nil || ecq.withBusinessUnit != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, emailcontrol.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EmailControl).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EmailControl{config: ecq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ecq.modifiers) > 0 {
		_spec.Modifiers = ecq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ecq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ecq.withOrganization; query != nil {
		if err := ecq.loadOrganization(ctx, query, nodes, nil,
			func(n *EmailControl, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	if query := ecq.withBusinessUnit; query != nil {
		if err := ecq.loadBusinessUnit(ctx, query, nodes, nil,
			func(n *EmailControl, e *BusinessUnit) { n.Edges.BusinessUnit = e }); err != nil {
			return nil, err
		}
	}
	if query := ecq.withBillingEmailProfile; query != nil {
		if err := ecq.loadBillingEmailProfile(ctx, query, nodes, nil,
			func(n *EmailControl, e *EmailProfile) { n.Edges.BillingEmailProfile = e }); err != nil {
			return nil, err
		}
	}
	if query := ecq.withRateEmailProfile; query != nil {
		if err := ecq.loadRateEmailProfile(ctx, query, nodes, nil,
			func(n *EmailControl, e *EmailProfile) { n.Edges.RateEmailProfile = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ecq *EmailControlQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*EmailControl, init func(*EmailControl), assign func(*EmailControl, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EmailControl)
	for i := range nodes {
		if nodes[i].organization_id == nil {
			continue
		}
		fk := *nodes[i].organization_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ecq *EmailControlQuery) loadBusinessUnit(ctx context.Context, query *BusinessUnitQuery, nodes []*EmailControl, init func(*EmailControl), assign func(*EmailControl, *BusinessUnit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EmailControl)
	for i := range nodes {
		if nodes[i].business_unit_id == nil {
			continue
		}
		fk := *nodes[i].business_unit_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(businessunit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_unit_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ecq *EmailControlQuery) loadBillingEmailProfile(ctx context.Context, query *EmailProfileQuery, nodes []*EmailControl, init func(*EmailControl), assign func(*EmailControl, *EmailProfile)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EmailControl)
	for i := range nodes {
		if nodes[i].BillingEmailProfileID == nil {
			continue
		}
		fk := *nodes[i].BillingEmailProfileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(emailprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "billing_email_profile_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ecq *EmailControlQuery) loadRateEmailProfile(ctx context.Context, query *EmailProfileQuery, nodes []*EmailControl, init func(*EmailControl), assign func(*EmailControl, *EmailProfile)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EmailControl)
	for i := range nodes {
		if nodes[i].RateExpirtationEmailProfileID == nil {
			continue
		}
		fk := *nodes[i].RateExpirtationEmailProfileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(emailprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rate_expirtation_email_profile_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ecq *EmailControlQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ecq.querySpec()
	if len(ecq.modifiers) > 0 {
		_spec.Modifiers = ecq.modifiers
	}
	_spec.Node.Columns = ecq.ctx.Fields
	if len(ecq.ctx.Fields) > 0 {
		_spec.Unique = ecq.ctx.Unique != nil && *ecq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ecq.driver, _spec)
}

func (ecq *EmailControlQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(emailcontrol.Table, emailcontrol.Columns, sqlgraph.NewFieldSpec(emailcontrol.FieldID, field.TypeUUID))
	_spec.From = ecq.sql
	if unique := ecq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ecq.path != nil {
		_spec.Unique = true
	}
	if fields := ecq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailcontrol.FieldID)
		for i := range fields {
			if fields[i] != emailcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ecq.withBillingEmailProfile != nil {
			_spec.Node.AddColumnOnce(emailcontrol.FieldBillingEmailProfileID)
		}
		if ecq.withRateEmailProfile != nil {
			_spec.Node.AddColumnOnce(emailcontrol.FieldRateExpirtationEmailProfileID)
		}
	}
	if ps := ecq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ecq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ecq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ecq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ecq *EmailControlQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ecq.driver.Dialect())
	t1 := builder.Table(emailcontrol.Table)
	columns := ecq.ctx.Fields
	if len(columns) == 0 {
		columns = emailcontrol.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ecq.sql != nil {
		selector = ecq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ecq.ctx.Unique != nil && *ecq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ecq.modifiers {
		m(selector)
	}
	for _, p := range ecq.predicates {
		p(selector)
	}
	for _, p := range ecq.order {
		p(selector)
	}
	if offset := ecq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ecq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ecq *EmailControlQuery) Modify(modifiers ...func(s *sql.Selector)) *EmailControlSelect {
	ecq.modifiers = append(ecq.modifiers, modifiers...)
	return ecq.Select()
}

// EmailControlGroupBy is the group-by builder for EmailControl entities.
type EmailControlGroupBy struct {
	selector
	build *EmailControlQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ecgb *EmailControlGroupBy) Aggregate(fns ...AggregateFunc) *EmailControlGroupBy {
	ecgb.fns = append(ecgb.fns, fns...)
	return ecgb
}

// Scan applies the selector query and scans the result into the given value.
func (ecgb *EmailControlGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ecgb.build.ctx, "GroupBy")
	if err := ecgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmailControlQuery, *EmailControlGroupBy](ctx, ecgb.build, ecgb, ecgb.build.inters, v)
}

func (ecgb *EmailControlGroupBy) sqlScan(ctx context.Context, root *EmailControlQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ecgb.fns))
	for _, fn := range ecgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ecgb.flds)+len(ecgb.fns))
		for _, f := range *ecgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ecgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ecgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EmailControlSelect is the builder for selecting fields of EmailControl entities.
type EmailControlSelect struct {
	*EmailControlQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ecs *EmailControlSelect) Aggregate(fns ...AggregateFunc) *EmailControlSelect {
	ecs.fns = append(ecs.fns, fns...)
	return ecs
}

// Scan applies the selector query and scans the result into the given value.
func (ecs *EmailControlSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ecs.ctx, "Select")
	if err := ecs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmailControlQuery, *EmailControlSelect](ctx, ecs.EmailControlQuery, ecs, ecs.inters, v)
}

func (ecs *EmailControlSelect) sqlScan(ctx context.Context, root *EmailControlQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ecs.fns))
	for _, fn := range ecs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ecs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ecs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ecs *EmailControlSelect) Modify(modifiers ...func(s *sql.Selector)) *EmailControlSelect {
	ecs.modifiers = append(ecs.modifiers, modifiers...)
	return ecs
}
