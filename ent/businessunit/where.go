// Code generated by ent, DO NOT EDIT.

package businessunit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldName, v))
}

// EntityKey applies equality check predicate on the "entity_key" field. It's identical to EntityKeyEQ.
func EntityKey(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldEntityKey, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldPhoneNumber, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldAddress, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldState, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldCountry, v))
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldPostalCode, v))
}

// TaxID applies equality check predicate on the "tax_id" field. It's identical to TaxIDEQ.
func TaxID(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldTaxID, v))
}

// SubscriptionPlan applies equality check predicate on the "subscription_plan" field. It's identical to SubscriptionPlanEQ.
func SubscriptionPlan(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldSubscriptionPlan, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldDescription, v))
}

// LegalName applies equality check predicate on the "legal_name" field. It's identical to LegalNameEQ.
func LegalName(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldLegalName, v))
}

// ContactName applies equality check predicate on the "contact_name" field. It's identical to ContactNameEQ.
func ContactName(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldContactName, v))
}

// ContactEmail applies equality check predicate on the "contact_email" field. It's identical to ContactEmailEQ.
func ContactEmail(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldContactEmail, v))
}

// PaidUntil applies equality check predicate on the "paid_until" field. It's identical to PaidUntilEQ.
func PaidUntil(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldPaidUntil, v))
}

// FreeTrial applies equality check predicate on the "free_trial" field. It's identical to FreeTrialEQ.
func FreeTrial(v bool) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldFreeTrial, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldParentID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldStatus, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldName, v))
}

// EntityKeyEQ applies the EQ predicate on the "entity_key" field.
func EntityKeyEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldEntityKey, v))
}

// EntityKeyNEQ applies the NEQ predicate on the "entity_key" field.
func EntityKeyNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldEntityKey, v))
}

// EntityKeyIn applies the In predicate on the "entity_key" field.
func EntityKeyIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldEntityKey, vs...))
}

// EntityKeyNotIn applies the NotIn predicate on the "entity_key" field.
func EntityKeyNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldEntityKey, vs...))
}

// EntityKeyGT applies the GT predicate on the "entity_key" field.
func EntityKeyGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldEntityKey, v))
}

// EntityKeyGTE applies the GTE predicate on the "entity_key" field.
func EntityKeyGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldEntityKey, v))
}

// EntityKeyLT applies the LT predicate on the "entity_key" field.
func EntityKeyLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldEntityKey, v))
}

// EntityKeyLTE applies the LTE predicate on the "entity_key" field.
func EntityKeyLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldEntityKey, v))
}

// EntityKeyContains applies the Contains predicate on the "entity_key" field.
func EntityKeyContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldEntityKey, v))
}

// EntityKeyHasPrefix applies the HasPrefix predicate on the "entity_key" field.
func EntityKeyHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldEntityKey, v))
}

// EntityKeyHasSuffix applies the HasSuffix predicate on the "entity_key" field.
func EntityKeyHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldEntityKey, v))
}

// EntityKeyEqualFold applies the EqualFold predicate on the "entity_key" field.
func EntityKeyEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldEntityKey, v))
}

// EntityKeyContainsFold applies the ContainsFold predicate on the "entity_key" field.
func EntityKeyContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldEntityKey, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldAddress, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldState, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldCountry, v))
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldPostalCode, v))
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldPostalCode, v))
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldPostalCode, vs...))
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldPostalCode, vs...))
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldPostalCode, v))
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldPostalCode, v))
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldPostalCode, v))
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldPostalCode, v))
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldPostalCode, v))
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldPostalCode, v))
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldPostalCode, v))
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldPostalCode, v))
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldPostalCode, v))
}

// TaxIDEQ applies the EQ predicate on the "tax_id" field.
func TaxIDEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldTaxID, v))
}

// TaxIDNEQ applies the NEQ predicate on the "tax_id" field.
func TaxIDNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldTaxID, v))
}

// TaxIDIn applies the In predicate on the "tax_id" field.
func TaxIDIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldTaxID, vs...))
}

// TaxIDNotIn applies the NotIn predicate on the "tax_id" field.
func TaxIDNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldTaxID, vs...))
}

// TaxIDGT applies the GT predicate on the "tax_id" field.
func TaxIDGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldTaxID, v))
}

// TaxIDGTE applies the GTE predicate on the "tax_id" field.
func TaxIDGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldTaxID, v))
}

// TaxIDLT applies the LT predicate on the "tax_id" field.
func TaxIDLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldTaxID, v))
}

// TaxIDLTE applies the LTE predicate on the "tax_id" field.
func TaxIDLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldTaxID, v))
}

// TaxIDContains applies the Contains predicate on the "tax_id" field.
func TaxIDContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldTaxID, v))
}

// TaxIDHasPrefix applies the HasPrefix predicate on the "tax_id" field.
func TaxIDHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldTaxID, v))
}

// TaxIDHasSuffix applies the HasSuffix predicate on the "tax_id" field.
func TaxIDHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldTaxID, v))
}

// TaxIDEqualFold applies the EqualFold predicate on the "tax_id" field.
func TaxIDEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldTaxID, v))
}

// TaxIDContainsFold applies the ContainsFold predicate on the "tax_id" field.
func TaxIDContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldTaxID, v))
}

// SubscriptionPlanEQ applies the EQ predicate on the "subscription_plan" field.
func SubscriptionPlanEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldSubscriptionPlan, v))
}

// SubscriptionPlanNEQ applies the NEQ predicate on the "subscription_plan" field.
func SubscriptionPlanNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldSubscriptionPlan, v))
}

// SubscriptionPlanIn applies the In predicate on the "subscription_plan" field.
func SubscriptionPlanIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldSubscriptionPlan, vs...))
}

// SubscriptionPlanNotIn applies the NotIn predicate on the "subscription_plan" field.
func SubscriptionPlanNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldSubscriptionPlan, vs...))
}

// SubscriptionPlanGT applies the GT predicate on the "subscription_plan" field.
func SubscriptionPlanGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldSubscriptionPlan, v))
}

// SubscriptionPlanGTE applies the GTE predicate on the "subscription_plan" field.
func SubscriptionPlanGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldSubscriptionPlan, v))
}

// SubscriptionPlanLT applies the LT predicate on the "subscription_plan" field.
func SubscriptionPlanLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldSubscriptionPlan, v))
}

// SubscriptionPlanLTE applies the LTE predicate on the "subscription_plan" field.
func SubscriptionPlanLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldSubscriptionPlan, v))
}

// SubscriptionPlanContains applies the Contains predicate on the "subscription_plan" field.
func SubscriptionPlanContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldSubscriptionPlan, v))
}

// SubscriptionPlanHasPrefix applies the HasPrefix predicate on the "subscription_plan" field.
func SubscriptionPlanHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldSubscriptionPlan, v))
}

// SubscriptionPlanHasSuffix applies the HasSuffix predicate on the "subscription_plan" field.
func SubscriptionPlanHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldSubscriptionPlan, v))
}

// SubscriptionPlanEqualFold applies the EqualFold predicate on the "subscription_plan" field.
func SubscriptionPlanEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldSubscriptionPlan, v))
}

// SubscriptionPlanContainsFold applies the ContainsFold predicate on the "subscription_plan" field.
func SubscriptionPlanContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldSubscriptionPlan, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldDescription, v))
}

// LegalNameEQ applies the EQ predicate on the "legal_name" field.
func LegalNameEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldLegalName, v))
}

// LegalNameNEQ applies the NEQ predicate on the "legal_name" field.
func LegalNameNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldLegalName, v))
}

// LegalNameIn applies the In predicate on the "legal_name" field.
func LegalNameIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldLegalName, vs...))
}

// LegalNameNotIn applies the NotIn predicate on the "legal_name" field.
func LegalNameNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldLegalName, vs...))
}

// LegalNameGT applies the GT predicate on the "legal_name" field.
func LegalNameGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldLegalName, v))
}

// LegalNameGTE applies the GTE predicate on the "legal_name" field.
func LegalNameGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldLegalName, v))
}

// LegalNameLT applies the LT predicate on the "legal_name" field.
func LegalNameLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldLegalName, v))
}

// LegalNameLTE applies the LTE predicate on the "legal_name" field.
func LegalNameLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldLegalName, v))
}

// LegalNameContains applies the Contains predicate on the "legal_name" field.
func LegalNameContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldLegalName, v))
}

// LegalNameHasPrefix applies the HasPrefix predicate on the "legal_name" field.
func LegalNameHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldLegalName, v))
}

// LegalNameHasSuffix applies the HasSuffix predicate on the "legal_name" field.
func LegalNameHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldLegalName, v))
}

// LegalNameEqualFold applies the EqualFold predicate on the "legal_name" field.
func LegalNameEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldLegalName, v))
}

// LegalNameContainsFold applies the ContainsFold predicate on the "legal_name" field.
func LegalNameContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldLegalName, v))
}

// ContactNameEQ applies the EQ predicate on the "contact_name" field.
func ContactNameEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldContactName, v))
}

// ContactNameNEQ applies the NEQ predicate on the "contact_name" field.
func ContactNameNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldContactName, v))
}

// ContactNameIn applies the In predicate on the "contact_name" field.
func ContactNameIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldContactName, vs...))
}

// ContactNameNotIn applies the NotIn predicate on the "contact_name" field.
func ContactNameNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldContactName, vs...))
}

// ContactNameGT applies the GT predicate on the "contact_name" field.
func ContactNameGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldContactName, v))
}

// ContactNameGTE applies the GTE predicate on the "contact_name" field.
func ContactNameGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldContactName, v))
}

// ContactNameLT applies the LT predicate on the "contact_name" field.
func ContactNameLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldContactName, v))
}

// ContactNameLTE applies the LTE predicate on the "contact_name" field.
func ContactNameLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldContactName, v))
}

// ContactNameContains applies the Contains predicate on the "contact_name" field.
func ContactNameContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldContactName, v))
}

// ContactNameHasPrefix applies the HasPrefix predicate on the "contact_name" field.
func ContactNameHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldContactName, v))
}

// ContactNameHasSuffix applies the HasSuffix predicate on the "contact_name" field.
func ContactNameHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldContactName, v))
}

// ContactNameIsNil applies the IsNil predicate on the "contact_name" field.
func ContactNameIsNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIsNull(FieldContactName))
}

// ContactNameNotNil applies the NotNil predicate on the "contact_name" field.
func ContactNameNotNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotNull(FieldContactName))
}

// ContactNameEqualFold applies the EqualFold predicate on the "contact_name" field.
func ContactNameEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldContactName, v))
}

// ContactNameContainsFold applies the ContainsFold predicate on the "contact_name" field.
func ContactNameContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldContactName, v))
}

// ContactEmailEQ applies the EQ predicate on the "contact_email" field.
func ContactEmailEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldContactEmail, v))
}

// ContactEmailNEQ applies the NEQ predicate on the "contact_email" field.
func ContactEmailNEQ(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldContactEmail, v))
}

// ContactEmailIn applies the In predicate on the "contact_email" field.
func ContactEmailIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldContactEmail, vs...))
}

// ContactEmailNotIn applies the NotIn predicate on the "contact_email" field.
func ContactEmailNotIn(vs ...string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldContactEmail, vs...))
}

// ContactEmailGT applies the GT predicate on the "contact_email" field.
func ContactEmailGT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldContactEmail, v))
}

// ContactEmailGTE applies the GTE predicate on the "contact_email" field.
func ContactEmailGTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldContactEmail, v))
}

// ContactEmailLT applies the LT predicate on the "contact_email" field.
func ContactEmailLT(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldContactEmail, v))
}

// ContactEmailLTE applies the LTE predicate on the "contact_email" field.
func ContactEmailLTE(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldContactEmail, v))
}

// ContactEmailContains applies the Contains predicate on the "contact_email" field.
func ContactEmailContains(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContains(FieldContactEmail, v))
}

// ContactEmailHasPrefix applies the HasPrefix predicate on the "contact_email" field.
func ContactEmailHasPrefix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasPrefix(FieldContactEmail, v))
}

// ContactEmailHasSuffix applies the HasSuffix predicate on the "contact_email" field.
func ContactEmailHasSuffix(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldHasSuffix(FieldContactEmail, v))
}

// ContactEmailIsNil applies the IsNil predicate on the "contact_email" field.
func ContactEmailIsNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIsNull(FieldContactEmail))
}

// ContactEmailNotNil applies the NotNil predicate on the "contact_email" field.
func ContactEmailNotNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotNull(FieldContactEmail))
}

// ContactEmailEqualFold applies the EqualFold predicate on the "contact_email" field.
func ContactEmailEqualFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEqualFold(FieldContactEmail, v))
}

// ContactEmailContainsFold applies the ContainsFold predicate on the "contact_email" field.
func ContactEmailContainsFold(v string) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldContainsFold(FieldContactEmail, v))
}

// PaidUntilEQ applies the EQ predicate on the "paid_until" field.
func PaidUntilEQ(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldPaidUntil, v))
}

// PaidUntilNEQ applies the NEQ predicate on the "paid_until" field.
func PaidUntilNEQ(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldPaidUntil, v))
}

// PaidUntilIn applies the In predicate on the "paid_until" field.
func PaidUntilIn(vs ...time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldPaidUntil, vs...))
}

// PaidUntilNotIn applies the NotIn predicate on the "paid_until" field.
func PaidUntilNotIn(vs ...time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldPaidUntil, vs...))
}

// PaidUntilGT applies the GT predicate on the "paid_until" field.
func PaidUntilGT(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGT(FieldPaidUntil, v))
}

// PaidUntilGTE applies the GTE predicate on the "paid_until" field.
func PaidUntilGTE(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldGTE(FieldPaidUntil, v))
}

// PaidUntilLT applies the LT predicate on the "paid_until" field.
func PaidUntilLT(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLT(FieldPaidUntil, v))
}

// PaidUntilLTE applies the LTE predicate on the "paid_until" field.
func PaidUntilLTE(v time.Time) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldLTE(FieldPaidUntil, v))
}

// PaidUntilIsNil applies the IsNil predicate on the "paid_until" field.
func PaidUntilIsNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIsNull(FieldPaidUntil))
}

// PaidUntilNotNil applies the NotNil predicate on the "paid_until" field.
func PaidUntilNotNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotNull(FieldPaidUntil))
}

// SettingsIsNil applies the IsNil predicate on the "settings" field.
func SettingsIsNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIsNull(FieldSettings))
}

// SettingsNotNil applies the NotNil predicate on the "settings" field.
func SettingsNotNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotNull(FieldSettings))
}

// FreeTrialEQ applies the EQ predicate on the "free_trial" field.
func FreeTrialEQ(v bool) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldFreeTrial, v))
}

// FreeTrialNEQ applies the NEQ predicate on the "free_trial" field.
func FreeTrialNEQ(v bool) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldFreeTrial, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uuid.UUID) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.FieldNotNull(FieldParentID))
}

// HasPrev applies the HasEdge predicate on the "prev" edge.
func HasPrev() predicate.BusinessUnit {
	return predicate.BusinessUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PrevTable, PrevColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrevWith applies the HasEdge predicate on the "prev" edge with a given conditions (other predicates).
func HasPrevWith(preds ...predicate.BusinessUnit) predicate.BusinessUnit {
	return predicate.BusinessUnit(func(s *sql.Selector) {
		step := newPrevStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNext applies the HasEdge predicate on the "next" edge.
func HasNext() predicate.BusinessUnit {
	return predicate.BusinessUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, NextTable, NextColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNextWith applies the HasEdge predicate on the "next" edge with a given conditions (other predicates).
func HasNextWith(preds ...predicate.BusinessUnit) predicate.BusinessUnit {
	return predicate.BusinessUnit(func(s *sql.Selector) {
		step := newNextStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganizations applies the HasEdge predicate on the "organizations" edge.
func HasOrganizations() predicate.BusinessUnit {
	return predicate.BusinessUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrganizationsTable, OrganizationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationsWith applies the HasEdge predicate on the "organizations" edge with a given conditions (other predicates).
func HasOrganizationsWith(preds ...predicate.Organization) predicate.BusinessUnit {
	return predicate.BusinessUnit(func(s *sql.Selector) {
		step := newOrganizationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BusinessUnit) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BusinessUnit) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BusinessUnit) predicate.BusinessUnit {
	return predicate.BusinessUnit(sql.NotPredicates(p))
}
