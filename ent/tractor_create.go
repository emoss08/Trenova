// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/equipmentmanufactuer"
	"github.com/emoss08/trenova/ent/equipmenttype"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/tractor"
	"github.com/emoss08/trenova/ent/usstate"
	"github.com/emoss08/trenova/ent/worker"
	"github.com/google/uuid"
)

// TractorCreate is the builder for creating a Tractor entity.
type TractorCreate struct {
	config
	mutation *TractorMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (tc *TractorCreate) SetBusinessUnitID(u uuid.UUID) *TractorCreate {
	tc.mutation.SetBusinessUnitID(u)
	return tc
}

// SetOrganizationID sets the "organization_id" field.
func (tc *TractorCreate) SetOrganizationID(u uuid.UUID) *TractorCreate {
	tc.mutation.SetOrganizationID(u)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TractorCreate) SetCreatedAt(t time.Time) *TractorCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TractorCreate) SetNillableCreatedAt(t *time.Time) *TractorCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TractorCreate) SetUpdatedAt(t time.Time) *TractorCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TractorCreate) SetNillableUpdatedAt(t *time.Time) *TractorCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCode sets the "code" field.
func (tc *TractorCreate) SetCode(s string) *TractorCreate {
	tc.mutation.SetCode(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TractorCreate) SetStatus(t tractor.Status) *TractorCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TractorCreate) SetNillableStatus(t *tractor.Status) *TractorCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetEquipmentTypeID sets the "equipment_type_id" field.
func (tc *TractorCreate) SetEquipmentTypeID(u uuid.UUID) *TractorCreate {
	tc.mutation.SetEquipmentTypeID(u)
	return tc
}

// SetNillableEquipmentTypeID sets the "equipment_type_id" field if the given value is not nil.
func (tc *TractorCreate) SetNillableEquipmentTypeID(u *uuid.UUID) *TractorCreate {
	if u != nil {
		tc.SetEquipmentTypeID(*u)
	}
	return tc
}

// SetLicensePlateNumber sets the "license_plate_number" field.
func (tc *TractorCreate) SetLicensePlateNumber(s string) *TractorCreate {
	tc.mutation.SetLicensePlateNumber(s)
	return tc
}

// SetNillableLicensePlateNumber sets the "license_plate_number" field if the given value is not nil.
func (tc *TractorCreate) SetNillableLicensePlateNumber(s *string) *TractorCreate {
	if s != nil {
		tc.SetLicensePlateNumber(*s)
	}
	return tc
}

// SetVin sets the "vin" field.
func (tc *TractorCreate) SetVin(s string) *TractorCreate {
	tc.mutation.SetVin(s)
	return tc
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (tc *TractorCreate) SetNillableVin(s *string) *TractorCreate {
	if s != nil {
		tc.SetVin(*s)
	}
	return tc
}

// SetEquipmentManufacturerID sets the "equipment_manufacturer_id" field.
func (tc *TractorCreate) SetEquipmentManufacturerID(u uuid.UUID) *TractorCreate {
	tc.mutation.SetEquipmentManufacturerID(u)
	return tc
}

// SetNillableEquipmentManufacturerID sets the "equipment_manufacturer_id" field if the given value is not nil.
func (tc *TractorCreate) SetNillableEquipmentManufacturerID(u *uuid.UUID) *TractorCreate {
	if u != nil {
		tc.SetEquipmentManufacturerID(*u)
	}
	return tc
}

// SetModel sets the "model" field.
func (tc *TractorCreate) SetModel(s string) *TractorCreate {
	tc.mutation.SetModel(s)
	return tc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tc *TractorCreate) SetNillableModel(s *string) *TractorCreate {
	if s != nil {
		tc.SetModel(*s)
	}
	return tc
}

// SetYear sets the "year" field.
func (tc *TractorCreate) SetYear(i int) *TractorCreate {
	tc.mutation.SetYear(i)
	return tc
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (tc *TractorCreate) SetNillableYear(i *int) *TractorCreate {
	if i != nil {
		tc.SetYear(*i)
	}
	return tc
}

// SetStateID sets the "state_id" field.
func (tc *TractorCreate) SetStateID(u uuid.UUID) *TractorCreate {
	tc.mutation.SetStateID(u)
	return tc
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (tc *TractorCreate) SetNillableStateID(u *uuid.UUID) *TractorCreate {
	if u != nil {
		tc.SetStateID(*u)
	}
	return tc
}

// SetLeased sets the "leased" field.
func (tc *TractorCreate) SetLeased(b bool) *TractorCreate {
	tc.mutation.SetLeased(b)
	return tc
}

// SetNillableLeased sets the "leased" field if the given value is not nil.
func (tc *TractorCreate) SetNillableLeased(b *bool) *TractorCreate {
	if b != nil {
		tc.SetLeased(*b)
	}
	return tc
}

// SetLeasedDate sets the "leased_date" field.
func (tc *TractorCreate) SetLeasedDate(t time.Time) *TractorCreate {
	tc.mutation.SetLeasedDate(t)
	return tc
}

// SetNillableLeasedDate sets the "leased_date" field if the given value is not nil.
func (tc *TractorCreate) SetNillableLeasedDate(t *time.Time) *TractorCreate {
	if t != nil {
		tc.SetLeasedDate(*t)
	}
	return tc
}

// SetPrimaryWorkerID sets the "primary_worker_id" field.
func (tc *TractorCreate) SetPrimaryWorkerID(u uuid.UUID) *TractorCreate {
	tc.mutation.SetPrimaryWorkerID(u)
	return tc
}

// SetNillablePrimaryWorkerID sets the "primary_worker_id" field if the given value is not nil.
func (tc *TractorCreate) SetNillablePrimaryWorkerID(u *uuid.UUID) *TractorCreate {
	if u != nil {
		tc.SetPrimaryWorkerID(*u)
	}
	return tc
}

// SetSecondaryWorkerID sets the "secondary_worker_id" field.
func (tc *TractorCreate) SetSecondaryWorkerID(u uuid.UUID) *TractorCreate {
	tc.mutation.SetSecondaryWorkerID(u)
	return tc
}

// SetNillableSecondaryWorkerID sets the "secondary_worker_id" field if the given value is not nil.
func (tc *TractorCreate) SetNillableSecondaryWorkerID(u *uuid.UUID) *TractorCreate {
	if u != nil {
		tc.SetSecondaryWorkerID(*u)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TractorCreate) SetID(u uuid.UUID) *TractorCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TractorCreate) SetNillableID(u *uuid.UUID) *TractorCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (tc *TractorCreate) SetBusinessUnit(b *BusinessUnit) *TractorCreate {
	return tc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (tc *TractorCreate) SetOrganization(o *Organization) *TractorCreate {
	return tc.SetOrganizationID(o.ID)
}

// SetEquipmentType sets the "equipment_type" edge to the EquipmentType entity.
func (tc *TractorCreate) SetEquipmentType(e *EquipmentType) *TractorCreate {
	return tc.SetEquipmentTypeID(e.ID)
}

// SetEquipmentManufacturer sets the "equipment_manufacturer" edge to the EquipmentManufactuer entity.
func (tc *TractorCreate) SetEquipmentManufacturer(e *EquipmentManufactuer) *TractorCreate {
	return tc.SetEquipmentManufacturerID(e.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (tc *TractorCreate) SetState(u *UsState) *TractorCreate {
	return tc.SetStateID(u.ID)
}

// SetPrimaryWorker sets the "primary_worker" edge to the Worker entity.
func (tc *TractorCreate) SetPrimaryWorker(w *Worker) *TractorCreate {
	return tc.SetPrimaryWorkerID(w.ID)
}

// SetSecondaryWorker sets the "secondary_worker" edge to the Worker entity.
func (tc *TractorCreate) SetSecondaryWorker(w *Worker) *TractorCreate {
	return tc.SetSecondaryWorkerID(w.ID)
}

// Mutation returns the TractorMutation object of the builder.
func (tc *TractorCreate) Mutation() *TractorMutation {
	return tc.mutation
}

// Save creates the Tractor in the database.
func (tc *TractorCreate) Save(ctx context.Context) (*Tractor, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TractorCreate) SaveX(ctx context.Context) *Tractor {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TractorCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TractorCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TractorCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tractor.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tractor.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := tractor.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.Leased(); !ok {
		v := tractor.DefaultLeased
		tc.mutation.SetLeased(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := tractor.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TractorCreate) check() error {
	if _, ok := tc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "Tractor.business_unit_id"`)}
	}
	if _, ok := tc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Tractor.organization_id"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tractor.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tractor.updated_at"`)}
	}
	if _, ok := tc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Tractor.code"`)}
	}
	if v, ok := tc.mutation.Code(); ok {
		if err := tractor.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tractor.code": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Tractor.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := tractor.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tractor.status": %w`, err)}
		}
	}
	if v, ok := tc.mutation.LicensePlateNumber(); ok {
		if err := tractor.LicensePlateNumberValidator(v); err != nil {
			return &ValidationError{Name: "license_plate_number", err: fmt.Errorf(`ent: validator failed for field "Tractor.license_plate_number": %w`, err)}
		}
	}
	if v, ok := tc.mutation.Vin(); ok {
		if err := tractor.VinValidator(v); err != nil {
			return &ValidationError{Name: "vin", err: fmt.Errorf(`ent: validator failed for field "Tractor.vin": %w`, err)}
		}
	}
	if v, ok := tc.mutation.Model(); ok {
		if err := tractor.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Tractor.model": %w`, err)}
		}
	}
	if v, ok := tc.mutation.Year(); ok {
		if err := tractor.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "Tractor.year": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Leased(); !ok {
		return &ValidationError{Name: "leased", err: errors.New(`ent: missing required field "Tractor.leased"`)}
	}
	if _, ok := tc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "Tractor.business_unit"`)}
	}
	if _, ok := tc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Tractor.organization"`)}
	}
	return nil
}

func (tc *TractorCreate) sqlSave(ctx context.Context) (*Tractor, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TractorCreate) createSpec() (*Tractor, *sqlgraph.CreateSpec) {
	var (
		_node = &Tractor{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tractor.Table, sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tractor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tractor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Code(); ok {
		_spec.SetField(tractor.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(tractor.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.LicensePlateNumber(); ok {
		_spec.SetField(tractor.FieldLicensePlateNumber, field.TypeString, value)
		_node.LicensePlateNumber = value
	}
	if value, ok := tc.mutation.Vin(); ok {
		_spec.SetField(tractor.FieldVin, field.TypeString, value)
		_node.Vin = value
	}
	if value, ok := tc.mutation.Model(); ok {
		_spec.SetField(tractor.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := tc.mutation.Year(); ok {
		_spec.SetField(tractor.FieldYear, field.TypeInt, value)
		_node.Year = value
	}
	if value, ok := tc.mutation.Leased(); ok {
		_spec.SetField(tractor.FieldLeased, field.TypeBool, value)
		_node.Leased = value
	}
	if value, ok := tc.mutation.LeasedDate(); ok {
		_spec.SetField(tractor.FieldLeasedDate, field.TypeTime, value)
		_node.LeasedDate = &value
	}
	if nodes := tc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.BusinessUnitTable,
			Columns: []string{tractor.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.OrganizationTable,
			Columns: []string{tractor.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.EquipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentTypeTable,
			Columns: []string{tractor.EquipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EquipmentTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.EquipmentManufacturerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentManufacturerTable,
			Columns: []string{tractor.EquipmentManufacturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentmanufactuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EquipmentManufacturerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.StateTable,
			Columns: []string{tractor.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.PrimaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.PrimaryWorkerTable,
			Columns: []string{tractor.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PrimaryWorkerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.SecondaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.SecondaryWorkerTable,
			Columns: []string{tractor.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SecondaryWorkerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TractorCreateBulk is the builder for creating many Tractor entities in bulk.
type TractorCreateBulk struct {
	config
	err      error
	builders []*TractorCreate
}

// Save creates the Tractor entities in the database.
func (tcb *TractorCreateBulk) Save(ctx context.Context) ([]*Tractor, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tractor, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TractorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TractorCreateBulk) SaveX(ctx context.Context) []*Tractor {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TractorCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TractorCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
