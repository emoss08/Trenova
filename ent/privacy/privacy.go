// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/emoss08/trenova/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AccessorialChargeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AccessorialChargeQueryRuleFunc func(context.Context, *ent.AccessorialChargeQuery) error

// EvalQuery return f(ctx, q).
func (f AccessorialChargeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccessorialChargeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AccessorialChargeQuery", q)
}

// The AccessorialChargeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AccessorialChargeMutationRuleFunc func(context.Context, *ent.AccessorialChargeMutation) error

// EvalMutation calls f(ctx, m).
func (f AccessorialChargeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AccessorialChargeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AccessorialChargeMutation", m)
}

// The AccountingControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AccountingControlQueryRuleFunc func(context.Context, *ent.AccountingControlQuery) error

// EvalQuery return f(ctx, q).
func (f AccountingControlQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccountingControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AccountingControlQuery", q)
}

// The AccountingControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AccountingControlMutationRuleFunc func(context.Context, *ent.AccountingControlMutation) error

// EvalMutation calls f(ctx, m).
func (f AccountingControlMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AccountingControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AccountingControlMutation", m)
}

// The BillingControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BillingControlQueryRuleFunc func(context.Context, *ent.BillingControlQuery) error

// EvalQuery return f(ctx, q).
func (f BillingControlQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BillingControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BillingControlQuery", q)
}

// The BillingControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BillingControlMutationRuleFunc func(context.Context, *ent.BillingControlMutation) error

// EvalMutation calls f(ctx, m).
func (f BillingControlMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BillingControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BillingControlMutation", m)
}

// The BusinessUnitQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BusinessUnitQueryRuleFunc func(context.Context, *ent.BusinessUnitQuery) error

// EvalQuery return f(ctx, q).
func (f BusinessUnitQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BusinessUnitQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BusinessUnitQuery", q)
}

// The BusinessUnitMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BusinessUnitMutationRuleFunc func(context.Context, *ent.BusinessUnitMutation) error

// EvalMutation calls f(ctx, m).
func (f BusinessUnitMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BusinessUnitMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BusinessUnitMutation", m)
}

// The ChargeTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChargeTypeQueryRuleFunc func(context.Context, *ent.ChargeTypeQuery) error

// EvalQuery return f(ctx, q).
func (f ChargeTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ChargeTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ChargeTypeQuery", q)
}

// The ChargeTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChargeTypeMutationRuleFunc func(context.Context, *ent.ChargeTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f ChargeTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ChargeTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ChargeTypeMutation", m)
}

// The CommentTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CommentTypeQueryRuleFunc func(context.Context, *ent.CommentTypeQuery) error

// EvalQuery return f(ctx, q).
func (f CommentTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CommentTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CommentTypeQuery", q)
}

// The CommentTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CommentTypeMutationRuleFunc func(context.Context, *ent.CommentTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f CommentTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CommentTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CommentTypeMutation", m)
}

// The CommodityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CommodityQueryRuleFunc func(context.Context, *ent.CommodityQuery) error

// EvalQuery return f(ctx, q).
func (f CommodityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CommodityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CommodityQuery", q)
}

// The CommodityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CommodityMutationRuleFunc func(context.Context, *ent.CommodityMutation) error

// EvalMutation calls f(ctx, m).
func (f CommodityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CommodityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CommodityMutation", m)
}

// The CustomerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CustomerQueryRuleFunc func(context.Context, *ent.CustomerQuery) error

// EvalQuery return f(ctx, q).
func (f CustomerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CustomerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CustomerQuery", q)
}

// The CustomerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CustomerMutationRuleFunc func(context.Context, *ent.CustomerMutation) error

// EvalMutation calls f(ctx, m).
func (f CustomerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CustomerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CustomerMutation", m)
}

// The DelayCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DelayCodeQueryRuleFunc func(context.Context, *ent.DelayCodeQuery) error

// EvalQuery return f(ctx, q).
func (f DelayCodeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DelayCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DelayCodeQuery", q)
}

// The DelayCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DelayCodeMutationRuleFunc func(context.Context, *ent.DelayCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f DelayCodeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DelayCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DelayCodeMutation", m)
}

// The DispatchControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DispatchControlQueryRuleFunc func(context.Context, *ent.DispatchControlQuery) error

// EvalQuery return f(ctx, q).
func (f DispatchControlQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DispatchControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DispatchControlQuery", q)
}

// The DispatchControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DispatchControlMutationRuleFunc func(context.Context, *ent.DispatchControlMutation) error

// EvalMutation calls f(ctx, m).
func (f DispatchControlMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DispatchControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DispatchControlMutation", m)
}

// The DivisionCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DivisionCodeQueryRuleFunc func(context.Context, *ent.DivisionCodeQuery) error

// EvalQuery return f(ctx, q).
func (f DivisionCodeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DivisionCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DivisionCodeQuery", q)
}

// The DivisionCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DivisionCodeMutationRuleFunc func(context.Context, *ent.DivisionCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f DivisionCodeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DivisionCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DivisionCodeMutation", m)
}

// The EmailControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EmailControlQueryRuleFunc func(context.Context, *ent.EmailControlQuery) error

// EvalQuery return f(ctx, q).
func (f EmailControlQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmailControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EmailControlQuery", q)
}

// The EmailControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EmailControlMutationRuleFunc func(context.Context, *ent.EmailControlMutation) error

// EvalMutation calls f(ctx, m).
func (f EmailControlMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EmailControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EmailControlMutation", m)
}

// The EmailProfileQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EmailProfileQueryRuleFunc func(context.Context, *ent.EmailProfileQuery) error

// EvalQuery return f(ctx, q).
func (f EmailProfileQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmailProfileQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EmailProfileQuery", q)
}

// The EmailProfileMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EmailProfileMutationRuleFunc func(context.Context, *ent.EmailProfileMutation) error

// EvalMutation calls f(ctx, m).
func (f EmailProfileMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EmailProfileMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EmailProfileMutation", m)
}

// The EquipmentManufactuerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentManufactuerQueryRuleFunc func(context.Context, *ent.EquipmentManufactuerQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentManufactuerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentManufactuerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentManufactuerQuery", q)
}

// The EquipmentManufactuerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentManufactuerMutationRuleFunc func(context.Context, *ent.EquipmentManufactuerMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentManufactuerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentManufactuerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentManufactuerMutation", m)
}

// The EquipmentTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentTypeQueryRuleFunc func(context.Context, *ent.EquipmentTypeQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentTypeQuery", q)
}

// The EquipmentTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentTypeMutationRuleFunc func(context.Context, *ent.EquipmentTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentTypeMutation", m)
}

// The FeasibilityToolControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeasibilityToolControlQueryRuleFunc func(context.Context, *ent.FeasibilityToolControlQuery) error

// EvalQuery return f(ctx, q).
func (f FeasibilityToolControlQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeasibilityToolControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FeasibilityToolControlQuery", q)
}

// The FeasibilityToolControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeasibilityToolControlMutationRuleFunc func(context.Context, *ent.FeasibilityToolControlMutation) error

// EvalMutation calls f(ctx, m).
func (f FeasibilityToolControlMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FeasibilityToolControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FeasibilityToolControlMutation", m)
}

// The FleetCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FleetCodeQueryRuleFunc func(context.Context, *ent.FleetCodeQuery) error

// EvalQuery return f(ctx, q).
func (f FleetCodeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FleetCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FleetCodeQuery", q)
}

// The FleetCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FleetCodeMutationRuleFunc func(context.Context, *ent.FleetCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f FleetCodeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FleetCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FleetCodeMutation", m)
}

// The GeneralLedgerAccountQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GeneralLedgerAccountQueryRuleFunc func(context.Context, *ent.GeneralLedgerAccountQuery) error

// EvalQuery return f(ctx, q).
func (f GeneralLedgerAccountQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GeneralLedgerAccountQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GeneralLedgerAccountQuery", q)
}

// The GeneralLedgerAccountMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GeneralLedgerAccountMutationRuleFunc func(context.Context, *ent.GeneralLedgerAccountMutation) error

// EvalMutation calls f(ctx, m).
func (f GeneralLedgerAccountMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GeneralLedgerAccountMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GeneralLedgerAccountMutation", m)
}

// The HazardousMaterialQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HazardousMaterialQueryRuleFunc func(context.Context, *ent.HazardousMaterialQuery) error

// EvalQuery return f(ctx, q).
func (f HazardousMaterialQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HazardousMaterialQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HazardousMaterialQuery", q)
}

// The HazardousMaterialMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HazardousMaterialMutationRuleFunc func(context.Context, *ent.HazardousMaterialMutation) error

// EvalMutation calls f(ctx, m).
func (f HazardousMaterialMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HazardousMaterialMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HazardousMaterialMutation", m)
}

// The InvoiceControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InvoiceControlQueryRuleFunc func(context.Context, *ent.InvoiceControlQuery) error

// EvalQuery return f(ctx, q).
func (f InvoiceControlQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InvoiceControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.InvoiceControlQuery", q)
}

// The InvoiceControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InvoiceControlMutationRuleFunc func(context.Context, *ent.InvoiceControlMutation) error

// EvalMutation calls f(ctx, m).
func (f InvoiceControlMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.InvoiceControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.InvoiceControlMutation", m)
}

// The LocationCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LocationCategoryQueryRuleFunc func(context.Context, *ent.LocationCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f LocationCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LocationCategoryQuery", q)
}

// The LocationCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LocationCategoryMutationRuleFunc func(context.Context, *ent.LocationCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f LocationCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LocationCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LocationCategoryMutation", m)
}

// The OrganizationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationQueryRuleFunc func(context.Context, *ent.OrganizationQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrganizationQuery", q)
}

// The OrganizationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationMutationRuleFunc func(context.Context, *ent.OrganizationMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrganizationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrganizationMutation", m)
}

// The QualifierCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type QualifierCodeQueryRuleFunc func(context.Context, *ent.QualifierCodeQuery) error

// EvalQuery return f(ctx, q).
func (f QualifierCodeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.QualifierCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.QualifierCodeQuery", q)
}

// The QualifierCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type QualifierCodeMutationRuleFunc func(context.Context, *ent.QualifierCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f QualifierCodeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.QualifierCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.QualifierCodeMutation", m)
}

// The RevenueCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RevenueCodeQueryRuleFunc func(context.Context, *ent.RevenueCodeQuery) error

// EvalQuery return f(ctx, q).
func (f RevenueCodeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RevenueCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RevenueCodeQuery", q)
}

// The RevenueCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RevenueCodeMutationRuleFunc func(context.Context, *ent.RevenueCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f RevenueCodeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RevenueCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RevenueCodeMutation", m)
}

// The RouteControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RouteControlQueryRuleFunc func(context.Context, *ent.RouteControlQuery) error

// EvalQuery return f(ctx, q).
func (f RouteControlQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RouteControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RouteControlQuery", q)
}

// The RouteControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RouteControlMutationRuleFunc func(context.Context, *ent.RouteControlMutation) error

// EvalMutation calls f(ctx, m).
func (f RouteControlMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RouteControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RouteControlMutation", m)
}

// The ServiceTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ServiceTypeQueryRuleFunc func(context.Context, *ent.ServiceTypeQuery) error

// EvalQuery return f(ctx, q).
func (f ServiceTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ServiceTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ServiceTypeQuery", q)
}

// The ServiceTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ServiceTypeMutationRuleFunc func(context.Context, *ent.ServiceTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f ServiceTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ServiceTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ServiceTypeMutation", m)
}

// The SessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SessionQueryRuleFunc func(context.Context, *ent.SessionQuery) error

// EvalQuery return f(ctx, q).
func (f SessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SessionQuery", q)
}

// The SessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SessionMutationRuleFunc func(context.Context, *ent.SessionMutation) error

// EvalMutation calls f(ctx, m).
func (f SessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SessionMutation", m)
}

// The ShipmentControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentControlQueryRuleFunc func(context.Context, *ent.ShipmentControlQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentControlQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentControlQuery", q)
}

// The ShipmentControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentControlMutationRuleFunc func(context.Context, *ent.ShipmentControlMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentControlMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentControlMutation", m)
}

// The ShipmentTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentTypeQueryRuleFunc func(context.Context, *ent.ShipmentTypeQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentTypeQuery", q)
}

// The ShipmentTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentTypeMutationRuleFunc func(context.Context, *ent.ShipmentTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentTypeMutation", m)
}

// The TableChangeAlertQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TableChangeAlertQueryRuleFunc func(context.Context, *ent.TableChangeAlertQuery) error

// EvalQuery return f(ctx, q).
func (f TableChangeAlertQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TableChangeAlertQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TableChangeAlertQuery", q)
}

// The TableChangeAlertMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TableChangeAlertMutationRuleFunc func(context.Context, *ent.TableChangeAlertMutation) error

// EvalMutation calls f(ctx, m).
func (f TableChangeAlertMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TableChangeAlertMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TableChangeAlertMutation", m)
}

// The TagQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TagQueryRuleFunc func(context.Context, *ent.TagQuery) error

// EvalQuery return f(ctx, q).
func (f TagQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TagQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TagQuery", q)
}

// The TagMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TagMutationRuleFunc func(context.Context, *ent.TagMutation) error

// EvalMutation calls f(ctx, m).
func (f TagMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TagMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TagMutation", m)
}

// The UsStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UsStateQueryRuleFunc func(context.Context, *ent.UsStateQuery) error

// EvalQuery return f(ctx, q).
func (f UsStateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UsStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UsStateQuery", q)
}

// The UsStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UsStateMutationRuleFunc func(context.Context, *ent.UsStateMutation) error

// EvalMutation calls f(ctx, m).
func (f UsStateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UsStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UsStateMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UserFavoriteQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserFavoriteQueryRuleFunc func(context.Context, *ent.UserFavoriteQuery) error

// EvalQuery return f(ctx, q).
func (f UserFavoriteQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserFavoriteQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserFavoriteQuery", q)
}

// The UserFavoriteMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserFavoriteMutationRuleFunc func(context.Context, *ent.UserFavoriteMutation) error

// EvalMutation calls f(ctx, m).
func (f UserFavoriteMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserFavoriteMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserFavoriteMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.AccessorialChargeQuery:
		return q.Filter(), nil
	case *ent.AccountingControlQuery:
		return q.Filter(), nil
	case *ent.BillingControlQuery:
		return q.Filter(), nil
	case *ent.BusinessUnitQuery:
		return q.Filter(), nil
	case *ent.ChargeTypeQuery:
		return q.Filter(), nil
	case *ent.CommentTypeQuery:
		return q.Filter(), nil
	case *ent.CommodityQuery:
		return q.Filter(), nil
	case *ent.CustomerQuery:
		return q.Filter(), nil
	case *ent.DelayCodeQuery:
		return q.Filter(), nil
	case *ent.DispatchControlQuery:
		return q.Filter(), nil
	case *ent.DivisionCodeQuery:
		return q.Filter(), nil
	case *ent.EmailControlQuery:
		return q.Filter(), nil
	case *ent.EmailProfileQuery:
		return q.Filter(), nil
	case *ent.EquipmentManufactuerQuery:
		return q.Filter(), nil
	case *ent.EquipmentTypeQuery:
		return q.Filter(), nil
	case *ent.FeasibilityToolControlQuery:
		return q.Filter(), nil
	case *ent.FleetCodeQuery:
		return q.Filter(), nil
	case *ent.GeneralLedgerAccountQuery:
		return q.Filter(), nil
	case *ent.HazardousMaterialQuery:
		return q.Filter(), nil
	case *ent.InvoiceControlQuery:
		return q.Filter(), nil
	case *ent.LocationCategoryQuery:
		return q.Filter(), nil
	case *ent.OrganizationQuery:
		return q.Filter(), nil
	case *ent.QualifierCodeQuery:
		return q.Filter(), nil
	case *ent.RevenueCodeQuery:
		return q.Filter(), nil
	case *ent.RouteControlQuery:
		return q.Filter(), nil
	case *ent.ServiceTypeQuery:
		return q.Filter(), nil
	case *ent.SessionQuery:
		return q.Filter(), nil
	case *ent.ShipmentControlQuery:
		return q.Filter(), nil
	case *ent.ShipmentTypeQuery:
		return q.Filter(), nil
	case *ent.TableChangeAlertQuery:
		return q.Filter(), nil
	case *ent.TagQuery:
		return q.Filter(), nil
	case *ent.UsStateQuery:
		return q.Filter(), nil
	case *ent.UserQuery:
		return q.Filter(), nil
	case *ent.UserFavoriteQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.AccessorialChargeMutation:
		return m.Filter(), nil
	case *ent.AccountingControlMutation:
		return m.Filter(), nil
	case *ent.BillingControlMutation:
		return m.Filter(), nil
	case *ent.BusinessUnitMutation:
		return m.Filter(), nil
	case *ent.ChargeTypeMutation:
		return m.Filter(), nil
	case *ent.CommentTypeMutation:
		return m.Filter(), nil
	case *ent.CommodityMutation:
		return m.Filter(), nil
	case *ent.CustomerMutation:
		return m.Filter(), nil
	case *ent.DelayCodeMutation:
		return m.Filter(), nil
	case *ent.DispatchControlMutation:
		return m.Filter(), nil
	case *ent.DivisionCodeMutation:
		return m.Filter(), nil
	case *ent.EmailControlMutation:
		return m.Filter(), nil
	case *ent.EmailProfileMutation:
		return m.Filter(), nil
	case *ent.EquipmentManufactuerMutation:
		return m.Filter(), nil
	case *ent.EquipmentTypeMutation:
		return m.Filter(), nil
	case *ent.FeasibilityToolControlMutation:
		return m.Filter(), nil
	case *ent.FleetCodeMutation:
		return m.Filter(), nil
	case *ent.GeneralLedgerAccountMutation:
		return m.Filter(), nil
	case *ent.HazardousMaterialMutation:
		return m.Filter(), nil
	case *ent.InvoiceControlMutation:
		return m.Filter(), nil
	case *ent.LocationCategoryMutation:
		return m.Filter(), nil
	case *ent.OrganizationMutation:
		return m.Filter(), nil
	case *ent.QualifierCodeMutation:
		return m.Filter(), nil
	case *ent.RevenueCodeMutation:
		return m.Filter(), nil
	case *ent.RouteControlMutation:
		return m.Filter(), nil
	case *ent.ServiceTypeMutation:
		return m.Filter(), nil
	case *ent.SessionMutation:
		return m.Filter(), nil
	case *ent.ShipmentControlMutation:
		return m.Filter(), nil
	case *ent.ShipmentTypeMutation:
		return m.Filter(), nil
	case *ent.TableChangeAlertMutation:
		return m.Filter(), nil
	case *ent.TagMutation:
		return m.Filter(), nil
	case *ent.UsStateMutation:
		return m.Filter(), nil
	case *ent.UserMutation:
		return m.Filter(), nil
	case *ent.UserFavoriteMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
