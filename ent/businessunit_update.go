// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// BusinessUnitUpdate is the builder for updating BusinessUnit entities.
type BusinessUnitUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessUnitMutation
}

// Where appends a list predicates to the BusinessUnitUpdate builder.
func (buu *BusinessUnitUpdate) Where(ps ...predicate.BusinessUnit) *BusinessUnitUpdate {
	buu.mutation.Where(ps...)
	return buu
}

// SetUpdatedAt sets the "updated_at" field.
func (buu *BusinessUnitUpdate) SetUpdatedAt(t time.Time) *BusinessUnitUpdate {
	buu.mutation.SetUpdatedAt(t)
	return buu
}

// SetStatus sets the "status" field.
func (buu *BusinessUnitUpdate) SetStatus(b businessunit.Status) *BusinessUnitUpdate {
	buu.mutation.SetStatus(b)
	return buu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableStatus(b *businessunit.Status) *BusinessUnitUpdate {
	if b != nil {
		buu.SetStatus(*b)
	}
	return buu
}

// SetName sets the "name" field.
func (buu *BusinessUnitUpdate) SetName(s string) *BusinessUnitUpdate {
	buu.mutation.SetName(s)
	return buu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableName(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetName(*s)
	}
	return buu
}

// SetEntityKey sets the "entity_key" field.
func (buu *BusinessUnitUpdate) SetEntityKey(s string) *BusinessUnitUpdate {
	buu.mutation.SetEntityKey(s)
	return buu
}

// SetNillableEntityKey sets the "entity_key" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableEntityKey(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetEntityKey(*s)
	}
	return buu
}

// SetPhoneNumber sets the "phone_number" field.
func (buu *BusinessUnitUpdate) SetPhoneNumber(s string) *BusinessUnitUpdate {
	buu.mutation.SetPhoneNumber(s)
	return buu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillablePhoneNumber(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetPhoneNumber(*s)
	}
	return buu
}

// SetAddress sets the "address" field.
func (buu *BusinessUnitUpdate) SetAddress(s string) *BusinessUnitUpdate {
	buu.mutation.SetAddress(s)
	return buu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableAddress(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetAddress(*s)
	}
	return buu
}

// ClearAddress clears the value of the "address" field.
func (buu *BusinessUnitUpdate) ClearAddress() *BusinessUnitUpdate {
	buu.mutation.ClearAddress()
	return buu
}

// SetCity sets the "city" field.
func (buu *BusinessUnitUpdate) SetCity(s string) *BusinessUnitUpdate {
	buu.mutation.SetCity(s)
	return buu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableCity(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetCity(*s)
	}
	return buu
}

// ClearCity clears the value of the "city" field.
func (buu *BusinessUnitUpdate) ClearCity() *BusinessUnitUpdate {
	buu.mutation.ClearCity()
	return buu
}

// SetState sets the "state" field.
func (buu *BusinessUnitUpdate) SetState(s string) *BusinessUnitUpdate {
	buu.mutation.SetState(s)
	return buu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableState(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetState(*s)
	}
	return buu
}

// ClearState clears the value of the "state" field.
func (buu *BusinessUnitUpdate) ClearState() *BusinessUnitUpdate {
	buu.mutation.ClearState()
	return buu
}

// SetCountry sets the "country" field.
func (buu *BusinessUnitUpdate) SetCountry(s string) *BusinessUnitUpdate {
	buu.mutation.SetCountry(s)
	return buu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableCountry(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetCountry(*s)
	}
	return buu
}

// ClearCountry clears the value of the "country" field.
func (buu *BusinessUnitUpdate) ClearCountry() *BusinessUnitUpdate {
	buu.mutation.ClearCountry()
	return buu
}

// SetPostalCode sets the "postal_code" field.
func (buu *BusinessUnitUpdate) SetPostalCode(s string) *BusinessUnitUpdate {
	buu.mutation.SetPostalCode(s)
	return buu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillablePostalCode(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetPostalCode(*s)
	}
	return buu
}

// ClearPostalCode clears the value of the "postal_code" field.
func (buu *BusinessUnitUpdate) ClearPostalCode() *BusinessUnitUpdate {
	buu.mutation.ClearPostalCode()
	return buu
}

// SetTaxID sets the "tax_id" field.
func (buu *BusinessUnitUpdate) SetTaxID(s string) *BusinessUnitUpdate {
	buu.mutation.SetTaxID(s)
	return buu
}

// SetNillableTaxID sets the "tax_id" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableTaxID(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetTaxID(*s)
	}
	return buu
}

// ClearTaxID clears the value of the "tax_id" field.
func (buu *BusinessUnitUpdate) ClearTaxID() *BusinessUnitUpdate {
	buu.mutation.ClearTaxID()
	return buu
}

// SetSubscriptionPlan sets the "subscription_plan" field.
func (buu *BusinessUnitUpdate) SetSubscriptionPlan(s string) *BusinessUnitUpdate {
	buu.mutation.SetSubscriptionPlan(s)
	return buu
}

// SetNillableSubscriptionPlan sets the "subscription_plan" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableSubscriptionPlan(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetSubscriptionPlan(*s)
	}
	return buu
}

// ClearSubscriptionPlan clears the value of the "subscription_plan" field.
func (buu *BusinessUnitUpdate) ClearSubscriptionPlan() *BusinessUnitUpdate {
	buu.mutation.ClearSubscriptionPlan()
	return buu
}

// SetDescription sets the "description" field.
func (buu *BusinessUnitUpdate) SetDescription(s string) *BusinessUnitUpdate {
	buu.mutation.SetDescription(s)
	return buu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableDescription(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetDescription(*s)
	}
	return buu
}

// ClearDescription clears the value of the "description" field.
func (buu *BusinessUnitUpdate) ClearDescription() *BusinessUnitUpdate {
	buu.mutation.ClearDescription()
	return buu
}

// SetLegalName sets the "legal_name" field.
func (buu *BusinessUnitUpdate) SetLegalName(s string) *BusinessUnitUpdate {
	buu.mutation.SetLegalName(s)
	return buu
}

// SetNillableLegalName sets the "legal_name" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableLegalName(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetLegalName(*s)
	}
	return buu
}

// ClearLegalName clears the value of the "legal_name" field.
func (buu *BusinessUnitUpdate) ClearLegalName() *BusinessUnitUpdate {
	buu.mutation.ClearLegalName()
	return buu
}

// SetContactName sets the "contact_name" field.
func (buu *BusinessUnitUpdate) SetContactName(s string) *BusinessUnitUpdate {
	buu.mutation.SetContactName(s)
	return buu
}

// SetNillableContactName sets the "contact_name" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableContactName(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetContactName(*s)
	}
	return buu
}

// ClearContactName clears the value of the "contact_name" field.
func (buu *BusinessUnitUpdate) ClearContactName() *BusinessUnitUpdate {
	buu.mutation.ClearContactName()
	return buu
}

// SetContactEmail sets the "contact_email" field.
func (buu *BusinessUnitUpdate) SetContactEmail(s string) *BusinessUnitUpdate {
	buu.mutation.SetContactEmail(s)
	return buu
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableContactEmail(s *string) *BusinessUnitUpdate {
	if s != nil {
		buu.SetContactEmail(*s)
	}
	return buu
}

// ClearContactEmail clears the value of the "contact_email" field.
func (buu *BusinessUnitUpdate) ClearContactEmail() *BusinessUnitUpdate {
	buu.mutation.ClearContactEmail()
	return buu
}

// SetPaidUntil sets the "paid_until" field.
func (buu *BusinessUnitUpdate) SetPaidUntil(t time.Time) *BusinessUnitUpdate {
	buu.mutation.SetPaidUntil(t)
	return buu
}

// SetNillablePaidUntil sets the "paid_until" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillablePaidUntil(t *time.Time) *BusinessUnitUpdate {
	if t != nil {
		buu.SetPaidUntil(*t)
	}
	return buu
}

// ClearPaidUntil clears the value of the "paid_until" field.
func (buu *BusinessUnitUpdate) ClearPaidUntil() *BusinessUnitUpdate {
	buu.mutation.ClearPaidUntil()
	return buu
}

// SetSettings sets the "settings" field.
func (buu *BusinessUnitUpdate) SetSettings(m map[string]interface{}) *BusinessUnitUpdate {
	buu.mutation.SetSettings(m)
	return buu
}

// ClearSettings clears the value of the "settings" field.
func (buu *BusinessUnitUpdate) ClearSettings() *BusinessUnitUpdate {
	buu.mutation.ClearSettings()
	return buu
}

// SetFreeTrial sets the "free_trial" field.
func (buu *BusinessUnitUpdate) SetFreeTrial(b bool) *BusinessUnitUpdate {
	buu.mutation.SetFreeTrial(b)
	return buu
}

// SetNillableFreeTrial sets the "free_trial" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableFreeTrial(b *bool) *BusinessUnitUpdate {
	if b != nil {
		buu.SetFreeTrial(*b)
	}
	return buu
}

// SetParentID sets the "parent_id" field.
func (buu *BusinessUnitUpdate) SetParentID(u uuid.UUID) *BusinessUnitUpdate {
	buu.mutation.SetParentID(u)
	return buu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableParentID(u *uuid.UUID) *BusinessUnitUpdate {
	if u != nil {
		buu.SetParentID(*u)
	}
	return buu
}

// ClearParentID clears the value of the "parent_id" field.
func (buu *BusinessUnitUpdate) ClearParentID() *BusinessUnitUpdate {
	buu.mutation.ClearParentID()
	return buu
}

// SetPrevID sets the "prev" edge to the BusinessUnit entity by ID.
func (buu *BusinessUnitUpdate) SetPrevID(id uuid.UUID) *BusinessUnitUpdate {
	buu.mutation.SetPrevID(id)
	return buu
}

// SetNillablePrevID sets the "prev" edge to the BusinessUnit entity by ID if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillablePrevID(id *uuid.UUID) *BusinessUnitUpdate {
	if id != nil {
		buu = buu.SetPrevID(*id)
	}
	return buu
}

// SetPrev sets the "prev" edge to the BusinessUnit entity.
func (buu *BusinessUnitUpdate) SetPrev(b *BusinessUnit) *BusinessUnitUpdate {
	return buu.SetPrevID(b.ID)
}

// SetNextID sets the "next" edge to the BusinessUnit entity by ID.
func (buu *BusinessUnitUpdate) SetNextID(id uuid.UUID) *BusinessUnitUpdate {
	buu.mutation.SetNextID(id)
	return buu
}

// SetNillableNextID sets the "next" edge to the BusinessUnit entity by ID if the given value is not nil.
func (buu *BusinessUnitUpdate) SetNillableNextID(id *uuid.UUID) *BusinessUnitUpdate {
	if id != nil {
		buu = buu.SetNextID(*id)
	}
	return buu
}

// SetNext sets the "next" edge to the BusinessUnit entity.
func (buu *BusinessUnitUpdate) SetNext(b *BusinessUnit) *BusinessUnitUpdate {
	return buu.SetNextID(b.ID)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (buu *BusinessUnitUpdate) AddOrganizationIDs(ids ...uuid.UUID) *BusinessUnitUpdate {
	buu.mutation.AddOrganizationIDs(ids...)
	return buu
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (buu *BusinessUnitUpdate) AddOrganizations(o ...*Organization) *BusinessUnitUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buu.AddOrganizationIDs(ids...)
}

// Mutation returns the BusinessUnitMutation object of the builder.
func (buu *BusinessUnitUpdate) Mutation() *BusinessUnitMutation {
	return buu.mutation
}

// ClearPrev clears the "prev" edge to the BusinessUnit entity.
func (buu *BusinessUnitUpdate) ClearPrev() *BusinessUnitUpdate {
	buu.mutation.ClearPrev()
	return buu
}

// ClearNext clears the "next" edge to the BusinessUnit entity.
func (buu *BusinessUnitUpdate) ClearNext() *BusinessUnitUpdate {
	buu.mutation.ClearNext()
	return buu
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (buu *BusinessUnitUpdate) ClearOrganizations() *BusinessUnitUpdate {
	buu.mutation.ClearOrganizations()
	return buu
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (buu *BusinessUnitUpdate) RemoveOrganizationIDs(ids ...uuid.UUID) *BusinessUnitUpdate {
	buu.mutation.RemoveOrganizationIDs(ids...)
	return buu
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (buu *BusinessUnitUpdate) RemoveOrganizations(o ...*Organization) *BusinessUnitUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buu.RemoveOrganizationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (buu *BusinessUnitUpdate) Save(ctx context.Context) (int, error) {
	buu.defaults()
	return withHooks(ctx, buu.sqlSave, buu.mutation, buu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buu *BusinessUnitUpdate) SaveX(ctx context.Context) int {
	affected, err := buu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (buu *BusinessUnitUpdate) Exec(ctx context.Context) error {
	_, err := buu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buu *BusinessUnitUpdate) ExecX(ctx context.Context) {
	if err := buu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buu *BusinessUnitUpdate) defaults() {
	if _, ok := buu.mutation.UpdatedAt(); !ok {
		v := businessunit.UpdateDefaultUpdatedAt()
		buu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buu *BusinessUnitUpdate) check() error {
	if v, ok := buu.mutation.Status(); ok {
		if err := businessunit.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.status": %w`, err)}
		}
	}
	if v, ok := buu.mutation.Name(); ok {
		if err := businessunit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.name": %w`, err)}
		}
	}
	if v, ok := buu.mutation.EntityKey(); ok {
		if err := businessunit.EntityKeyValidator(v); err != nil {
			return &ValidationError{Name: "entity_key", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.entity_key": %w`, err)}
		}
	}
	if v, ok := buu.mutation.PhoneNumber(); ok {
		if err := businessunit.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.phone_number": %w`, err)}
		}
	}
	if v, ok := buu.mutation.City(); ok {
		if err := businessunit.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.city": %w`, err)}
		}
	}
	if v, ok := buu.mutation.State(); ok {
		if err := businessunit.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.state": %w`, err)}
		}
	}
	if v, ok := buu.mutation.Country(); ok {
		if err := businessunit.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.country": %w`, err)}
		}
	}
	if v, ok := buu.mutation.PostalCode(); ok {
		if err := businessunit.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.postal_code": %w`, err)}
		}
	}
	if v, ok := buu.mutation.TaxID(); ok {
		if err := businessunit.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "tax_id", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.tax_id": %w`, err)}
		}
	}
	return nil
}

func (buu *BusinessUnitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := buu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(businessunit.Table, businessunit.Columns, sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID))
	if ps := buu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buu.mutation.UpdatedAt(); ok {
		_spec.SetField(businessunit.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buu.mutation.Status(); ok {
		_spec.SetField(businessunit.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := buu.mutation.Name(); ok {
		_spec.SetField(businessunit.FieldName, field.TypeString, value)
	}
	if value, ok := buu.mutation.EntityKey(); ok {
		_spec.SetField(businessunit.FieldEntityKey, field.TypeString, value)
	}
	if value, ok := buu.mutation.PhoneNumber(); ok {
		_spec.SetField(businessunit.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := buu.mutation.Address(); ok {
		_spec.SetField(businessunit.FieldAddress, field.TypeString, value)
	}
	if buu.mutation.AddressCleared() {
		_spec.ClearField(businessunit.FieldAddress, field.TypeString)
	}
	if value, ok := buu.mutation.City(); ok {
		_spec.SetField(businessunit.FieldCity, field.TypeString, value)
	}
	if buu.mutation.CityCleared() {
		_spec.ClearField(businessunit.FieldCity, field.TypeString)
	}
	if value, ok := buu.mutation.State(); ok {
		_spec.SetField(businessunit.FieldState, field.TypeString, value)
	}
	if buu.mutation.StateCleared() {
		_spec.ClearField(businessunit.FieldState, field.TypeString)
	}
	if value, ok := buu.mutation.Country(); ok {
		_spec.SetField(businessunit.FieldCountry, field.TypeString, value)
	}
	if buu.mutation.CountryCleared() {
		_spec.ClearField(businessunit.FieldCountry, field.TypeString)
	}
	if value, ok := buu.mutation.PostalCode(); ok {
		_spec.SetField(businessunit.FieldPostalCode, field.TypeString, value)
	}
	if buu.mutation.PostalCodeCleared() {
		_spec.ClearField(businessunit.FieldPostalCode, field.TypeString)
	}
	if value, ok := buu.mutation.TaxID(); ok {
		_spec.SetField(businessunit.FieldTaxID, field.TypeString, value)
	}
	if buu.mutation.TaxIDCleared() {
		_spec.ClearField(businessunit.FieldTaxID, field.TypeString)
	}
	if value, ok := buu.mutation.SubscriptionPlan(); ok {
		_spec.SetField(businessunit.FieldSubscriptionPlan, field.TypeString, value)
	}
	if buu.mutation.SubscriptionPlanCleared() {
		_spec.ClearField(businessunit.FieldSubscriptionPlan, field.TypeString)
	}
	if value, ok := buu.mutation.Description(); ok {
		_spec.SetField(businessunit.FieldDescription, field.TypeString, value)
	}
	if buu.mutation.DescriptionCleared() {
		_spec.ClearField(businessunit.FieldDescription, field.TypeString)
	}
	if value, ok := buu.mutation.LegalName(); ok {
		_spec.SetField(businessunit.FieldLegalName, field.TypeString, value)
	}
	if buu.mutation.LegalNameCleared() {
		_spec.ClearField(businessunit.FieldLegalName, field.TypeString)
	}
	if value, ok := buu.mutation.ContactName(); ok {
		_spec.SetField(businessunit.FieldContactName, field.TypeString, value)
	}
	if buu.mutation.ContactNameCleared() {
		_spec.ClearField(businessunit.FieldContactName, field.TypeString)
	}
	if value, ok := buu.mutation.ContactEmail(); ok {
		_spec.SetField(businessunit.FieldContactEmail, field.TypeString, value)
	}
	if buu.mutation.ContactEmailCleared() {
		_spec.ClearField(businessunit.FieldContactEmail, field.TypeString)
	}
	if value, ok := buu.mutation.PaidUntil(); ok {
		_spec.SetField(businessunit.FieldPaidUntil, field.TypeTime, value)
	}
	if buu.mutation.PaidUntilCleared() {
		_spec.ClearField(businessunit.FieldPaidUntil, field.TypeTime)
	}
	if value, ok := buu.mutation.Settings(); ok {
		_spec.SetField(businessunit.FieldSettings, field.TypeJSON, value)
	}
	if buu.mutation.SettingsCleared() {
		_spec.ClearField(businessunit.FieldSettings, field.TypeJSON)
	}
	if value, ok := buu.mutation.FreeTrial(); ok {
		_spec.SetField(businessunit.FieldFreeTrial, field.TypeBool, value)
	}
	if buu.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessunit.PrevTable,
			Columns: []string{businessunit.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buu.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessunit.PrevTable,
			Columns: []string{businessunit.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buu.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   businessunit.NextTable,
			Columns: []string{businessunit.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buu.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   businessunit.NextTable,
			Columns: []string{businessunit.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessunit.OrganizationsTable,
			Columns: []string{businessunit.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buu.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !buu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessunit.OrganizationsTable,
			Columns: []string{businessunit.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buu.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessunit.OrganizationsTable,
			Columns: []string{businessunit.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, buu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	buu.mutation.done = true
	return n, nil
}

// BusinessUnitUpdateOne is the builder for updating a single BusinessUnit entity.
type BusinessUnitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessUnitMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buuo *BusinessUnitUpdateOne) SetUpdatedAt(t time.Time) *BusinessUnitUpdateOne {
	buuo.mutation.SetUpdatedAt(t)
	return buuo
}

// SetStatus sets the "status" field.
func (buuo *BusinessUnitUpdateOne) SetStatus(b businessunit.Status) *BusinessUnitUpdateOne {
	buuo.mutation.SetStatus(b)
	return buuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableStatus(b *businessunit.Status) *BusinessUnitUpdateOne {
	if b != nil {
		buuo.SetStatus(*b)
	}
	return buuo
}

// SetName sets the "name" field.
func (buuo *BusinessUnitUpdateOne) SetName(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetName(s)
	return buuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableName(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetName(*s)
	}
	return buuo
}

// SetEntityKey sets the "entity_key" field.
func (buuo *BusinessUnitUpdateOne) SetEntityKey(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetEntityKey(s)
	return buuo
}

// SetNillableEntityKey sets the "entity_key" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableEntityKey(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetEntityKey(*s)
	}
	return buuo
}

// SetPhoneNumber sets the "phone_number" field.
func (buuo *BusinessUnitUpdateOne) SetPhoneNumber(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetPhoneNumber(s)
	return buuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillablePhoneNumber(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetPhoneNumber(*s)
	}
	return buuo
}

// SetAddress sets the "address" field.
func (buuo *BusinessUnitUpdateOne) SetAddress(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetAddress(s)
	return buuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableAddress(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetAddress(*s)
	}
	return buuo
}

// ClearAddress clears the value of the "address" field.
func (buuo *BusinessUnitUpdateOne) ClearAddress() *BusinessUnitUpdateOne {
	buuo.mutation.ClearAddress()
	return buuo
}

// SetCity sets the "city" field.
func (buuo *BusinessUnitUpdateOne) SetCity(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetCity(s)
	return buuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableCity(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetCity(*s)
	}
	return buuo
}

// ClearCity clears the value of the "city" field.
func (buuo *BusinessUnitUpdateOne) ClearCity() *BusinessUnitUpdateOne {
	buuo.mutation.ClearCity()
	return buuo
}

// SetState sets the "state" field.
func (buuo *BusinessUnitUpdateOne) SetState(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetState(s)
	return buuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableState(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetState(*s)
	}
	return buuo
}

// ClearState clears the value of the "state" field.
func (buuo *BusinessUnitUpdateOne) ClearState() *BusinessUnitUpdateOne {
	buuo.mutation.ClearState()
	return buuo
}

// SetCountry sets the "country" field.
func (buuo *BusinessUnitUpdateOne) SetCountry(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetCountry(s)
	return buuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableCountry(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetCountry(*s)
	}
	return buuo
}

// ClearCountry clears the value of the "country" field.
func (buuo *BusinessUnitUpdateOne) ClearCountry() *BusinessUnitUpdateOne {
	buuo.mutation.ClearCountry()
	return buuo
}

// SetPostalCode sets the "postal_code" field.
func (buuo *BusinessUnitUpdateOne) SetPostalCode(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetPostalCode(s)
	return buuo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillablePostalCode(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetPostalCode(*s)
	}
	return buuo
}

// ClearPostalCode clears the value of the "postal_code" field.
func (buuo *BusinessUnitUpdateOne) ClearPostalCode() *BusinessUnitUpdateOne {
	buuo.mutation.ClearPostalCode()
	return buuo
}

// SetTaxID sets the "tax_id" field.
func (buuo *BusinessUnitUpdateOne) SetTaxID(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetTaxID(s)
	return buuo
}

// SetNillableTaxID sets the "tax_id" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableTaxID(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetTaxID(*s)
	}
	return buuo
}

// ClearTaxID clears the value of the "tax_id" field.
func (buuo *BusinessUnitUpdateOne) ClearTaxID() *BusinessUnitUpdateOne {
	buuo.mutation.ClearTaxID()
	return buuo
}

// SetSubscriptionPlan sets the "subscription_plan" field.
func (buuo *BusinessUnitUpdateOne) SetSubscriptionPlan(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetSubscriptionPlan(s)
	return buuo
}

// SetNillableSubscriptionPlan sets the "subscription_plan" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableSubscriptionPlan(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetSubscriptionPlan(*s)
	}
	return buuo
}

// ClearSubscriptionPlan clears the value of the "subscription_plan" field.
func (buuo *BusinessUnitUpdateOne) ClearSubscriptionPlan() *BusinessUnitUpdateOne {
	buuo.mutation.ClearSubscriptionPlan()
	return buuo
}

// SetDescription sets the "description" field.
func (buuo *BusinessUnitUpdateOne) SetDescription(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetDescription(s)
	return buuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableDescription(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetDescription(*s)
	}
	return buuo
}

// ClearDescription clears the value of the "description" field.
func (buuo *BusinessUnitUpdateOne) ClearDescription() *BusinessUnitUpdateOne {
	buuo.mutation.ClearDescription()
	return buuo
}

// SetLegalName sets the "legal_name" field.
func (buuo *BusinessUnitUpdateOne) SetLegalName(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetLegalName(s)
	return buuo
}

// SetNillableLegalName sets the "legal_name" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableLegalName(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetLegalName(*s)
	}
	return buuo
}

// ClearLegalName clears the value of the "legal_name" field.
func (buuo *BusinessUnitUpdateOne) ClearLegalName() *BusinessUnitUpdateOne {
	buuo.mutation.ClearLegalName()
	return buuo
}

// SetContactName sets the "contact_name" field.
func (buuo *BusinessUnitUpdateOne) SetContactName(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetContactName(s)
	return buuo
}

// SetNillableContactName sets the "contact_name" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableContactName(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetContactName(*s)
	}
	return buuo
}

// ClearContactName clears the value of the "contact_name" field.
func (buuo *BusinessUnitUpdateOne) ClearContactName() *BusinessUnitUpdateOne {
	buuo.mutation.ClearContactName()
	return buuo
}

// SetContactEmail sets the "contact_email" field.
func (buuo *BusinessUnitUpdateOne) SetContactEmail(s string) *BusinessUnitUpdateOne {
	buuo.mutation.SetContactEmail(s)
	return buuo
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableContactEmail(s *string) *BusinessUnitUpdateOne {
	if s != nil {
		buuo.SetContactEmail(*s)
	}
	return buuo
}

// ClearContactEmail clears the value of the "contact_email" field.
func (buuo *BusinessUnitUpdateOne) ClearContactEmail() *BusinessUnitUpdateOne {
	buuo.mutation.ClearContactEmail()
	return buuo
}

// SetPaidUntil sets the "paid_until" field.
func (buuo *BusinessUnitUpdateOne) SetPaidUntil(t time.Time) *BusinessUnitUpdateOne {
	buuo.mutation.SetPaidUntil(t)
	return buuo
}

// SetNillablePaidUntil sets the "paid_until" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillablePaidUntil(t *time.Time) *BusinessUnitUpdateOne {
	if t != nil {
		buuo.SetPaidUntil(*t)
	}
	return buuo
}

// ClearPaidUntil clears the value of the "paid_until" field.
func (buuo *BusinessUnitUpdateOne) ClearPaidUntil() *BusinessUnitUpdateOne {
	buuo.mutation.ClearPaidUntil()
	return buuo
}

// SetSettings sets the "settings" field.
func (buuo *BusinessUnitUpdateOne) SetSettings(m map[string]interface{}) *BusinessUnitUpdateOne {
	buuo.mutation.SetSettings(m)
	return buuo
}

// ClearSettings clears the value of the "settings" field.
func (buuo *BusinessUnitUpdateOne) ClearSettings() *BusinessUnitUpdateOne {
	buuo.mutation.ClearSettings()
	return buuo
}

// SetFreeTrial sets the "free_trial" field.
func (buuo *BusinessUnitUpdateOne) SetFreeTrial(b bool) *BusinessUnitUpdateOne {
	buuo.mutation.SetFreeTrial(b)
	return buuo
}

// SetNillableFreeTrial sets the "free_trial" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableFreeTrial(b *bool) *BusinessUnitUpdateOne {
	if b != nil {
		buuo.SetFreeTrial(*b)
	}
	return buuo
}

// SetParentID sets the "parent_id" field.
func (buuo *BusinessUnitUpdateOne) SetParentID(u uuid.UUID) *BusinessUnitUpdateOne {
	buuo.mutation.SetParentID(u)
	return buuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableParentID(u *uuid.UUID) *BusinessUnitUpdateOne {
	if u != nil {
		buuo.SetParentID(*u)
	}
	return buuo
}

// ClearParentID clears the value of the "parent_id" field.
func (buuo *BusinessUnitUpdateOne) ClearParentID() *BusinessUnitUpdateOne {
	buuo.mutation.ClearParentID()
	return buuo
}

// SetPrevID sets the "prev" edge to the BusinessUnit entity by ID.
func (buuo *BusinessUnitUpdateOne) SetPrevID(id uuid.UUID) *BusinessUnitUpdateOne {
	buuo.mutation.SetPrevID(id)
	return buuo
}

// SetNillablePrevID sets the "prev" edge to the BusinessUnit entity by ID if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillablePrevID(id *uuid.UUID) *BusinessUnitUpdateOne {
	if id != nil {
		buuo = buuo.SetPrevID(*id)
	}
	return buuo
}

// SetPrev sets the "prev" edge to the BusinessUnit entity.
func (buuo *BusinessUnitUpdateOne) SetPrev(b *BusinessUnit) *BusinessUnitUpdateOne {
	return buuo.SetPrevID(b.ID)
}

// SetNextID sets the "next" edge to the BusinessUnit entity by ID.
func (buuo *BusinessUnitUpdateOne) SetNextID(id uuid.UUID) *BusinessUnitUpdateOne {
	buuo.mutation.SetNextID(id)
	return buuo
}

// SetNillableNextID sets the "next" edge to the BusinessUnit entity by ID if the given value is not nil.
func (buuo *BusinessUnitUpdateOne) SetNillableNextID(id *uuid.UUID) *BusinessUnitUpdateOne {
	if id != nil {
		buuo = buuo.SetNextID(*id)
	}
	return buuo
}

// SetNext sets the "next" edge to the BusinessUnit entity.
func (buuo *BusinessUnitUpdateOne) SetNext(b *BusinessUnit) *BusinessUnitUpdateOne {
	return buuo.SetNextID(b.ID)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (buuo *BusinessUnitUpdateOne) AddOrganizationIDs(ids ...uuid.UUID) *BusinessUnitUpdateOne {
	buuo.mutation.AddOrganizationIDs(ids...)
	return buuo
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (buuo *BusinessUnitUpdateOne) AddOrganizations(o ...*Organization) *BusinessUnitUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buuo.AddOrganizationIDs(ids...)
}

// Mutation returns the BusinessUnitMutation object of the builder.
func (buuo *BusinessUnitUpdateOne) Mutation() *BusinessUnitMutation {
	return buuo.mutation
}

// ClearPrev clears the "prev" edge to the BusinessUnit entity.
func (buuo *BusinessUnitUpdateOne) ClearPrev() *BusinessUnitUpdateOne {
	buuo.mutation.ClearPrev()
	return buuo
}

// ClearNext clears the "next" edge to the BusinessUnit entity.
func (buuo *BusinessUnitUpdateOne) ClearNext() *BusinessUnitUpdateOne {
	buuo.mutation.ClearNext()
	return buuo
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (buuo *BusinessUnitUpdateOne) ClearOrganizations() *BusinessUnitUpdateOne {
	buuo.mutation.ClearOrganizations()
	return buuo
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (buuo *BusinessUnitUpdateOne) RemoveOrganizationIDs(ids ...uuid.UUID) *BusinessUnitUpdateOne {
	buuo.mutation.RemoveOrganizationIDs(ids...)
	return buuo
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (buuo *BusinessUnitUpdateOne) RemoveOrganizations(o ...*Organization) *BusinessUnitUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buuo.RemoveOrganizationIDs(ids...)
}

// Where appends a list predicates to the BusinessUnitUpdate builder.
func (buuo *BusinessUnitUpdateOne) Where(ps ...predicate.BusinessUnit) *BusinessUnitUpdateOne {
	buuo.mutation.Where(ps...)
	return buuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buuo *BusinessUnitUpdateOne) Select(field string, fields ...string) *BusinessUnitUpdateOne {
	buuo.fields = append([]string{field}, fields...)
	return buuo
}

// Save executes the query and returns the updated BusinessUnit entity.
func (buuo *BusinessUnitUpdateOne) Save(ctx context.Context) (*BusinessUnit, error) {
	buuo.defaults()
	return withHooks(ctx, buuo.sqlSave, buuo.mutation, buuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buuo *BusinessUnitUpdateOne) SaveX(ctx context.Context) *BusinessUnit {
	node, err := buuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buuo *BusinessUnitUpdateOne) Exec(ctx context.Context) error {
	_, err := buuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buuo *BusinessUnitUpdateOne) ExecX(ctx context.Context) {
	if err := buuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buuo *BusinessUnitUpdateOne) defaults() {
	if _, ok := buuo.mutation.UpdatedAt(); !ok {
		v := businessunit.UpdateDefaultUpdatedAt()
		buuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buuo *BusinessUnitUpdateOne) check() error {
	if v, ok := buuo.mutation.Status(); ok {
		if err := businessunit.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.status": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.Name(); ok {
		if err := businessunit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.name": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.EntityKey(); ok {
		if err := businessunit.EntityKeyValidator(v); err != nil {
			return &ValidationError{Name: "entity_key", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.entity_key": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.PhoneNumber(); ok {
		if err := businessunit.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.phone_number": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.City(); ok {
		if err := businessunit.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.city": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.State(); ok {
		if err := businessunit.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.state": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.Country(); ok {
		if err := businessunit.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.country": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.PostalCode(); ok {
		if err := businessunit.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.postal_code": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.TaxID(); ok {
		if err := businessunit.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "tax_id", err: fmt.Errorf(`ent: validator failed for field "BusinessUnit.tax_id": %w`, err)}
		}
	}
	return nil
}

func (buuo *BusinessUnitUpdateOne) sqlSave(ctx context.Context) (_node *BusinessUnit, err error) {
	if err := buuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(businessunit.Table, businessunit.Columns, sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID))
	id, ok := buuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BusinessUnit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businessunit.FieldID)
		for _, f := range fields {
			if !businessunit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != businessunit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buuo.mutation.UpdatedAt(); ok {
		_spec.SetField(businessunit.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buuo.mutation.Status(); ok {
		_spec.SetField(businessunit.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := buuo.mutation.Name(); ok {
		_spec.SetField(businessunit.FieldName, field.TypeString, value)
	}
	if value, ok := buuo.mutation.EntityKey(); ok {
		_spec.SetField(businessunit.FieldEntityKey, field.TypeString, value)
	}
	if value, ok := buuo.mutation.PhoneNumber(); ok {
		_spec.SetField(businessunit.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := buuo.mutation.Address(); ok {
		_spec.SetField(businessunit.FieldAddress, field.TypeString, value)
	}
	if buuo.mutation.AddressCleared() {
		_spec.ClearField(businessunit.FieldAddress, field.TypeString)
	}
	if value, ok := buuo.mutation.City(); ok {
		_spec.SetField(businessunit.FieldCity, field.TypeString, value)
	}
	if buuo.mutation.CityCleared() {
		_spec.ClearField(businessunit.FieldCity, field.TypeString)
	}
	if value, ok := buuo.mutation.State(); ok {
		_spec.SetField(businessunit.FieldState, field.TypeString, value)
	}
	if buuo.mutation.StateCleared() {
		_spec.ClearField(businessunit.FieldState, field.TypeString)
	}
	if value, ok := buuo.mutation.Country(); ok {
		_spec.SetField(businessunit.FieldCountry, field.TypeString, value)
	}
	if buuo.mutation.CountryCleared() {
		_spec.ClearField(businessunit.FieldCountry, field.TypeString)
	}
	if value, ok := buuo.mutation.PostalCode(); ok {
		_spec.SetField(businessunit.FieldPostalCode, field.TypeString, value)
	}
	if buuo.mutation.PostalCodeCleared() {
		_spec.ClearField(businessunit.FieldPostalCode, field.TypeString)
	}
	if value, ok := buuo.mutation.TaxID(); ok {
		_spec.SetField(businessunit.FieldTaxID, field.TypeString, value)
	}
	if buuo.mutation.TaxIDCleared() {
		_spec.ClearField(businessunit.FieldTaxID, field.TypeString)
	}
	if value, ok := buuo.mutation.SubscriptionPlan(); ok {
		_spec.SetField(businessunit.FieldSubscriptionPlan, field.TypeString, value)
	}
	if buuo.mutation.SubscriptionPlanCleared() {
		_spec.ClearField(businessunit.FieldSubscriptionPlan, field.TypeString)
	}
	if value, ok := buuo.mutation.Description(); ok {
		_spec.SetField(businessunit.FieldDescription, field.TypeString, value)
	}
	if buuo.mutation.DescriptionCleared() {
		_spec.ClearField(businessunit.FieldDescription, field.TypeString)
	}
	if value, ok := buuo.mutation.LegalName(); ok {
		_spec.SetField(businessunit.FieldLegalName, field.TypeString, value)
	}
	if buuo.mutation.LegalNameCleared() {
		_spec.ClearField(businessunit.FieldLegalName, field.TypeString)
	}
	if value, ok := buuo.mutation.ContactName(); ok {
		_spec.SetField(businessunit.FieldContactName, field.TypeString, value)
	}
	if buuo.mutation.ContactNameCleared() {
		_spec.ClearField(businessunit.FieldContactName, field.TypeString)
	}
	if value, ok := buuo.mutation.ContactEmail(); ok {
		_spec.SetField(businessunit.FieldContactEmail, field.TypeString, value)
	}
	if buuo.mutation.ContactEmailCleared() {
		_spec.ClearField(businessunit.FieldContactEmail, field.TypeString)
	}
	if value, ok := buuo.mutation.PaidUntil(); ok {
		_spec.SetField(businessunit.FieldPaidUntil, field.TypeTime, value)
	}
	if buuo.mutation.PaidUntilCleared() {
		_spec.ClearField(businessunit.FieldPaidUntil, field.TypeTime)
	}
	if value, ok := buuo.mutation.Settings(); ok {
		_spec.SetField(businessunit.FieldSettings, field.TypeJSON, value)
	}
	if buuo.mutation.SettingsCleared() {
		_spec.ClearField(businessunit.FieldSettings, field.TypeJSON)
	}
	if value, ok := buuo.mutation.FreeTrial(); ok {
		_spec.SetField(businessunit.FieldFreeTrial, field.TypeBool, value)
	}
	if buuo.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessunit.PrevTable,
			Columns: []string{businessunit.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buuo.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessunit.PrevTable,
			Columns: []string{businessunit.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buuo.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   businessunit.NextTable,
			Columns: []string{businessunit.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buuo.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   businessunit.NextTable,
			Columns: []string{businessunit.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buuo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessunit.OrganizationsTable,
			Columns: []string{businessunit.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buuo.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !buuo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessunit.OrganizationsTable,
			Columns: []string{businessunit.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buuo.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessunit.OrganizationsTable,
			Columns: []string{businessunit.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BusinessUnit{config: buuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buuo.mutation.done = true
	return _node, nil
}
