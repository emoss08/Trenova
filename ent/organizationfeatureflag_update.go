// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/organizationfeatureflag"
	"github.com/emoss08/trenova/ent/predicate"
)

// OrganizationFeatureFlagUpdate is the builder for updating OrganizationFeatureFlag entities.
type OrganizationFeatureFlagUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationFeatureFlagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationFeatureFlagUpdate builder.
func (offu *OrganizationFeatureFlagUpdate) Where(ps ...predicate.OrganizationFeatureFlag) *OrganizationFeatureFlagUpdate {
	offu.mutation.Where(ps...)
	return offu
}

// SetUpdatedAt sets the "updated_at" field.
func (offu *OrganizationFeatureFlagUpdate) SetUpdatedAt(t time.Time) *OrganizationFeatureFlagUpdate {
	offu.mutation.SetUpdatedAt(t)
	return offu
}

// SetIsEnabled sets the "is_enabled" field.
func (offu *OrganizationFeatureFlagUpdate) SetIsEnabled(b bool) *OrganizationFeatureFlagUpdate {
	offu.mutation.SetIsEnabled(b)
	return offu
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (offu *OrganizationFeatureFlagUpdate) SetNillableIsEnabled(b *bool) *OrganizationFeatureFlagUpdate {
	if b != nil {
		offu.SetIsEnabled(*b)
	}
	return offu
}

// Mutation returns the OrganizationFeatureFlagMutation object of the builder.
func (offu *OrganizationFeatureFlagUpdate) Mutation() *OrganizationFeatureFlagMutation {
	return offu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (offu *OrganizationFeatureFlagUpdate) Save(ctx context.Context) (int, error) {
	offu.defaults()
	return withHooks(ctx, offu.sqlSave, offu.mutation, offu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (offu *OrganizationFeatureFlagUpdate) SaveX(ctx context.Context) int {
	affected, err := offu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (offu *OrganizationFeatureFlagUpdate) Exec(ctx context.Context) error {
	_, err := offu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (offu *OrganizationFeatureFlagUpdate) ExecX(ctx context.Context) {
	if err := offu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (offu *OrganizationFeatureFlagUpdate) defaults() {
	if _, ok := offu.mutation.UpdatedAt(); !ok {
		v := organizationfeatureflag.UpdateDefaultUpdatedAt()
		offu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (offu *OrganizationFeatureFlagUpdate) check() error {
	if _, ok := offu.mutation.FeatureFlagID(); offu.mutation.FeatureFlagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationFeatureFlag.feature_flag"`)
	}
	if _, ok := offu.mutation.OrganizationID(); offu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationFeatureFlag.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (offu *OrganizationFeatureFlagUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationFeatureFlagUpdate {
	offu.modifiers = append(offu.modifiers, modifiers...)
	return offu
}

func (offu *OrganizationFeatureFlagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := offu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationfeatureflag.Table, organizationfeatureflag.Columns, sqlgraph.NewFieldSpec(organizationfeatureflag.FieldID, field.TypeUUID))
	if ps := offu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := offu.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationfeatureflag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := offu.mutation.IsEnabled(); ok {
		_spec.SetField(organizationfeatureflag.FieldIsEnabled, field.TypeBool, value)
	}
	_spec.AddModifiers(offu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, offu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationfeatureflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	offu.mutation.done = true
	return n, nil
}

// OrganizationFeatureFlagUpdateOne is the builder for updating a single OrganizationFeatureFlag entity.
type OrganizationFeatureFlagUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationFeatureFlagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (offuo *OrganizationFeatureFlagUpdateOne) SetUpdatedAt(t time.Time) *OrganizationFeatureFlagUpdateOne {
	offuo.mutation.SetUpdatedAt(t)
	return offuo
}

// SetIsEnabled sets the "is_enabled" field.
func (offuo *OrganizationFeatureFlagUpdateOne) SetIsEnabled(b bool) *OrganizationFeatureFlagUpdateOne {
	offuo.mutation.SetIsEnabled(b)
	return offuo
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (offuo *OrganizationFeatureFlagUpdateOne) SetNillableIsEnabled(b *bool) *OrganizationFeatureFlagUpdateOne {
	if b != nil {
		offuo.SetIsEnabled(*b)
	}
	return offuo
}

// Mutation returns the OrganizationFeatureFlagMutation object of the builder.
func (offuo *OrganizationFeatureFlagUpdateOne) Mutation() *OrganizationFeatureFlagMutation {
	return offuo.mutation
}

// Where appends a list predicates to the OrganizationFeatureFlagUpdate builder.
func (offuo *OrganizationFeatureFlagUpdateOne) Where(ps ...predicate.OrganizationFeatureFlag) *OrganizationFeatureFlagUpdateOne {
	offuo.mutation.Where(ps...)
	return offuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (offuo *OrganizationFeatureFlagUpdateOne) Select(field string, fields ...string) *OrganizationFeatureFlagUpdateOne {
	offuo.fields = append([]string{field}, fields...)
	return offuo
}

// Save executes the query and returns the updated OrganizationFeatureFlag entity.
func (offuo *OrganizationFeatureFlagUpdateOne) Save(ctx context.Context) (*OrganizationFeatureFlag, error) {
	offuo.defaults()
	return withHooks(ctx, offuo.sqlSave, offuo.mutation, offuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (offuo *OrganizationFeatureFlagUpdateOne) SaveX(ctx context.Context) *OrganizationFeatureFlag {
	node, err := offuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (offuo *OrganizationFeatureFlagUpdateOne) Exec(ctx context.Context) error {
	_, err := offuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (offuo *OrganizationFeatureFlagUpdateOne) ExecX(ctx context.Context) {
	if err := offuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (offuo *OrganizationFeatureFlagUpdateOne) defaults() {
	if _, ok := offuo.mutation.UpdatedAt(); !ok {
		v := organizationfeatureflag.UpdateDefaultUpdatedAt()
		offuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (offuo *OrganizationFeatureFlagUpdateOne) check() error {
	if _, ok := offuo.mutation.FeatureFlagID(); offuo.mutation.FeatureFlagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationFeatureFlag.feature_flag"`)
	}
	if _, ok := offuo.mutation.OrganizationID(); offuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationFeatureFlag.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (offuo *OrganizationFeatureFlagUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationFeatureFlagUpdateOne {
	offuo.modifiers = append(offuo.modifiers, modifiers...)
	return offuo
}

func (offuo *OrganizationFeatureFlagUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationFeatureFlag, err error) {
	if err := offuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationfeatureflag.Table, organizationfeatureflag.Columns, sqlgraph.NewFieldSpec(organizationfeatureflag.FieldID, field.TypeUUID))
	id, ok := offuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrganizationFeatureFlag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := offuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationfeatureflag.FieldID)
		for _, f := range fields {
			if !organizationfeatureflag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationfeatureflag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := offuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := offuo.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationfeatureflag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := offuo.mutation.IsEnabled(); ok {
		_spec.SetField(organizationfeatureflag.FieldIsEnabled, field.TypeBool, value)
	}
	_spec.AddModifiers(offuo.modifiers...)
	_node = &OrganizationFeatureFlag{config: offuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, offuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationfeatureflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	offuo.mutation.done = true
	return _node, nil
}
