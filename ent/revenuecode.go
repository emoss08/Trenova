// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/revenuecode"
	"github.com/google/uuid"
)

// RevenueCode is the model entity for the RevenueCode schema.
type RevenueCode struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Status holds the value of the "status" field.
	Status revenuecode.Status `json:"status" validate:"required,oneof=A I"`
	// Code holds the value of the "code" field.
	Code string `json:"code" validate:"required,max=4"`
	// Description holds the value of the "description" field.
	Description string `json:"description" validate:"required,max=100"`
	// ExpenseAccountID holds the value of the "expense_account_id" field.
	ExpenseAccountID *uuid.UUID `json:"expenseAccountId" validate:"omitempty"`
	// RevenueAccountID holds the value of the "revenue_account_id" field.
	RevenueAccountID *uuid.UUID `json:"revenueAccountId" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RevenueCodeQuery when eager-loading is set.
	Edges        RevenueCodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RevenueCodeEdges holds the relations/edges for other nodes in the graph.
type RevenueCodeEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// ExpenseAccount holds the value of the expense_account edge.
	ExpenseAccount *GeneralLedgerAccount `json:"expenseAccount"`
	// RevenueAccount holds the value of the revenue_account edge.
	RevenueAccount *GeneralLedgerAccount `json:"revenueAccount"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RevenueCodeEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RevenueCodeEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ExpenseAccountOrErr returns the ExpenseAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RevenueCodeEdges) ExpenseAccountOrErr() (*GeneralLedgerAccount, error) {
	if e.ExpenseAccount != nil {
		return e.ExpenseAccount, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: generalledgeraccount.Label}
	}
	return nil, &NotLoadedError{edge: "expense_account"}
}

// RevenueAccountOrErr returns the RevenueAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RevenueCodeEdges) RevenueAccountOrErr() (*GeneralLedgerAccount, error) {
	if e.RevenueAccount != nil {
		return e.RevenueAccount, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: generalledgeraccount.Label}
	}
	return nil, &NotLoadedError{edge: "revenue_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RevenueCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case revenuecode.FieldExpenseAccountID, revenuecode.FieldRevenueAccountID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case revenuecode.FieldStatus, revenuecode.FieldCode, revenuecode.FieldDescription:
			values[i] = new(sql.NullString)
		case revenuecode.FieldCreatedAt, revenuecode.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case revenuecode.FieldID, revenuecode.FieldBusinessUnitID, revenuecode.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RevenueCode fields.
func (rc *RevenueCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case revenuecode.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rc.ID = *value
			}
		case revenuecode.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				rc.BusinessUnitID = *value
			}
		case revenuecode.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				rc.OrganizationID = *value
			}
		case revenuecode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rc.CreatedAt = value.Time
			}
		case revenuecode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rc.UpdatedAt = value.Time
			}
		case revenuecode.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rc.Status = revenuecode.Status(value.String)
			}
		case revenuecode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				rc.Code = value.String
			}
		case revenuecode.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rc.Description = value.String
			}
		case revenuecode.FieldExpenseAccountID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field expense_account_id", values[i])
			} else if value.Valid {
				rc.ExpenseAccountID = new(uuid.UUID)
				*rc.ExpenseAccountID = *value.S.(*uuid.UUID)
			}
		case revenuecode.FieldRevenueAccountID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field revenue_account_id", values[i])
			} else if value.Valid {
				rc.RevenueAccountID = new(uuid.UUID)
				*rc.RevenueAccountID = *value.S.(*uuid.UUID)
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RevenueCode.
// This includes values selected through modifiers, order, etc.
func (rc *RevenueCode) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the RevenueCode entity.
func (rc *RevenueCode) QueryBusinessUnit() *BusinessUnitQuery {
	return NewRevenueCodeClient(rc.config).QueryBusinessUnit(rc)
}

// QueryOrganization queries the "organization" edge of the RevenueCode entity.
func (rc *RevenueCode) QueryOrganization() *OrganizationQuery {
	return NewRevenueCodeClient(rc.config).QueryOrganization(rc)
}

// QueryExpenseAccount queries the "expense_account" edge of the RevenueCode entity.
func (rc *RevenueCode) QueryExpenseAccount() *GeneralLedgerAccountQuery {
	return NewRevenueCodeClient(rc.config).QueryExpenseAccount(rc)
}

// QueryRevenueAccount queries the "revenue_account" edge of the RevenueCode entity.
func (rc *RevenueCode) QueryRevenueAccount() *GeneralLedgerAccountQuery {
	return NewRevenueCodeClient(rc.config).QueryRevenueAccount(rc)
}

// Update returns a builder for updating this RevenueCode.
// Note that you need to call RevenueCode.Unwrap() before calling this method if this RevenueCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RevenueCode) Update() *RevenueCodeUpdateOne {
	return NewRevenueCodeClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the RevenueCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RevenueCode) Unwrap() *RevenueCode {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RevenueCode is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RevenueCode) String() string {
	var builder strings.Builder
	builder.WriteString("RevenueCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", rc.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", rc.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rc.Status))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(rc.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rc.Description)
	builder.WriteString(", ")
	if v := rc.ExpenseAccountID; v != nil {
		builder.WriteString("expense_account_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := rc.RevenueAccountID; v != nil {
		builder.WriteString("revenue_account_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// RevenueCodes is a parsable slice of RevenueCode.
type RevenueCodes []*RevenueCode
