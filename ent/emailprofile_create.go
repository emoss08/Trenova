// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/emailprofile"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// EmailProfileCreate is the builder for creating a EmailProfile entity.
type EmailProfileCreate struct {
	config
	mutation *EmailProfileMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (epc *EmailProfileCreate) SetBusinessUnitID(u uuid.UUID) *EmailProfileCreate {
	epc.mutation.SetBusinessUnitID(u)
	return epc
}

// SetOrganizationID sets the "organization_id" field.
func (epc *EmailProfileCreate) SetOrganizationID(u uuid.UUID) *EmailProfileCreate {
	epc.mutation.SetOrganizationID(u)
	return epc
}

// SetCreatedAt sets the "created_at" field.
func (epc *EmailProfileCreate) SetCreatedAt(t time.Time) *EmailProfileCreate {
	epc.mutation.SetCreatedAt(t)
	return epc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (epc *EmailProfileCreate) SetNillableCreatedAt(t *time.Time) *EmailProfileCreate {
	if t != nil {
		epc.SetCreatedAt(*t)
	}
	return epc
}

// SetUpdatedAt sets the "updated_at" field.
func (epc *EmailProfileCreate) SetUpdatedAt(t time.Time) *EmailProfileCreate {
	epc.mutation.SetUpdatedAt(t)
	return epc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (epc *EmailProfileCreate) SetNillableUpdatedAt(t *time.Time) *EmailProfileCreate {
	if t != nil {
		epc.SetUpdatedAt(*t)
	}
	return epc
}

// SetName sets the "name" field.
func (epc *EmailProfileCreate) SetName(s string) *EmailProfileCreate {
	epc.mutation.SetName(s)
	return epc
}

// SetEmail sets the "email" field.
func (epc *EmailProfileCreate) SetEmail(s string) *EmailProfileCreate {
	epc.mutation.SetEmail(s)
	return epc
}

// SetProtocol sets the "protocol" field.
func (epc *EmailProfileCreate) SetProtocol(e emailprofile.Protocol) *EmailProfileCreate {
	epc.mutation.SetProtocol(e)
	return epc
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (epc *EmailProfileCreate) SetNillableProtocol(e *emailprofile.Protocol) *EmailProfileCreate {
	if e != nil {
		epc.SetProtocol(*e)
	}
	return epc
}

// SetHost sets the "host" field.
func (epc *EmailProfileCreate) SetHost(s string) *EmailProfileCreate {
	epc.mutation.SetHost(s)
	return epc
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (epc *EmailProfileCreate) SetNillableHost(s *string) *EmailProfileCreate {
	if s != nil {
		epc.SetHost(*s)
	}
	return epc
}

// SetPort sets the "port" field.
func (epc *EmailProfileCreate) SetPort(i int) *EmailProfileCreate {
	epc.mutation.SetPort(i)
	return epc
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (epc *EmailProfileCreate) SetNillablePort(i *int) *EmailProfileCreate {
	if i != nil {
		epc.SetPort(*i)
	}
	return epc
}

// SetUsername sets the "username" field.
func (epc *EmailProfileCreate) SetUsername(s string) *EmailProfileCreate {
	epc.mutation.SetUsername(s)
	return epc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (epc *EmailProfileCreate) SetNillableUsername(s *string) *EmailProfileCreate {
	if s != nil {
		epc.SetUsername(*s)
	}
	return epc
}

// SetPassword sets the "password" field.
func (epc *EmailProfileCreate) SetPassword(s string) *EmailProfileCreate {
	epc.mutation.SetPassword(s)
	return epc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (epc *EmailProfileCreate) SetNillablePassword(s *string) *EmailProfileCreate {
	if s != nil {
		epc.SetPassword(*s)
	}
	return epc
}

// SetIsDefault sets the "is_default" field.
func (epc *EmailProfileCreate) SetIsDefault(b bool) *EmailProfileCreate {
	epc.mutation.SetIsDefault(b)
	return epc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (epc *EmailProfileCreate) SetNillableIsDefault(b *bool) *EmailProfileCreate {
	if b != nil {
		epc.SetIsDefault(*b)
	}
	return epc
}

// SetID sets the "id" field.
func (epc *EmailProfileCreate) SetID(u uuid.UUID) *EmailProfileCreate {
	epc.mutation.SetID(u)
	return epc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (epc *EmailProfileCreate) SetNillableID(u *uuid.UUID) *EmailProfileCreate {
	if u != nil {
		epc.SetID(*u)
	}
	return epc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (epc *EmailProfileCreate) SetBusinessUnit(b *BusinessUnit) *EmailProfileCreate {
	return epc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (epc *EmailProfileCreate) SetOrganization(o *Organization) *EmailProfileCreate {
	return epc.SetOrganizationID(o.ID)
}

// Mutation returns the EmailProfileMutation object of the builder.
func (epc *EmailProfileCreate) Mutation() *EmailProfileMutation {
	return epc.mutation
}

// Save creates the EmailProfile in the database.
func (epc *EmailProfileCreate) Save(ctx context.Context) (*EmailProfile, error) {
	if err := epc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epc.sqlSave, epc.mutation, epc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epc *EmailProfileCreate) SaveX(ctx context.Context) *EmailProfile {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epc *EmailProfileCreate) Exec(ctx context.Context) error {
	_, err := epc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epc *EmailProfileCreate) ExecX(ctx context.Context) {
	if err := epc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epc *EmailProfileCreate) defaults() error {
	if _, ok := epc.mutation.CreatedAt(); !ok {
		if emailprofile.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailprofile.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := emailprofile.DefaultCreatedAt()
		epc.mutation.SetCreatedAt(v)
	}
	if _, ok := epc.mutation.UpdatedAt(); !ok {
		if emailprofile.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailprofile.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := emailprofile.DefaultUpdatedAt()
		epc.mutation.SetUpdatedAt(v)
	}
	if _, ok := epc.mutation.IsDefault(); !ok {
		v := emailprofile.DefaultIsDefault
		epc.mutation.SetIsDefault(v)
	}
	if _, ok := epc.mutation.ID(); !ok {
		if emailprofile.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized emailprofile.DefaultID (forgotten import ent/runtime?)")
		}
		v := emailprofile.DefaultID()
		epc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epc *EmailProfileCreate) check() error {
	if _, ok := epc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "EmailProfile.business_unit_id"`)}
	}
	if _, ok := epc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "EmailProfile.organization_id"`)}
	}
	if _, ok := epc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EmailProfile.created_at"`)}
	}
	if _, ok := epc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EmailProfile.updated_at"`)}
	}
	if _, ok := epc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EmailProfile.name"`)}
	}
	if v, ok := epc.mutation.Name(); ok {
		if err := emailprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailProfile.name": %w`, err)}
		}
	}
	if _, ok := epc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "EmailProfile.email"`)}
	}
	if v, ok := epc.mutation.Email(); ok {
		if err := emailprofile.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EmailProfile.email": %w`, err)}
		}
	}
	if v, ok := epc.mutation.Protocol(); ok {
		if err := emailprofile.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`ent: validator failed for field "EmailProfile.protocol": %w`, err)}
		}
	}
	if v, ok := epc.mutation.Host(); ok {
		if err := emailprofile.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "EmailProfile.host": %w`, err)}
		}
	}
	if v, ok := epc.mutation.Username(); ok {
		if err := emailprofile.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "EmailProfile.username": %w`, err)}
		}
	}
	if v, ok := epc.mutation.Password(); ok {
		if err := emailprofile.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "EmailProfile.password": %w`, err)}
		}
	}
	if _, ok := epc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "EmailProfile.is_default"`)}
	}
	if _, ok := epc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "EmailProfile.business_unit"`)}
	}
	if _, ok := epc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "EmailProfile.organization"`)}
	}
	return nil
}

func (epc *EmailProfileCreate) sqlSave(ctx context.Context) (*EmailProfile, error) {
	if err := epc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	epc.mutation.id = &_node.ID
	epc.mutation.done = true
	return _node, nil
}

func (epc *EmailProfileCreate) createSpec() (*EmailProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailProfile{config: epc.config}
		_spec = sqlgraph.NewCreateSpec(emailprofile.Table, sqlgraph.NewFieldSpec(emailprofile.FieldID, field.TypeUUID))
	)
	if id, ok := epc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := epc.mutation.CreatedAt(); ok {
		_spec.SetField(emailprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := epc.mutation.UpdatedAt(); ok {
		_spec.SetField(emailprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := epc.mutation.Name(); ok {
		_spec.SetField(emailprofile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := epc.mutation.Email(); ok {
		_spec.SetField(emailprofile.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := epc.mutation.Protocol(); ok {
		_spec.SetField(emailprofile.FieldProtocol, field.TypeEnum, value)
		_node.Protocol = value
	}
	if value, ok := epc.mutation.Host(); ok {
		_spec.SetField(emailprofile.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := epc.mutation.Port(); ok {
		_spec.SetField(emailprofile.FieldPort, field.TypeInt, value)
		_node.Port = value
	}
	if value, ok := epc.mutation.Username(); ok {
		_spec.SetField(emailprofile.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := epc.mutation.Password(); ok {
		_spec.SetField(emailprofile.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := epc.mutation.IsDefault(); ok {
		_spec.SetField(emailprofile.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if nodes := epc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailprofile.BusinessUnitTable,
			Columns: []string{emailprofile.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailprofile.OrganizationTable,
			Columns: []string{emailprofile.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmailProfileCreateBulk is the builder for creating many EmailProfile entities in bulk.
type EmailProfileCreateBulk struct {
	config
	err      error
	builders []*EmailProfileCreate
}

// Save creates the EmailProfile entities in the database.
func (epcb *EmailProfileCreateBulk) Save(ctx context.Context) ([]*EmailProfile, error) {
	if epcb.err != nil {
		return nil, epcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*EmailProfile, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epcb *EmailProfileCreateBulk) SaveX(ctx context.Context) []*EmailProfile {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epcb *EmailProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := epcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcb *EmailProfileCreateBulk) ExecX(ctx context.Context) {
	if err := epcb.Exec(ctx); err != nil {
		panic(err)
	}
}
