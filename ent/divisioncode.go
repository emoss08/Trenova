// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/divisioncode"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/google/uuid"
)

// DivisionCode is the model entity for the DivisionCode schema.
type DivisionCode struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// Status holds the value of the "status" field.
	Status divisioncode.Status `json:"status" validate:"required,oneof=A I"`
	// Code holds the value of the "code" field.
	Code string `json:"code" validate:"required,max=4"`
	// Description holds the value of the "description" field.
	Description string `json:"description" validate:"required,max=100"`
	// CashAccountID holds the value of the "cash_account_id" field.
	CashAccountID *uuid.UUID `json:"cashAccountId" validate:"omitempty"`
	// ApAccountID holds the value of the "ap_account_id" field.
	ApAccountID *uuid.UUID `json:"apAccountId" validate:"omitempty"`
	// ExpenseAccountID holds the value of the "expense_account_id" field.
	ExpenseAccountID *uuid.UUID `json:"expenseAccountId" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DivisionCodeQuery when eager-loading is set.
	Edges        DivisionCodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DivisionCodeEdges holds the relations/edges for other nodes in the graph.
type DivisionCodeEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// CashAccount holds the value of the cash_account edge.
	CashAccount *GeneralLedgerAccount `json:"cashAccount"`
	// ApAccount holds the value of the ap_account edge.
	ApAccount *GeneralLedgerAccount `json:"apAccount"`
	// ExpenseAccount holds the value of the expense_account edge.
	ExpenseAccount *GeneralLedgerAccount `json:"expenseAccount"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DivisionCodeEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DivisionCodeEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// CashAccountOrErr returns the CashAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DivisionCodeEdges) CashAccountOrErr() (*GeneralLedgerAccount, error) {
	if e.CashAccount != nil {
		return e.CashAccount, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: generalledgeraccount.Label}
	}
	return nil, &NotLoadedError{edge: "cash_account"}
}

// ApAccountOrErr returns the ApAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DivisionCodeEdges) ApAccountOrErr() (*GeneralLedgerAccount, error) {
	if e.ApAccount != nil {
		return e.ApAccount, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: generalledgeraccount.Label}
	}
	return nil, &NotLoadedError{edge: "ap_account"}
}

// ExpenseAccountOrErr returns the ExpenseAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DivisionCodeEdges) ExpenseAccountOrErr() (*GeneralLedgerAccount, error) {
	if e.ExpenseAccount != nil {
		return e.ExpenseAccount, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: generalledgeraccount.Label}
	}
	return nil, &NotLoadedError{edge: "expense_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DivisionCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case divisioncode.FieldCashAccountID, divisioncode.FieldApAccountID, divisioncode.FieldExpenseAccountID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case divisioncode.FieldVersion:
			values[i] = new(sql.NullInt64)
		case divisioncode.FieldStatus, divisioncode.FieldCode, divisioncode.FieldDescription:
			values[i] = new(sql.NullString)
		case divisioncode.FieldCreatedAt, divisioncode.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case divisioncode.FieldID, divisioncode.FieldBusinessUnitID, divisioncode.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DivisionCode fields.
func (dc *DivisionCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case divisioncode.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dc.ID = *value
			}
		case divisioncode.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				dc.BusinessUnitID = *value
			}
		case divisioncode.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				dc.OrganizationID = *value
			}
		case divisioncode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dc.CreatedAt = value.Time
			}
		case divisioncode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dc.UpdatedAt = value.Time
			}
		case divisioncode.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				dc.Version = int(value.Int64)
			}
		case divisioncode.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				dc.Status = divisioncode.Status(value.String)
			}
		case divisioncode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				dc.Code = value.String
			}
		case divisioncode.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dc.Description = value.String
			}
		case divisioncode.FieldCashAccountID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field cash_account_id", values[i])
			} else if value.Valid {
				dc.CashAccountID = new(uuid.UUID)
				*dc.CashAccountID = *value.S.(*uuid.UUID)
			}
		case divisioncode.FieldApAccountID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field ap_account_id", values[i])
			} else if value.Valid {
				dc.ApAccountID = new(uuid.UUID)
				*dc.ApAccountID = *value.S.(*uuid.UUID)
			}
		case divisioncode.FieldExpenseAccountID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field expense_account_id", values[i])
			} else if value.Valid {
				dc.ExpenseAccountID = new(uuid.UUID)
				*dc.ExpenseAccountID = *value.S.(*uuid.UUID)
			}
		default:
			dc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DivisionCode.
// This includes values selected through modifiers, order, etc.
func (dc *DivisionCode) Value(name string) (ent.Value, error) {
	return dc.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the DivisionCode entity.
func (dc *DivisionCode) QueryBusinessUnit() *BusinessUnitQuery {
	return NewDivisionCodeClient(dc.config).QueryBusinessUnit(dc)
}

// QueryOrganization queries the "organization" edge of the DivisionCode entity.
func (dc *DivisionCode) QueryOrganization() *OrganizationQuery {
	return NewDivisionCodeClient(dc.config).QueryOrganization(dc)
}

// QueryCashAccount queries the "cash_account" edge of the DivisionCode entity.
func (dc *DivisionCode) QueryCashAccount() *GeneralLedgerAccountQuery {
	return NewDivisionCodeClient(dc.config).QueryCashAccount(dc)
}

// QueryApAccount queries the "ap_account" edge of the DivisionCode entity.
func (dc *DivisionCode) QueryApAccount() *GeneralLedgerAccountQuery {
	return NewDivisionCodeClient(dc.config).QueryApAccount(dc)
}

// QueryExpenseAccount queries the "expense_account" edge of the DivisionCode entity.
func (dc *DivisionCode) QueryExpenseAccount() *GeneralLedgerAccountQuery {
	return NewDivisionCodeClient(dc.config).QueryExpenseAccount(dc)
}

// Update returns a builder for updating this DivisionCode.
// Note that you need to call DivisionCode.Unwrap() before calling this method if this DivisionCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DivisionCode) Update() *DivisionCodeUpdateOne {
	return NewDivisionCodeClient(dc.config).UpdateOne(dc)
}

// Unwrap unwraps the DivisionCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DivisionCode) Unwrap() *DivisionCode {
	_tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DivisionCode is not a transactional entity")
	}
	dc.config.driver = _tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DivisionCode) String() string {
	var builder strings.Builder
	builder.WriteString("DivisionCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dc.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", dc.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", dc.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", dc.Version))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", dc.Status))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(dc.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(dc.Description)
	builder.WriteString(", ")
	if v := dc.CashAccountID; v != nil {
		builder.WriteString("cash_account_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dc.ApAccountID; v != nil {
		builder.WriteString("ap_account_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dc.ExpenseAccountID; v != nil {
		builder.WriteString("expense_account_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// DivisionCodes is a parsable slice of DivisionCode.
type DivisionCodes []*DivisionCode
