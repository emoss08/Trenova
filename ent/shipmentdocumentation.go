// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/documentclassification"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/shipment"
	"github.com/emoss08/trenova/ent/shipmentdocumentation"
	"github.com/google/uuid"
)

// ShipmentDocumentation is the model entity for the ShipmentDocumentation schema.
type ShipmentDocumentation struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Version holds the value of the "version" field.
	Version int `json:"version" validate:"omitempty"`
	// ShipmentID holds the value of the "shipment_id" field.
	ShipmentID uuid.UUID `json:"shipmentId" validate:"omitempty"`
	// DocumentURL holds the value of the "document_url" field.
	DocumentURL string `json:"documentUrl" validate:"required"`
	// DocumentClassificationID holds the value of the "document_classification_id" field.
	DocumentClassificationID uuid.UUID `json:"documentClassificationId" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentDocumentationQuery when eager-loading is set.
	Edges        ShipmentDocumentationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShipmentDocumentationEdges holds the relations/edges for other nodes in the graph.
type ShipmentDocumentationEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// DocumentClassification holds the value of the document_classification edge.
	DocumentClassification *DocumentClassification `json:"document_classification,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentDocumentationEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentDocumentationEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentDocumentationEdges) ShipmentOrErr() (*Shipment, error) {
	if e.Shipment != nil {
		return e.Shipment, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: shipment.Label}
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// DocumentClassificationOrErr returns the DocumentClassification value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentDocumentationEdges) DocumentClassificationOrErr() (*DocumentClassification, error) {
	if e.DocumentClassification != nil {
		return e.DocumentClassification, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: documentclassification.Label}
	}
	return nil, &NotLoadedError{edge: "document_classification"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentDocumentation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentdocumentation.FieldVersion:
			values[i] = new(sql.NullInt64)
		case shipmentdocumentation.FieldDocumentURL:
			values[i] = new(sql.NullString)
		case shipmentdocumentation.FieldCreatedAt, shipmentdocumentation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case shipmentdocumentation.FieldID, shipmentdocumentation.FieldBusinessUnitID, shipmentdocumentation.FieldOrganizationID, shipmentdocumentation.FieldShipmentID, shipmentdocumentation.FieldDocumentClassificationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentDocumentation fields.
func (sd *ShipmentDocumentation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentdocumentation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sd.ID = *value
			}
		case shipmentdocumentation.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				sd.BusinessUnitID = *value
			}
		case shipmentdocumentation.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				sd.OrganizationID = *value
			}
		case shipmentdocumentation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sd.CreatedAt = value.Time
			}
		case shipmentdocumentation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sd.UpdatedAt = value.Time
			}
		case shipmentdocumentation.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				sd.Version = int(value.Int64)
			}
		case shipmentdocumentation.FieldShipmentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_id", values[i])
			} else if value != nil {
				sd.ShipmentID = *value
			}
		case shipmentdocumentation.FieldDocumentURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_url", values[i])
			} else if value.Valid {
				sd.DocumentURL = value.String
			}
		case shipmentdocumentation.FieldDocumentClassificationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field document_classification_id", values[i])
			} else if value != nil {
				sd.DocumentClassificationID = *value
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShipmentDocumentation.
// This includes values selected through modifiers, order, etc.
func (sd *ShipmentDocumentation) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the ShipmentDocumentation entity.
func (sd *ShipmentDocumentation) QueryBusinessUnit() *BusinessUnitQuery {
	return NewShipmentDocumentationClient(sd.config).QueryBusinessUnit(sd)
}

// QueryOrganization queries the "organization" edge of the ShipmentDocumentation entity.
func (sd *ShipmentDocumentation) QueryOrganization() *OrganizationQuery {
	return NewShipmentDocumentationClient(sd.config).QueryOrganization(sd)
}

// QueryShipment queries the "shipment" edge of the ShipmentDocumentation entity.
func (sd *ShipmentDocumentation) QueryShipment() *ShipmentQuery {
	return NewShipmentDocumentationClient(sd.config).QueryShipment(sd)
}

// QueryDocumentClassification queries the "document_classification" edge of the ShipmentDocumentation entity.
func (sd *ShipmentDocumentation) QueryDocumentClassification() *DocumentClassificationQuery {
	return NewShipmentDocumentationClient(sd.config).QueryDocumentClassification(sd)
}

// Update returns a builder for updating this ShipmentDocumentation.
// Note that you need to call ShipmentDocumentation.Unwrap() before calling this method if this ShipmentDocumentation
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *ShipmentDocumentation) Update() *ShipmentDocumentationUpdateOne {
	return NewShipmentDocumentationClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the ShipmentDocumentation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *ShipmentDocumentation) Unwrap() *ShipmentDocumentation {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentDocumentation is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *ShipmentDocumentation) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentDocumentation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", sd.Version))
	builder.WriteString(", ")
	builder.WriteString("shipment_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.ShipmentID))
	builder.WriteString(", ")
	builder.WriteString("document_url=")
	builder.WriteString(sd.DocumentURL)
	builder.WriteString(", ")
	builder.WriteString("document_classification_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.DocumentClassificationID))
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentDocumentations is a parsable slice of ShipmentDocumentation.
type ShipmentDocumentations []*ShipmentDocumentation
