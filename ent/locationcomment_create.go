// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/commenttype"
	"github.com/emoss08/trenova/ent/location"
	"github.com/emoss08/trenova/ent/locationcomment"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/user"
	"github.com/google/uuid"
)

// LocationCommentCreate is the builder for creating a LocationComment entity.
type LocationCommentCreate struct {
	config
	mutation *LocationCommentMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (lcc *LocationCommentCreate) SetBusinessUnitID(u uuid.UUID) *LocationCommentCreate {
	lcc.mutation.SetBusinessUnitID(u)
	return lcc
}

// SetOrganizationID sets the "organization_id" field.
func (lcc *LocationCommentCreate) SetOrganizationID(u uuid.UUID) *LocationCommentCreate {
	lcc.mutation.SetOrganizationID(u)
	return lcc
}

// SetCreatedAt sets the "created_at" field.
func (lcc *LocationCommentCreate) SetCreatedAt(t time.Time) *LocationCommentCreate {
	lcc.mutation.SetCreatedAt(t)
	return lcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lcc *LocationCommentCreate) SetNillableCreatedAt(t *time.Time) *LocationCommentCreate {
	if t != nil {
		lcc.SetCreatedAt(*t)
	}
	return lcc
}

// SetUpdatedAt sets the "updated_at" field.
func (lcc *LocationCommentCreate) SetUpdatedAt(t time.Time) *LocationCommentCreate {
	lcc.mutation.SetUpdatedAt(t)
	return lcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lcc *LocationCommentCreate) SetNillableUpdatedAt(t *time.Time) *LocationCommentCreate {
	if t != nil {
		lcc.SetUpdatedAt(*t)
	}
	return lcc
}

// SetVersion sets the "version" field.
func (lcc *LocationCommentCreate) SetVersion(i int) *LocationCommentCreate {
	lcc.mutation.SetVersion(i)
	return lcc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (lcc *LocationCommentCreate) SetNillableVersion(i *int) *LocationCommentCreate {
	if i != nil {
		lcc.SetVersion(*i)
	}
	return lcc
}

// SetLocationID sets the "location_id" field.
func (lcc *LocationCommentCreate) SetLocationID(u uuid.UUID) *LocationCommentCreate {
	lcc.mutation.SetLocationID(u)
	return lcc
}

// SetUserID sets the "user_id" field.
func (lcc *LocationCommentCreate) SetUserID(u uuid.UUID) *LocationCommentCreate {
	lcc.mutation.SetUserID(u)
	return lcc
}

// SetCommentTypeID sets the "comment_type_id" field.
func (lcc *LocationCommentCreate) SetCommentTypeID(u uuid.UUID) *LocationCommentCreate {
	lcc.mutation.SetCommentTypeID(u)
	return lcc
}

// SetComment sets the "comment" field.
func (lcc *LocationCommentCreate) SetComment(s string) *LocationCommentCreate {
	lcc.mutation.SetComment(s)
	return lcc
}

// SetID sets the "id" field.
func (lcc *LocationCommentCreate) SetID(u uuid.UUID) *LocationCommentCreate {
	lcc.mutation.SetID(u)
	return lcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lcc *LocationCommentCreate) SetNillableID(u *uuid.UUID) *LocationCommentCreate {
	if u != nil {
		lcc.SetID(*u)
	}
	return lcc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (lcc *LocationCommentCreate) SetBusinessUnit(b *BusinessUnit) *LocationCommentCreate {
	return lcc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (lcc *LocationCommentCreate) SetOrganization(o *Organization) *LocationCommentCreate {
	return lcc.SetOrganizationID(o.ID)
}

// SetLocation sets the "location" edge to the Location entity.
func (lcc *LocationCommentCreate) SetLocation(l *Location) *LocationCommentCreate {
	return lcc.SetLocationID(l.ID)
}

// SetUser sets the "user" edge to the User entity.
func (lcc *LocationCommentCreate) SetUser(u *User) *LocationCommentCreate {
	return lcc.SetUserID(u.ID)
}

// SetCommentType sets the "comment_type" edge to the CommentType entity.
func (lcc *LocationCommentCreate) SetCommentType(c *CommentType) *LocationCommentCreate {
	return lcc.SetCommentTypeID(c.ID)
}

// Mutation returns the LocationCommentMutation object of the builder.
func (lcc *LocationCommentCreate) Mutation() *LocationCommentMutation {
	return lcc.mutation
}

// Save creates the LocationComment in the database.
func (lcc *LocationCommentCreate) Save(ctx context.Context) (*LocationComment, error) {
	lcc.defaults()
	return withHooks(ctx, lcc.sqlSave, lcc.mutation, lcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lcc *LocationCommentCreate) SaveX(ctx context.Context) *LocationComment {
	v, err := lcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcc *LocationCommentCreate) Exec(ctx context.Context) error {
	_, err := lcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcc *LocationCommentCreate) ExecX(ctx context.Context) {
	if err := lcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcc *LocationCommentCreate) defaults() {
	if _, ok := lcc.mutation.CreatedAt(); !ok {
		v := locationcomment.DefaultCreatedAt()
		lcc.mutation.SetCreatedAt(v)
	}
	if _, ok := lcc.mutation.UpdatedAt(); !ok {
		v := locationcomment.DefaultUpdatedAt()
		lcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lcc.mutation.Version(); !ok {
		v := locationcomment.DefaultVersion
		lcc.mutation.SetVersion(v)
	}
	if _, ok := lcc.mutation.ID(); !ok {
		v := locationcomment.DefaultID()
		lcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcc *LocationCommentCreate) check() error {
	if _, ok := lcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "LocationComment.business_unit_id"`)}
	}
	if _, ok := lcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "LocationComment.organization_id"`)}
	}
	if _, ok := lcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LocationComment.created_at"`)}
	}
	if _, ok := lcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LocationComment.updated_at"`)}
	}
	if _, ok := lcc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "LocationComment.version"`)}
	}
	if _, ok := lcc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location_id", err: errors.New(`ent: missing required field "LocationComment.location_id"`)}
	}
	if _, ok := lcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "LocationComment.user_id"`)}
	}
	if _, ok := lcc.mutation.CommentTypeID(); !ok {
		return &ValidationError{Name: "comment_type_id", err: errors.New(`ent: missing required field "LocationComment.comment_type_id"`)}
	}
	if _, ok := lcc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "LocationComment.comment"`)}
	}
	if v, ok := lcc.mutation.Comment(); ok {
		if err := locationcomment.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "LocationComment.comment": %w`, err)}
		}
	}
	if _, ok := lcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "LocationComment.business_unit"`)}
	}
	if _, ok := lcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "LocationComment.organization"`)}
	}
	if _, ok := lcc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required edge "LocationComment.location"`)}
	}
	if _, ok := lcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "LocationComment.user"`)}
	}
	if _, ok := lcc.mutation.CommentTypeID(); !ok {
		return &ValidationError{Name: "comment_type", err: errors.New(`ent: missing required edge "LocationComment.comment_type"`)}
	}
	return nil
}

func (lcc *LocationCommentCreate) sqlSave(ctx context.Context) (*LocationComment, error) {
	if err := lcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lcc.mutation.id = &_node.ID
	lcc.mutation.done = true
	return _node, nil
}

func (lcc *LocationCommentCreate) createSpec() (*LocationComment, *sqlgraph.CreateSpec) {
	var (
		_node = &LocationComment{config: lcc.config}
		_spec = sqlgraph.NewCreateSpec(locationcomment.Table, sqlgraph.NewFieldSpec(locationcomment.FieldID, field.TypeUUID))
	)
	if id, ok := lcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lcc.mutation.CreatedAt(); ok {
		_spec.SetField(locationcomment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lcc.mutation.UpdatedAt(); ok {
		_spec.SetField(locationcomment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lcc.mutation.Version(); ok {
		_spec.SetField(locationcomment.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := lcc.mutation.Comment(); ok {
		_spec.SetField(locationcomment.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if nodes := lcc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcomment.BusinessUnitTable,
			Columns: []string{locationcomment.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lcc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcomment.OrganizationTable,
			Columns: []string{locationcomment.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lcc.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   locationcomment.LocationTable,
			Columns: []string{locationcomment.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcomment.UserTable,
			Columns: []string{locationcomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lcc.mutation.CommentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   locationcomment.CommentTypeTable,
			Columns: []string{locationcomment.CommentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommentTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LocationCommentCreateBulk is the builder for creating many LocationComment entities in bulk.
type LocationCommentCreateBulk struct {
	config
	err      error
	builders []*LocationCommentCreate
}

// Save creates the LocationComment entities in the database.
func (lccb *LocationCommentCreateBulk) Save(ctx context.Context) ([]*LocationComment, error) {
	if lccb.err != nil {
		return nil, lccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lccb.builders))
	nodes := make([]*LocationComment, len(lccb.builders))
	mutators := make([]Mutator, len(lccb.builders))
	for i := range lccb.builders {
		func(i int, root context.Context) {
			builder := lccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocationCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lccb *LocationCommentCreateBulk) SaveX(ctx context.Context) []*LocationComment {
	v, err := lccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lccb *LocationCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := lccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lccb *LocationCommentCreateBulk) ExecX(ctx context.Context) {
	if err := lccb.Exec(ctx); err != nil {
		panic(err)
	}
}
