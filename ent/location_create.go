// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/location"
	"github.com/emoss08/trenova/ent/locationcategory"
	"github.com/emoss08/trenova/ent/locationcomment"
	"github.com/emoss08/trenova/ent/locationcontact"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/usstate"
	"github.com/google/uuid"
)

// LocationCreate is the builder for creating a Location entity.
type LocationCreate struct {
	config
	mutation *LocationMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (lc *LocationCreate) SetBusinessUnitID(u uuid.UUID) *LocationCreate {
	lc.mutation.SetBusinessUnitID(u)
	return lc
}

// SetOrganizationID sets the "organization_id" field.
func (lc *LocationCreate) SetOrganizationID(u uuid.UUID) *LocationCreate {
	lc.mutation.SetOrganizationID(u)
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LocationCreate) SetCreatedAt(t time.Time) *LocationCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LocationCreate) SetNillableCreatedAt(t *time.Time) *LocationCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LocationCreate) SetUpdatedAt(t time.Time) *LocationCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LocationCreate) SetNillableUpdatedAt(t *time.Time) *LocationCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetVersion sets the "version" field.
func (lc *LocationCreate) SetVersion(i int) *LocationCreate {
	lc.mutation.SetVersion(i)
	return lc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (lc *LocationCreate) SetNillableVersion(i *int) *LocationCreate {
	if i != nil {
		lc.SetVersion(*i)
	}
	return lc
}

// SetStatus sets the "status" field.
func (lc *LocationCreate) SetStatus(l location.Status) *LocationCreate {
	lc.mutation.SetStatus(l)
	return lc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lc *LocationCreate) SetNillableStatus(l *location.Status) *LocationCreate {
	if l != nil {
		lc.SetStatus(*l)
	}
	return lc
}

// SetCode sets the "code" field.
func (lc *LocationCreate) SetCode(s string) *LocationCreate {
	lc.mutation.SetCode(s)
	return lc
}

// SetLocationCategoryID sets the "location_category_id" field.
func (lc *LocationCreate) SetLocationCategoryID(u uuid.UUID) *LocationCreate {
	lc.mutation.SetLocationCategoryID(u)
	return lc
}

// SetNillableLocationCategoryID sets the "location_category_id" field if the given value is not nil.
func (lc *LocationCreate) SetNillableLocationCategoryID(u *uuid.UUID) *LocationCreate {
	if u != nil {
		lc.SetLocationCategoryID(*u)
	}
	return lc
}

// SetName sets the "name" field.
func (lc *LocationCreate) SetName(s string) *LocationCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetDescription sets the "description" field.
func (lc *LocationCreate) SetDescription(s string) *LocationCreate {
	lc.mutation.SetDescription(s)
	return lc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lc *LocationCreate) SetNillableDescription(s *string) *LocationCreate {
	if s != nil {
		lc.SetDescription(*s)
	}
	return lc
}

// SetAddressLine1 sets the "address_line_1" field.
func (lc *LocationCreate) SetAddressLine1(s string) *LocationCreate {
	lc.mutation.SetAddressLine1(s)
	return lc
}

// SetAddressLine2 sets the "address_line_2" field.
func (lc *LocationCreate) SetAddressLine2(s string) *LocationCreate {
	lc.mutation.SetAddressLine2(s)
	return lc
}

// SetNillableAddressLine2 sets the "address_line_2" field if the given value is not nil.
func (lc *LocationCreate) SetNillableAddressLine2(s *string) *LocationCreate {
	if s != nil {
		lc.SetAddressLine2(*s)
	}
	return lc
}

// SetCity sets the "city" field.
func (lc *LocationCreate) SetCity(s string) *LocationCreate {
	lc.mutation.SetCity(s)
	return lc
}

// SetStateID sets the "state_id" field.
func (lc *LocationCreate) SetStateID(u uuid.UUID) *LocationCreate {
	lc.mutation.SetStateID(u)
	return lc
}

// SetPostalCode sets the "postal_code" field.
func (lc *LocationCreate) SetPostalCode(s string) *LocationCreate {
	lc.mutation.SetPostalCode(s)
	return lc
}

// SetLongitude sets the "longitude" field.
func (lc *LocationCreate) SetLongitude(f float64) *LocationCreate {
	lc.mutation.SetLongitude(f)
	return lc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (lc *LocationCreate) SetNillableLongitude(f *float64) *LocationCreate {
	if f != nil {
		lc.SetLongitude(*f)
	}
	return lc
}

// SetLatitude sets the "latitude" field.
func (lc *LocationCreate) SetLatitude(f float64) *LocationCreate {
	lc.mutation.SetLatitude(f)
	return lc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (lc *LocationCreate) SetNillableLatitude(f *float64) *LocationCreate {
	if f != nil {
		lc.SetLatitude(*f)
	}
	return lc
}

// SetPlaceID sets the "place_id" field.
func (lc *LocationCreate) SetPlaceID(s string) *LocationCreate {
	lc.mutation.SetPlaceID(s)
	return lc
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (lc *LocationCreate) SetNillablePlaceID(s *string) *LocationCreate {
	if s != nil {
		lc.SetPlaceID(*s)
	}
	return lc
}

// SetIsGeocoded sets the "is_geocoded" field.
func (lc *LocationCreate) SetIsGeocoded(b bool) *LocationCreate {
	lc.mutation.SetIsGeocoded(b)
	return lc
}

// SetNillableIsGeocoded sets the "is_geocoded" field if the given value is not nil.
func (lc *LocationCreate) SetNillableIsGeocoded(b *bool) *LocationCreate {
	if b != nil {
		lc.SetIsGeocoded(*b)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LocationCreate) SetID(u uuid.UUID) *LocationCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LocationCreate) SetNillableID(u *uuid.UUID) *LocationCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (lc *LocationCreate) SetBusinessUnit(b *BusinessUnit) *LocationCreate {
	return lc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (lc *LocationCreate) SetOrganization(o *Organization) *LocationCreate {
	return lc.SetOrganizationID(o.ID)
}

// SetLocationCategory sets the "location_category" edge to the LocationCategory entity.
func (lc *LocationCreate) SetLocationCategory(l *LocationCategory) *LocationCreate {
	return lc.SetLocationCategoryID(l.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (lc *LocationCreate) SetState(u *UsState) *LocationCreate {
	return lc.SetStateID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the LocationComment entity by IDs.
func (lc *LocationCreate) AddCommentIDs(ids ...uuid.UUID) *LocationCreate {
	lc.mutation.AddCommentIDs(ids...)
	return lc
}

// AddComments adds the "comments" edges to the LocationComment entity.
func (lc *LocationCreate) AddComments(l ...*LocationComment) *LocationCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddCommentIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the LocationContact entity by IDs.
func (lc *LocationCreate) AddContactIDs(ids ...uuid.UUID) *LocationCreate {
	lc.mutation.AddContactIDs(ids...)
	return lc
}

// AddContacts adds the "contacts" edges to the LocationContact entity.
func (lc *LocationCreate) AddContacts(l ...*LocationContact) *LocationCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddContactIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (lc *LocationCreate) Mutation() *LocationMutation {
	return lc.mutation
}

// Save creates the Location in the database.
func (lc *LocationCreate) Save(ctx context.Context) (*Location, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LocationCreate) SaveX(ctx context.Context) *Location {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LocationCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LocationCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LocationCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := location.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := location.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.Version(); !ok {
		v := location.DefaultVersion
		lc.mutation.SetVersion(v)
	}
	if _, ok := lc.mutation.Status(); !ok {
		v := location.DefaultStatus
		lc.mutation.SetStatus(v)
	}
	if _, ok := lc.mutation.IsGeocoded(); !ok {
		v := location.DefaultIsGeocoded
		lc.mutation.SetIsGeocoded(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := location.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LocationCreate) check() error {
	if _, ok := lc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "Location.business_unit_id"`)}
	}
	if _, ok := lc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Location.organization_id"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Location.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Location.updated_at"`)}
	}
	if _, ok := lc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Location.version"`)}
	}
	if _, ok := lc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Location.status"`)}
	}
	if v, ok := lc.mutation.Status(); ok {
		if err := location.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Location.status": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Location.code"`)}
	}
	if v, ok := lc.mutation.Code(); ok {
		if err := location.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Location.code": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Location.name"`)}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := location.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Location.name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.AddressLine1(); !ok {
		return &ValidationError{Name: "address_line_1", err: errors.New(`ent: missing required field "Location.address_line_1"`)}
	}
	if v, ok := lc.mutation.AddressLine1(); ok {
		if err := location.AddressLine1Validator(v); err != nil {
			return &ValidationError{Name: "address_line_1", err: fmt.Errorf(`ent: validator failed for field "Location.address_line_1": %w`, err)}
		}
	}
	if v, ok := lc.mutation.AddressLine2(); ok {
		if err := location.AddressLine2Validator(v); err != nil {
			return &ValidationError{Name: "address_line_2", err: fmt.Errorf(`ent: validator failed for field "Location.address_line_2": %w`, err)}
		}
	}
	if _, ok := lc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Location.city"`)}
	}
	if v, ok := lc.mutation.City(); ok {
		if err := location.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Location.city": %w`, err)}
		}
	}
	if _, ok := lc.mutation.StateID(); !ok {
		return &ValidationError{Name: "state_id", err: errors.New(`ent: missing required field "Location.state_id"`)}
	}
	if _, ok := lc.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "Location.postal_code"`)}
	}
	if v, ok := lc.mutation.PostalCode(); ok {
		if err := location.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Location.postal_code": %w`, err)}
		}
	}
	if v, ok := lc.mutation.PlaceID(); ok {
		if err := location.PlaceIDValidator(v); err != nil {
			return &ValidationError{Name: "place_id", err: fmt.Errorf(`ent: validator failed for field "Location.place_id": %w`, err)}
		}
	}
	if _, ok := lc.mutation.IsGeocoded(); !ok {
		return &ValidationError{Name: "is_geocoded", err: errors.New(`ent: missing required field "Location.is_geocoded"`)}
	}
	if _, ok := lc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "Location.business_unit"`)}
	}
	if _, ok := lc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Location.organization"`)}
	}
	if _, ok := lc.mutation.StateID(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required edge "Location.state"`)}
	}
	return nil
}

func (lc *LocationCreate) sqlSave(ctx context.Context) (*Location, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LocationCreate) createSpec() (*Location, *sqlgraph.CreateSpec) {
	var (
		_node = &Location{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(location.Table, sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(location.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(location.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.Version(); ok {
		_spec.SetField(location.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := lc.mutation.Status(); ok {
		_spec.SetField(location.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lc.mutation.Code(); ok {
		_spec.SetField(location.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.Description(); ok {
		_spec.SetField(location.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lc.mutation.AddressLine1(); ok {
		_spec.SetField(location.FieldAddressLine1, field.TypeString, value)
		_node.AddressLine1 = value
	}
	if value, ok := lc.mutation.AddressLine2(); ok {
		_spec.SetField(location.FieldAddressLine2, field.TypeString, value)
		_node.AddressLine2 = value
	}
	if value, ok := lc.mutation.City(); ok {
		_spec.SetField(location.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := lc.mutation.PostalCode(); ok {
		_spec.SetField(location.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := lc.mutation.Longitude(); ok {
		_spec.SetField(location.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := lc.mutation.Latitude(); ok {
		_spec.SetField(location.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := lc.mutation.PlaceID(); ok {
		_spec.SetField(location.FieldPlaceID, field.TypeString, value)
		_node.PlaceID = value
	}
	if value, ok := lc.mutation.IsGeocoded(); ok {
		_spec.SetField(location.FieldIsGeocoded, field.TypeBool, value)
		_node.IsGeocoded = value
	}
	if nodes := lc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.BusinessUnitTable,
			Columns: []string{location.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.OrganizationTable,
			Columns: []string{location.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.LocationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.LocationCategoryTable,
			Columns: []string{location.LocationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationCategoryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.StateTable,
			Columns: []string{location.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.CommentsTable,
			Columns: []string{location.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.ContactsTable,
			Columns: []string{location.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationcontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LocationCreateBulk is the builder for creating many Location entities in bulk.
type LocationCreateBulk struct {
	config
	err      error
	builders []*LocationCreate
}

// Save creates the Location entities in the database.
func (lcb *LocationCreateBulk) Save(ctx context.Context) ([]*Location, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Location, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LocationCreateBulk) SaveX(ctx context.Context) []*Location {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LocationCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LocationCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
