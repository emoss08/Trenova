// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/commenttype"
	"github.com/emoss08/trenova/ent/shipment"
	"github.com/emoss08/trenova/ent/shipmentcomment"
	"github.com/emoss08/trenova/ent/user"
	"github.com/google/uuid"
)

// ShipmentCommentCreate is the builder for creating a ShipmentComment entity.
type ShipmentCommentCreate struct {
	config
	mutation *ShipmentCommentMutation
	hooks    []Hook
}

// SetShipmentID sets the "shipment_id" field.
func (scc *ShipmentCommentCreate) SetShipmentID(u uuid.UUID) *ShipmentCommentCreate {
	scc.mutation.SetShipmentID(u)
	return scc
}

// SetCommentTypeID sets the "comment_type_id" field.
func (scc *ShipmentCommentCreate) SetCommentTypeID(u uuid.UUID) *ShipmentCommentCreate {
	scc.mutation.SetCommentTypeID(u)
	return scc
}

// SetComment sets the "comment" field.
func (scc *ShipmentCommentCreate) SetComment(s string) *ShipmentCommentCreate {
	scc.mutation.SetComment(s)
	return scc
}

// SetCreatedBy sets the "created_by" field.
func (scc *ShipmentCommentCreate) SetCreatedBy(u uuid.UUID) *ShipmentCommentCreate {
	scc.mutation.SetCreatedBy(u)
	return scc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (scc *ShipmentCommentCreate) SetShipment(s *Shipment) *ShipmentCommentCreate {
	return scc.SetShipmentID(s.ID)
}

// SetCommentType sets the "comment_type" edge to the CommentType entity.
func (scc *ShipmentCommentCreate) SetCommentType(c *CommentType) *ShipmentCommentCreate {
	return scc.SetCommentTypeID(c.ID)
}

// SetCreatedByUserID sets the "created_by_user" edge to the User entity by ID.
func (scc *ShipmentCommentCreate) SetCreatedByUserID(id uuid.UUID) *ShipmentCommentCreate {
	scc.mutation.SetCreatedByUserID(id)
	return scc
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (scc *ShipmentCommentCreate) SetCreatedByUser(u *User) *ShipmentCommentCreate {
	return scc.SetCreatedByUserID(u.ID)
}

// Mutation returns the ShipmentCommentMutation object of the builder.
func (scc *ShipmentCommentCreate) Mutation() *ShipmentCommentMutation {
	return scc.mutation
}

// Save creates the ShipmentComment in the database.
func (scc *ShipmentCommentCreate) Save(ctx context.Context) (*ShipmentComment, error) {
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ShipmentCommentCreate) SaveX(ctx context.Context) *ShipmentComment {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ShipmentCommentCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ShipmentCommentCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ShipmentCommentCreate) check() error {
	if _, ok := scc.mutation.ShipmentID(); !ok {
		return &ValidationError{Name: "shipment_id", err: errors.New(`ent: missing required field "ShipmentComment.shipment_id"`)}
	}
	if _, ok := scc.mutation.CommentTypeID(); !ok {
		return &ValidationError{Name: "comment_type_id", err: errors.New(`ent: missing required field "ShipmentComment.comment_type_id"`)}
	}
	if _, ok := scc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "ShipmentComment.comment"`)}
	}
	if v, ok := scc.mutation.Comment(); ok {
		if err := shipmentcomment.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "ShipmentComment.comment": %w`, err)}
		}
	}
	if _, ok := scc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ShipmentComment.created_by"`)}
	}
	if _, ok := scc.mutation.ShipmentID(); !ok {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentComment.shipment"`)}
	}
	if _, ok := scc.mutation.CommentTypeID(); !ok {
		return &ValidationError{Name: "comment_type", err: errors.New(`ent: missing required edge "ShipmentComment.comment_type"`)}
	}
	if _, ok := scc.mutation.CreatedByUserID(); !ok {
		return &ValidationError{Name: "created_by_user", err: errors.New(`ent: missing required edge "ShipmentComment.created_by_user"`)}
	}
	return nil
}

func (scc *ShipmentCommentCreate) sqlSave(ctx context.Context) (*ShipmentComment, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *ShipmentCommentCreate) createSpec() (*ShipmentComment, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentComment{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentcomment.Table, sqlgraph.NewFieldSpec(shipmentcomment.FieldID, field.TypeInt))
	)
	if value, ok := scc.mutation.Comment(); ok {
		_spec.SetField(shipmentcomment.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if nodes := scc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.ShipmentTable,
			Columns: []string{shipmentcomment.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShipmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.CommentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CommentTypeTable,
			Columns: []string{shipmentcomment.CommentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommentTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentcomment.CreatedByUserTable,
			Columns: []string{shipmentcomment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShipmentCommentCreateBulk is the builder for creating many ShipmentComment entities in bulk.
type ShipmentCommentCreateBulk struct {
	config
	err      error
	builders []*ShipmentCommentCreate
}

// Save creates the ShipmentComment entities in the database.
func (sccb *ShipmentCommentCreateBulk) Save(ctx context.Context) ([]*ShipmentComment, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ShipmentComment, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ShipmentCommentCreateBulk) SaveX(ctx context.Context) []*ShipmentComment {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ShipmentCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ShipmentCommentCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
