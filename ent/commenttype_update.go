// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/commenttype"
	"github.com/emoss08/trenova/ent/predicate"
)

// CommentTypeUpdate is the builder for updating CommentType entities.
type CommentTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *CommentTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CommentTypeUpdate builder.
func (ctu *CommentTypeUpdate) Where(ps ...predicate.CommentType) *CommentTypeUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *CommentTypeUpdate) SetUpdatedAt(t time.Time) *CommentTypeUpdate {
	ctu.mutation.SetUpdatedAt(t)
	return ctu
}

// SetStatus sets the "status" field.
func (ctu *CommentTypeUpdate) SetStatus(c commenttype.Status) *CommentTypeUpdate {
	ctu.mutation.SetStatus(c)
	return ctu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ctu *CommentTypeUpdate) SetNillableStatus(c *commenttype.Status) *CommentTypeUpdate {
	if c != nil {
		ctu.SetStatus(*c)
	}
	return ctu
}

// SetName sets the "name" field.
func (ctu *CommentTypeUpdate) SetName(s string) *CommentTypeUpdate {
	ctu.mutation.SetName(s)
	return ctu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctu *CommentTypeUpdate) SetNillableName(s *string) *CommentTypeUpdate {
	if s != nil {
		ctu.SetName(*s)
	}
	return ctu
}

// SetSeverity sets the "severity" field.
func (ctu *CommentTypeUpdate) SetSeverity(c commenttype.Severity) *CommentTypeUpdate {
	ctu.mutation.SetSeverity(c)
	return ctu
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (ctu *CommentTypeUpdate) SetNillableSeverity(c *commenttype.Severity) *CommentTypeUpdate {
	if c != nil {
		ctu.SetSeverity(*c)
	}
	return ctu
}

// SetDescription sets the "description" field.
func (ctu *CommentTypeUpdate) SetDescription(s string) *CommentTypeUpdate {
	ctu.mutation.SetDescription(s)
	return ctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctu *CommentTypeUpdate) SetNillableDescription(s *string) *CommentTypeUpdate {
	if s != nil {
		ctu.SetDescription(*s)
	}
	return ctu
}

// ClearDescription clears the value of the "description" field.
func (ctu *CommentTypeUpdate) ClearDescription() *CommentTypeUpdate {
	ctu.mutation.ClearDescription()
	return ctu
}

// Mutation returns the CommentTypeMutation object of the builder.
func (ctu *CommentTypeUpdate) Mutation() *CommentTypeMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CommentTypeUpdate) Save(ctx context.Context) (int, error) {
	ctu.defaults()
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CommentTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CommentTypeUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CommentTypeUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *CommentTypeUpdate) defaults() {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		v := commenttype.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctu *CommentTypeUpdate) check() error {
	if v, ok := ctu.mutation.Status(); ok {
		if err := commenttype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CommentType.status": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.Name(); ok {
		if err := commenttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CommentType.name": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.Severity(); ok {
		if err := commenttype.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "CommentType.severity": %w`, err)}
		}
	}
	if _, ok := ctu.mutation.BusinessUnitID(); ctu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentType.business_unit"`)
	}
	if _, ok := ctu.mutation.OrganizationID(); ctu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentType.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctu *CommentTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommentTypeUpdate {
	ctu.modifiers = append(ctu.modifiers, modifiers...)
	return ctu
}

func (ctu *CommentTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ctu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commenttype.Table, commenttype.Columns, sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.SetField(commenttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ctu.mutation.Status(); ok {
		_spec.SetField(commenttype.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ctu.mutation.Name(); ok {
		_spec.SetField(commenttype.FieldName, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Severity(); ok {
		_spec.SetField(commenttype.FieldSeverity, field.TypeEnum, value)
	}
	if value, ok := ctu.mutation.Description(); ok {
		_spec.SetField(commenttype.FieldDescription, field.TypeString, value)
	}
	if ctu.mutation.DescriptionCleared() {
		_spec.ClearField(commenttype.FieldDescription, field.TypeString)
	}
	_spec.AddModifiers(ctu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commenttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CommentTypeUpdateOne is the builder for updating a single CommentType entity.
type CommentTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CommentTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *CommentTypeUpdateOne) SetUpdatedAt(t time.Time) *CommentTypeUpdateOne {
	ctuo.mutation.SetUpdatedAt(t)
	return ctuo
}

// SetStatus sets the "status" field.
func (ctuo *CommentTypeUpdateOne) SetStatus(c commenttype.Status) *CommentTypeUpdateOne {
	ctuo.mutation.SetStatus(c)
	return ctuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ctuo *CommentTypeUpdateOne) SetNillableStatus(c *commenttype.Status) *CommentTypeUpdateOne {
	if c != nil {
		ctuo.SetStatus(*c)
	}
	return ctuo
}

// SetName sets the "name" field.
func (ctuo *CommentTypeUpdateOne) SetName(s string) *CommentTypeUpdateOne {
	ctuo.mutation.SetName(s)
	return ctuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctuo *CommentTypeUpdateOne) SetNillableName(s *string) *CommentTypeUpdateOne {
	if s != nil {
		ctuo.SetName(*s)
	}
	return ctuo
}

// SetSeverity sets the "severity" field.
func (ctuo *CommentTypeUpdateOne) SetSeverity(c commenttype.Severity) *CommentTypeUpdateOne {
	ctuo.mutation.SetSeverity(c)
	return ctuo
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (ctuo *CommentTypeUpdateOne) SetNillableSeverity(c *commenttype.Severity) *CommentTypeUpdateOne {
	if c != nil {
		ctuo.SetSeverity(*c)
	}
	return ctuo
}

// SetDescription sets the "description" field.
func (ctuo *CommentTypeUpdateOne) SetDescription(s string) *CommentTypeUpdateOne {
	ctuo.mutation.SetDescription(s)
	return ctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctuo *CommentTypeUpdateOne) SetNillableDescription(s *string) *CommentTypeUpdateOne {
	if s != nil {
		ctuo.SetDescription(*s)
	}
	return ctuo
}

// ClearDescription clears the value of the "description" field.
func (ctuo *CommentTypeUpdateOne) ClearDescription() *CommentTypeUpdateOne {
	ctuo.mutation.ClearDescription()
	return ctuo
}

// Mutation returns the CommentTypeMutation object of the builder.
func (ctuo *CommentTypeUpdateOne) Mutation() *CommentTypeMutation {
	return ctuo.mutation
}

// Where appends a list predicates to the CommentTypeUpdate builder.
func (ctuo *CommentTypeUpdateOne) Where(ps ...predicate.CommentType) *CommentTypeUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CommentTypeUpdateOne) Select(field string, fields ...string) *CommentTypeUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CommentType entity.
func (ctuo *CommentTypeUpdateOne) Save(ctx context.Context) (*CommentType, error) {
	ctuo.defaults()
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CommentTypeUpdateOne) SaveX(ctx context.Context) *CommentType {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CommentTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CommentTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *CommentTypeUpdateOne) defaults() {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		v := commenttype.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctuo *CommentTypeUpdateOne) check() error {
	if v, ok := ctuo.mutation.Status(); ok {
		if err := commenttype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CommentType.status": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.Name(); ok {
		if err := commenttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CommentType.name": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.Severity(); ok {
		if err := commenttype.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "CommentType.severity": %w`, err)}
		}
	}
	if _, ok := ctuo.mutation.BusinessUnitID(); ctuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentType.business_unit"`)
	}
	if _, ok := ctuo.mutation.OrganizationID(); ctuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentType.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctuo *CommentTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommentTypeUpdateOne {
	ctuo.modifiers = append(ctuo.modifiers, modifiers...)
	return ctuo
}

func (ctuo *CommentTypeUpdateOne) sqlSave(ctx context.Context) (_node *CommentType, err error) {
	if err := ctuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commenttype.Table, commenttype.Columns, sqlgraph.NewFieldSpec(commenttype.FieldID, field.TypeUUID))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommentType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commenttype.FieldID)
		for _, f := range fields {
			if !commenttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commenttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(commenttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ctuo.mutation.Status(); ok {
		_spec.SetField(commenttype.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ctuo.mutation.Name(); ok {
		_spec.SetField(commenttype.FieldName, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Severity(); ok {
		_spec.SetField(commenttype.FieldSeverity, field.TypeEnum, value)
	}
	if value, ok := ctuo.mutation.Description(); ok {
		_spec.SetField(commenttype.FieldDescription, field.TypeString, value)
	}
	if ctuo.mutation.DescriptionCleared() {
		_spec.ClearField(commenttype.FieldDescription, field.TypeString)
	}
	_spec.AddModifiers(ctuo.modifiers...)
	_node = &CommentType{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commenttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
