// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/customer"
	"github.com/emoss08/trenova/ent/equipmenttype"
	"github.com/emoss08/trenova/ent/location"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/servicetype"
	"github.com/emoss08/trenova/ent/shipment"
	"github.com/emoss08/trenova/ent/shipmenttype"
	"github.com/emoss08/trenova/ent/user"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// ShipmentUpdate is the builder for updating Shipment entities.
type ShipmentUpdate struct {
	config
	hooks     []Hook
	mutation  *ShipmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShipmentUpdate builder.
func (su *ShipmentUpdate) Where(ps ...predicate.Shipment) *ShipmentUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ShipmentUpdate) SetUpdatedAt(t time.Time) *ShipmentUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetVersion sets the "version" field.
func (su *ShipmentUpdate) SetVersion(i int) *ShipmentUpdate {
	su.mutation.ResetVersion()
	su.mutation.SetVersion(i)
	return su
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableVersion(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetVersion(*i)
	}
	return su
}

// AddVersion adds i to the "version" field.
func (su *ShipmentUpdate) AddVersion(i int) *ShipmentUpdate {
	su.mutation.AddVersion(i)
	return su
}

// SetProNumber sets the "pro_number" field.
func (su *ShipmentUpdate) SetProNumber(s string) *ShipmentUpdate {
	su.mutation.SetProNumber(s)
	return su
}

// SetNillableProNumber sets the "pro_number" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableProNumber(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetProNumber(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *ShipmentUpdate) SetStatus(s shipment.Status) *ShipmentUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableStatus(s *shipment.Status) *ShipmentUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetOriginLocationID sets the "origin_location_id" field.
func (su *ShipmentUpdate) SetOriginLocationID(u uuid.UUID) *ShipmentUpdate {
	su.mutation.SetOriginLocationID(u)
	return su
}

// SetNillableOriginLocationID sets the "origin_location_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableOriginLocationID(u *uuid.UUID) *ShipmentUpdate {
	if u != nil {
		su.SetOriginLocationID(*u)
	}
	return su
}

// ClearOriginLocationID clears the value of the "origin_location_id" field.
func (su *ShipmentUpdate) ClearOriginLocationID() *ShipmentUpdate {
	su.mutation.ClearOriginLocationID()
	return su
}

// SetOriginAddressLine sets the "origin_address_line" field.
func (su *ShipmentUpdate) SetOriginAddressLine(s string) *ShipmentUpdate {
	su.mutation.SetOriginAddressLine(s)
	return su
}

// SetNillableOriginAddressLine sets the "origin_address_line" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableOriginAddressLine(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetOriginAddressLine(*s)
	}
	return su
}

// ClearOriginAddressLine clears the value of the "origin_address_line" field.
func (su *ShipmentUpdate) ClearOriginAddressLine() *ShipmentUpdate {
	su.mutation.ClearOriginAddressLine()
	return su
}

// SetOriginAppointmentStart sets the "origin_appointment_start" field.
func (su *ShipmentUpdate) SetOriginAppointmentStart(t time.Time) *ShipmentUpdate {
	su.mutation.SetOriginAppointmentStart(t)
	return su
}

// SetNillableOriginAppointmentStart sets the "origin_appointment_start" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableOriginAppointmentStart(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetOriginAppointmentStart(*t)
	}
	return su
}

// ClearOriginAppointmentStart clears the value of the "origin_appointment_start" field.
func (su *ShipmentUpdate) ClearOriginAppointmentStart() *ShipmentUpdate {
	su.mutation.ClearOriginAppointmentStart()
	return su
}

// SetOriginAppointmentEnd sets the "origin_appointment_end" field.
func (su *ShipmentUpdate) SetOriginAppointmentEnd(t time.Time) *ShipmentUpdate {
	su.mutation.SetOriginAppointmentEnd(t)
	return su
}

// SetNillableOriginAppointmentEnd sets the "origin_appointment_end" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableOriginAppointmentEnd(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetOriginAppointmentEnd(*t)
	}
	return su
}

// ClearOriginAppointmentEnd clears the value of the "origin_appointment_end" field.
func (su *ShipmentUpdate) ClearOriginAppointmentEnd() *ShipmentUpdate {
	su.mutation.ClearOriginAppointmentEnd()
	return su
}

// SetDestinationLocationID sets the "destination_location_id" field.
func (su *ShipmentUpdate) SetDestinationLocationID(u uuid.UUID) *ShipmentUpdate {
	su.mutation.SetDestinationLocationID(u)
	return su
}

// SetNillableDestinationLocationID sets the "destination_location_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableDestinationLocationID(u *uuid.UUID) *ShipmentUpdate {
	if u != nil {
		su.SetDestinationLocationID(*u)
	}
	return su
}

// ClearDestinationLocationID clears the value of the "destination_location_id" field.
func (su *ShipmentUpdate) ClearDestinationLocationID() *ShipmentUpdate {
	su.mutation.ClearDestinationLocationID()
	return su
}

// SetDestinationAddressLine sets the "destination_address_line" field.
func (su *ShipmentUpdate) SetDestinationAddressLine(s string) *ShipmentUpdate {
	su.mutation.SetDestinationAddressLine(s)
	return su
}

// SetNillableDestinationAddressLine sets the "destination_address_line" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableDestinationAddressLine(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetDestinationAddressLine(*s)
	}
	return su
}

// ClearDestinationAddressLine clears the value of the "destination_address_line" field.
func (su *ShipmentUpdate) ClearDestinationAddressLine() *ShipmentUpdate {
	su.mutation.ClearDestinationAddressLine()
	return su
}

// SetDestinationAppointmentStart sets the "destination_appointment_start" field.
func (su *ShipmentUpdate) SetDestinationAppointmentStart(t time.Time) *ShipmentUpdate {
	su.mutation.SetDestinationAppointmentStart(t)
	return su
}

// SetNillableDestinationAppointmentStart sets the "destination_appointment_start" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableDestinationAppointmentStart(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetDestinationAppointmentStart(*t)
	}
	return su
}

// ClearDestinationAppointmentStart clears the value of the "destination_appointment_start" field.
func (su *ShipmentUpdate) ClearDestinationAppointmentStart() *ShipmentUpdate {
	su.mutation.ClearDestinationAppointmentStart()
	return su
}

// SetDestinationAppointmentEnd sets the "destination_appointment_end" field.
func (su *ShipmentUpdate) SetDestinationAppointmentEnd(t time.Time) *ShipmentUpdate {
	su.mutation.SetDestinationAppointmentEnd(t)
	return su
}

// SetNillableDestinationAppointmentEnd sets the "destination_appointment_end" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableDestinationAppointmentEnd(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetDestinationAppointmentEnd(*t)
	}
	return su
}

// ClearDestinationAppointmentEnd clears the value of the "destination_appointment_end" field.
func (su *ShipmentUpdate) ClearDestinationAppointmentEnd() *ShipmentUpdate {
	su.mutation.ClearDestinationAppointmentEnd()
	return su
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (su *ShipmentUpdate) SetShipmentTypeID(u uuid.UUID) *ShipmentUpdate {
	su.mutation.SetShipmentTypeID(u)
	return su
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentTypeID(u *uuid.UUID) *ShipmentUpdate {
	if u != nil {
		su.SetShipmentTypeID(*u)
	}
	return su
}

// SetRevenueCodeID sets the "revenue_code_id" field.
func (su *ShipmentUpdate) SetRevenueCodeID(u uuid.UUID) *ShipmentUpdate {
	su.mutation.SetRevenueCodeID(u)
	return su
}

// SetNillableRevenueCodeID sets the "revenue_code_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableRevenueCodeID(u *uuid.UUID) *ShipmentUpdate {
	if u != nil {
		su.SetRevenueCodeID(*u)
	}
	return su
}

// ClearRevenueCodeID clears the value of the "revenue_code_id" field.
func (su *ShipmentUpdate) ClearRevenueCodeID() *ShipmentUpdate {
	su.mutation.ClearRevenueCodeID()
	return su
}

// SetServiceTypeID sets the "service_type_id" field.
func (su *ShipmentUpdate) SetServiceTypeID(u uuid.UUID) *ShipmentUpdate {
	su.mutation.SetServiceTypeID(u)
	return su
}

// SetNillableServiceTypeID sets the "service_type_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableServiceTypeID(u *uuid.UUID) *ShipmentUpdate {
	if u != nil {
		su.SetServiceTypeID(*u)
	}
	return su
}

// ClearServiceTypeID clears the value of the "service_type_id" field.
func (su *ShipmentUpdate) ClearServiceTypeID() *ShipmentUpdate {
	su.mutation.ClearServiceTypeID()
	return su
}

// SetRatingUnit sets the "rating_unit" field.
func (su *ShipmentUpdate) SetRatingUnit(i int) *ShipmentUpdate {
	su.mutation.ResetRatingUnit()
	su.mutation.SetRatingUnit(i)
	return su
}

// SetNillableRatingUnit sets the "rating_unit" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableRatingUnit(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetRatingUnit(*i)
	}
	return su
}

// AddRatingUnit adds i to the "rating_unit" field.
func (su *ShipmentUpdate) AddRatingUnit(i int) *ShipmentUpdate {
	su.mutation.AddRatingUnit(i)
	return su
}

// SetMileage sets the "mileage" field.
func (su *ShipmentUpdate) SetMileage(f float64) *ShipmentUpdate {
	su.mutation.ResetMileage()
	su.mutation.SetMileage(f)
	return su
}

// SetNillableMileage sets the "mileage" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableMileage(f *float64) *ShipmentUpdate {
	if f != nil {
		su.SetMileage(*f)
	}
	return su
}

// AddMileage adds f to the "mileage" field.
func (su *ShipmentUpdate) AddMileage(f float64) *ShipmentUpdate {
	su.mutation.AddMileage(f)
	return su
}

// ClearMileage clears the value of the "mileage" field.
func (su *ShipmentUpdate) ClearMileage() *ShipmentUpdate {
	su.mutation.ClearMileage()
	return su
}

// SetOtherChargeAmount sets the "other_charge_amount" field.
func (su *ShipmentUpdate) SetOtherChargeAmount(f float64) *ShipmentUpdate {
	su.mutation.ResetOtherChargeAmount()
	su.mutation.SetOtherChargeAmount(f)
	return su
}

// SetNillableOtherChargeAmount sets the "other_charge_amount" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableOtherChargeAmount(f *float64) *ShipmentUpdate {
	if f != nil {
		su.SetOtherChargeAmount(*f)
	}
	return su
}

// AddOtherChargeAmount adds f to the "other_charge_amount" field.
func (su *ShipmentUpdate) AddOtherChargeAmount(f float64) *ShipmentUpdate {
	su.mutation.AddOtherChargeAmount(f)
	return su
}

// ClearOtherChargeAmount clears the value of the "other_charge_amount" field.
func (su *ShipmentUpdate) ClearOtherChargeAmount() *ShipmentUpdate {
	su.mutation.ClearOtherChargeAmount()
	return su
}

// SetFreightChargeAmount sets the "freight_charge_amount" field.
func (su *ShipmentUpdate) SetFreightChargeAmount(f float64) *ShipmentUpdate {
	su.mutation.ResetFreightChargeAmount()
	su.mutation.SetFreightChargeAmount(f)
	return su
}

// SetNillableFreightChargeAmount sets the "freight_charge_amount" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableFreightChargeAmount(f *float64) *ShipmentUpdate {
	if f != nil {
		su.SetFreightChargeAmount(*f)
	}
	return su
}

// AddFreightChargeAmount adds f to the "freight_charge_amount" field.
func (su *ShipmentUpdate) AddFreightChargeAmount(f float64) *ShipmentUpdate {
	su.mutation.AddFreightChargeAmount(f)
	return su
}

// ClearFreightChargeAmount clears the value of the "freight_charge_amount" field.
func (su *ShipmentUpdate) ClearFreightChargeAmount() *ShipmentUpdate {
	su.mutation.ClearFreightChargeAmount()
	return su
}

// SetRatingMethod sets the "rating_method" field.
func (su *ShipmentUpdate) SetRatingMethod(sm shipment.RatingMethod) *ShipmentUpdate {
	su.mutation.SetRatingMethod(sm)
	return su
}

// SetNillableRatingMethod sets the "rating_method" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableRatingMethod(sm *shipment.RatingMethod) *ShipmentUpdate {
	if sm != nil {
		su.SetRatingMethod(*sm)
	}
	return su
}

// SetCustomerID sets the "customer_id" field.
func (su *ShipmentUpdate) SetCustomerID(u uuid.UUID) *ShipmentUpdate {
	su.mutation.SetCustomerID(u)
	return su
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableCustomerID(u *uuid.UUID) *ShipmentUpdate {
	if u != nil {
		su.SetCustomerID(*u)
	}
	return su
}

// SetPieces sets the "pieces" field.
func (su *ShipmentUpdate) SetPieces(f float64) *ShipmentUpdate {
	su.mutation.ResetPieces()
	su.mutation.SetPieces(f)
	return su
}

// SetNillablePieces sets the "pieces" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillablePieces(f *float64) *ShipmentUpdate {
	if f != nil {
		su.SetPieces(*f)
	}
	return su
}

// AddPieces adds f to the "pieces" field.
func (su *ShipmentUpdate) AddPieces(f float64) *ShipmentUpdate {
	su.mutation.AddPieces(f)
	return su
}

// ClearPieces clears the value of the "pieces" field.
func (su *ShipmentUpdate) ClearPieces() *ShipmentUpdate {
	su.mutation.ClearPieces()
	return su
}

// SetWeight sets the "weight" field.
func (su *ShipmentUpdate) SetWeight(f float64) *ShipmentUpdate {
	su.mutation.ResetWeight()
	su.mutation.SetWeight(f)
	return su
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableWeight(f *float64) *ShipmentUpdate {
	if f != nil {
		su.SetWeight(*f)
	}
	return su
}

// AddWeight adds f to the "weight" field.
func (su *ShipmentUpdate) AddWeight(f float64) *ShipmentUpdate {
	su.mutation.AddWeight(f)
	return su
}

// ClearWeight clears the value of the "weight" field.
func (su *ShipmentUpdate) ClearWeight() *ShipmentUpdate {
	su.mutation.ClearWeight()
	return su
}

// SetReadyToBill sets the "ready_to_bill" field.
func (su *ShipmentUpdate) SetReadyToBill(b bool) *ShipmentUpdate {
	su.mutation.SetReadyToBill(b)
	return su
}

// SetNillableReadyToBill sets the "ready_to_bill" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableReadyToBill(b *bool) *ShipmentUpdate {
	if b != nil {
		su.SetReadyToBill(*b)
	}
	return su
}

// SetBillDate sets the "bill_date" field.
func (su *ShipmentUpdate) SetBillDate(pg *pgtype.Date) *ShipmentUpdate {
	su.mutation.SetBillDate(pg)
	return su
}

// ClearBillDate clears the value of the "bill_date" field.
func (su *ShipmentUpdate) ClearBillDate() *ShipmentUpdate {
	su.mutation.ClearBillDate()
	return su
}

// SetShipDate sets the "ship_date" field.
func (su *ShipmentUpdate) SetShipDate(pg *pgtype.Date) *ShipmentUpdate {
	su.mutation.SetShipDate(pg)
	return su
}

// ClearShipDate clears the value of the "ship_date" field.
func (su *ShipmentUpdate) ClearShipDate() *ShipmentUpdate {
	su.mutation.ClearShipDate()
	return su
}

// SetBilled sets the "billed" field.
func (su *ShipmentUpdate) SetBilled(b bool) *ShipmentUpdate {
	su.mutation.SetBilled(b)
	return su
}

// SetNillableBilled sets the "billed" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableBilled(b *bool) *ShipmentUpdate {
	if b != nil {
		su.SetBilled(*b)
	}
	return su
}

// SetTransferredToBilling sets the "transferred_to_billing" field.
func (su *ShipmentUpdate) SetTransferredToBilling(b bool) *ShipmentUpdate {
	su.mutation.SetTransferredToBilling(b)
	return su
}

// SetNillableTransferredToBilling sets the "transferred_to_billing" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableTransferredToBilling(b *bool) *ShipmentUpdate {
	if b != nil {
		su.SetTransferredToBilling(*b)
	}
	return su
}

// SetTransferredToBillingDate sets the "transferred_to_billing_date" field.
func (su *ShipmentUpdate) SetTransferredToBillingDate(pg *pgtype.Date) *ShipmentUpdate {
	su.mutation.SetTransferredToBillingDate(pg)
	return su
}

// ClearTransferredToBillingDate clears the value of the "transferred_to_billing_date" field.
func (su *ShipmentUpdate) ClearTransferredToBillingDate() *ShipmentUpdate {
	su.mutation.ClearTransferredToBillingDate()
	return su
}

// SetTotalChargeAmount sets the "total_charge_amount" field.
func (su *ShipmentUpdate) SetTotalChargeAmount(f float64) *ShipmentUpdate {
	su.mutation.ResetTotalChargeAmount()
	su.mutation.SetTotalChargeAmount(f)
	return su
}

// SetNillableTotalChargeAmount sets the "total_charge_amount" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableTotalChargeAmount(f *float64) *ShipmentUpdate {
	if f != nil {
		su.SetTotalChargeAmount(*f)
	}
	return su
}

// AddTotalChargeAmount adds f to the "total_charge_amount" field.
func (su *ShipmentUpdate) AddTotalChargeAmount(f float64) *ShipmentUpdate {
	su.mutation.AddTotalChargeAmount(f)
	return su
}

// ClearTotalChargeAmount clears the value of the "total_charge_amount" field.
func (su *ShipmentUpdate) ClearTotalChargeAmount() *ShipmentUpdate {
	su.mutation.ClearTotalChargeAmount()
	return su
}

// SetTrailerTypeID sets the "trailer_type_id" field.
func (su *ShipmentUpdate) SetTrailerTypeID(u uuid.UUID) *ShipmentUpdate {
	su.mutation.SetTrailerTypeID(u)
	return su
}

// SetNillableTrailerTypeID sets the "trailer_type_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableTrailerTypeID(u *uuid.UUID) *ShipmentUpdate {
	if u != nil {
		su.SetTrailerTypeID(*u)
	}
	return su
}

// ClearTrailerTypeID clears the value of the "trailer_type_id" field.
func (su *ShipmentUpdate) ClearTrailerTypeID() *ShipmentUpdate {
	su.mutation.ClearTrailerTypeID()
	return su
}

// SetTractorTypeID sets the "tractor_type_id" field.
func (su *ShipmentUpdate) SetTractorTypeID(u uuid.UUID) *ShipmentUpdate {
	su.mutation.SetTractorTypeID(u)
	return su
}

// SetNillableTractorTypeID sets the "tractor_type_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableTractorTypeID(u *uuid.UUID) *ShipmentUpdate {
	if u != nil {
		su.SetTractorTypeID(*u)
	}
	return su
}

// ClearTractorTypeID clears the value of the "tractor_type_id" field.
func (su *ShipmentUpdate) ClearTractorTypeID() *ShipmentUpdate {
	su.mutation.ClearTractorTypeID()
	return su
}

// SetTemperatureMin sets the "temperature_min" field.
func (su *ShipmentUpdate) SetTemperatureMin(i int) *ShipmentUpdate {
	su.mutation.ResetTemperatureMin()
	su.mutation.SetTemperatureMin(i)
	return su
}

// SetNillableTemperatureMin sets the "temperature_min" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableTemperatureMin(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetTemperatureMin(*i)
	}
	return su
}

// AddTemperatureMin adds i to the "temperature_min" field.
func (su *ShipmentUpdate) AddTemperatureMin(i int) *ShipmentUpdate {
	su.mutation.AddTemperatureMin(i)
	return su
}

// ClearTemperatureMin clears the value of the "temperature_min" field.
func (su *ShipmentUpdate) ClearTemperatureMin() *ShipmentUpdate {
	su.mutation.ClearTemperatureMin()
	return su
}

// SetTemperatureMax sets the "temperature_max" field.
func (su *ShipmentUpdate) SetTemperatureMax(i int) *ShipmentUpdate {
	su.mutation.ResetTemperatureMax()
	su.mutation.SetTemperatureMax(i)
	return su
}

// SetNillableTemperatureMax sets the "temperature_max" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableTemperatureMax(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetTemperatureMax(*i)
	}
	return su
}

// AddTemperatureMax adds i to the "temperature_max" field.
func (su *ShipmentUpdate) AddTemperatureMax(i int) *ShipmentUpdate {
	su.mutation.AddTemperatureMax(i)
	return su
}

// ClearTemperatureMax clears the value of the "temperature_max" field.
func (su *ShipmentUpdate) ClearTemperatureMax() *ShipmentUpdate {
	su.mutation.ClearTemperatureMax()
	return su
}

// SetBillOfLadingNumber sets the "bill_of_lading_number" field.
func (su *ShipmentUpdate) SetBillOfLadingNumber(s string) *ShipmentUpdate {
	su.mutation.SetBillOfLadingNumber(s)
	return su
}

// SetNillableBillOfLadingNumber sets the "bill_of_lading_number" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableBillOfLadingNumber(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetBillOfLadingNumber(*s)
	}
	return su
}

// ClearBillOfLadingNumber clears the value of the "bill_of_lading_number" field.
func (su *ShipmentUpdate) ClearBillOfLadingNumber() *ShipmentUpdate {
	su.mutation.ClearBillOfLadingNumber()
	return su
}

// SetConsigneeReferenceNumber sets the "consignee_reference_number" field.
func (su *ShipmentUpdate) SetConsigneeReferenceNumber(s string) *ShipmentUpdate {
	su.mutation.SetConsigneeReferenceNumber(s)
	return su
}

// SetNillableConsigneeReferenceNumber sets the "consignee_reference_number" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableConsigneeReferenceNumber(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetConsigneeReferenceNumber(*s)
	}
	return su
}

// ClearConsigneeReferenceNumber clears the value of the "consignee_reference_number" field.
func (su *ShipmentUpdate) ClearConsigneeReferenceNumber() *ShipmentUpdate {
	su.mutation.ClearConsigneeReferenceNumber()
	return su
}

// SetComment sets the "comment" field.
func (su *ShipmentUpdate) SetComment(s string) *ShipmentUpdate {
	su.mutation.SetComment(s)
	return su
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableComment(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetComment(*s)
	}
	return su
}

// ClearComment clears the value of the "comment" field.
func (su *ShipmentUpdate) ClearComment() *ShipmentUpdate {
	su.mutation.ClearComment()
	return su
}

// SetVoidedComment sets the "voided_comment" field.
func (su *ShipmentUpdate) SetVoidedComment(s string) *ShipmentUpdate {
	su.mutation.SetVoidedComment(s)
	return su
}

// SetNillableVoidedComment sets the "voided_comment" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableVoidedComment(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetVoidedComment(*s)
	}
	return su
}

// ClearVoidedComment clears the value of the "voided_comment" field.
func (su *ShipmentUpdate) ClearVoidedComment() *ShipmentUpdate {
	su.mutation.ClearVoidedComment()
	return su
}

// SetAutoRated sets the "auto_rated" field.
func (su *ShipmentUpdate) SetAutoRated(b bool) *ShipmentUpdate {
	su.mutation.SetAutoRated(b)
	return su
}

// SetNillableAutoRated sets the "auto_rated" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableAutoRated(b *bool) *ShipmentUpdate {
	if b != nil {
		su.SetAutoRated(*b)
	}
	return su
}

// SetCurrentSuffix sets the "current_suffix" field.
func (su *ShipmentUpdate) SetCurrentSuffix(s string) *ShipmentUpdate {
	su.mutation.SetCurrentSuffix(s)
	return su
}

// SetNillableCurrentSuffix sets the "current_suffix" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableCurrentSuffix(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetCurrentSuffix(*s)
	}
	return su
}

// ClearCurrentSuffix clears the value of the "current_suffix" field.
func (su *ShipmentUpdate) ClearCurrentSuffix() *ShipmentUpdate {
	su.mutation.ClearCurrentSuffix()
	return su
}

// SetEntryMethod sets the "entry_method" field.
func (su *ShipmentUpdate) SetEntryMethod(sm shipment.EntryMethod) *ShipmentUpdate {
	su.mutation.SetEntryMethod(sm)
	return su
}

// SetNillableEntryMethod sets the "entry_method" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableEntryMethod(sm *shipment.EntryMethod) *ShipmentUpdate {
	if sm != nil {
		su.SetEntryMethod(*sm)
	}
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *ShipmentUpdate) SetCreatedBy(u uuid.UUID) *ShipmentUpdate {
	su.mutation.SetCreatedBy(u)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableCreatedBy(u *uuid.UUID) *ShipmentUpdate {
	if u != nil {
		su.SetCreatedBy(*u)
	}
	return su
}

// ClearCreatedBy clears the value of the "created_by" field.
func (su *ShipmentUpdate) ClearCreatedBy() *ShipmentUpdate {
	su.mutation.ClearCreatedBy()
	return su
}

// SetIsHazardous sets the "is_hazardous" field.
func (su *ShipmentUpdate) SetIsHazardous(b bool) *ShipmentUpdate {
	su.mutation.SetIsHazardous(b)
	return su
}

// SetNillableIsHazardous sets the "is_hazardous" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableIsHazardous(b *bool) *ShipmentUpdate {
	if b != nil {
		su.SetIsHazardous(*b)
	}
	return su
}

// SetShipmentType sets the "shipment_type" edge to the ShipmentType entity.
func (su *ShipmentUpdate) SetShipmentType(s *ShipmentType) *ShipmentUpdate {
	return su.SetShipmentTypeID(s.ID)
}

// SetServiceType sets the "service_type" edge to the ServiceType entity.
func (su *ShipmentUpdate) SetServiceType(s *ServiceType) *ShipmentUpdate {
	return su.SetServiceTypeID(s.ID)
}

// SetRevenueCode sets the "revenue_code" edge to the ServiceType entity.
func (su *ShipmentUpdate) SetRevenueCode(s *ServiceType) *ShipmentUpdate {
	return su.SetRevenueCodeID(s.ID)
}

// SetOriginLocation sets the "origin_location" edge to the Location entity.
func (su *ShipmentUpdate) SetOriginLocation(l *Location) *ShipmentUpdate {
	return su.SetOriginLocationID(l.ID)
}

// SetDestinationLocation sets the "destination_location" edge to the Location entity.
func (su *ShipmentUpdate) SetDestinationLocation(l *Location) *ShipmentUpdate {
	return su.SetDestinationLocationID(l.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (su *ShipmentUpdate) SetCustomer(c *Customer) *ShipmentUpdate {
	return su.SetCustomerID(c.ID)
}

// SetTrailerType sets the "trailer_type" edge to the EquipmentType entity.
func (su *ShipmentUpdate) SetTrailerType(e *EquipmentType) *ShipmentUpdate {
	return su.SetTrailerTypeID(e.ID)
}

// SetTractorType sets the "tractor_type" edge to the EquipmentType entity.
func (su *ShipmentUpdate) SetTractorType(e *EquipmentType) *ShipmentUpdate {
	return su.SetTractorTypeID(e.ID)
}

// SetCreatedByUserID sets the "created_by_user" edge to the User entity by ID.
func (su *ShipmentUpdate) SetCreatedByUserID(id uuid.UUID) *ShipmentUpdate {
	su.mutation.SetCreatedByUserID(id)
	return su
}

// SetNillableCreatedByUserID sets the "created_by_user" edge to the User entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableCreatedByUserID(id *uuid.UUID) *ShipmentUpdate {
	if id != nil {
		su = su.SetCreatedByUserID(*id)
	}
	return su
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (su *ShipmentUpdate) SetCreatedByUser(u *User) *ShipmentUpdate {
	return su.SetCreatedByUserID(u.ID)
}

// Mutation returns the ShipmentMutation object of the builder.
func (su *ShipmentUpdate) Mutation() *ShipmentMutation {
	return su.mutation
}

// ClearShipmentType clears the "shipment_type" edge to the ShipmentType entity.
func (su *ShipmentUpdate) ClearShipmentType() *ShipmentUpdate {
	su.mutation.ClearShipmentType()
	return su
}

// ClearServiceType clears the "service_type" edge to the ServiceType entity.
func (su *ShipmentUpdate) ClearServiceType() *ShipmentUpdate {
	su.mutation.ClearServiceType()
	return su
}

// ClearRevenueCode clears the "revenue_code" edge to the ServiceType entity.
func (su *ShipmentUpdate) ClearRevenueCode() *ShipmentUpdate {
	su.mutation.ClearRevenueCode()
	return su
}

// ClearOriginLocation clears the "origin_location" edge to the Location entity.
func (su *ShipmentUpdate) ClearOriginLocation() *ShipmentUpdate {
	su.mutation.ClearOriginLocation()
	return su
}

// ClearDestinationLocation clears the "destination_location" edge to the Location entity.
func (su *ShipmentUpdate) ClearDestinationLocation() *ShipmentUpdate {
	su.mutation.ClearDestinationLocation()
	return su
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (su *ShipmentUpdate) ClearCustomer() *ShipmentUpdate {
	su.mutation.ClearCustomer()
	return su
}

// ClearTrailerType clears the "trailer_type" edge to the EquipmentType entity.
func (su *ShipmentUpdate) ClearTrailerType() *ShipmentUpdate {
	su.mutation.ClearTrailerType()
	return su
}

// ClearTractorType clears the "tractor_type" edge to the EquipmentType entity.
func (su *ShipmentUpdate) ClearTractorType() *ShipmentUpdate {
	su.mutation.ClearTractorType()
	return su
}

// ClearCreatedByUser clears the "created_by_user" edge to the User entity.
func (su *ShipmentUpdate) ClearCreatedByUser() *ShipmentUpdate {
	su.mutation.ClearCreatedByUser()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShipmentUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShipmentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShipmentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ShipmentUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := shipment.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShipmentUpdate) check() error {
	if v, ok := su.mutation.ProNumber(); ok {
		if err := shipment.ProNumberValidator(v); err != nil {
			return &ValidationError{Name: "pro_number", err: fmt.Errorf(`ent: validator failed for field "Shipment.pro_number": %w`, err)}
		}
	}
	if v, ok := su.mutation.Status(); ok {
		if err := shipment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Shipment.status": %w`, err)}
		}
	}
	if v, ok := su.mutation.RatingUnit(); ok {
		if err := shipment.RatingUnitValidator(v); err != nil {
			return &ValidationError{Name: "rating_unit", err: fmt.Errorf(`ent: validator failed for field "Shipment.rating_unit": %w`, err)}
		}
	}
	if v, ok := su.mutation.Mileage(); ok {
		if err := shipment.MileageValidator(v); err != nil {
			return &ValidationError{Name: "mileage", err: fmt.Errorf(`ent: validator failed for field "Shipment.mileage": %w`, err)}
		}
	}
	if v, ok := su.mutation.OtherChargeAmount(); ok {
		if err := shipment.OtherChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "other_charge_amount", err: fmt.Errorf(`ent: validator failed for field "Shipment.other_charge_amount": %w`, err)}
		}
	}
	if v, ok := su.mutation.FreightChargeAmount(); ok {
		if err := shipment.FreightChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "freight_charge_amount", err: fmt.Errorf(`ent: validator failed for field "Shipment.freight_charge_amount": %w`, err)}
		}
	}
	if v, ok := su.mutation.RatingMethod(); ok {
		if err := shipment.RatingMethodValidator(v); err != nil {
			return &ValidationError{Name: "rating_method", err: fmt.Errorf(`ent: validator failed for field "Shipment.rating_method": %w`, err)}
		}
	}
	if v, ok := su.mutation.Pieces(); ok {
		if err := shipment.PiecesValidator(v); err != nil {
			return &ValidationError{Name: "pieces", err: fmt.Errorf(`ent: validator failed for field "Shipment.pieces": %w`, err)}
		}
	}
	if v, ok := su.mutation.Weight(); ok {
		if err := shipment.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Shipment.weight": %w`, err)}
		}
	}
	if v, ok := su.mutation.TotalChargeAmount(); ok {
		if err := shipment.TotalChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "total_charge_amount", err: fmt.Errorf(`ent: validator failed for field "Shipment.total_charge_amount": %w`, err)}
		}
	}
	if v, ok := su.mutation.VoidedComment(); ok {
		if err := shipment.VoidedCommentValidator(v); err != nil {
			return &ValidationError{Name: "voided_comment", err: fmt.Errorf(`ent: validator failed for field "Shipment.voided_comment": %w`, err)}
		}
	}
	if v, ok := su.mutation.EntryMethod(); ok {
		if err := shipment.EntryMethodValidator(v); err != nil {
			return &ValidationError{Name: "entry_method", err: fmt.Errorf(`ent: validator failed for field "Shipment.entry_method": %w`, err)}
		}
	}
	if _, ok := su.mutation.BusinessUnitID(); su.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.business_unit"`)
	}
	if _, ok := su.mutation.OrganizationID(); su.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.organization"`)
	}
	if _, ok := su.mutation.ShipmentTypeID(); su.mutation.ShipmentTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.shipment_type"`)
	}
	if _, ok := su.mutation.CustomerID(); su.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ShipmentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ShipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipment.Table, shipment.Columns, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(shipment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Version(); ok {
		_spec.SetField(shipment.FieldVersion, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedVersion(); ok {
		_spec.AddField(shipment.FieldVersion, field.TypeInt, value)
	}
	if value, ok := su.mutation.ProNumber(); ok {
		_spec.SetField(shipment.FieldProNumber, field.TypeString, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(shipment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := su.mutation.OriginAddressLine(); ok {
		_spec.SetField(shipment.FieldOriginAddressLine, field.TypeString, value)
	}
	if su.mutation.OriginAddressLineCleared() {
		_spec.ClearField(shipment.FieldOriginAddressLine, field.TypeString)
	}
	if value, ok := su.mutation.OriginAppointmentStart(); ok {
		_spec.SetField(shipment.FieldOriginAppointmentStart, field.TypeTime, value)
	}
	if su.mutation.OriginAppointmentStartCleared() {
		_spec.ClearField(shipment.FieldOriginAppointmentStart, field.TypeTime)
	}
	if value, ok := su.mutation.OriginAppointmentEnd(); ok {
		_spec.SetField(shipment.FieldOriginAppointmentEnd, field.TypeTime, value)
	}
	if su.mutation.OriginAppointmentEndCleared() {
		_spec.ClearField(shipment.FieldOriginAppointmentEnd, field.TypeTime)
	}
	if value, ok := su.mutation.DestinationAddressLine(); ok {
		_spec.SetField(shipment.FieldDestinationAddressLine, field.TypeString, value)
	}
	if su.mutation.DestinationAddressLineCleared() {
		_spec.ClearField(shipment.FieldDestinationAddressLine, field.TypeString)
	}
	if value, ok := su.mutation.DestinationAppointmentStart(); ok {
		_spec.SetField(shipment.FieldDestinationAppointmentStart, field.TypeTime, value)
	}
	if su.mutation.DestinationAppointmentStartCleared() {
		_spec.ClearField(shipment.FieldDestinationAppointmentStart, field.TypeTime)
	}
	if value, ok := su.mutation.DestinationAppointmentEnd(); ok {
		_spec.SetField(shipment.FieldDestinationAppointmentEnd, field.TypeTime, value)
	}
	if su.mutation.DestinationAppointmentEndCleared() {
		_spec.ClearField(shipment.FieldDestinationAppointmentEnd, field.TypeTime)
	}
	if value, ok := su.mutation.RatingUnit(); ok {
		_spec.SetField(shipment.FieldRatingUnit, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedRatingUnit(); ok {
		_spec.AddField(shipment.FieldRatingUnit, field.TypeInt, value)
	}
	if value, ok := su.mutation.Mileage(); ok {
		_spec.SetField(shipment.FieldMileage, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedMileage(); ok {
		_spec.AddField(shipment.FieldMileage, field.TypeFloat64, value)
	}
	if su.mutation.MileageCleared() {
		_spec.ClearField(shipment.FieldMileage, field.TypeFloat64)
	}
	if value, ok := su.mutation.OtherChargeAmount(); ok {
		_spec.SetField(shipment.FieldOtherChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedOtherChargeAmount(); ok {
		_spec.AddField(shipment.FieldOtherChargeAmount, field.TypeFloat64, value)
	}
	if su.mutation.OtherChargeAmountCleared() {
		_spec.ClearField(shipment.FieldOtherChargeAmount, field.TypeFloat64)
	}
	if value, ok := su.mutation.FreightChargeAmount(); ok {
		_spec.SetField(shipment.FieldFreightChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedFreightChargeAmount(); ok {
		_spec.AddField(shipment.FieldFreightChargeAmount, field.TypeFloat64, value)
	}
	if su.mutation.FreightChargeAmountCleared() {
		_spec.ClearField(shipment.FieldFreightChargeAmount, field.TypeFloat64)
	}
	if value, ok := su.mutation.RatingMethod(); ok {
		_spec.SetField(shipment.FieldRatingMethod, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Pieces(); ok {
		_spec.SetField(shipment.FieldPieces, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedPieces(); ok {
		_spec.AddField(shipment.FieldPieces, field.TypeFloat64, value)
	}
	if su.mutation.PiecesCleared() {
		_spec.ClearField(shipment.FieldPieces, field.TypeFloat64)
	}
	if value, ok := su.mutation.Weight(); ok {
		_spec.SetField(shipment.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedWeight(); ok {
		_spec.AddField(shipment.FieldWeight, field.TypeFloat64, value)
	}
	if su.mutation.WeightCleared() {
		_spec.ClearField(shipment.FieldWeight, field.TypeFloat64)
	}
	if value, ok := su.mutation.ReadyToBill(); ok {
		_spec.SetField(shipment.FieldReadyToBill, field.TypeBool, value)
	}
	if value, ok := su.mutation.BillDate(); ok {
		_spec.SetField(shipment.FieldBillDate, field.TypeOther, value)
	}
	if su.mutation.BillDateCleared() {
		_spec.ClearField(shipment.FieldBillDate, field.TypeOther)
	}
	if value, ok := su.mutation.ShipDate(); ok {
		_spec.SetField(shipment.FieldShipDate, field.TypeOther, value)
	}
	if su.mutation.ShipDateCleared() {
		_spec.ClearField(shipment.FieldShipDate, field.TypeOther)
	}
	if value, ok := su.mutation.Billed(); ok {
		_spec.SetField(shipment.FieldBilled, field.TypeBool, value)
	}
	if value, ok := su.mutation.TransferredToBilling(); ok {
		_spec.SetField(shipment.FieldTransferredToBilling, field.TypeBool, value)
	}
	if value, ok := su.mutation.TransferredToBillingDate(); ok {
		_spec.SetField(shipment.FieldTransferredToBillingDate, field.TypeOther, value)
	}
	if su.mutation.TransferredToBillingDateCleared() {
		_spec.ClearField(shipment.FieldTransferredToBillingDate, field.TypeOther)
	}
	if value, ok := su.mutation.TotalChargeAmount(); ok {
		_spec.SetField(shipment.FieldTotalChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedTotalChargeAmount(); ok {
		_spec.AddField(shipment.FieldTotalChargeAmount, field.TypeFloat64, value)
	}
	if su.mutation.TotalChargeAmountCleared() {
		_spec.ClearField(shipment.FieldTotalChargeAmount, field.TypeFloat64)
	}
	if value, ok := su.mutation.TemperatureMin(); ok {
		_spec.SetField(shipment.FieldTemperatureMin, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedTemperatureMin(); ok {
		_spec.AddField(shipment.FieldTemperatureMin, field.TypeInt, value)
	}
	if su.mutation.TemperatureMinCleared() {
		_spec.ClearField(shipment.FieldTemperatureMin, field.TypeInt)
	}
	if value, ok := su.mutation.TemperatureMax(); ok {
		_spec.SetField(shipment.FieldTemperatureMax, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedTemperatureMax(); ok {
		_spec.AddField(shipment.FieldTemperatureMax, field.TypeInt, value)
	}
	if su.mutation.TemperatureMaxCleared() {
		_spec.ClearField(shipment.FieldTemperatureMax, field.TypeInt)
	}
	if value, ok := su.mutation.BillOfLadingNumber(); ok {
		_spec.SetField(shipment.FieldBillOfLadingNumber, field.TypeString, value)
	}
	if su.mutation.BillOfLadingNumberCleared() {
		_spec.ClearField(shipment.FieldBillOfLadingNumber, field.TypeString)
	}
	if value, ok := su.mutation.ConsigneeReferenceNumber(); ok {
		_spec.SetField(shipment.FieldConsigneeReferenceNumber, field.TypeString, value)
	}
	if su.mutation.ConsigneeReferenceNumberCleared() {
		_spec.ClearField(shipment.FieldConsigneeReferenceNumber, field.TypeString)
	}
	if value, ok := su.mutation.Comment(); ok {
		_spec.SetField(shipment.FieldComment, field.TypeString, value)
	}
	if su.mutation.CommentCleared() {
		_spec.ClearField(shipment.FieldComment, field.TypeString)
	}
	if value, ok := su.mutation.VoidedComment(); ok {
		_spec.SetField(shipment.FieldVoidedComment, field.TypeString, value)
	}
	if su.mutation.VoidedCommentCleared() {
		_spec.ClearField(shipment.FieldVoidedComment, field.TypeString)
	}
	if value, ok := su.mutation.AutoRated(); ok {
		_spec.SetField(shipment.FieldAutoRated, field.TypeBool, value)
	}
	if value, ok := su.mutation.CurrentSuffix(); ok {
		_spec.SetField(shipment.FieldCurrentSuffix, field.TypeString, value)
	}
	if su.mutation.CurrentSuffixCleared() {
		_spec.ClearField(shipment.FieldCurrentSuffix, field.TypeString)
	}
	if value, ok := su.mutation.EntryMethod(); ok {
		_spec.SetField(shipment.FieldEntryMethod, field.TypeEnum, value)
	}
	if value, ok := su.mutation.IsHazardous(); ok {
		_spec.SetField(shipment.FieldIsHazardous, field.TypeBool, value)
	}
	if su.mutation.ShipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ShipmentTypeTable,
			Columns: []string{shipment.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ShipmentTypeTable,
			Columns: []string{shipment.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ServiceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ServiceTypeTable,
			Columns: []string{shipment.ServiceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ServiceTypeTable,
			Columns: []string{shipment.ServiceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RevenueCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.RevenueCodeTable,
			Columns: []string{shipment.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RevenueCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.RevenueCodeTable,
			Columns: []string{shipment.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OriginLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.OriginLocationTable,
			Columns: []string{shipment.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OriginLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.OriginLocationTable,
			Columns: []string{shipment.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DestinationLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.DestinationLocationTable,
			Columns: []string{shipment.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DestinationLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.DestinationLocationTable,
			Columns: []string{shipment.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CustomerTable,
			Columns: []string{shipment.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CustomerTable,
			Columns: []string{shipment.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TrailerTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TrailerTypeTable,
			Columns: []string{shipment.TrailerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TrailerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TrailerTypeTable,
			Columns: []string{shipment.TrailerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TractorTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TractorTypeTable,
			Columns: []string{shipment.TractorTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TractorTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TractorTypeTable,
			Columns: []string{shipment.TractorTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CreatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CreatedByUserTable,
			Columns: []string{shipment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CreatedByUserTable,
			Columns: []string{shipment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShipmentUpdateOne is the builder for updating a single Shipment entity.
type ShipmentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShipmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ShipmentUpdateOne) SetUpdatedAt(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetVersion sets the "version" field.
func (suo *ShipmentUpdateOne) SetVersion(i int) *ShipmentUpdateOne {
	suo.mutation.ResetVersion()
	suo.mutation.SetVersion(i)
	return suo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableVersion(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetVersion(*i)
	}
	return suo
}

// AddVersion adds i to the "version" field.
func (suo *ShipmentUpdateOne) AddVersion(i int) *ShipmentUpdateOne {
	suo.mutation.AddVersion(i)
	return suo
}

// SetProNumber sets the "pro_number" field.
func (suo *ShipmentUpdateOne) SetProNumber(s string) *ShipmentUpdateOne {
	suo.mutation.SetProNumber(s)
	return suo
}

// SetNillableProNumber sets the "pro_number" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableProNumber(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetProNumber(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *ShipmentUpdateOne) SetStatus(s shipment.Status) *ShipmentUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableStatus(s *shipment.Status) *ShipmentUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetOriginLocationID sets the "origin_location_id" field.
func (suo *ShipmentUpdateOne) SetOriginLocationID(u uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetOriginLocationID(u)
	return suo
}

// SetNillableOriginLocationID sets the "origin_location_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableOriginLocationID(u *uuid.UUID) *ShipmentUpdateOne {
	if u != nil {
		suo.SetOriginLocationID(*u)
	}
	return suo
}

// ClearOriginLocationID clears the value of the "origin_location_id" field.
func (suo *ShipmentUpdateOne) ClearOriginLocationID() *ShipmentUpdateOne {
	suo.mutation.ClearOriginLocationID()
	return suo
}

// SetOriginAddressLine sets the "origin_address_line" field.
func (suo *ShipmentUpdateOne) SetOriginAddressLine(s string) *ShipmentUpdateOne {
	suo.mutation.SetOriginAddressLine(s)
	return suo
}

// SetNillableOriginAddressLine sets the "origin_address_line" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableOriginAddressLine(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetOriginAddressLine(*s)
	}
	return suo
}

// ClearOriginAddressLine clears the value of the "origin_address_line" field.
func (suo *ShipmentUpdateOne) ClearOriginAddressLine() *ShipmentUpdateOne {
	suo.mutation.ClearOriginAddressLine()
	return suo
}

// SetOriginAppointmentStart sets the "origin_appointment_start" field.
func (suo *ShipmentUpdateOne) SetOriginAppointmentStart(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetOriginAppointmentStart(t)
	return suo
}

// SetNillableOriginAppointmentStart sets the "origin_appointment_start" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableOriginAppointmentStart(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetOriginAppointmentStart(*t)
	}
	return suo
}

// ClearOriginAppointmentStart clears the value of the "origin_appointment_start" field.
func (suo *ShipmentUpdateOne) ClearOriginAppointmentStart() *ShipmentUpdateOne {
	suo.mutation.ClearOriginAppointmentStart()
	return suo
}

// SetOriginAppointmentEnd sets the "origin_appointment_end" field.
func (suo *ShipmentUpdateOne) SetOriginAppointmentEnd(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetOriginAppointmentEnd(t)
	return suo
}

// SetNillableOriginAppointmentEnd sets the "origin_appointment_end" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableOriginAppointmentEnd(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetOriginAppointmentEnd(*t)
	}
	return suo
}

// ClearOriginAppointmentEnd clears the value of the "origin_appointment_end" field.
func (suo *ShipmentUpdateOne) ClearOriginAppointmentEnd() *ShipmentUpdateOne {
	suo.mutation.ClearOriginAppointmentEnd()
	return suo
}

// SetDestinationLocationID sets the "destination_location_id" field.
func (suo *ShipmentUpdateOne) SetDestinationLocationID(u uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetDestinationLocationID(u)
	return suo
}

// SetNillableDestinationLocationID sets the "destination_location_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableDestinationLocationID(u *uuid.UUID) *ShipmentUpdateOne {
	if u != nil {
		suo.SetDestinationLocationID(*u)
	}
	return suo
}

// ClearDestinationLocationID clears the value of the "destination_location_id" field.
func (suo *ShipmentUpdateOne) ClearDestinationLocationID() *ShipmentUpdateOne {
	suo.mutation.ClearDestinationLocationID()
	return suo
}

// SetDestinationAddressLine sets the "destination_address_line" field.
func (suo *ShipmentUpdateOne) SetDestinationAddressLine(s string) *ShipmentUpdateOne {
	suo.mutation.SetDestinationAddressLine(s)
	return suo
}

// SetNillableDestinationAddressLine sets the "destination_address_line" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableDestinationAddressLine(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetDestinationAddressLine(*s)
	}
	return suo
}

// ClearDestinationAddressLine clears the value of the "destination_address_line" field.
func (suo *ShipmentUpdateOne) ClearDestinationAddressLine() *ShipmentUpdateOne {
	suo.mutation.ClearDestinationAddressLine()
	return suo
}

// SetDestinationAppointmentStart sets the "destination_appointment_start" field.
func (suo *ShipmentUpdateOne) SetDestinationAppointmentStart(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetDestinationAppointmentStart(t)
	return suo
}

// SetNillableDestinationAppointmentStart sets the "destination_appointment_start" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableDestinationAppointmentStart(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetDestinationAppointmentStart(*t)
	}
	return suo
}

// ClearDestinationAppointmentStart clears the value of the "destination_appointment_start" field.
func (suo *ShipmentUpdateOne) ClearDestinationAppointmentStart() *ShipmentUpdateOne {
	suo.mutation.ClearDestinationAppointmentStart()
	return suo
}

// SetDestinationAppointmentEnd sets the "destination_appointment_end" field.
func (suo *ShipmentUpdateOne) SetDestinationAppointmentEnd(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetDestinationAppointmentEnd(t)
	return suo
}

// SetNillableDestinationAppointmentEnd sets the "destination_appointment_end" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableDestinationAppointmentEnd(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetDestinationAppointmentEnd(*t)
	}
	return suo
}

// ClearDestinationAppointmentEnd clears the value of the "destination_appointment_end" field.
func (suo *ShipmentUpdateOne) ClearDestinationAppointmentEnd() *ShipmentUpdateOne {
	suo.mutation.ClearDestinationAppointmentEnd()
	return suo
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (suo *ShipmentUpdateOne) SetShipmentTypeID(u uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetShipmentTypeID(u)
	return suo
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentTypeID(u *uuid.UUID) *ShipmentUpdateOne {
	if u != nil {
		suo.SetShipmentTypeID(*u)
	}
	return suo
}

// SetRevenueCodeID sets the "revenue_code_id" field.
func (suo *ShipmentUpdateOne) SetRevenueCodeID(u uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetRevenueCodeID(u)
	return suo
}

// SetNillableRevenueCodeID sets the "revenue_code_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableRevenueCodeID(u *uuid.UUID) *ShipmentUpdateOne {
	if u != nil {
		suo.SetRevenueCodeID(*u)
	}
	return suo
}

// ClearRevenueCodeID clears the value of the "revenue_code_id" field.
func (suo *ShipmentUpdateOne) ClearRevenueCodeID() *ShipmentUpdateOne {
	suo.mutation.ClearRevenueCodeID()
	return suo
}

// SetServiceTypeID sets the "service_type_id" field.
func (suo *ShipmentUpdateOne) SetServiceTypeID(u uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetServiceTypeID(u)
	return suo
}

// SetNillableServiceTypeID sets the "service_type_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableServiceTypeID(u *uuid.UUID) *ShipmentUpdateOne {
	if u != nil {
		suo.SetServiceTypeID(*u)
	}
	return suo
}

// ClearServiceTypeID clears the value of the "service_type_id" field.
func (suo *ShipmentUpdateOne) ClearServiceTypeID() *ShipmentUpdateOne {
	suo.mutation.ClearServiceTypeID()
	return suo
}

// SetRatingUnit sets the "rating_unit" field.
func (suo *ShipmentUpdateOne) SetRatingUnit(i int) *ShipmentUpdateOne {
	suo.mutation.ResetRatingUnit()
	suo.mutation.SetRatingUnit(i)
	return suo
}

// SetNillableRatingUnit sets the "rating_unit" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableRatingUnit(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetRatingUnit(*i)
	}
	return suo
}

// AddRatingUnit adds i to the "rating_unit" field.
func (suo *ShipmentUpdateOne) AddRatingUnit(i int) *ShipmentUpdateOne {
	suo.mutation.AddRatingUnit(i)
	return suo
}

// SetMileage sets the "mileage" field.
func (suo *ShipmentUpdateOne) SetMileage(f float64) *ShipmentUpdateOne {
	suo.mutation.ResetMileage()
	suo.mutation.SetMileage(f)
	return suo
}

// SetNillableMileage sets the "mileage" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableMileage(f *float64) *ShipmentUpdateOne {
	if f != nil {
		suo.SetMileage(*f)
	}
	return suo
}

// AddMileage adds f to the "mileage" field.
func (suo *ShipmentUpdateOne) AddMileage(f float64) *ShipmentUpdateOne {
	suo.mutation.AddMileage(f)
	return suo
}

// ClearMileage clears the value of the "mileage" field.
func (suo *ShipmentUpdateOne) ClearMileage() *ShipmentUpdateOne {
	suo.mutation.ClearMileage()
	return suo
}

// SetOtherChargeAmount sets the "other_charge_amount" field.
func (suo *ShipmentUpdateOne) SetOtherChargeAmount(f float64) *ShipmentUpdateOne {
	suo.mutation.ResetOtherChargeAmount()
	suo.mutation.SetOtherChargeAmount(f)
	return suo
}

// SetNillableOtherChargeAmount sets the "other_charge_amount" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableOtherChargeAmount(f *float64) *ShipmentUpdateOne {
	if f != nil {
		suo.SetOtherChargeAmount(*f)
	}
	return suo
}

// AddOtherChargeAmount adds f to the "other_charge_amount" field.
func (suo *ShipmentUpdateOne) AddOtherChargeAmount(f float64) *ShipmentUpdateOne {
	suo.mutation.AddOtherChargeAmount(f)
	return suo
}

// ClearOtherChargeAmount clears the value of the "other_charge_amount" field.
func (suo *ShipmentUpdateOne) ClearOtherChargeAmount() *ShipmentUpdateOne {
	suo.mutation.ClearOtherChargeAmount()
	return suo
}

// SetFreightChargeAmount sets the "freight_charge_amount" field.
func (suo *ShipmentUpdateOne) SetFreightChargeAmount(f float64) *ShipmentUpdateOne {
	suo.mutation.ResetFreightChargeAmount()
	suo.mutation.SetFreightChargeAmount(f)
	return suo
}

// SetNillableFreightChargeAmount sets the "freight_charge_amount" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableFreightChargeAmount(f *float64) *ShipmentUpdateOne {
	if f != nil {
		suo.SetFreightChargeAmount(*f)
	}
	return suo
}

// AddFreightChargeAmount adds f to the "freight_charge_amount" field.
func (suo *ShipmentUpdateOne) AddFreightChargeAmount(f float64) *ShipmentUpdateOne {
	suo.mutation.AddFreightChargeAmount(f)
	return suo
}

// ClearFreightChargeAmount clears the value of the "freight_charge_amount" field.
func (suo *ShipmentUpdateOne) ClearFreightChargeAmount() *ShipmentUpdateOne {
	suo.mutation.ClearFreightChargeAmount()
	return suo
}

// SetRatingMethod sets the "rating_method" field.
func (suo *ShipmentUpdateOne) SetRatingMethod(sm shipment.RatingMethod) *ShipmentUpdateOne {
	suo.mutation.SetRatingMethod(sm)
	return suo
}

// SetNillableRatingMethod sets the "rating_method" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableRatingMethod(sm *shipment.RatingMethod) *ShipmentUpdateOne {
	if sm != nil {
		suo.SetRatingMethod(*sm)
	}
	return suo
}

// SetCustomerID sets the "customer_id" field.
func (suo *ShipmentUpdateOne) SetCustomerID(u uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetCustomerID(u)
	return suo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableCustomerID(u *uuid.UUID) *ShipmentUpdateOne {
	if u != nil {
		suo.SetCustomerID(*u)
	}
	return suo
}

// SetPieces sets the "pieces" field.
func (suo *ShipmentUpdateOne) SetPieces(f float64) *ShipmentUpdateOne {
	suo.mutation.ResetPieces()
	suo.mutation.SetPieces(f)
	return suo
}

// SetNillablePieces sets the "pieces" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillablePieces(f *float64) *ShipmentUpdateOne {
	if f != nil {
		suo.SetPieces(*f)
	}
	return suo
}

// AddPieces adds f to the "pieces" field.
func (suo *ShipmentUpdateOne) AddPieces(f float64) *ShipmentUpdateOne {
	suo.mutation.AddPieces(f)
	return suo
}

// ClearPieces clears the value of the "pieces" field.
func (suo *ShipmentUpdateOne) ClearPieces() *ShipmentUpdateOne {
	suo.mutation.ClearPieces()
	return suo
}

// SetWeight sets the "weight" field.
func (suo *ShipmentUpdateOne) SetWeight(f float64) *ShipmentUpdateOne {
	suo.mutation.ResetWeight()
	suo.mutation.SetWeight(f)
	return suo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableWeight(f *float64) *ShipmentUpdateOne {
	if f != nil {
		suo.SetWeight(*f)
	}
	return suo
}

// AddWeight adds f to the "weight" field.
func (suo *ShipmentUpdateOne) AddWeight(f float64) *ShipmentUpdateOne {
	suo.mutation.AddWeight(f)
	return suo
}

// ClearWeight clears the value of the "weight" field.
func (suo *ShipmentUpdateOne) ClearWeight() *ShipmentUpdateOne {
	suo.mutation.ClearWeight()
	return suo
}

// SetReadyToBill sets the "ready_to_bill" field.
func (suo *ShipmentUpdateOne) SetReadyToBill(b bool) *ShipmentUpdateOne {
	suo.mutation.SetReadyToBill(b)
	return suo
}

// SetNillableReadyToBill sets the "ready_to_bill" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableReadyToBill(b *bool) *ShipmentUpdateOne {
	if b != nil {
		suo.SetReadyToBill(*b)
	}
	return suo
}

// SetBillDate sets the "bill_date" field.
func (suo *ShipmentUpdateOne) SetBillDate(pg *pgtype.Date) *ShipmentUpdateOne {
	suo.mutation.SetBillDate(pg)
	return suo
}

// ClearBillDate clears the value of the "bill_date" field.
func (suo *ShipmentUpdateOne) ClearBillDate() *ShipmentUpdateOne {
	suo.mutation.ClearBillDate()
	return suo
}

// SetShipDate sets the "ship_date" field.
func (suo *ShipmentUpdateOne) SetShipDate(pg *pgtype.Date) *ShipmentUpdateOne {
	suo.mutation.SetShipDate(pg)
	return suo
}

// ClearShipDate clears the value of the "ship_date" field.
func (suo *ShipmentUpdateOne) ClearShipDate() *ShipmentUpdateOne {
	suo.mutation.ClearShipDate()
	return suo
}

// SetBilled sets the "billed" field.
func (suo *ShipmentUpdateOne) SetBilled(b bool) *ShipmentUpdateOne {
	suo.mutation.SetBilled(b)
	return suo
}

// SetNillableBilled sets the "billed" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableBilled(b *bool) *ShipmentUpdateOne {
	if b != nil {
		suo.SetBilled(*b)
	}
	return suo
}

// SetTransferredToBilling sets the "transferred_to_billing" field.
func (suo *ShipmentUpdateOne) SetTransferredToBilling(b bool) *ShipmentUpdateOne {
	suo.mutation.SetTransferredToBilling(b)
	return suo
}

// SetNillableTransferredToBilling sets the "transferred_to_billing" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableTransferredToBilling(b *bool) *ShipmentUpdateOne {
	if b != nil {
		suo.SetTransferredToBilling(*b)
	}
	return suo
}

// SetTransferredToBillingDate sets the "transferred_to_billing_date" field.
func (suo *ShipmentUpdateOne) SetTransferredToBillingDate(pg *pgtype.Date) *ShipmentUpdateOne {
	suo.mutation.SetTransferredToBillingDate(pg)
	return suo
}

// ClearTransferredToBillingDate clears the value of the "transferred_to_billing_date" field.
func (suo *ShipmentUpdateOne) ClearTransferredToBillingDate() *ShipmentUpdateOne {
	suo.mutation.ClearTransferredToBillingDate()
	return suo
}

// SetTotalChargeAmount sets the "total_charge_amount" field.
func (suo *ShipmentUpdateOne) SetTotalChargeAmount(f float64) *ShipmentUpdateOne {
	suo.mutation.ResetTotalChargeAmount()
	suo.mutation.SetTotalChargeAmount(f)
	return suo
}

// SetNillableTotalChargeAmount sets the "total_charge_amount" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableTotalChargeAmount(f *float64) *ShipmentUpdateOne {
	if f != nil {
		suo.SetTotalChargeAmount(*f)
	}
	return suo
}

// AddTotalChargeAmount adds f to the "total_charge_amount" field.
func (suo *ShipmentUpdateOne) AddTotalChargeAmount(f float64) *ShipmentUpdateOne {
	suo.mutation.AddTotalChargeAmount(f)
	return suo
}

// ClearTotalChargeAmount clears the value of the "total_charge_amount" field.
func (suo *ShipmentUpdateOne) ClearTotalChargeAmount() *ShipmentUpdateOne {
	suo.mutation.ClearTotalChargeAmount()
	return suo
}

// SetTrailerTypeID sets the "trailer_type_id" field.
func (suo *ShipmentUpdateOne) SetTrailerTypeID(u uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetTrailerTypeID(u)
	return suo
}

// SetNillableTrailerTypeID sets the "trailer_type_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableTrailerTypeID(u *uuid.UUID) *ShipmentUpdateOne {
	if u != nil {
		suo.SetTrailerTypeID(*u)
	}
	return suo
}

// ClearTrailerTypeID clears the value of the "trailer_type_id" field.
func (suo *ShipmentUpdateOne) ClearTrailerTypeID() *ShipmentUpdateOne {
	suo.mutation.ClearTrailerTypeID()
	return suo
}

// SetTractorTypeID sets the "tractor_type_id" field.
func (suo *ShipmentUpdateOne) SetTractorTypeID(u uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetTractorTypeID(u)
	return suo
}

// SetNillableTractorTypeID sets the "tractor_type_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableTractorTypeID(u *uuid.UUID) *ShipmentUpdateOne {
	if u != nil {
		suo.SetTractorTypeID(*u)
	}
	return suo
}

// ClearTractorTypeID clears the value of the "tractor_type_id" field.
func (suo *ShipmentUpdateOne) ClearTractorTypeID() *ShipmentUpdateOne {
	suo.mutation.ClearTractorTypeID()
	return suo
}

// SetTemperatureMin sets the "temperature_min" field.
func (suo *ShipmentUpdateOne) SetTemperatureMin(i int) *ShipmentUpdateOne {
	suo.mutation.ResetTemperatureMin()
	suo.mutation.SetTemperatureMin(i)
	return suo
}

// SetNillableTemperatureMin sets the "temperature_min" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableTemperatureMin(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetTemperatureMin(*i)
	}
	return suo
}

// AddTemperatureMin adds i to the "temperature_min" field.
func (suo *ShipmentUpdateOne) AddTemperatureMin(i int) *ShipmentUpdateOne {
	suo.mutation.AddTemperatureMin(i)
	return suo
}

// ClearTemperatureMin clears the value of the "temperature_min" field.
func (suo *ShipmentUpdateOne) ClearTemperatureMin() *ShipmentUpdateOne {
	suo.mutation.ClearTemperatureMin()
	return suo
}

// SetTemperatureMax sets the "temperature_max" field.
func (suo *ShipmentUpdateOne) SetTemperatureMax(i int) *ShipmentUpdateOne {
	suo.mutation.ResetTemperatureMax()
	suo.mutation.SetTemperatureMax(i)
	return suo
}

// SetNillableTemperatureMax sets the "temperature_max" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableTemperatureMax(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetTemperatureMax(*i)
	}
	return suo
}

// AddTemperatureMax adds i to the "temperature_max" field.
func (suo *ShipmentUpdateOne) AddTemperatureMax(i int) *ShipmentUpdateOne {
	suo.mutation.AddTemperatureMax(i)
	return suo
}

// ClearTemperatureMax clears the value of the "temperature_max" field.
func (suo *ShipmentUpdateOne) ClearTemperatureMax() *ShipmentUpdateOne {
	suo.mutation.ClearTemperatureMax()
	return suo
}

// SetBillOfLadingNumber sets the "bill_of_lading_number" field.
func (suo *ShipmentUpdateOne) SetBillOfLadingNumber(s string) *ShipmentUpdateOne {
	suo.mutation.SetBillOfLadingNumber(s)
	return suo
}

// SetNillableBillOfLadingNumber sets the "bill_of_lading_number" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableBillOfLadingNumber(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetBillOfLadingNumber(*s)
	}
	return suo
}

// ClearBillOfLadingNumber clears the value of the "bill_of_lading_number" field.
func (suo *ShipmentUpdateOne) ClearBillOfLadingNumber() *ShipmentUpdateOne {
	suo.mutation.ClearBillOfLadingNumber()
	return suo
}

// SetConsigneeReferenceNumber sets the "consignee_reference_number" field.
func (suo *ShipmentUpdateOne) SetConsigneeReferenceNumber(s string) *ShipmentUpdateOne {
	suo.mutation.SetConsigneeReferenceNumber(s)
	return suo
}

// SetNillableConsigneeReferenceNumber sets the "consignee_reference_number" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableConsigneeReferenceNumber(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetConsigneeReferenceNumber(*s)
	}
	return suo
}

// ClearConsigneeReferenceNumber clears the value of the "consignee_reference_number" field.
func (suo *ShipmentUpdateOne) ClearConsigneeReferenceNumber() *ShipmentUpdateOne {
	suo.mutation.ClearConsigneeReferenceNumber()
	return suo
}

// SetComment sets the "comment" field.
func (suo *ShipmentUpdateOne) SetComment(s string) *ShipmentUpdateOne {
	suo.mutation.SetComment(s)
	return suo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableComment(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetComment(*s)
	}
	return suo
}

// ClearComment clears the value of the "comment" field.
func (suo *ShipmentUpdateOne) ClearComment() *ShipmentUpdateOne {
	suo.mutation.ClearComment()
	return suo
}

// SetVoidedComment sets the "voided_comment" field.
func (suo *ShipmentUpdateOne) SetVoidedComment(s string) *ShipmentUpdateOne {
	suo.mutation.SetVoidedComment(s)
	return suo
}

// SetNillableVoidedComment sets the "voided_comment" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableVoidedComment(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetVoidedComment(*s)
	}
	return suo
}

// ClearVoidedComment clears the value of the "voided_comment" field.
func (suo *ShipmentUpdateOne) ClearVoidedComment() *ShipmentUpdateOne {
	suo.mutation.ClearVoidedComment()
	return suo
}

// SetAutoRated sets the "auto_rated" field.
func (suo *ShipmentUpdateOne) SetAutoRated(b bool) *ShipmentUpdateOne {
	suo.mutation.SetAutoRated(b)
	return suo
}

// SetNillableAutoRated sets the "auto_rated" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableAutoRated(b *bool) *ShipmentUpdateOne {
	if b != nil {
		suo.SetAutoRated(*b)
	}
	return suo
}

// SetCurrentSuffix sets the "current_suffix" field.
func (suo *ShipmentUpdateOne) SetCurrentSuffix(s string) *ShipmentUpdateOne {
	suo.mutation.SetCurrentSuffix(s)
	return suo
}

// SetNillableCurrentSuffix sets the "current_suffix" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableCurrentSuffix(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetCurrentSuffix(*s)
	}
	return suo
}

// ClearCurrentSuffix clears the value of the "current_suffix" field.
func (suo *ShipmentUpdateOne) ClearCurrentSuffix() *ShipmentUpdateOne {
	suo.mutation.ClearCurrentSuffix()
	return suo
}

// SetEntryMethod sets the "entry_method" field.
func (suo *ShipmentUpdateOne) SetEntryMethod(sm shipment.EntryMethod) *ShipmentUpdateOne {
	suo.mutation.SetEntryMethod(sm)
	return suo
}

// SetNillableEntryMethod sets the "entry_method" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableEntryMethod(sm *shipment.EntryMethod) *ShipmentUpdateOne {
	if sm != nil {
		suo.SetEntryMethod(*sm)
	}
	return suo
}

// SetCreatedBy sets the "created_by" field.
func (suo *ShipmentUpdateOne) SetCreatedBy(u uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetCreatedBy(u)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *ShipmentUpdateOne {
	if u != nil {
		suo.SetCreatedBy(*u)
	}
	return suo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suo *ShipmentUpdateOne) ClearCreatedBy() *ShipmentUpdateOne {
	suo.mutation.ClearCreatedBy()
	return suo
}

// SetIsHazardous sets the "is_hazardous" field.
func (suo *ShipmentUpdateOne) SetIsHazardous(b bool) *ShipmentUpdateOne {
	suo.mutation.SetIsHazardous(b)
	return suo
}

// SetNillableIsHazardous sets the "is_hazardous" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableIsHazardous(b *bool) *ShipmentUpdateOne {
	if b != nil {
		suo.SetIsHazardous(*b)
	}
	return suo
}

// SetShipmentType sets the "shipment_type" edge to the ShipmentType entity.
func (suo *ShipmentUpdateOne) SetShipmentType(s *ShipmentType) *ShipmentUpdateOne {
	return suo.SetShipmentTypeID(s.ID)
}

// SetServiceType sets the "service_type" edge to the ServiceType entity.
func (suo *ShipmentUpdateOne) SetServiceType(s *ServiceType) *ShipmentUpdateOne {
	return suo.SetServiceTypeID(s.ID)
}

// SetRevenueCode sets the "revenue_code" edge to the ServiceType entity.
func (suo *ShipmentUpdateOne) SetRevenueCode(s *ServiceType) *ShipmentUpdateOne {
	return suo.SetRevenueCodeID(s.ID)
}

// SetOriginLocation sets the "origin_location" edge to the Location entity.
func (suo *ShipmentUpdateOne) SetOriginLocation(l *Location) *ShipmentUpdateOne {
	return suo.SetOriginLocationID(l.ID)
}

// SetDestinationLocation sets the "destination_location" edge to the Location entity.
func (suo *ShipmentUpdateOne) SetDestinationLocation(l *Location) *ShipmentUpdateOne {
	return suo.SetDestinationLocationID(l.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (suo *ShipmentUpdateOne) SetCustomer(c *Customer) *ShipmentUpdateOne {
	return suo.SetCustomerID(c.ID)
}

// SetTrailerType sets the "trailer_type" edge to the EquipmentType entity.
func (suo *ShipmentUpdateOne) SetTrailerType(e *EquipmentType) *ShipmentUpdateOne {
	return suo.SetTrailerTypeID(e.ID)
}

// SetTractorType sets the "tractor_type" edge to the EquipmentType entity.
func (suo *ShipmentUpdateOne) SetTractorType(e *EquipmentType) *ShipmentUpdateOne {
	return suo.SetTractorTypeID(e.ID)
}

// SetCreatedByUserID sets the "created_by_user" edge to the User entity by ID.
func (suo *ShipmentUpdateOne) SetCreatedByUserID(id uuid.UUID) *ShipmentUpdateOne {
	suo.mutation.SetCreatedByUserID(id)
	return suo
}

// SetNillableCreatedByUserID sets the "created_by_user" edge to the User entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableCreatedByUserID(id *uuid.UUID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetCreatedByUserID(*id)
	}
	return suo
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (suo *ShipmentUpdateOne) SetCreatedByUser(u *User) *ShipmentUpdateOne {
	return suo.SetCreatedByUserID(u.ID)
}

// Mutation returns the ShipmentMutation object of the builder.
func (suo *ShipmentUpdateOne) Mutation() *ShipmentMutation {
	return suo.mutation
}

// ClearShipmentType clears the "shipment_type" edge to the ShipmentType entity.
func (suo *ShipmentUpdateOne) ClearShipmentType() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentType()
	return suo
}

// ClearServiceType clears the "service_type" edge to the ServiceType entity.
func (suo *ShipmentUpdateOne) ClearServiceType() *ShipmentUpdateOne {
	suo.mutation.ClearServiceType()
	return suo
}

// ClearRevenueCode clears the "revenue_code" edge to the ServiceType entity.
func (suo *ShipmentUpdateOne) ClearRevenueCode() *ShipmentUpdateOne {
	suo.mutation.ClearRevenueCode()
	return suo
}

// ClearOriginLocation clears the "origin_location" edge to the Location entity.
func (suo *ShipmentUpdateOne) ClearOriginLocation() *ShipmentUpdateOne {
	suo.mutation.ClearOriginLocation()
	return suo
}

// ClearDestinationLocation clears the "destination_location" edge to the Location entity.
func (suo *ShipmentUpdateOne) ClearDestinationLocation() *ShipmentUpdateOne {
	suo.mutation.ClearDestinationLocation()
	return suo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (suo *ShipmentUpdateOne) ClearCustomer() *ShipmentUpdateOne {
	suo.mutation.ClearCustomer()
	return suo
}

// ClearTrailerType clears the "trailer_type" edge to the EquipmentType entity.
func (suo *ShipmentUpdateOne) ClearTrailerType() *ShipmentUpdateOne {
	suo.mutation.ClearTrailerType()
	return suo
}

// ClearTractorType clears the "tractor_type" edge to the EquipmentType entity.
func (suo *ShipmentUpdateOne) ClearTractorType() *ShipmentUpdateOne {
	suo.mutation.ClearTractorType()
	return suo
}

// ClearCreatedByUser clears the "created_by_user" edge to the User entity.
func (suo *ShipmentUpdateOne) ClearCreatedByUser() *ShipmentUpdateOne {
	suo.mutation.ClearCreatedByUser()
	return suo
}

// Where appends a list predicates to the ShipmentUpdate builder.
func (suo *ShipmentUpdateOne) Where(ps ...predicate.Shipment) *ShipmentUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShipmentUpdateOne) Select(field string, fields ...string) *ShipmentUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shipment entity.
func (suo *ShipmentUpdateOne) Save(ctx context.Context) (*Shipment, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShipmentUpdateOne) SaveX(ctx context.Context) *Shipment {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShipmentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ShipmentUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := shipment.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShipmentUpdateOne) check() error {
	if v, ok := suo.mutation.ProNumber(); ok {
		if err := shipment.ProNumberValidator(v); err != nil {
			return &ValidationError{Name: "pro_number", err: fmt.Errorf(`ent: validator failed for field "Shipment.pro_number": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Status(); ok {
		if err := shipment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Shipment.status": %w`, err)}
		}
	}
	if v, ok := suo.mutation.RatingUnit(); ok {
		if err := shipment.RatingUnitValidator(v); err != nil {
			return &ValidationError{Name: "rating_unit", err: fmt.Errorf(`ent: validator failed for field "Shipment.rating_unit": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Mileage(); ok {
		if err := shipment.MileageValidator(v); err != nil {
			return &ValidationError{Name: "mileage", err: fmt.Errorf(`ent: validator failed for field "Shipment.mileage": %w`, err)}
		}
	}
	if v, ok := suo.mutation.OtherChargeAmount(); ok {
		if err := shipment.OtherChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "other_charge_amount", err: fmt.Errorf(`ent: validator failed for field "Shipment.other_charge_amount": %w`, err)}
		}
	}
	if v, ok := suo.mutation.FreightChargeAmount(); ok {
		if err := shipment.FreightChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "freight_charge_amount", err: fmt.Errorf(`ent: validator failed for field "Shipment.freight_charge_amount": %w`, err)}
		}
	}
	if v, ok := suo.mutation.RatingMethod(); ok {
		if err := shipment.RatingMethodValidator(v); err != nil {
			return &ValidationError{Name: "rating_method", err: fmt.Errorf(`ent: validator failed for field "Shipment.rating_method": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Pieces(); ok {
		if err := shipment.PiecesValidator(v); err != nil {
			return &ValidationError{Name: "pieces", err: fmt.Errorf(`ent: validator failed for field "Shipment.pieces": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Weight(); ok {
		if err := shipment.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Shipment.weight": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TotalChargeAmount(); ok {
		if err := shipment.TotalChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "total_charge_amount", err: fmt.Errorf(`ent: validator failed for field "Shipment.total_charge_amount": %w`, err)}
		}
	}
	if v, ok := suo.mutation.VoidedComment(); ok {
		if err := shipment.VoidedCommentValidator(v); err != nil {
			return &ValidationError{Name: "voided_comment", err: fmt.Errorf(`ent: validator failed for field "Shipment.voided_comment": %w`, err)}
		}
	}
	if v, ok := suo.mutation.EntryMethod(); ok {
		if err := shipment.EntryMethodValidator(v); err != nil {
			return &ValidationError{Name: "entry_method", err: fmt.Errorf(`ent: validator failed for field "Shipment.entry_method": %w`, err)}
		}
	}
	if _, ok := suo.mutation.BusinessUnitID(); suo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.business_unit"`)
	}
	if _, ok := suo.mutation.OrganizationID(); suo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.organization"`)
	}
	if _, ok := suo.mutation.ShipmentTypeID(); suo.mutation.ShipmentTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.shipment_type"`)
	}
	if _, ok := suo.mutation.CustomerID(); suo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ShipmentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ShipmentUpdateOne) sqlSave(ctx context.Context) (_node *Shipment, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipment.Table, shipment.Columns, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shipment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipment.FieldID)
		for _, f := range fields {
			if !shipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Version(); ok {
		_spec.SetField(shipment.FieldVersion, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedVersion(); ok {
		_spec.AddField(shipment.FieldVersion, field.TypeInt, value)
	}
	if value, ok := suo.mutation.ProNumber(); ok {
		_spec.SetField(shipment.FieldProNumber, field.TypeString, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(shipment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.OriginAddressLine(); ok {
		_spec.SetField(shipment.FieldOriginAddressLine, field.TypeString, value)
	}
	if suo.mutation.OriginAddressLineCleared() {
		_spec.ClearField(shipment.FieldOriginAddressLine, field.TypeString)
	}
	if value, ok := suo.mutation.OriginAppointmentStart(); ok {
		_spec.SetField(shipment.FieldOriginAppointmentStart, field.TypeTime, value)
	}
	if suo.mutation.OriginAppointmentStartCleared() {
		_spec.ClearField(shipment.FieldOriginAppointmentStart, field.TypeTime)
	}
	if value, ok := suo.mutation.OriginAppointmentEnd(); ok {
		_spec.SetField(shipment.FieldOriginAppointmentEnd, field.TypeTime, value)
	}
	if suo.mutation.OriginAppointmentEndCleared() {
		_spec.ClearField(shipment.FieldOriginAppointmentEnd, field.TypeTime)
	}
	if value, ok := suo.mutation.DestinationAddressLine(); ok {
		_spec.SetField(shipment.FieldDestinationAddressLine, field.TypeString, value)
	}
	if suo.mutation.DestinationAddressLineCleared() {
		_spec.ClearField(shipment.FieldDestinationAddressLine, field.TypeString)
	}
	if value, ok := suo.mutation.DestinationAppointmentStart(); ok {
		_spec.SetField(shipment.FieldDestinationAppointmentStart, field.TypeTime, value)
	}
	if suo.mutation.DestinationAppointmentStartCleared() {
		_spec.ClearField(shipment.FieldDestinationAppointmentStart, field.TypeTime)
	}
	if value, ok := suo.mutation.DestinationAppointmentEnd(); ok {
		_spec.SetField(shipment.FieldDestinationAppointmentEnd, field.TypeTime, value)
	}
	if suo.mutation.DestinationAppointmentEndCleared() {
		_spec.ClearField(shipment.FieldDestinationAppointmentEnd, field.TypeTime)
	}
	if value, ok := suo.mutation.RatingUnit(); ok {
		_spec.SetField(shipment.FieldRatingUnit, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedRatingUnit(); ok {
		_spec.AddField(shipment.FieldRatingUnit, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Mileage(); ok {
		_spec.SetField(shipment.FieldMileage, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedMileage(); ok {
		_spec.AddField(shipment.FieldMileage, field.TypeFloat64, value)
	}
	if suo.mutation.MileageCleared() {
		_spec.ClearField(shipment.FieldMileage, field.TypeFloat64)
	}
	if value, ok := suo.mutation.OtherChargeAmount(); ok {
		_spec.SetField(shipment.FieldOtherChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedOtherChargeAmount(); ok {
		_spec.AddField(shipment.FieldOtherChargeAmount, field.TypeFloat64, value)
	}
	if suo.mutation.OtherChargeAmountCleared() {
		_spec.ClearField(shipment.FieldOtherChargeAmount, field.TypeFloat64)
	}
	if value, ok := suo.mutation.FreightChargeAmount(); ok {
		_spec.SetField(shipment.FieldFreightChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedFreightChargeAmount(); ok {
		_spec.AddField(shipment.FieldFreightChargeAmount, field.TypeFloat64, value)
	}
	if suo.mutation.FreightChargeAmountCleared() {
		_spec.ClearField(shipment.FieldFreightChargeAmount, field.TypeFloat64)
	}
	if value, ok := suo.mutation.RatingMethod(); ok {
		_spec.SetField(shipment.FieldRatingMethod, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Pieces(); ok {
		_spec.SetField(shipment.FieldPieces, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedPieces(); ok {
		_spec.AddField(shipment.FieldPieces, field.TypeFloat64, value)
	}
	if suo.mutation.PiecesCleared() {
		_spec.ClearField(shipment.FieldPieces, field.TypeFloat64)
	}
	if value, ok := suo.mutation.Weight(); ok {
		_spec.SetField(shipment.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedWeight(); ok {
		_spec.AddField(shipment.FieldWeight, field.TypeFloat64, value)
	}
	if suo.mutation.WeightCleared() {
		_spec.ClearField(shipment.FieldWeight, field.TypeFloat64)
	}
	if value, ok := suo.mutation.ReadyToBill(); ok {
		_spec.SetField(shipment.FieldReadyToBill, field.TypeBool, value)
	}
	if value, ok := suo.mutation.BillDate(); ok {
		_spec.SetField(shipment.FieldBillDate, field.TypeOther, value)
	}
	if suo.mutation.BillDateCleared() {
		_spec.ClearField(shipment.FieldBillDate, field.TypeOther)
	}
	if value, ok := suo.mutation.ShipDate(); ok {
		_spec.SetField(shipment.FieldShipDate, field.TypeOther, value)
	}
	if suo.mutation.ShipDateCleared() {
		_spec.ClearField(shipment.FieldShipDate, field.TypeOther)
	}
	if value, ok := suo.mutation.Billed(); ok {
		_spec.SetField(shipment.FieldBilled, field.TypeBool, value)
	}
	if value, ok := suo.mutation.TransferredToBilling(); ok {
		_spec.SetField(shipment.FieldTransferredToBilling, field.TypeBool, value)
	}
	if value, ok := suo.mutation.TransferredToBillingDate(); ok {
		_spec.SetField(shipment.FieldTransferredToBillingDate, field.TypeOther, value)
	}
	if suo.mutation.TransferredToBillingDateCleared() {
		_spec.ClearField(shipment.FieldTransferredToBillingDate, field.TypeOther)
	}
	if value, ok := suo.mutation.TotalChargeAmount(); ok {
		_spec.SetField(shipment.FieldTotalChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedTotalChargeAmount(); ok {
		_spec.AddField(shipment.FieldTotalChargeAmount, field.TypeFloat64, value)
	}
	if suo.mutation.TotalChargeAmountCleared() {
		_spec.ClearField(shipment.FieldTotalChargeAmount, field.TypeFloat64)
	}
	if value, ok := suo.mutation.TemperatureMin(); ok {
		_spec.SetField(shipment.FieldTemperatureMin, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedTemperatureMin(); ok {
		_spec.AddField(shipment.FieldTemperatureMin, field.TypeInt, value)
	}
	if suo.mutation.TemperatureMinCleared() {
		_spec.ClearField(shipment.FieldTemperatureMin, field.TypeInt)
	}
	if value, ok := suo.mutation.TemperatureMax(); ok {
		_spec.SetField(shipment.FieldTemperatureMax, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedTemperatureMax(); ok {
		_spec.AddField(shipment.FieldTemperatureMax, field.TypeInt, value)
	}
	if suo.mutation.TemperatureMaxCleared() {
		_spec.ClearField(shipment.FieldTemperatureMax, field.TypeInt)
	}
	if value, ok := suo.mutation.BillOfLadingNumber(); ok {
		_spec.SetField(shipment.FieldBillOfLadingNumber, field.TypeString, value)
	}
	if suo.mutation.BillOfLadingNumberCleared() {
		_spec.ClearField(shipment.FieldBillOfLadingNumber, field.TypeString)
	}
	if value, ok := suo.mutation.ConsigneeReferenceNumber(); ok {
		_spec.SetField(shipment.FieldConsigneeReferenceNumber, field.TypeString, value)
	}
	if suo.mutation.ConsigneeReferenceNumberCleared() {
		_spec.ClearField(shipment.FieldConsigneeReferenceNumber, field.TypeString)
	}
	if value, ok := suo.mutation.Comment(); ok {
		_spec.SetField(shipment.FieldComment, field.TypeString, value)
	}
	if suo.mutation.CommentCleared() {
		_spec.ClearField(shipment.FieldComment, field.TypeString)
	}
	if value, ok := suo.mutation.VoidedComment(); ok {
		_spec.SetField(shipment.FieldVoidedComment, field.TypeString, value)
	}
	if suo.mutation.VoidedCommentCleared() {
		_spec.ClearField(shipment.FieldVoidedComment, field.TypeString)
	}
	if value, ok := suo.mutation.AutoRated(); ok {
		_spec.SetField(shipment.FieldAutoRated, field.TypeBool, value)
	}
	if value, ok := suo.mutation.CurrentSuffix(); ok {
		_spec.SetField(shipment.FieldCurrentSuffix, field.TypeString, value)
	}
	if suo.mutation.CurrentSuffixCleared() {
		_spec.ClearField(shipment.FieldCurrentSuffix, field.TypeString)
	}
	if value, ok := suo.mutation.EntryMethod(); ok {
		_spec.SetField(shipment.FieldEntryMethod, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.IsHazardous(); ok {
		_spec.SetField(shipment.FieldIsHazardous, field.TypeBool, value)
	}
	if suo.mutation.ShipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ShipmentTypeTable,
			Columns: []string{shipment.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ShipmentTypeTable,
			Columns: []string{shipment.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ServiceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ServiceTypeTable,
			Columns: []string{shipment.ServiceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ServiceTypeTable,
			Columns: []string{shipment.ServiceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RevenueCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.RevenueCodeTable,
			Columns: []string{shipment.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RevenueCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.RevenueCodeTable,
			Columns: []string{shipment.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OriginLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.OriginLocationTable,
			Columns: []string{shipment.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OriginLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.OriginLocationTable,
			Columns: []string{shipment.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DestinationLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.DestinationLocationTable,
			Columns: []string{shipment.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DestinationLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.DestinationLocationTable,
			Columns: []string{shipment.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CustomerTable,
			Columns: []string{shipment.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CustomerTable,
			Columns: []string{shipment.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TrailerTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TrailerTypeTable,
			Columns: []string{shipment.TrailerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TrailerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TrailerTypeTable,
			Columns: []string{shipment.TrailerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TractorTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TractorTypeTable,
			Columns: []string{shipment.TractorTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TractorTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TractorTypeTable,
			Columns: []string{shipment.TractorTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CreatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CreatedByUserTable,
			Columns: []string{shipment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CreatedByUserTable,
			Columns: []string{shipment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Shipment{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
