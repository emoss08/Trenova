// Code generated by ent, DO NOT EDIT.

package organization

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldBusinessUnitID holds the string denoting the business_unit_id field in the database.
	FieldBusinessUnitID = "business_unit_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldScacCode holds the string denoting the scac_code field in the database.
	FieldScacCode = "scac_code"
	// FieldDotNumber holds the string denoting the dot_number field in the database.
	FieldDotNumber = "dot_number"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldOrgType holds the string denoting the org_type field in the database.
	FieldOrgType = "org_type"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// EdgeBusinessUnit holds the string denoting the business_unit edge name in mutations.
	EdgeBusinessUnit = "business_unit"
	// EdgeAccountingControl holds the string denoting the accounting_control edge name in mutations.
	EdgeAccountingControl = "accounting_control"
	// EdgeBillingControl holds the string denoting the billing_control edge name in mutations.
	EdgeBillingControl = "billing_control"
	// EdgeDispatchControl holds the string denoting the dispatch_control edge name in mutations.
	EdgeDispatchControl = "dispatch_control"
	// EdgeFeasibilityToolControl holds the string denoting the feasibility_tool_control edge name in mutations.
	EdgeFeasibilityToolControl = "feasibility_tool_control"
	// EdgeInvoiceControl holds the string denoting the invoice_control edge name in mutations.
	EdgeInvoiceControl = "invoice_control"
	// EdgeRouteControl holds the string denoting the route_control edge name in mutations.
	EdgeRouteControl = "route_control"
	// EdgeShipmentControl holds the string denoting the shipment_control edge name in mutations.
	EdgeShipmentControl = "shipment_control"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// BusinessUnitTable is the table that holds the business_unit relation/edge.
	BusinessUnitTable = "organizations"
	// BusinessUnitInverseTable is the table name for the BusinessUnit entity.
	// It exists in this package in order to avoid circular dependency with the "businessunit" package.
	BusinessUnitInverseTable = "business_units"
	// BusinessUnitColumn is the table column denoting the business_unit relation/edge.
	BusinessUnitColumn = "business_unit_id"
	// AccountingControlTable is the table that holds the accounting_control relation/edge.
	AccountingControlTable = "accounting_controls"
	// AccountingControlInverseTable is the table name for the AccountingControl entity.
	// It exists in this package in order to avoid circular dependency with the "accountingcontrol" package.
	AccountingControlInverseTable = "accounting_controls"
	// AccountingControlColumn is the table column denoting the accounting_control relation/edge.
	AccountingControlColumn = "organization_id"
	// BillingControlTable is the table that holds the billing_control relation/edge.
	BillingControlTable = "billing_controls"
	// BillingControlInverseTable is the table name for the BillingControl entity.
	// It exists in this package in order to avoid circular dependency with the "billingcontrol" package.
	BillingControlInverseTable = "billing_controls"
	// BillingControlColumn is the table column denoting the billing_control relation/edge.
	BillingControlColumn = "organization_id"
	// DispatchControlTable is the table that holds the dispatch_control relation/edge.
	DispatchControlTable = "dispatch_controls"
	// DispatchControlInverseTable is the table name for the DispatchControl entity.
	// It exists in this package in order to avoid circular dependency with the "dispatchcontrol" package.
	DispatchControlInverseTable = "dispatch_controls"
	// DispatchControlColumn is the table column denoting the dispatch_control relation/edge.
	DispatchControlColumn = "organization_id"
	// FeasibilityToolControlTable is the table that holds the feasibility_tool_control relation/edge.
	FeasibilityToolControlTable = "feasibility_tool_controls"
	// FeasibilityToolControlInverseTable is the table name for the FeasibilityToolControl entity.
	// It exists in this package in order to avoid circular dependency with the "feasibilitytoolcontrol" package.
	FeasibilityToolControlInverseTable = "feasibility_tool_controls"
	// FeasibilityToolControlColumn is the table column denoting the feasibility_tool_control relation/edge.
	FeasibilityToolControlColumn = "organization_id"
	// InvoiceControlTable is the table that holds the invoice_control relation/edge.
	InvoiceControlTable = "invoice_controls"
	// InvoiceControlInverseTable is the table name for the InvoiceControl entity.
	// It exists in this package in order to avoid circular dependency with the "invoicecontrol" package.
	InvoiceControlInverseTable = "invoice_controls"
	// InvoiceControlColumn is the table column denoting the invoice_control relation/edge.
	InvoiceControlColumn = "organization_id"
	// RouteControlTable is the table that holds the route_control relation/edge.
	RouteControlTable = "route_controls"
	// RouteControlInverseTable is the table name for the RouteControl entity.
	// It exists in this package in order to avoid circular dependency with the "routecontrol" package.
	RouteControlInverseTable = "route_controls"
	// RouteControlColumn is the table column denoting the route_control relation/edge.
	RouteControlColumn = "organization_id"
	// ShipmentControlTable is the table that holds the shipment_control relation/edge.
	ShipmentControlTable = "shipment_controls"
	// ShipmentControlInverseTable is the table name for the ShipmentControl entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentcontrol" package.
	ShipmentControlInverseTable = "shipment_controls"
	// ShipmentControlColumn is the table column denoting the shipment_control relation/edge.
	ShipmentControlColumn = "organization_id"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldBusinessUnitID,
	FieldName,
	FieldScacCode,
	FieldDotNumber,
	FieldLogoURL,
	FieldOrgType,
	FieldTimezone,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ScacCodeValidator is a validator for the "scac_code" field. It is called by the builders before save.
	ScacCodeValidator func(string) error
	// DotNumberValidator is a validator for the "dot_number" field. It is called by the builders before save.
	DotNumberValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrgType defines the type for the "org_type" enum field.
type OrgType string

// OrgTypeA is the default value of the OrgType enum.
const DefaultOrgType = OrgTypeA

// OrgType values.
const (
	OrgTypeA OrgType = "A"
	OrgTypeB OrgType = "B"
	OrgTypeX OrgType = "X"
)

func (ot OrgType) String() string {
	return string(ot)
}

// OrgTypeValidator is a validator for the "org_type" field enum values. It is called by the builders before save.
func OrgTypeValidator(ot OrgType) error {
	switch ot {
	case OrgTypeA, OrgTypeB, OrgTypeX:
		return nil
	default:
		return fmt.Errorf("organization: invalid enum value for org_type field: %q", ot)
	}
}

// Timezone defines the type for the "timezone" enum field.
type Timezone string

// TimezoneAmericaLosAngeles is the default value of the Timezone enum.
const DefaultTimezone = TimezoneAmericaLosAngeles

// Timezone values.
const (
	TimezoneAmericaLosAngeles Timezone = "AmericaLosAngeles"
	TimezoneAmericaDenver     Timezone = "AmericaDenver"
	TimezoneAmericaChicago    Timezone = "AmericaChicago"
	TimezoneAmericaNewYork    Timezone = "AmericaNewYork"
)

func (t Timezone) String() string {
	return string(t)
}

// TimezoneValidator is a validator for the "timezone" field enum values. It is called by the builders before save.
func TimezoneValidator(t Timezone) error {
	switch t {
	case TimezoneAmericaLosAngeles, TimezoneAmericaDenver, TimezoneAmericaChicago, TimezoneAmericaNewYork:
		return nil
	default:
		return fmt.Errorf("organization: invalid enum value for timezone field: %q", t)
	}
}

// OrderOption defines the ordering options for the Organization queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBusinessUnitID orders the results by the business_unit_id field.
func ByBusinessUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessUnitID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByScacCode orders the results by the scac_code field.
func ByScacCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScacCode, opts...).ToFunc()
}

// ByDotNumber orders the results by the dot_number field.
func ByDotNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDotNumber, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByOrgType orders the results by the org_type field.
func ByOrgType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgType, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByBusinessUnitField orders the results by business_unit field.
func ByBusinessUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByAccountingControlField orders the results by accounting_control field.
func ByAccountingControlField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountingControlStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillingControlField orders the results by billing_control field.
func ByBillingControlField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingControlStep(), sql.OrderByField(field, opts...))
	}
}

// ByDispatchControlField orders the results by dispatch_control field.
func ByDispatchControlField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDispatchControlStep(), sql.OrderByField(field, opts...))
	}
}

// ByFeasibilityToolControlField orders the results by feasibility_tool_control field.
func ByFeasibilityToolControlField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeasibilityToolControlStep(), sql.OrderByField(field, opts...))
	}
}

// ByInvoiceControlField orders the results by invoice_control field.
func ByInvoiceControlField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoiceControlStep(), sql.OrderByField(field, opts...))
	}
}

// ByRouteControlField orders the results by route_control field.
func ByRouteControlField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRouteControlStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentControlField orders the results by shipment_control field.
func ByShipmentControlField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentControlStep(), sql.OrderByField(field, opts...))
	}
}
func newBusinessUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BusinessUnitTable, BusinessUnitColumn),
	)
}
func newAccountingControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountingControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AccountingControlTable, AccountingControlColumn),
	)
}
func newBillingControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BillingControlTable, BillingControlColumn),
	)
}
func newDispatchControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DispatchControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DispatchControlTable, DispatchControlColumn),
	)
}
func newFeasibilityToolControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeasibilityToolControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, FeasibilityToolControlTable, FeasibilityToolControlColumn),
	)
}
func newInvoiceControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoiceControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, InvoiceControlTable, InvoiceControlColumn),
	)
}
func newRouteControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RouteControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RouteControlTable, RouteControlColumn),
	)
}
func newShipmentControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentControlTable, ShipmentControlColumn),
	)
}
