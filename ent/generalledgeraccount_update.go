// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/tag"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// GeneralLedgerAccountUpdate is the builder for updating GeneralLedgerAccount entities.
type GeneralLedgerAccountUpdate struct {
	config
	hooks     []Hook
	mutation  *GeneralLedgerAccountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GeneralLedgerAccountUpdate builder.
func (glau *GeneralLedgerAccountUpdate) Where(ps ...predicate.GeneralLedgerAccount) *GeneralLedgerAccountUpdate {
	glau.mutation.Where(ps...)
	return glau
}

// SetUpdatedAt sets the "updated_at" field.
func (glau *GeneralLedgerAccountUpdate) SetUpdatedAt(t time.Time) *GeneralLedgerAccountUpdate {
	glau.mutation.SetUpdatedAt(t)
	return glau
}

// SetStatus sets the "status" field.
func (glau *GeneralLedgerAccountUpdate) SetStatus(ge generalledgeraccount.Status) *GeneralLedgerAccountUpdate {
	glau.mutation.SetStatus(ge)
	return glau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableStatus(ge *generalledgeraccount.Status) *GeneralLedgerAccountUpdate {
	if ge != nil {
		glau.SetStatus(*ge)
	}
	return glau
}

// SetAccountNumber sets the "account_number" field.
func (glau *GeneralLedgerAccountUpdate) SetAccountNumber(s string) *GeneralLedgerAccountUpdate {
	glau.mutation.SetAccountNumber(s)
	return glau
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableAccountNumber(s *string) *GeneralLedgerAccountUpdate {
	if s != nil {
		glau.SetAccountNumber(*s)
	}
	return glau
}

// SetAccountType sets the "account_type" field.
func (glau *GeneralLedgerAccountUpdate) SetAccountType(gt generalledgeraccount.AccountType) *GeneralLedgerAccountUpdate {
	glau.mutation.SetAccountType(gt)
	return glau
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableAccountType(gt *generalledgeraccount.AccountType) *GeneralLedgerAccountUpdate {
	if gt != nil {
		glau.SetAccountType(*gt)
	}
	return glau
}

// SetCashFlowType sets the "cash_flow_type" field.
func (glau *GeneralLedgerAccountUpdate) SetCashFlowType(s string) *GeneralLedgerAccountUpdate {
	glau.mutation.SetCashFlowType(s)
	return glau
}

// SetNillableCashFlowType sets the "cash_flow_type" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableCashFlowType(s *string) *GeneralLedgerAccountUpdate {
	if s != nil {
		glau.SetCashFlowType(*s)
	}
	return glau
}

// ClearCashFlowType clears the value of the "cash_flow_type" field.
func (glau *GeneralLedgerAccountUpdate) ClearCashFlowType() *GeneralLedgerAccountUpdate {
	glau.mutation.ClearCashFlowType()
	return glau
}

// SetAccountSubType sets the "account_sub_type" field.
func (glau *GeneralLedgerAccountUpdate) SetAccountSubType(s string) *GeneralLedgerAccountUpdate {
	glau.mutation.SetAccountSubType(s)
	return glau
}

// SetNillableAccountSubType sets the "account_sub_type" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableAccountSubType(s *string) *GeneralLedgerAccountUpdate {
	if s != nil {
		glau.SetAccountSubType(*s)
	}
	return glau
}

// ClearAccountSubType clears the value of the "account_sub_type" field.
func (glau *GeneralLedgerAccountUpdate) ClearAccountSubType() *GeneralLedgerAccountUpdate {
	glau.mutation.ClearAccountSubType()
	return glau
}

// SetAccountClass sets the "account_class" field.
func (glau *GeneralLedgerAccountUpdate) SetAccountClass(s string) *GeneralLedgerAccountUpdate {
	glau.mutation.SetAccountClass(s)
	return glau
}

// SetNillableAccountClass sets the "account_class" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableAccountClass(s *string) *GeneralLedgerAccountUpdate {
	if s != nil {
		glau.SetAccountClass(*s)
	}
	return glau
}

// ClearAccountClass clears the value of the "account_class" field.
func (glau *GeneralLedgerAccountUpdate) ClearAccountClass() *GeneralLedgerAccountUpdate {
	glau.mutation.ClearAccountClass()
	return glau
}

// SetBalance sets the "balance" field.
func (glau *GeneralLedgerAccountUpdate) SetBalance(f float64) *GeneralLedgerAccountUpdate {
	glau.mutation.ResetBalance()
	glau.mutation.SetBalance(f)
	return glau
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableBalance(f *float64) *GeneralLedgerAccountUpdate {
	if f != nil {
		glau.SetBalance(*f)
	}
	return glau
}

// AddBalance adds f to the "balance" field.
func (glau *GeneralLedgerAccountUpdate) AddBalance(f float64) *GeneralLedgerAccountUpdate {
	glau.mutation.AddBalance(f)
	return glau
}

// ClearBalance clears the value of the "balance" field.
func (glau *GeneralLedgerAccountUpdate) ClearBalance() *GeneralLedgerAccountUpdate {
	glau.mutation.ClearBalance()
	return glau
}

// SetInterestRate sets the "interest_rate" field.
func (glau *GeneralLedgerAccountUpdate) SetInterestRate(f float64) *GeneralLedgerAccountUpdate {
	glau.mutation.ResetInterestRate()
	glau.mutation.SetInterestRate(f)
	return glau
}

// SetNillableInterestRate sets the "interest_rate" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableInterestRate(f *float64) *GeneralLedgerAccountUpdate {
	if f != nil {
		glau.SetInterestRate(*f)
	}
	return glau
}

// AddInterestRate adds f to the "interest_rate" field.
func (glau *GeneralLedgerAccountUpdate) AddInterestRate(f float64) *GeneralLedgerAccountUpdate {
	glau.mutation.AddInterestRate(f)
	return glau
}

// ClearInterestRate clears the value of the "interest_rate" field.
func (glau *GeneralLedgerAccountUpdate) ClearInterestRate() *GeneralLedgerAccountUpdate {
	glau.mutation.ClearInterestRate()
	return glau
}

// SetDateClosed sets the "date_closed" field.
func (glau *GeneralLedgerAccountUpdate) SetDateClosed(pg *pgtype.Date) *GeneralLedgerAccountUpdate {
	glau.mutation.SetDateClosed(pg)
	return glau
}

// ClearDateClosed clears the value of the "date_closed" field.
func (glau *GeneralLedgerAccountUpdate) ClearDateClosed() *GeneralLedgerAccountUpdate {
	glau.mutation.ClearDateClosed()
	return glau
}

// SetNotes sets the "notes" field.
func (glau *GeneralLedgerAccountUpdate) SetNotes(s string) *GeneralLedgerAccountUpdate {
	glau.mutation.SetNotes(s)
	return glau
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableNotes(s *string) *GeneralLedgerAccountUpdate {
	if s != nil {
		glau.SetNotes(*s)
	}
	return glau
}

// ClearNotes clears the value of the "notes" field.
func (glau *GeneralLedgerAccountUpdate) ClearNotes() *GeneralLedgerAccountUpdate {
	glau.mutation.ClearNotes()
	return glau
}

// SetIsTaxRelevant sets the "is_tax_relevant" field.
func (glau *GeneralLedgerAccountUpdate) SetIsTaxRelevant(b bool) *GeneralLedgerAccountUpdate {
	glau.mutation.SetIsTaxRelevant(b)
	return glau
}

// SetNillableIsTaxRelevant sets the "is_tax_relevant" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableIsTaxRelevant(b *bool) *GeneralLedgerAccountUpdate {
	if b != nil {
		glau.SetIsTaxRelevant(*b)
	}
	return glau
}

// SetIsReconciled sets the "is_reconciled" field.
func (glau *GeneralLedgerAccountUpdate) SetIsReconciled(b bool) *GeneralLedgerAccountUpdate {
	glau.mutation.SetIsReconciled(b)
	return glau
}

// SetNillableIsReconciled sets the "is_reconciled" field if the given value is not nil.
func (glau *GeneralLedgerAccountUpdate) SetNillableIsReconciled(b *bool) *GeneralLedgerAccountUpdate {
	if b != nil {
		glau.SetIsReconciled(*b)
	}
	return glau
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (glau *GeneralLedgerAccountUpdate) AddTagIDs(ids ...uuid.UUID) *GeneralLedgerAccountUpdate {
	glau.mutation.AddTagIDs(ids...)
	return glau
}

// AddTags adds the "tags" edges to the Tag entity.
func (glau *GeneralLedgerAccountUpdate) AddTags(t ...*Tag) *GeneralLedgerAccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return glau.AddTagIDs(ids...)
}

// Mutation returns the GeneralLedgerAccountMutation object of the builder.
func (glau *GeneralLedgerAccountUpdate) Mutation() *GeneralLedgerAccountMutation {
	return glau.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (glau *GeneralLedgerAccountUpdate) ClearTags() *GeneralLedgerAccountUpdate {
	glau.mutation.ClearTags()
	return glau
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (glau *GeneralLedgerAccountUpdate) RemoveTagIDs(ids ...uuid.UUID) *GeneralLedgerAccountUpdate {
	glau.mutation.RemoveTagIDs(ids...)
	return glau
}

// RemoveTags removes "tags" edges to Tag entities.
func (glau *GeneralLedgerAccountUpdate) RemoveTags(t ...*Tag) *GeneralLedgerAccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return glau.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (glau *GeneralLedgerAccountUpdate) Save(ctx context.Context) (int, error) {
	glau.defaults()
	return withHooks(ctx, glau.sqlSave, glau.mutation, glau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (glau *GeneralLedgerAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := glau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (glau *GeneralLedgerAccountUpdate) Exec(ctx context.Context) error {
	_, err := glau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glau *GeneralLedgerAccountUpdate) ExecX(ctx context.Context) {
	if err := glau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (glau *GeneralLedgerAccountUpdate) defaults() {
	if _, ok := glau.mutation.UpdatedAt(); !ok {
		v := generalledgeraccount.UpdateDefaultUpdatedAt()
		glau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (glau *GeneralLedgerAccountUpdate) check() error {
	if v, ok := glau.mutation.Status(); ok {
		if err := generalledgeraccount.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GeneralLedgerAccount.status": %w`, err)}
		}
	}
	if v, ok := glau.mutation.AccountNumber(); ok {
		if err := generalledgeraccount.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`ent: validator failed for field "GeneralLedgerAccount.account_number": %w`, err)}
		}
	}
	if v, ok := glau.mutation.AccountType(); ok {
		if err := generalledgeraccount.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "GeneralLedgerAccount.account_type": %w`, err)}
		}
	}
	if _, ok := glau.mutation.BusinessUnitID(); glau.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GeneralLedgerAccount.business_unit"`)
	}
	if _, ok := glau.mutation.OrganizationID(); glau.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GeneralLedgerAccount.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (glau *GeneralLedgerAccountUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GeneralLedgerAccountUpdate {
	glau.modifiers = append(glau.modifiers, modifiers...)
	return glau
}

func (glau *GeneralLedgerAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := glau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(generalledgeraccount.Table, generalledgeraccount.Columns, sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID))
	if ps := glau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := glau.mutation.UpdatedAt(); ok {
		_spec.SetField(generalledgeraccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := glau.mutation.Status(); ok {
		_spec.SetField(generalledgeraccount.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := glau.mutation.AccountNumber(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountNumber, field.TypeString, value)
	}
	if value, ok := glau.mutation.AccountType(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountType, field.TypeEnum, value)
	}
	if value, ok := glau.mutation.CashFlowType(); ok {
		_spec.SetField(generalledgeraccount.FieldCashFlowType, field.TypeString, value)
	}
	if glau.mutation.CashFlowTypeCleared() {
		_spec.ClearField(generalledgeraccount.FieldCashFlowType, field.TypeString)
	}
	if value, ok := glau.mutation.AccountSubType(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountSubType, field.TypeString, value)
	}
	if glau.mutation.AccountSubTypeCleared() {
		_spec.ClearField(generalledgeraccount.FieldAccountSubType, field.TypeString)
	}
	if value, ok := glau.mutation.AccountClass(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountClass, field.TypeString, value)
	}
	if glau.mutation.AccountClassCleared() {
		_spec.ClearField(generalledgeraccount.FieldAccountClass, field.TypeString)
	}
	if value, ok := glau.mutation.Balance(); ok {
		_spec.SetField(generalledgeraccount.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := glau.mutation.AddedBalance(); ok {
		_spec.AddField(generalledgeraccount.FieldBalance, field.TypeFloat64, value)
	}
	if glau.mutation.BalanceCleared() {
		_spec.ClearField(generalledgeraccount.FieldBalance, field.TypeFloat64)
	}
	if value, ok := glau.mutation.InterestRate(); ok {
		_spec.SetField(generalledgeraccount.FieldInterestRate, field.TypeFloat64, value)
	}
	if value, ok := glau.mutation.AddedInterestRate(); ok {
		_spec.AddField(generalledgeraccount.FieldInterestRate, field.TypeFloat64, value)
	}
	if glau.mutation.InterestRateCleared() {
		_spec.ClearField(generalledgeraccount.FieldInterestRate, field.TypeFloat64)
	}
	if value, ok := glau.mutation.DateClosed(); ok {
		_spec.SetField(generalledgeraccount.FieldDateClosed, field.TypeOther, value)
	}
	if glau.mutation.DateClosedCleared() {
		_spec.ClearField(generalledgeraccount.FieldDateClosed, field.TypeOther)
	}
	if value, ok := glau.mutation.Notes(); ok {
		_spec.SetField(generalledgeraccount.FieldNotes, field.TypeString, value)
	}
	if glau.mutation.NotesCleared() {
		_spec.ClearField(generalledgeraccount.FieldNotes, field.TypeString)
	}
	if value, ok := glau.mutation.IsTaxRelevant(); ok {
		_spec.SetField(generalledgeraccount.FieldIsTaxRelevant, field.TypeBool, value)
	}
	if value, ok := glau.mutation.IsReconciled(); ok {
		_spec.SetField(generalledgeraccount.FieldIsReconciled, field.TypeBool, value)
	}
	if glau.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   generalledgeraccount.TagsTable,
			Columns: generalledgeraccount.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glau.mutation.RemovedTagsIDs(); len(nodes) > 0 && !glau.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   generalledgeraccount.TagsTable,
			Columns: generalledgeraccount.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glau.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   generalledgeraccount.TagsTable,
			Columns: generalledgeraccount.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(glau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, glau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generalledgeraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	glau.mutation.done = true
	return n, nil
}

// GeneralLedgerAccountUpdateOne is the builder for updating a single GeneralLedgerAccount entity.
type GeneralLedgerAccountUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GeneralLedgerAccountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetUpdatedAt(t time.Time) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetUpdatedAt(t)
	return glauo
}

// SetStatus sets the "status" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetStatus(ge generalledgeraccount.Status) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetStatus(ge)
	return glauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableStatus(ge *generalledgeraccount.Status) *GeneralLedgerAccountUpdateOne {
	if ge != nil {
		glauo.SetStatus(*ge)
	}
	return glauo
}

// SetAccountNumber sets the "account_number" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetAccountNumber(s string) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetAccountNumber(s)
	return glauo
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableAccountNumber(s *string) *GeneralLedgerAccountUpdateOne {
	if s != nil {
		glauo.SetAccountNumber(*s)
	}
	return glauo
}

// SetAccountType sets the "account_type" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetAccountType(gt generalledgeraccount.AccountType) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetAccountType(gt)
	return glauo
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableAccountType(gt *generalledgeraccount.AccountType) *GeneralLedgerAccountUpdateOne {
	if gt != nil {
		glauo.SetAccountType(*gt)
	}
	return glauo
}

// SetCashFlowType sets the "cash_flow_type" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetCashFlowType(s string) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetCashFlowType(s)
	return glauo
}

// SetNillableCashFlowType sets the "cash_flow_type" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableCashFlowType(s *string) *GeneralLedgerAccountUpdateOne {
	if s != nil {
		glauo.SetCashFlowType(*s)
	}
	return glauo
}

// ClearCashFlowType clears the value of the "cash_flow_type" field.
func (glauo *GeneralLedgerAccountUpdateOne) ClearCashFlowType() *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ClearCashFlowType()
	return glauo
}

// SetAccountSubType sets the "account_sub_type" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetAccountSubType(s string) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetAccountSubType(s)
	return glauo
}

// SetNillableAccountSubType sets the "account_sub_type" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableAccountSubType(s *string) *GeneralLedgerAccountUpdateOne {
	if s != nil {
		glauo.SetAccountSubType(*s)
	}
	return glauo
}

// ClearAccountSubType clears the value of the "account_sub_type" field.
func (glauo *GeneralLedgerAccountUpdateOne) ClearAccountSubType() *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ClearAccountSubType()
	return glauo
}

// SetAccountClass sets the "account_class" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetAccountClass(s string) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetAccountClass(s)
	return glauo
}

// SetNillableAccountClass sets the "account_class" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableAccountClass(s *string) *GeneralLedgerAccountUpdateOne {
	if s != nil {
		glauo.SetAccountClass(*s)
	}
	return glauo
}

// ClearAccountClass clears the value of the "account_class" field.
func (glauo *GeneralLedgerAccountUpdateOne) ClearAccountClass() *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ClearAccountClass()
	return glauo
}

// SetBalance sets the "balance" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetBalance(f float64) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ResetBalance()
	glauo.mutation.SetBalance(f)
	return glauo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableBalance(f *float64) *GeneralLedgerAccountUpdateOne {
	if f != nil {
		glauo.SetBalance(*f)
	}
	return glauo
}

// AddBalance adds f to the "balance" field.
func (glauo *GeneralLedgerAccountUpdateOne) AddBalance(f float64) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.AddBalance(f)
	return glauo
}

// ClearBalance clears the value of the "balance" field.
func (glauo *GeneralLedgerAccountUpdateOne) ClearBalance() *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ClearBalance()
	return glauo
}

// SetInterestRate sets the "interest_rate" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetInterestRate(f float64) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ResetInterestRate()
	glauo.mutation.SetInterestRate(f)
	return glauo
}

// SetNillableInterestRate sets the "interest_rate" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableInterestRate(f *float64) *GeneralLedgerAccountUpdateOne {
	if f != nil {
		glauo.SetInterestRate(*f)
	}
	return glauo
}

// AddInterestRate adds f to the "interest_rate" field.
func (glauo *GeneralLedgerAccountUpdateOne) AddInterestRate(f float64) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.AddInterestRate(f)
	return glauo
}

// ClearInterestRate clears the value of the "interest_rate" field.
func (glauo *GeneralLedgerAccountUpdateOne) ClearInterestRate() *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ClearInterestRate()
	return glauo
}

// SetDateClosed sets the "date_closed" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetDateClosed(pg *pgtype.Date) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetDateClosed(pg)
	return glauo
}

// ClearDateClosed clears the value of the "date_closed" field.
func (glauo *GeneralLedgerAccountUpdateOne) ClearDateClosed() *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ClearDateClosed()
	return glauo
}

// SetNotes sets the "notes" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetNotes(s string) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetNotes(s)
	return glauo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableNotes(s *string) *GeneralLedgerAccountUpdateOne {
	if s != nil {
		glauo.SetNotes(*s)
	}
	return glauo
}

// ClearNotes clears the value of the "notes" field.
func (glauo *GeneralLedgerAccountUpdateOne) ClearNotes() *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ClearNotes()
	return glauo
}

// SetIsTaxRelevant sets the "is_tax_relevant" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetIsTaxRelevant(b bool) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetIsTaxRelevant(b)
	return glauo
}

// SetNillableIsTaxRelevant sets the "is_tax_relevant" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableIsTaxRelevant(b *bool) *GeneralLedgerAccountUpdateOne {
	if b != nil {
		glauo.SetIsTaxRelevant(*b)
	}
	return glauo
}

// SetIsReconciled sets the "is_reconciled" field.
func (glauo *GeneralLedgerAccountUpdateOne) SetIsReconciled(b bool) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.SetIsReconciled(b)
	return glauo
}

// SetNillableIsReconciled sets the "is_reconciled" field if the given value is not nil.
func (glauo *GeneralLedgerAccountUpdateOne) SetNillableIsReconciled(b *bool) *GeneralLedgerAccountUpdateOne {
	if b != nil {
		glauo.SetIsReconciled(*b)
	}
	return glauo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (glauo *GeneralLedgerAccountUpdateOne) AddTagIDs(ids ...uuid.UUID) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.AddTagIDs(ids...)
	return glauo
}

// AddTags adds the "tags" edges to the Tag entity.
func (glauo *GeneralLedgerAccountUpdateOne) AddTags(t ...*Tag) *GeneralLedgerAccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return glauo.AddTagIDs(ids...)
}

// Mutation returns the GeneralLedgerAccountMutation object of the builder.
func (glauo *GeneralLedgerAccountUpdateOne) Mutation() *GeneralLedgerAccountMutation {
	return glauo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (glauo *GeneralLedgerAccountUpdateOne) ClearTags() *GeneralLedgerAccountUpdateOne {
	glauo.mutation.ClearTags()
	return glauo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (glauo *GeneralLedgerAccountUpdateOne) RemoveTagIDs(ids ...uuid.UUID) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.RemoveTagIDs(ids...)
	return glauo
}

// RemoveTags removes "tags" edges to Tag entities.
func (glauo *GeneralLedgerAccountUpdateOne) RemoveTags(t ...*Tag) *GeneralLedgerAccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return glauo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the GeneralLedgerAccountUpdate builder.
func (glauo *GeneralLedgerAccountUpdateOne) Where(ps ...predicate.GeneralLedgerAccount) *GeneralLedgerAccountUpdateOne {
	glauo.mutation.Where(ps...)
	return glauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (glauo *GeneralLedgerAccountUpdateOne) Select(field string, fields ...string) *GeneralLedgerAccountUpdateOne {
	glauo.fields = append([]string{field}, fields...)
	return glauo
}

// Save executes the query and returns the updated GeneralLedgerAccount entity.
func (glauo *GeneralLedgerAccountUpdateOne) Save(ctx context.Context) (*GeneralLedgerAccount, error) {
	glauo.defaults()
	return withHooks(ctx, glauo.sqlSave, glauo.mutation, glauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (glauo *GeneralLedgerAccountUpdateOne) SaveX(ctx context.Context) *GeneralLedgerAccount {
	node, err := glauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (glauo *GeneralLedgerAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := glauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glauo *GeneralLedgerAccountUpdateOne) ExecX(ctx context.Context) {
	if err := glauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (glauo *GeneralLedgerAccountUpdateOne) defaults() {
	if _, ok := glauo.mutation.UpdatedAt(); !ok {
		v := generalledgeraccount.UpdateDefaultUpdatedAt()
		glauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (glauo *GeneralLedgerAccountUpdateOne) check() error {
	if v, ok := glauo.mutation.Status(); ok {
		if err := generalledgeraccount.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GeneralLedgerAccount.status": %w`, err)}
		}
	}
	if v, ok := glauo.mutation.AccountNumber(); ok {
		if err := generalledgeraccount.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`ent: validator failed for field "GeneralLedgerAccount.account_number": %w`, err)}
		}
	}
	if v, ok := glauo.mutation.AccountType(); ok {
		if err := generalledgeraccount.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "GeneralLedgerAccount.account_type": %w`, err)}
		}
	}
	if _, ok := glauo.mutation.BusinessUnitID(); glauo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GeneralLedgerAccount.business_unit"`)
	}
	if _, ok := glauo.mutation.OrganizationID(); glauo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GeneralLedgerAccount.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (glauo *GeneralLedgerAccountUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GeneralLedgerAccountUpdateOne {
	glauo.modifiers = append(glauo.modifiers, modifiers...)
	return glauo
}

func (glauo *GeneralLedgerAccountUpdateOne) sqlSave(ctx context.Context) (_node *GeneralLedgerAccount, err error) {
	if err := glauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(generalledgeraccount.Table, generalledgeraccount.Columns, sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID))
	id, ok := glauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GeneralLedgerAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := glauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generalledgeraccount.FieldID)
		for _, f := range fields {
			if !generalledgeraccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != generalledgeraccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := glauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := glauo.mutation.UpdatedAt(); ok {
		_spec.SetField(generalledgeraccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := glauo.mutation.Status(); ok {
		_spec.SetField(generalledgeraccount.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := glauo.mutation.AccountNumber(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountNumber, field.TypeString, value)
	}
	if value, ok := glauo.mutation.AccountType(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountType, field.TypeEnum, value)
	}
	if value, ok := glauo.mutation.CashFlowType(); ok {
		_spec.SetField(generalledgeraccount.FieldCashFlowType, field.TypeString, value)
	}
	if glauo.mutation.CashFlowTypeCleared() {
		_spec.ClearField(generalledgeraccount.FieldCashFlowType, field.TypeString)
	}
	if value, ok := glauo.mutation.AccountSubType(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountSubType, field.TypeString, value)
	}
	if glauo.mutation.AccountSubTypeCleared() {
		_spec.ClearField(generalledgeraccount.FieldAccountSubType, field.TypeString)
	}
	if value, ok := glauo.mutation.AccountClass(); ok {
		_spec.SetField(generalledgeraccount.FieldAccountClass, field.TypeString, value)
	}
	if glauo.mutation.AccountClassCleared() {
		_spec.ClearField(generalledgeraccount.FieldAccountClass, field.TypeString)
	}
	if value, ok := glauo.mutation.Balance(); ok {
		_spec.SetField(generalledgeraccount.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := glauo.mutation.AddedBalance(); ok {
		_spec.AddField(generalledgeraccount.FieldBalance, field.TypeFloat64, value)
	}
	if glauo.mutation.BalanceCleared() {
		_spec.ClearField(generalledgeraccount.FieldBalance, field.TypeFloat64)
	}
	if value, ok := glauo.mutation.InterestRate(); ok {
		_spec.SetField(generalledgeraccount.FieldInterestRate, field.TypeFloat64, value)
	}
	if value, ok := glauo.mutation.AddedInterestRate(); ok {
		_spec.AddField(generalledgeraccount.FieldInterestRate, field.TypeFloat64, value)
	}
	if glauo.mutation.InterestRateCleared() {
		_spec.ClearField(generalledgeraccount.FieldInterestRate, field.TypeFloat64)
	}
	if value, ok := glauo.mutation.DateClosed(); ok {
		_spec.SetField(generalledgeraccount.FieldDateClosed, field.TypeOther, value)
	}
	if glauo.mutation.DateClosedCleared() {
		_spec.ClearField(generalledgeraccount.FieldDateClosed, field.TypeOther)
	}
	if value, ok := glauo.mutation.Notes(); ok {
		_spec.SetField(generalledgeraccount.FieldNotes, field.TypeString, value)
	}
	if glauo.mutation.NotesCleared() {
		_spec.ClearField(generalledgeraccount.FieldNotes, field.TypeString)
	}
	if value, ok := glauo.mutation.IsTaxRelevant(); ok {
		_spec.SetField(generalledgeraccount.FieldIsTaxRelevant, field.TypeBool, value)
	}
	if value, ok := glauo.mutation.IsReconciled(); ok {
		_spec.SetField(generalledgeraccount.FieldIsReconciled, field.TypeBool, value)
	}
	if glauo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   generalledgeraccount.TagsTable,
			Columns: generalledgeraccount.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glauo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !glauo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   generalledgeraccount.TagsTable,
			Columns: generalledgeraccount.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glauo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   generalledgeraccount.TagsTable,
			Columns: generalledgeraccount.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(glauo.modifiers...)
	_node = &GeneralLedgerAccount{config: glauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, glauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generalledgeraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	glauo.mutation.done = true
	return _node, nil
}
