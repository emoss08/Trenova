// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/commodity"
	"github.com/emoss08/trenova/ent/hazardousmaterial"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// HazardousMaterialUpdate is the builder for updating HazardousMaterial entities.
type HazardousMaterialUpdate struct {
	config
	hooks    []Hook
	mutation *HazardousMaterialMutation
}

// Where appends a list predicates to the HazardousMaterialUpdate builder.
func (hmu *HazardousMaterialUpdate) Where(ps ...predicate.HazardousMaterial) *HazardousMaterialUpdate {
	hmu.mutation.Where(ps...)
	return hmu
}

// SetUpdatedAt sets the "updated_at" field.
func (hmu *HazardousMaterialUpdate) SetUpdatedAt(t time.Time) *HazardousMaterialUpdate {
	hmu.mutation.SetUpdatedAt(t)
	return hmu
}

// SetName sets the "name" field.
func (hmu *HazardousMaterialUpdate) SetName(s string) *HazardousMaterialUpdate {
	hmu.mutation.SetName(s)
	return hmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hmu *HazardousMaterialUpdate) SetNillableName(s *string) *HazardousMaterialUpdate {
	if s != nil {
		hmu.SetName(*s)
	}
	return hmu
}

// SetHazardClass sets the "hazard_class" field.
func (hmu *HazardousMaterialUpdate) SetHazardClass(hc hazardousmaterial.HazardClass) *HazardousMaterialUpdate {
	hmu.mutation.SetHazardClass(hc)
	return hmu
}

// SetNillableHazardClass sets the "hazard_class" field if the given value is not nil.
func (hmu *HazardousMaterialUpdate) SetNillableHazardClass(hc *hazardousmaterial.HazardClass) *HazardousMaterialUpdate {
	if hc != nil {
		hmu.SetHazardClass(*hc)
	}
	return hmu
}

// SetErgNumber sets the "erg_number" field.
func (hmu *HazardousMaterialUpdate) SetErgNumber(s string) *HazardousMaterialUpdate {
	hmu.mutation.SetErgNumber(s)
	return hmu
}

// SetNillableErgNumber sets the "erg_number" field if the given value is not nil.
func (hmu *HazardousMaterialUpdate) SetNillableErgNumber(s *string) *HazardousMaterialUpdate {
	if s != nil {
		hmu.SetErgNumber(*s)
	}
	return hmu
}

// ClearErgNumber clears the value of the "erg_number" field.
func (hmu *HazardousMaterialUpdate) ClearErgNumber() *HazardousMaterialUpdate {
	hmu.mutation.ClearErgNumber()
	return hmu
}

// SetDescription sets the "description" field.
func (hmu *HazardousMaterialUpdate) SetDescription(s string) *HazardousMaterialUpdate {
	hmu.mutation.SetDescription(s)
	return hmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hmu *HazardousMaterialUpdate) SetNillableDescription(s *string) *HazardousMaterialUpdate {
	if s != nil {
		hmu.SetDescription(*s)
	}
	return hmu
}

// ClearDescription clears the value of the "description" field.
func (hmu *HazardousMaterialUpdate) ClearDescription() *HazardousMaterialUpdate {
	hmu.mutation.ClearDescription()
	return hmu
}

// SetPackingGroup sets the "packing_group" field.
func (hmu *HazardousMaterialUpdate) SetPackingGroup(hg hazardousmaterial.PackingGroup) *HazardousMaterialUpdate {
	hmu.mutation.SetPackingGroup(hg)
	return hmu
}

// SetNillablePackingGroup sets the "packing_group" field if the given value is not nil.
func (hmu *HazardousMaterialUpdate) SetNillablePackingGroup(hg *hazardousmaterial.PackingGroup) *HazardousMaterialUpdate {
	if hg != nil {
		hmu.SetPackingGroup(*hg)
	}
	return hmu
}

// ClearPackingGroup clears the value of the "packing_group" field.
func (hmu *HazardousMaterialUpdate) ClearPackingGroup() *HazardousMaterialUpdate {
	hmu.mutation.ClearPackingGroup()
	return hmu
}

// SetProperShippingName sets the "proper_shipping_name" field.
func (hmu *HazardousMaterialUpdate) SetProperShippingName(s string) *HazardousMaterialUpdate {
	hmu.mutation.SetProperShippingName(s)
	return hmu
}

// SetNillableProperShippingName sets the "proper_shipping_name" field if the given value is not nil.
func (hmu *HazardousMaterialUpdate) SetNillableProperShippingName(s *string) *HazardousMaterialUpdate {
	if s != nil {
		hmu.SetProperShippingName(*s)
	}
	return hmu
}

// ClearProperShippingName clears the value of the "proper_shipping_name" field.
func (hmu *HazardousMaterialUpdate) ClearProperShippingName() *HazardousMaterialUpdate {
	hmu.mutation.ClearProperShippingName()
	return hmu
}

// AddCommodityIDs adds the "commodities" edge to the Commodity entity by IDs.
func (hmu *HazardousMaterialUpdate) AddCommodityIDs(ids ...uuid.UUID) *HazardousMaterialUpdate {
	hmu.mutation.AddCommodityIDs(ids...)
	return hmu
}

// AddCommodities adds the "commodities" edges to the Commodity entity.
func (hmu *HazardousMaterialUpdate) AddCommodities(c ...*Commodity) *HazardousMaterialUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hmu.AddCommodityIDs(ids...)
}

// Mutation returns the HazardousMaterialMutation object of the builder.
func (hmu *HazardousMaterialUpdate) Mutation() *HazardousMaterialMutation {
	return hmu.mutation
}

// ClearCommodities clears all "commodities" edges to the Commodity entity.
func (hmu *HazardousMaterialUpdate) ClearCommodities() *HazardousMaterialUpdate {
	hmu.mutation.ClearCommodities()
	return hmu
}

// RemoveCommodityIDs removes the "commodities" edge to Commodity entities by IDs.
func (hmu *HazardousMaterialUpdate) RemoveCommodityIDs(ids ...uuid.UUID) *HazardousMaterialUpdate {
	hmu.mutation.RemoveCommodityIDs(ids...)
	return hmu
}

// RemoveCommodities removes "commodities" edges to Commodity entities.
func (hmu *HazardousMaterialUpdate) RemoveCommodities(c ...*Commodity) *HazardousMaterialUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hmu.RemoveCommodityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hmu *HazardousMaterialUpdate) Save(ctx context.Context) (int, error) {
	hmu.defaults()
	return withHooks(ctx, hmu.sqlSave, hmu.mutation, hmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hmu *HazardousMaterialUpdate) SaveX(ctx context.Context) int {
	affected, err := hmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hmu *HazardousMaterialUpdate) Exec(ctx context.Context) error {
	_, err := hmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmu *HazardousMaterialUpdate) ExecX(ctx context.Context) {
	if err := hmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hmu *HazardousMaterialUpdate) defaults() {
	if _, ok := hmu.mutation.UpdatedAt(); !ok {
		v := hazardousmaterial.UpdateDefaultUpdatedAt()
		hmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hmu *HazardousMaterialUpdate) check() error {
	if v, ok := hmu.mutation.Name(); ok {
		if err := hazardousmaterial.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterial.name": %w`, err)}
		}
	}
	if v, ok := hmu.mutation.HazardClass(); ok {
		if err := hazardousmaterial.HazardClassValidator(v); err != nil {
			return &ValidationError{Name: "hazard_class", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterial.hazard_class": %w`, err)}
		}
	}
	if v, ok := hmu.mutation.ErgNumber(); ok {
		if err := hazardousmaterial.ErgNumberValidator(v); err != nil {
			return &ValidationError{Name: "erg_number", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterial.erg_number": %w`, err)}
		}
	}
	if v, ok := hmu.mutation.PackingGroup(); ok {
		if err := hazardousmaterial.PackingGroupValidator(v); err != nil {
			return &ValidationError{Name: "packing_group", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterial.packing_group": %w`, err)}
		}
	}
	if _, ok := hmu.mutation.BusinessUnitID(); hmu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HazardousMaterial.business_unit"`)
	}
	if _, ok := hmu.mutation.OrganizationID(); hmu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HazardousMaterial.organization"`)
	}
	return nil
}

func (hmu *HazardousMaterialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hazardousmaterial.Table, hazardousmaterial.Columns, sqlgraph.NewFieldSpec(hazardousmaterial.FieldID, field.TypeUUID))
	if ps := hmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hmu.mutation.UpdatedAt(); ok {
		_spec.SetField(hazardousmaterial.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hmu.mutation.Name(); ok {
		_spec.SetField(hazardousmaterial.FieldName, field.TypeString, value)
	}
	if value, ok := hmu.mutation.HazardClass(); ok {
		_spec.SetField(hazardousmaterial.FieldHazardClass, field.TypeEnum, value)
	}
	if value, ok := hmu.mutation.ErgNumber(); ok {
		_spec.SetField(hazardousmaterial.FieldErgNumber, field.TypeString, value)
	}
	if hmu.mutation.ErgNumberCleared() {
		_spec.ClearField(hazardousmaterial.FieldErgNumber, field.TypeString)
	}
	if value, ok := hmu.mutation.Description(); ok {
		_spec.SetField(hazardousmaterial.FieldDescription, field.TypeString, value)
	}
	if hmu.mutation.DescriptionCleared() {
		_spec.ClearField(hazardousmaterial.FieldDescription, field.TypeString)
	}
	if value, ok := hmu.mutation.PackingGroup(); ok {
		_spec.SetField(hazardousmaterial.FieldPackingGroup, field.TypeEnum, value)
	}
	if hmu.mutation.PackingGroupCleared() {
		_spec.ClearField(hazardousmaterial.FieldPackingGroup, field.TypeEnum)
	}
	if value, ok := hmu.mutation.ProperShippingName(); ok {
		_spec.SetField(hazardousmaterial.FieldProperShippingName, field.TypeString, value)
	}
	if hmu.mutation.ProperShippingNameCleared() {
		_spec.ClearField(hazardousmaterial.FieldProperShippingName, field.TypeString)
	}
	if hmu.mutation.CommoditiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hazardousmaterial.CommoditiesTable,
			Columns: []string{hazardousmaterial.CommoditiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedCommoditiesIDs(); len(nodes) > 0 && !hmu.mutation.CommoditiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hazardousmaterial.CommoditiesTable,
			Columns: []string{hazardousmaterial.CommoditiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.CommoditiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hazardousmaterial.CommoditiesTable,
			Columns: []string{hazardousmaterial.CommoditiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hazardousmaterial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hmu.mutation.done = true
	return n, nil
}

// HazardousMaterialUpdateOne is the builder for updating a single HazardousMaterial entity.
type HazardousMaterialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HazardousMaterialMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hmuo *HazardousMaterialUpdateOne) SetUpdatedAt(t time.Time) *HazardousMaterialUpdateOne {
	hmuo.mutation.SetUpdatedAt(t)
	return hmuo
}

// SetName sets the "name" field.
func (hmuo *HazardousMaterialUpdateOne) SetName(s string) *HazardousMaterialUpdateOne {
	hmuo.mutation.SetName(s)
	return hmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hmuo *HazardousMaterialUpdateOne) SetNillableName(s *string) *HazardousMaterialUpdateOne {
	if s != nil {
		hmuo.SetName(*s)
	}
	return hmuo
}

// SetHazardClass sets the "hazard_class" field.
func (hmuo *HazardousMaterialUpdateOne) SetHazardClass(hc hazardousmaterial.HazardClass) *HazardousMaterialUpdateOne {
	hmuo.mutation.SetHazardClass(hc)
	return hmuo
}

// SetNillableHazardClass sets the "hazard_class" field if the given value is not nil.
func (hmuo *HazardousMaterialUpdateOne) SetNillableHazardClass(hc *hazardousmaterial.HazardClass) *HazardousMaterialUpdateOne {
	if hc != nil {
		hmuo.SetHazardClass(*hc)
	}
	return hmuo
}

// SetErgNumber sets the "erg_number" field.
func (hmuo *HazardousMaterialUpdateOne) SetErgNumber(s string) *HazardousMaterialUpdateOne {
	hmuo.mutation.SetErgNumber(s)
	return hmuo
}

// SetNillableErgNumber sets the "erg_number" field if the given value is not nil.
func (hmuo *HazardousMaterialUpdateOne) SetNillableErgNumber(s *string) *HazardousMaterialUpdateOne {
	if s != nil {
		hmuo.SetErgNumber(*s)
	}
	return hmuo
}

// ClearErgNumber clears the value of the "erg_number" field.
func (hmuo *HazardousMaterialUpdateOne) ClearErgNumber() *HazardousMaterialUpdateOne {
	hmuo.mutation.ClearErgNumber()
	return hmuo
}

// SetDescription sets the "description" field.
func (hmuo *HazardousMaterialUpdateOne) SetDescription(s string) *HazardousMaterialUpdateOne {
	hmuo.mutation.SetDescription(s)
	return hmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hmuo *HazardousMaterialUpdateOne) SetNillableDescription(s *string) *HazardousMaterialUpdateOne {
	if s != nil {
		hmuo.SetDescription(*s)
	}
	return hmuo
}

// ClearDescription clears the value of the "description" field.
func (hmuo *HazardousMaterialUpdateOne) ClearDescription() *HazardousMaterialUpdateOne {
	hmuo.mutation.ClearDescription()
	return hmuo
}

// SetPackingGroup sets the "packing_group" field.
func (hmuo *HazardousMaterialUpdateOne) SetPackingGroup(hg hazardousmaterial.PackingGroup) *HazardousMaterialUpdateOne {
	hmuo.mutation.SetPackingGroup(hg)
	return hmuo
}

// SetNillablePackingGroup sets the "packing_group" field if the given value is not nil.
func (hmuo *HazardousMaterialUpdateOne) SetNillablePackingGroup(hg *hazardousmaterial.PackingGroup) *HazardousMaterialUpdateOne {
	if hg != nil {
		hmuo.SetPackingGroup(*hg)
	}
	return hmuo
}

// ClearPackingGroup clears the value of the "packing_group" field.
func (hmuo *HazardousMaterialUpdateOne) ClearPackingGroup() *HazardousMaterialUpdateOne {
	hmuo.mutation.ClearPackingGroup()
	return hmuo
}

// SetProperShippingName sets the "proper_shipping_name" field.
func (hmuo *HazardousMaterialUpdateOne) SetProperShippingName(s string) *HazardousMaterialUpdateOne {
	hmuo.mutation.SetProperShippingName(s)
	return hmuo
}

// SetNillableProperShippingName sets the "proper_shipping_name" field if the given value is not nil.
func (hmuo *HazardousMaterialUpdateOne) SetNillableProperShippingName(s *string) *HazardousMaterialUpdateOne {
	if s != nil {
		hmuo.SetProperShippingName(*s)
	}
	return hmuo
}

// ClearProperShippingName clears the value of the "proper_shipping_name" field.
func (hmuo *HazardousMaterialUpdateOne) ClearProperShippingName() *HazardousMaterialUpdateOne {
	hmuo.mutation.ClearProperShippingName()
	return hmuo
}

// AddCommodityIDs adds the "commodities" edge to the Commodity entity by IDs.
func (hmuo *HazardousMaterialUpdateOne) AddCommodityIDs(ids ...uuid.UUID) *HazardousMaterialUpdateOne {
	hmuo.mutation.AddCommodityIDs(ids...)
	return hmuo
}

// AddCommodities adds the "commodities" edges to the Commodity entity.
func (hmuo *HazardousMaterialUpdateOne) AddCommodities(c ...*Commodity) *HazardousMaterialUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hmuo.AddCommodityIDs(ids...)
}

// Mutation returns the HazardousMaterialMutation object of the builder.
func (hmuo *HazardousMaterialUpdateOne) Mutation() *HazardousMaterialMutation {
	return hmuo.mutation
}

// ClearCommodities clears all "commodities" edges to the Commodity entity.
func (hmuo *HazardousMaterialUpdateOne) ClearCommodities() *HazardousMaterialUpdateOne {
	hmuo.mutation.ClearCommodities()
	return hmuo
}

// RemoveCommodityIDs removes the "commodities" edge to Commodity entities by IDs.
func (hmuo *HazardousMaterialUpdateOne) RemoveCommodityIDs(ids ...uuid.UUID) *HazardousMaterialUpdateOne {
	hmuo.mutation.RemoveCommodityIDs(ids...)
	return hmuo
}

// RemoveCommodities removes "commodities" edges to Commodity entities.
func (hmuo *HazardousMaterialUpdateOne) RemoveCommodities(c ...*Commodity) *HazardousMaterialUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hmuo.RemoveCommodityIDs(ids...)
}

// Where appends a list predicates to the HazardousMaterialUpdate builder.
func (hmuo *HazardousMaterialUpdateOne) Where(ps ...predicate.HazardousMaterial) *HazardousMaterialUpdateOne {
	hmuo.mutation.Where(ps...)
	return hmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hmuo *HazardousMaterialUpdateOne) Select(field string, fields ...string) *HazardousMaterialUpdateOne {
	hmuo.fields = append([]string{field}, fields...)
	return hmuo
}

// Save executes the query and returns the updated HazardousMaterial entity.
func (hmuo *HazardousMaterialUpdateOne) Save(ctx context.Context) (*HazardousMaterial, error) {
	hmuo.defaults()
	return withHooks(ctx, hmuo.sqlSave, hmuo.mutation, hmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hmuo *HazardousMaterialUpdateOne) SaveX(ctx context.Context) *HazardousMaterial {
	node, err := hmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hmuo *HazardousMaterialUpdateOne) Exec(ctx context.Context) error {
	_, err := hmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmuo *HazardousMaterialUpdateOne) ExecX(ctx context.Context) {
	if err := hmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hmuo *HazardousMaterialUpdateOne) defaults() {
	if _, ok := hmuo.mutation.UpdatedAt(); !ok {
		v := hazardousmaterial.UpdateDefaultUpdatedAt()
		hmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hmuo *HazardousMaterialUpdateOne) check() error {
	if v, ok := hmuo.mutation.Name(); ok {
		if err := hazardousmaterial.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterial.name": %w`, err)}
		}
	}
	if v, ok := hmuo.mutation.HazardClass(); ok {
		if err := hazardousmaterial.HazardClassValidator(v); err != nil {
			return &ValidationError{Name: "hazard_class", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterial.hazard_class": %w`, err)}
		}
	}
	if v, ok := hmuo.mutation.ErgNumber(); ok {
		if err := hazardousmaterial.ErgNumberValidator(v); err != nil {
			return &ValidationError{Name: "erg_number", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterial.erg_number": %w`, err)}
		}
	}
	if v, ok := hmuo.mutation.PackingGroup(); ok {
		if err := hazardousmaterial.PackingGroupValidator(v); err != nil {
			return &ValidationError{Name: "packing_group", err: fmt.Errorf(`ent: validator failed for field "HazardousMaterial.packing_group": %w`, err)}
		}
	}
	if _, ok := hmuo.mutation.BusinessUnitID(); hmuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HazardousMaterial.business_unit"`)
	}
	if _, ok := hmuo.mutation.OrganizationID(); hmuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HazardousMaterial.organization"`)
	}
	return nil
}

func (hmuo *HazardousMaterialUpdateOne) sqlSave(ctx context.Context) (_node *HazardousMaterial, err error) {
	if err := hmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hazardousmaterial.Table, hazardousmaterial.Columns, sqlgraph.NewFieldSpec(hazardousmaterial.FieldID, field.TypeUUID))
	id, ok := hmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HazardousMaterial.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hazardousmaterial.FieldID)
		for _, f := range fields {
			if !hazardousmaterial.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hazardousmaterial.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hazardousmaterial.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hmuo.mutation.Name(); ok {
		_spec.SetField(hazardousmaterial.FieldName, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.HazardClass(); ok {
		_spec.SetField(hazardousmaterial.FieldHazardClass, field.TypeEnum, value)
	}
	if value, ok := hmuo.mutation.ErgNumber(); ok {
		_spec.SetField(hazardousmaterial.FieldErgNumber, field.TypeString, value)
	}
	if hmuo.mutation.ErgNumberCleared() {
		_spec.ClearField(hazardousmaterial.FieldErgNumber, field.TypeString)
	}
	if value, ok := hmuo.mutation.Description(); ok {
		_spec.SetField(hazardousmaterial.FieldDescription, field.TypeString, value)
	}
	if hmuo.mutation.DescriptionCleared() {
		_spec.ClearField(hazardousmaterial.FieldDescription, field.TypeString)
	}
	if value, ok := hmuo.mutation.PackingGroup(); ok {
		_spec.SetField(hazardousmaterial.FieldPackingGroup, field.TypeEnum, value)
	}
	if hmuo.mutation.PackingGroupCleared() {
		_spec.ClearField(hazardousmaterial.FieldPackingGroup, field.TypeEnum)
	}
	if value, ok := hmuo.mutation.ProperShippingName(); ok {
		_spec.SetField(hazardousmaterial.FieldProperShippingName, field.TypeString, value)
	}
	if hmuo.mutation.ProperShippingNameCleared() {
		_spec.ClearField(hazardousmaterial.FieldProperShippingName, field.TypeString)
	}
	if hmuo.mutation.CommoditiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hazardousmaterial.CommoditiesTable,
			Columns: []string{hazardousmaterial.CommoditiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedCommoditiesIDs(); len(nodes) > 0 && !hmuo.mutation.CommoditiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hazardousmaterial.CommoditiesTable,
			Columns: []string{hazardousmaterial.CommoditiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.CommoditiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hazardousmaterial.CommoditiesTable,
			Columns: []string{hazardousmaterial.CommoditiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HazardousMaterial{config: hmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hazardousmaterial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hmuo.mutation.done = true
	return _node, nil
}
