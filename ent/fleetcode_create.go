// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/fleetcode"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/user"
	"github.com/google/uuid"
)

// FleetCodeCreate is the builder for creating a FleetCode entity.
type FleetCodeCreate struct {
	config
	mutation *FleetCodeMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (fcc *FleetCodeCreate) SetBusinessUnitID(u uuid.UUID) *FleetCodeCreate {
	fcc.mutation.SetBusinessUnitID(u)
	return fcc
}

// SetOrganizationID sets the "organization_id" field.
func (fcc *FleetCodeCreate) SetOrganizationID(u uuid.UUID) *FleetCodeCreate {
	fcc.mutation.SetOrganizationID(u)
	return fcc
}

// SetCreatedAt sets the "created_at" field.
func (fcc *FleetCodeCreate) SetCreatedAt(t time.Time) *FleetCodeCreate {
	fcc.mutation.SetCreatedAt(t)
	return fcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableCreatedAt(t *time.Time) *FleetCodeCreate {
	if t != nil {
		fcc.SetCreatedAt(*t)
	}
	return fcc
}

// SetUpdatedAt sets the "updated_at" field.
func (fcc *FleetCodeCreate) SetUpdatedAt(t time.Time) *FleetCodeCreate {
	fcc.mutation.SetUpdatedAt(t)
	return fcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableUpdatedAt(t *time.Time) *FleetCodeCreate {
	if t != nil {
		fcc.SetUpdatedAt(*t)
	}
	return fcc
}

// SetVersion sets the "version" field.
func (fcc *FleetCodeCreate) SetVersion(i int) *FleetCodeCreate {
	fcc.mutation.SetVersion(i)
	return fcc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableVersion(i *int) *FleetCodeCreate {
	if i != nil {
		fcc.SetVersion(*i)
	}
	return fcc
}

// SetStatus sets the "status" field.
func (fcc *FleetCodeCreate) SetStatus(f fleetcode.Status) *FleetCodeCreate {
	fcc.mutation.SetStatus(f)
	return fcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableStatus(f *fleetcode.Status) *FleetCodeCreate {
	if f != nil {
		fcc.SetStatus(*f)
	}
	return fcc
}

// SetCode sets the "code" field.
func (fcc *FleetCodeCreate) SetCode(s string) *FleetCodeCreate {
	fcc.mutation.SetCode(s)
	return fcc
}

// SetDescription sets the "description" field.
func (fcc *FleetCodeCreate) SetDescription(s string) *FleetCodeCreate {
	fcc.mutation.SetDescription(s)
	return fcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableDescription(s *string) *FleetCodeCreate {
	if s != nil {
		fcc.SetDescription(*s)
	}
	return fcc
}

// SetRevenueGoal sets the "revenue_goal" field.
func (fcc *FleetCodeCreate) SetRevenueGoal(f float64) *FleetCodeCreate {
	fcc.mutation.SetRevenueGoal(f)
	return fcc
}

// SetNillableRevenueGoal sets the "revenue_goal" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableRevenueGoal(f *float64) *FleetCodeCreate {
	if f != nil {
		fcc.SetRevenueGoal(*f)
	}
	return fcc
}

// SetDeadheadGoal sets the "deadhead_goal" field.
func (fcc *FleetCodeCreate) SetDeadheadGoal(f float64) *FleetCodeCreate {
	fcc.mutation.SetDeadheadGoal(f)
	return fcc
}

// SetNillableDeadheadGoal sets the "deadhead_goal" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableDeadheadGoal(f *float64) *FleetCodeCreate {
	if f != nil {
		fcc.SetDeadheadGoal(*f)
	}
	return fcc
}

// SetMileageGoal sets the "mileage_goal" field.
func (fcc *FleetCodeCreate) SetMileageGoal(f float64) *FleetCodeCreate {
	fcc.mutation.SetMileageGoal(f)
	return fcc
}

// SetNillableMileageGoal sets the "mileage_goal" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableMileageGoal(f *float64) *FleetCodeCreate {
	if f != nil {
		fcc.SetMileageGoal(*f)
	}
	return fcc
}

// SetManagerID sets the "manager_id" field.
func (fcc *FleetCodeCreate) SetManagerID(u uuid.UUID) *FleetCodeCreate {
	fcc.mutation.SetManagerID(u)
	return fcc
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableManagerID(u *uuid.UUID) *FleetCodeCreate {
	if u != nil {
		fcc.SetManagerID(*u)
	}
	return fcc
}

// SetID sets the "id" field.
func (fcc *FleetCodeCreate) SetID(u uuid.UUID) *FleetCodeCreate {
	fcc.mutation.SetID(u)
	return fcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fcc *FleetCodeCreate) SetNillableID(u *uuid.UUID) *FleetCodeCreate {
	if u != nil {
		fcc.SetID(*u)
	}
	return fcc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (fcc *FleetCodeCreate) SetBusinessUnit(b *BusinessUnit) *FleetCodeCreate {
	return fcc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (fcc *FleetCodeCreate) SetOrganization(o *Organization) *FleetCodeCreate {
	return fcc.SetOrganizationID(o.ID)
}

// SetManager sets the "manager" edge to the User entity.
func (fcc *FleetCodeCreate) SetManager(u *User) *FleetCodeCreate {
	return fcc.SetManagerID(u.ID)
}

// Mutation returns the FleetCodeMutation object of the builder.
func (fcc *FleetCodeCreate) Mutation() *FleetCodeMutation {
	return fcc.mutation
}

// Save creates the FleetCode in the database.
func (fcc *FleetCodeCreate) Save(ctx context.Context) (*FleetCode, error) {
	fcc.defaults()
	return withHooks(ctx, fcc.sqlSave, fcc.mutation, fcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fcc *FleetCodeCreate) SaveX(ctx context.Context) *FleetCode {
	v, err := fcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcc *FleetCodeCreate) Exec(ctx context.Context) error {
	_, err := fcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcc *FleetCodeCreate) ExecX(ctx context.Context) {
	if err := fcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcc *FleetCodeCreate) defaults() {
	if _, ok := fcc.mutation.CreatedAt(); !ok {
		v := fleetcode.DefaultCreatedAt()
		fcc.mutation.SetCreatedAt(v)
	}
	if _, ok := fcc.mutation.UpdatedAt(); !ok {
		v := fleetcode.DefaultUpdatedAt()
		fcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fcc.mutation.Version(); !ok {
		v := fleetcode.DefaultVersion
		fcc.mutation.SetVersion(v)
	}
	if _, ok := fcc.mutation.Status(); !ok {
		v := fleetcode.DefaultStatus
		fcc.mutation.SetStatus(v)
	}
	if _, ok := fcc.mutation.ID(); !ok {
		v := fleetcode.DefaultID()
		fcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcc *FleetCodeCreate) check() error {
	if _, ok := fcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "FleetCode.business_unit_id"`)}
	}
	if _, ok := fcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "FleetCode.organization_id"`)}
	}
	if _, ok := fcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FleetCode.created_at"`)}
	}
	if _, ok := fcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FleetCode.updated_at"`)}
	}
	if _, ok := fcc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "FleetCode.version"`)}
	}
	if _, ok := fcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FleetCode.status"`)}
	}
	if v, ok := fcc.mutation.Status(); ok {
		if err := fleetcode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FleetCode.status": %w`, err)}
		}
	}
	if _, ok := fcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "FleetCode.code"`)}
	}
	if v, ok := fcc.mutation.Code(); ok {
		if err := fleetcode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "FleetCode.code": %w`, err)}
		}
	}
	if _, ok := fcc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "FleetCode.business_unit"`)}
	}
	if _, ok := fcc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "FleetCode.organization"`)}
	}
	return nil
}

func (fcc *FleetCodeCreate) sqlSave(ctx context.Context) (*FleetCode, error) {
	if err := fcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fcc.mutation.id = &_node.ID
	fcc.mutation.done = true
	return _node, nil
}

func (fcc *FleetCodeCreate) createSpec() (*FleetCode, *sqlgraph.CreateSpec) {
	var (
		_node = &FleetCode{config: fcc.config}
		_spec = sqlgraph.NewCreateSpec(fleetcode.Table, sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID))
	)
	if id, ok := fcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fcc.mutation.CreatedAt(); ok {
		_spec.SetField(fleetcode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fcc.mutation.UpdatedAt(); ok {
		_spec.SetField(fleetcode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fcc.mutation.Version(); ok {
		_spec.SetField(fleetcode.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := fcc.mutation.Status(); ok {
		_spec.SetField(fleetcode.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := fcc.mutation.Code(); ok {
		_spec.SetField(fleetcode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := fcc.mutation.Description(); ok {
		_spec.SetField(fleetcode.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fcc.mutation.RevenueGoal(); ok {
		_spec.SetField(fleetcode.FieldRevenueGoal, field.TypeFloat64, value)
		_node.RevenueGoal = value
	}
	if value, ok := fcc.mutation.DeadheadGoal(); ok {
		_spec.SetField(fleetcode.FieldDeadheadGoal, field.TypeFloat64, value)
		_node.DeadheadGoal = value
	}
	if value, ok := fcc.mutation.MileageGoal(); ok {
		_spec.SetField(fleetcode.FieldMileageGoal, field.TypeFloat64, value)
		_node.MileageGoal = value
	}
	if nodes := fcc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fleetcode.BusinessUnitTable,
			Columns: []string{fleetcode.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fcc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fleetcode.OrganizationTable,
			Columns: []string{fleetcode.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fcc.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fleetcode.ManagerTable,
			Columns: []string{fleetcode.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ManagerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FleetCodeCreateBulk is the builder for creating many FleetCode entities in bulk.
type FleetCodeCreateBulk struct {
	config
	err      error
	builders []*FleetCodeCreate
}

// Save creates the FleetCode entities in the database.
func (fccb *FleetCodeCreateBulk) Save(ctx context.Context) ([]*FleetCode, error) {
	if fccb.err != nil {
		return nil, fccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fccb.builders))
	nodes := make([]*FleetCode, len(fccb.builders))
	mutators := make([]Mutator, len(fccb.builders))
	for i := range fccb.builders {
		func(i int, root context.Context) {
			builder := fccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FleetCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fccb *FleetCodeCreateBulk) SaveX(ctx context.Context) []*FleetCode {
	v, err := fccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fccb *FleetCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := fccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fccb *FleetCodeCreateBulk) ExecX(ctx context.Context) {
	if err := fccb.Exec(ctx); err != nil {
		panic(err)
	}
}
