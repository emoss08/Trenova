// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/equipmentmanufactuer"
	"github.com/emoss08/trenova/ent/equipmenttype"
	"github.com/emoss08/trenova/ent/fleetcode"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/tractor"
	"github.com/emoss08/trenova/ent/usstate"
	"github.com/emoss08/trenova/ent/worker"
	"github.com/google/uuid"
)

// TractorUpdate is the builder for updating Tractor entities.
type TractorUpdate struct {
	config
	hooks     []Hook
	mutation  *TractorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TractorUpdate builder.
func (tu *TractorUpdate) Where(ps ...predicate.Tractor) *TractorUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TractorUpdate) SetUpdatedAt(t time.Time) *TractorUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetCode sets the "code" field.
func (tu *TractorUpdate) SetCode(s string) *TractorUpdate {
	tu.mutation.SetCode(s)
	return tu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableCode(s *string) *TractorUpdate {
	if s != nil {
		tu.SetCode(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TractorUpdate) SetStatus(t tractor.Status) *TractorUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableStatus(t *tractor.Status) *TractorUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetEquipmentTypeID sets the "equipment_type_id" field.
func (tu *TractorUpdate) SetEquipmentTypeID(u uuid.UUID) *TractorUpdate {
	tu.mutation.SetEquipmentTypeID(u)
	return tu
}

// SetNillableEquipmentTypeID sets the "equipment_type_id" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableEquipmentTypeID(u *uuid.UUID) *TractorUpdate {
	if u != nil {
		tu.SetEquipmentTypeID(*u)
	}
	return tu
}

// ClearEquipmentTypeID clears the value of the "equipment_type_id" field.
func (tu *TractorUpdate) ClearEquipmentTypeID() *TractorUpdate {
	tu.mutation.ClearEquipmentTypeID()
	return tu
}

// SetLicensePlateNumber sets the "license_plate_number" field.
func (tu *TractorUpdate) SetLicensePlateNumber(s string) *TractorUpdate {
	tu.mutation.SetLicensePlateNumber(s)
	return tu
}

// SetNillableLicensePlateNumber sets the "license_plate_number" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableLicensePlateNumber(s *string) *TractorUpdate {
	if s != nil {
		tu.SetLicensePlateNumber(*s)
	}
	return tu
}

// ClearLicensePlateNumber clears the value of the "license_plate_number" field.
func (tu *TractorUpdate) ClearLicensePlateNumber() *TractorUpdate {
	tu.mutation.ClearLicensePlateNumber()
	return tu
}

// SetVin sets the "vin" field.
func (tu *TractorUpdate) SetVin(s string) *TractorUpdate {
	tu.mutation.SetVin(s)
	return tu
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableVin(s *string) *TractorUpdate {
	if s != nil {
		tu.SetVin(*s)
	}
	return tu
}

// ClearVin clears the value of the "vin" field.
func (tu *TractorUpdate) ClearVin() *TractorUpdate {
	tu.mutation.ClearVin()
	return tu
}

// SetEquipmentManufacturerID sets the "equipment_manufacturer_id" field.
func (tu *TractorUpdate) SetEquipmentManufacturerID(u uuid.UUID) *TractorUpdate {
	tu.mutation.SetEquipmentManufacturerID(u)
	return tu
}

// SetNillableEquipmentManufacturerID sets the "equipment_manufacturer_id" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableEquipmentManufacturerID(u *uuid.UUID) *TractorUpdate {
	if u != nil {
		tu.SetEquipmentManufacturerID(*u)
	}
	return tu
}

// ClearEquipmentManufacturerID clears the value of the "equipment_manufacturer_id" field.
func (tu *TractorUpdate) ClearEquipmentManufacturerID() *TractorUpdate {
	tu.mutation.ClearEquipmentManufacturerID()
	return tu
}

// SetModel sets the "model" field.
func (tu *TractorUpdate) SetModel(s string) *TractorUpdate {
	tu.mutation.SetModel(s)
	return tu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableModel(s *string) *TractorUpdate {
	if s != nil {
		tu.SetModel(*s)
	}
	return tu
}

// ClearModel clears the value of the "model" field.
func (tu *TractorUpdate) ClearModel() *TractorUpdate {
	tu.mutation.ClearModel()
	return tu
}

// SetYear sets the "year" field.
func (tu *TractorUpdate) SetYear(i int) *TractorUpdate {
	tu.mutation.ResetYear()
	tu.mutation.SetYear(i)
	return tu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableYear(i *int) *TractorUpdate {
	if i != nil {
		tu.SetYear(*i)
	}
	return tu
}

// AddYear adds i to the "year" field.
func (tu *TractorUpdate) AddYear(i int) *TractorUpdate {
	tu.mutation.AddYear(i)
	return tu
}

// ClearYear clears the value of the "year" field.
func (tu *TractorUpdate) ClearYear() *TractorUpdate {
	tu.mutation.ClearYear()
	return tu
}

// SetStateID sets the "state_id" field.
func (tu *TractorUpdate) SetStateID(u uuid.UUID) *TractorUpdate {
	tu.mutation.SetStateID(u)
	return tu
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableStateID(u *uuid.UUID) *TractorUpdate {
	if u != nil {
		tu.SetStateID(*u)
	}
	return tu
}

// ClearStateID clears the value of the "state_id" field.
func (tu *TractorUpdate) ClearStateID() *TractorUpdate {
	tu.mutation.ClearStateID()
	return tu
}

// SetLeased sets the "leased" field.
func (tu *TractorUpdate) SetLeased(b bool) *TractorUpdate {
	tu.mutation.SetLeased(b)
	return tu
}

// SetNillableLeased sets the "leased" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableLeased(b *bool) *TractorUpdate {
	if b != nil {
		tu.SetLeased(*b)
	}
	return tu
}

// SetLeasedDate sets the "leased_date" field.
func (tu *TractorUpdate) SetLeasedDate(t time.Time) *TractorUpdate {
	tu.mutation.SetLeasedDate(t)
	return tu
}

// SetNillableLeasedDate sets the "leased_date" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableLeasedDate(t *time.Time) *TractorUpdate {
	if t != nil {
		tu.SetLeasedDate(*t)
	}
	return tu
}

// ClearLeasedDate clears the value of the "leased_date" field.
func (tu *TractorUpdate) ClearLeasedDate() *TractorUpdate {
	tu.mutation.ClearLeasedDate()
	return tu
}

// SetPrimaryWorkerID sets the "primary_worker_id" field.
func (tu *TractorUpdate) SetPrimaryWorkerID(u uuid.UUID) *TractorUpdate {
	tu.mutation.SetPrimaryWorkerID(u)
	return tu
}

// SetNillablePrimaryWorkerID sets the "primary_worker_id" field if the given value is not nil.
func (tu *TractorUpdate) SetNillablePrimaryWorkerID(u *uuid.UUID) *TractorUpdate {
	if u != nil {
		tu.SetPrimaryWorkerID(*u)
	}
	return tu
}

// SetSecondaryWorkerID sets the "secondary_worker_id" field.
func (tu *TractorUpdate) SetSecondaryWorkerID(u uuid.UUID) *TractorUpdate {
	tu.mutation.SetSecondaryWorkerID(u)
	return tu
}

// SetNillableSecondaryWorkerID sets the "secondary_worker_id" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableSecondaryWorkerID(u *uuid.UUID) *TractorUpdate {
	if u != nil {
		tu.SetSecondaryWorkerID(*u)
	}
	return tu
}

// ClearSecondaryWorkerID clears the value of the "secondary_worker_id" field.
func (tu *TractorUpdate) ClearSecondaryWorkerID() *TractorUpdate {
	tu.mutation.ClearSecondaryWorkerID()
	return tu
}

// SetFleetCodeID sets the "fleet_code_id" field.
func (tu *TractorUpdate) SetFleetCodeID(u uuid.UUID) *TractorUpdate {
	tu.mutation.SetFleetCodeID(u)
	return tu
}

// SetNillableFleetCodeID sets the "fleet_code_id" field if the given value is not nil.
func (tu *TractorUpdate) SetNillableFleetCodeID(u *uuid.UUID) *TractorUpdate {
	if u != nil {
		tu.SetFleetCodeID(*u)
	}
	return tu
}

// SetEquipmentType sets the "equipment_type" edge to the EquipmentType entity.
func (tu *TractorUpdate) SetEquipmentType(e *EquipmentType) *TractorUpdate {
	return tu.SetEquipmentTypeID(e.ID)
}

// SetEquipmentManufacturer sets the "equipment_manufacturer" edge to the EquipmentManufactuer entity.
func (tu *TractorUpdate) SetEquipmentManufacturer(e *EquipmentManufactuer) *TractorUpdate {
	return tu.SetEquipmentManufacturerID(e.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (tu *TractorUpdate) SetState(u *UsState) *TractorUpdate {
	return tu.SetStateID(u.ID)
}

// SetPrimaryWorker sets the "primary_worker" edge to the Worker entity.
func (tu *TractorUpdate) SetPrimaryWorker(w *Worker) *TractorUpdate {
	return tu.SetPrimaryWorkerID(w.ID)
}

// SetSecondaryWorker sets the "secondary_worker" edge to the Worker entity.
func (tu *TractorUpdate) SetSecondaryWorker(w *Worker) *TractorUpdate {
	return tu.SetSecondaryWorkerID(w.ID)
}

// SetFleetCode sets the "fleet_code" edge to the FleetCode entity.
func (tu *TractorUpdate) SetFleetCode(f *FleetCode) *TractorUpdate {
	return tu.SetFleetCodeID(f.ID)
}

// Mutation returns the TractorMutation object of the builder.
func (tu *TractorUpdate) Mutation() *TractorMutation {
	return tu.mutation
}

// ClearEquipmentType clears the "equipment_type" edge to the EquipmentType entity.
func (tu *TractorUpdate) ClearEquipmentType() *TractorUpdate {
	tu.mutation.ClearEquipmentType()
	return tu
}

// ClearEquipmentManufacturer clears the "equipment_manufacturer" edge to the EquipmentManufactuer entity.
func (tu *TractorUpdate) ClearEquipmentManufacturer() *TractorUpdate {
	tu.mutation.ClearEquipmentManufacturer()
	return tu
}

// ClearState clears the "state" edge to the UsState entity.
func (tu *TractorUpdate) ClearState() *TractorUpdate {
	tu.mutation.ClearState()
	return tu
}

// ClearPrimaryWorker clears the "primary_worker" edge to the Worker entity.
func (tu *TractorUpdate) ClearPrimaryWorker() *TractorUpdate {
	tu.mutation.ClearPrimaryWorker()
	return tu
}

// ClearSecondaryWorker clears the "secondary_worker" edge to the Worker entity.
func (tu *TractorUpdate) ClearSecondaryWorker() *TractorUpdate {
	tu.mutation.ClearSecondaryWorker()
	return tu
}

// ClearFleetCode clears the "fleet_code" edge to the FleetCode entity.
func (tu *TractorUpdate) ClearFleetCode() *TractorUpdate {
	tu.mutation.ClearFleetCode()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TractorUpdate) Save(ctx context.Context) (int, error) {
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TractorUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TractorUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TractorUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TractorUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if tractor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized tractor.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := tractor.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tu *TractorUpdate) check() error {
	if v, ok := tu.mutation.Code(); ok {
		if err := tractor.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tractor.code": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := tractor.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tractor.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.LicensePlateNumber(); ok {
		if err := tractor.LicensePlateNumberValidator(v); err != nil {
			return &ValidationError{Name: "license_plate_number", err: fmt.Errorf(`ent: validator failed for field "Tractor.license_plate_number": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Vin(); ok {
		if err := tractor.VinValidator(v); err != nil {
			return &ValidationError{Name: "vin", err: fmt.Errorf(`ent: validator failed for field "Tractor.vin": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Model(); ok {
		if err := tractor.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Tractor.model": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Year(); ok {
		if err := tractor.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "Tractor.year": %w`, err)}
		}
	}
	if _, ok := tu.mutation.BusinessUnitID(); tu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tractor.business_unit"`)
	}
	if _, ok := tu.mutation.OrganizationID(); tu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tractor.organization"`)
	}
	if _, ok := tu.mutation.PrimaryWorkerID(); tu.mutation.PrimaryWorkerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tractor.primary_worker"`)
	}
	if _, ok := tu.mutation.FleetCodeID(); tu.mutation.FleetCodeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tractor.fleet_code"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TractorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TractorUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TractorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tractor.Table, tractor.Columns, sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tractor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Code(); ok {
		_spec.SetField(tractor.FieldCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(tractor.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.LicensePlateNumber(); ok {
		_spec.SetField(tractor.FieldLicensePlateNumber, field.TypeString, value)
	}
	if tu.mutation.LicensePlateNumberCleared() {
		_spec.ClearField(tractor.FieldLicensePlateNumber, field.TypeString)
	}
	if value, ok := tu.mutation.Vin(); ok {
		_spec.SetField(tractor.FieldVin, field.TypeString, value)
	}
	if tu.mutation.VinCleared() {
		_spec.ClearField(tractor.FieldVin, field.TypeString)
	}
	if value, ok := tu.mutation.Model(); ok {
		_spec.SetField(tractor.FieldModel, field.TypeString, value)
	}
	if tu.mutation.ModelCleared() {
		_spec.ClearField(tractor.FieldModel, field.TypeString)
	}
	if value, ok := tu.mutation.Year(); ok {
		_spec.SetField(tractor.FieldYear, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedYear(); ok {
		_spec.AddField(tractor.FieldYear, field.TypeInt, value)
	}
	if tu.mutation.YearCleared() {
		_spec.ClearField(tractor.FieldYear, field.TypeInt)
	}
	if value, ok := tu.mutation.Leased(); ok {
		_spec.SetField(tractor.FieldLeased, field.TypeBool, value)
	}
	if value, ok := tu.mutation.LeasedDate(); ok {
		_spec.SetField(tractor.FieldLeasedDate, field.TypeTime, value)
	}
	if tu.mutation.LeasedDateCleared() {
		_spec.ClearField(tractor.FieldLeasedDate, field.TypeTime)
	}
	if tu.mutation.EquipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentTypeTable,
			Columns: []string{tractor.EquipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EquipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentTypeTable,
			Columns: []string{tractor.EquipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.EquipmentManufacturerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentManufacturerTable,
			Columns: []string{tractor.EquipmentManufacturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentmanufactuer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EquipmentManufacturerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentManufacturerTable,
			Columns: []string{tractor.EquipmentManufacturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentmanufactuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.StateTable,
			Columns: []string{tractor.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.StateTable,
			Columns: []string{tractor.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PrimaryWorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.PrimaryWorkerTable,
			Columns: []string{tractor.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PrimaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.PrimaryWorkerTable,
			Columns: []string{tractor.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SecondaryWorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.SecondaryWorkerTable,
			Columns: []string{tractor.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SecondaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.SecondaryWorkerTable,
			Columns: []string{tractor.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FleetCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.FleetCodeTable,
			Columns: []string{tractor.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FleetCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.FleetCodeTable,
			Columns: []string{tractor.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tractor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TractorUpdateOne is the builder for updating a single Tractor entity.
type TractorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TractorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TractorUpdateOne) SetUpdatedAt(t time.Time) *TractorUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetCode sets the "code" field.
func (tuo *TractorUpdateOne) SetCode(s string) *TractorUpdateOne {
	tuo.mutation.SetCode(s)
	return tuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableCode(s *string) *TractorUpdateOne {
	if s != nil {
		tuo.SetCode(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TractorUpdateOne) SetStatus(t tractor.Status) *TractorUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableStatus(t *tractor.Status) *TractorUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetEquipmentTypeID sets the "equipment_type_id" field.
func (tuo *TractorUpdateOne) SetEquipmentTypeID(u uuid.UUID) *TractorUpdateOne {
	tuo.mutation.SetEquipmentTypeID(u)
	return tuo
}

// SetNillableEquipmentTypeID sets the "equipment_type_id" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableEquipmentTypeID(u *uuid.UUID) *TractorUpdateOne {
	if u != nil {
		tuo.SetEquipmentTypeID(*u)
	}
	return tuo
}

// ClearEquipmentTypeID clears the value of the "equipment_type_id" field.
func (tuo *TractorUpdateOne) ClearEquipmentTypeID() *TractorUpdateOne {
	tuo.mutation.ClearEquipmentTypeID()
	return tuo
}

// SetLicensePlateNumber sets the "license_plate_number" field.
func (tuo *TractorUpdateOne) SetLicensePlateNumber(s string) *TractorUpdateOne {
	tuo.mutation.SetLicensePlateNumber(s)
	return tuo
}

// SetNillableLicensePlateNumber sets the "license_plate_number" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableLicensePlateNumber(s *string) *TractorUpdateOne {
	if s != nil {
		tuo.SetLicensePlateNumber(*s)
	}
	return tuo
}

// ClearLicensePlateNumber clears the value of the "license_plate_number" field.
func (tuo *TractorUpdateOne) ClearLicensePlateNumber() *TractorUpdateOne {
	tuo.mutation.ClearLicensePlateNumber()
	return tuo
}

// SetVin sets the "vin" field.
func (tuo *TractorUpdateOne) SetVin(s string) *TractorUpdateOne {
	tuo.mutation.SetVin(s)
	return tuo
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableVin(s *string) *TractorUpdateOne {
	if s != nil {
		tuo.SetVin(*s)
	}
	return tuo
}

// ClearVin clears the value of the "vin" field.
func (tuo *TractorUpdateOne) ClearVin() *TractorUpdateOne {
	tuo.mutation.ClearVin()
	return tuo
}

// SetEquipmentManufacturerID sets the "equipment_manufacturer_id" field.
func (tuo *TractorUpdateOne) SetEquipmentManufacturerID(u uuid.UUID) *TractorUpdateOne {
	tuo.mutation.SetEquipmentManufacturerID(u)
	return tuo
}

// SetNillableEquipmentManufacturerID sets the "equipment_manufacturer_id" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableEquipmentManufacturerID(u *uuid.UUID) *TractorUpdateOne {
	if u != nil {
		tuo.SetEquipmentManufacturerID(*u)
	}
	return tuo
}

// ClearEquipmentManufacturerID clears the value of the "equipment_manufacturer_id" field.
func (tuo *TractorUpdateOne) ClearEquipmentManufacturerID() *TractorUpdateOne {
	tuo.mutation.ClearEquipmentManufacturerID()
	return tuo
}

// SetModel sets the "model" field.
func (tuo *TractorUpdateOne) SetModel(s string) *TractorUpdateOne {
	tuo.mutation.SetModel(s)
	return tuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableModel(s *string) *TractorUpdateOne {
	if s != nil {
		tuo.SetModel(*s)
	}
	return tuo
}

// ClearModel clears the value of the "model" field.
func (tuo *TractorUpdateOne) ClearModel() *TractorUpdateOne {
	tuo.mutation.ClearModel()
	return tuo
}

// SetYear sets the "year" field.
func (tuo *TractorUpdateOne) SetYear(i int) *TractorUpdateOne {
	tuo.mutation.ResetYear()
	tuo.mutation.SetYear(i)
	return tuo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableYear(i *int) *TractorUpdateOne {
	if i != nil {
		tuo.SetYear(*i)
	}
	return tuo
}

// AddYear adds i to the "year" field.
func (tuo *TractorUpdateOne) AddYear(i int) *TractorUpdateOne {
	tuo.mutation.AddYear(i)
	return tuo
}

// ClearYear clears the value of the "year" field.
func (tuo *TractorUpdateOne) ClearYear() *TractorUpdateOne {
	tuo.mutation.ClearYear()
	return tuo
}

// SetStateID sets the "state_id" field.
func (tuo *TractorUpdateOne) SetStateID(u uuid.UUID) *TractorUpdateOne {
	tuo.mutation.SetStateID(u)
	return tuo
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableStateID(u *uuid.UUID) *TractorUpdateOne {
	if u != nil {
		tuo.SetStateID(*u)
	}
	return tuo
}

// ClearStateID clears the value of the "state_id" field.
func (tuo *TractorUpdateOne) ClearStateID() *TractorUpdateOne {
	tuo.mutation.ClearStateID()
	return tuo
}

// SetLeased sets the "leased" field.
func (tuo *TractorUpdateOne) SetLeased(b bool) *TractorUpdateOne {
	tuo.mutation.SetLeased(b)
	return tuo
}

// SetNillableLeased sets the "leased" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableLeased(b *bool) *TractorUpdateOne {
	if b != nil {
		tuo.SetLeased(*b)
	}
	return tuo
}

// SetLeasedDate sets the "leased_date" field.
func (tuo *TractorUpdateOne) SetLeasedDate(t time.Time) *TractorUpdateOne {
	tuo.mutation.SetLeasedDate(t)
	return tuo
}

// SetNillableLeasedDate sets the "leased_date" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableLeasedDate(t *time.Time) *TractorUpdateOne {
	if t != nil {
		tuo.SetLeasedDate(*t)
	}
	return tuo
}

// ClearLeasedDate clears the value of the "leased_date" field.
func (tuo *TractorUpdateOne) ClearLeasedDate() *TractorUpdateOne {
	tuo.mutation.ClearLeasedDate()
	return tuo
}

// SetPrimaryWorkerID sets the "primary_worker_id" field.
func (tuo *TractorUpdateOne) SetPrimaryWorkerID(u uuid.UUID) *TractorUpdateOne {
	tuo.mutation.SetPrimaryWorkerID(u)
	return tuo
}

// SetNillablePrimaryWorkerID sets the "primary_worker_id" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillablePrimaryWorkerID(u *uuid.UUID) *TractorUpdateOne {
	if u != nil {
		tuo.SetPrimaryWorkerID(*u)
	}
	return tuo
}

// SetSecondaryWorkerID sets the "secondary_worker_id" field.
func (tuo *TractorUpdateOne) SetSecondaryWorkerID(u uuid.UUID) *TractorUpdateOne {
	tuo.mutation.SetSecondaryWorkerID(u)
	return tuo
}

// SetNillableSecondaryWorkerID sets the "secondary_worker_id" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableSecondaryWorkerID(u *uuid.UUID) *TractorUpdateOne {
	if u != nil {
		tuo.SetSecondaryWorkerID(*u)
	}
	return tuo
}

// ClearSecondaryWorkerID clears the value of the "secondary_worker_id" field.
func (tuo *TractorUpdateOne) ClearSecondaryWorkerID() *TractorUpdateOne {
	tuo.mutation.ClearSecondaryWorkerID()
	return tuo
}

// SetFleetCodeID sets the "fleet_code_id" field.
func (tuo *TractorUpdateOne) SetFleetCodeID(u uuid.UUID) *TractorUpdateOne {
	tuo.mutation.SetFleetCodeID(u)
	return tuo
}

// SetNillableFleetCodeID sets the "fleet_code_id" field if the given value is not nil.
func (tuo *TractorUpdateOne) SetNillableFleetCodeID(u *uuid.UUID) *TractorUpdateOne {
	if u != nil {
		tuo.SetFleetCodeID(*u)
	}
	return tuo
}

// SetEquipmentType sets the "equipment_type" edge to the EquipmentType entity.
func (tuo *TractorUpdateOne) SetEquipmentType(e *EquipmentType) *TractorUpdateOne {
	return tuo.SetEquipmentTypeID(e.ID)
}

// SetEquipmentManufacturer sets the "equipment_manufacturer" edge to the EquipmentManufactuer entity.
func (tuo *TractorUpdateOne) SetEquipmentManufacturer(e *EquipmentManufactuer) *TractorUpdateOne {
	return tuo.SetEquipmentManufacturerID(e.ID)
}

// SetState sets the "state" edge to the UsState entity.
func (tuo *TractorUpdateOne) SetState(u *UsState) *TractorUpdateOne {
	return tuo.SetStateID(u.ID)
}

// SetPrimaryWorker sets the "primary_worker" edge to the Worker entity.
func (tuo *TractorUpdateOne) SetPrimaryWorker(w *Worker) *TractorUpdateOne {
	return tuo.SetPrimaryWorkerID(w.ID)
}

// SetSecondaryWorker sets the "secondary_worker" edge to the Worker entity.
func (tuo *TractorUpdateOne) SetSecondaryWorker(w *Worker) *TractorUpdateOne {
	return tuo.SetSecondaryWorkerID(w.ID)
}

// SetFleetCode sets the "fleet_code" edge to the FleetCode entity.
func (tuo *TractorUpdateOne) SetFleetCode(f *FleetCode) *TractorUpdateOne {
	return tuo.SetFleetCodeID(f.ID)
}

// Mutation returns the TractorMutation object of the builder.
func (tuo *TractorUpdateOne) Mutation() *TractorMutation {
	return tuo.mutation
}

// ClearEquipmentType clears the "equipment_type" edge to the EquipmentType entity.
func (tuo *TractorUpdateOne) ClearEquipmentType() *TractorUpdateOne {
	tuo.mutation.ClearEquipmentType()
	return tuo
}

// ClearEquipmentManufacturer clears the "equipment_manufacturer" edge to the EquipmentManufactuer entity.
func (tuo *TractorUpdateOne) ClearEquipmentManufacturer() *TractorUpdateOne {
	tuo.mutation.ClearEquipmentManufacturer()
	return tuo
}

// ClearState clears the "state" edge to the UsState entity.
func (tuo *TractorUpdateOne) ClearState() *TractorUpdateOne {
	tuo.mutation.ClearState()
	return tuo
}

// ClearPrimaryWorker clears the "primary_worker" edge to the Worker entity.
func (tuo *TractorUpdateOne) ClearPrimaryWorker() *TractorUpdateOne {
	tuo.mutation.ClearPrimaryWorker()
	return tuo
}

// ClearSecondaryWorker clears the "secondary_worker" edge to the Worker entity.
func (tuo *TractorUpdateOne) ClearSecondaryWorker() *TractorUpdateOne {
	tuo.mutation.ClearSecondaryWorker()
	return tuo
}

// ClearFleetCode clears the "fleet_code" edge to the FleetCode entity.
func (tuo *TractorUpdateOne) ClearFleetCode() *TractorUpdateOne {
	tuo.mutation.ClearFleetCode()
	return tuo
}

// Where appends a list predicates to the TractorUpdate builder.
func (tuo *TractorUpdateOne) Where(ps ...predicate.Tractor) *TractorUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TractorUpdateOne) Select(field string, fields ...string) *TractorUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tractor entity.
func (tuo *TractorUpdateOne) Save(ctx context.Context) (*Tractor, error) {
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TractorUpdateOne) SaveX(ctx context.Context) *Tractor {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TractorUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TractorUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TractorUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if tractor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized tractor.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := tractor.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TractorUpdateOne) check() error {
	if v, ok := tuo.mutation.Code(); ok {
		if err := tractor.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tractor.code": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := tractor.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tractor.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.LicensePlateNumber(); ok {
		if err := tractor.LicensePlateNumberValidator(v); err != nil {
			return &ValidationError{Name: "license_plate_number", err: fmt.Errorf(`ent: validator failed for field "Tractor.license_plate_number": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Vin(); ok {
		if err := tractor.VinValidator(v); err != nil {
			return &ValidationError{Name: "vin", err: fmt.Errorf(`ent: validator failed for field "Tractor.vin": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Model(); ok {
		if err := tractor.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Tractor.model": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Year(); ok {
		if err := tractor.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "Tractor.year": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.BusinessUnitID(); tuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tractor.business_unit"`)
	}
	if _, ok := tuo.mutation.OrganizationID(); tuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tractor.organization"`)
	}
	if _, ok := tuo.mutation.PrimaryWorkerID(); tuo.mutation.PrimaryWorkerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tractor.primary_worker"`)
	}
	if _, ok := tuo.mutation.FleetCodeID(); tuo.mutation.FleetCodeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tractor.fleet_code"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TractorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TractorUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TractorUpdateOne) sqlSave(ctx context.Context) (_node *Tractor, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tractor.Table, tractor.Columns, sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tractor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tractor.FieldID)
		for _, f := range fields {
			if !tractor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tractor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tractor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Code(); ok {
		_spec.SetField(tractor.FieldCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(tractor.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.LicensePlateNumber(); ok {
		_spec.SetField(tractor.FieldLicensePlateNumber, field.TypeString, value)
	}
	if tuo.mutation.LicensePlateNumberCleared() {
		_spec.ClearField(tractor.FieldLicensePlateNumber, field.TypeString)
	}
	if value, ok := tuo.mutation.Vin(); ok {
		_spec.SetField(tractor.FieldVin, field.TypeString, value)
	}
	if tuo.mutation.VinCleared() {
		_spec.ClearField(tractor.FieldVin, field.TypeString)
	}
	if value, ok := tuo.mutation.Model(); ok {
		_spec.SetField(tractor.FieldModel, field.TypeString, value)
	}
	if tuo.mutation.ModelCleared() {
		_spec.ClearField(tractor.FieldModel, field.TypeString)
	}
	if value, ok := tuo.mutation.Year(); ok {
		_spec.SetField(tractor.FieldYear, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedYear(); ok {
		_spec.AddField(tractor.FieldYear, field.TypeInt, value)
	}
	if tuo.mutation.YearCleared() {
		_spec.ClearField(tractor.FieldYear, field.TypeInt)
	}
	if value, ok := tuo.mutation.Leased(); ok {
		_spec.SetField(tractor.FieldLeased, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.LeasedDate(); ok {
		_spec.SetField(tractor.FieldLeasedDate, field.TypeTime, value)
	}
	if tuo.mutation.LeasedDateCleared() {
		_spec.ClearField(tractor.FieldLeasedDate, field.TypeTime)
	}
	if tuo.mutation.EquipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentTypeTable,
			Columns: []string{tractor.EquipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EquipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentTypeTable,
			Columns: []string{tractor.EquipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.EquipmentManufacturerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentManufacturerTable,
			Columns: []string{tractor.EquipmentManufacturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentmanufactuer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EquipmentManufacturerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.EquipmentManufacturerTable,
			Columns: []string{tractor.EquipmentManufacturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentmanufactuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.StateTable,
			Columns: []string{tractor.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.StateTable,
			Columns: []string{tractor.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usstate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PrimaryWorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.PrimaryWorkerTable,
			Columns: []string{tractor.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PrimaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.PrimaryWorkerTable,
			Columns: []string{tractor.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SecondaryWorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.SecondaryWorkerTable,
			Columns: []string{tractor.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SecondaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tractor.SecondaryWorkerTable,
			Columns: []string{tractor.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FleetCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.FleetCodeTable,
			Columns: []string{tractor.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FleetCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tractor.FleetCodeTable,
			Columns: []string{tractor.FleetCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fleetcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Tractor{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tractor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
