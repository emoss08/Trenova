// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/documentclassification"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/shipmentdocumentation"
	"github.com/google/uuid"
)

// ShipmentDocumentationUpdate is the builder for updating ShipmentDocumentation entities.
type ShipmentDocumentationUpdate struct {
	config
	hooks     []Hook
	mutation  *ShipmentDocumentationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShipmentDocumentationUpdate builder.
func (sdu *ShipmentDocumentationUpdate) Where(ps ...predicate.ShipmentDocumentation) *ShipmentDocumentationUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetUpdatedAt sets the "updated_at" field.
func (sdu *ShipmentDocumentationUpdate) SetUpdatedAt(t time.Time) *ShipmentDocumentationUpdate {
	sdu.mutation.SetUpdatedAt(t)
	return sdu
}

// SetVersion sets the "version" field.
func (sdu *ShipmentDocumentationUpdate) SetVersion(i int) *ShipmentDocumentationUpdate {
	sdu.mutation.ResetVersion()
	sdu.mutation.SetVersion(i)
	return sdu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sdu *ShipmentDocumentationUpdate) SetNillableVersion(i *int) *ShipmentDocumentationUpdate {
	if i != nil {
		sdu.SetVersion(*i)
	}
	return sdu
}

// AddVersion adds i to the "version" field.
func (sdu *ShipmentDocumentationUpdate) AddVersion(i int) *ShipmentDocumentationUpdate {
	sdu.mutation.AddVersion(i)
	return sdu
}

// SetDocumentURL sets the "document_url" field.
func (sdu *ShipmentDocumentationUpdate) SetDocumentURL(s string) *ShipmentDocumentationUpdate {
	sdu.mutation.SetDocumentURL(s)
	return sdu
}

// SetNillableDocumentURL sets the "document_url" field if the given value is not nil.
func (sdu *ShipmentDocumentationUpdate) SetNillableDocumentURL(s *string) *ShipmentDocumentationUpdate {
	if s != nil {
		sdu.SetDocumentURL(*s)
	}
	return sdu
}

// SetDocumentClassificationID sets the "document_classification_id" field.
func (sdu *ShipmentDocumentationUpdate) SetDocumentClassificationID(u uuid.UUID) *ShipmentDocumentationUpdate {
	sdu.mutation.SetDocumentClassificationID(u)
	return sdu
}

// SetNillableDocumentClassificationID sets the "document_classification_id" field if the given value is not nil.
func (sdu *ShipmentDocumentationUpdate) SetNillableDocumentClassificationID(u *uuid.UUID) *ShipmentDocumentationUpdate {
	if u != nil {
		sdu.SetDocumentClassificationID(*u)
	}
	return sdu
}

// SetDocumentClassification sets the "document_classification" edge to the DocumentClassification entity.
func (sdu *ShipmentDocumentationUpdate) SetDocumentClassification(d *DocumentClassification) *ShipmentDocumentationUpdate {
	return sdu.SetDocumentClassificationID(d.ID)
}

// Mutation returns the ShipmentDocumentationMutation object of the builder.
func (sdu *ShipmentDocumentationUpdate) Mutation() *ShipmentDocumentationMutation {
	return sdu.mutation
}

// ClearDocumentClassification clears the "document_classification" edge to the DocumentClassification entity.
func (sdu *ShipmentDocumentationUpdate) ClearDocumentClassification() *ShipmentDocumentationUpdate {
	sdu.mutation.ClearDocumentClassification()
	return sdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *ShipmentDocumentationUpdate) Save(ctx context.Context) (int, error) {
	sdu.defaults()
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *ShipmentDocumentationUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *ShipmentDocumentationUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *ShipmentDocumentationUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *ShipmentDocumentationUpdate) defaults() {
	if _, ok := sdu.mutation.UpdatedAt(); !ok {
		v := shipmentdocumentation.UpdateDefaultUpdatedAt()
		sdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *ShipmentDocumentationUpdate) check() error {
	if v, ok := sdu.mutation.DocumentURL(); ok {
		if err := shipmentdocumentation.DocumentURLValidator(v); err != nil {
			return &ValidationError{Name: "document_url", err: fmt.Errorf(`ent: validator failed for field "ShipmentDocumentation.document_url": %w`, err)}
		}
	}
	if _, ok := sdu.mutation.BusinessUnitID(); sdu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentDocumentation.business_unit"`)
	}
	if _, ok := sdu.mutation.OrganizationID(); sdu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentDocumentation.organization"`)
	}
	if _, ok := sdu.mutation.ShipmentID(); sdu.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentDocumentation.shipment"`)
	}
	if _, ok := sdu.mutation.DocumentClassificationID(); sdu.mutation.DocumentClassificationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentDocumentation.document_classification"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sdu *ShipmentDocumentationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentDocumentationUpdate {
	sdu.modifiers = append(sdu.modifiers, modifiers...)
	return sdu
}

func (sdu *ShipmentDocumentationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentdocumentation.Table, shipmentdocumentation.Columns, sqlgraph.NewFieldSpec(shipmentdocumentation.FieldID, field.TypeUUID))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentdocumentation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sdu.mutation.Version(); ok {
		_spec.SetField(shipmentdocumentation.FieldVersion, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentdocumentation.FieldVersion, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.DocumentURL(); ok {
		_spec.SetField(shipmentdocumentation.FieldDocumentURL, field.TypeString, value)
	}
	if sdu.mutation.DocumentClassificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentdocumentation.DocumentClassificationTable,
			Columns: []string{shipmentdocumentation.DocumentClassificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.DocumentClassificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentdocumentation.DocumentClassificationTable,
			Columns: []string{shipmentdocumentation.DocumentClassificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentdocumentation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// ShipmentDocumentationUpdateOne is the builder for updating a single ShipmentDocumentation entity.
type ShipmentDocumentationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShipmentDocumentationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sduo *ShipmentDocumentationUpdateOne) SetUpdatedAt(t time.Time) *ShipmentDocumentationUpdateOne {
	sduo.mutation.SetUpdatedAt(t)
	return sduo
}

// SetVersion sets the "version" field.
func (sduo *ShipmentDocumentationUpdateOne) SetVersion(i int) *ShipmentDocumentationUpdateOne {
	sduo.mutation.ResetVersion()
	sduo.mutation.SetVersion(i)
	return sduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sduo *ShipmentDocumentationUpdateOne) SetNillableVersion(i *int) *ShipmentDocumentationUpdateOne {
	if i != nil {
		sduo.SetVersion(*i)
	}
	return sduo
}

// AddVersion adds i to the "version" field.
func (sduo *ShipmentDocumentationUpdateOne) AddVersion(i int) *ShipmentDocumentationUpdateOne {
	sduo.mutation.AddVersion(i)
	return sduo
}

// SetDocumentURL sets the "document_url" field.
func (sduo *ShipmentDocumentationUpdateOne) SetDocumentURL(s string) *ShipmentDocumentationUpdateOne {
	sduo.mutation.SetDocumentURL(s)
	return sduo
}

// SetNillableDocumentURL sets the "document_url" field if the given value is not nil.
func (sduo *ShipmentDocumentationUpdateOne) SetNillableDocumentURL(s *string) *ShipmentDocumentationUpdateOne {
	if s != nil {
		sduo.SetDocumentURL(*s)
	}
	return sduo
}

// SetDocumentClassificationID sets the "document_classification_id" field.
func (sduo *ShipmentDocumentationUpdateOne) SetDocumentClassificationID(u uuid.UUID) *ShipmentDocumentationUpdateOne {
	sduo.mutation.SetDocumentClassificationID(u)
	return sduo
}

// SetNillableDocumentClassificationID sets the "document_classification_id" field if the given value is not nil.
func (sduo *ShipmentDocumentationUpdateOne) SetNillableDocumentClassificationID(u *uuid.UUID) *ShipmentDocumentationUpdateOne {
	if u != nil {
		sduo.SetDocumentClassificationID(*u)
	}
	return sduo
}

// SetDocumentClassification sets the "document_classification" edge to the DocumentClassification entity.
func (sduo *ShipmentDocumentationUpdateOne) SetDocumentClassification(d *DocumentClassification) *ShipmentDocumentationUpdateOne {
	return sduo.SetDocumentClassificationID(d.ID)
}

// Mutation returns the ShipmentDocumentationMutation object of the builder.
func (sduo *ShipmentDocumentationUpdateOne) Mutation() *ShipmentDocumentationMutation {
	return sduo.mutation
}

// ClearDocumentClassification clears the "document_classification" edge to the DocumentClassification entity.
func (sduo *ShipmentDocumentationUpdateOne) ClearDocumentClassification() *ShipmentDocumentationUpdateOne {
	sduo.mutation.ClearDocumentClassification()
	return sduo
}

// Where appends a list predicates to the ShipmentDocumentationUpdate builder.
func (sduo *ShipmentDocumentationUpdateOne) Where(ps ...predicate.ShipmentDocumentation) *ShipmentDocumentationUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *ShipmentDocumentationUpdateOne) Select(field string, fields ...string) *ShipmentDocumentationUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated ShipmentDocumentation entity.
func (sduo *ShipmentDocumentationUpdateOne) Save(ctx context.Context) (*ShipmentDocumentation, error) {
	sduo.defaults()
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *ShipmentDocumentationUpdateOne) SaveX(ctx context.Context) *ShipmentDocumentation {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *ShipmentDocumentationUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *ShipmentDocumentationUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *ShipmentDocumentationUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdatedAt(); !ok {
		v := shipmentdocumentation.UpdateDefaultUpdatedAt()
		sduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *ShipmentDocumentationUpdateOne) check() error {
	if v, ok := sduo.mutation.DocumentURL(); ok {
		if err := shipmentdocumentation.DocumentURLValidator(v); err != nil {
			return &ValidationError{Name: "document_url", err: fmt.Errorf(`ent: validator failed for field "ShipmentDocumentation.document_url": %w`, err)}
		}
	}
	if _, ok := sduo.mutation.BusinessUnitID(); sduo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentDocumentation.business_unit"`)
	}
	if _, ok := sduo.mutation.OrganizationID(); sduo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentDocumentation.organization"`)
	}
	if _, ok := sduo.mutation.ShipmentID(); sduo.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentDocumentation.shipment"`)
	}
	if _, ok := sduo.mutation.DocumentClassificationID(); sduo.mutation.DocumentClassificationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentDocumentation.document_classification"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sduo *ShipmentDocumentationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentDocumentationUpdateOne {
	sduo.modifiers = append(sduo.modifiers, modifiers...)
	return sduo
}

func (sduo *ShipmentDocumentationUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentDocumentation, err error) {
	if err := sduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentdocumentation.Table, shipmentdocumentation.Columns, sqlgraph.NewFieldSpec(shipmentdocumentation.FieldID, field.TypeUUID))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentDocumentation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentdocumentation.FieldID)
		for _, f := range fields {
			if !shipmentdocumentation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentdocumentation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentdocumentation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sduo.mutation.Version(); ok {
		_spec.SetField(shipmentdocumentation.FieldVersion, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentdocumentation.FieldVersion, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.DocumentURL(); ok {
		_spec.SetField(shipmentdocumentation.FieldDocumentURL, field.TypeString, value)
	}
	if sduo.mutation.DocumentClassificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentdocumentation.DocumentClassificationTable,
			Columns: []string{shipmentdocumentation.DocumentClassificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.DocumentClassificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentdocumentation.DocumentClassificationTable,
			Columns: []string{shipmentdocumentation.DocumentClassificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sduo.modifiers...)
	_node = &ShipmentDocumentation{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentdocumentation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
