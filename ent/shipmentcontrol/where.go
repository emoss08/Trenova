// Code generated by ent, DO NOT EDIT.

package shipmentcontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// AutoRateShipment applies equality check predicate on the "auto_rate_shipment" field. It's identical to AutoRateShipmentEQ.
func AutoRateShipment(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldAutoRateShipment, v))
}

// CalculateDistance applies equality check predicate on the "calculate_distance" field. It's identical to CalculateDistanceEQ.
func CalculateDistance(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldCalculateDistance, v))
}

// EnforceRevCode applies equality check predicate on the "enforce_rev_code" field. It's identical to EnforceRevCodeEQ.
func EnforceRevCode(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceRevCode, v))
}

// EnforceVoidedComm applies equality check predicate on the "enforce_voided_comm" field. It's identical to EnforceVoidedCommEQ.
func EnforceVoidedComm(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceVoidedComm, v))
}

// GenerateRoutes applies equality check predicate on the "generate_routes" field. It's identical to GenerateRoutesEQ.
func GenerateRoutes(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldGenerateRoutes, v))
}

// EnforceCommodity applies equality check predicate on the "enforce_commodity" field. It's identical to EnforceCommodityEQ.
func EnforceCommodity(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceCommodity, v))
}

// AutoSequenceStops applies equality check predicate on the "auto_sequence_stops" field. It's identical to AutoSequenceStopsEQ.
func AutoSequenceStops(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldAutoSequenceStops, v))
}

// AutoShipmentTotal applies equality check predicate on the "auto_shipment_total" field. It's identical to AutoShipmentTotalEQ.
func AutoShipmentTotal(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldAutoShipmentTotal, v))
}

// EnforceOriginDestination applies equality check predicate on the "enforce_origin_destination" field. It's identical to EnforceOriginDestinationEQ.
func EnforceOriginDestination(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceOriginDestination, v))
}

// CheckForDuplicateBol applies equality check predicate on the "check_for_duplicate_bol" field. It's identical to CheckForDuplicateBolEQ.
func CheckForDuplicateBol(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldCheckForDuplicateBol, v))
}

// SendPlacardInfo applies equality check predicate on the "send_placard_info" field. It's identical to SendPlacardInfoEQ.
func SendPlacardInfo(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldSendPlacardInfo, v))
}

// EnforceHazmatSegRules applies equality check predicate on the "enforce_hazmat_seg_rules" field. It's identical to EnforceHazmatSegRulesEQ.
func EnforceHazmatSegRules(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceHazmatSegRules, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldLTE(FieldUpdatedAt, v))
}

// AutoRateShipmentEQ applies the EQ predicate on the "auto_rate_shipment" field.
func AutoRateShipmentEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldAutoRateShipment, v))
}

// AutoRateShipmentNEQ applies the NEQ predicate on the "auto_rate_shipment" field.
func AutoRateShipmentNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldAutoRateShipment, v))
}

// CalculateDistanceEQ applies the EQ predicate on the "calculate_distance" field.
func CalculateDistanceEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldCalculateDistance, v))
}

// CalculateDistanceNEQ applies the NEQ predicate on the "calculate_distance" field.
func CalculateDistanceNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldCalculateDistance, v))
}

// EnforceRevCodeEQ applies the EQ predicate on the "enforce_rev_code" field.
func EnforceRevCodeEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceRevCode, v))
}

// EnforceRevCodeNEQ applies the NEQ predicate on the "enforce_rev_code" field.
func EnforceRevCodeNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldEnforceRevCode, v))
}

// EnforceVoidedCommEQ applies the EQ predicate on the "enforce_voided_comm" field.
func EnforceVoidedCommEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceVoidedComm, v))
}

// EnforceVoidedCommNEQ applies the NEQ predicate on the "enforce_voided_comm" field.
func EnforceVoidedCommNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldEnforceVoidedComm, v))
}

// GenerateRoutesEQ applies the EQ predicate on the "generate_routes" field.
func GenerateRoutesEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldGenerateRoutes, v))
}

// GenerateRoutesNEQ applies the NEQ predicate on the "generate_routes" field.
func GenerateRoutesNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldGenerateRoutes, v))
}

// EnforceCommodityEQ applies the EQ predicate on the "enforce_commodity" field.
func EnforceCommodityEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceCommodity, v))
}

// EnforceCommodityNEQ applies the NEQ predicate on the "enforce_commodity" field.
func EnforceCommodityNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldEnforceCommodity, v))
}

// AutoSequenceStopsEQ applies the EQ predicate on the "auto_sequence_stops" field.
func AutoSequenceStopsEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldAutoSequenceStops, v))
}

// AutoSequenceStopsNEQ applies the NEQ predicate on the "auto_sequence_stops" field.
func AutoSequenceStopsNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldAutoSequenceStops, v))
}

// AutoShipmentTotalEQ applies the EQ predicate on the "auto_shipment_total" field.
func AutoShipmentTotalEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldAutoShipmentTotal, v))
}

// AutoShipmentTotalNEQ applies the NEQ predicate on the "auto_shipment_total" field.
func AutoShipmentTotalNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldAutoShipmentTotal, v))
}

// EnforceOriginDestinationEQ applies the EQ predicate on the "enforce_origin_destination" field.
func EnforceOriginDestinationEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceOriginDestination, v))
}

// EnforceOriginDestinationNEQ applies the NEQ predicate on the "enforce_origin_destination" field.
func EnforceOriginDestinationNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldEnforceOriginDestination, v))
}

// CheckForDuplicateBolEQ applies the EQ predicate on the "check_for_duplicate_bol" field.
func CheckForDuplicateBolEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldCheckForDuplicateBol, v))
}

// CheckForDuplicateBolNEQ applies the NEQ predicate on the "check_for_duplicate_bol" field.
func CheckForDuplicateBolNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldCheckForDuplicateBol, v))
}

// SendPlacardInfoEQ applies the EQ predicate on the "send_placard_info" field.
func SendPlacardInfoEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldSendPlacardInfo, v))
}

// SendPlacardInfoNEQ applies the NEQ predicate on the "send_placard_info" field.
func SendPlacardInfoNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldSendPlacardInfo, v))
}

// EnforceHazmatSegRulesEQ applies the EQ predicate on the "enforce_hazmat_seg_rules" field.
func EnforceHazmatSegRulesEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldEQ(FieldEnforceHazmatSegRules, v))
}

// EnforceHazmatSegRulesNEQ applies the NEQ predicate on the "enforce_hazmat_seg_rules" field.
func EnforceHazmatSegRulesNEQ(v bool) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.FieldNEQ(FieldEnforceHazmatSegRules, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.ShipmentControl {
	return predicate.ShipmentControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.ShipmentControl {
	return predicate.ShipmentControl(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.ShipmentControl {
	return predicate.ShipmentControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.ShipmentControl {
	return predicate.ShipmentControl(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentControl) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentControl) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentControl) predicate.ShipmentControl {
	return predicate.ShipmentControl(sql.NotPredicates(p))
}
