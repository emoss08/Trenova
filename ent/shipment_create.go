// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/customer"
	"github.com/emoss08/trenova/ent/equipmenttype"
	"github.com/emoss08/trenova/ent/location"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/servicetype"
	"github.com/emoss08/trenova/ent/shipment"
	"github.com/emoss08/trenova/ent/shipmentcomment"
	"github.com/emoss08/trenova/ent/shipmentdocumentation"
	"github.com/emoss08/trenova/ent/shipmenttype"
	"github.com/emoss08/trenova/ent/user"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// ShipmentCreate is the builder for creating a Shipment entity.
type ShipmentCreate struct {
	config
	mutation *ShipmentMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (sc *ShipmentCreate) SetBusinessUnitID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetBusinessUnitID(u)
	return sc
}

// SetOrganizationID sets the "organization_id" field.
func (sc *ShipmentCreate) SetOrganizationID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetOrganizationID(u)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ShipmentCreate) SetCreatedAt(t time.Time) *ShipmentCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableCreatedAt(t *time.Time) *ShipmentCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ShipmentCreate) SetUpdatedAt(t time.Time) *ShipmentCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableUpdatedAt(t *time.Time) *ShipmentCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetVersion sets the "version" field.
func (sc *ShipmentCreate) SetVersion(i int) *ShipmentCreate {
	sc.mutation.SetVersion(i)
	return sc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableVersion(i *int) *ShipmentCreate {
	if i != nil {
		sc.SetVersion(*i)
	}
	return sc
}

// SetProNumber sets the "pro_number" field.
func (sc *ShipmentCreate) SetProNumber(s string) *ShipmentCreate {
	sc.mutation.SetProNumber(s)
	return sc
}

// SetStatus sets the "status" field.
func (sc *ShipmentCreate) SetStatus(s shipment.Status) *ShipmentCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetOriginLocationID sets the "origin_location_id" field.
func (sc *ShipmentCreate) SetOriginLocationID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetOriginLocationID(u)
	return sc
}

// SetNillableOriginLocationID sets the "origin_location_id" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableOriginLocationID(u *uuid.UUID) *ShipmentCreate {
	if u != nil {
		sc.SetOriginLocationID(*u)
	}
	return sc
}

// SetOriginAddressLine sets the "origin_address_line" field.
func (sc *ShipmentCreate) SetOriginAddressLine(s string) *ShipmentCreate {
	sc.mutation.SetOriginAddressLine(s)
	return sc
}

// SetNillableOriginAddressLine sets the "origin_address_line" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableOriginAddressLine(s *string) *ShipmentCreate {
	if s != nil {
		sc.SetOriginAddressLine(*s)
	}
	return sc
}

// SetOriginAppointmentStart sets the "origin_appointment_start" field.
func (sc *ShipmentCreate) SetOriginAppointmentStart(t time.Time) *ShipmentCreate {
	sc.mutation.SetOriginAppointmentStart(t)
	return sc
}

// SetNillableOriginAppointmentStart sets the "origin_appointment_start" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableOriginAppointmentStart(t *time.Time) *ShipmentCreate {
	if t != nil {
		sc.SetOriginAppointmentStart(*t)
	}
	return sc
}

// SetOriginAppointmentEnd sets the "origin_appointment_end" field.
func (sc *ShipmentCreate) SetOriginAppointmentEnd(t time.Time) *ShipmentCreate {
	sc.mutation.SetOriginAppointmentEnd(t)
	return sc
}

// SetNillableOriginAppointmentEnd sets the "origin_appointment_end" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableOriginAppointmentEnd(t *time.Time) *ShipmentCreate {
	if t != nil {
		sc.SetOriginAppointmentEnd(*t)
	}
	return sc
}

// SetDestinationLocationID sets the "destination_location_id" field.
func (sc *ShipmentCreate) SetDestinationLocationID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetDestinationLocationID(u)
	return sc
}

// SetNillableDestinationLocationID sets the "destination_location_id" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableDestinationLocationID(u *uuid.UUID) *ShipmentCreate {
	if u != nil {
		sc.SetDestinationLocationID(*u)
	}
	return sc
}

// SetDestinationAddressLine sets the "destination_address_line" field.
func (sc *ShipmentCreate) SetDestinationAddressLine(s string) *ShipmentCreate {
	sc.mutation.SetDestinationAddressLine(s)
	return sc
}

// SetNillableDestinationAddressLine sets the "destination_address_line" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableDestinationAddressLine(s *string) *ShipmentCreate {
	if s != nil {
		sc.SetDestinationAddressLine(*s)
	}
	return sc
}

// SetDestinationAppointmentStart sets the "destination_appointment_start" field.
func (sc *ShipmentCreate) SetDestinationAppointmentStart(t time.Time) *ShipmentCreate {
	sc.mutation.SetDestinationAppointmentStart(t)
	return sc
}

// SetNillableDestinationAppointmentStart sets the "destination_appointment_start" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableDestinationAppointmentStart(t *time.Time) *ShipmentCreate {
	if t != nil {
		sc.SetDestinationAppointmentStart(*t)
	}
	return sc
}

// SetDestinationAppointmentEnd sets the "destination_appointment_end" field.
func (sc *ShipmentCreate) SetDestinationAppointmentEnd(t time.Time) *ShipmentCreate {
	sc.mutation.SetDestinationAppointmentEnd(t)
	return sc
}

// SetNillableDestinationAppointmentEnd sets the "destination_appointment_end" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableDestinationAppointmentEnd(t *time.Time) *ShipmentCreate {
	if t != nil {
		sc.SetDestinationAppointmentEnd(*t)
	}
	return sc
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (sc *ShipmentCreate) SetShipmentTypeID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetShipmentTypeID(u)
	return sc
}

// SetRevenueCodeID sets the "revenue_code_id" field.
func (sc *ShipmentCreate) SetRevenueCodeID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetRevenueCodeID(u)
	return sc
}

// SetNillableRevenueCodeID sets the "revenue_code_id" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableRevenueCodeID(u *uuid.UUID) *ShipmentCreate {
	if u != nil {
		sc.SetRevenueCodeID(*u)
	}
	return sc
}

// SetServiceTypeID sets the "service_type_id" field.
func (sc *ShipmentCreate) SetServiceTypeID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetServiceTypeID(u)
	return sc
}

// SetNillableServiceTypeID sets the "service_type_id" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableServiceTypeID(u *uuid.UUID) *ShipmentCreate {
	if u != nil {
		sc.SetServiceTypeID(*u)
	}
	return sc
}

// SetRatingUnit sets the "rating_unit" field.
func (sc *ShipmentCreate) SetRatingUnit(i int) *ShipmentCreate {
	sc.mutation.SetRatingUnit(i)
	return sc
}

// SetNillableRatingUnit sets the "rating_unit" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableRatingUnit(i *int) *ShipmentCreate {
	if i != nil {
		sc.SetRatingUnit(*i)
	}
	return sc
}

// SetMileage sets the "mileage" field.
func (sc *ShipmentCreate) SetMileage(f float64) *ShipmentCreate {
	sc.mutation.SetMileage(f)
	return sc
}

// SetNillableMileage sets the "mileage" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableMileage(f *float64) *ShipmentCreate {
	if f != nil {
		sc.SetMileage(*f)
	}
	return sc
}

// SetOtherChargeAmount sets the "other_charge_amount" field.
func (sc *ShipmentCreate) SetOtherChargeAmount(f float64) *ShipmentCreate {
	sc.mutation.SetOtherChargeAmount(f)
	return sc
}

// SetNillableOtherChargeAmount sets the "other_charge_amount" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableOtherChargeAmount(f *float64) *ShipmentCreate {
	if f != nil {
		sc.SetOtherChargeAmount(*f)
	}
	return sc
}

// SetFreightChargeAmount sets the "freight_charge_amount" field.
func (sc *ShipmentCreate) SetFreightChargeAmount(f float64) *ShipmentCreate {
	sc.mutation.SetFreightChargeAmount(f)
	return sc
}

// SetNillableFreightChargeAmount sets the "freight_charge_amount" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableFreightChargeAmount(f *float64) *ShipmentCreate {
	if f != nil {
		sc.SetFreightChargeAmount(*f)
	}
	return sc
}

// SetRatingMethod sets the "rating_method" field.
func (sc *ShipmentCreate) SetRatingMethod(sm shipment.RatingMethod) *ShipmentCreate {
	sc.mutation.SetRatingMethod(sm)
	return sc
}

// SetNillableRatingMethod sets the "rating_method" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableRatingMethod(sm *shipment.RatingMethod) *ShipmentCreate {
	if sm != nil {
		sc.SetRatingMethod(*sm)
	}
	return sc
}

// SetCustomerID sets the "customer_id" field.
func (sc *ShipmentCreate) SetCustomerID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetCustomerID(u)
	return sc
}

// SetPieces sets the "pieces" field.
func (sc *ShipmentCreate) SetPieces(f float64) *ShipmentCreate {
	sc.mutation.SetPieces(f)
	return sc
}

// SetNillablePieces sets the "pieces" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillablePieces(f *float64) *ShipmentCreate {
	if f != nil {
		sc.SetPieces(*f)
	}
	return sc
}

// SetWeight sets the "weight" field.
func (sc *ShipmentCreate) SetWeight(f float64) *ShipmentCreate {
	sc.mutation.SetWeight(f)
	return sc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableWeight(f *float64) *ShipmentCreate {
	if f != nil {
		sc.SetWeight(*f)
	}
	return sc
}

// SetReadyToBill sets the "ready_to_bill" field.
func (sc *ShipmentCreate) SetReadyToBill(b bool) *ShipmentCreate {
	sc.mutation.SetReadyToBill(b)
	return sc
}

// SetNillableReadyToBill sets the "ready_to_bill" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableReadyToBill(b *bool) *ShipmentCreate {
	if b != nil {
		sc.SetReadyToBill(*b)
	}
	return sc
}

// SetBillDate sets the "bill_date" field.
func (sc *ShipmentCreate) SetBillDate(pg *pgtype.Date) *ShipmentCreate {
	sc.mutation.SetBillDate(pg)
	return sc
}

// SetShipDate sets the "ship_date" field.
func (sc *ShipmentCreate) SetShipDate(pg *pgtype.Date) *ShipmentCreate {
	sc.mutation.SetShipDate(pg)
	return sc
}

// SetBilled sets the "billed" field.
func (sc *ShipmentCreate) SetBilled(b bool) *ShipmentCreate {
	sc.mutation.SetBilled(b)
	return sc
}

// SetNillableBilled sets the "billed" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableBilled(b *bool) *ShipmentCreate {
	if b != nil {
		sc.SetBilled(*b)
	}
	return sc
}

// SetTransferredToBilling sets the "transferred_to_billing" field.
func (sc *ShipmentCreate) SetTransferredToBilling(b bool) *ShipmentCreate {
	sc.mutation.SetTransferredToBilling(b)
	return sc
}

// SetNillableTransferredToBilling sets the "transferred_to_billing" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableTransferredToBilling(b *bool) *ShipmentCreate {
	if b != nil {
		sc.SetTransferredToBilling(*b)
	}
	return sc
}

// SetTransferredToBillingDate sets the "transferred_to_billing_date" field.
func (sc *ShipmentCreate) SetTransferredToBillingDate(pg *pgtype.Date) *ShipmentCreate {
	sc.mutation.SetTransferredToBillingDate(pg)
	return sc
}

// SetTotalChargeAmount sets the "total_charge_amount" field.
func (sc *ShipmentCreate) SetTotalChargeAmount(f float64) *ShipmentCreate {
	sc.mutation.SetTotalChargeAmount(f)
	return sc
}

// SetNillableTotalChargeAmount sets the "total_charge_amount" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableTotalChargeAmount(f *float64) *ShipmentCreate {
	if f != nil {
		sc.SetTotalChargeAmount(*f)
	}
	return sc
}

// SetTrailerTypeID sets the "trailer_type_id" field.
func (sc *ShipmentCreate) SetTrailerTypeID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetTrailerTypeID(u)
	return sc
}

// SetNillableTrailerTypeID sets the "trailer_type_id" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableTrailerTypeID(u *uuid.UUID) *ShipmentCreate {
	if u != nil {
		sc.SetTrailerTypeID(*u)
	}
	return sc
}

// SetTractorTypeID sets the "tractor_type_id" field.
func (sc *ShipmentCreate) SetTractorTypeID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetTractorTypeID(u)
	return sc
}

// SetNillableTractorTypeID sets the "tractor_type_id" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableTractorTypeID(u *uuid.UUID) *ShipmentCreate {
	if u != nil {
		sc.SetTractorTypeID(*u)
	}
	return sc
}

// SetTemperatureMin sets the "temperature_min" field.
func (sc *ShipmentCreate) SetTemperatureMin(i int) *ShipmentCreate {
	sc.mutation.SetTemperatureMin(i)
	return sc
}

// SetNillableTemperatureMin sets the "temperature_min" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableTemperatureMin(i *int) *ShipmentCreate {
	if i != nil {
		sc.SetTemperatureMin(*i)
	}
	return sc
}

// SetTemperatureMax sets the "temperature_max" field.
func (sc *ShipmentCreate) SetTemperatureMax(i int) *ShipmentCreate {
	sc.mutation.SetTemperatureMax(i)
	return sc
}

// SetNillableTemperatureMax sets the "temperature_max" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableTemperatureMax(i *int) *ShipmentCreate {
	if i != nil {
		sc.SetTemperatureMax(*i)
	}
	return sc
}

// SetBillOfLadingNumber sets the "bill_of_lading_number" field.
func (sc *ShipmentCreate) SetBillOfLadingNumber(s string) *ShipmentCreate {
	sc.mutation.SetBillOfLadingNumber(s)
	return sc
}

// SetNillableBillOfLadingNumber sets the "bill_of_lading_number" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableBillOfLadingNumber(s *string) *ShipmentCreate {
	if s != nil {
		sc.SetBillOfLadingNumber(*s)
	}
	return sc
}

// SetConsigneeReferenceNumber sets the "consignee_reference_number" field.
func (sc *ShipmentCreate) SetConsigneeReferenceNumber(s string) *ShipmentCreate {
	sc.mutation.SetConsigneeReferenceNumber(s)
	return sc
}

// SetNillableConsigneeReferenceNumber sets the "consignee_reference_number" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableConsigneeReferenceNumber(s *string) *ShipmentCreate {
	if s != nil {
		sc.SetConsigneeReferenceNumber(*s)
	}
	return sc
}

// SetComment sets the "comment" field.
func (sc *ShipmentCreate) SetComment(s string) *ShipmentCreate {
	sc.mutation.SetComment(s)
	return sc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableComment(s *string) *ShipmentCreate {
	if s != nil {
		sc.SetComment(*s)
	}
	return sc
}

// SetVoidedComment sets the "voided_comment" field.
func (sc *ShipmentCreate) SetVoidedComment(s string) *ShipmentCreate {
	sc.mutation.SetVoidedComment(s)
	return sc
}

// SetNillableVoidedComment sets the "voided_comment" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableVoidedComment(s *string) *ShipmentCreate {
	if s != nil {
		sc.SetVoidedComment(*s)
	}
	return sc
}

// SetAutoRated sets the "auto_rated" field.
func (sc *ShipmentCreate) SetAutoRated(b bool) *ShipmentCreate {
	sc.mutation.SetAutoRated(b)
	return sc
}

// SetNillableAutoRated sets the "auto_rated" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableAutoRated(b *bool) *ShipmentCreate {
	if b != nil {
		sc.SetAutoRated(*b)
	}
	return sc
}

// SetCurrentSuffix sets the "current_suffix" field.
func (sc *ShipmentCreate) SetCurrentSuffix(s string) *ShipmentCreate {
	sc.mutation.SetCurrentSuffix(s)
	return sc
}

// SetNillableCurrentSuffix sets the "current_suffix" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableCurrentSuffix(s *string) *ShipmentCreate {
	if s != nil {
		sc.SetCurrentSuffix(*s)
	}
	return sc
}

// SetEntryMethod sets the "entry_method" field.
func (sc *ShipmentCreate) SetEntryMethod(sm shipment.EntryMethod) *ShipmentCreate {
	sc.mutation.SetEntryMethod(sm)
	return sc
}

// SetNillableEntryMethod sets the "entry_method" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableEntryMethod(sm *shipment.EntryMethod) *ShipmentCreate {
	if sm != nil {
		sc.SetEntryMethod(*sm)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *ShipmentCreate) SetCreatedBy(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetCreatedBy(u)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableCreatedBy(u *uuid.UUID) *ShipmentCreate {
	if u != nil {
		sc.SetCreatedBy(*u)
	}
	return sc
}

// SetIsHazardous sets the "is_hazardous" field.
func (sc *ShipmentCreate) SetIsHazardous(b bool) *ShipmentCreate {
	sc.mutation.SetIsHazardous(b)
	return sc
}

// SetNillableIsHazardous sets the "is_hazardous" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableIsHazardous(b *bool) *ShipmentCreate {
	if b != nil {
		sc.SetIsHazardous(*b)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ShipmentCreate) SetID(u uuid.UUID) *ShipmentCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableID(u *uuid.UUID) *ShipmentCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (sc *ShipmentCreate) SetBusinessUnit(b *BusinessUnit) *ShipmentCreate {
	return sc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (sc *ShipmentCreate) SetOrganization(o *Organization) *ShipmentCreate {
	return sc.SetOrganizationID(o.ID)
}

// SetShipmentType sets the "shipment_type" edge to the ShipmentType entity.
func (sc *ShipmentCreate) SetShipmentType(s *ShipmentType) *ShipmentCreate {
	return sc.SetShipmentTypeID(s.ID)
}

// SetServiceType sets the "service_type" edge to the ServiceType entity.
func (sc *ShipmentCreate) SetServiceType(s *ServiceType) *ShipmentCreate {
	return sc.SetServiceTypeID(s.ID)
}

// SetRevenueCode sets the "revenue_code" edge to the ServiceType entity.
func (sc *ShipmentCreate) SetRevenueCode(s *ServiceType) *ShipmentCreate {
	return sc.SetRevenueCodeID(s.ID)
}

// SetOriginLocation sets the "origin_location" edge to the Location entity.
func (sc *ShipmentCreate) SetOriginLocation(l *Location) *ShipmentCreate {
	return sc.SetOriginLocationID(l.ID)
}

// SetDestinationLocation sets the "destination_location" edge to the Location entity.
func (sc *ShipmentCreate) SetDestinationLocation(l *Location) *ShipmentCreate {
	return sc.SetDestinationLocationID(l.ID)
}

// SetTrailerType sets the "trailer_type" edge to the EquipmentType entity.
func (sc *ShipmentCreate) SetTrailerType(e *EquipmentType) *ShipmentCreate {
	return sc.SetTrailerTypeID(e.ID)
}

// SetTractorType sets the "tractor_type" edge to the EquipmentType entity.
func (sc *ShipmentCreate) SetTractorType(e *EquipmentType) *ShipmentCreate {
	return sc.SetTractorTypeID(e.ID)
}

// SetCreatedByUserID sets the "created_by_user" edge to the User entity by ID.
func (sc *ShipmentCreate) SetCreatedByUserID(id uuid.UUID) *ShipmentCreate {
	sc.mutation.SetCreatedByUserID(id)
	return sc
}

// SetNillableCreatedByUserID sets the "created_by_user" edge to the User entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableCreatedByUserID(id *uuid.UUID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetCreatedByUserID(*id)
	}
	return sc
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (sc *ShipmentCreate) SetCreatedByUser(u *User) *ShipmentCreate {
	return sc.SetCreatedByUserID(u.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (sc *ShipmentCreate) SetCustomer(c *Customer) *ShipmentCreate {
	return sc.SetCustomerID(c.ID)
}

// AddShipmentDocumentationIDs adds the "shipment_documentation" edge to the ShipmentDocumentation entity by IDs.
func (sc *ShipmentCreate) AddShipmentDocumentationIDs(ids ...uuid.UUID) *ShipmentCreate {
	sc.mutation.AddShipmentDocumentationIDs(ids...)
	return sc
}

// AddShipmentDocumentation adds the "shipment_documentation" edges to the ShipmentDocumentation entity.
func (sc *ShipmentCreate) AddShipmentDocumentation(s ...*ShipmentDocumentation) *ShipmentCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddShipmentDocumentationIDs(ids...)
}

// AddShipmentCommentIDs adds the "shipment_comments" edge to the ShipmentComment entity by IDs.
func (sc *ShipmentCreate) AddShipmentCommentIDs(ids ...int) *ShipmentCreate {
	sc.mutation.AddShipmentCommentIDs(ids...)
	return sc
}

// AddShipmentComments adds the "shipment_comments" edges to the ShipmentComment entity.
func (sc *ShipmentCreate) AddShipmentComments(s ...*ShipmentComment) *ShipmentCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddShipmentCommentIDs(ids...)
}

// Mutation returns the ShipmentMutation object of the builder.
func (sc *ShipmentCreate) Mutation() *ShipmentMutation {
	return sc.mutation
}

// Save creates the Shipment in the database.
func (sc *ShipmentCreate) Save(ctx context.Context) (*Shipment, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShipmentCreate) SaveX(ctx context.Context) *Shipment {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShipmentCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShipmentCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShipmentCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if shipment.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized shipment.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := shipment.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if shipment.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized shipment.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := shipment.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Version(); !ok {
		v := shipment.DefaultVersion
		sc.mutation.SetVersion(v)
	}
	if _, ok := sc.mutation.RatingUnit(); !ok {
		v := shipment.DefaultRatingUnit
		sc.mutation.SetRatingUnit(v)
	}
	if _, ok := sc.mutation.RatingMethod(); !ok {
		v := shipment.DefaultRatingMethod
		sc.mutation.SetRatingMethod(v)
	}
	if _, ok := sc.mutation.ReadyToBill(); !ok {
		v := shipment.DefaultReadyToBill
		sc.mutation.SetReadyToBill(v)
	}
	if _, ok := sc.mutation.Billed(); !ok {
		v := shipment.DefaultBilled
		sc.mutation.SetBilled(v)
	}
	if _, ok := sc.mutation.TransferredToBilling(); !ok {
		v := shipment.DefaultTransferredToBilling
		sc.mutation.SetTransferredToBilling(v)
	}
	if _, ok := sc.mutation.AutoRated(); !ok {
		v := shipment.DefaultAutoRated
		sc.mutation.SetAutoRated(v)
	}
	if _, ok := sc.mutation.EntryMethod(); !ok {
		v := shipment.DefaultEntryMethod
		sc.mutation.SetEntryMethod(v)
	}
	if _, ok := sc.mutation.IsHazardous(); !ok {
		v := shipment.DefaultIsHazardous
		sc.mutation.SetIsHazardous(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if shipment.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipment.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipment.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShipmentCreate) check() error {
	if _, ok := sc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "Shipment.business_unit_id"`)}
	}
	if _, ok := sc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Shipment.organization_id"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Shipment.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Shipment.updated_at"`)}
	}
	if _, ok := sc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Shipment.version"`)}
	}
	if _, ok := sc.mutation.ProNumber(); !ok {
		return &ValidationError{Name: "pro_number", err: errors.New(`ent: missing required field "Shipment.pro_number"`)}
	}
	if v, ok := sc.mutation.ProNumber(); ok {
		if err := shipment.ProNumberValidator(v); err != nil {
			return &ValidationError{Name: "pro_number", err: fmt.Errorf(`ent: validator failed for field "Shipment.pro_number": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Shipment.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := shipment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Shipment.status": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ShipmentTypeID(); !ok {
		return &ValidationError{Name: "shipment_type_id", err: errors.New(`ent: missing required field "Shipment.shipment_type_id"`)}
	}
	if _, ok := sc.mutation.RatingUnit(); !ok {
		return &ValidationError{Name: "rating_unit", err: errors.New(`ent: missing required field "Shipment.rating_unit"`)}
	}
	if v, ok := sc.mutation.RatingUnit(); ok {
		if err := shipment.RatingUnitValidator(v); err != nil {
			return &ValidationError{Name: "rating_unit", err: fmt.Errorf(`ent: validator failed for field "Shipment.rating_unit": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Mileage(); ok {
		if err := shipment.MileageValidator(v); err != nil {
			return &ValidationError{Name: "mileage", err: fmt.Errorf(`ent: validator failed for field "Shipment.mileage": %w`, err)}
		}
	}
	if v, ok := sc.mutation.OtherChargeAmount(); ok {
		if err := shipment.OtherChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "other_charge_amount", err: fmt.Errorf(`ent: validator failed for field "Shipment.other_charge_amount": %w`, err)}
		}
	}
	if v, ok := sc.mutation.FreightChargeAmount(); ok {
		if err := shipment.FreightChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "freight_charge_amount", err: fmt.Errorf(`ent: validator failed for field "Shipment.freight_charge_amount": %w`, err)}
		}
	}
	if _, ok := sc.mutation.RatingMethod(); !ok {
		return &ValidationError{Name: "rating_method", err: errors.New(`ent: missing required field "Shipment.rating_method"`)}
	}
	if v, ok := sc.mutation.RatingMethod(); ok {
		if err := shipment.RatingMethodValidator(v); err != nil {
			return &ValidationError{Name: "rating_method", err: fmt.Errorf(`ent: validator failed for field "Shipment.rating_method": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "Shipment.customer_id"`)}
	}
	if v, ok := sc.mutation.Pieces(); ok {
		if err := shipment.PiecesValidator(v); err != nil {
			return &ValidationError{Name: "pieces", err: fmt.Errorf(`ent: validator failed for field "Shipment.pieces": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Weight(); ok {
		if err := shipment.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Shipment.weight": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ReadyToBill(); !ok {
		return &ValidationError{Name: "ready_to_bill", err: errors.New(`ent: missing required field "Shipment.ready_to_bill"`)}
	}
	if _, ok := sc.mutation.Billed(); !ok {
		return &ValidationError{Name: "billed", err: errors.New(`ent: missing required field "Shipment.billed"`)}
	}
	if _, ok := sc.mutation.TransferredToBilling(); !ok {
		return &ValidationError{Name: "transferred_to_billing", err: errors.New(`ent: missing required field "Shipment.transferred_to_billing"`)}
	}
	if v, ok := sc.mutation.TotalChargeAmount(); ok {
		if err := shipment.TotalChargeAmountValidator(v); err != nil {
			return &ValidationError{Name: "total_charge_amount", err: fmt.Errorf(`ent: validator failed for field "Shipment.total_charge_amount": %w`, err)}
		}
	}
	if v, ok := sc.mutation.VoidedComment(); ok {
		if err := shipment.VoidedCommentValidator(v); err != nil {
			return &ValidationError{Name: "voided_comment", err: fmt.Errorf(`ent: validator failed for field "Shipment.voided_comment": %w`, err)}
		}
	}
	if _, ok := sc.mutation.AutoRated(); !ok {
		return &ValidationError{Name: "auto_rated", err: errors.New(`ent: missing required field "Shipment.auto_rated"`)}
	}
	if _, ok := sc.mutation.EntryMethod(); !ok {
		return &ValidationError{Name: "entry_method", err: errors.New(`ent: missing required field "Shipment.entry_method"`)}
	}
	if v, ok := sc.mutation.EntryMethod(); ok {
		if err := shipment.EntryMethodValidator(v); err != nil {
			return &ValidationError{Name: "entry_method", err: fmt.Errorf(`ent: validator failed for field "Shipment.entry_method": %w`, err)}
		}
	}
	if _, ok := sc.mutation.IsHazardous(); !ok {
		return &ValidationError{Name: "is_hazardous", err: errors.New(`ent: missing required field "Shipment.is_hazardous"`)}
	}
	if _, ok := sc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "Shipment.business_unit"`)}
	}
	if _, ok := sc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Shipment.organization"`)}
	}
	if _, ok := sc.mutation.ShipmentTypeID(); !ok {
		return &ValidationError{Name: "shipment_type", err: errors.New(`ent: missing required edge "Shipment.shipment_type"`)}
	}
	if _, ok := sc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Shipment.customer"`)}
	}
	return nil
}

func (sc *ShipmentCreate) sqlSave(ctx context.Context) (*Shipment, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShipmentCreate) createSpec() (*Shipment, *sqlgraph.CreateSpec) {
	var (
		_node = &Shipment{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(shipment.Table, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(shipment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(shipment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Version(); ok {
		_spec.SetField(shipment.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := sc.mutation.ProNumber(); ok {
		_spec.SetField(shipment.FieldProNumber, field.TypeString, value)
		_node.ProNumber = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(shipment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.OriginAddressLine(); ok {
		_spec.SetField(shipment.FieldOriginAddressLine, field.TypeString, value)
		_node.OriginAddressLine = value
	}
	if value, ok := sc.mutation.OriginAppointmentStart(); ok {
		_spec.SetField(shipment.FieldOriginAppointmentStart, field.TypeTime, value)
		_node.OriginAppointmentStart = &value
	}
	if value, ok := sc.mutation.OriginAppointmentEnd(); ok {
		_spec.SetField(shipment.FieldOriginAppointmentEnd, field.TypeTime, value)
		_node.OriginAppointmentEnd = &value
	}
	if value, ok := sc.mutation.DestinationAddressLine(); ok {
		_spec.SetField(shipment.FieldDestinationAddressLine, field.TypeString, value)
		_node.DestinationAddressLine = value
	}
	if value, ok := sc.mutation.DestinationAppointmentStart(); ok {
		_spec.SetField(shipment.FieldDestinationAppointmentStart, field.TypeTime, value)
		_node.DestinationAppointmentStart = &value
	}
	if value, ok := sc.mutation.DestinationAppointmentEnd(); ok {
		_spec.SetField(shipment.FieldDestinationAppointmentEnd, field.TypeTime, value)
		_node.DestinationAppointmentEnd = &value
	}
	if value, ok := sc.mutation.RatingUnit(); ok {
		_spec.SetField(shipment.FieldRatingUnit, field.TypeInt, value)
		_node.RatingUnit = value
	}
	if value, ok := sc.mutation.Mileage(); ok {
		_spec.SetField(shipment.FieldMileage, field.TypeFloat64, value)
		_node.Mileage = value
	}
	if value, ok := sc.mutation.OtherChargeAmount(); ok {
		_spec.SetField(shipment.FieldOtherChargeAmount, field.TypeFloat64, value)
		_node.OtherChargeAmount = value
	}
	if value, ok := sc.mutation.FreightChargeAmount(); ok {
		_spec.SetField(shipment.FieldFreightChargeAmount, field.TypeFloat64, value)
		_node.FreightChargeAmount = value
	}
	if value, ok := sc.mutation.RatingMethod(); ok {
		_spec.SetField(shipment.FieldRatingMethod, field.TypeEnum, value)
		_node.RatingMethod = value
	}
	if value, ok := sc.mutation.Pieces(); ok {
		_spec.SetField(shipment.FieldPieces, field.TypeFloat64, value)
		_node.Pieces = value
	}
	if value, ok := sc.mutation.Weight(); ok {
		_spec.SetField(shipment.FieldWeight, field.TypeFloat64, value)
		_node.Weight = value
	}
	if value, ok := sc.mutation.ReadyToBill(); ok {
		_spec.SetField(shipment.FieldReadyToBill, field.TypeBool, value)
		_node.ReadyToBill = value
	}
	if value, ok := sc.mutation.BillDate(); ok {
		_spec.SetField(shipment.FieldBillDate, field.TypeOther, value)
		_node.BillDate = value
	}
	if value, ok := sc.mutation.ShipDate(); ok {
		_spec.SetField(shipment.FieldShipDate, field.TypeOther, value)
		_node.ShipDate = value
	}
	if value, ok := sc.mutation.Billed(); ok {
		_spec.SetField(shipment.FieldBilled, field.TypeBool, value)
		_node.Billed = value
	}
	if value, ok := sc.mutation.TransferredToBilling(); ok {
		_spec.SetField(shipment.FieldTransferredToBilling, field.TypeBool, value)
		_node.TransferredToBilling = value
	}
	if value, ok := sc.mutation.TransferredToBillingDate(); ok {
		_spec.SetField(shipment.FieldTransferredToBillingDate, field.TypeOther, value)
		_node.TransferredToBillingDate = value
	}
	if value, ok := sc.mutation.TotalChargeAmount(); ok {
		_spec.SetField(shipment.FieldTotalChargeAmount, field.TypeFloat64, value)
		_node.TotalChargeAmount = value
	}
	if value, ok := sc.mutation.TemperatureMin(); ok {
		_spec.SetField(shipment.FieldTemperatureMin, field.TypeInt, value)
		_node.TemperatureMin = value
	}
	if value, ok := sc.mutation.TemperatureMax(); ok {
		_spec.SetField(shipment.FieldTemperatureMax, field.TypeInt, value)
		_node.TemperatureMax = value
	}
	if value, ok := sc.mutation.BillOfLadingNumber(); ok {
		_spec.SetField(shipment.FieldBillOfLadingNumber, field.TypeString, value)
		_node.BillOfLadingNumber = value
	}
	if value, ok := sc.mutation.ConsigneeReferenceNumber(); ok {
		_spec.SetField(shipment.FieldConsigneeReferenceNumber, field.TypeString, value)
		_node.ConsigneeReferenceNumber = value
	}
	if value, ok := sc.mutation.Comment(); ok {
		_spec.SetField(shipment.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := sc.mutation.VoidedComment(); ok {
		_spec.SetField(shipment.FieldVoidedComment, field.TypeString, value)
		_node.VoidedComment = value
	}
	if value, ok := sc.mutation.AutoRated(); ok {
		_spec.SetField(shipment.FieldAutoRated, field.TypeBool, value)
		_node.AutoRated = value
	}
	if value, ok := sc.mutation.CurrentSuffix(); ok {
		_spec.SetField(shipment.FieldCurrentSuffix, field.TypeString, value)
		_node.CurrentSuffix = value
	}
	if value, ok := sc.mutation.EntryMethod(); ok {
		_spec.SetField(shipment.FieldEntryMethod, field.TypeEnum, value)
		_node.EntryMethod = value
	}
	if value, ok := sc.mutation.IsHazardous(); ok {
		_spec.SetField(shipment.FieldIsHazardous, field.TypeBool, value)
		_node.IsHazardous = value
	}
	if nodes := sc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.BusinessUnitTable,
			Columns: []string{shipment.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.OrganizationTable,
			Columns: []string{shipment.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ShipmentTypeTable,
			Columns: []string{shipment.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShipmentTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ServiceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.ServiceTypeTable,
			Columns: []string{shipment.ServiceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServiceTypeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.RevenueCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.RevenueCodeTable,
			Columns: []string{shipment.RevenueCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RevenueCodeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OriginLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.OriginLocationTable,
			Columns: []string{shipment.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OriginLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DestinationLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.DestinationLocationTable,
			Columns: []string{shipment.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DestinationLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TrailerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TrailerTypeTable,
			Columns: []string{shipment.TrailerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TrailerTypeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TractorTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TractorTypeTable,
			Columns: []string{shipment.TractorTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TractorTypeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.CreatedByUserTable,
			Columns: []string{shipment.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.CustomerTable,
			Columns: []string{shipment.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentDocumentationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentDocumentationTable,
			Columns: []string{shipment.ShipmentDocumentationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdocumentation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentCommentsTable,
			Columns: []string{shipment.ShipmentCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentcomment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShipmentCreateBulk is the builder for creating many Shipment entities in bulk.
type ShipmentCreateBulk struct {
	config
	err      error
	builders []*ShipmentCreate
}

// Save creates the Shipment entities in the database.
func (scb *ShipmentCreateBulk) Save(ctx context.Context) ([]*Shipment, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shipment, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShipmentCreateBulk) SaveX(ctx context.Context) []*Shipment {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShipmentCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShipmentCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
