// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/emoss08/trenova/ent/shipmentmove"
	"github.com/emoss08/trenova/ent/stop"
	"github.com/emoss08/trenova/ent/tractor"
	"github.com/emoss08/trenova/ent/worker"
	"github.com/google/uuid"
)

// ShipmentMoveUpdate is the builder for updating ShipmentMove entities.
type ShipmentMoveUpdate struct {
	config
	hooks     []Hook
	mutation  *ShipmentMoveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShipmentMoveUpdate builder.
func (smu *ShipmentMoveUpdate) Where(ps ...predicate.ShipmentMove) *ShipmentMoveUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *ShipmentMoveUpdate) SetUpdatedAt(t time.Time) *ShipmentMoveUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// SetVersion sets the "version" field.
func (smu *ShipmentMoveUpdate) SetVersion(i int) *ShipmentMoveUpdate {
	smu.mutation.ResetVersion()
	smu.mutation.SetVersion(i)
	return smu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (smu *ShipmentMoveUpdate) SetNillableVersion(i *int) *ShipmentMoveUpdate {
	if i != nil {
		smu.SetVersion(*i)
	}
	return smu
}

// AddVersion adds i to the "version" field.
func (smu *ShipmentMoveUpdate) AddVersion(i int) *ShipmentMoveUpdate {
	smu.mutation.AddVersion(i)
	return smu
}

// SetStatus sets the "status" field.
func (smu *ShipmentMoveUpdate) SetStatus(s shipmentmove.Status) *ShipmentMoveUpdate {
	smu.mutation.SetStatus(s)
	return smu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (smu *ShipmentMoveUpdate) SetNillableStatus(s *shipmentmove.Status) *ShipmentMoveUpdate {
	if s != nil {
		smu.SetStatus(*s)
	}
	return smu
}

// SetIsLoaded sets the "is_loaded" field.
func (smu *ShipmentMoveUpdate) SetIsLoaded(b bool) *ShipmentMoveUpdate {
	smu.mutation.SetIsLoaded(b)
	return smu
}

// SetNillableIsLoaded sets the "is_loaded" field if the given value is not nil.
func (smu *ShipmentMoveUpdate) SetNillableIsLoaded(b *bool) *ShipmentMoveUpdate {
	if b != nil {
		smu.SetIsLoaded(*b)
	}
	return smu
}

// SetTractorID sets the "tractor_id" field.
func (smu *ShipmentMoveUpdate) SetTractorID(u uuid.UUID) *ShipmentMoveUpdate {
	smu.mutation.SetTractorID(u)
	return smu
}

// SetNillableTractorID sets the "tractor_id" field if the given value is not nil.
func (smu *ShipmentMoveUpdate) SetNillableTractorID(u *uuid.UUID) *ShipmentMoveUpdate {
	if u != nil {
		smu.SetTractorID(*u)
	}
	return smu
}

// ClearTractorID clears the value of the "tractor_id" field.
func (smu *ShipmentMoveUpdate) ClearTractorID() *ShipmentMoveUpdate {
	smu.mutation.ClearTractorID()
	return smu
}

// SetTrailerID sets the "trailer_id" field.
func (smu *ShipmentMoveUpdate) SetTrailerID(u uuid.UUID) *ShipmentMoveUpdate {
	smu.mutation.SetTrailerID(u)
	return smu
}

// SetNillableTrailerID sets the "trailer_id" field if the given value is not nil.
func (smu *ShipmentMoveUpdate) SetNillableTrailerID(u *uuid.UUID) *ShipmentMoveUpdate {
	if u != nil {
		smu.SetTrailerID(*u)
	}
	return smu
}

// ClearTrailerID clears the value of the "trailer_id" field.
func (smu *ShipmentMoveUpdate) ClearTrailerID() *ShipmentMoveUpdate {
	smu.mutation.ClearTrailerID()
	return smu
}

// SetPrimaryWorkerID sets the "primary_worker_id" field.
func (smu *ShipmentMoveUpdate) SetPrimaryWorkerID(u uuid.UUID) *ShipmentMoveUpdate {
	smu.mutation.SetPrimaryWorkerID(u)
	return smu
}

// SetNillablePrimaryWorkerID sets the "primary_worker_id" field if the given value is not nil.
func (smu *ShipmentMoveUpdate) SetNillablePrimaryWorkerID(u *uuid.UUID) *ShipmentMoveUpdate {
	if u != nil {
		smu.SetPrimaryWorkerID(*u)
	}
	return smu
}

// ClearPrimaryWorkerID clears the value of the "primary_worker_id" field.
func (smu *ShipmentMoveUpdate) ClearPrimaryWorkerID() *ShipmentMoveUpdate {
	smu.mutation.ClearPrimaryWorkerID()
	return smu
}

// SetSecondaryWorkerID sets the "secondary_worker_id" field.
func (smu *ShipmentMoveUpdate) SetSecondaryWorkerID(u uuid.UUID) *ShipmentMoveUpdate {
	smu.mutation.SetSecondaryWorkerID(u)
	return smu
}

// SetNillableSecondaryWorkerID sets the "secondary_worker_id" field if the given value is not nil.
func (smu *ShipmentMoveUpdate) SetNillableSecondaryWorkerID(u *uuid.UUID) *ShipmentMoveUpdate {
	if u != nil {
		smu.SetSecondaryWorkerID(*u)
	}
	return smu
}

// ClearSecondaryWorkerID clears the value of the "secondary_worker_id" field.
func (smu *ShipmentMoveUpdate) ClearSecondaryWorkerID() *ShipmentMoveUpdate {
	smu.mutation.ClearSecondaryWorkerID()
	return smu
}

// SetTractor sets the "tractor" edge to the Tractor entity.
func (smu *ShipmentMoveUpdate) SetTractor(t *Tractor) *ShipmentMoveUpdate {
	return smu.SetTractorID(t.ID)
}

// SetTrailer sets the "trailer" edge to the Tractor entity.
func (smu *ShipmentMoveUpdate) SetTrailer(t *Tractor) *ShipmentMoveUpdate {
	return smu.SetTrailerID(t.ID)
}

// SetPrimaryWorker sets the "primary_worker" edge to the Worker entity.
func (smu *ShipmentMoveUpdate) SetPrimaryWorker(w *Worker) *ShipmentMoveUpdate {
	return smu.SetPrimaryWorkerID(w.ID)
}

// SetSecondaryWorker sets the "secondary_worker" edge to the Worker entity.
func (smu *ShipmentMoveUpdate) SetSecondaryWorker(w *Worker) *ShipmentMoveUpdate {
	return smu.SetSecondaryWorkerID(w.ID)
}

// AddMoveStopIDs adds the "move_stops" edge to the Stop entity by IDs.
func (smu *ShipmentMoveUpdate) AddMoveStopIDs(ids ...uuid.UUID) *ShipmentMoveUpdate {
	smu.mutation.AddMoveStopIDs(ids...)
	return smu
}

// AddMoveStops adds the "move_stops" edges to the Stop entity.
func (smu *ShipmentMoveUpdate) AddMoveStops(s ...*Stop) *ShipmentMoveUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddMoveStopIDs(ids...)
}

// Mutation returns the ShipmentMoveMutation object of the builder.
func (smu *ShipmentMoveUpdate) Mutation() *ShipmentMoveMutation {
	return smu.mutation
}

// ClearTractor clears the "tractor" edge to the Tractor entity.
func (smu *ShipmentMoveUpdate) ClearTractor() *ShipmentMoveUpdate {
	smu.mutation.ClearTractor()
	return smu
}

// ClearTrailer clears the "trailer" edge to the Tractor entity.
func (smu *ShipmentMoveUpdate) ClearTrailer() *ShipmentMoveUpdate {
	smu.mutation.ClearTrailer()
	return smu
}

// ClearPrimaryWorker clears the "primary_worker" edge to the Worker entity.
func (smu *ShipmentMoveUpdate) ClearPrimaryWorker() *ShipmentMoveUpdate {
	smu.mutation.ClearPrimaryWorker()
	return smu
}

// ClearSecondaryWorker clears the "secondary_worker" edge to the Worker entity.
func (smu *ShipmentMoveUpdate) ClearSecondaryWorker() *ShipmentMoveUpdate {
	smu.mutation.ClearSecondaryWorker()
	return smu
}

// ClearMoveStops clears all "move_stops" edges to the Stop entity.
func (smu *ShipmentMoveUpdate) ClearMoveStops() *ShipmentMoveUpdate {
	smu.mutation.ClearMoveStops()
	return smu
}

// RemoveMoveStopIDs removes the "move_stops" edge to Stop entities by IDs.
func (smu *ShipmentMoveUpdate) RemoveMoveStopIDs(ids ...uuid.UUID) *ShipmentMoveUpdate {
	smu.mutation.RemoveMoveStopIDs(ids...)
	return smu
}

// RemoveMoveStops removes "move_stops" edges to Stop entities.
func (smu *ShipmentMoveUpdate) RemoveMoveStops(s ...*Stop) *ShipmentMoveUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveMoveStopIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *ShipmentMoveUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *ShipmentMoveUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *ShipmentMoveUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *ShipmentMoveUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *ShipmentMoveUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok {
		v := shipmentmove.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *ShipmentMoveUpdate) check() error {
	if v, ok := smu.mutation.Status(); ok {
		if err := shipmentmove.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentMove.status": %w`, err)}
		}
	}
	if _, ok := smu.mutation.BusinessUnitID(); smu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentMove.business_unit"`)
	}
	if _, ok := smu.mutation.OrganizationID(); smu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentMove.organization"`)
	}
	if _, ok := smu.mutation.ShipmentID(); smu.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentMove.shipment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smu *ShipmentMoveUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentMoveUpdate {
	smu.modifiers = append(smu.modifiers, modifiers...)
	return smu
}

func (smu *ShipmentMoveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentmove.Table, shipmentmove.Columns, sqlgraph.NewFieldSpec(shipmentmove.FieldID, field.TypeUUID))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentmove.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smu.mutation.Version(); ok {
		_spec.SetField(shipmentmove.FieldVersion, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentmove.FieldVersion, field.TypeInt, value)
	}
	if value, ok := smu.mutation.Status(); ok {
		_spec.SetField(shipmentmove.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := smu.mutation.IsLoaded(); ok {
		_spec.SetField(shipmentmove.FieldIsLoaded, field.TypeBool, value)
	}
	if smu.mutation.TractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TractorTable,
			Columns: []string{shipmentmove.TractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.TractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TractorTable,
			Columns: []string{shipmentmove.TractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.TrailerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TrailerTable,
			Columns: []string{shipmentmove.TrailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.TrailerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TrailerTable,
			Columns: []string{shipmentmove.TrailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.PrimaryWorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.PrimaryWorkerTable,
			Columns: []string{shipmentmove.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.PrimaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.PrimaryWorkerTable,
			Columns: []string{shipmentmove.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.SecondaryWorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.SecondaryWorkerTable,
			Columns: []string{shipmentmove.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.SecondaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.SecondaryWorkerTable,
			Columns: []string{shipmentmove.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.MoveStopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentmove.MoveStopsTable,
			Columns: []string{shipmentmove.MoveStopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stop.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedMoveStopsIDs(); len(nodes) > 0 && !smu.mutation.MoveStopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentmove.MoveStopsTable,
			Columns: []string{shipmentmove.MoveStopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stop.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.MoveStopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentmove.MoveStopsTable,
			Columns: []string{shipmentmove.MoveStopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stop.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(smu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentmove.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// ShipmentMoveUpdateOne is the builder for updating a single ShipmentMove entity.
type ShipmentMoveUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShipmentMoveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *ShipmentMoveUpdateOne) SetUpdatedAt(t time.Time) *ShipmentMoveUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// SetVersion sets the "version" field.
func (smuo *ShipmentMoveUpdateOne) SetVersion(i int) *ShipmentMoveUpdateOne {
	smuo.mutation.ResetVersion()
	smuo.mutation.SetVersion(i)
	return smuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (smuo *ShipmentMoveUpdateOne) SetNillableVersion(i *int) *ShipmentMoveUpdateOne {
	if i != nil {
		smuo.SetVersion(*i)
	}
	return smuo
}

// AddVersion adds i to the "version" field.
func (smuo *ShipmentMoveUpdateOne) AddVersion(i int) *ShipmentMoveUpdateOne {
	smuo.mutation.AddVersion(i)
	return smuo
}

// SetStatus sets the "status" field.
func (smuo *ShipmentMoveUpdateOne) SetStatus(s shipmentmove.Status) *ShipmentMoveUpdateOne {
	smuo.mutation.SetStatus(s)
	return smuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (smuo *ShipmentMoveUpdateOne) SetNillableStatus(s *shipmentmove.Status) *ShipmentMoveUpdateOne {
	if s != nil {
		smuo.SetStatus(*s)
	}
	return smuo
}

// SetIsLoaded sets the "is_loaded" field.
func (smuo *ShipmentMoveUpdateOne) SetIsLoaded(b bool) *ShipmentMoveUpdateOne {
	smuo.mutation.SetIsLoaded(b)
	return smuo
}

// SetNillableIsLoaded sets the "is_loaded" field if the given value is not nil.
func (smuo *ShipmentMoveUpdateOne) SetNillableIsLoaded(b *bool) *ShipmentMoveUpdateOne {
	if b != nil {
		smuo.SetIsLoaded(*b)
	}
	return smuo
}

// SetTractorID sets the "tractor_id" field.
func (smuo *ShipmentMoveUpdateOne) SetTractorID(u uuid.UUID) *ShipmentMoveUpdateOne {
	smuo.mutation.SetTractorID(u)
	return smuo
}

// SetNillableTractorID sets the "tractor_id" field if the given value is not nil.
func (smuo *ShipmentMoveUpdateOne) SetNillableTractorID(u *uuid.UUID) *ShipmentMoveUpdateOne {
	if u != nil {
		smuo.SetTractorID(*u)
	}
	return smuo
}

// ClearTractorID clears the value of the "tractor_id" field.
func (smuo *ShipmentMoveUpdateOne) ClearTractorID() *ShipmentMoveUpdateOne {
	smuo.mutation.ClearTractorID()
	return smuo
}

// SetTrailerID sets the "trailer_id" field.
func (smuo *ShipmentMoveUpdateOne) SetTrailerID(u uuid.UUID) *ShipmentMoveUpdateOne {
	smuo.mutation.SetTrailerID(u)
	return smuo
}

// SetNillableTrailerID sets the "trailer_id" field if the given value is not nil.
func (smuo *ShipmentMoveUpdateOne) SetNillableTrailerID(u *uuid.UUID) *ShipmentMoveUpdateOne {
	if u != nil {
		smuo.SetTrailerID(*u)
	}
	return smuo
}

// ClearTrailerID clears the value of the "trailer_id" field.
func (smuo *ShipmentMoveUpdateOne) ClearTrailerID() *ShipmentMoveUpdateOne {
	smuo.mutation.ClearTrailerID()
	return smuo
}

// SetPrimaryWorkerID sets the "primary_worker_id" field.
func (smuo *ShipmentMoveUpdateOne) SetPrimaryWorkerID(u uuid.UUID) *ShipmentMoveUpdateOne {
	smuo.mutation.SetPrimaryWorkerID(u)
	return smuo
}

// SetNillablePrimaryWorkerID sets the "primary_worker_id" field if the given value is not nil.
func (smuo *ShipmentMoveUpdateOne) SetNillablePrimaryWorkerID(u *uuid.UUID) *ShipmentMoveUpdateOne {
	if u != nil {
		smuo.SetPrimaryWorkerID(*u)
	}
	return smuo
}

// ClearPrimaryWorkerID clears the value of the "primary_worker_id" field.
func (smuo *ShipmentMoveUpdateOne) ClearPrimaryWorkerID() *ShipmentMoveUpdateOne {
	smuo.mutation.ClearPrimaryWorkerID()
	return smuo
}

// SetSecondaryWorkerID sets the "secondary_worker_id" field.
func (smuo *ShipmentMoveUpdateOne) SetSecondaryWorkerID(u uuid.UUID) *ShipmentMoveUpdateOne {
	smuo.mutation.SetSecondaryWorkerID(u)
	return smuo
}

// SetNillableSecondaryWorkerID sets the "secondary_worker_id" field if the given value is not nil.
func (smuo *ShipmentMoveUpdateOne) SetNillableSecondaryWorkerID(u *uuid.UUID) *ShipmentMoveUpdateOne {
	if u != nil {
		smuo.SetSecondaryWorkerID(*u)
	}
	return smuo
}

// ClearSecondaryWorkerID clears the value of the "secondary_worker_id" field.
func (smuo *ShipmentMoveUpdateOne) ClearSecondaryWorkerID() *ShipmentMoveUpdateOne {
	smuo.mutation.ClearSecondaryWorkerID()
	return smuo
}

// SetTractor sets the "tractor" edge to the Tractor entity.
func (smuo *ShipmentMoveUpdateOne) SetTractor(t *Tractor) *ShipmentMoveUpdateOne {
	return smuo.SetTractorID(t.ID)
}

// SetTrailer sets the "trailer" edge to the Tractor entity.
func (smuo *ShipmentMoveUpdateOne) SetTrailer(t *Tractor) *ShipmentMoveUpdateOne {
	return smuo.SetTrailerID(t.ID)
}

// SetPrimaryWorker sets the "primary_worker" edge to the Worker entity.
func (smuo *ShipmentMoveUpdateOne) SetPrimaryWorker(w *Worker) *ShipmentMoveUpdateOne {
	return smuo.SetPrimaryWorkerID(w.ID)
}

// SetSecondaryWorker sets the "secondary_worker" edge to the Worker entity.
func (smuo *ShipmentMoveUpdateOne) SetSecondaryWorker(w *Worker) *ShipmentMoveUpdateOne {
	return smuo.SetSecondaryWorkerID(w.ID)
}

// AddMoveStopIDs adds the "move_stops" edge to the Stop entity by IDs.
func (smuo *ShipmentMoveUpdateOne) AddMoveStopIDs(ids ...uuid.UUID) *ShipmentMoveUpdateOne {
	smuo.mutation.AddMoveStopIDs(ids...)
	return smuo
}

// AddMoveStops adds the "move_stops" edges to the Stop entity.
func (smuo *ShipmentMoveUpdateOne) AddMoveStops(s ...*Stop) *ShipmentMoveUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddMoveStopIDs(ids...)
}

// Mutation returns the ShipmentMoveMutation object of the builder.
func (smuo *ShipmentMoveUpdateOne) Mutation() *ShipmentMoveMutation {
	return smuo.mutation
}

// ClearTractor clears the "tractor" edge to the Tractor entity.
func (smuo *ShipmentMoveUpdateOne) ClearTractor() *ShipmentMoveUpdateOne {
	smuo.mutation.ClearTractor()
	return smuo
}

// ClearTrailer clears the "trailer" edge to the Tractor entity.
func (smuo *ShipmentMoveUpdateOne) ClearTrailer() *ShipmentMoveUpdateOne {
	smuo.mutation.ClearTrailer()
	return smuo
}

// ClearPrimaryWorker clears the "primary_worker" edge to the Worker entity.
func (smuo *ShipmentMoveUpdateOne) ClearPrimaryWorker() *ShipmentMoveUpdateOne {
	smuo.mutation.ClearPrimaryWorker()
	return smuo
}

// ClearSecondaryWorker clears the "secondary_worker" edge to the Worker entity.
func (smuo *ShipmentMoveUpdateOne) ClearSecondaryWorker() *ShipmentMoveUpdateOne {
	smuo.mutation.ClearSecondaryWorker()
	return smuo
}

// ClearMoveStops clears all "move_stops" edges to the Stop entity.
func (smuo *ShipmentMoveUpdateOne) ClearMoveStops() *ShipmentMoveUpdateOne {
	smuo.mutation.ClearMoveStops()
	return smuo
}

// RemoveMoveStopIDs removes the "move_stops" edge to Stop entities by IDs.
func (smuo *ShipmentMoveUpdateOne) RemoveMoveStopIDs(ids ...uuid.UUID) *ShipmentMoveUpdateOne {
	smuo.mutation.RemoveMoveStopIDs(ids...)
	return smuo
}

// RemoveMoveStops removes "move_stops" edges to Stop entities.
func (smuo *ShipmentMoveUpdateOne) RemoveMoveStops(s ...*Stop) *ShipmentMoveUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveMoveStopIDs(ids...)
}

// Where appends a list predicates to the ShipmentMoveUpdate builder.
func (smuo *ShipmentMoveUpdateOne) Where(ps ...predicate.ShipmentMove) *ShipmentMoveUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *ShipmentMoveUpdateOne) Select(field string, fields ...string) *ShipmentMoveUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated ShipmentMove entity.
func (smuo *ShipmentMoveUpdateOne) Save(ctx context.Context) (*ShipmentMove, error) {
	smuo.defaults()
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *ShipmentMoveUpdateOne) SaveX(ctx context.Context) *ShipmentMove {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *ShipmentMoveUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *ShipmentMoveUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *ShipmentMoveUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok {
		v := shipmentmove.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *ShipmentMoveUpdateOne) check() error {
	if v, ok := smuo.mutation.Status(); ok {
		if err := shipmentmove.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentMove.status": %w`, err)}
		}
	}
	if _, ok := smuo.mutation.BusinessUnitID(); smuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentMove.business_unit"`)
	}
	if _, ok := smuo.mutation.OrganizationID(); smuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentMove.organization"`)
	}
	if _, ok := smuo.mutation.ShipmentID(); smuo.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentMove.shipment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smuo *ShipmentMoveUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShipmentMoveUpdateOne {
	smuo.modifiers = append(smuo.modifiers, modifiers...)
	return smuo
}

func (smuo *ShipmentMoveUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentMove, err error) {
	if err := smuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentmove.Table, shipmentmove.Columns, sqlgraph.NewFieldSpec(shipmentmove.FieldID, field.TypeUUID))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentMove.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentmove.FieldID)
		for _, f := range fields {
			if !shipmentmove.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentmove.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentmove.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smuo.mutation.Version(); ok {
		_spec.SetField(shipmentmove.FieldVersion, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedVersion(); ok {
		_spec.AddField(shipmentmove.FieldVersion, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.Status(); ok {
		_spec.SetField(shipmentmove.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := smuo.mutation.IsLoaded(); ok {
		_spec.SetField(shipmentmove.FieldIsLoaded, field.TypeBool, value)
	}
	if smuo.mutation.TractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TractorTable,
			Columns: []string{shipmentmove.TractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.TractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TractorTable,
			Columns: []string{shipmentmove.TractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.TrailerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TrailerTable,
			Columns: []string{shipmentmove.TrailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.TrailerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.TrailerTable,
			Columns: []string{shipmentmove.TrailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tractor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.PrimaryWorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.PrimaryWorkerTable,
			Columns: []string{shipmentmove.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.PrimaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.PrimaryWorkerTable,
			Columns: []string{shipmentmove.PrimaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.SecondaryWorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.SecondaryWorkerTable,
			Columns: []string{shipmentmove.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.SecondaryWorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentmove.SecondaryWorkerTable,
			Columns: []string{shipmentmove.SecondaryWorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.MoveStopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentmove.MoveStopsTable,
			Columns: []string{shipmentmove.MoveStopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stop.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedMoveStopsIDs(); len(nodes) > 0 && !smuo.mutation.MoveStopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentmove.MoveStopsTable,
			Columns: []string{shipmentmove.MoveStopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stop.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.MoveStopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentmove.MoveStopsTable,
			Columns: []string{shipmentmove.MoveStopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stop.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(smuo.modifiers...)
	_node = &ShipmentMove{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentmove.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
