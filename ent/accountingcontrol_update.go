// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/accountingcontrol"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/generalledgeraccount"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// AccountingControlUpdate is the builder for updating AccountingControl entities.
type AccountingControlUpdate struct {
	config
	hooks     []Hook
	mutation  *AccountingControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AccountingControlUpdate builder.
func (acu *AccountingControlUpdate) Where(ps ...predicate.AccountingControl) *AccountingControlUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AccountingControlUpdate) SetUpdatedAt(t time.Time) *AccountingControlUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetRecThreshold sets the "rec_threshold" field.
func (acu *AccountingControlUpdate) SetRecThreshold(i int8) *AccountingControlUpdate {
	acu.mutation.ResetRecThreshold()
	acu.mutation.SetRecThreshold(i)
	return acu
}

// SetNillableRecThreshold sets the "rec_threshold" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableRecThreshold(i *int8) *AccountingControlUpdate {
	if i != nil {
		acu.SetRecThreshold(*i)
	}
	return acu
}

// AddRecThreshold adds i to the "rec_threshold" field.
func (acu *AccountingControlUpdate) AddRecThreshold(i int8) *AccountingControlUpdate {
	acu.mutation.AddRecThreshold(i)
	return acu
}

// SetRecThresholdAction sets the "rec_threshold_action" field.
func (acu *AccountingControlUpdate) SetRecThresholdAction(ata accountingcontrol.RecThresholdAction) *AccountingControlUpdate {
	acu.mutation.SetRecThresholdAction(ata)
	return acu
}

// SetNillableRecThresholdAction sets the "rec_threshold_action" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableRecThresholdAction(ata *accountingcontrol.RecThresholdAction) *AccountingControlUpdate {
	if ata != nil {
		acu.SetRecThresholdAction(*ata)
	}
	return acu
}

// SetAutoCreateJournalEntries sets the "auto_create_journal_entries" field.
func (acu *AccountingControlUpdate) SetAutoCreateJournalEntries(b bool) *AccountingControlUpdate {
	acu.mutation.SetAutoCreateJournalEntries(b)
	return acu
}

// SetNillableAutoCreateJournalEntries sets the "auto_create_journal_entries" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableAutoCreateJournalEntries(b *bool) *AccountingControlUpdate {
	if b != nil {
		acu.SetAutoCreateJournalEntries(*b)
	}
	return acu
}

// SetJournalEntryCriteria sets the "journal_entry_criteria" field.
func (acu *AccountingControlUpdate) SetJournalEntryCriteria(aec accountingcontrol.JournalEntryCriteria) *AccountingControlUpdate {
	acu.mutation.SetJournalEntryCriteria(aec)
	return acu
}

// SetNillableJournalEntryCriteria sets the "journal_entry_criteria" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableJournalEntryCriteria(aec *accountingcontrol.JournalEntryCriteria) *AccountingControlUpdate {
	if aec != nil {
		acu.SetJournalEntryCriteria(*aec)
	}
	return acu
}

// SetRestrictManualJournalEntries sets the "restrict_manual_journal_entries" field.
func (acu *AccountingControlUpdate) SetRestrictManualJournalEntries(b bool) *AccountingControlUpdate {
	acu.mutation.SetRestrictManualJournalEntries(b)
	return acu
}

// SetNillableRestrictManualJournalEntries sets the "restrict_manual_journal_entries" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableRestrictManualJournalEntries(b *bool) *AccountingControlUpdate {
	if b != nil {
		acu.SetRestrictManualJournalEntries(*b)
	}
	return acu
}

// SetRequireJournalEntryApproval sets the "require_journal_entry_approval" field.
func (acu *AccountingControlUpdate) SetRequireJournalEntryApproval(b bool) *AccountingControlUpdate {
	acu.mutation.SetRequireJournalEntryApproval(b)
	return acu
}

// SetNillableRequireJournalEntryApproval sets the "require_journal_entry_approval" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableRequireJournalEntryApproval(b *bool) *AccountingControlUpdate {
	if b != nil {
		acu.SetRequireJournalEntryApproval(*b)
	}
	return acu
}

// SetEnableRecNotifications sets the "enable_rec_notifications" field.
func (acu *AccountingControlUpdate) SetEnableRecNotifications(b bool) *AccountingControlUpdate {
	acu.mutation.SetEnableRecNotifications(b)
	return acu
}

// SetNillableEnableRecNotifications sets the "enable_rec_notifications" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableEnableRecNotifications(b *bool) *AccountingControlUpdate {
	if b != nil {
		acu.SetEnableRecNotifications(*b)
	}
	return acu
}

// SetHaltOnPendingRec sets the "halt_on_pending_rec" field.
func (acu *AccountingControlUpdate) SetHaltOnPendingRec(b bool) *AccountingControlUpdate {
	acu.mutation.SetHaltOnPendingRec(b)
	return acu
}

// SetNillableHaltOnPendingRec sets the "halt_on_pending_rec" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableHaltOnPendingRec(b *bool) *AccountingControlUpdate {
	if b != nil {
		acu.SetHaltOnPendingRec(*b)
	}
	return acu
}

// SetCriticalProcesses sets the "critical_processes" field.
func (acu *AccountingControlUpdate) SetCriticalProcesses(s string) *AccountingControlUpdate {
	acu.mutation.SetCriticalProcesses(s)
	return acu
}

// SetNillableCriticalProcesses sets the "critical_processes" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableCriticalProcesses(s *string) *AccountingControlUpdate {
	if s != nil {
		acu.SetCriticalProcesses(*s)
	}
	return acu
}

// ClearCriticalProcesses clears the value of the "critical_processes" field.
func (acu *AccountingControlUpdate) ClearCriticalProcesses() *AccountingControlUpdate {
	acu.mutation.ClearCriticalProcesses()
	return acu
}

// SetDefaultRevAccountID sets the "default_rev_account_id" field.
func (acu *AccountingControlUpdate) SetDefaultRevAccountID(u uuid.UUID) *AccountingControlUpdate {
	acu.mutation.SetDefaultRevAccountID(u)
	return acu
}

// SetNillableDefaultRevAccountID sets the "default_rev_account_id" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableDefaultRevAccountID(u *uuid.UUID) *AccountingControlUpdate {
	if u != nil {
		acu.SetDefaultRevAccountID(*u)
	}
	return acu
}

// ClearDefaultRevAccountID clears the value of the "default_rev_account_id" field.
func (acu *AccountingControlUpdate) ClearDefaultRevAccountID() *AccountingControlUpdate {
	acu.mutation.ClearDefaultRevAccountID()
	return acu
}

// SetDefaultExpAccountID sets the "default_exp_account_id" field.
func (acu *AccountingControlUpdate) SetDefaultExpAccountID(u uuid.UUID) *AccountingControlUpdate {
	acu.mutation.SetDefaultExpAccountID(u)
	return acu
}

// SetNillableDefaultExpAccountID sets the "default_exp_account_id" field if the given value is not nil.
func (acu *AccountingControlUpdate) SetNillableDefaultExpAccountID(u *uuid.UUID) *AccountingControlUpdate {
	if u != nil {
		acu.SetDefaultExpAccountID(*u)
	}
	return acu
}

// ClearDefaultExpAccountID clears the value of the "default_exp_account_id" field.
func (acu *AccountingControlUpdate) ClearDefaultExpAccountID() *AccountingControlUpdate {
	acu.mutation.ClearDefaultExpAccountID()
	return acu
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (acu *AccountingControlUpdate) SetOrganizationID(id uuid.UUID) *AccountingControlUpdate {
	acu.mutation.SetOrganizationID(id)
	return acu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (acu *AccountingControlUpdate) SetOrganization(o *Organization) *AccountingControlUpdate {
	return acu.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (acu *AccountingControlUpdate) SetBusinessUnitID(id uuid.UUID) *AccountingControlUpdate {
	acu.mutation.SetBusinessUnitID(id)
	return acu
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (acu *AccountingControlUpdate) SetBusinessUnit(b *BusinessUnit) *AccountingControlUpdate {
	return acu.SetBusinessUnitID(b.ID)
}

// SetDefaultRevAccount sets the "default_rev_account" edge to the GeneralLedgerAccount entity.
func (acu *AccountingControlUpdate) SetDefaultRevAccount(g *GeneralLedgerAccount) *AccountingControlUpdate {
	return acu.SetDefaultRevAccountID(g.ID)
}

// SetDefaultExpAccount sets the "default_exp_account" edge to the GeneralLedgerAccount entity.
func (acu *AccountingControlUpdate) SetDefaultExpAccount(g *GeneralLedgerAccount) *AccountingControlUpdate {
	return acu.SetDefaultExpAccountID(g.ID)
}

// Mutation returns the AccountingControlMutation object of the builder.
func (acu *AccountingControlUpdate) Mutation() *AccountingControlMutation {
	return acu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (acu *AccountingControlUpdate) ClearOrganization() *AccountingControlUpdate {
	acu.mutation.ClearOrganization()
	return acu
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (acu *AccountingControlUpdate) ClearBusinessUnit() *AccountingControlUpdate {
	acu.mutation.ClearBusinessUnit()
	return acu
}

// ClearDefaultRevAccount clears the "default_rev_account" edge to the GeneralLedgerAccount entity.
func (acu *AccountingControlUpdate) ClearDefaultRevAccount() *AccountingControlUpdate {
	acu.mutation.ClearDefaultRevAccount()
	return acu
}

// ClearDefaultExpAccount clears the "default_exp_account" edge to the GeneralLedgerAccount entity.
func (acu *AccountingControlUpdate) ClearDefaultExpAccount() *AccountingControlUpdate {
	acu.mutation.ClearDefaultExpAccount()
	return acu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AccountingControlUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AccountingControlUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AccountingControlUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AccountingControlUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AccountingControlUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := accountingcontrol.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *AccountingControlUpdate) check() error {
	if v, ok := acu.mutation.RecThreshold(); ok {
		if err := accountingcontrol.RecThresholdValidator(v); err != nil {
			return &ValidationError{Name: "rec_threshold", err: fmt.Errorf(`ent: validator failed for field "AccountingControl.rec_threshold": %w`, err)}
		}
	}
	if v, ok := acu.mutation.RecThresholdAction(); ok {
		if err := accountingcontrol.RecThresholdActionValidator(v); err != nil {
			return &ValidationError{Name: "rec_threshold_action", err: fmt.Errorf(`ent: validator failed for field "AccountingControl.rec_threshold_action": %w`, err)}
		}
	}
	if v, ok := acu.mutation.JournalEntryCriteria(); ok {
		if err := accountingcontrol.JournalEntryCriteriaValidator(v); err != nil {
			return &ValidationError{Name: "journal_entry_criteria", err: fmt.Errorf(`ent: validator failed for field "AccountingControl.journal_entry_criteria": %w`, err)}
		}
	}
	if _, ok := acu.mutation.OrganizationID(); acu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountingControl.organization"`)
	}
	if _, ok := acu.mutation.BusinessUnitID(); acu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountingControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *AccountingControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountingControlUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *AccountingControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountingcontrol.Table, accountingcontrol.Columns, sqlgraph.NewFieldSpec(accountingcontrol.FieldID, field.TypeUUID))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(accountingcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.RecThreshold(); ok {
		_spec.SetField(accountingcontrol.FieldRecThreshold, field.TypeInt8, value)
	}
	if value, ok := acu.mutation.AddedRecThreshold(); ok {
		_spec.AddField(accountingcontrol.FieldRecThreshold, field.TypeInt8, value)
	}
	if value, ok := acu.mutation.RecThresholdAction(); ok {
		_spec.SetField(accountingcontrol.FieldRecThresholdAction, field.TypeEnum, value)
	}
	if value, ok := acu.mutation.AutoCreateJournalEntries(); ok {
		_spec.SetField(accountingcontrol.FieldAutoCreateJournalEntries, field.TypeBool, value)
	}
	if value, ok := acu.mutation.JournalEntryCriteria(); ok {
		_spec.SetField(accountingcontrol.FieldJournalEntryCriteria, field.TypeEnum, value)
	}
	if value, ok := acu.mutation.RestrictManualJournalEntries(); ok {
		_spec.SetField(accountingcontrol.FieldRestrictManualJournalEntries, field.TypeBool, value)
	}
	if value, ok := acu.mutation.RequireJournalEntryApproval(); ok {
		_spec.SetField(accountingcontrol.FieldRequireJournalEntryApproval, field.TypeBool, value)
	}
	if value, ok := acu.mutation.EnableRecNotifications(); ok {
		_spec.SetField(accountingcontrol.FieldEnableRecNotifications, field.TypeBool, value)
	}
	if value, ok := acu.mutation.HaltOnPendingRec(); ok {
		_spec.SetField(accountingcontrol.FieldHaltOnPendingRec, field.TypeBool, value)
	}
	if value, ok := acu.mutation.CriticalProcesses(); ok {
		_spec.SetField(accountingcontrol.FieldCriticalProcesses, field.TypeString, value)
	}
	if acu.mutation.CriticalProcessesCleared() {
		_spec.ClearField(accountingcontrol.FieldCriticalProcesses, field.TypeString)
	}
	if acu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountingcontrol.OrganizationTable,
			Columns: []string{accountingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountingcontrol.OrganizationTable,
			Columns: []string{accountingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.BusinessUnitTable,
			Columns: []string{accountingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.BusinessUnitTable,
			Columns: []string{accountingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.DefaultRevAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultRevAccountTable,
			Columns: []string{accountingcontrol.DefaultRevAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.DefaultRevAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultRevAccountTable,
			Columns: []string{accountingcontrol.DefaultRevAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.DefaultExpAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultExpAccountTable,
			Columns: []string{accountingcontrol.DefaultExpAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.DefaultExpAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultExpAccountTable,
			Columns: []string{accountingcontrol.DefaultExpAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(acu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountingcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AccountingControlUpdateOne is the builder for updating a single AccountingControl entity.
type AccountingControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AccountingControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AccountingControlUpdateOne) SetUpdatedAt(t time.Time) *AccountingControlUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetRecThreshold sets the "rec_threshold" field.
func (acuo *AccountingControlUpdateOne) SetRecThreshold(i int8) *AccountingControlUpdateOne {
	acuo.mutation.ResetRecThreshold()
	acuo.mutation.SetRecThreshold(i)
	return acuo
}

// SetNillableRecThreshold sets the "rec_threshold" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableRecThreshold(i *int8) *AccountingControlUpdateOne {
	if i != nil {
		acuo.SetRecThreshold(*i)
	}
	return acuo
}

// AddRecThreshold adds i to the "rec_threshold" field.
func (acuo *AccountingControlUpdateOne) AddRecThreshold(i int8) *AccountingControlUpdateOne {
	acuo.mutation.AddRecThreshold(i)
	return acuo
}

// SetRecThresholdAction sets the "rec_threshold_action" field.
func (acuo *AccountingControlUpdateOne) SetRecThresholdAction(ata accountingcontrol.RecThresholdAction) *AccountingControlUpdateOne {
	acuo.mutation.SetRecThresholdAction(ata)
	return acuo
}

// SetNillableRecThresholdAction sets the "rec_threshold_action" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableRecThresholdAction(ata *accountingcontrol.RecThresholdAction) *AccountingControlUpdateOne {
	if ata != nil {
		acuo.SetRecThresholdAction(*ata)
	}
	return acuo
}

// SetAutoCreateJournalEntries sets the "auto_create_journal_entries" field.
func (acuo *AccountingControlUpdateOne) SetAutoCreateJournalEntries(b bool) *AccountingControlUpdateOne {
	acuo.mutation.SetAutoCreateJournalEntries(b)
	return acuo
}

// SetNillableAutoCreateJournalEntries sets the "auto_create_journal_entries" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableAutoCreateJournalEntries(b *bool) *AccountingControlUpdateOne {
	if b != nil {
		acuo.SetAutoCreateJournalEntries(*b)
	}
	return acuo
}

// SetJournalEntryCriteria sets the "journal_entry_criteria" field.
func (acuo *AccountingControlUpdateOne) SetJournalEntryCriteria(aec accountingcontrol.JournalEntryCriteria) *AccountingControlUpdateOne {
	acuo.mutation.SetJournalEntryCriteria(aec)
	return acuo
}

// SetNillableJournalEntryCriteria sets the "journal_entry_criteria" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableJournalEntryCriteria(aec *accountingcontrol.JournalEntryCriteria) *AccountingControlUpdateOne {
	if aec != nil {
		acuo.SetJournalEntryCriteria(*aec)
	}
	return acuo
}

// SetRestrictManualJournalEntries sets the "restrict_manual_journal_entries" field.
func (acuo *AccountingControlUpdateOne) SetRestrictManualJournalEntries(b bool) *AccountingControlUpdateOne {
	acuo.mutation.SetRestrictManualJournalEntries(b)
	return acuo
}

// SetNillableRestrictManualJournalEntries sets the "restrict_manual_journal_entries" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableRestrictManualJournalEntries(b *bool) *AccountingControlUpdateOne {
	if b != nil {
		acuo.SetRestrictManualJournalEntries(*b)
	}
	return acuo
}

// SetRequireJournalEntryApproval sets the "require_journal_entry_approval" field.
func (acuo *AccountingControlUpdateOne) SetRequireJournalEntryApproval(b bool) *AccountingControlUpdateOne {
	acuo.mutation.SetRequireJournalEntryApproval(b)
	return acuo
}

// SetNillableRequireJournalEntryApproval sets the "require_journal_entry_approval" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableRequireJournalEntryApproval(b *bool) *AccountingControlUpdateOne {
	if b != nil {
		acuo.SetRequireJournalEntryApproval(*b)
	}
	return acuo
}

// SetEnableRecNotifications sets the "enable_rec_notifications" field.
func (acuo *AccountingControlUpdateOne) SetEnableRecNotifications(b bool) *AccountingControlUpdateOne {
	acuo.mutation.SetEnableRecNotifications(b)
	return acuo
}

// SetNillableEnableRecNotifications sets the "enable_rec_notifications" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableEnableRecNotifications(b *bool) *AccountingControlUpdateOne {
	if b != nil {
		acuo.SetEnableRecNotifications(*b)
	}
	return acuo
}

// SetHaltOnPendingRec sets the "halt_on_pending_rec" field.
func (acuo *AccountingControlUpdateOne) SetHaltOnPendingRec(b bool) *AccountingControlUpdateOne {
	acuo.mutation.SetHaltOnPendingRec(b)
	return acuo
}

// SetNillableHaltOnPendingRec sets the "halt_on_pending_rec" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableHaltOnPendingRec(b *bool) *AccountingControlUpdateOne {
	if b != nil {
		acuo.SetHaltOnPendingRec(*b)
	}
	return acuo
}

// SetCriticalProcesses sets the "critical_processes" field.
func (acuo *AccountingControlUpdateOne) SetCriticalProcesses(s string) *AccountingControlUpdateOne {
	acuo.mutation.SetCriticalProcesses(s)
	return acuo
}

// SetNillableCriticalProcesses sets the "critical_processes" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableCriticalProcesses(s *string) *AccountingControlUpdateOne {
	if s != nil {
		acuo.SetCriticalProcesses(*s)
	}
	return acuo
}

// ClearCriticalProcesses clears the value of the "critical_processes" field.
func (acuo *AccountingControlUpdateOne) ClearCriticalProcesses() *AccountingControlUpdateOne {
	acuo.mutation.ClearCriticalProcesses()
	return acuo
}

// SetDefaultRevAccountID sets the "default_rev_account_id" field.
func (acuo *AccountingControlUpdateOne) SetDefaultRevAccountID(u uuid.UUID) *AccountingControlUpdateOne {
	acuo.mutation.SetDefaultRevAccountID(u)
	return acuo
}

// SetNillableDefaultRevAccountID sets the "default_rev_account_id" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableDefaultRevAccountID(u *uuid.UUID) *AccountingControlUpdateOne {
	if u != nil {
		acuo.SetDefaultRevAccountID(*u)
	}
	return acuo
}

// ClearDefaultRevAccountID clears the value of the "default_rev_account_id" field.
func (acuo *AccountingControlUpdateOne) ClearDefaultRevAccountID() *AccountingControlUpdateOne {
	acuo.mutation.ClearDefaultRevAccountID()
	return acuo
}

// SetDefaultExpAccountID sets the "default_exp_account_id" field.
func (acuo *AccountingControlUpdateOne) SetDefaultExpAccountID(u uuid.UUID) *AccountingControlUpdateOne {
	acuo.mutation.SetDefaultExpAccountID(u)
	return acuo
}

// SetNillableDefaultExpAccountID sets the "default_exp_account_id" field if the given value is not nil.
func (acuo *AccountingControlUpdateOne) SetNillableDefaultExpAccountID(u *uuid.UUID) *AccountingControlUpdateOne {
	if u != nil {
		acuo.SetDefaultExpAccountID(*u)
	}
	return acuo
}

// ClearDefaultExpAccountID clears the value of the "default_exp_account_id" field.
func (acuo *AccountingControlUpdateOne) ClearDefaultExpAccountID() *AccountingControlUpdateOne {
	acuo.mutation.ClearDefaultExpAccountID()
	return acuo
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (acuo *AccountingControlUpdateOne) SetOrganizationID(id uuid.UUID) *AccountingControlUpdateOne {
	acuo.mutation.SetOrganizationID(id)
	return acuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (acuo *AccountingControlUpdateOne) SetOrganization(o *Organization) *AccountingControlUpdateOne {
	return acuo.SetOrganizationID(o.ID)
}

// SetBusinessUnitID sets the "business_unit" edge to the BusinessUnit entity by ID.
func (acuo *AccountingControlUpdateOne) SetBusinessUnitID(id uuid.UUID) *AccountingControlUpdateOne {
	acuo.mutation.SetBusinessUnitID(id)
	return acuo
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (acuo *AccountingControlUpdateOne) SetBusinessUnit(b *BusinessUnit) *AccountingControlUpdateOne {
	return acuo.SetBusinessUnitID(b.ID)
}

// SetDefaultRevAccount sets the "default_rev_account" edge to the GeneralLedgerAccount entity.
func (acuo *AccountingControlUpdateOne) SetDefaultRevAccount(g *GeneralLedgerAccount) *AccountingControlUpdateOne {
	return acuo.SetDefaultRevAccountID(g.ID)
}

// SetDefaultExpAccount sets the "default_exp_account" edge to the GeneralLedgerAccount entity.
func (acuo *AccountingControlUpdateOne) SetDefaultExpAccount(g *GeneralLedgerAccount) *AccountingControlUpdateOne {
	return acuo.SetDefaultExpAccountID(g.ID)
}

// Mutation returns the AccountingControlMutation object of the builder.
func (acuo *AccountingControlUpdateOne) Mutation() *AccountingControlMutation {
	return acuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (acuo *AccountingControlUpdateOne) ClearOrganization() *AccountingControlUpdateOne {
	acuo.mutation.ClearOrganization()
	return acuo
}

// ClearBusinessUnit clears the "business_unit" edge to the BusinessUnit entity.
func (acuo *AccountingControlUpdateOne) ClearBusinessUnit() *AccountingControlUpdateOne {
	acuo.mutation.ClearBusinessUnit()
	return acuo
}

// ClearDefaultRevAccount clears the "default_rev_account" edge to the GeneralLedgerAccount entity.
func (acuo *AccountingControlUpdateOne) ClearDefaultRevAccount() *AccountingControlUpdateOne {
	acuo.mutation.ClearDefaultRevAccount()
	return acuo
}

// ClearDefaultExpAccount clears the "default_exp_account" edge to the GeneralLedgerAccount entity.
func (acuo *AccountingControlUpdateOne) ClearDefaultExpAccount() *AccountingControlUpdateOne {
	acuo.mutation.ClearDefaultExpAccount()
	return acuo
}

// Where appends a list predicates to the AccountingControlUpdate builder.
func (acuo *AccountingControlUpdateOne) Where(ps ...predicate.AccountingControl) *AccountingControlUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AccountingControlUpdateOne) Select(field string, fields ...string) *AccountingControlUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AccountingControl entity.
func (acuo *AccountingControlUpdateOne) Save(ctx context.Context) (*AccountingControl, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AccountingControlUpdateOne) SaveX(ctx context.Context) *AccountingControl {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AccountingControlUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AccountingControlUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AccountingControlUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := accountingcontrol.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *AccountingControlUpdateOne) check() error {
	if v, ok := acuo.mutation.RecThreshold(); ok {
		if err := accountingcontrol.RecThresholdValidator(v); err != nil {
			return &ValidationError{Name: "rec_threshold", err: fmt.Errorf(`ent: validator failed for field "AccountingControl.rec_threshold": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.RecThresholdAction(); ok {
		if err := accountingcontrol.RecThresholdActionValidator(v); err != nil {
			return &ValidationError{Name: "rec_threshold_action", err: fmt.Errorf(`ent: validator failed for field "AccountingControl.rec_threshold_action": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.JournalEntryCriteria(); ok {
		if err := accountingcontrol.JournalEntryCriteriaValidator(v); err != nil {
			return &ValidationError{Name: "journal_entry_criteria", err: fmt.Errorf(`ent: validator failed for field "AccountingControl.journal_entry_criteria": %w`, err)}
		}
	}
	if _, ok := acuo.mutation.OrganizationID(); acuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountingControl.organization"`)
	}
	if _, ok := acuo.mutation.BusinessUnitID(); acuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountingControl.business_unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *AccountingControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountingControlUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *AccountingControlUpdateOne) sqlSave(ctx context.Context) (_node *AccountingControl, err error) {
	if err := acuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountingcontrol.Table, accountingcontrol.Columns, sqlgraph.NewFieldSpec(accountingcontrol.FieldID, field.TypeUUID))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountingControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountingcontrol.FieldID)
		for _, f := range fields {
			if !accountingcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountingcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(accountingcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.RecThreshold(); ok {
		_spec.SetField(accountingcontrol.FieldRecThreshold, field.TypeInt8, value)
	}
	if value, ok := acuo.mutation.AddedRecThreshold(); ok {
		_spec.AddField(accountingcontrol.FieldRecThreshold, field.TypeInt8, value)
	}
	if value, ok := acuo.mutation.RecThresholdAction(); ok {
		_spec.SetField(accountingcontrol.FieldRecThresholdAction, field.TypeEnum, value)
	}
	if value, ok := acuo.mutation.AutoCreateJournalEntries(); ok {
		_spec.SetField(accountingcontrol.FieldAutoCreateJournalEntries, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.JournalEntryCriteria(); ok {
		_spec.SetField(accountingcontrol.FieldJournalEntryCriteria, field.TypeEnum, value)
	}
	if value, ok := acuo.mutation.RestrictManualJournalEntries(); ok {
		_spec.SetField(accountingcontrol.FieldRestrictManualJournalEntries, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.RequireJournalEntryApproval(); ok {
		_spec.SetField(accountingcontrol.FieldRequireJournalEntryApproval, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.EnableRecNotifications(); ok {
		_spec.SetField(accountingcontrol.FieldEnableRecNotifications, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.HaltOnPendingRec(); ok {
		_spec.SetField(accountingcontrol.FieldHaltOnPendingRec, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.CriticalProcesses(); ok {
		_spec.SetField(accountingcontrol.FieldCriticalProcesses, field.TypeString, value)
	}
	if acuo.mutation.CriticalProcessesCleared() {
		_spec.ClearField(accountingcontrol.FieldCriticalProcesses, field.TypeString)
	}
	if acuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountingcontrol.OrganizationTable,
			Columns: []string{accountingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountingcontrol.OrganizationTable,
			Columns: []string{accountingcontrol.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.BusinessUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.BusinessUnitTable,
			Columns: []string{accountingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.BusinessUnitTable,
			Columns: []string{accountingcontrol.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.DefaultRevAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultRevAccountTable,
			Columns: []string{accountingcontrol.DefaultRevAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.DefaultRevAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultRevAccountTable,
			Columns: []string{accountingcontrol.DefaultRevAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.DefaultExpAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultExpAccountTable,
			Columns: []string{accountingcontrol.DefaultExpAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.DefaultExpAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountingcontrol.DefaultExpAccountTable,
			Columns: []string{accountingcontrol.DefaultExpAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generalledgeraccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(acuo.modifiers...)
	_node = &AccountingControl{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountingcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
