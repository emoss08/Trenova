// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/businessunit"
	"github.com/emoss08/trenova/ent/feasibilitytoolcontrol"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// FeasibilityToolControlQuery is the builder for querying FeasibilityToolControl entities.
type FeasibilityToolControlQuery struct {
	config
	ctx              *QueryContext
	order            []feasibilitytoolcontrol.OrderOption
	inters           []Interceptor
	predicates       []predicate.FeasibilityToolControl
	withOrganization *OrganizationQuery
	withBusinessUnit *BusinessUnitQuery
	withFKs          bool
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeasibilityToolControlQuery builder.
func (ftcq *FeasibilityToolControlQuery) Where(ps ...predicate.FeasibilityToolControl) *FeasibilityToolControlQuery {
	ftcq.predicates = append(ftcq.predicates, ps...)
	return ftcq
}

// Limit the number of records to be returned by this query.
func (ftcq *FeasibilityToolControlQuery) Limit(limit int) *FeasibilityToolControlQuery {
	ftcq.ctx.Limit = &limit
	return ftcq
}

// Offset to start from.
func (ftcq *FeasibilityToolControlQuery) Offset(offset int) *FeasibilityToolControlQuery {
	ftcq.ctx.Offset = &offset
	return ftcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ftcq *FeasibilityToolControlQuery) Unique(unique bool) *FeasibilityToolControlQuery {
	ftcq.ctx.Unique = &unique
	return ftcq
}

// Order specifies how the records should be ordered.
func (ftcq *FeasibilityToolControlQuery) Order(o ...feasibilitytoolcontrol.OrderOption) *FeasibilityToolControlQuery {
	ftcq.order = append(ftcq.order, o...)
	return ftcq
}

// QueryOrganization chains the current query on the "organization" edge.
func (ftcq *FeasibilityToolControlQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: ftcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ftcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ftcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feasibilitytoolcontrol.Table, feasibilitytoolcontrol.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, feasibilitytoolcontrol.OrganizationTable, feasibilitytoolcontrol.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(ftcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBusinessUnit chains the current query on the "business_unit" edge.
func (ftcq *FeasibilityToolControlQuery) QueryBusinessUnit() *BusinessUnitQuery {
	query := (&BusinessUnitClient{config: ftcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ftcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ftcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feasibilitytoolcontrol.Table, feasibilitytoolcontrol.FieldID, selector),
			sqlgraph.To(businessunit.Table, businessunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feasibilitytoolcontrol.BusinessUnitTable, feasibilitytoolcontrol.BusinessUnitColumn),
		)
		fromU = sqlgraph.SetNeighbors(ftcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FeasibilityToolControl entity from the query.
// Returns a *NotFoundError when no FeasibilityToolControl was found.
func (ftcq *FeasibilityToolControlQuery) First(ctx context.Context) (*FeasibilityToolControl, error) {
	nodes, err := ftcq.Limit(1).All(setContextOp(ctx, ftcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{feasibilitytoolcontrol.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ftcq *FeasibilityToolControlQuery) FirstX(ctx context.Context) *FeasibilityToolControl {
	node, err := ftcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FeasibilityToolControl ID from the query.
// Returns a *NotFoundError when no FeasibilityToolControl ID was found.
func (ftcq *FeasibilityToolControlQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ftcq.Limit(1).IDs(setContextOp(ctx, ftcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{feasibilitytoolcontrol.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ftcq *FeasibilityToolControlQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ftcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FeasibilityToolControl entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FeasibilityToolControl entity is found.
// Returns a *NotFoundError when no FeasibilityToolControl entities are found.
func (ftcq *FeasibilityToolControlQuery) Only(ctx context.Context) (*FeasibilityToolControl, error) {
	nodes, err := ftcq.Limit(2).All(setContextOp(ctx, ftcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{feasibilitytoolcontrol.Label}
	default:
		return nil, &NotSingularError{feasibilitytoolcontrol.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ftcq *FeasibilityToolControlQuery) OnlyX(ctx context.Context) *FeasibilityToolControl {
	node, err := ftcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FeasibilityToolControl ID in the query.
// Returns a *NotSingularError when more than one FeasibilityToolControl ID is found.
// Returns a *NotFoundError when no entities are found.
func (ftcq *FeasibilityToolControlQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ftcq.Limit(2).IDs(setContextOp(ctx, ftcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{feasibilitytoolcontrol.Label}
	default:
		err = &NotSingularError{feasibilitytoolcontrol.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ftcq *FeasibilityToolControlQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ftcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FeasibilityToolControls.
func (ftcq *FeasibilityToolControlQuery) All(ctx context.Context) ([]*FeasibilityToolControl, error) {
	ctx = setContextOp(ctx, ftcq.ctx, "All")
	if err := ftcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FeasibilityToolControl, *FeasibilityToolControlQuery]()
	return withInterceptors[[]*FeasibilityToolControl](ctx, ftcq, qr, ftcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ftcq *FeasibilityToolControlQuery) AllX(ctx context.Context) []*FeasibilityToolControl {
	nodes, err := ftcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FeasibilityToolControl IDs.
func (ftcq *FeasibilityToolControlQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ftcq.ctx.Unique == nil && ftcq.path != nil {
		ftcq.Unique(true)
	}
	ctx = setContextOp(ctx, ftcq.ctx, "IDs")
	if err = ftcq.Select(feasibilitytoolcontrol.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ftcq *FeasibilityToolControlQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ftcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ftcq *FeasibilityToolControlQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ftcq.ctx, "Count")
	if err := ftcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ftcq, querierCount[*FeasibilityToolControlQuery](), ftcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ftcq *FeasibilityToolControlQuery) CountX(ctx context.Context) int {
	count, err := ftcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ftcq *FeasibilityToolControlQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ftcq.ctx, "Exist")
	switch _, err := ftcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ftcq *FeasibilityToolControlQuery) ExistX(ctx context.Context) bool {
	exist, err := ftcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeasibilityToolControlQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ftcq *FeasibilityToolControlQuery) Clone() *FeasibilityToolControlQuery {
	if ftcq == nil {
		return nil
	}
	return &FeasibilityToolControlQuery{
		config:           ftcq.config,
		ctx:              ftcq.ctx.Clone(),
		order:            append([]feasibilitytoolcontrol.OrderOption{}, ftcq.order...),
		inters:           append([]Interceptor{}, ftcq.inters...),
		predicates:       append([]predicate.FeasibilityToolControl{}, ftcq.predicates...),
		withOrganization: ftcq.withOrganization.Clone(),
		withBusinessUnit: ftcq.withBusinessUnit.Clone(),
		// clone intermediate query.
		sql:  ftcq.sql.Clone(),
		path: ftcq.path,
	}
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (ftcq *FeasibilityToolControlQuery) WithOrganization(opts ...func(*OrganizationQuery)) *FeasibilityToolControlQuery {
	query := (&OrganizationClient{config: ftcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ftcq.withOrganization = query
	return ftcq
}

// WithBusinessUnit tells the query-builder to eager-load the nodes that are connected to
// the "business_unit" edge. The optional arguments are used to configure the query builder of the edge.
func (ftcq *FeasibilityToolControlQuery) WithBusinessUnit(opts ...func(*BusinessUnitQuery)) *FeasibilityToolControlQuery {
	query := (&BusinessUnitClient{config: ftcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ftcq.withBusinessUnit = query
	return ftcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FeasibilityToolControl.Query().
//		GroupBy(feasibilitytoolcontrol.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ftcq *FeasibilityToolControlQuery) GroupBy(field string, fields ...string) *FeasibilityToolControlGroupBy {
	ftcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeasibilityToolControlGroupBy{build: ftcq}
	grbuild.flds = &ftcq.ctx.Fields
	grbuild.label = feasibilitytoolcontrol.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.FeasibilityToolControl.Query().
//		Select(feasibilitytoolcontrol.FieldCreatedAt).
//		Scan(ctx, &v)
func (ftcq *FeasibilityToolControlQuery) Select(fields ...string) *FeasibilityToolControlSelect {
	ftcq.ctx.Fields = append(ftcq.ctx.Fields, fields...)
	sbuild := &FeasibilityToolControlSelect{FeasibilityToolControlQuery: ftcq}
	sbuild.label = feasibilitytoolcontrol.Label
	sbuild.flds, sbuild.scan = &ftcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeasibilityToolControlSelect configured with the given aggregations.
func (ftcq *FeasibilityToolControlQuery) Aggregate(fns ...AggregateFunc) *FeasibilityToolControlSelect {
	return ftcq.Select().Aggregate(fns...)
}

func (ftcq *FeasibilityToolControlQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ftcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ftcq); err != nil {
				return err
			}
		}
	}
	for _, f := range ftcq.ctx.Fields {
		if !feasibilitytoolcontrol.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ftcq.path != nil {
		prev, err := ftcq.path(ctx)
		if err != nil {
			return err
		}
		ftcq.sql = prev
	}
	return nil
}

func (ftcq *FeasibilityToolControlQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FeasibilityToolControl, error) {
	var (
		nodes       = []*FeasibilityToolControl{}
		withFKs     = ftcq.withFKs
		_spec       = ftcq.querySpec()
		loadedTypes = [2]bool{
			ftcq.withOrganization != nil,
			ftcq.withBusinessUnit != nil,
		}
	)
	if ftcq.withOrganization != nil || ftcq.withBusinessUnit != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, feasibilitytoolcontrol.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FeasibilityToolControl).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FeasibilityToolControl{config: ftcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ftcq.modifiers) > 0 {
		_spec.Modifiers = ftcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ftcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ftcq.withOrganization; query != nil {
		if err := ftcq.loadOrganization(ctx, query, nodes, nil,
			func(n *FeasibilityToolControl, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	if query := ftcq.withBusinessUnit; query != nil {
		if err := ftcq.loadBusinessUnit(ctx, query, nodes, nil,
			func(n *FeasibilityToolControl, e *BusinessUnit) { n.Edges.BusinessUnit = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ftcq *FeasibilityToolControlQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*FeasibilityToolControl, init func(*FeasibilityToolControl), assign func(*FeasibilityToolControl, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FeasibilityToolControl)
	for i := range nodes {
		if nodes[i].organization_id == nil {
			continue
		}
		fk := *nodes[i].organization_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ftcq *FeasibilityToolControlQuery) loadBusinessUnit(ctx context.Context, query *BusinessUnitQuery, nodes []*FeasibilityToolControl, init func(*FeasibilityToolControl), assign func(*FeasibilityToolControl, *BusinessUnit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FeasibilityToolControl)
	for i := range nodes {
		if nodes[i].business_unit_id == nil {
			continue
		}
		fk := *nodes[i].business_unit_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(businessunit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_unit_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ftcq *FeasibilityToolControlQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ftcq.querySpec()
	if len(ftcq.modifiers) > 0 {
		_spec.Modifiers = ftcq.modifiers
	}
	_spec.Node.Columns = ftcq.ctx.Fields
	if len(ftcq.ctx.Fields) > 0 {
		_spec.Unique = ftcq.ctx.Unique != nil && *ftcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ftcq.driver, _spec)
}

func (ftcq *FeasibilityToolControlQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(feasibilitytoolcontrol.Table, feasibilitytoolcontrol.Columns, sqlgraph.NewFieldSpec(feasibilitytoolcontrol.FieldID, field.TypeUUID))
	_spec.From = ftcq.sql
	if unique := ftcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ftcq.path != nil {
		_spec.Unique = true
	}
	if fields := ftcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feasibilitytoolcontrol.FieldID)
		for i := range fields {
			if fields[i] != feasibilitytoolcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ftcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ftcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ftcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ftcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ftcq *FeasibilityToolControlQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ftcq.driver.Dialect())
	t1 := builder.Table(feasibilitytoolcontrol.Table)
	columns := ftcq.ctx.Fields
	if len(columns) == 0 {
		columns = feasibilitytoolcontrol.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ftcq.sql != nil {
		selector = ftcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ftcq.ctx.Unique != nil && *ftcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ftcq.modifiers {
		m(selector)
	}
	for _, p := range ftcq.predicates {
		p(selector)
	}
	for _, p := range ftcq.order {
		p(selector)
	}
	if offset := ftcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ftcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ftcq *FeasibilityToolControlQuery) Modify(modifiers ...func(s *sql.Selector)) *FeasibilityToolControlSelect {
	ftcq.modifiers = append(ftcq.modifiers, modifiers...)
	return ftcq.Select()
}

// FeasibilityToolControlGroupBy is the group-by builder for FeasibilityToolControl entities.
type FeasibilityToolControlGroupBy struct {
	selector
	build *FeasibilityToolControlQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ftcgb *FeasibilityToolControlGroupBy) Aggregate(fns ...AggregateFunc) *FeasibilityToolControlGroupBy {
	ftcgb.fns = append(ftcgb.fns, fns...)
	return ftcgb
}

// Scan applies the selector query and scans the result into the given value.
func (ftcgb *FeasibilityToolControlGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ftcgb.build.ctx, "GroupBy")
	if err := ftcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeasibilityToolControlQuery, *FeasibilityToolControlGroupBy](ctx, ftcgb.build, ftcgb, ftcgb.build.inters, v)
}

func (ftcgb *FeasibilityToolControlGroupBy) sqlScan(ctx context.Context, root *FeasibilityToolControlQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ftcgb.fns))
	for _, fn := range ftcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ftcgb.flds)+len(ftcgb.fns))
		for _, f := range *ftcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ftcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ftcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeasibilityToolControlSelect is the builder for selecting fields of FeasibilityToolControl entities.
type FeasibilityToolControlSelect struct {
	*FeasibilityToolControlQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ftcs *FeasibilityToolControlSelect) Aggregate(fns ...AggregateFunc) *FeasibilityToolControlSelect {
	ftcs.fns = append(ftcs.fns, fns...)
	return ftcs
}

// Scan applies the selector query and scans the result into the given value.
func (ftcs *FeasibilityToolControlSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ftcs.ctx, "Select")
	if err := ftcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeasibilityToolControlQuery, *FeasibilityToolControlSelect](ctx, ftcs.FeasibilityToolControlQuery, ftcs, ftcs.inters, v)
}

func (ftcs *FeasibilityToolControlSelect) sqlScan(ctx context.Context, root *FeasibilityToolControlQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ftcs.fns))
	for _, fn := range ftcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ftcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ftcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ftcs *FeasibilityToolControlSelect) Modify(modifiers ...func(s *sql.Selector)) *FeasibilityToolControlSelect {
	ftcs.modifiers = append(ftcs.modifiers, modifiers...)
	return ftcs
}
