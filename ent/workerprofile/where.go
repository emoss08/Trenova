// Code generated by ent, DO NOT EDIT.

package workerprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// WorkerID applies equality check predicate on the "worker_id" field. It's identical to WorkerIDEQ.
func WorkerID(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldWorkerID, v))
}

// Race applies equality check predicate on the "race" field. It's identical to RaceEQ.
func Race(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldRace, v))
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldSex, v))
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldDateOfBirth, v))
}

// LicenseNumber applies equality check predicate on the "license_number" field. It's identical to LicenseNumberEQ.
func LicenseNumber(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldLicenseNumber, v))
}

// LicenseStateID applies equality check predicate on the "license_state_id" field. It's identical to LicenseStateIDEQ.
func LicenseStateID(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldLicenseStateID, v))
}

// LicenseExpirationDate applies equality check predicate on the "license_expiration_date" field. It's identical to LicenseExpirationDateEQ.
func LicenseExpirationDate(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldLicenseExpirationDate, v))
}

// HazmatExpirationDate applies equality check predicate on the "hazmat_expiration_date" field. It's identical to HazmatExpirationDateEQ.
func HazmatExpirationDate(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldHazmatExpirationDate, v))
}

// HireDate applies equality check predicate on the "hire_date" field. It's identical to HireDateEQ.
func HireDate(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldHireDate, v))
}

// TerminationDate applies equality check predicate on the "termination_date" field. It's identical to TerminationDateEQ.
func TerminationDate(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldTerminationDate, v))
}

// PhysicalDueDate applies equality check predicate on the "physical_due_date" field. It's identical to PhysicalDueDateEQ.
func PhysicalDueDate(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldPhysicalDueDate, v))
}

// MedicalCertDate applies equality check predicate on the "medical_cert_date" field. It's identical to MedicalCertDateEQ.
func MedicalCertDate(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldMedicalCertDate, v))
}

// MvrDueDate applies equality check predicate on the "mvr_due_date" field. It's identical to MvrDueDateEQ.
func MvrDueDate(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldMvrDueDate, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// WorkerIDEQ applies the EQ predicate on the "worker_id" field.
func WorkerIDEQ(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldWorkerID, v))
}

// WorkerIDNEQ applies the NEQ predicate on the "worker_id" field.
func WorkerIDNEQ(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldWorkerID, v))
}

// WorkerIDIn applies the In predicate on the "worker_id" field.
func WorkerIDIn(vs ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldWorkerID, vs...))
}

// WorkerIDNotIn applies the NotIn predicate on the "worker_id" field.
func WorkerIDNotIn(vs ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldWorkerID, vs...))
}

// RaceEQ applies the EQ predicate on the "race" field.
func RaceEQ(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldRace, v))
}

// RaceNEQ applies the NEQ predicate on the "race" field.
func RaceNEQ(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldRace, v))
}

// RaceIn applies the In predicate on the "race" field.
func RaceIn(vs ...string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldRace, vs...))
}

// RaceNotIn applies the NotIn predicate on the "race" field.
func RaceNotIn(vs ...string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldRace, vs...))
}

// RaceGT applies the GT predicate on the "race" field.
func RaceGT(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldRace, v))
}

// RaceGTE applies the GTE predicate on the "race" field.
func RaceGTE(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldRace, v))
}

// RaceLT applies the LT predicate on the "race" field.
func RaceLT(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldRace, v))
}

// RaceLTE applies the LTE predicate on the "race" field.
func RaceLTE(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldRace, v))
}

// RaceContains applies the Contains predicate on the "race" field.
func RaceContains(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldContains(FieldRace, v))
}

// RaceHasPrefix applies the HasPrefix predicate on the "race" field.
func RaceHasPrefix(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldHasPrefix(FieldRace, v))
}

// RaceHasSuffix applies the HasSuffix predicate on the "race" field.
func RaceHasSuffix(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldHasSuffix(FieldRace, v))
}

// RaceIsNil applies the IsNil predicate on the "race" field.
func RaceIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldRace))
}

// RaceNotNil applies the NotNil predicate on the "race" field.
func RaceNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldRace))
}

// RaceEqualFold applies the EqualFold predicate on the "race" field.
func RaceEqualFold(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEqualFold(FieldRace, v))
}

// RaceContainsFold applies the ContainsFold predicate on the "race" field.
func RaceContainsFold(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldContainsFold(FieldRace, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldSex, vs...))
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldSex, v))
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldSex, v))
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldSex, v))
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldSex, v))
}

// SexContains applies the Contains predicate on the "sex" field.
func SexContains(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldContains(FieldSex, v))
}

// SexHasPrefix applies the HasPrefix predicate on the "sex" field.
func SexHasPrefix(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldHasPrefix(FieldSex, v))
}

// SexHasSuffix applies the HasSuffix predicate on the "sex" field.
func SexHasSuffix(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldHasSuffix(FieldSex, v))
}

// SexIsNil applies the IsNil predicate on the "sex" field.
func SexIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldSex))
}

// SexNotNil applies the NotNil predicate on the "sex" field.
func SexNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldSex))
}

// SexEqualFold applies the EqualFold predicate on the "sex" field.
func SexEqualFold(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEqualFold(FieldSex, v))
}

// SexContainsFold applies the ContainsFold predicate on the "sex" field.
func SexContainsFold(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldContainsFold(FieldSex, v))
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldDateOfBirth, v))
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldDateOfBirth, vs...))
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldDateOfBirth, vs...))
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldDateOfBirth, v))
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldDateOfBirth, v))
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldDateOfBirth, v))
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldDateOfBirth, v))
}

// DateOfBirthIsNil applies the IsNil predicate on the "date_of_birth" field.
func DateOfBirthIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldDateOfBirth))
}

// DateOfBirthNotNil applies the NotNil predicate on the "date_of_birth" field.
func DateOfBirthNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldDateOfBirth))
}

// LicenseNumberEQ applies the EQ predicate on the "license_number" field.
func LicenseNumberEQ(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldLicenseNumber, v))
}

// LicenseNumberNEQ applies the NEQ predicate on the "license_number" field.
func LicenseNumberNEQ(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldLicenseNumber, v))
}

// LicenseNumberIn applies the In predicate on the "license_number" field.
func LicenseNumberIn(vs ...string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldLicenseNumber, vs...))
}

// LicenseNumberNotIn applies the NotIn predicate on the "license_number" field.
func LicenseNumberNotIn(vs ...string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldLicenseNumber, vs...))
}

// LicenseNumberGT applies the GT predicate on the "license_number" field.
func LicenseNumberGT(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldLicenseNumber, v))
}

// LicenseNumberGTE applies the GTE predicate on the "license_number" field.
func LicenseNumberGTE(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldLicenseNumber, v))
}

// LicenseNumberLT applies the LT predicate on the "license_number" field.
func LicenseNumberLT(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldLicenseNumber, v))
}

// LicenseNumberLTE applies the LTE predicate on the "license_number" field.
func LicenseNumberLTE(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldLicenseNumber, v))
}

// LicenseNumberContains applies the Contains predicate on the "license_number" field.
func LicenseNumberContains(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldContains(FieldLicenseNumber, v))
}

// LicenseNumberHasPrefix applies the HasPrefix predicate on the "license_number" field.
func LicenseNumberHasPrefix(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldHasPrefix(FieldLicenseNumber, v))
}

// LicenseNumberHasSuffix applies the HasSuffix predicate on the "license_number" field.
func LicenseNumberHasSuffix(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldHasSuffix(FieldLicenseNumber, v))
}

// LicenseNumberEqualFold applies the EqualFold predicate on the "license_number" field.
func LicenseNumberEqualFold(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEqualFold(FieldLicenseNumber, v))
}

// LicenseNumberContainsFold applies the ContainsFold predicate on the "license_number" field.
func LicenseNumberContainsFold(v string) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldContainsFold(FieldLicenseNumber, v))
}

// LicenseStateIDEQ applies the EQ predicate on the "license_state_id" field.
func LicenseStateIDEQ(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldLicenseStateID, v))
}

// LicenseStateIDNEQ applies the NEQ predicate on the "license_state_id" field.
func LicenseStateIDNEQ(v uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldLicenseStateID, v))
}

// LicenseStateIDIn applies the In predicate on the "license_state_id" field.
func LicenseStateIDIn(vs ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldLicenseStateID, vs...))
}

// LicenseStateIDNotIn applies the NotIn predicate on the "license_state_id" field.
func LicenseStateIDNotIn(vs ...uuid.UUID) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldLicenseStateID, vs...))
}

// LicenseExpirationDateEQ applies the EQ predicate on the "license_expiration_date" field.
func LicenseExpirationDateEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldLicenseExpirationDate, v))
}

// LicenseExpirationDateNEQ applies the NEQ predicate on the "license_expiration_date" field.
func LicenseExpirationDateNEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldLicenseExpirationDate, v))
}

// LicenseExpirationDateIn applies the In predicate on the "license_expiration_date" field.
func LicenseExpirationDateIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldLicenseExpirationDate, vs...))
}

// LicenseExpirationDateNotIn applies the NotIn predicate on the "license_expiration_date" field.
func LicenseExpirationDateNotIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldLicenseExpirationDate, vs...))
}

// LicenseExpirationDateGT applies the GT predicate on the "license_expiration_date" field.
func LicenseExpirationDateGT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldLicenseExpirationDate, v))
}

// LicenseExpirationDateGTE applies the GTE predicate on the "license_expiration_date" field.
func LicenseExpirationDateGTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldLicenseExpirationDate, v))
}

// LicenseExpirationDateLT applies the LT predicate on the "license_expiration_date" field.
func LicenseExpirationDateLT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldLicenseExpirationDate, v))
}

// LicenseExpirationDateLTE applies the LTE predicate on the "license_expiration_date" field.
func LicenseExpirationDateLTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldLicenseExpirationDate, v))
}

// LicenseExpirationDateIsNil applies the IsNil predicate on the "license_expiration_date" field.
func LicenseExpirationDateIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldLicenseExpirationDate))
}

// LicenseExpirationDateNotNil applies the NotNil predicate on the "license_expiration_date" field.
func LicenseExpirationDateNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldLicenseExpirationDate))
}

// EndorsementsEQ applies the EQ predicate on the "endorsements" field.
func EndorsementsEQ(v Endorsements) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldEndorsements, v))
}

// EndorsementsNEQ applies the NEQ predicate on the "endorsements" field.
func EndorsementsNEQ(v Endorsements) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldEndorsements, v))
}

// EndorsementsIn applies the In predicate on the "endorsements" field.
func EndorsementsIn(vs ...Endorsements) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldEndorsements, vs...))
}

// EndorsementsNotIn applies the NotIn predicate on the "endorsements" field.
func EndorsementsNotIn(vs ...Endorsements) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldEndorsements, vs...))
}

// EndorsementsIsNil applies the IsNil predicate on the "endorsements" field.
func EndorsementsIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldEndorsements))
}

// EndorsementsNotNil applies the NotNil predicate on the "endorsements" field.
func EndorsementsNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldEndorsements))
}

// HazmatExpirationDateEQ applies the EQ predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldHazmatExpirationDate, v))
}

// HazmatExpirationDateNEQ applies the NEQ predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateNEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldHazmatExpirationDate, v))
}

// HazmatExpirationDateIn applies the In predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldHazmatExpirationDate, vs...))
}

// HazmatExpirationDateNotIn applies the NotIn predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateNotIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldHazmatExpirationDate, vs...))
}

// HazmatExpirationDateGT applies the GT predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateGT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldHazmatExpirationDate, v))
}

// HazmatExpirationDateGTE applies the GTE predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateGTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldHazmatExpirationDate, v))
}

// HazmatExpirationDateLT applies the LT predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateLT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldHazmatExpirationDate, v))
}

// HazmatExpirationDateLTE applies the LTE predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateLTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldHazmatExpirationDate, v))
}

// HazmatExpirationDateIsNil applies the IsNil predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldHazmatExpirationDate))
}

// HazmatExpirationDateNotNil applies the NotNil predicate on the "hazmat_expiration_date" field.
func HazmatExpirationDateNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldHazmatExpirationDate))
}

// HireDateEQ applies the EQ predicate on the "hire_date" field.
func HireDateEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldHireDate, v))
}

// HireDateNEQ applies the NEQ predicate on the "hire_date" field.
func HireDateNEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldHireDate, v))
}

// HireDateIn applies the In predicate on the "hire_date" field.
func HireDateIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldHireDate, vs...))
}

// HireDateNotIn applies the NotIn predicate on the "hire_date" field.
func HireDateNotIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldHireDate, vs...))
}

// HireDateGT applies the GT predicate on the "hire_date" field.
func HireDateGT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldHireDate, v))
}

// HireDateGTE applies the GTE predicate on the "hire_date" field.
func HireDateGTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldHireDate, v))
}

// HireDateLT applies the LT predicate on the "hire_date" field.
func HireDateLT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldHireDate, v))
}

// HireDateLTE applies the LTE predicate on the "hire_date" field.
func HireDateLTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldHireDate, v))
}

// HireDateIsNil applies the IsNil predicate on the "hire_date" field.
func HireDateIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldHireDate))
}

// HireDateNotNil applies the NotNil predicate on the "hire_date" field.
func HireDateNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldHireDate))
}

// TerminationDateEQ applies the EQ predicate on the "termination_date" field.
func TerminationDateEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldTerminationDate, v))
}

// TerminationDateNEQ applies the NEQ predicate on the "termination_date" field.
func TerminationDateNEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldTerminationDate, v))
}

// TerminationDateIn applies the In predicate on the "termination_date" field.
func TerminationDateIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldTerminationDate, vs...))
}

// TerminationDateNotIn applies the NotIn predicate on the "termination_date" field.
func TerminationDateNotIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldTerminationDate, vs...))
}

// TerminationDateGT applies the GT predicate on the "termination_date" field.
func TerminationDateGT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldTerminationDate, v))
}

// TerminationDateGTE applies the GTE predicate on the "termination_date" field.
func TerminationDateGTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldTerminationDate, v))
}

// TerminationDateLT applies the LT predicate on the "termination_date" field.
func TerminationDateLT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldTerminationDate, v))
}

// TerminationDateLTE applies the LTE predicate on the "termination_date" field.
func TerminationDateLTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldTerminationDate, v))
}

// TerminationDateIsNil applies the IsNil predicate on the "termination_date" field.
func TerminationDateIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldTerminationDate))
}

// TerminationDateNotNil applies the NotNil predicate on the "termination_date" field.
func TerminationDateNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldTerminationDate))
}

// PhysicalDueDateEQ applies the EQ predicate on the "physical_due_date" field.
func PhysicalDueDateEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldPhysicalDueDate, v))
}

// PhysicalDueDateNEQ applies the NEQ predicate on the "physical_due_date" field.
func PhysicalDueDateNEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldPhysicalDueDate, v))
}

// PhysicalDueDateIn applies the In predicate on the "physical_due_date" field.
func PhysicalDueDateIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldPhysicalDueDate, vs...))
}

// PhysicalDueDateNotIn applies the NotIn predicate on the "physical_due_date" field.
func PhysicalDueDateNotIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldPhysicalDueDate, vs...))
}

// PhysicalDueDateGT applies the GT predicate on the "physical_due_date" field.
func PhysicalDueDateGT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldPhysicalDueDate, v))
}

// PhysicalDueDateGTE applies the GTE predicate on the "physical_due_date" field.
func PhysicalDueDateGTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldPhysicalDueDate, v))
}

// PhysicalDueDateLT applies the LT predicate on the "physical_due_date" field.
func PhysicalDueDateLT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldPhysicalDueDate, v))
}

// PhysicalDueDateLTE applies the LTE predicate on the "physical_due_date" field.
func PhysicalDueDateLTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldPhysicalDueDate, v))
}

// PhysicalDueDateIsNil applies the IsNil predicate on the "physical_due_date" field.
func PhysicalDueDateIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldPhysicalDueDate))
}

// PhysicalDueDateNotNil applies the NotNil predicate on the "physical_due_date" field.
func PhysicalDueDateNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldPhysicalDueDate))
}

// MedicalCertDateEQ applies the EQ predicate on the "medical_cert_date" field.
func MedicalCertDateEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldMedicalCertDate, v))
}

// MedicalCertDateNEQ applies the NEQ predicate on the "medical_cert_date" field.
func MedicalCertDateNEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldMedicalCertDate, v))
}

// MedicalCertDateIn applies the In predicate on the "medical_cert_date" field.
func MedicalCertDateIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldMedicalCertDate, vs...))
}

// MedicalCertDateNotIn applies the NotIn predicate on the "medical_cert_date" field.
func MedicalCertDateNotIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldMedicalCertDate, vs...))
}

// MedicalCertDateGT applies the GT predicate on the "medical_cert_date" field.
func MedicalCertDateGT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldMedicalCertDate, v))
}

// MedicalCertDateGTE applies the GTE predicate on the "medical_cert_date" field.
func MedicalCertDateGTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldMedicalCertDate, v))
}

// MedicalCertDateLT applies the LT predicate on the "medical_cert_date" field.
func MedicalCertDateLT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldMedicalCertDate, v))
}

// MedicalCertDateLTE applies the LTE predicate on the "medical_cert_date" field.
func MedicalCertDateLTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldMedicalCertDate, v))
}

// MedicalCertDateIsNil applies the IsNil predicate on the "medical_cert_date" field.
func MedicalCertDateIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldMedicalCertDate))
}

// MedicalCertDateNotNil applies the NotNil predicate on the "medical_cert_date" field.
func MedicalCertDateNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldMedicalCertDate))
}

// MvrDueDateEQ applies the EQ predicate on the "mvr_due_date" field.
func MvrDueDateEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldEQ(FieldMvrDueDate, v))
}

// MvrDueDateNEQ applies the NEQ predicate on the "mvr_due_date" field.
func MvrDueDateNEQ(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNEQ(FieldMvrDueDate, v))
}

// MvrDueDateIn applies the In predicate on the "mvr_due_date" field.
func MvrDueDateIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIn(FieldMvrDueDate, vs...))
}

// MvrDueDateNotIn applies the NotIn predicate on the "mvr_due_date" field.
func MvrDueDateNotIn(vs ...*pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotIn(FieldMvrDueDate, vs...))
}

// MvrDueDateGT applies the GT predicate on the "mvr_due_date" field.
func MvrDueDateGT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGT(FieldMvrDueDate, v))
}

// MvrDueDateGTE applies the GTE predicate on the "mvr_due_date" field.
func MvrDueDateGTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldGTE(FieldMvrDueDate, v))
}

// MvrDueDateLT applies the LT predicate on the "mvr_due_date" field.
func MvrDueDateLT(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLT(FieldMvrDueDate, v))
}

// MvrDueDateLTE applies the LTE predicate on the "mvr_due_date" field.
func MvrDueDateLTE(v *pgtype.Date) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldLTE(FieldMvrDueDate, v))
}

// MvrDueDateIsNil applies the IsNil predicate on the "mvr_due_date" field.
func MvrDueDateIsNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldIsNull(FieldMvrDueDate))
}

// MvrDueDateNotNil applies the NotNil predicate on the "mvr_due_date" field.
func MvrDueDateNotNil() predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.FieldNotNull(FieldMvrDueDate))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.WorkerProfile {
	return predicate.WorkerProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.WorkerProfile {
	return predicate.WorkerProfile(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.WorkerProfile {
	return predicate.WorkerProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.WorkerProfile {
	return predicate.WorkerProfile(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorker applies the HasEdge predicate on the "worker" edge.
func HasWorker() predicate.WorkerProfile {
	return predicate.WorkerProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, WorkerTable, WorkerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkerWith applies the HasEdge predicate on the "worker" edge with a given conditions (other predicates).
func HasWorkerWith(preds ...predicate.Worker) predicate.WorkerProfile {
	return predicate.WorkerProfile(func(s *sql.Selector) {
		step := newWorkerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasState applies the HasEdge predicate on the "state" edge.
func HasState() predicate.WorkerProfile {
	return predicate.WorkerProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StateTable, StateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStateWith applies the HasEdge predicate on the "state" edge with a given conditions (other predicates).
func HasStateWith(preds ...predicate.UsState) predicate.WorkerProfile {
	return predicate.WorkerProfile(func(s *sql.Selector) {
		step := newStateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkerProfile) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkerProfile) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkerProfile) predicate.WorkerProfile {
	return predicate.WorkerProfile(sql.NotPredicates(p))
}
