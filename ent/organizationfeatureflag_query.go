// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/featureflag"
	"github.com/emoss08/trenova/ent/organization"
	"github.com/emoss08/trenova/ent/organizationfeatureflag"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// OrganizationFeatureFlagQuery is the builder for querying OrganizationFeatureFlag entities.
type OrganizationFeatureFlagQuery struct {
	config
	ctx              *QueryContext
	order            []organizationfeatureflag.OrderOption
	inters           []Interceptor
	predicates       []predicate.OrganizationFeatureFlag
	withFeatureFlag  *FeatureFlagQuery
	withOrganization *OrganizationQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrganizationFeatureFlagQuery builder.
func (offq *OrganizationFeatureFlagQuery) Where(ps ...predicate.OrganizationFeatureFlag) *OrganizationFeatureFlagQuery {
	offq.predicates = append(offq.predicates, ps...)
	return offq
}

// Limit the number of records to be returned by this query.
func (offq *OrganizationFeatureFlagQuery) Limit(limit int) *OrganizationFeatureFlagQuery {
	offq.ctx.Limit = &limit
	return offq
}

// Offset to start from.
func (offq *OrganizationFeatureFlagQuery) Offset(offset int) *OrganizationFeatureFlagQuery {
	offq.ctx.Offset = &offset
	return offq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (offq *OrganizationFeatureFlagQuery) Unique(unique bool) *OrganizationFeatureFlagQuery {
	offq.ctx.Unique = &unique
	return offq
}

// Order specifies how the records should be ordered.
func (offq *OrganizationFeatureFlagQuery) Order(o ...organizationfeatureflag.OrderOption) *OrganizationFeatureFlagQuery {
	offq.order = append(offq.order, o...)
	return offq
}

// QueryFeatureFlag chains the current query on the "feature_flag" edge.
func (offq *OrganizationFeatureFlagQuery) QueryFeatureFlag() *FeatureFlagQuery {
	query := (&FeatureFlagClient{config: offq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := offq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := offq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationfeatureflag.Table, organizationfeatureflag.FieldID, selector),
			sqlgraph.To(featureflag.Table, featureflag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organizationfeatureflag.FeatureFlagTable, organizationfeatureflag.FeatureFlagColumn),
		)
		fromU = sqlgraph.SetNeighbors(offq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (offq *OrganizationFeatureFlagQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: offq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := offq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := offq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationfeatureflag.Table, organizationfeatureflag.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organizationfeatureflag.OrganizationTable, organizationfeatureflag.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(offq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrganizationFeatureFlag entity from the query.
// Returns a *NotFoundError when no OrganizationFeatureFlag was found.
func (offq *OrganizationFeatureFlagQuery) First(ctx context.Context) (*OrganizationFeatureFlag, error) {
	nodes, err := offq.Limit(1).All(setContextOp(ctx, offq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{organizationfeatureflag.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (offq *OrganizationFeatureFlagQuery) FirstX(ctx context.Context) *OrganizationFeatureFlag {
	node, err := offq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrganizationFeatureFlag ID from the query.
// Returns a *NotFoundError when no OrganizationFeatureFlag ID was found.
func (offq *OrganizationFeatureFlagQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = offq.Limit(1).IDs(setContextOp(ctx, offq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{organizationfeatureflag.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (offq *OrganizationFeatureFlagQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := offq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrganizationFeatureFlag entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrganizationFeatureFlag entity is found.
// Returns a *NotFoundError when no OrganizationFeatureFlag entities are found.
func (offq *OrganizationFeatureFlagQuery) Only(ctx context.Context) (*OrganizationFeatureFlag, error) {
	nodes, err := offq.Limit(2).All(setContextOp(ctx, offq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{organizationfeatureflag.Label}
	default:
		return nil, &NotSingularError{organizationfeatureflag.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (offq *OrganizationFeatureFlagQuery) OnlyX(ctx context.Context) *OrganizationFeatureFlag {
	node, err := offq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrganizationFeatureFlag ID in the query.
// Returns a *NotSingularError when more than one OrganizationFeatureFlag ID is found.
// Returns a *NotFoundError when no entities are found.
func (offq *OrganizationFeatureFlagQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = offq.Limit(2).IDs(setContextOp(ctx, offq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{organizationfeatureflag.Label}
	default:
		err = &NotSingularError{organizationfeatureflag.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (offq *OrganizationFeatureFlagQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := offq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrganizationFeatureFlags.
func (offq *OrganizationFeatureFlagQuery) All(ctx context.Context) ([]*OrganizationFeatureFlag, error) {
	ctx = setContextOp(ctx, offq.ctx, "All")
	if err := offq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrganizationFeatureFlag, *OrganizationFeatureFlagQuery]()
	return withInterceptors[[]*OrganizationFeatureFlag](ctx, offq, qr, offq.inters)
}

// AllX is like All, but panics if an error occurs.
func (offq *OrganizationFeatureFlagQuery) AllX(ctx context.Context) []*OrganizationFeatureFlag {
	nodes, err := offq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrganizationFeatureFlag IDs.
func (offq *OrganizationFeatureFlagQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if offq.ctx.Unique == nil && offq.path != nil {
		offq.Unique(true)
	}
	ctx = setContextOp(ctx, offq.ctx, "IDs")
	if err = offq.Select(organizationfeatureflag.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (offq *OrganizationFeatureFlagQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := offq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (offq *OrganizationFeatureFlagQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, offq.ctx, "Count")
	if err := offq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, offq, querierCount[*OrganizationFeatureFlagQuery](), offq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (offq *OrganizationFeatureFlagQuery) CountX(ctx context.Context) int {
	count, err := offq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (offq *OrganizationFeatureFlagQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, offq.ctx, "Exist")
	switch _, err := offq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (offq *OrganizationFeatureFlagQuery) ExistX(ctx context.Context) bool {
	exist, err := offq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrganizationFeatureFlagQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (offq *OrganizationFeatureFlagQuery) Clone() *OrganizationFeatureFlagQuery {
	if offq == nil {
		return nil
	}
	return &OrganizationFeatureFlagQuery{
		config:           offq.config,
		ctx:              offq.ctx.Clone(),
		order:            append([]organizationfeatureflag.OrderOption{}, offq.order...),
		inters:           append([]Interceptor{}, offq.inters...),
		predicates:       append([]predicate.OrganizationFeatureFlag{}, offq.predicates...),
		withFeatureFlag:  offq.withFeatureFlag.Clone(),
		withOrganization: offq.withOrganization.Clone(),
		// clone intermediate query.
		sql:  offq.sql.Clone(),
		path: offq.path,
	}
}

// WithFeatureFlag tells the query-builder to eager-load the nodes that are connected to
// the "feature_flag" edge. The optional arguments are used to configure the query builder of the edge.
func (offq *OrganizationFeatureFlagQuery) WithFeatureFlag(opts ...func(*FeatureFlagQuery)) *OrganizationFeatureFlagQuery {
	query := (&FeatureFlagClient{config: offq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	offq.withFeatureFlag = query
	return offq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (offq *OrganizationFeatureFlagQuery) WithOrganization(opts ...func(*OrganizationQuery)) *OrganizationFeatureFlagQuery {
	query := (&OrganizationClient{config: offq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	offq.withOrganization = query
	return offq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrganizationFeatureFlag.Query().
//		GroupBy(organizationfeatureflag.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (offq *OrganizationFeatureFlagQuery) GroupBy(field string, fields ...string) *OrganizationFeatureFlagGroupBy {
	offq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrganizationFeatureFlagGroupBy{build: offq}
	grbuild.flds = &offq.ctx.Fields
	grbuild.label = organizationfeatureflag.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.OrganizationFeatureFlag.Query().
//		Select(organizationfeatureflag.FieldCreatedAt).
//		Scan(ctx, &v)
func (offq *OrganizationFeatureFlagQuery) Select(fields ...string) *OrganizationFeatureFlagSelect {
	offq.ctx.Fields = append(offq.ctx.Fields, fields...)
	sbuild := &OrganizationFeatureFlagSelect{OrganizationFeatureFlagQuery: offq}
	sbuild.label = organizationfeatureflag.Label
	sbuild.flds, sbuild.scan = &offq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrganizationFeatureFlagSelect configured with the given aggregations.
func (offq *OrganizationFeatureFlagQuery) Aggregate(fns ...AggregateFunc) *OrganizationFeatureFlagSelect {
	return offq.Select().Aggregate(fns...)
}

func (offq *OrganizationFeatureFlagQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range offq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, offq); err != nil {
				return err
			}
		}
	}
	for _, f := range offq.ctx.Fields {
		if !organizationfeatureflag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if offq.path != nil {
		prev, err := offq.path(ctx)
		if err != nil {
			return err
		}
		offq.sql = prev
	}
	return nil
}

func (offq *OrganizationFeatureFlagQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrganizationFeatureFlag, error) {
	var (
		nodes       = []*OrganizationFeatureFlag{}
		_spec       = offq.querySpec()
		loadedTypes = [2]bool{
			offq.withFeatureFlag != nil,
			offq.withOrganization != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrganizationFeatureFlag).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrganizationFeatureFlag{config: offq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(offq.modifiers) > 0 {
		_spec.Modifiers = offq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, offq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := offq.withFeatureFlag; query != nil {
		if err := offq.loadFeatureFlag(ctx, query, nodes, nil,
			func(n *OrganizationFeatureFlag, e *FeatureFlag) { n.Edges.FeatureFlag = e }); err != nil {
			return nil, err
		}
	}
	if query := offq.withOrganization; query != nil {
		if err := offq.loadOrganization(ctx, query, nodes, nil,
			func(n *OrganizationFeatureFlag, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (offq *OrganizationFeatureFlagQuery) loadFeatureFlag(ctx context.Context, query *FeatureFlagQuery, nodes []*OrganizationFeatureFlag, init func(*OrganizationFeatureFlag), assign func(*OrganizationFeatureFlag, *FeatureFlag)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OrganizationFeatureFlag)
	for i := range nodes {
		fk := nodes[i].FeatureFlagID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(featureflag.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feature_flag_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (offq *OrganizationFeatureFlagQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*OrganizationFeatureFlag, init func(*OrganizationFeatureFlag), assign func(*OrganizationFeatureFlag, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OrganizationFeatureFlag)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (offq *OrganizationFeatureFlagQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := offq.querySpec()
	if len(offq.modifiers) > 0 {
		_spec.Modifiers = offq.modifiers
	}
	_spec.Node.Columns = offq.ctx.Fields
	if len(offq.ctx.Fields) > 0 {
		_spec.Unique = offq.ctx.Unique != nil && *offq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, offq.driver, _spec)
}

func (offq *OrganizationFeatureFlagQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(organizationfeatureflag.Table, organizationfeatureflag.Columns, sqlgraph.NewFieldSpec(organizationfeatureflag.FieldID, field.TypeUUID))
	_spec.From = offq.sql
	if unique := offq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if offq.path != nil {
		_spec.Unique = true
	}
	if fields := offq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationfeatureflag.FieldID)
		for i := range fields {
			if fields[i] != organizationfeatureflag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if offq.withFeatureFlag != nil {
			_spec.Node.AddColumnOnce(organizationfeatureflag.FieldFeatureFlagID)
		}
		if offq.withOrganization != nil {
			_spec.Node.AddColumnOnce(organizationfeatureflag.FieldOrganizationID)
		}
	}
	if ps := offq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := offq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := offq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := offq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (offq *OrganizationFeatureFlagQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(offq.driver.Dialect())
	t1 := builder.Table(organizationfeatureflag.Table)
	columns := offq.ctx.Fields
	if len(columns) == 0 {
		columns = organizationfeatureflag.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if offq.sql != nil {
		selector = offq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if offq.ctx.Unique != nil && *offq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range offq.modifiers {
		m(selector)
	}
	for _, p := range offq.predicates {
		p(selector)
	}
	for _, p := range offq.order {
		p(selector)
	}
	if offset := offq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := offq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (offq *OrganizationFeatureFlagQuery) Modify(modifiers ...func(s *sql.Selector)) *OrganizationFeatureFlagSelect {
	offq.modifiers = append(offq.modifiers, modifiers...)
	return offq.Select()
}

// OrganizationFeatureFlagGroupBy is the group-by builder for OrganizationFeatureFlag entities.
type OrganizationFeatureFlagGroupBy struct {
	selector
	build *OrganizationFeatureFlagQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (offgb *OrganizationFeatureFlagGroupBy) Aggregate(fns ...AggregateFunc) *OrganizationFeatureFlagGroupBy {
	offgb.fns = append(offgb.fns, fns...)
	return offgb
}

// Scan applies the selector query and scans the result into the given value.
func (offgb *OrganizationFeatureFlagGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, offgb.build.ctx, "GroupBy")
	if err := offgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationFeatureFlagQuery, *OrganizationFeatureFlagGroupBy](ctx, offgb.build, offgb, offgb.build.inters, v)
}

func (offgb *OrganizationFeatureFlagGroupBy) sqlScan(ctx context.Context, root *OrganizationFeatureFlagQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(offgb.fns))
	for _, fn := range offgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*offgb.flds)+len(offgb.fns))
		for _, f := range *offgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*offgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := offgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrganizationFeatureFlagSelect is the builder for selecting fields of OrganizationFeatureFlag entities.
type OrganizationFeatureFlagSelect struct {
	*OrganizationFeatureFlagQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (offs *OrganizationFeatureFlagSelect) Aggregate(fns ...AggregateFunc) *OrganizationFeatureFlagSelect {
	offs.fns = append(offs.fns, fns...)
	return offs
}

// Scan applies the selector query and scans the result into the given value.
func (offs *OrganizationFeatureFlagSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, offs.ctx, "Select")
	if err := offs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationFeatureFlagQuery, *OrganizationFeatureFlagSelect](ctx, offs.OrganizationFeatureFlagQuery, offs, offs.inters, v)
}

func (offs *OrganizationFeatureFlagSelect) sqlScan(ctx context.Context, root *OrganizationFeatureFlagQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(offs.fns))
	for _, fn := range offs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*offs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := offs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (offs *OrganizationFeatureFlagSelect) Modify(modifiers ...func(s *sql.Selector)) *OrganizationFeatureFlagSelect {
	offs.modifiers = append(offs.modifiers, modifiers...)
	return offs
}
