// Code generated by ent, DO NOT EDIT.

package worker

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldVersion, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldCode, v))
}

// ProfilePictureURL applies equality check predicate on the "profile_picture_url" field. It's identical to ProfilePictureURLEQ.
func ProfilePictureURL(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldProfilePictureURL, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldLastName, v))
}

// AddressLine1 applies equality check predicate on the "address_line_1" field. It's identical to AddressLine1EQ.
func AddressLine1(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldAddressLine1, v))
}

// AddressLine2 applies equality check predicate on the "address_line_2" field. It's identical to AddressLine2EQ.
func AddressLine2(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldAddressLine2, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldCity, v))
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldPostalCode, v))
}

// StateID applies equality check predicate on the "state_id" field. It's identical to StateIDEQ.
func StateID(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldStateID, v))
}

// FleetCodeID applies equality check predicate on the "fleet_code_id" field. It's identical to FleetCodeIDEQ.
func FleetCodeID(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldFleetCodeID, v))
}

// ManagerID applies equality check predicate on the "manager_id" field. It's identical to ManagerIDEQ.
func ManagerID(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldManagerID, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldVersion, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldStatus, vs...))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContainsFold(FieldCode, v))
}

// ProfilePictureURLEQ applies the EQ predicate on the "profile_picture_url" field.
func ProfilePictureURLEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldProfilePictureURL, v))
}

// ProfilePictureURLNEQ applies the NEQ predicate on the "profile_picture_url" field.
func ProfilePictureURLNEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldProfilePictureURL, v))
}

// ProfilePictureURLIn applies the In predicate on the "profile_picture_url" field.
func ProfilePictureURLIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldProfilePictureURL, vs...))
}

// ProfilePictureURLNotIn applies the NotIn predicate on the "profile_picture_url" field.
func ProfilePictureURLNotIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldProfilePictureURL, vs...))
}

// ProfilePictureURLGT applies the GT predicate on the "profile_picture_url" field.
func ProfilePictureURLGT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldProfilePictureURL, v))
}

// ProfilePictureURLGTE applies the GTE predicate on the "profile_picture_url" field.
func ProfilePictureURLGTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldProfilePictureURL, v))
}

// ProfilePictureURLLT applies the LT predicate on the "profile_picture_url" field.
func ProfilePictureURLLT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldProfilePictureURL, v))
}

// ProfilePictureURLLTE applies the LTE predicate on the "profile_picture_url" field.
func ProfilePictureURLLTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldProfilePictureURL, v))
}

// ProfilePictureURLContains applies the Contains predicate on the "profile_picture_url" field.
func ProfilePictureURLContains(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContains(FieldProfilePictureURL, v))
}

// ProfilePictureURLHasPrefix applies the HasPrefix predicate on the "profile_picture_url" field.
func ProfilePictureURLHasPrefix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasPrefix(FieldProfilePictureURL, v))
}

// ProfilePictureURLHasSuffix applies the HasSuffix predicate on the "profile_picture_url" field.
func ProfilePictureURLHasSuffix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasSuffix(FieldProfilePictureURL, v))
}

// ProfilePictureURLIsNil applies the IsNil predicate on the "profile_picture_url" field.
func ProfilePictureURLIsNil() predicate.Worker {
	return predicate.Worker(sql.FieldIsNull(FieldProfilePictureURL))
}

// ProfilePictureURLNotNil applies the NotNil predicate on the "profile_picture_url" field.
func ProfilePictureURLNotNil() predicate.Worker {
	return predicate.Worker(sql.FieldNotNull(FieldProfilePictureURL))
}

// ProfilePictureURLEqualFold applies the EqualFold predicate on the "profile_picture_url" field.
func ProfilePictureURLEqualFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEqualFold(FieldProfilePictureURL, v))
}

// ProfilePictureURLContainsFold applies the ContainsFold predicate on the "profile_picture_url" field.
func ProfilePictureURLContainsFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContainsFold(FieldProfilePictureURL, v))
}

// WorkerTypeEQ applies the EQ predicate on the "worker_type" field.
func WorkerTypeEQ(v WorkerType) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldWorkerType, v))
}

// WorkerTypeNEQ applies the NEQ predicate on the "worker_type" field.
func WorkerTypeNEQ(v WorkerType) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldWorkerType, v))
}

// WorkerTypeIn applies the In predicate on the "worker_type" field.
func WorkerTypeIn(vs ...WorkerType) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldWorkerType, vs...))
}

// WorkerTypeNotIn applies the NotIn predicate on the "worker_type" field.
func WorkerTypeNotIn(vs ...WorkerType) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldWorkerType, vs...))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContainsFold(FieldLastName, v))
}

// AddressLine1EQ applies the EQ predicate on the "address_line_1" field.
func AddressLine1EQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldAddressLine1, v))
}

// AddressLine1NEQ applies the NEQ predicate on the "address_line_1" field.
func AddressLine1NEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldAddressLine1, v))
}

// AddressLine1In applies the In predicate on the "address_line_1" field.
func AddressLine1In(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldAddressLine1, vs...))
}

// AddressLine1NotIn applies the NotIn predicate on the "address_line_1" field.
func AddressLine1NotIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldAddressLine1, vs...))
}

// AddressLine1GT applies the GT predicate on the "address_line_1" field.
func AddressLine1GT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldAddressLine1, v))
}

// AddressLine1GTE applies the GTE predicate on the "address_line_1" field.
func AddressLine1GTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldAddressLine1, v))
}

// AddressLine1LT applies the LT predicate on the "address_line_1" field.
func AddressLine1LT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldAddressLine1, v))
}

// AddressLine1LTE applies the LTE predicate on the "address_line_1" field.
func AddressLine1LTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldAddressLine1, v))
}

// AddressLine1Contains applies the Contains predicate on the "address_line_1" field.
func AddressLine1Contains(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContains(FieldAddressLine1, v))
}

// AddressLine1HasPrefix applies the HasPrefix predicate on the "address_line_1" field.
func AddressLine1HasPrefix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasPrefix(FieldAddressLine1, v))
}

// AddressLine1HasSuffix applies the HasSuffix predicate on the "address_line_1" field.
func AddressLine1HasSuffix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasSuffix(FieldAddressLine1, v))
}

// AddressLine1IsNil applies the IsNil predicate on the "address_line_1" field.
func AddressLine1IsNil() predicate.Worker {
	return predicate.Worker(sql.FieldIsNull(FieldAddressLine1))
}

// AddressLine1NotNil applies the NotNil predicate on the "address_line_1" field.
func AddressLine1NotNil() predicate.Worker {
	return predicate.Worker(sql.FieldNotNull(FieldAddressLine1))
}

// AddressLine1EqualFold applies the EqualFold predicate on the "address_line_1" field.
func AddressLine1EqualFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEqualFold(FieldAddressLine1, v))
}

// AddressLine1ContainsFold applies the ContainsFold predicate on the "address_line_1" field.
func AddressLine1ContainsFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContainsFold(FieldAddressLine1, v))
}

// AddressLine2EQ applies the EQ predicate on the "address_line_2" field.
func AddressLine2EQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldAddressLine2, v))
}

// AddressLine2NEQ applies the NEQ predicate on the "address_line_2" field.
func AddressLine2NEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldAddressLine2, v))
}

// AddressLine2In applies the In predicate on the "address_line_2" field.
func AddressLine2In(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldAddressLine2, vs...))
}

// AddressLine2NotIn applies the NotIn predicate on the "address_line_2" field.
func AddressLine2NotIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldAddressLine2, vs...))
}

// AddressLine2GT applies the GT predicate on the "address_line_2" field.
func AddressLine2GT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldAddressLine2, v))
}

// AddressLine2GTE applies the GTE predicate on the "address_line_2" field.
func AddressLine2GTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldAddressLine2, v))
}

// AddressLine2LT applies the LT predicate on the "address_line_2" field.
func AddressLine2LT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldAddressLine2, v))
}

// AddressLine2LTE applies the LTE predicate on the "address_line_2" field.
func AddressLine2LTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldAddressLine2, v))
}

// AddressLine2Contains applies the Contains predicate on the "address_line_2" field.
func AddressLine2Contains(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContains(FieldAddressLine2, v))
}

// AddressLine2HasPrefix applies the HasPrefix predicate on the "address_line_2" field.
func AddressLine2HasPrefix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasPrefix(FieldAddressLine2, v))
}

// AddressLine2HasSuffix applies the HasSuffix predicate on the "address_line_2" field.
func AddressLine2HasSuffix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasSuffix(FieldAddressLine2, v))
}

// AddressLine2IsNil applies the IsNil predicate on the "address_line_2" field.
func AddressLine2IsNil() predicate.Worker {
	return predicate.Worker(sql.FieldIsNull(FieldAddressLine2))
}

// AddressLine2NotNil applies the NotNil predicate on the "address_line_2" field.
func AddressLine2NotNil() predicate.Worker {
	return predicate.Worker(sql.FieldNotNull(FieldAddressLine2))
}

// AddressLine2EqualFold applies the EqualFold predicate on the "address_line_2" field.
func AddressLine2EqualFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEqualFold(FieldAddressLine2, v))
}

// AddressLine2ContainsFold applies the ContainsFold predicate on the "address_line_2" field.
func AddressLine2ContainsFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContainsFold(FieldAddressLine2, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.Worker {
	return predicate.Worker(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.Worker {
	return predicate.Worker(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContainsFold(FieldCity, v))
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldPostalCode, v))
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldPostalCode, v))
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldPostalCode, vs...))
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldPostalCode, vs...))
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldPostalCode, v))
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldPostalCode, v))
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldPostalCode, v))
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldPostalCode, v))
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContains(FieldPostalCode, v))
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasPrefix(FieldPostalCode, v))
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.Worker {
	return predicate.Worker(sql.FieldHasSuffix(FieldPostalCode, v))
}

// PostalCodeIsNil applies the IsNil predicate on the "postal_code" field.
func PostalCodeIsNil() predicate.Worker {
	return predicate.Worker(sql.FieldIsNull(FieldPostalCode))
}

// PostalCodeNotNil applies the NotNil predicate on the "postal_code" field.
func PostalCodeNotNil() predicate.Worker {
	return predicate.Worker(sql.FieldNotNull(FieldPostalCode))
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldEqualFold(FieldPostalCode, v))
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.Worker {
	return predicate.Worker(sql.FieldContainsFold(FieldPostalCode, v))
}

// StateIDEQ applies the EQ predicate on the "state_id" field.
func StateIDEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldStateID, v))
}

// StateIDNEQ applies the NEQ predicate on the "state_id" field.
func StateIDNEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldStateID, v))
}

// StateIDIn applies the In predicate on the "state_id" field.
func StateIDIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldStateID, vs...))
}

// StateIDNotIn applies the NotIn predicate on the "state_id" field.
func StateIDNotIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldStateID, vs...))
}

// StateIDIsNil applies the IsNil predicate on the "state_id" field.
func StateIDIsNil() predicate.Worker {
	return predicate.Worker(sql.FieldIsNull(FieldStateID))
}

// StateIDNotNil applies the NotNil predicate on the "state_id" field.
func StateIDNotNil() predicate.Worker {
	return predicate.Worker(sql.FieldNotNull(FieldStateID))
}

// FleetCodeIDEQ applies the EQ predicate on the "fleet_code_id" field.
func FleetCodeIDEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldFleetCodeID, v))
}

// FleetCodeIDNEQ applies the NEQ predicate on the "fleet_code_id" field.
func FleetCodeIDNEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldFleetCodeID, v))
}

// FleetCodeIDIn applies the In predicate on the "fleet_code_id" field.
func FleetCodeIDIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldFleetCodeID, vs...))
}

// FleetCodeIDNotIn applies the NotIn predicate on the "fleet_code_id" field.
func FleetCodeIDNotIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldFleetCodeID, vs...))
}

// FleetCodeIDIsNil applies the IsNil predicate on the "fleet_code_id" field.
func FleetCodeIDIsNil() predicate.Worker {
	return predicate.Worker(sql.FieldIsNull(FieldFleetCodeID))
}

// FleetCodeIDNotNil applies the NotNil predicate on the "fleet_code_id" field.
func FleetCodeIDNotNil() predicate.Worker {
	return predicate.Worker(sql.FieldNotNull(FieldFleetCodeID))
}

// ManagerIDEQ applies the EQ predicate on the "manager_id" field.
func ManagerIDEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldManagerID, v))
}

// ManagerIDNEQ applies the NEQ predicate on the "manager_id" field.
func ManagerIDNEQ(v uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldManagerID, v))
}

// ManagerIDIn applies the In predicate on the "manager_id" field.
func ManagerIDIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldManagerID, vs...))
}

// ManagerIDNotIn applies the NotIn predicate on the "manager_id" field.
func ManagerIDNotIn(vs ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldManagerID, vs...))
}

// ManagerIDIsNil applies the IsNil predicate on the "manager_id" field.
func ManagerIDIsNil() predicate.Worker {
	return predicate.Worker(sql.FieldIsNull(FieldManagerID))
}

// ManagerIDNotNil applies the NotNil predicate on the "manager_id" field.
func ManagerIDNotNil() predicate.Worker {
	return predicate.Worker(sql.FieldNotNull(FieldManagerID))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasState applies the HasEdge predicate on the "state" edge.
func HasState() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StateTable, StateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStateWith applies the HasEdge predicate on the "state" edge with a given conditions (other predicates).
func HasStateWith(preds ...predicate.UsState) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newStateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFleetCode applies the HasEdge predicate on the "fleet_code" edge.
func HasFleetCode() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FleetCodeTable, FleetCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFleetCodeWith applies the HasEdge predicate on the "fleet_code" edge with a given conditions (other predicates).
func HasFleetCodeWith(preds ...predicate.FleetCode) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newFleetCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasManager applies the HasEdge predicate on the "manager" edge.
func HasManager() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ManagerTable, ManagerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagerWith applies the HasEdge predicate on the "manager" edge with a given conditions (other predicates).
func HasManagerWith(preds ...predicate.User) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newManagerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryTractor applies the HasEdge predicate on the "primary_tractor" edge.
func HasPrimaryTractor() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PrimaryTractorTable, PrimaryTractorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryTractorWith applies the HasEdge predicate on the "primary_tractor" edge with a given conditions (other predicates).
func HasPrimaryTractorWith(preds ...predicate.Tractor) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newPrimaryTractorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSecondaryTractor applies the HasEdge predicate on the "secondary_tractor" edge.
func HasSecondaryTractor() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SecondaryTractorTable, SecondaryTractorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSecondaryTractorWith applies the HasEdge predicate on the "secondary_tractor" edge with a given conditions (other predicates).
func HasSecondaryTractorWith(preds ...predicate.Tractor) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newSecondaryTractorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkerProfile applies the HasEdge predicate on the "worker_profile" edge.
func HasWorkerProfile() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, WorkerProfileTable, WorkerProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkerProfileWith applies the HasEdge predicate on the "worker_profile" edge with a given conditions (other predicates).
func HasWorkerProfileWith(preds ...predicate.WorkerProfile) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newWorkerProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkerComments applies the HasEdge predicate on the "worker_comments" edge.
func HasWorkerComments() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkerCommentsTable, WorkerCommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkerCommentsWith applies the HasEdge predicate on the "worker_comments" edge with a given conditions (other predicates).
func HasWorkerCommentsWith(preds ...predicate.WorkerComment) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newWorkerCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkerContacts applies the HasEdge predicate on the "worker_contacts" edge.
func HasWorkerContacts() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkerContactsTable, WorkerContactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkerContactsWith applies the HasEdge predicate on the "worker_contacts" edge with a given conditions (other predicates).
func HasWorkerContactsWith(preds ...predicate.WorkerContact) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newWorkerContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Worker) predicate.Worker {
	return predicate.Worker(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Worker) predicate.Worker {
	return predicate.Worker(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Worker) predicate.Worker {
	return predicate.Worker(sql.NotPredicates(p))
}
