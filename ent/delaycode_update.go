// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/ent/delaycode"
	"github.com/emoss08/trenova/ent/predicate"
)

// DelayCodeUpdate is the builder for updating DelayCode entities.
type DelayCodeUpdate struct {
	config
	hooks     []Hook
	mutation  *DelayCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DelayCodeUpdate builder.
func (dcu *DelayCodeUpdate) Where(ps ...predicate.DelayCode) *DelayCodeUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetUpdatedAt sets the "updated_at" field.
func (dcu *DelayCodeUpdate) SetUpdatedAt(t time.Time) *DelayCodeUpdate {
	dcu.mutation.SetUpdatedAt(t)
	return dcu
}

// SetVersion sets the "version" field.
func (dcu *DelayCodeUpdate) SetVersion(i int) *DelayCodeUpdate {
	dcu.mutation.ResetVersion()
	dcu.mutation.SetVersion(i)
	return dcu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dcu *DelayCodeUpdate) SetNillableVersion(i *int) *DelayCodeUpdate {
	if i != nil {
		dcu.SetVersion(*i)
	}
	return dcu
}

// AddVersion adds i to the "version" field.
func (dcu *DelayCodeUpdate) AddVersion(i int) *DelayCodeUpdate {
	dcu.mutation.AddVersion(i)
	return dcu
}

// SetStatus sets the "status" field.
func (dcu *DelayCodeUpdate) SetStatus(d delaycode.Status) *DelayCodeUpdate {
	dcu.mutation.SetStatus(d)
	return dcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dcu *DelayCodeUpdate) SetNillableStatus(d *delaycode.Status) *DelayCodeUpdate {
	if d != nil {
		dcu.SetStatus(*d)
	}
	return dcu
}

// SetCode sets the "code" field.
func (dcu *DelayCodeUpdate) SetCode(s string) *DelayCodeUpdate {
	dcu.mutation.SetCode(s)
	return dcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dcu *DelayCodeUpdate) SetNillableCode(s *string) *DelayCodeUpdate {
	if s != nil {
		dcu.SetCode(*s)
	}
	return dcu
}

// SetDescription sets the "description" field.
func (dcu *DelayCodeUpdate) SetDescription(s string) *DelayCodeUpdate {
	dcu.mutation.SetDescription(s)
	return dcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dcu *DelayCodeUpdate) SetNillableDescription(s *string) *DelayCodeUpdate {
	if s != nil {
		dcu.SetDescription(*s)
	}
	return dcu
}

// ClearDescription clears the value of the "description" field.
func (dcu *DelayCodeUpdate) ClearDescription() *DelayCodeUpdate {
	dcu.mutation.ClearDescription()
	return dcu
}

// SetFCarrierOrDriver sets the "f_carrier_or_driver" field.
func (dcu *DelayCodeUpdate) SetFCarrierOrDriver(b bool) *DelayCodeUpdate {
	dcu.mutation.SetFCarrierOrDriver(b)
	return dcu
}

// SetNillableFCarrierOrDriver sets the "f_carrier_or_driver" field if the given value is not nil.
func (dcu *DelayCodeUpdate) SetNillableFCarrierOrDriver(b *bool) *DelayCodeUpdate {
	if b != nil {
		dcu.SetFCarrierOrDriver(*b)
	}
	return dcu
}

// ClearFCarrierOrDriver clears the value of the "f_carrier_or_driver" field.
func (dcu *DelayCodeUpdate) ClearFCarrierOrDriver() *DelayCodeUpdate {
	dcu.mutation.ClearFCarrierOrDriver()
	return dcu
}

// Mutation returns the DelayCodeMutation object of the builder.
func (dcu *DelayCodeUpdate) Mutation() *DelayCodeMutation {
	return dcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DelayCodeUpdate) Save(ctx context.Context) (int, error) {
	dcu.defaults()
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DelayCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DelayCodeUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DelayCodeUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DelayCodeUpdate) defaults() {
	if _, ok := dcu.mutation.UpdatedAt(); !ok {
		v := delaycode.UpdateDefaultUpdatedAt()
		dcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DelayCodeUpdate) check() error {
	if v, ok := dcu.mutation.Status(); ok {
		if err := delaycode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DelayCode.status": %w`, err)}
		}
	}
	if v, ok := dcu.mutation.Code(); ok {
		if err := delaycode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DelayCode.code": %w`, err)}
		}
	}
	if _, ok := dcu.mutation.BusinessUnitID(); dcu.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DelayCode.business_unit"`)
	}
	if _, ok := dcu.mutation.OrganizationID(); dcu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DelayCode.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcu *DelayCodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DelayCodeUpdate {
	dcu.modifiers = append(dcu.modifiers, modifiers...)
	return dcu
}

func (dcu *DelayCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(delaycode.Table, delaycode.Columns, sqlgraph.NewFieldSpec(delaycode.FieldID, field.TypeUUID))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.UpdatedAt(); ok {
		_spec.SetField(delaycode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dcu.mutation.Version(); ok {
		_spec.SetField(delaycode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcu.mutation.AddedVersion(); ok {
		_spec.AddField(delaycode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcu.mutation.Status(); ok {
		_spec.SetField(delaycode.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dcu.mutation.Code(); ok {
		_spec.SetField(delaycode.FieldCode, field.TypeString, value)
	}
	if value, ok := dcu.mutation.Description(); ok {
		_spec.SetField(delaycode.FieldDescription, field.TypeString, value)
	}
	if dcu.mutation.DescriptionCleared() {
		_spec.ClearField(delaycode.FieldDescription, field.TypeString)
	}
	if value, ok := dcu.mutation.FCarrierOrDriver(); ok {
		_spec.SetField(delaycode.FieldFCarrierOrDriver, field.TypeBool, value)
	}
	if dcu.mutation.FCarrierOrDriverCleared() {
		_spec.ClearField(delaycode.FieldFCarrierOrDriver, field.TypeBool)
	}
	_spec.AddModifiers(dcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delaycode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DelayCodeUpdateOne is the builder for updating a single DelayCode entity.
type DelayCodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DelayCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (dcuo *DelayCodeUpdateOne) SetUpdatedAt(t time.Time) *DelayCodeUpdateOne {
	dcuo.mutation.SetUpdatedAt(t)
	return dcuo
}

// SetVersion sets the "version" field.
func (dcuo *DelayCodeUpdateOne) SetVersion(i int) *DelayCodeUpdateOne {
	dcuo.mutation.ResetVersion()
	dcuo.mutation.SetVersion(i)
	return dcuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dcuo *DelayCodeUpdateOne) SetNillableVersion(i *int) *DelayCodeUpdateOne {
	if i != nil {
		dcuo.SetVersion(*i)
	}
	return dcuo
}

// AddVersion adds i to the "version" field.
func (dcuo *DelayCodeUpdateOne) AddVersion(i int) *DelayCodeUpdateOne {
	dcuo.mutation.AddVersion(i)
	return dcuo
}

// SetStatus sets the "status" field.
func (dcuo *DelayCodeUpdateOne) SetStatus(d delaycode.Status) *DelayCodeUpdateOne {
	dcuo.mutation.SetStatus(d)
	return dcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dcuo *DelayCodeUpdateOne) SetNillableStatus(d *delaycode.Status) *DelayCodeUpdateOne {
	if d != nil {
		dcuo.SetStatus(*d)
	}
	return dcuo
}

// SetCode sets the "code" field.
func (dcuo *DelayCodeUpdateOne) SetCode(s string) *DelayCodeUpdateOne {
	dcuo.mutation.SetCode(s)
	return dcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dcuo *DelayCodeUpdateOne) SetNillableCode(s *string) *DelayCodeUpdateOne {
	if s != nil {
		dcuo.SetCode(*s)
	}
	return dcuo
}

// SetDescription sets the "description" field.
func (dcuo *DelayCodeUpdateOne) SetDescription(s string) *DelayCodeUpdateOne {
	dcuo.mutation.SetDescription(s)
	return dcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dcuo *DelayCodeUpdateOne) SetNillableDescription(s *string) *DelayCodeUpdateOne {
	if s != nil {
		dcuo.SetDescription(*s)
	}
	return dcuo
}

// ClearDescription clears the value of the "description" field.
func (dcuo *DelayCodeUpdateOne) ClearDescription() *DelayCodeUpdateOne {
	dcuo.mutation.ClearDescription()
	return dcuo
}

// SetFCarrierOrDriver sets the "f_carrier_or_driver" field.
func (dcuo *DelayCodeUpdateOne) SetFCarrierOrDriver(b bool) *DelayCodeUpdateOne {
	dcuo.mutation.SetFCarrierOrDriver(b)
	return dcuo
}

// SetNillableFCarrierOrDriver sets the "f_carrier_or_driver" field if the given value is not nil.
func (dcuo *DelayCodeUpdateOne) SetNillableFCarrierOrDriver(b *bool) *DelayCodeUpdateOne {
	if b != nil {
		dcuo.SetFCarrierOrDriver(*b)
	}
	return dcuo
}

// ClearFCarrierOrDriver clears the value of the "f_carrier_or_driver" field.
func (dcuo *DelayCodeUpdateOne) ClearFCarrierOrDriver() *DelayCodeUpdateOne {
	dcuo.mutation.ClearFCarrierOrDriver()
	return dcuo
}

// Mutation returns the DelayCodeMutation object of the builder.
func (dcuo *DelayCodeUpdateOne) Mutation() *DelayCodeMutation {
	return dcuo.mutation
}

// Where appends a list predicates to the DelayCodeUpdate builder.
func (dcuo *DelayCodeUpdateOne) Where(ps ...predicate.DelayCode) *DelayCodeUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DelayCodeUpdateOne) Select(field string, fields ...string) *DelayCodeUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DelayCode entity.
func (dcuo *DelayCodeUpdateOne) Save(ctx context.Context) (*DelayCode, error) {
	dcuo.defaults()
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DelayCodeUpdateOne) SaveX(ctx context.Context) *DelayCode {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DelayCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DelayCodeUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DelayCodeUpdateOne) defaults() {
	if _, ok := dcuo.mutation.UpdatedAt(); !ok {
		v := delaycode.UpdateDefaultUpdatedAt()
		dcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DelayCodeUpdateOne) check() error {
	if v, ok := dcuo.mutation.Status(); ok {
		if err := delaycode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DelayCode.status": %w`, err)}
		}
	}
	if v, ok := dcuo.mutation.Code(); ok {
		if err := delaycode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DelayCode.code": %w`, err)}
		}
	}
	if _, ok := dcuo.mutation.BusinessUnitID(); dcuo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DelayCode.business_unit"`)
	}
	if _, ok := dcuo.mutation.OrganizationID(); dcuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DelayCode.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcuo *DelayCodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DelayCodeUpdateOne {
	dcuo.modifiers = append(dcuo.modifiers, modifiers...)
	return dcuo
}

func (dcuo *DelayCodeUpdateOne) sqlSave(ctx context.Context) (_node *DelayCode, err error) {
	if err := dcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(delaycode.Table, delaycode.Columns, sqlgraph.NewFieldSpec(delaycode.FieldID, field.TypeUUID))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DelayCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delaycode.FieldID)
		for _, f := range fields {
			if !delaycode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delaycode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(delaycode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dcuo.mutation.Version(); ok {
		_spec.SetField(delaycode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcuo.mutation.AddedVersion(); ok {
		_spec.AddField(delaycode.FieldVersion, field.TypeInt, value)
	}
	if value, ok := dcuo.mutation.Status(); ok {
		_spec.SetField(delaycode.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dcuo.mutation.Code(); ok {
		_spec.SetField(delaycode.FieldCode, field.TypeString, value)
	}
	if value, ok := dcuo.mutation.Description(); ok {
		_spec.SetField(delaycode.FieldDescription, field.TypeString, value)
	}
	if dcuo.mutation.DescriptionCleared() {
		_spec.ClearField(delaycode.FieldDescription, field.TypeString)
	}
	if value, ok := dcuo.mutation.FCarrierOrDriver(); ok {
		_spec.SetField(delaycode.FieldFCarrierOrDriver, field.TypeBool, value)
	}
	if dcuo.mutation.FCarrierOrDriverCleared() {
		_spec.ClearField(delaycode.FieldFCarrierOrDriver, field.TypeBool)
	}
	_spec.AddModifiers(dcuo.modifiers...)
	_node = &DelayCode{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delaycode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
