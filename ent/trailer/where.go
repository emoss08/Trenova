// Code generated by ent, DO NOT EDIT.

package trailer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/ent/predicate"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldVersion, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldCode, v))
}

// EquipmentTypeID applies equality check predicate on the "equipment_type_id" field. It's identical to EquipmentTypeIDEQ.
func EquipmentTypeID(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldEquipmentTypeID, v))
}

// Vin applies equality check predicate on the "vin" field. It's identical to VinEQ.
func Vin(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldVin, v))
}

// EquipmentManufacturerID applies equality check predicate on the "equipment_manufacturer_id" field. It's identical to EquipmentManufacturerIDEQ.
func EquipmentManufacturerID(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldEquipmentManufacturerID, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldModel, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int16) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldYear, v))
}

// LicensePlateNumber applies equality check predicate on the "license_plate_number" field. It's identical to LicensePlateNumberEQ.
func LicensePlateNumber(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldLicensePlateNumber, v))
}

// StateID applies equality check predicate on the "state_id" field. It's identical to StateIDEQ.
func StateID(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldStateID, v))
}

// FleetCodeID applies equality check predicate on the "fleet_code_id" field. It's identical to FleetCodeIDEQ.
func FleetCodeID(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldFleetCodeID, v))
}

// LastInspectionDate applies equality check predicate on the "last_inspection_date" field. It's identical to LastInspectionDateEQ.
func LastInspectionDate(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldLastInspectionDate, v))
}

// RegistrationNumber applies equality check predicate on the "registration_number" field. It's identical to RegistrationNumberEQ.
func RegistrationNumber(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldRegistrationNumber, v))
}

// RegistrationStateID applies equality check predicate on the "registration_state_id" field. It's identical to RegistrationStateIDEQ.
func RegistrationStateID(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldRegistrationStateID, v))
}

// RegistrationExpirationDate applies equality check predicate on the "registration_expiration_date" field. It's identical to RegistrationExpirationDateEQ.
func RegistrationExpirationDate(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldRegistrationExpirationDate, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldVersion, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContainsFold(FieldCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldStatus, vs...))
}

// EquipmentTypeIDEQ applies the EQ predicate on the "equipment_type_id" field.
func EquipmentTypeIDEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldEquipmentTypeID, v))
}

// EquipmentTypeIDNEQ applies the NEQ predicate on the "equipment_type_id" field.
func EquipmentTypeIDNEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldEquipmentTypeID, v))
}

// EquipmentTypeIDIn applies the In predicate on the "equipment_type_id" field.
func EquipmentTypeIDIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldEquipmentTypeID, vs...))
}

// EquipmentTypeIDNotIn applies the NotIn predicate on the "equipment_type_id" field.
func EquipmentTypeIDNotIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldEquipmentTypeID, vs...))
}

// VinEQ applies the EQ predicate on the "vin" field.
func VinEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldVin, v))
}

// VinNEQ applies the NEQ predicate on the "vin" field.
func VinNEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldVin, v))
}

// VinIn applies the In predicate on the "vin" field.
func VinIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldVin, vs...))
}

// VinNotIn applies the NotIn predicate on the "vin" field.
func VinNotIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldVin, vs...))
}

// VinGT applies the GT predicate on the "vin" field.
func VinGT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldVin, v))
}

// VinGTE applies the GTE predicate on the "vin" field.
func VinGTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldVin, v))
}

// VinLT applies the LT predicate on the "vin" field.
func VinLT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldVin, v))
}

// VinLTE applies the LTE predicate on the "vin" field.
func VinLTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldVin, v))
}

// VinContains applies the Contains predicate on the "vin" field.
func VinContains(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContains(FieldVin, v))
}

// VinHasPrefix applies the HasPrefix predicate on the "vin" field.
func VinHasPrefix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasPrefix(FieldVin, v))
}

// VinHasSuffix applies the HasSuffix predicate on the "vin" field.
func VinHasSuffix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasSuffix(FieldVin, v))
}

// VinIsNil applies the IsNil predicate on the "vin" field.
func VinIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldVin))
}

// VinNotNil applies the NotNil predicate on the "vin" field.
func VinNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldVin))
}

// VinEqualFold applies the EqualFold predicate on the "vin" field.
func VinEqualFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEqualFold(FieldVin, v))
}

// VinContainsFold applies the ContainsFold predicate on the "vin" field.
func VinContainsFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContainsFold(FieldVin, v))
}

// EquipmentManufacturerIDEQ applies the EQ predicate on the "equipment_manufacturer_id" field.
func EquipmentManufacturerIDEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldEquipmentManufacturerID, v))
}

// EquipmentManufacturerIDNEQ applies the NEQ predicate on the "equipment_manufacturer_id" field.
func EquipmentManufacturerIDNEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldEquipmentManufacturerID, v))
}

// EquipmentManufacturerIDIn applies the In predicate on the "equipment_manufacturer_id" field.
func EquipmentManufacturerIDIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldEquipmentManufacturerID, vs...))
}

// EquipmentManufacturerIDNotIn applies the NotIn predicate on the "equipment_manufacturer_id" field.
func EquipmentManufacturerIDNotIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldEquipmentManufacturerID, vs...))
}

// EquipmentManufacturerIDIsNil applies the IsNil predicate on the "equipment_manufacturer_id" field.
func EquipmentManufacturerIDIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldEquipmentManufacturerID))
}

// EquipmentManufacturerIDNotNil applies the NotNil predicate on the "equipment_manufacturer_id" field.
func EquipmentManufacturerIDNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldEquipmentManufacturerID))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContainsFold(FieldModel, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int16) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int16) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int16) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int16) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int16) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int16) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int16) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int16) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldYear, v))
}

// YearIsNil applies the IsNil predicate on the "year" field.
func YearIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldYear))
}

// YearNotNil applies the NotNil predicate on the "year" field.
func YearNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldYear))
}

// LicensePlateNumberEQ applies the EQ predicate on the "license_plate_number" field.
func LicensePlateNumberEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldLicensePlateNumber, v))
}

// LicensePlateNumberNEQ applies the NEQ predicate on the "license_plate_number" field.
func LicensePlateNumberNEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldLicensePlateNumber, v))
}

// LicensePlateNumberIn applies the In predicate on the "license_plate_number" field.
func LicensePlateNumberIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldLicensePlateNumber, vs...))
}

// LicensePlateNumberNotIn applies the NotIn predicate on the "license_plate_number" field.
func LicensePlateNumberNotIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldLicensePlateNumber, vs...))
}

// LicensePlateNumberGT applies the GT predicate on the "license_plate_number" field.
func LicensePlateNumberGT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldLicensePlateNumber, v))
}

// LicensePlateNumberGTE applies the GTE predicate on the "license_plate_number" field.
func LicensePlateNumberGTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldLicensePlateNumber, v))
}

// LicensePlateNumberLT applies the LT predicate on the "license_plate_number" field.
func LicensePlateNumberLT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldLicensePlateNumber, v))
}

// LicensePlateNumberLTE applies the LTE predicate on the "license_plate_number" field.
func LicensePlateNumberLTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldLicensePlateNumber, v))
}

// LicensePlateNumberContains applies the Contains predicate on the "license_plate_number" field.
func LicensePlateNumberContains(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContains(FieldLicensePlateNumber, v))
}

// LicensePlateNumberHasPrefix applies the HasPrefix predicate on the "license_plate_number" field.
func LicensePlateNumberHasPrefix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasPrefix(FieldLicensePlateNumber, v))
}

// LicensePlateNumberHasSuffix applies the HasSuffix predicate on the "license_plate_number" field.
func LicensePlateNumberHasSuffix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasSuffix(FieldLicensePlateNumber, v))
}

// LicensePlateNumberIsNil applies the IsNil predicate on the "license_plate_number" field.
func LicensePlateNumberIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldLicensePlateNumber))
}

// LicensePlateNumberNotNil applies the NotNil predicate on the "license_plate_number" field.
func LicensePlateNumberNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldLicensePlateNumber))
}

// LicensePlateNumberEqualFold applies the EqualFold predicate on the "license_plate_number" field.
func LicensePlateNumberEqualFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEqualFold(FieldLicensePlateNumber, v))
}

// LicensePlateNumberContainsFold applies the ContainsFold predicate on the "license_plate_number" field.
func LicensePlateNumberContainsFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContainsFold(FieldLicensePlateNumber, v))
}

// StateIDEQ applies the EQ predicate on the "state_id" field.
func StateIDEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldStateID, v))
}

// StateIDNEQ applies the NEQ predicate on the "state_id" field.
func StateIDNEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldStateID, v))
}

// StateIDIn applies the In predicate on the "state_id" field.
func StateIDIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldStateID, vs...))
}

// StateIDNotIn applies the NotIn predicate on the "state_id" field.
func StateIDNotIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldStateID, vs...))
}

// StateIDIsNil applies the IsNil predicate on the "state_id" field.
func StateIDIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldStateID))
}

// StateIDNotNil applies the NotNil predicate on the "state_id" field.
func StateIDNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldStateID))
}

// FleetCodeIDEQ applies the EQ predicate on the "fleet_code_id" field.
func FleetCodeIDEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldFleetCodeID, v))
}

// FleetCodeIDNEQ applies the NEQ predicate on the "fleet_code_id" field.
func FleetCodeIDNEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldFleetCodeID, v))
}

// FleetCodeIDIn applies the In predicate on the "fleet_code_id" field.
func FleetCodeIDIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldFleetCodeID, vs...))
}

// FleetCodeIDNotIn applies the NotIn predicate on the "fleet_code_id" field.
func FleetCodeIDNotIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldFleetCodeID, vs...))
}

// LastInspectionDateEQ applies the EQ predicate on the "last_inspection_date" field.
func LastInspectionDateEQ(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldLastInspectionDate, v))
}

// LastInspectionDateNEQ applies the NEQ predicate on the "last_inspection_date" field.
func LastInspectionDateNEQ(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldLastInspectionDate, v))
}

// LastInspectionDateIn applies the In predicate on the "last_inspection_date" field.
func LastInspectionDateIn(vs ...*pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldLastInspectionDate, vs...))
}

// LastInspectionDateNotIn applies the NotIn predicate on the "last_inspection_date" field.
func LastInspectionDateNotIn(vs ...*pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldLastInspectionDate, vs...))
}

// LastInspectionDateGT applies the GT predicate on the "last_inspection_date" field.
func LastInspectionDateGT(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldLastInspectionDate, v))
}

// LastInspectionDateGTE applies the GTE predicate on the "last_inspection_date" field.
func LastInspectionDateGTE(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldLastInspectionDate, v))
}

// LastInspectionDateLT applies the LT predicate on the "last_inspection_date" field.
func LastInspectionDateLT(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldLastInspectionDate, v))
}

// LastInspectionDateLTE applies the LTE predicate on the "last_inspection_date" field.
func LastInspectionDateLTE(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldLastInspectionDate, v))
}

// LastInspectionDateIsNil applies the IsNil predicate on the "last_inspection_date" field.
func LastInspectionDateIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldLastInspectionDate))
}

// LastInspectionDateNotNil applies the NotNil predicate on the "last_inspection_date" field.
func LastInspectionDateNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldLastInspectionDate))
}

// RegistrationNumberEQ applies the EQ predicate on the "registration_number" field.
func RegistrationNumberEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldRegistrationNumber, v))
}

// RegistrationNumberNEQ applies the NEQ predicate on the "registration_number" field.
func RegistrationNumberNEQ(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldRegistrationNumber, v))
}

// RegistrationNumberIn applies the In predicate on the "registration_number" field.
func RegistrationNumberIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldRegistrationNumber, vs...))
}

// RegistrationNumberNotIn applies the NotIn predicate on the "registration_number" field.
func RegistrationNumberNotIn(vs ...string) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldRegistrationNumber, vs...))
}

// RegistrationNumberGT applies the GT predicate on the "registration_number" field.
func RegistrationNumberGT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldRegistrationNumber, v))
}

// RegistrationNumberGTE applies the GTE predicate on the "registration_number" field.
func RegistrationNumberGTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldRegistrationNumber, v))
}

// RegistrationNumberLT applies the LT predicate on the "registration_number" field.
func RegistrationNumberLT(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldRegistrationNumber, v))
}

// RegistrationNumberLTE applies the LTE predicate on the "registration_number" field.
func RegistrationNumberLTE(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldRegistrationNumber, v))
}

// RegistrationNumberContains applies the Contains predicate on the "registration_number" field.
func RegistrationNumberContains(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContains(FieldRegistrationNumber, v))
}

// RegistrationNumberHasPrefix applies the HasPrefix predicate on the "registration_number" field.
func RegistrationNumberHasPrefix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasPrefix(FieldRegistrationNumber, v))
}

// RegistrationNumberHasSuffix applies the HasSuffix predicate on the "registration_number" field.
func RegistrationNumberHasSuffix(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldHasSuffix(FieldRegistrationNumber, v))
}

// RegistrationNumberIsNil applies the IsNil predicate on the "registration_number" field.
func RegistrationNumberIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldRegistrationNumber))
}

// RegistrationNumberNotNil applies the NotNil predicate on the "registration_number" field.
func RegistrationNumberNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldRegistrationNumber))
}

// RegistrationNumberEqualFold applies the EqualFold predicate on the "registration_number" field.
func RegistrationNumberEqualFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldEqualFold(FieldRegistrationNumber, v))
}

// RegistrationNumberContainsFold applies the ContainsFold predicate on the "registration_number" field.
func RegistrationNumberContainsFold(v string) predicate.Trailer {
	return predicate.Trailer(sql.FieldContainsFold(FieldRegistrationNumber, v))
}

// RegistrationStateIDEQ applies the EQ predicate on the "registration_state_id" field.
func RegistrationStateIDEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldRegistrationStateID, v))
}

// RegistrationStateIDNEQ applies the NEQ predicate on the "registration_state_id" field.
func RegistrationStateIDNEQ(v uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldRegistrationStateID, v))
}

// RegistrationStateIDIn applies the In predicate on the "registration_state_id" field.
func RegistrationStateIDIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldRegistrationStateID, vs...))
}

// RegistrationStateIDNotIn applies the NotIn predicate on the "registration_state_id" field.
func RegistrationStateIDNotIn(vs ...uuid.UUID) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldRegistrationStateID, vs...))
}

// RegistrationStateIDIsNil applies the IsNil predicate on the "registration_state_id" field.
func RegistrationStateIDIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldRegistrationStateID))
}

// RegistrationStateIDNotNil applies the NotNil predicate on the "registration_state_id" field.
func RegistrationStateIDNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldRegistrationStateID))
}

// RegistrationExpirationDateEQ applies the EQ predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateEQ(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldEQ(FieldRegistrationExpirationDate, v))
}

// RegistrationExpirationDateNEQ applies the NEQ predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateNEQ(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldNEQ(FieldRegistrationExpirationDate, v))
}

// RegistrationExpirationDateIn applies the In predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateIn(vs ...*pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldIn(FieldRegistrationExpirationDate, vs...))
}

// RegistrationExpirationDateNotIn applies the NotIn predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateNotIn(vs ...*pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldNotIn(FieldRegistrationExpirationDate, vs...))
}

// RegistrationExpirationDateGT applies the GT predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateGT(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldGT(FieldRegistrationExpirationDate, v))
}

// RegistrationExpirationDateGTE applies the GTE predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateGTE(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldGTE(FieldRegistrationExpirationDate, v))
}

// RegistrationExpirationDateLT applies the LT predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateLT(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldLT(FieldRegistrationExpirationDate, v))
}

// RegistrationExpirationDateLTE applies the LTE predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateLTE(v *pgtype.Date) predicate.Trailer {
	return predicate.Trailer(sql.FieldLTE(FieldRegistrationExpirationDate, v))
}

// RegistrationExpirationDateIsNil applies the IsNil predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateIsNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldIsNull(FieldRegistrationExpirationDate))
}

// RegistrationExpirationDateNotNil applies the NotNil predicate on the "registration_expiration_date" field.
func RegistrationExpirationDateNotNil() predicate.Trailer {
	return predicate.Trailer(sql.FieldNotNull(FieldRegistrationExpirationDate))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmentType applies the HasEdge predicate on the "equipment_type" edge.
func HasEquipmentType() predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EquipmentTypeTable, EquipmentTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentTypeWith applies the HasEdge predicate on the "equipment_type" edge with a given conditions (other predicates).
func HasEquipmentTypeWith(preds ...predicate.EquipmentType) predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := newEquipmentTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmentManufacturer applies the HasEdge predicate on the "equipment_manufacturer" edge.
func HasEquipmentManufacturer() predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EquipmentManufacturerTable, EquipmentManufacturerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentManufacturerWith applies the HasEdge predicate on the "equipment_manufacturer" edge with a given conditions (other predicates).
func HasEquipmentManufacturerWith(preds ...predicate.EquipmentManufactuer) predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := newEquipmentManufacturerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasState applies the HasEdge predicate on the "state" edge.
func HasState() predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StateTable, StateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStateWith applies the HasEdge predicate on the "state" edge with a given conditions (other predicates).
func HasStateWith(preds ...predicate.UsState) predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := newStateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRegistrationState applies the HasEdge predicate on the "registration_state" edge.
func HasRegistrationState() predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RegistrationStateTable, RegistrationStateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegistrationStateWith applies the HasEdge predicate on the "registration_state" edge with a given conditions (other predicates).
func HasRegistrationStateWith(preds ...predicate.UsState) predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := newRegistrationStateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFleetCode applies the HasEdge predicate on the "fleet_code" edge.
func HasFleetCode() predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FleetCodeTable, FleetCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFleetCodeWith applies the HasEdge predicate on the "fleet_code" edge with a given conditions (other predicates).
func HasFleetCodeWith(preds ...predicate.FleetCode) predicate.Trailer {
	return predicate.Trailer(func(s *sql.Selector) {
		step := newFleetCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Trailer) predicate.Trailer {
	return predicate.Trailer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Trailer) predicate.Trailer {
	return predicate.Trailer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Trailer) predicate.Trailer {
	return predicate.Trailer(sql.NotPredicates(p))
}
