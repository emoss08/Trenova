package main

const templateV1 = `// Code generated by gen-trenova. DO NOT EDIT.

package {{.PackageName}}

import (
{{- range $pkg, $path := .Imports}}
{{- if eq $path "database/sql"}}
	"{{$path}}"
{{- end}}
{{- end}}
	"context"

	"github.com/uptrace/bun"
{{- range $pkg, $path := .Imports}}
{{- if ne $path "database/sql"}}
	"{{$path}}"
{{- end}}
{{- end}}
)

// {{.LowerName}}FieldConfig provides field configuration for {{.TypeName}}
type {{.LowerName}}FieldConfig struct {
	Name       string
	Column     string
	Sortable   bool
	Filterable bool
}

// {{.TypeName}}Query provides type-safe query helpers and constants
var {{.TypeName}}Query = struct {
	// Table and alias constants
	Table    string
	Alias    string
	IDPrefix string

	// Field names
	Field struct {
{{- range .Fields}}
{{- if .DBName}}
		{{.Name}} string
{{- end}}
{{- end}}
	}

	// Column helpers
	Column  func(field string) string
	Columns func(fields ...string) []string

	// WHERE clause helpers
	Where struct {
{{- range .Fields}}
{{- if .DBName}}
	{{- if eq .GoType "string"}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}Contains     func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}HasPrefix    func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}HasSuffix    func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
	{{- else if hasPrefix .GoType "*string"}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}Contains     func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}HasPrefix    func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}HasSuffix    func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
	{{- else if or (eq .GoType "int") (eq .GoType "int64") (eq .GoType "int32") (eq .GoType "int16") (eq .GoType "int8")}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if hasPrefix .GoType "*"}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- else if or (eq .GoType "uint") (eq .GoType "uint64") (eq .GoType "uint32") (eq .GoType "uint16") (eq .GoType "uint8")}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if hasPrefix .GoType "*"}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- else if or (eq .GoType "float32") (eq .GoType "float64")}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if hasPrefix .GoType "*"}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- else if hasPrefix .GoType "decimal."}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if hasPrefix .GoType "decimal.Null"}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- else}}
		{{- /* Default for other types */}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if or (hasPrefix .GoType "*") (hasPrefix .GoType "sql.")}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- end}}
{{- end}}
{{- end}}
		
		// Tenant helpers if both fields exist
{{- if and (hasField .Fields "OrganizationID") (hasField .Fields "BusinessUnitID")}}
		Tenant func(q *bun.SelectQuery, orgID, buID {{getFieldType .Fields "OrganizationID"}}) *bun.SelectQuery
{{- end}}
	}

	// UPDATE clause helpers
	Update struct {
{{- if hasField .Fields "Version"}}
		WhereIDAndVersion func(q *bun.UpdateQuery, id {{getFieldType .Fields "ID"}}, version {{getFieldType .Fields "Version"}}) *bun.UpdateQuery
{{- end}}
	}

	// ORDER BY helpers
	OrderBy struct {
		Field     func(field string, desc bool) string
		Default   func() []string
{{- if hasField .Fields "Status"}}
		Status    func(desc bool) string
{{- end}}
{{- if hasField .Fields "Code"}}
		Code      func(desc bool) string
{{- end}}
{{- if hasField .Fields "CreatedAt"}}
		CreatedAt func(desc bool) string
{{- end}}
{{- if hasField .Fields "UpdatedAt"}}
		UpdatedAt func(desc bool) string
{{- end}}
	}

	// Field configuration
	FieldConfig  func() map[string]{{.LowerName}}FieldConfig
	IsSortable   func(field string) bool
	IsFilterable func(field string) bool
}{
	// Table and alias constants
	Table:    "{{.TableName}}",
	Alias:    "{{.TableAlias}}",
	IDPrefix: "{{.IDPrefix}}",

	// Field names
	Field: struct {
{{- range .Fields}}
{{- if .DBName}}
		{{.Name}} string
{{- end}}
{{- end}}
	}{
{{- range .Fields}}
{{- if .DBName}}
		{{.Name}}: "{{.DBName}}",
{{- end}}
{{- end}}
	},

	// Column helpers
	Column: func(field string) string {
		return "{{.TableAlias}}." + field
	},
	Columns: func(fields ...string) []string {
		cols := make([]string, len(fields))
		for i, field := range fields {
			cols[i] = "{{.TableAlias}}." + field
		}
		return cols
	},

	// WHERE clause helpers
	Where: struct {
{{- range .Fields}}
{{- if .DBName}}
	{{- if eq .GoType "string"}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}Contains     func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}HasPrefix    func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}HasSuffix    func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
	{{- else if hasPrefix .GoType "*string"}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}Contains     func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}HasPrefix    func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}HasSuffix    func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
	{{- else if or (eq .GoType "int") (eq .GoType "int64") (eq .GoType "int32") (eq .GoType "int16") (eq .GoType "int8")}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if hasPrefix .GoType "*"}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- else if or (eq .GoType "uint") (eq .GoType "uint64") (eq .GoType "uint32") (eq .GoType "uint16") (eq .GoType "uint8")}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if hasPrefix .GoType "*"}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- else if or (eq .GoType "float32") (eq .GoType "float64")}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if hasPrefix .GoType "*"}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- else if hasPrefix .GoType "decimal."}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}In           func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}NotIn        func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery
		{{.Name}}GT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}GTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LT           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}LTE          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if hasPrefix .GoType "decimal.Null"}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- else}}
		{{- /* Default for other types */}}
		{{.Name}}EQ           func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{.Name}}NEQ          func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery
		{{- if or (hasPrefix .GoType "*") (hasPrefix .GoType "sql.")}}
		{{.Name}}IsNull       func(q *bun.SelectQuery) *bun.SelectQuery
		{{.Name}}IsNotNull    func(q *bun.SelectQuery) *bun.SelectQuery
		{{- end}}
	{{- end}}
{{- end}}
{{- end}}
		
{{- if and (hasField .Fields "OrganizationID") (hasField .Fields "BusinessUnitID")}}
		Tenant func(q *bun.SelectQuery, orgID, buID {{getFieldType .Fields "OrganizationID"}}) *bun.SelectQuery
{{- end}}
	}{
{{- range .Fields}}
{{- if .DBName}}
	{{- if eq .GoType "string"}}
		{{.Name}}EQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}NEQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}In: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}NotIn: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}GT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}GTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}Contains: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), "%"+v+"%")
		},
		{{.Name}}HasPrefix: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v+"%")
		},
		{{.Name}}HasSuffix: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), "%"+v)
		},
	{{- else if hasPrefix .GoType "*string"}}
		{{.Name}}EQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}NEQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}In: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}NotIn: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}GT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}GTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}Contains: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), "%"+*v+"%")
		},
		{{.Name}}HasPrefix: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), *v+"%")
		},
		{{.Name}}HasSuffix: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? ILIKE ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), "%"+*v)
		},
		{{.Name}}IsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{.Name}}IsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
	{{- else if or (eq .GoType "int") (eq .GoType "int64") (eq .GoType "int32") (eq .GoType "int16") (eq .GoType "int8")}}
		{{.Name}}EQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}NEQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}In: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}NotIn: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}GT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}GTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{- if hasPrefix .GoType "*"}}
		{{.Name}}IsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{.Name}}IsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{- end}}
	{{- else if or (eq .GoType "uint") (eq .GoType "uint64") (eq .GoType "uint32") (eq .GoType "uint16") (eq .GoType "uint8")}}
		{{.Name}}EQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}NEQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}In: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}NotIn: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}GT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}GTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{- if hasPrefix .GoType "*"}}
		{{.Name}}IsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{.Name}}IsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{- end}}
	{{- else if or (eq .GoType "float32") (eq .GoType "float64")}}
		{{.Name}}EQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}NEQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}In: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}NotIn: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}GT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}GTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{- if hasPrefix .GoType "*"}}
		{{.Name}}IsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{.Name}}IsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{- end}}
	{{- else if hasPrefix .GoType "decimal."}}
		{{.Name}}EQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}NEQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}In: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}NotIn: func(q *bun.SelectQuery, v []{{.GoType}}) *bun.SelectQuery {
			return q.Where("? NOT IN (?)", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), bun.In(v))
		},
		{{.Name}}GT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? > ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}GTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? >= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LT: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? < ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}LTE: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? <= ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{- if hasPrefix .GoType "decimal.Null"}}
		{{.Name}}IsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{.Name}}IsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{- end}}
	{{- else}}
		{{- /* Default for other types */}}
		{{.Name}}EQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? = ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{.Name}}NEQ: func(q *bun.SelectQuery, v {{.GoType}}) *bun.SelectQuery {
			return q.Where("? != ?", bun.Ident("{{$.TableAlias}}.{{.DBName}}"), v)
		},
		{{- if or (hasPrefix .GoType "*") (hasPrefix .GoType "sql.")}}
		{{.Name}}IsNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{.Name}}IsNotNull: func(q *bun.SelectQuery) *bun.SelectQuery {
			return q.Where("? IS NOT NULL", bun.Ident("{{$.TableAlias}}.{{.DBName}}"))
		},
		{{- end}}
	{{- end}}
{{- end}}
{{- end}}
		
{{- if and (hasField .Fields "OrganizationID") (hasField .Fields "BusinessUnitID")}}
		Tenant: func(q *bun.SelectQuery, orgID, buID {{getFieldType .Fields "OrganizationID"}}) *bun.SelectQuery {
			return q.
				Where("? = ?", bun.Ident("{{.TableAlias}}.organization_id"), orgID).
				Where("? = ?", bun.Ident("{{.TableAlias}}.business_unit_id"), buID)
		},
{{- end}}
	},

	// UPDATE clause helpers
	Update: struct {
{{- if hasField .Fields "Version"}}
		WhereIDAndVersion func(q *bun.UpdateQuery, id {{getFieldType .Fields "ID"}}, version {{getFieldType .Fields "Version"}}) *bun.UpdateQuery
{{- end}}
	}{
{{- if hasField .Fields "Version"}}
		WhereIDAndVersion: func(q *bun.UpdateQuery, id {{getFieldType .Fields "ID"}}, version {{getFieldType .Fields "Version"}}) *bun.UpdateQuery {
			return q.
				Where("? = ?", bun.Ident("{{.TableAlias}}.id"), id).
				Where("? = ?", bun.Ident("{{.TableAlias}}.version"), version)
		},
{{- end}}
	},

	// ORDER BY helpers
	OrderBy: struct {
		Field     func(field string, desc bool) string
		Default   func() []string
{{- if hasField .Fields "Status"}}
		Status    func(desc bool) string
{{- end}}
{{- if hasField .Fields "Code"}}
		Code      func(desc bool) string
{{- end}}
{{- if hasField .Fields "CreatedAt"}}
		CreatedAt func(desc bool) string
{{- end}}
{{- if hasField .Fields "UpdatedAt"}}
		UpdatedAt func(desc bool) string
{{- end}}
	}{
		Field: func(field string, desc bool) string {
			orderClause := "{{.TableAlias}}." + field
			if desc {
				orderClause += " DESC"
			} else {
				orderClause += " ASC"
			}
			return orderClause
		},
		Default: func() []string {
			return []string{
{{- if hasField .Fields "Status"}}
				"{{.TableAlias}}.status ASC",
{{- end}}
{{- if hasField .Fields "Code"}}
				"{{.TableAlias}}.code ASC",
{{- else if hasField .Fields "Name"}}
				"{{.TableAlias}}.name ASC",
{{- else}}
				"{{.TableAlias}}.created_at DESC",
{{- end}}
			}
		},
{{- if hasField .Fields "Status"}}
		Status: func(desc bool) string {
			if desc {
				return "{{.TableAlias}}.status DESC"
			}
			return "{{.TableAlias}}.status ASC"
		},
{{- end}}
{{- if hasField .Fields "Code"}}
		Code: func(desc bool) string {
			if desc {
				return "{{.TableAlias}}.code DESC"
			}
			return "{{.TableAlias}}.code ASC"
		},
{{- end}}
{{- if hasField .Fields "CreatedAt"}}
		CreatedAt: func(desc bool) string {
			if desc {
				return "{{.TableAlias}}.created_at DESC"
			}
			return "{{.TableAlias}}.created_at ASC"
		},
{{- end}}
{{- if hasField .Fields "UpdatedAt"}}
		UpdatedAt: func(desc bool) string {
			if desc {
				return "{{.TableAlias}}.updated_at DESC"
			}
			return "{{.TableAlias}}.updated_at ASC"
		},
{{- end}}
	},

	// Field configuration
	FieldConfig: func() map[string]{{.LowerName}}FieldConfig {
		return map[string]{{.LowerName}}FieldConfig{
{{- range .Fields}}
{{- if .DBName}}
			"{{.DBName}}": {
				Name:       "{{.DBName}}",
				Column:     "{{$.TableAlias}}.{{.DBName}}",
				Sortable:   {{if .Sortable}}true{{else}}false{{end}},
				Filterable: {{if .Filterable}}true{{else}}false{{end}},
			},
{{- end}}
{{- end}}
		}
	},
	IsSortable: func(field string) bool {
		configs := map[string]{{.LowerName}}FieldConfig{
{{- range .Fields}}
{{- if .DBName}}
			"{{.DBName}}": {
				Name:       "{{.DBName}}",
				Column:     "{{$.TableAlias}}.{{.DBName}}",
				Sortable:   {{if .Sortable}}true{{else}}false{{end}},
				Filterable: {{if .Filterable}}true{{else}}false{{end}},
			},
{{- end}}
{{- end}}
		}
		if fc, ok := configs[field]; ok {
			return fc.Sortable
		}
		return false
	},
	IsFilterable: func(field string) bool {
		configs := map[string]{{.LowerName}}FieldConfig{
{{- range .Fields}}
{{- if .DBName}}
			"{{.DBName}}": {
				Name:       "{{.DBName}}",
				Column:     "{{$.TableAlias}}.{{.DBName}}",
				Sortable:   {{if .Sortable}}true{{else}}false{{end}},
				Filterable: {{if .Filterable}}true{{else}}false{{end}},
			},
{{- end}}
{{- end}}
		}
		if fc, ok := configs[field]; ok {
			return fc.Filterable
		}
		return false
	},
}

// {{.TypeName}}QueryBuilder provides a fluent interface for building queries
type {{.TypeName}}QueryBuilder struct {
	query *bun.SelectQuery
}

// New{{.TypeName}}Query creates a new query builder
func New{{.TypeName}}Query(db bun.IDB) *{{.TypeName}}QueryBuilder {
	return &{{.TypeName}}QueryBuilder{
		query: db.NewSelect().Model((*{{.TypeName}})(nil)),
	}
}

// FromQuery creates a query builder from an existing query
func {{.TypeName}}FromQuery(q *bun.SelectQuery) *{{.TypeName}}QueryBuilder {
	return &{{.TypeName}}QueryBuilder{query: q}
}

// Query returns the underlying bun.SelectQuery
func (b *{{.TypeName}}QueryBuilder) Query() *bun.SelectQuery {
	return b.query
}

// Model sets the model for the query
func (b *{{.TypeName}}QueryBuilder) Model(model interface{}) *{{.TypeName}}QueryBuilder {
	b.query = b.query.Model(model)
	return b
}

// Field predicates
{{- range .Fields}}
{{- if .DBName}}
{{- if eq .GoType "string"}}

// Where{{.Name}}EQ adds a WHERE {{.DBName}} = ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}EQ(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}EQ(b.query, v)
	return b
}

// Where{{.Name}}NEQ adds a WHERE {{.DBName}} != ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}NEQ(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}NEQ(b.query, v)
	return b
}

// Where{{.Name}}In adds a WHERE {{.DBName}} IN (?) condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}In(v []{{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}In(b.query, v)
	return b
}

// Where{{.Name}}NotIn adds a WHERE {{.DBName}} NOT IN (?) condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}NotIn(v []{{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}NotIn(b.query, v)
	return b
}

// Where{{.Name}}Contains adds a WHERE {{.DBName}} LIKE ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}Contains(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}Contains(b.query, v)
	return b
}

// Where{{.Name}}HasPrefix adds a WHERE {{.DBName}} LIKE ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}HasPrefix(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}HasPrefix(b.query, v)
	return b
}

// Where{{.Name}}HasSuffix adds a WHERE {{.DBName}} LIKE ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}HasSuffix(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}HasSuffix(b.query, v)
	return b
}
{{- else if hasPrefix .GoType "*string"}}

// Where{{.Name}}EQ adds a WHERE {{.DBName}} = ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}EQ(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}EQ(b.query, v)
	return b
}

// Where{{.Name}}NEQ adds a WHERE {{.DBName}} != ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}NEQ(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}NEQ(b.query, v)
	return b
}

// Where{{.Name}}IsNull adds a WHERE {{.DBName}} IS NULL condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}IsNull() *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}IsNull(b.query)
	return b
}

// Where{{.Name}}IsNotNull adds a WHERE {{.DBName}} IS NOT NULL condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}IsNotNull() *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}IsNotNull(b.query)
	return b
}
{{- else if or (hasPrefix .GoType "int") (hasPrefix .GoType "uint") (hasPrefix .GoType "float") (hasPrefix .GoType "decimal.")}}

// Where{{.Name}}EQ adds a WHERE {{.DBName}} = ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}EQ(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}EQ(b.query, v)
	return b
}

// Where{{.Name}}NEQ adds a WHERE {{.DBName}} != ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}NEQ(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}NEQ(b.query, v)
	return b
}

// Where{{.Name}}GT adds a WHERE {{.DBName}} > ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}GT(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}GT(b.query, v)
	return b
}

// Where{{.Name}}GTE adds a WHERE {{.DBName}} >= ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}GTE(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}GTE(b.query, v)
	return b
}

// Where{{.Name}}LT adds a WHERE {{.DBName}} < ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}LT(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}LT(b.query, v)
	return b
}

// Where{{.Name}}LTE adds a WHERE {{.DBName}} <= ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}LTE(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}LTE(b.query, v)
	return b
}

// Where{{.Name}}In adds a WHERE {{.DBName}} IN (?) condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}In(v []{{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}In(b.query, v)
	return b
}

// Where{{.Name}}NotIn adds a WHERE {{.DBName}} NOT IN (?) condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}NotIn(v []{{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}NotIn(b.query, v)
	return b
}
{{- else}}

// Where{{.Name}}EQ adds a WHERE {{.DBName}} = ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}EQ(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}EQ(b.query, v)
	return b
}

// Where{{.Name}}NEQ adds a WHERE {{.DBName}} != ? condition
func (b *{{$.TypeName}}QueryBuilder) Where{{.Name}}NEQ(v {{.GoType}}) *{{$.TypeName}}QueryBuilder {
	b.query = {{$.TypeName}}Query.Where.{{.Name}}NEQ(b.query, v)
	return b
}
{{- end}}
{{- end}}
{{- end}}

// Common helper methods

{{- if and (hasField .Fields "OrganizationID") (hasField .Fields "BusinessUnitID")}}
// WhereTenant adds WHERE conditions for both organization and business unit
func (b *{{.TypeName}}QueryBuilder) WhereTenant(orgID, buID {{getFieldType .Fields "OrganizationID"}}) *{{.TypeName}}QueryBuilder {
	b.query = {{.TypeName}}Query.Where.Tenant(b.query, orgID, buID)
	return b
}
{{- end}}

// WhereGroup adds a WHERE clause with grouped conditions
func (b *{{.TypeName}}QueryBuilder) WhereGroup(sep string, fn func(*{{.TypeName}}QueryBuilder) *{{.TypeName}}QueryBuilder) *{{.TypeName}}QueryBuilder {
	b.query = b.query.WhereGroup(sep, func(q *bun.SelectQuery) *bun.SelectQuery {
		// Create a temporary builder with the subquery
		tmpBuilder := &{{.TypeName}}QueryBuilder{query: q}
		// Apply the user's conditions
		result := fn(tmpBuilder)
		// Return the modified query
		return result.query
	})
	return b
}

// Where adds a custom WHERE condition
func (b *{{.TypeName}}QueryBuilder) Where(query string, args ...interface{}) *{{.TypeName}}QueryBuilder {
	b.query = b.query.Where(query, args...)
	return b
}

// OrderBy adds an ORDER BY clause
func (b *{{.TypeName}}QueryBuilder) OrderBy(column string, desc ...bool) *{{.TypeName}}QueryBuilder {
	descending := false
	if len(desc) > 0 {
		descending = desc[0]
	}
	b.query = b.query.Order({{.TypeName}}Query.OrderBy.Field(column, descending))
	return b
}

// Limit sets the query limit
func (b *{{.TypeName}}QueryBuilder) Limit(n int) *{{.TypeName}}QueryBuilder {
	b.query = b.query.Limit(n)
	return b
}

// Offset sets the query offset
func (b *{{.TypeName}}QueryBuilder) Offset(n int) *{{.TypeName}}QueryBuilder {
	b.query = b.query.Offset(n)
	return b
}

// Count returns the count of matching records
func (b *{{.TypeName}}QueryBuilder) Count(ctx context.Context) (int, error) {
	return b.query.Count(ctx)
}

// Exists checks if any matching records exist
func (b *{{.TypeName}}QueryBuilder) Exists(ctx context.Context) (bool, error) {
	return b.query.Exists(ctx)
}

// Scan executes the query and scans the result
func (b *{{.TypeName}}QueryBuilder) Scan(ctx context.Context, dest ...interface{}) error {
	return b.query.Scan(ctx, dest...)
}

// ScanAndCount executes the query and scans the result
func (b *{{.TypeName}}QueryBuilder) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	return b.query.ScanAndCount(ctx, dest...)
}

// All executes the query and returns all results
func (b *{{.TypeName}}QueryBuilder) All(ctx context.Context) ([]*{{.TypeName}}, error) {
	var entities []*{{.TypeName}}
	err := b.query.Scan(ctx, &entities)
	return entities, err
}

// AllWithCount executes the query and returns all results with total count
func (b *{{.TypeName}}QueryBuilder) AllWithCount(ctx context.Context) ([]*{{.TypeName}}, int, error) {
	var entities []*{{.TypeName}}
	count, err := b.query.ScanAndCount(ctx, &entities)
	return entities, count, err
}

// One executes the query and returns a single result
func (b *{{.TypeName}}QueryBuilder) One(ctx context.Context) (*{{.TypeName}}, error) {
	entity := new({{.TypeName}})
	err := b.query.Limit(1).Scan(ctx, entity)
	return entity, err
}

// First executes the query and returns the first result
// Unlike One, it doesn't add a LIMIT clause
func (b *{{.TypeName}}QueryBuilder) First(ctx context.Context) (*{{.TypeName}}, error) {
	entity := new({{.TypeName}})
	err := b.query.Scan(ctx, entity)
	return entity, err
}

// {{.TypeName}}Build creates a chainable query builder
func {{.TypeName}}Build(db bun.IDB) *{{.TypeName}}QueryBuilder {
	return New{{.TypeName}}Query(db)
}
`
