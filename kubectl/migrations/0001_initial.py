# Generated by Django 4.1.7 on 2023-04-03 16:58

from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("organization", "0016_alter_tablechangealert_table"),
    ]

    operations = [
        migrations.CreateModel(
            name="KubeConfiguration",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="default",
                        help_text="The name of the configuration.",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "host",
                    models.URLField(
                        help_text="The host URL to use when communicating with the API server.",
                        max_length=255,
                        verbose_name="Host",
                    ),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True,
                        help_text="The API key to use when authenticating with the API server.",
                        max_length=255,
                        verbose_name="API Key",
                    ),
                ),
                (
                    "api_key_prefix",
                    models.CharField(
                        blank=True,
                        help_text="The prefix for API key when used as HTTP header. The default is 'Bearer'.",
                        max_length=255,
                        verbose_name="API Key Prefix",
                    ),
                ),
                (
                    "refresh_api_key_hook",
                    models.CharField(
                        blank=True,
                        help_text="A function that receives the unmodified configuration and returns a new one with updated authentication information.",
                        max_length=255,
                        verbose_name="Refresh API Key Hook",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="The username for HTTP basic authentication.",
                        max_length=255,
                        verbose_name="Username",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        blank=True,
                        help_text="The password for HTTP basic authentication.",
                        max_length=255,
                        verbose_name="Password",
                    ),
                ),
                (
                    "discard_unknown_keys",
                    models.BooleanField(
                        default=False,
                        help_text="If true, unknown properties will be discarded during deserialization.",
                        verbose_name="Discard Unknown Keys",
                    ),
                ),
                (
                    "logger",
                    models.CharField(
                        blank=True,
                        help_text="The logger to use for logging. The default is 'logging'.",
                        max_length=255,
                        verbose_name="Logger",
                    ),
                ),
                (
                    "logger_format",
                    models.CharField(
                        blank=True,
                        default="%(asctime)s %(levelname)s %(message)s",
                        help_text="The format of the log messages. The default is '%(asctime)s %(levelname)s %(message)s'.",
                        max_length=255,
                        verbose_name="Logger Format",
                    ),
                ),
                (
                    "logger_stream_handler",
                    models.CharField(
                        blank=True,
                        default="sys.stderr",
                        help_text="The stream handler to use for logging. The default is 'sys.stderr'.",
                        max_length=255,
                        verbose_name="Logger Stream Handler",
                    ),
                ),
                (
                    "logger_file_handler",
                    models.CharField(
                        blank=True,
                        default="logging.FileHandler",
                        help_text="The file handler to use for logging. The default is 'logging.FileHandler'.",
                        max_length=255,
                        verbose_name="Logger File Handler",
                    ),
                ),
                (
                    "logger_file",
                    models.CharField(
                        blank=True,
                        default="kubernetes.log",
                        help_text="The file to use for logging. The default is 'kubernetes.log'.",
                        max_length=255,
                        verbose_name="Logger File",
                    ),
                ),
                (
                    "debug",
                    models.BooleanField(
                        default=True,
                        help_text="If true, will log additional debugging information.",
                        verbose_name="Debug",
                    ),
                ),
                (
                    "verify_ssl",
                    models.BooleanField(
                        default=False,
                        help_text="If true, the SSL certificates will be verified. A CA_BUNDLE path can also be provided.",
                        verbose_name="Verify SSL",
                    ),
                ),
                (
                    "ssl_ca_cert",
                    models.CharField(
                        blank=True,
                        help_text="A filename of the CA cert file to use in verifying the server's certificate.",
                        max_length=255,
                        verbose_name="SSL CA Cert",
                    ),
                ),
                (
                    "key_file",
                    models.CharField(
                        blank=True,
                        help_text="A filename of the client key file used to authenticate with the API server.",
                        max_length=255,
                        verbose_name="Key File",
                    ),
                ),
                (
                    "proxy",
                    models.URLField(
                        blank=True,
                        help_text="A proxy URL or proxy pre-formatted URL string to use during the HTTP request.",
                        max_length=255,
                        verbose_name="Proxy",
                    ),
                ),
                (
                    "no_proxy",
                    models.CharField(
                        blank=True,
                        help_text="A comma-separated list of hostnames and/or CIDRs for which the proxy should not be used.",
                        max_length=255,
                        verbose_name="No Proxy",
                    ),
                ),
                (
                    "proxy_headers",
                    models.CharField(
                        blank=True,
                        help_text="Additional headers to send when using the proxy. The expected format is a dictionary with header name as key and header value as value.",
                        max_length=255,
                        verbose_name="Proxy Headers",
                    ),
                ),
                (
                    "safe_chars_for_path_param",
                    models.CharField(
                        blank=True,
                        default="/",
                        help_text="A list of safe characters for path parameter. The default is '/'.",
                        max_length=255,
                        verbose_name="Safe Chars For Path Param",
                    ),
                ),
                (
                    "retries",
                    models.PositiveIntegerField(
                        default=5,
                        help_text="The number of retries each connection should attempt. The default is 5.",
                        verbose_name="Retries",
                    ),
                ),
                (
                    "organization",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kube_configuration",
                        to="organization.organization",
                        verbose_name="Organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Kube Configuration",
                "verbose_name_plural": "Kube Configurations",
                "db_table": "kube_configuration",
            },
        ),
    ]
