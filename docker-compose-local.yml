x-build-args: &build-args
  DOCKER_BUILDKIT: 1
  GO_VERSION: 1.24
  ALPINE_VERSION: latest

services:
  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_DB: ${DB_NAME:-trenova_go_db}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      POSTGRES_MULTIPLE_EXTENSIONS: "pg_stat_statements,pg_trgm,btree_gin,btree_gist"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-trenova_go_db}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: edoburu/pgbouncer:latest # Using a pre-built image for simplicity
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/trenova_go_db?sslmode=disable
    volumes:
      - ./config/development/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./config/development/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    ports:
      - "6432:6432"
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h localhost -p 6432 -U ${DB_USER:-postgres} -d ${DB_NAME:-trenova_go_db}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30

  redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5674:5672" # RabbitMQ
      - "15674:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "password"
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
      - "rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf" # Configuration file mount
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - app-network

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000 # API
      - 9001:9001 # Console
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  dozzle:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8084:8080
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M

  # email-service:
  #   build:
  #     context: ./microservices/email
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   env_file:
  #     - ./microservices/email/.env
  #   environment:
  #     - EMAIL_SMTP_HOST=mailhog
  #     - EMAIL_SMTP_PORT=1025
  #     - EMAIL_SMTP_USER=
  #     - EMAIL_SMTP_PASSWORD=
  #     - EMAIL_SMTP_TLS_POLICY=none
  #   ports:
  #     - "${EMAIL_PORT:-8082}:${EMAIL_PORT:-8082}"
  #   volumes:
  #     - ./microservices/email/templates:/app/templates
  #   depends_on:
  #     - rabbitmq
  #     - mailhog
  #   networks:
  #     - app-network
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 512M
  #         cpus: '0.3' # Limit CPU usage to 10%

  mailhog:
    image: mailhog/mailhog:latest
    restart: always
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M

volumes:
  pg_data: {}
  redis_data: {}
  minio_data: {}
  rabbitmq_data: {}
  rabbitmq.conf: {}
  watchtower_data: {}

networks:
  app-network:
    name: app-network
    external: true
