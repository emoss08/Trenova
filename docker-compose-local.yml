x-build-args: &build-args
  DOCKER_BUILDKIT: 1
  GO_VERSION: 1.23
  ALPINE_VERSION: latest

services:
  db:
    image: postgres:latest
    container_name: db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_DB: ${DB_NAME:-postgres}
      POSTGRES_MULTIPLE_EXTENSIONS: pg_stat_statements
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "max_replication_slots=1"
    restart: always
    volumes:
      - pg_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  meilisearch:
    image: getmeili/meilisearch:v1.11.3
    container_name: meilisearch
    ports:
      - "7700:7700"
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-masterKey}
      - MEILI_NO_ANALYTICS=${MEILI_NO_ANALYTICS:-true}
      - MEILI_DB_PATH=${MEILI_DB_PATH:-/data.ms}
      - MEILI_ENV=${MEILI_ENV:-development}
    restart: always
    networks:
      - app-network
    volumes:
      - meilisearch_data:/data.ms
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: set -o pipefail;curl -fsS http://localhost:7700/health | grep -q '{"status":"available"}'
      retries: 3
      timeout: 5s

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: quay.io/minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000 # API
      - 9001:9001 # Console
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  pg_data: {}
  redis_data: {}
  minio_data: {}
  meilisearch_data: {}

networks:
  app-network:
    name: app-network
    external: true
