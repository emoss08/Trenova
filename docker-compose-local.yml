x-build-args: &build-args
  DOCKER_BUILDKIT: 1
  GO_VERSION: 1.24
  ALPINE_VERSION: latest

services:
  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_DB: ${DB_NAME:-trenova_go_db}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      POSTGRES_MULTIPLE_EXTENSIONS: "pg_stat_statements,pg_trgm,btree_gin,btree_gist"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-trenova_go_db}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30

  redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_ARGS=--maxmemory 1536mb --maxmemory-policy allkeys-lru
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 2G # Increased for stress testing with 300 connections
          cpus: "1" # Dedicated CPU for Redis performance
        reservations:
          memory: 1G # Reserve memory for consistent performance
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5674:5672" # RabbitMQ
      - "15674:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "password"
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
      - "rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf" # Configuration file mount
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G

  asynqmon:
    image: hibiken/asynqmon:latest
    ports:
      - "8080:8080"
    networks:
      - app-network
    environment:
      REDIS_URL: redis://redis:6379
    deploy:
      resources:
        limits:
          memory: 512M

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000 # API
      - 9001:9001 # Console
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  mailhog:
    image: mailhog/mailhog:latest
    restart: always
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M

volumes:
  pg_data: {}
  redis_data: {}
  minio_data: {}
  rabbitmq_data: {}
  rabbitmq.conf: {}
  watchtower_data: {}

networks:
  app-network:
    name: app-network
    external: true
